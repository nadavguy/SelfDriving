
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b620  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c39c  0800c39c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c39c  0800c39c  0001c39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3a4  0800c3a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3a4  0800c3a4  0001c3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3a8  0800c3a8  0001c3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  24000000  0800c3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000124  0800c4d0  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000184  0800c530  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000974  240001e4  0800c590  000201e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000b58  0800c590  00020b58  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  0800c590  00030000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0004ae79  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008191  00000000  00000000  0006b08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e78  00000000  00000000  00073220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001bc0  00000000  00000000  00075098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00044524  00000000  00000000  00076c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002f1bd  00000000  00000000  000bb17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018b3f0  00000000  00000000  000ea339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  00275729  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000087bc  00000000  00000000  0027577c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b8a8 	.word	0x0800b8a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800b8a8 	.word	0x0800b8a8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96e 	b.w	8000694 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468c      	mov	ip, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8083 	bne.w	80004e6 <__udivmoddi4+0x116>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d947      	bls.n	8000476 <__udivmoddi4+0xa6>
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b142      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ec:	f1c2 0020 	rsb	r0, r2, #32
 80003f0:	fa24 f000 	lsr.w	r0, r4, r0
 80003f4:	4091      	lsls	r1, r2
 80003f6:	4097      	lsls	r7, r2
 80003f8:	ea40 0c01 	orr.w	ip, r0, r1
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbbc f6f8 	udiv	r6, ip, r8
 8000408:	fa1f fe87 	uxth.w	lr, r7
 800040c:	fb08 c116 	mls	r1, r8, r6, ip
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb06 f10e 	mul.w	r1, r6, lr
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000422:	f080 8119 	bcs.w	8000658 <__udivmoddi4+0x288>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8116 	bls.w	8000658 <__udivmoddi4+0x288>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8105 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f240 8102 	bls.w	800065c <__udivmoddi4+0x28c>
 8000458:	3802      	subs	r0, #2
 800045a:	443c      	add	r4, r7
 800045c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	2600      	movs	r6, #0
 8000466:	b11d      	cbz	r5, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c5 4300 	strd	r4, r3, [r5]
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	b902      	cbnz	r2, 800047a <__udivmoddi4+0xaa>
 8000478:	deff      	udf	#255	; 0xff
 800047a:	fab2 f282 	clz	r2, r2
 800047e:	2a00      	cmp	r2, #0
 8000480:	d150      	bne.n	8000524 <__udivmoddi4+0x154>
 8000482:	1bcb      	subs	r3, r1, r7
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	2601      	movs	r6, #1
 800048e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000492:	0c21      	lsrs	r1, r4, #16
 8000494:	fb0e 331c 	mls	r3, lr, ip, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb08 f30c 	mul.w	r3, r8, ip
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0xe2>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	f200 80e9 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x10c>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x10a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80d9 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e7bf      	b.n	8000466 <__udivmoddi4+0x96>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x12e>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f000 80b1 	beq.w	8000652 <__udivmoddi4+0x282>
 80004f0:	2600      	movs	r6, #0
 80004f2:	e9c5 0100 	strd	r0, r1, [r5]
 80004f6:	4630      	mov	r0, r6
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	fab3 f683 	clz	r6, r3
 8000502:	2e00      	cmp	r6, #0
 8000504:	d14a      	bne.n	800059c <__udivmoddi4+0x1cc>
 8000506:	428b      	cmp	r3, r1
 8000508:	d302      	bcc.n	8000510 <__udivmoddi4+0x140>
 800050a:	4282      	cmp	r2, r0
 800050c:	f200 80b8 	bhi.w	8000680 <__udivmoddi4+0x2b0>
 8000510:	1a84      	subs	r4, r0, r2
 8000512:	eb61 0103 	sbc.w	r1, r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	468c      	mov	ip, r1
 800051a:	2d00      	cmp	r5, #0
 800051c:	d0a8      	beq.n	8000470 <__udivmoddi4+0xa0>
 800051e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000522:	e7a5      	b.n	8000470 <__udivmoddi4+0xa0>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f603 	lsr.w	r6, r0, r3
 800052c:	4097      	lsls	r7, r2
 800052e:	fa01 f002 	lsl.w	r0, r1, r2
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	40d9      	lsrs	r1, r3
 8000538:	4330      	orrs	r0, r6
 800053a:	0c03      	lsrs	r3, r0, #16
 800053c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000540:	fa1f f887 	uxth.w	r8, r7
 8000544:	fb0e 1116 	mls	r1, lr, r6, r1
 8000548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054c:	fb06 f108 	mul.w	r1, r6, r8
 8000550:	4299      	cmp	r1, r3
 8000552:	fa04 f402 	lsl.w	r4, r4, r2
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x19c>
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	f106 3cff 	add.w	ip, r6, #4294967295
 800055e:	f080 808d 	bcs.w	800067c <__udivmoddi4+0x2ac>
 8000562:	4299      	cmp	r1, r3
 8000564:	f240 808a 	bls.w	800067c <__udivmoddi4+0x2ac>
 8000568:	3e02      	subs	r6, #2
 800056a:	443b      	add	r3, r7
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b281      	uxth	r1, r0
 8000570:	fbb3 f0fe 	udiv	r0, r3, lr
 8000574:	fb0e 3310 	mls	r3, lr, r0, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb00 f308 	mul.w	r3, r0, r8
 8000580:	428b      	cmp	r3, r1
 8000582:	d907      	bls.n	8000594 <__udivmoddi4+0x1c4>
 8000584:	1879      	adds	r1, r7, r1
 8000586:	f100 3cff 	add.w	ip, r0, #4294967295
 800058a:	d273      	bcs.n	8000674 <__udivmoddi4+0x2a4>
 800058c:	428b      	cmp	r3, r1
 800058e:	d971      	bls.n	8000674 <__udivmoddi4+0x2a4>
 8000590:	3802      	subs	r0, #2
 8000592:	4439      	add	r1, r7
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059a:	e778      	b.n	800048e <__udivmoddi4+0xbe>
 800059c:	f1c6 0c20 	rsb	ip, r6, #32
 80005a0:	fa03 f406 	lsl.w	r4, r3, r6
 80005a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005a8:	431c      	orrs	r4, r3
 80005aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ae:	fa01 f306 	lsl.w	r3, r1, r6
 80005b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ba:	431f      	orrs	r7, r3
 80005bc:	0c3b      	lsrs	r3, r7, #16
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fa1f f884 	uxth.w	r8, r4
 80005c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ce:	fb09 fa08 	mul.w	sl, r9, r8
 80005d2:	458a      	cmp	sl, r1
 80005d4:	fa02 f206 	lsl.w	r2, r2, r6
 80005d8:	fa00 f306 	lsl.w	r3, r0, r6
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x220>
 80005de:	1861      	adds	r1, r4, r1
 80005e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e4:	d248      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 80005e6:	458a      	cmp	sl, r1
 80005e8:	d946      	bls.n	8000678 <__udivmoddi4+0x2a8>
 80005ea:	f1a9 0902 	sub.w	r9, r9, #2
 80005ee:	4421      	add	r1, r4
 80005f0:	eba1 010a 	sub.w	r1, r1, sl
 80005f4:	b2bf      	uxth	r7, r7
 80005f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000602:	fb00 f808 	mul.w	r8, r0, r8
 8000606:	45b8      	cmp	r8, r7
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x24a>
 800060a:	19e7      	adds	r7, r4, r7
 800060c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000610:	d22e      	bcs.n	8000670 <__udivmoddi4+0x2a0>
 8000612:	45b8      	cmp	r8, r7
 8000614:	d92c      	bls.n	8000670 <__udivmoddi4+0x2a0>
 8000616:	3802      	subs	r0, #2
 8000618:	4427      	add	r7, r4
 800061a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800061e:	eba7 0708 	sub.w	r7, r7, r8
 8000622:	fba0 8902 	umull	r8, r9, r0, r2
 8000626:	454f      	cmp	r7, r9
 8000628:	46c6      	mov	lr, r8
 800062a:	4649      	mov	r1, r9
 800062c:	d31a      	bcc.n	8000664 <__udivmoddi4+0x294>
 800062e:	d017      	beq.n	8000660 <__udivmoddi4+0x290>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x27a>
 8000632:	ebb3 020e 	subs.w	r2, r3, lr
 8000636:	eb67 0701 	sbc.w	r7, r7, r1
 800063a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800063e:	40f2      	lsrs	r2, r6
 8000640:	ea4c 0202 	orr.w	r2, ip, r2
 8000644:	40f7      	lsrs	r7, r6
 8000646:	e9c5 2700 	strd	r2, r7, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e70b      	b.n	8000470 <__udivmoddi4+0xa0>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0x60>
 800065c:	4618      	mov	r0, r3
 800065e:	e6fd      	b.n	800045c <__udivmoddi4+0x8c>
 8000660:	4543      	cmp	r3, r8
 8000662:	d2e5      	bcs.n	8000630 <__udivmoddi4+0x260>
 8000664:	ebb8 0e02 	subs.w	lr, r8, r2
 8000668:	eb69 0104 	sbc.w	r1, r9, r4
 800066c:	3801      	subs	r0, #1
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0x260>
 8000670:	4608      	mov	r0, r1
 8000672:	e7d2      	b.n	800061a <__udivmoddi4+0x24a>
 8000674:	4660      	mov	r0, ip
 8000676:	e78d      	b.n	8000594 <__udivmoddi4+0x1c4>
 8000678:	4681      	mov	r9, r0
 800067a:	e7b9      	b.n	80005f0 <__udivmoddi4+0x220>
 800067c:	4666      	mov	r6, ip
 800067e:	e775      	b.n	800056c <__udivmoddi4+0x19c>
 8000680:	4630      	mov	r0, r6
 8000682:	e74a      	b.n	800051a <__udivmoddi4+0x14a>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	4439      	add	r1, r7
 800068a:	e713      	b.n	80004b4 <__udivmoddi4+0xe4>
 800068c:	3802      	subs	r0, #2
 800068e:	443c      	add	r4, r7
 8000690:	e724      	b.n	80004dc <__udivmoddi4+0x10c>
 8000692:	bf00      	nop

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800069c:	4b3f      	ldr	r3, [pc, #252]	; (800079c <SystemInit+0x104>)
 800069e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a2:	4a3e      	ldr	r2, [pc, #248]	; (800079c <SystemInit+0x104>)
 80006a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006ac:	4b3b      	ldr	r3, [pc, #236]	; (800079c <SystemInit+0x104>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	4a3a      	ldr	r2, [pc, #232]	; (800079c <SystemInit+0x104>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b8:	4b39      	ldr	r3, [pc, #228]	; (80007a0 <SystemInit+0x108>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	2b06      	cmp	r3, #6
 80006c2:	d807      	bhi.n	80006d4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c4:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <SystemInit+0x108>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f023 030f 	bic.w	r3, r3, #15
 80006cc:	4a34      	ldr	r2, [pc, #208]	; (80007a0 <SystemInit+0x108>)
 80006ce:	f043 0307 	orr.w	r3, r3, #7
 80006d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <SystemInit+0x10c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <SystemInit+0x10c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <SystemInit+0x10c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <SystemInit+0x10c>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	492e      	ldr	r1, [pc, #184]	; (80007a4 <SystemInit+0x10c>)
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <SystemInit+0x110>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <SystemInit+0x108>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemInit+0x108>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f023 030f 	bic.w	r3, r3, #15
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <SystemInit+0x108>)
 8000708:	f043 0307 	orr.w	r3, r3, #7
 800070c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemInit+0x10c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemInit+0x10c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <SystemInit+0x10c>)
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <SystemInit+0x114>)
 8000724:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemInit+0x10c>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x118>)
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <SystemInit+0x10c>)
 800072e:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemInit+0x11c>)
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <SystemInit+0x10c>)
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <SystemInit+0x11c>)
 800073c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <SystemInit+0x10c>)
 8000740:	2200      	movs	r2, #0
 8000742:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <SystemInit+0x10c>)
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <SystemInit+0x11c>)
 8000748:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <SystemInit+0x10c>)
 800074c:	2200      	movs	r2, #0
 800074e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <SystemInit+0x10c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <SystemInit+0x10c>)
 8000756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x10c>)
 800075e:	2200      	movs	r2, #0
 8000760:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <SystemInit+0x120>)
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <SystemInit+0x120>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x124>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <SystemInit+0x128>)
 8000774:	4013      	ands	r3, r2
 8000776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800077a:	d202      	bcs.n	8000782 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x12c>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <SystemInit+0x130>)
 8000784:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000788:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SystemInit+0x104>)
 800078c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000790:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_ETH_Init+0x90>)
 80007d2:	4a23      	ldr	r2, [pc, #140]	; (8000860 <MX_ETH_Init+0x94>)
 80007d4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_ETH_Init+0x90>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ETH_Init+0x90>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	3301      	adds	r3, #1
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_ETH_Init+0x90>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	3302      	adds	r3, #2
 80007ee:	22e1      	movs	r2, #225	; 0xe1
 80007f0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_ETH_Init+0x90>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	3303      	adds	r3, #3
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_ETH_Init+0x90>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	3304      	adds	r3, #4
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ETH_Init+0x90>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	3305      	adds	r3, #5
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_ETH_Init+0x90>)
 8000812:	2201      	movs	r2, #1
 8000814:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ETH_Init+0x90>)
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_ETH_Init+0x98>)
 800081a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_ETH_Init+0x90>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_ETH_Init+0x9c>)
 8000820:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ETH_Init+0x90>)
 8000824:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000828:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x90>)
 800082c:	f001 fab8 	bl	8001da0 <HAL_ETH_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fc96 	bl	8001166 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800083a:	2234      	movs	r2, #52	; 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_ETH_Init+0xa0>)
 8000840:	f009 febc 	bl	800a5bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_ETH_Init+0xa0>)
 8000846:	2221      	movs	r2, #33	; 0x21
 8000848:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_ETH_Init+0xa0>)
 800084c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000850:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_ETH_Init+0xa0>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240004fc 	.word	0x240004fc
 8000860:	40028000 	.word	0x40028000
 8000864:	24000184 	.word	0x24000184
 8000868:	24000124 	.word	0x24000124
 800086c:	24000584 	.word	0x24000584

08000870 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a59      	ldr	r2, [pc, #356]	; (80009f4 <HAL_ETH_MspInit+0x184>)
 800088e:	4293      	cmp	r3, r2
 8000890:	f040 80ab 	bne.w	80009ea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000894:	4b58      	ldr	r3, [pc, #352]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 8000896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089a:	4a57      	ldr	r2, [pc, #348]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800089c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a4:	4b54      	ldr	r3, [pc, #336]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ae:	623b      	str	r3, [r7, #32]
 80008b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80008b2:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b8:	4a4f      	ldr	r2, [pc, #316]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80008d0:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d6:	4a48      	ldr	r2, [pc, #288]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008e0:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	4a40      	ldr	r2, [pc, #256]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	4a39      	ldr	r2, [pc, #228]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <HAL_ETH_MspInit+0x188>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000966:	2332      	movs	r3, #50	; 0x32
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	481e      	ldr	r0, [pc, #120]	; (80009fc <HAL_ETH_MspInit+0x18c>)
 8000982:	f001 fe23 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000986:	2386      	movs	r3, #134	; 0x86
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <HAL_ETH_MspInit+0x190>)
 80009a2:	f001 fe13 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b8:	230b      	movs	r3, #11
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <HAL_ETH_MspInit+0x194>)
 80009c4:	f001 fe02 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009da:	230b      	movs	r3, #11
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <HAL_ETH_MspInit+0x198>)
 80009e6:	f001 fdf1 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	3738      	adds	r7, #56	; 0x38
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40028000 	.word	0x40028000
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58020800 	.word	0x58020800
 8000a00:	58020000 	.word	0x58020000
 8000a04:	58020400 	.word	0x58020400
 8000a08:	58021800 	.word	0x58021800

08000a0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

}
 8000ac6:	bf00      	nop
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	58024400 	.word	0x58024400

08000ad8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <MX_I2C1_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <MX_I2C1_Init+0x7c>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b14:	f001 ff64 	bl	80029e0 <HAL_I2C_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1e:	f000 fb22 	bl	8001166 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b26:	f002 fae1 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b30:	f000 fb19 	bl	8001166 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b38:	f002 fb23 	bl	8003182 <HAL_I2CEx_ConfigDigitalFilter>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f000 fb10 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	240005b8 	.word	0x240005b8
 8000b50:	40005400 	.word	0x40005400
 8000b54:	00301242 	.word	0x00301242

08000b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0b8      	sub	sp, #224	; 0xe0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	22bc      	movs	r2, #188	; 0xbc
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 fd1f 	bl	800a5bc <memset>
  if(i2cHandle->Instance==I2C1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <HAL_I2C_MspInit+0xcc>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d149      	bne.n	8000c1c <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fc8e 	bl	80044b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ba2:	f000 fae0 	bl	8001166 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc4:	23c0      	movs	r3, #192	; 0xc0
 8000bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000be6:	4619      	mov	r1, r3
 8000be8:	4810      	ldr	r0, [pc, #64]	; (8000c2c <HAL_I2C_MspInit+0xd4>)
 8000bea:	f001 fcef 	bl	80025cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2104      	movs	r1, #4
 8000c10:	201f      	movs	r0, #31
 8000c12:	f001 f814 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c16:	201f      	movs	r0, #31
 8000c18:	f001 f82b 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37e0      	adds	r7, #224	; 0xe0
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40005400 	.word	0x40005400
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400

08000c30 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d101      	bne.n	8000c4a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <rpmsg_send+0x3c>)
 8000c48:	e00c      	b.n	8000c64 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c52:	2301      	movs	r3, #1
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f007 ffbf 	bl	8008be0 <rpmsg_send_offchannel_raw>
 8000c62:	4603      	mov	r3, r0
					 len, true);
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	fffff829 	.word	0xfffff829

08000c70 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2220      	movs	r2, #32
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f00a f88f 	bl	800ada8 <strncpy>
	ept->addr = src;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <rpmsg_recv_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <rpmsg_recv_callback+0x2c>)
 8000cc0:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <rpmsg_recv_callback+0x30>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2400020c 	.word	0x2400020c
 8000cdc:	24000204 	.word	0x24000204

08000ce0 <receive_message>:

unsigned int receive_message(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ce4:	e001      	b.n	8000cea <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ce6:	f009 fb69 	bl	800a3bc <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <receive_message+0x28>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d103      	bne.n	8000cfa <receive_message+0x1a>
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <receive_message+0x2c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d0f5      	beq.n	8000ce6 <receive_message+0x6>
	}
	message_received = 0;
 8000cfa:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <receive_message+0x28>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

	return received_data;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <receive_message+0x30>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24000204 	.word	0x24000204
 8000d0c:	24000208 	.word	0x24000208
 8000d10:	2400020c 	.word	0x2400020c

08000d14 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <service_destroy_cb+0x1c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	24000208 	.word	0x24000208

08000d34 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <new_service_cb+0x2c>)
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <new_service_cb+0x30>)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <new_service_cb+0x34>)
 8000d4c:	f009 fb18 	bl	800a380 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <new_service_cb+0x38>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08000d15 	.word	0x08000d15
 8000d64:	08000cad 	.word	0x08000cad
 8000d68:	24000210 	.word	0x24000210
 8000d6c:	24000208 	.word	0x24000208

08000d70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 8000d76:	f000 f9cf 	bl	8001118 <MPU_Config>
	CPU_CACHE_Enable();
 8000d7a:	f000 f95f 	bl	800103c <CPU_CACHE_Enable>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d7e:	f000 fdad 	bl	80018dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d82:	f000 f8d5 	bl	8000f30 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d86:	4b61      	ldr	r3, [pc, #388]	; (8000f0c <main+0x19c>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a5f      	ldr	r2, [pc, #380]	; (8000f0c <main+0x19c>)
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <main+0x19c>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	6a3b      	ldr	r3, [r7, #32]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f001 fdc1 	bl	800292c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f001 fdd7 	bl	8002960 <HAL_HSEM_Release>
//	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
//	if ( timeout < 0 )
//	{
//		Error_Handler();
//	}
	timeout = 0xFFFF;
 8000db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
	//	if ( timeout < 0 )
	//	{
	//		Error_Handler();
	//	}
	  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8000db8:	e000      	b.n	8000dbc <main+0x4c>
	  {
	      asm("nop");
 8000dba:	bf00      	nop
	  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <main+0x19c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f8      	bne.n	8000dba <main+0x4a>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dc8:	f7ff fe20 	bl	8000a0c <MX_GPIO_Init>
	MX_ETH_Init();
 8000dcc:	f7ff fcfe 	bl	80007cc <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000dd0:	f000 fbec 	bl	80015ac <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000dd4:	f000 fc9c 	bl	8001710 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8000dd8:	f7ff fe7e 	bl	8000ad8 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000ddc:	f000 f9c8 	bl	8001170 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	MAILBOX_Init();
 8000de0:	f009 f916 	bl	800a010 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8000de4:	2300      	movs	r3, #0
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2300      	movs	r3, #0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	4946      	ldr	r1, [pc, #280]	; (8000f10 <main+0x1a0>)
 8000df6:	4847      	ldr	r0, [pc, #284]	; (8000f14 <main+0x1a4>)
 8000df8:	f7ff ff3a 	bl	8000c70 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 8000dfc:	4946      	ldr	r1, [pc, #280]	; (8000f18 <main+0x1a8>)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f009 fa28 	bl	800a254 <MX_OPENAMP_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <main+0x9e>
	{
		Error_Handler();
 8000e0a:	f000 f9ac 	bl	8001166 <Error_Handler>

	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
	HAL_Delay(2000);
 8000e0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e12:	f000 fdf5 	bl	8001a00 <HAL_Delay>
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000e16:	483f      	ldr	r0, [pc, #252]	; (8000f14 <main+0x1a4>)
 8000e18:	f009 fadc 	bl	800a3d4 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	493f      	ldr	r1, [pc, #252]	; (8000f1c <main+0x1ac>)
 8000e20:	483c      	ldr	r0, [pc, #240]	; (8000f14 <main+0x1a4>)
 8000e22:	f7ff ff05 	bl	8000c30 <rpmsg_send>
 8000e26:	62b8      	str	r0, [r7, #40]	; 0x28

	if (status < 0)
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da01      	bge.n	8000e32 <main+0xc2>
	{
		Error_Handler();
 8000e2e:	f000 f99a 	bl	8001166 <Error_Handler>
	}

	//	ssd1306_TestAll();
	ssd1306_Init();
 8000e32:	f006 fad9 	bl	80073e8 <ssd1306_Init>
	ssd1306_TestBorder();
 8000e36:	f006 fce5 	bl	8007804 <ssd1306_TestBorder>

	uint8_t message = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (message < 100)
 8000e40:	e034      	b.n	8000eac <main+0x13c>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 8000e42:	f7ff ff4d 	bl	8000ce0 <receive_message>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char localT[32] = "";
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%d",message);
 8000e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e68:	4638      	mov	r0, r7
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <main+0x1b0>)
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	f009 ff55 	bl	800ad1c <sniprintf>
		ssd1306_SetCursor(0, 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2000      	movs	r0, #0
 8000e76:	f006 fc7b 	bl	8007770 <ssd1306_SetCursor>
		ssd1306_WriteString(localT, Font_7x10, White);
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <main+0x1b4>)
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	2301      	movs	r3, #1
 8000e80:	ca06      	ldmia	r2, {r1, r2}
 8000e82:	f006 fc4f 	bl	8007724 <ssd1306_WriteString>
		message++;
 8000e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* Send the massage to the remote CPU */
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8000e92:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000e96:	2201      	movs	r2, #1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <main+0x1a4>)
 8000e9c:	f7ff fec8 	bl	8000c30 <rpmsg_send>
 8000ea0:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status < 0)
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	da01      	bge.n	8000eac <main+0x13c>
		{
			Error_Handler();
 8000ea8:	f000 f95d 	bl	8001166 <Error_Handler>
	while (message < 100)
 8000eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eb0:	2b63      	cmp	r3, #99	; 0x63
 8000eb2:	d9c6      	bls.n	8000e42 <main+0xd2>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(service_created)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <main+0x1b8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0fb      	beq.n	8000eb4 <main+0x144>
		{
			OPENAMP_check_for_message();
 8000ebc:	f009 fa7e 	bl	800a3bc <OPENAMP_check_for_message>
			message = receive_message();
 8000ec0:	f7ff ff0e 	bl	8000ce0 <receive_message>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			char localT[32] = "";
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]
			snprintf(localT,sizeof(localT),"%03d",message);
 8000ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <main+0x1bc>)
 8000eea:	2120      	movs	r1, #32
 8000eec:	f009 ff16 	bl	800ad1c <sniprintf>
			ssd1306_SetCursor(0, 0);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f006 fc3c 	bl	8007770 <ssd1306_SetCursor>
			ssd1306_WriteString(localT, Font_7x10, White);
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <main+0x1b4>)
 8000efa:	4638      	mov	r0, r7
 8000efc:	2301      	movs	r3, #1
 8000efe:	ca06      	ldmia	r2, {r1, r2}
 8000f00:	f006 fc10 	bl	8007724 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000f04:	f006 fafe 	bl	8007504 <ssd1306_UpdateScreen>
		if(service_created)
 8000f08:	e7d4      	b.n	8000eb4 <main+0x144>
 8000f0a:	bf00      	nop
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	0800b8c0 	.word	0x0800b8c0
 8000f14:	24000210 	.word	0x24000210
 8000f18:	08000d35 	.word	0x08000d35
 8000f1c:	24000200 	.word	0x24000200
 8000f20:	0800b8d8 	.word	0x0800b8d8
 8000f24:	24000010 	.word	0x24000010
 8000f28:	24000208 	.word	0x24000208
 8000f2c:	0800b8dc 	.word	0x0800b8dc

08000f30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09c      	sub	sp, #112	; 0x70
 8000f34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	224c      	movs	r2, #76	; 0x4c
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f009 fb3c 	bl	800a5bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2220      	movs	r2, #32
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 fb36 	bl	800a5bc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f002 faab 	bl	80034ac <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <SystemClock_Config+0x100>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	4a34      	ldr	r2, [pc, #208]	; (8001030 <SystemClock_Config+0x100>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <SystemClock_Config+0x100>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <SystemClock_Config+0x104>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f78:	4a2e      	ldr	r2, [pc, #184]	; (8001034 <SystemClock_Config+0x104>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <SystemClock_Config+0x104>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f8c:	bf00      	nop
 8000f8e:	4b29      	ldr	r3, [pc, #164]	; (8001034 <SystemClock_Config+0x104>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f9a:	d1f8      	bne.n	8000f8e <SystemClock_Config+0x5e>
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <SystemClock_Config+0x108>)
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f023 0303 	bic.w	r3, r3, #3
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <SystemClock_Config+0x108>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 18;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000fda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fde:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 facb 	bl	8003580 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000ff0:	f000 f8b9 	bl	8001166 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	233f      	movs	r3, #63	; 0x3f
 8000ff6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2101      	movs	r1, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fec1 	bl	8003da0 <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8001024:	f000 f89f 	bl	8001166 <Error_Handler>
	}
}
 8001028:	bf00      	nop
 800102a:	3770      	adds	r7, #112	; 0x70
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58000400 	.word	0x58000400
 8001034:	58024800 	.word	0x58024800
 8001038:	58024400 	.word	0x58024400

0800103c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11b      	bne.n	8001086 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800104e:	f3bf 8f4f 	dsb	sy
}
 8001052:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001054:	f3bf 8f6f 	isb	sy
}
 8001058:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 800105c:	2200      	movs	r2, #0
 800105e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001068:	f3bf 8f6f 	isb	sy
}
 800106c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a28      	ldr	r2, [pc, #160]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800107a:	f3bf 8f4f 	dsb	sy
}
 800107e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001080:	f3bf 8f6f 	isb	sy
}
 8001084:	e000      	b.n	8001088 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001086:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d138      	bne.n	8001106 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 8001096:	2200      	movs	r2, #0
 8001098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800109c:	f3bf 8f4f 	dsb	sy
}
 80010a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 80010a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0b5b      	lsrs	r3, r3, #13
 80010ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010b2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010bc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	015a      	lsls	r2, r3, #5
 80010c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80010c6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010cc:	4911      	ldr	r1, [pc, #68]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ef      	bne.n	80010be <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	60ba      	str	r2, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1e5      	bne.n	80010b4 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
}
 80010ec:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <CPU_CACHE_Enable+0xd8>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	e000      	b.n	8001108 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001106:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 800111e:	f000 fdc3 	bl	8001ca8 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001122:	2301      	movs	r3, #1
 8001124:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8001126:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800112a:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800112c:	230f      	movs	r3, #15
 800112e:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001130:	2303      	movs	r3, #3
 8001132:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800113c:	2301      	movs	r3, #1
 800113e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001140:	2300      	movs	r3, #0
 8001142:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001144:	2300      	movs	r3, #0
 8001146:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fde0 	bl	8001d18 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001158:	2004      	movs	r0, #4
 800115a:	f000 fdbd 	bl	8001cd8 <HAL_MPU_Enable>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800116a:	b672      	cpsid	i
}
 800116c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800116e:	e7fe      	b.n	800116e <Error_Handler+0x8>

08001170 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_SPI2_Init+0xa4>)
 8001176:	4a28      	ldr	r2, [pc, #160]	; (8001218 <MX_SPI2_Init+0xa8>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_SPI2_Init+0xa4>)
 800117c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001180:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_SPI2_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_SPI2_Init+0xa4>)
 800118a:	2207      	movs	r2, #7
 800118c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_SPI2_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_SPI2_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_SPI2_Init+0xa4>)
 800119c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_SPI2_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_SPI2_Init+0xa4>)
 8001200:	f004 fcbc 	bl	8005b7c <HAL_SPI_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800120a:	f7ff ffac 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000604 	.word	0x24000604
 8001218:	40003800 	.word	0x40003800

0800121c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ba      	sub	sp, #232	; 0xe8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	22bc      	movs	r2, #188	; 0xbc
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f009 f9bd 	bl	800a5bc <memset>
  if(spiHandle->Instance==SPI2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a36      	ldr	r2, [pc, #216]	; (8001320 <HAL_SPI_MspInit+0x104>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d165      	bne.n	8001318 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001252:	2300      	movs	r3, #0
 8001254:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f003 f92c 	bl	80044b8 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff ff7e 	bl	8001166 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_SPI_MspInit+0x108>)
 800126c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001270:	4a2c      	ldr	r2, [pc, #176]	; (8001324 <HAL_SPI_MspInit+0x108>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_SPI_MspInit+0x108>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_SPI_MspInit+0x108>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a25      	ldr	r2, [pc, #148]	; (8001324 <HAL_SPI_MspInit+0x108>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_SPI_MspInit+0x108>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_SPI_MspInit+0x108>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_SPI_MspInit+0x108>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_SPI_MspInit+0x108>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c4:	230c      	movs	r3, #12
 80012c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012dc:	2305      	movs	r3, #5
 80012de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <HAL_SPI_MspInit+0x10c>)
 80012ea:	f001 f96f 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ee:	2308      	movs	r3, #8
 80012f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001306:	2305      	movs	r3, #5
 8001308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <HAL_SPI_MspInit+0x110>)
 8001314:	f001 f95a 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	37e8      	adds	r7, #232	; 0xe8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40003800 	.word	0x40003800
 8001324:	58024400 	.word	0x58024400
 8001328:	58020800 	.word	0x58020800
 800132c:	58020c00 	.word	0x58020c00

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_MspInit+0x5c>)
 8001338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_MspInit+0x5c>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_MspInit+0x5c>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2104      	movs	r1, #4
 8001358:	2041      	movs	r0, #65	; 0x41
 800135a:	f000 fc70 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 800135e:	2041      	movs	r0, #65	; 0x41
 8001360:	f000 fc87 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2104      	movs	r1, #4
 8001368:	207d      	movs	r0, #125	; 0x7d
 800136a:	f000 fc68 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800136e:	207d      	movs	r0, #125	; 0x7d
 8001370:	f000 fc7f 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2104      	movs	r1, #4
 8001378:	2094      	movs	r0, #148	; 0x94
 800137a:	f000 fc60 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 800137e:	2094      	movs	r0, #148	; 0x94
 8001380:	f000 fc77 	bl	8001c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 faf0 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <I2C1_EV_IRQHandler+0x10>)
 80013ea:	f001 fc9d 	bl	8002d28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240005b8 	.word	0x240005b8

080013f8 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800140a:	f001 facf 	bl	80029ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}

08001412 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_kill>:

int _kill(int pid, int sig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800143a:	f009 f84b 	bl	800a4d4 <__errno>
 800143e:	4603      	mov	r3, r0
 8001440:	2216      	movs	r2, #22
 8001442:	601a      	str	r2, [r3, #0]
	return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_exit>:

void _exit (int status)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe7 	bl	8001430 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001462:	e7fe      	b.n	8001462 <_exit+0x12>

08001464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001476:	f3af 8000 	nop.w
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
	}

return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
	}
	return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f008 ffb0 	bl	800a4d4 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	24040000 	.word	0x24040000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	24000250 	.word	0x24000250
 80015a8:	24000b58 	.word	0x24000b58

080015ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_USART3_UART_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015f6:	f004 fbde 	bl	8005db6 <HAL_UART_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f7ff fdb1 	bl	8001166 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_USART3_UART_Init+0x90>)
 8001608:	f005 fb2c 	bl	8006c64 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001612:	f7ff fda8 	bl	8001166 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_USART3_UART_Init+0x90>)
 800161a:	f005 fb61 	bl	8006ce0 <HAL_UARTEx_SetRxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001624:	f7ff fd9f 	bl	8001166 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_USART3_UART_Init+0x90>)
 800162a:	f005 fae2 	bl	8006bf2 <HAL_UARTEx_DisableFifoMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001634:	f7ff fd97 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2400068c 	.word	0x2400068c
 8001640:	40004800 	.word	0x40004800

08001644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0b8      	sub	sp, #224	; 0xe0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	22bc      	movs	r2, #188	; 0xbc
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f008 ffa9 	bl	800a5bc <memset>
  if(uartHandle->Instance==USART3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <HAL_UART_MspInit+0xc0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d142      	bne.n	80016fa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001674:	2302      	movs	r3, #2
 8001676:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4618      	mov	r0, r3
 8001684:	f002 ff18 	bl	80044b8 <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800168e:	f7ff fd6a 	bl	8001166 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_UART_MspInit+0xc4>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_UART_MspInit+0xc4>)
 800169a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e8:	2307      	movs	r3, #7
 80016ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_UART_MspInit+0xc8>)
 80016f6:	f000 ff69 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	37e0      	adds	r7, #224	; 0xe0
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40004800 	.word	0x40004800
 8001708:	58024400 	.word	0x58024400
 800170c:	58020c00 	.word	0x58020c00

08001710 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001718:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800171c:	2209      	movs	r2, #9
 800171e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001722:	2202      	movs	r2, #2
 8001724:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800172e:	2202      	movs	r2, #2
 8001730:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001746:	2201      	movs	r2, #1
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800174c:	2201      	movs	r2, #1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001758:	f001 fd5f 	bl	800321a <HAL_PCD_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001762:	f7ff fd00 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2400071c 	.word	0x2400071c
 8001770:	40080000 	.word	0x40080000

08001774 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b8      	sub	sp, #224	; 0xe0
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	22bc      	movs	r2, #188	; 0xbc
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f008 ff11 	bl	800a5bc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a37      	ldr	r2, [pc, #220]	; (800187c <HAL_PCD_MspInit+0x108>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d166      	bne.n	8001872 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80017ae:	2312      	movs	r3, #18
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80017b6:	2303      	movs	r3, #3
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 80017c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017c8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80017ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fe6e 	bl	80044b8 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80017e2:	f7ff fcc0 	bl	8001166 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017e6:	f001 febb 	bl	8003560 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_PCD_MspInit+0x10c>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <HAL_PCD_MspInit+0x10c>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_PCD_MspInit+0x10c>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001808:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800180c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001822:	230a      	movs	r3, #10
 8001824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800182c:	4619      	mov	r1, r3
 800182e:	4815      	ldr	r0, [pc, #84]	; (8001884 <HAL_PCD_MspInit+0x110>)
 8001830:	f000 fecc 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <HAL_PCD_MspInit+0x110>)
 8001850:	f000 febc 	bl	80025cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_PCD_MspInit+0x10c>)
 8001856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_PCD_MspInit+0x10c>)
 800185c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001860:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_PCD_MspInit+0x10c>)
 8001866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800186a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	37e0      	adds	r7, #224	; 0xe0
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40080000 	.word	0x40080000
 8001880:	58024400 	.word	0x58024400
 8001884:	58020000 	.word	0x58020000

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f7fe ff04 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f008 fe25 	bl	800a504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fa59 	bl	8000d70 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	24000124 	.word	0x24000124
  ldr r2, =_sidata
 80018cc:	0800c3ac 	.word	0x0800c3ac
  ldr r2, =_sbss
 80018d0:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 80018d4:	24000b58 	.word	0x24000b58

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f9a0 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e8:	f002 fc10 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	4913      	ldr	r1, [pc, #76]	; (8001948 <HAL_Init+0x6c>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_Init+0x68>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_Init+0x6c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_Init+0x70>)
 800191e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x74>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f814 	bl	8001954 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e002      	b.n	800193c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001936:	f7ff fcfb 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	0800bac0 	.word	0x0800bac0
 800194c:	24000004 	.word	0x24000004
 8001950:	24000000 	.word	0x24000000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_InitTick+0x60>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e021      	b.n	80019ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_InitTick+0x64>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f985 	bl	8001c8e <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f94f 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x68>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2400000c 	.word	0x2400000c
 80019b8:	24000000 	.word	0x24000000
 80019bc:	24000008 	.word	0x24000008

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	2400000c 	.word	0x2400000c
 80019e4:	24000b24 	.word	0x24000b24

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	24000b24 	.word	0x24000b24

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2400000c 	.word	0x2400000c

08001a48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetREVID+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c1b      	lsrs	r3, r3, #16
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5c001000 	.word	0x5c001000

08001a60 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58000400 	.word	0x58000400

08001a88 <__NVIC_SetPriorityGrouping>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	05fa0000 	.word	0x05fa0000

08001ad0 <__NVIC_GetPriorityGrouping>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff40 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff90 	bl	8001b7c <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5f 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff33 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa4 	bl	8001be4 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cac:	f3bf 8f5f 	dmb	sy
}
 8001cb0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_MPU_Disable+0x28>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_MPU_Disable+0x28>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_MPU_Disable+0x2c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	e000ed90 	.word	0xe000ed90

08001cd8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <HAL_MPU_Enable+0x38>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_MPU_Enable+0x3c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_MPU_Enable+0x3c>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf6:	f3bf 8f4f 	dsb	sy
}
 8001cfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cfc:	f3bf 8f6f 	isb	sy
}
 8001d00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed90 	.word	0xe000ed90
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	785a      	ldrb	r2, [r3, #1]
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_MPU_ConfigRegion+0x84>)
 8001d26:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d029      	beq.n	8001d84 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_MPU_ConfigRegion+0x84>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7b1b      	ldrb	r3, [r3, #12]
 8001d3c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7adb      	ldrb	r3, [r3, #11]
 8001d42:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7a9b      	ldrb	r3, [r3, #10]
 8001d4a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7b5b      	ldrb	r3, [r3, #13]
 8001d52:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7b9b      	ldrb	r3, [r3, #14]
 8001d5a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7bdb      	ldrb	r3, [r3, #15]
 8001d62:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7a5b      	ldrb	r3, [r3, #9]
 8001d6a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7a1b      	ldrb	r3, [r3, #8]
 8001d72:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d74:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d7e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d80:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d82:	e005      	b.n	8001d90 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_MPU_ConfigRegion+0x84>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_MPU_ConfigRegion+0x84>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed90 	.word	0xe000ed90

08001da0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0c6      	b.n	8001f40 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fd58 	bl	8000870 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2223      	movs	r2, #35	; 0x23
 8001dc4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <HAL_ETH_Init+0x1a8>)
 8001dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dcc:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_ETH_Init+0x1a8>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_ETH_Init+0x1a8>)
 8001dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7a1b      	ldrb	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fe37 	bl	8001a60 <HAL_SYSCFG_ETHInterfaceSelect>
 8001df2:	e003      	b.n	8001dfc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001df4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001df8:	f7ff fe32 	bl	8001a60 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e14:	f7ff fde8 	bl	80019e8 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e1a:	e00f      	b.n	8001e3c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001e1c:	f7ff fde4 	bl	80019e8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e2a:	d907      	bls.n	8001e3c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	22e0      	movs	r2, #224	; 0xe0
 8001e36:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e081      	b.n	8001f40 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e6      	bne.n	8001e1c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fac0 	bl	80023d4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e54:	f002 fad4 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <HAL_ETH_Init+0x1ac>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	0c9a      	lsrs	r2, r3, #18
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3a01      	subs	r2, #1
 8001e68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa13 	bl	8002298 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e88:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e8c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	22e0      	movs	r2, #224	; 0xe0
 8001ea4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e04a      	b.n	8001f40 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_ETH_Init+0x1b0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6952      	ldr	r2, [r2, #20]
 8001ebe:	0052      	lsls	r2, r2, #1
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	6809      	ldr	r1, [r1, #0]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eca:	440b      	add	r3, r1
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fad8 	bl	8002484 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb1c 	bl	8002512 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	3305      	adds	r3, #5
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	3303      	adds	r3, #3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	061a      	lsls	r2, r3, #24
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	3302      	adds	r3, #2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	3301      	adds	r3, #1
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f26:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2210      	movs	r2, #16
 8001f36:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	ffff8001 	.word	0xffff8001

08001f54 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001f66:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	791b      	ldrb	r3, [r3, #4]
 8001f6c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001f6e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
 8001f74:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f76:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	7b5b      	ldrb	r3, [r3, #13]
 8001f7c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f7e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	7b9b      	ldrb	r3, [r3, #14]
 8001f84:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	7bdb      	ldrb	r3, [r3, #15]
 8001f8c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f8e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	7c12      	ldrb	r2, [r2, #16]
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d102      	bne.n	8001f9e <ETH_SetMACConfig+0x4a>
 8001f98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f9c:	e000      	b.n	8001fa0 <ETH_SetMACConfig+0x4c>
 8001f9e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fa0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	7c52      	ldrb	r2, [r2, #17]
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	d102      	bne.n	8001fb0 <ETH_SetMACConfig+0x5c>
 8001faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fae:	e000      	b.n	8001fb2 <ETH_SetMACConfig+0x5e>
 8001fb0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fb2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	7c9b      	ldrb	r3, [r3, #18]
 8001fb8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fba:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001fc0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001fc6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	7f1b      	ldrb	r3, [r3, #28]
 8001fcc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001fce:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	7f5b      	ldrb	r3, [r3, #29]
 8001fd4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001fd6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	7f92      	ldrb	r2, [r2, #30]
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	d102      	bne.n	8001fe6 <ETH_SetMACConfig+0x92>
 8001fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe4:	e000      	b.n	8001fe8 <ETH_SetMACConfig+0x94>
 8001fe6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001fe8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7fdb      	ldrb	r3, [r3, #31]
 8001fee:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ff0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d102      	bne.n	8002002 <ETH_SetMACConfig+0xae>
 8001ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002000:	e000      	b.n	8002004 <ETH_SetMACConfig+0xb0>
 8002002:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002004:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800200a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002012:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002014:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <ETH_SetMACConfig+0x22c>)
 8002026:	4013      	ands	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	430b      	orrs	r3, r1
 8002030:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800203e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002040:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002048:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800204a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002052:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002054:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800205c:	2a00      	cmp	r2, #0
 800205e:	d102      	bne.n	8002066 <ETH_SetMACConfig+0x112>
 8002060:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002064:	e000      	b.n	8002068 <ETH_SetMACConfig+0x114>
 8002066:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002068:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <ETH_SetMACConfig+0x230>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	430b      	orrs	r3, r1
 8002084:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <ETH_SetMACConfig+0x234>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	430b      	orrs	r3, r1
 80020a8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020b6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d101      	bne.n	80020c6 <ETH_SetMACConfig+0x172>
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	e000      	b.n	80020c8 <ETH_SetMACConfig+0x174>
 80020c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80020c8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80020de:	4013      	ands	r3, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	430b      	orrs	r3, r1
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80020f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80020f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f023 0103 	bic.w	r1, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	430a      	orrs	r2, r1
 8002112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800211e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800213a:	2a00      	cmp	r2, #0
 800213c:	d101      	bne.n	8002142 <ETH_SetMACConfig+0x1ee>
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	e000      	b.n	8002144 <ETH_SetMACConfig+0x1f0>
 8002142:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002144:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800214c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800214e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002156:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002164:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	430a      	orrs	r2, r1
 8002170:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	00048083 	.word	0x00048083
 8002184:	c0f88000 	.word	0xc0f88000
 8002188:	fffffef0 	.word	0xfffffef0

0800218c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b38      	ldr	r3, [pc, #224]	; (8002284 <ETH_SetDMAConfig+0xf8>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	6809      	ldr	r1, [r1, #0]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80021b2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021be:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	7b1b      	ldrb	r3, [r3, #12]
 80021c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80021d2:	4413      	add	r3, r2
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <ETH_SetDMAConfig+0xfc>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6811      	ldr	r1, [r2, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	f241 0304 	movw	r3, #4100	; 0x1004
 80021e6:	440b      	add	r3, r1
 80021e8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7b5b      	ldrb	r3, [r3, #13]
 80021ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <ETH_SetDMAConfig+0x100>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6811      	ldr	r1, [r2, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	431a      	orrs	r2, r3
 800220e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002212:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7d1b      	ldrb	r3, [r3, #20]
 800221c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800221e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	7f5b      	ldrb	r3, [r3, #29]
 8002224:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002232:	4413      	add	r3, r2
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <ETH_SetDMAConfig+0x104>)
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6811      	ldr	r1, [r2, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	431a      	orrs	r2, r3
 8002242:	f241 1304 	movw	r3, #4356	; 0x1104
 8002246:	440b      	add	r3, r1
 8002248:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7f1b      	ldrb	r3, [r3, #28]
 800224e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002260:	4413      	add	r3, r2
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <ETH_SetDMAConfig+0x108>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6811      	ldr	r1, [r2, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	431a      	orrs	r2, r3
 8002270:	f241 1308 	movw	r3, #4360	; 0x1108
 8002274:	440b      	add	r3, r1
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	ffff87fd 	.word	0xffff87fd
 8002288:	ffff2ffe 	.word	0xffff2ffe
 800228c:	fffec000 	.word	0xfffec000
 8002290:	ffc0efef 	.word	0xffc0efef
 8002294:	7fc0ffff 	.word	0x7fc0ffff

08002298 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0a4      	sub	sp, #144	; 0x90
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022a6:	2300      	movs	r3, #0
 80022a8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80022f0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80022f4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002312:	2300      	movs	r3, #0
 8002314:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002316:	2300      	movs	r3, #0
 8002318:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800231a:	2300      	movs	r3, #0
 800231c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002330:	2320      	movs	r3, #32
 8002332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002342:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800234c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002354:	2302      	movs	r3, #2
 8002356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002372:	2300      	movs	r3, #0
 8002374:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800237c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fde6 	bl	8001f54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002388:	2301      	movs	r3, #1
 800238a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80023b8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fee1 	bl	800218c <ETH_SetDMAConfig>
}
 80023ca:	bf00      	nop
 80023cc:	3790      	adds	r7, #144	; 0x90
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023ee:	f002 f807 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 80023f2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d908      	bls.n	800240e <ETH_MAC_MDIO_ClkConfig+0x3a>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d804      	bhi.n	800240e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e027      	b.n	800245e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d908      	bls.n	8002428 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4a17      	ldr	r2, [pc, #92]	; (8002478 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d204      	bcs.n	8002428 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e01a      	b.n	800245e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d303      	bcc.n	8002438 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d911      	bls.n	800245c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d908      	bls.n	8002452 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d804      	bhi.n	8002452 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e005      	b.n	800245e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e000      	b.n	800245e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800245c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	01312cff 	.word	0x01312cff
 8002474:	02160ebf 	.word	0x02160ebf
 8002478:	03938700 	.word	0x03938700
 800247c:	05f5e0ff 	.word	0x05f5e0ff
 8002480:	08f0d17f 	.word	0x08f0d17f

08002484 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e01d      	b.n	80024ce <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2200      	movs	r2, #0
 80024ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	3206      	adds	r2, #6
 80024c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3301      	adds	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d9de      	bls.n	8002492 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f241 132c 	movw	r3, #4396	; 0x112c
 80024e2:	4413      	add	r3, r2
 80024e4:	2203      	movs	r2, #3
 80024e6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f241 1314 	movw	r3, #4372	; 0x1114
 80024f4:	4413      	add	r3, r2
 80024f6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002504:	601a      	str	r2, [r3, #0]
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e024      	b.n	800256a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3310      	adds	r3, #16
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3301      	adds	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d9d7      	bls.n	8002520 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f241 1330 	movw	r3, #4400	; 0x1130
 8002596:	4413      	add	r3, r2
 8002598:	2203      	movs	r2, #3
 800259a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80025a8:	4413      	add	r3, r2
 80025aa:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f241 1328 	movw	r3, #4392	; 0x1128
 80025bc:	4413      	add	r3, r2
 80025be:	6019      	str	r1, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_GPIO_Init+0x234>)
 80025dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025de:	e194      	b.n	800290a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8186 	beq.w	8002904 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d00b      	beq.n	8002618 <HAL_GPIO_Init+0x4c>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800260c:	2b11      	cmp	r3, #17
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b12      	cmp	r3, #18
 8002616:	d130      	bne.n	800267a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800264e:	2201      	movs	r2, #1
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0201 	and.w	r2, r3, #1
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0xee>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d123      	bne.n	8002702 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	69b9      	ldr	r1, [r7, #24]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80e0 	beq.w	8002904 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_GPIO_Init+0x238>)
 8002746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800274a:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <HAL_GPIO_Init+0x238>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_GPIO_Init+0x238>)
 8002756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002762:	4a29      	ldr	r2, [pc, #164]	; (8002808 <HAL_GPIO_Init+0x23c>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_GPIO_Init+0x240>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d052      	beq.n	8002834 <HAL_GPIO_Init+0x268>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_GPIO_Init+0x244>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_GPIO_Init+0x22e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_GPIO_Init+0x248>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02b      	beq.n	80027f6 <HAL_GPIO_Init+0x22a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x24c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d025      	beq.n	80027f2 <HAL_GPIO_Init+0x226>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_GPIO_Init+0x250>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <HAL_GPIO_Init+0x222>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_GPIO_Init+0x254>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d019      	beq.n	80027ea <HAL_GPIO_Init+0x21e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <HAL_GPIO_Init+0x258>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0x21a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_GPIO_Init+0x25c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00d      	beq.n	80027e2 <HAL_GPIO_Init+0x216>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_GPIO_Init+0x260>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x212>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a17      	ldr	r2, [pc, #92]	; (8002830 <HAL_GPIO_Init+0x264>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_GPIO_Init+0x20e>
 80027d6:	2309      	movs	r3, #9
 80027d8:	e02d      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027da:	230a      	movs	r3, #10
 80027dc:	e02b      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027de:	2308      	movs	r3, #8
 80027e0:	e029      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e027      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027e6:	2306      	movs	r3, #6
 80027e8:	e025      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027ea:	2305      	movs	r3, #5
 80027ec:	e023      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e021      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e01f      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e01d      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e01b      	b.n	8002836 <HAL_GPIO_Init+0x26a>
 80027fe:	bf00      	nop
 8002800:	58000080 	.word	0x58000080
 8002804:	58024400 	.word	0x58024400
 8002808:	58000400 	.word	0x58000400
 800280c:	58020000 	.word	0x58020000
 8002810:	58020400 	.word	0x58020400
 8002814:	58020800 	.word	0x58020800
 8002818:	58020c00 	.word	0x58020c00
 800281c:	58021000 	.word	0x58021000
 8002820:	58021400 	.word	0x58021400
 8002824:	58021800 	.word	0x58021800
 8002828:	58021c00 	.word	0x58021c00
 800282c:	58022000 	.word	0x58022000
 8002830:	58022400 	.word	0x58022400
 8002834:	2300      	movs	r3, #0
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	f002 0203 	and.w	r2, r2, #3
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	4093      	lsls	r3, r2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002846:	4938      	ldr	r1, [pc, #224]	; (8002928 <HAL_GPIO_Init+0x35c>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	3301      	adds	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f ae63 	bne.w	80025e0 <HAL_GPIO_Init+0x14>
  }
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	3724      	adds	r7, #36	; 0x24
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	58000400 	.word	0x58000400

0800292c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002934:	4a08      	ldr	r2, [pc, #32]	; (8002958 <HAL_HSEM_FastTake+0x2c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3320      	adds	r3, #32
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_HSEM_FastTake+0x30>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	58026400 	.word	0x58026400
 800295c:	80000300 	.word	0x80000300

08002960 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <HAL_HSEM_Release+0x24>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	58026400 	.word	0x58026400

08002988 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_HSEM_ActivateNotification+0x20>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_HSEM_ActivateNotification+0x20>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
#endif
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	58026500 	.word	0x58026500

080029ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	43db      	mvns	r3, r3
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f007 fb0f 	bl	8009ff0 <HAL_HSEM_FreeCallback>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	58026500 	.word	0x58026500

080029e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f8a6 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e006      	b.n	8002a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d104      	bne.n	8002a7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_I2C_Init+0x11c>)
 8002a86:	430b      	orrs	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	ea42 0103 	orr.w	r1, r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	021a      	lsls	r2, r3, #8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69d9      	ldr	r1, [r3, #28]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	02008000 	.word	0x02008000

08002b00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	4608      	mov	r0, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	460b      	mov	r3, r1
 8002b14:	813b      	strh	r3, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	f040 80f9 	bne.w	8002d1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_I2C_Mem_Write+0x34>
 8002b2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ed      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Mem_Write+0x4e>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0e6      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b56:	f7fe ff47 	bl	80019e8 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2319      	movs	r3, #25
 8002b62:	2201      	movs	r2, #1
 8002b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f96f 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d1      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2221      	movs	r2, #33	; 0x21
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba0:	88f8      	ldrh	r0, [r7, #6]
 8002ba2:	893a      	ldrh	r2, [r7, #8]
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4603      	mov	r3, r0
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f8d3 	bl	8002d5c <I2C_RequestMemoryWrite>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0a9      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2bff      	cmp	r3, #255	; 0xff
 8002bd0:	d90e      	bls.n	8002bf0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	8979      	ldrh	r1, [r7, #10]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fa51 	bl	8003090 <I2C_TransferConfig>
 8002bee:	e00f      	b.n	8002c10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	2300      	movs	r3, #0
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa40 	bl	8003090 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f959 	bl	8002ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e07b      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d034      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x1c8>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d130      	bne.n	8002cc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f8eb 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e04d      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d90e      	bls.n	8002ca8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	22ff      	movs	r2, #255	; 0xff
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	8979      	ldrh	r1, [r7, #10]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f9f5 	bl	8003090 <I2C_TransferConfig>
 8002ca6:	e00f      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f9e4 	bl	8003090 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d19e      	bne.n	8002c10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f938 	bl	8002f4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e01a      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_I2C_Mem_Write+0x224>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
  }
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	817b      	strh	r3, [r7, #10]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	813b      	strh	r3, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <I2C_RequestMemoryWrite+0xa4>)
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f983 	bl	8003090 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f89c 	bl	8002ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e02c      	b.n	8002df8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
 8002dae:	e015      	b.n	8002ddc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002db0:	893b      	ldrh	r3, [r7, #8]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f882 	bl	8002ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e012      	b.n	8002df8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f830 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	80002000 	.word	0x80002000

08002e04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d103      	bne.n	8002e22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d007      	beq.n	8002e40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	619a      	str	r2, [r3, #24]
  }
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	e022      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d01e      	beq.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fdbf 	bl	80019e8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d113      	bne.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e00f      	b.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d0cd      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ed8:	e02c      	b.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f870 	bl	8002fc4 <I2C_IsAcknowledgeFailed>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02a      	b.n	8002f44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d01e      	beq.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe fd77 	bl	80019e8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d113      	bne.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e007      	b.n	8002f44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d1cb      	bne.n	8002eda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f58:	e028      	b.n	8002fac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f830 	bl	8002fc4 <I2C_IsAcknowledgeFailed>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e026      	b.n	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fd3b 	bl	80019e8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d113      	bne.n	8002fac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d1cf      	bne.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d151      	bne.n	8003082 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fde:	e022      	b.n	8003026 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d01e      	beq.n	8003026 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fe fcfe 	bl	80019e8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_IsAcknowledgeFailed+0x3a>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e02e      	b.n	8003084 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b20      	cmp	r3, #32
 8003032:	d1d5      	bne.n	8002fe0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2210      	movs	r2, #16
 800303a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2220      	movs	r2, #32
 8003042:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fedd 	bl	8002e04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <I2C_IsAcknowledgeFailed+0xc8>)
 8003056:	400b      	ands	r3, r1
 8003058:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	fe00e800 	.word	0xfe00e800

08003090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	817b      	strh	r3, [r7, #10]
 800309e:	4613      	mov	r3, r2
 80030a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	0d5b      	lsrs	r3, r3, #21
 80030ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <I2C_TransferConfig+0x58>)
 80030b2:	430b      	orrs	r3, r1
 80030b4:	43db      	mvns	r3, r3
 80030b6:	ea02 0103 	and.w	r1, r2, r3
 80030ba:	897b      	ldrh	r3, [r7, #10]
 80030bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030c0:	7a7b      	ldrb	r3, [r7, #9]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	03ff63ff 	.word	0x03ff63ff

080030ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d138      	bne.n	8003174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800310c:	2302      	movs	r3, #2
 800310e:	e032      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	d139      	bne.n	800320c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e033      	b.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2224      	movs	r2, #36	; 0x24
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800321a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321c:	b08f      	sub	sp, #60	; 0x3c
 800321e:	af0a      	add	r7, sp, #40	; 0x28
 8003220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e116      	b.n	800345a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fa94 	bl	8001774 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fe32 	bl	8006ed4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	687e      	ldr	r6, [r7, #4]
 8003278:	466d      	mov	r5, sp
 800327a:	f106 0410 	add.w	r4, r6, #16
 800327e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800328a:	e885 0003 	stmia.w	r5, {r0, r1}
 800328e:	1d33      	adds	r3, r6, #4
 8003290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003292:	6838      	ldr	r0, [r7, #0]
 8003294:	f003 fdb0 	bl	8006df8 <USB_CoreInit>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0d7      	b.n	800345a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fe20 	bl	8006ef6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	e04a      	b.n	8003352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	333d      	adds	r3, #61	; 0x3d
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	333c      	adds	r3, #60	; 0x3c
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	b298      	uxth	r0, r3
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3342      	adds	r3, #66	; 0x42
 80032f8:	4602      	mov	r2, r0
 80032fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	333f      	adds	r3, #63	; 0x3f
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3344      	adds	r3, #68	; 0x44
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3348      	adds	r3, #72	; 0x48
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3350      	adds	r3, #80	; 0x50
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3301      	adds	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3af      	bcc.n	80032bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e044      	b.n	80033ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	3301      	adds	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3b5      	bcc.n	8003362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	687e      	ldr	r6, [r7, #4]
 80033fe:	466d      	mov	r5, sp
 8003400:	f106 0410 	add.w	r4, r6, #16
 8003404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003410:	e885 0003 	stmia.w	r5, {r0, r1}
 8003414:	1d33      	adds	r3, r6, #4
 8003416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	f003 fd97 	bl	8006f4c <USB_DevInit>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e014      	b.n	800345a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f80b 	bl	8003464 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 ff39 	bl	80072ca <USB_DevDisconnect>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003464 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003494:	4313      	orrs	r3, r2
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	10000003 	.word	0x10000003

080034ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_PWREx_ConfigSupply+0xb0>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d00a      	beq.n	80034d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034c0:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_PWREx_ConfigSupply+0xb0>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d001      	beq.n	80034d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e040      	b.n	8003554 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e03e      	b.n	8003554 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_PWREx_ConfigSupply+0xb0>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80034de:	491f      	ldr	r1, [pc, #124]	; (800355c <HAL_PWREx_ConfigSupply+0xb0>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034e6:	f7fe fa7f 	bl	80019e8 <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034ec:	e009      	b.n	8003502 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034ee:	f7fe fa7b 	bl	80019e8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034fc:	d901      	bls.n	8003502 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e028      	b.n	8003554 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_PWREx_ConfigSupply+0xb0>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350e:	d1ee      	bne.n	80034ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b1e      	cmp	r3, #30
 8003514:	d008      	beq.n	8003528 <HAL_PWREx_ConfigSupply+0x7c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b2e      	cmp	r3, #46	; 0x2e
 800351a:	d005      	beq.n	8003528 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b1d      	cmp	r3, #29
 8003520:	d002      	beq.n	8003528 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b2d      	cmp	r3, #45	; 0x2d
 8003526:	d114      	bne.n	8003552 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003528:	f7fe fa5e 	bl	80019e8 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800352e:	e009      	b.n	8003544 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003530:	f7fe fa5a 	bl	80019e8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353e:	d901      	bls.n	8003544 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_PWREx_ConfigSupply+0xb0>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	d1ee      	bne.n	8003530 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	58024800 	.word	0x58024800

08003560 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	58024800 	.word	0x58024800

08003580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e3ff      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8087 	beq.w	80036ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a0:	4b99      	ldr	r3, [pc, #612]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035aa:	4b97      	ldr	r3, [pc, #604]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d007      	beq.n	80035c6 <HAL_RCC_OscConfig+0x46>
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	2b18      	cmp	r3, #24
 80035ba:	d110      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d10b      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c6:	4b90      	ldr	r3, [pc, #576]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06c      	beq.n	80036ac <HAL_RCC_OscConfig+0x12c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d168      	bne.n	80036ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e3d9      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x76>
 80035e8:	4b87      	ldr	r3, [pc, #540]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a86      	ldr	r2, [pc, #536]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	e02e      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b82      	ldr	r3, [pc, #520]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a81      	ldr	r2, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e01d      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0xbc>
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a78      	ldr	r2, [pc, #480]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a75      	ldr	r2, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 800363c:	4b72      	ldr	r3, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a71      	ldr	r2, [pc, #452]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6e      	ldr	r2, [pc, #440]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe f9c4 	bl	80019e8 <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe f9c0 	bl	80019e8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e38d      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003676:	4b64      	ldr	r3, [pc, #400]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0xe4>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f9b0 	bl	80019e8 <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe f9ac 	bl	80019e8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e379      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800369e:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x10c>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80ae 	beq.w	8003818 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036bc:	4b52      	ldr	r3, [pc, #328]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036c6:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_RCC_OscConfig+0x162>
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	2b18      	cmp	r3, #24
 80036d6:	d13a      	bne.n	800374e <HAL_RCC_OscConfig+0x1ce>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d135      	bne.n	800374e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x17a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e34b      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	f7fe f9a5 	bl	8001a48 <HAL_GetREVID>
 80036fe:	4603      	mov	r3, r0
 8003700:	f241 0203 	movw	r2, #4099	; 0x1003
 8003704:	4293      	cmp	r3, r2
 8003706:	d817      	bhi.n	8003738 <HAL_RCC_OscConfig+0x1b8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d108      	bne.n	8003722 <HAL_RCC_OscConfig+0x1a2>
 8003710:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003718:	4a3b      	ldr	r2, [pc, #236]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003720:	e07a      	b.n	8003818 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	031b      	lsls	r3, r3, #12
 8003730:	4935      	ldr	r1, [pc, #212]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003736:	e06f      	b.n	8003818 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b33      	ldr	r3, [pc, #204]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	4930      	ldr	r1, [pc, #192]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374c:	e064      	b.n	8003818 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d045      	beq.n	80037e2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003756:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0219 	bic.w	r2, r3, #25
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	4929      	ldr	r1, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe f93e 	bl	80019e8 <HAL_GetTick>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe f93a 	bl	80019e8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e307      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	f7fe f95b 	bl	8001a48 <HAL_GetREVID>
 8003792:	4603      	mov	r3, r0
 8003794:	f241 0203 	movw	r2, #4099	; 0x1003
 8003798:	4293      	cmp	r3, r2
 800379a:	d817      	bhi.n	80037cc <HAL_RCC_OscConfig+0x24c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d108      	bne.n	80037b6 <HAL_RCC_OscConfig+0x236>
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037ac:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b2:	6053      	str	r3, [r2, #4]
 80037b4:	e030      	b.n	8003818 <HAL_RCC_OscConfig+0x298>
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	4910      	ldr	r1, [pc, #64]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
 80037ca:	e025      	b.n	8003818 <HAL_RCC_OscConfig+0x298>
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	490b      	ldr	r1, [pc, #44]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	e01a      	b.n	8003818 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <HAL_RCC_OscConfig+0x288>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fe f8fb 	bl	80019e8 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f6:	f7fe f8f7 	bl	80019e8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d903      	bls.n	800380c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e2c4      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
 8003808:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800380c:	4ba4      	ldr	r3, [pc, #656]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a9 	beq.w	8003978 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003826:	4b9e      	ldr	r3, [pc, #632]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800382e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003830:	4b9b      	ldr	r3, [pc, #620]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d007      	beq.n	800384c <HAL_RCC_OscConfig+0x2cc>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b18      	cmp	r3, #24
 8003840:	d13a      	bne.n	80038b8 <HAL_RCC_OscConfig+0x338>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d135      	bne.n	80038b8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800384c:	4b94      	ldr	r3, [pc, #592]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_OscConfig+0x2e4>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e296      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003864:	f7fe f8f0 	bl	8001a48 <HAL_GetREVID>
 8003868:	4603      	mov	r3, r0
 800386a:	f241 0203 	movw	r2, #4099	; 0x1003
 800386e:	4293      	cmp	r3, r2
 8003870:	d817      	bhi.n	80038a2 <HAL_RCC_OscConfig+0x322>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	2b20      	cmp	r3, #32
 8003878:	d108      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 800387a:	4b89      	ldr	r3, [pc, #548]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003882:	4a87      	ldr	r2, [pc, #540]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003888:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800388a:	e075      	b.n	8003978 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800388c:	4b84      	ldr	r3, [pc, #528]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	4981      	ldr	r1, [pc, #516]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038a0:	e06a      	b.n	8003978 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a2:	4b7f      	ldr	r3, [pc, #508]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	061b      	lsls	r3, r3, #24
 80038b0:	497b      	ldr	r1, [pc, #492]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038b6:	e05f      	b.n	8003978 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d042      	beq.n	8003946 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038c0:	4b77      	ldr	r3, [pc, #476]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a76      	ldr	r2, [pc, #472]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80038c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe f88c 	bl	80019e8 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038d4:	f7fe f888 	bl	80019e8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e255      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038e6:	4b6e      	ldr	r3, [pc, #440]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f2:	f7fe f8a9 	bl	8001a48 <HAL_GetREVID>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d817      	bhi.n	8003930 <HAL_RCC_OscConfig+0x3b0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	2b20      	cmp	r3, #32
 8003906:	d108      	bne.n	800391a <HAL_RCC_OscConfig+0x39a>
 8003908:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003910:	4a63      	ldr	r2, [pc, #396]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003916:	6053      	str	r3, [r2, #4]
 8003918:	e02e      	b.n	8003978 <HAL_RCC_OscConfig+0x3f8>
 800391a:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	069b      	lsls	r3, r3, #26
 8003928:	495d      	ldr	r1, [pc, #372]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
 800392e:	e023      	b.n	8003978 <HAL_RCC_OscConfig+0x3f8>
 8003930:	4b5b      	ldr	r3, [pc, #364]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	061b      	lsls	r3, r3, #24
 800393e:	4958      	ldr	r1, [pc, #352]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003940:	4313      	orrs	r3, r2
 8003942:	60cb      	str	r3, [r1, #12]
 8003944:	e018      	b.n	8003978 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003946:	4b56      	ldr	r3, [pc, #344]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a55      	ldr	r2, [pc, #340]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800394c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe f849 	bl	80019e8 <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800395a:	f7fe f845 	bl	80019e8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e212      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d036      	beq.n	80039f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d019      	beq.n	80039c0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398c:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	4a43      	ldr	r2, [pc, #268]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe f826 	bl	80019e8 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe f822 	bl	80019e8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1ef      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x420>
 80039be:	e018      	b.n	80039f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c0:	4b37      	ldr	r3, [pc, #220]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	4a36      	ldr	r2, [pc, #216]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe f80c 	bl	80019e8 <HAL_GetTick>
 80039d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe f808 	bl	80019e8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1d5      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039e6:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 80039e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d036      	beq.n	8003a6c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d019      	beq.n	8003a3a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a12:	f7fd ffe9 	bl	80019e8 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a1a:	f7fd ffe5 	bl	80019e8 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e1b2      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x49a>
 8003a38:	e018      	b.n	8003a6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a46:	f7fd ffcf 	bl	80019e8 <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a4e:	f7fd ffcb 	bl	80019e8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e198      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCC_OscConfig+0x520>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8085 	beq.w	8003b84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_RCC_OscConfig+0x524>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <HAL_RCC_OscConfig+0x524>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a86:	f7fd ffaf 	bl	80019e8 <HAL_GetTick>
 8003a8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8c:	e00c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fd ffab 	bl	80019e8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b64      	cmp	r3, #100	; 0x64
 8003a9a:	d905      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e178      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa8:	4b96      	ldr	r3, [pc, #600]	; (8003d04 <HAL_RCC_OscConfig+0x784>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ec      	beq.n	8003a8e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x54a>
 8003abc:	4b92      	ldr	r3, [pc, #584]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a91      	ldr	r2, [pc, #580]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	e02d      	b.n	8003b26 <HAL_RCC_OscConfig+0x5a6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x56c>
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a8c      	ldr	r2, [pc, #560]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	4b8a      	ldr	r3, [pc, #552]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a89      	ldr	r2, [pc, #548]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	e01c      	b.n	8003b26 <HAL_RCC_OscConfig+0x5a6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x58e>
 8003af4:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a80      	ldr	r2, [pc, #512]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCC_OscConfig+0x5a6>
 8003b0e:	4b7e      	ldr	r3, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a7d      	ldr	r2, [pc, #500]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	4b7b      	ldr	r3, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a7a      	ldr	r2, [pc, #488]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d015      	beq.n	8003b5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd ff5b 	bl	80019e8 <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd ff57 	bl	80019e8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e122      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b4c:	4b6e      	ldr	r3, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ee      	beq.n	8003b36 <HAL_RCC_OscConfig+0x5b6>
 8003b58:	e014      	b.n	8003b84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd ff45 	bl	80019e8 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fd ff41 	bl	80019e8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e10c      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b78:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ee      	bne.n	8003b62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8101 	beq.w	8003d90 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b96:	2b18      	cmp	r3, #24
 8003b98:	f000 80bc 	beq.w	8003d14 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	f040 8095 	bne.w	8003cd0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd ff19 	bl	80019e8 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd ff15 	bl	80019e8 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0e2      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bcc:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <HAL_RCC_OscConfig+0x78c>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	430a      	orrs	r2, r1
 8003bec:	4946      	ldr	r1, [pc, #280]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	628b      	str	r3, [r1, #40]	; 0x28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	3b01      	subs	r3, #1
 8003c02:	025b      	lsls	r3, r3, #9
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c22:	4939      	ldr	r1, [pc, #228]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	4a36      	ldr	r2, [pc, #216]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c34:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCC_OscConfig+0x790>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c40:	00d2      	lsls	r2, r2, #3
 8003c42:	4931      	ldr	r1, [pc, #196]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c48:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f023 020c 	bic.w	r2, r3, #12
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	492c      	ldr	r1, [pc, #176]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f023 0202 	bic.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4928      	ldr	r1, [pc, #160]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fe9e 	bl	80019e8 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fe9a 	bl	80019e8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e067      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cc2:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x730>
 8003cce:	e05f      	b.n	8003d90 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fe84 	bl	80019e8 <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fd fe80 	bl	80019e8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e04d      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <HAL_RCC_OscConfig+0x788>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x764>
 8003d02:	e045      	b.n	8003d90 <HAL_RCC_OscConfig+0x810>
 8003d04:	58024800 	.word	0x58024800
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	fffffc0c 	.word	0xfffffc0c
 8003d10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_RCC_OscConfig+0x81c>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d1a:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <HAL_RCC_OscConfig+0x81c>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d031      	beq.n	8003d8c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d12a      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d122      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d11a      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	0a5b      	lsrs	r3, r3, #9
 8003d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d111      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d108      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	0e1b      	lsrs	r3, r3, #24
 8003d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3730      	adds	r7, #48	; 0x30
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	58024400 	.word	0x58024400

08003da0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e19c      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db4:	4b8a      	ldr	r3, [pc, #552]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d910      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b87      	ldr	r3, [pc, #540]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 020f 	bic.w	r2, r3, #15
 8003dca:	4985      	ldr	r1, [pc, #532]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b83      	ldr	r3, [pc, #524]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e184      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d908      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e00:	4b78      	ldr	r3, [pc, #480]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	4975      	ldr	r1, [pc, #468]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d010      	beq.n	8003e40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	4b70      	ldr	r3, [pc, #448]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d908      	bls.n	8003e40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e2e:	4b6d      	ldr	r3, [pc, #436]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	496a      	ldr	r1, [pc, #424]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d908      	bls.n	8003e6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	495e      	ldr	r1, [pc, #376]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d908      	bls.n	8003e9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e8a:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	4953      	ldr	r1, [pc, #332]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	4b4d      	ldr	r3, [pc, #308]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d908      	bls.n	8003eca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f023 020f 	bic.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4947      	ldr	r1, [pc, #284]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d055      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	4940      	ldr	r1, [pc, #256]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ef0:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d121      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0f6      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d115      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0ea      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d109      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0de      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f30:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0d6      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f40:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f023 0207 	bic.w	r2, r3, #7
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4925      	ldr	r1, [pc, #148]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fd fd49 	bl	80019e8 <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5a:	f7fd fd45 	bl	80019e8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0be      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d1eb      	bne.n	8003f5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d208      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f023 020f 	bic.w	r2, r3, #15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <HAL_RCC_ClockConfig+0x244>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d214      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 020f 	bic.w	r2, r3, #15
 8003fc6:	4906      	ldr	r1, [pc, #24]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_RCC_ClockConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e086      	b.n	80040ee <HAL_RCC_ClockConfig+0x34e>
 8003fe0:	52002000 	.word	0x52002000
 8003fe4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004000:	429a      	cmp	r2, r3
 8004002:	d208      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004004:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	4939      	ldr	r1, [pc, #228]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004012:	4313      	orrs	r3, r2
 8004014:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800402e:	429a      	cmp	r2, r3
 8004030:	d208      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	492e      	ldr	r1, [pc, #184]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004040:	4313      	orrs	r3, r2
 8004042:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d010      	beq.n	8004072 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800405c:	429a      	cmp	r2, r3
 800405e:	d208      	bcs.n	8004072 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	4922      	ldr	r1, [pc, #136]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 800406e:	4313      	orrs	r3, r2
 8004070:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408a:	429a      	cmp	r2, r3
 800408c:	d208      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4917      	ldr	r1, [pc, #92]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 800409c:	4313      	orrs	r3, r2
 800409e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040a0:	f000 f834 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	4912      	ldr	r1, [pc, #72]	; (80040fc <HAL_RCC_ClockConfig+0x35c>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <HAL_RCC_ClockConfig+0x358>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_RCC_ClockConfig+0x35c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x360>)
 80040d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <HAL_RCC_ClockConfig+0x364>)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x368>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fc36 	bl	8001954 <HAL_InitTick>
 80040e8:	4603      	mov	r3, r0
 80040ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	0800bac0 	.word	0x0800bac0
 8004100:	24000004 	.word	0x24000004
 8004104:	24000000 	.word	0x24000000
 8004108:	24000008 	.word	0x24000008

0800410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004112:	4bb3      	ldr	r3, [pc, #716]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411a:	2b18      	cmp	r3, #24
 800411c:	f200 8155 	bhi.w	80043ca <HAL_RCC_GetSysClockFreq+0x2be>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800418d 	.word	0x0800418d
 800412c:	080043cb 	.word	0x080043cb
 8004130:	080043cb 	.word	0x080043cb
 8004134:	080043cb 	.word	0x080043cb
 8004138:	080043cb 	.word	0x080043cb
 800413c:	080043cb 	.word	0x080043cb
 8004140:	080043cb 	.word	0x080043cb
 8004144:	080043cb 	.word	0x080043cb
 8004148:	080041b3 	.word	0x080041b3
 800414c:	080043cb 	.word	0x080043cb
 8004150:	080043cb 	.word	0x080043cb
 8004154:	080043cb 	.word	0x080043cb
 8004158:	080043cb 	.word	0x080043cb
 800415c:	080043cb 	.word	0x080043cb
 8004160:	080043cb 	.word	0x080043cb
 8004164:	080043cb 	.word	0x080043cb
 8004168:	080041b9 	.word	0x080041b9
 800416c:	080043cb 	.word	0x080043cb
 8004170:	080043cb 	.word	0x080043cb
 8004174:	080043cb 	.word	0x080043cb
 8004178:	080043cb 	.word	0x080043cb
 800417c:	080043cb 	.word	0x080043cb
 8004180:	080043cb 	.word	0x080043cb
 8004184:	080043cb 	.word	0x080043cb
 8004188:	080041bf 	.word	0x080041bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800418c:	4b94      	ldr	r3, [pc, #592]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004198:	4b91      	ldr	r3, [pc, #580]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	08db      	lsrs	r3, r3, #3
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	4a90      	ldr	r2, [pc, #576]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80041aa:	e111      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041ac:	4b8d      	ldr	r3, [pc, #564]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041ae:	61bb      	str	r3, [r7, #24]
    break;
 80041b0:	e10e      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80041b2:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041b4:	61bb      	str	r3, [r7, #24]
    break;
 80041b6:	e10b      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80041b8:	4b8c      	ldr	r3, [pc, #560]	; (80043ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041ba:	61bb      	str	r3, [r7, #24]
    break;
 80041bc:	e108      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80041c8:	4b85      	ldr	r3, [pc, #532]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041d4:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041de:	4b80      	ldr	r3, [pc, #512]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	08db      	lsrs	r3, r3, #3
 80041e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80e1 	beq.w	80043c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b02      	cmp	r3, #2
 8004206:	f000 8083 	beq.w	8004310 <HAL_RCC_GetSysClockFreq+0x204>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b02      	cmp	r3, #2
 800420e:	f200 80a1 	bhi.w	8004354 <HAL_RCC_GetSysClockFreq+0x248>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x114>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d056      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800421e:	e099      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004220:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02d      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800422c:	4b6c      	ldr	r3, [pc, #432]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	08db      	lsrs	r3, r3, #3
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	4a6b      	ldr	r2, [pc, #428]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
 800423c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004256:	4b62      	ldr	r3, [pc, #392]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004266:	ed97 6a02 	vldr	s12, [r7, #8]
 800426a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800426e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004286:	e087      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429a:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ca:	e065      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042de:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80042f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800430e:	e043      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a02 	vldr	s12, [r7, #8]
 8004336:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004352:	e021      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a02 	vldr	s12, [r7, #8]
 800437a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004396:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	0a5b      	lsrs	r3, r3, #9
 800439e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a2:	3301      	adds	r3, #1
 80043a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	ee07 3a90 	vmov	s15, r3
 80043ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043bc:	ee17 3a90 	vmov	r3, s15
 80043c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
    break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043cc:	61bb      	str	r3, [r7, #24]
    break;
 80043ce:	bf00      	nop
  }

  return sysclockfreq;
 80043d0:	69bb      	ldr	r3, [r7, #24]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400
 80043e4:	03d09000 	.word	0x03d09000
 80043e8:	003d0900 	.word	0x003d0900
 80043ec:	007a1200 	.word	0x007a1200
 80043f0:	46000000 	.word	0x46000000
 80043f4:	4c742400 	.word	0x4c742400
 80043f8:	4a742400 	.word	0x4a742400
 80043fc:	4af42400 	.word	0x4af42400

08004400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004406:	f7ff fe81 	bl	800410c <HAL_RCC_GetSysClockFreq>
 800440a:	4602      	mov	r2, r0
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCC_GetHCLKFreq+0x50>)
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	0a1b      	lsrs	r3, r3, #8
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	490f      	ldr	r1, [pc, #60]	; (8004454 <HAL_RCC_GetHCLKFreq+0x54>)
 8004418:	5ccb      	ldrb	r3, [r1, r3]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_RCC_GetHCLKFreq+0x50>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_GetHCLKFreq+0x54>)
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	fa22 f303 	lsr.w	r3, r2, r3
 800443a:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_RCC_GetHCLKFreq+0x58>)
 800443c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800443e:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <HAL_RCC_GetHCLKFreq+0x58>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58024400 	.word	0x58024400
 8004454:	0800bac0 	.word	0x0800bac0
 8004458:	24000004 	.word	0x24000004
 800445c:	24000000 	.word	0x24000000

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004464:	f7ff ffcc 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4904      	ldr	r1, [pc, #16]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	58024400 	.word	0x58024400
 8004488:	0800bac0 	.word	0x0800bac0

0800448c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004490:	f7ff ffb6 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4904      	ldr	r1, [pc, #16]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	58024400 	.word	0x58024400
 80044b4:	0800bac0 	.word	0x0800bac0

080044b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044c0:	2300      	movs	r3, #0
 80044c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c4:	2300      	movs	r3, #0
 80044c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d03f      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044dc:	d02a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044e2:	d824      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e8:	d018      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ee:	d81e      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d007      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044fa:	e018      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4bab      	ldr	r3, [pc, #684]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4aaa      	ldr	r2, [pc, #680]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004508:	e015      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f9cf 	bl	80058b4 <RCCEx_PLL2_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800451a:	e00c      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3324      	adds	r3, #36	; 0x24
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f001 fa78 	bl	8005a18 <RCCEx_PLL3_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800452c:	e003      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
      break;
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800453c:	4b9b      	ldr	r3, [pc, #620]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004548:	4998      	ldr	r1, [pc, #608]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	650b      	str	r3, [r1, #80]	; 0x50
 800454e:	e001      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d03d      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2b04      	cmp	r3, #4
 8004566:	d826      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004585 	.word	0x08004585
 8004574:	08004593 	.word	0x08004593
 8004578:	080045a5 	.word	0x080045a5
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045bd 	.word	0x080045bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004584:	4b89      	ldr	r3, [pc, #548]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	4a88      	ldr	r2, [pc, #544]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800458a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004590:	e015      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f98b 	bl	80058b4 <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045a2:	e00c      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fa34 	bl	8005a18 <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c4:	4b79      	ldr	r3, [pc, #484]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	f023 0207 	bic.w	r2, r3, #7
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	4976      	ldr	r1, [pc, #472]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	650b      	str	r3, [r1, #80]	; 0x50
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d042      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f0:	d02b      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d825      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045f8:	2bc0      	cmp	r3, #192	; 0xc0
 80045fa:	d028      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045fc:	2bc0      	cmp	r3, #192	; 0xc0
 80045fe:	d821      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004600:	2b80      	cmp	r3, #128	; 0x80
 8004602:	d016      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004604:	2b80      	cmp	r3, #128	; 0x80
 8004606:	d81d      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d007      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004610:	e018      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004612:	4b66      	ldr	r3, [pc, #408]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	4a65      	ldr	r2, [pc, #404]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800461e:	e017      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	2100      	movs	r1, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f001 f944 	bl	80058b4 <RCCEx_PLL2_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004630:	e00e      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3324      	adds	r3, #36	; 0x24
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f9ed 	bl	8005a18 <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004642:	e005      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	75fb      	strb	r3, [r7, #23]
      break;
 8004648:	e002      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800464e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004656:	4b55      	ldr	r3, [pc, #340]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	4952      	ldr	r1, [pc, #328]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	650b      	str	r3, [r1, #80]	; 0x50
 8004668:	e001      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004676:	2b00      	cmp	r3, #0
 8004678:	d049      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004684:	d030      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800468a:	d82a      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800468c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004690:	d02c      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004692:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004696:	d824      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469c:	d018      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d81e      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80046a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ac:	d007      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x206>
 80046ae:	e018      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046bc:	e017      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f8f5 	bl	80058b4 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80046ce:	e00e      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3324      	adds	r3, #36	; 0x24
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 f99e 	bl	8005a18 <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046e0:	e005      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046e8:	bf00      	nop
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046f4:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004702:	492a      	ldr	r1, [pc, #168]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004704:	4313      	orrs	r3, r2
 8004706:	658b      	str	r3, [r1, #88]	; 0x58
 8004708:	e001      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004716:	2b00      	cmp	r3, #0
 8004718:	d04c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004724:	d030      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800472a:	d82a      	bhi.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800472c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004730:	d02c      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004736:	d824      	bhi.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473c:	d018      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800473e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004742:	d81e      	bhi.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800474c:	d007      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800474e:	e018      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800475a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800475c:	e017      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f001 f8a5 	bl	80058b4 <RCCEx_PLL2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800476e:	e00e      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3324      	adds	r3, #36	; 0x24
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f001 f94e 	bl	8005a18 <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004780:	e005      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
      break;
 8004786:	e002      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800478c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10d      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047a2:	4902      	ldr	r1, [pc, #8]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	658b      	str	r3, [r1, #88]	; 0x58
 80047a8:	e004      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d032      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d01c      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d817      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d00c      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d813      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d10f      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4baf      	ldr	r3, [pc, #700]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	4aae      	ldr	r2, [pc, #696]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047e8:	e00e      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 f85f 	bl	80058b4 <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047fa:	e005      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	e002      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800480e:	4ba3      	ldr	r3, [pc, #652]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	49a0      	ldr	r1, [pc, #640]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004820:	e001      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d047      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800483a:	d030      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004840:	d82a      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004846:	d02c      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800484c:	d824      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004852:	d018      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004858:	d81e      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d007      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004864:	e018      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004866:	4b8d      	ldr	r3, [pc, #564]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4a8c      	ldr	r2, [pc, #560]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004872:	e017      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f001 f81a 	bl	80058b4 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004884:	e00e      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	; 0x24
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f001 f8c3 	bl	8005a18 <RCCEx_PLL3_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004896:	e005      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
      break;
 800489c:	e002      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80048a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048aa:	4b7c      	ldr	r3, [pc, #496]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	4979      	ldr	r1, [pc, #484]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	650b      	str	r3, [r1, #80]	; 0x50
 80048bc:	e001      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d049      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d6:	d02e      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80048d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048dc:	d828      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80048de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048e2:	d02a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80048e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048e8:	d822      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80048ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048ee:	d026      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048f4:	d81c      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80048f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048fa:	d010      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x466>
 80048fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004900:	d816      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01d      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490a:	d111      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	2101      	movs	r1, #1
 8004912:	4618      	mov	r0, r3
 8004914:	f000 ffce 	bl	80058b4 <RCCEx_PLL2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800491c:	e012      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	2101      	movs	r1, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f001 f877 	bl	8005a18 <RCCEx_PLL3_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800492e:	e009      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	75fb      	strb	r3, [r7, #23]
      break;
 8004934:	e006      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004936:	bf00      	nop
 8004938:	e004      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800493a:	bf00      	nop
 800493c:	e002      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800493e:	bf00      	nop
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800494a:	4b54      	ldr	r3, [pc, #336]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004956:	4951      	ldr	r1, [pc, #324]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	650b      	str	r3, [r1, #80]	; 0x50
 800495c:	e001      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04b      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004978:	d02e      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800497a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800497e:	d828      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d02a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d822      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800498c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004990:	d026      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004996:	d81c      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499c:	d010      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800499e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a2:	d816      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80049a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ac:	d111      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 ff7d 	bl	80058b4 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80049be:	e012      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	2101      	movs	r1, #1
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f826 	bl	8005a18 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80049d0:	e009      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
      break;
 80049d6:	e006      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80049d8:	bf00      	nop
 80049da:	e004      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80049dc:	bf00      	nop
 80049de:	e002      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80049e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049ec:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049fa:	4928      	ldr	r1, [pc, #160]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004a00:	e001      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02f      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d814      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d015      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a2a:	d10f      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a1a      	ldr	r2, [pc, #104]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a38:	e00c      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 ff37 	bl	80058b4 <RCCEx_PLL2_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a4a:	e003      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a66:	490d      	ldr	r1, [pc, #52]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	650b      	str	r3, [r1, #80]	; 0x50
 8004a6c:	e001      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d033      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d81c      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ac7 	.word	0x08004ac7
 8004a90:	08004aa1 	.word	0x08004aa1
 8004a94:	08004aaf 	.word	0x08004aaf
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa0:	4bb8      	ldr	r3, [pc, #736]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4ab7      	ldr	r2, [pc, #732]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004aac:	e00c      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fefd 	bl	80058b4 <RCCEx_PLL2_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004abe:	e003      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ace:	4bad      	ldr	r3, [pc, #692]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	49aa      	ldr	r1, [pc, #680]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ae0:	e001      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8086 	beq.w	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af4:	4ba4      	ldr	r3, [pc, #656]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4aa3      	ldr	r2, [pc, #652]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b00:	f7fc ff72 	bl	80019e8 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b06:	e009      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fc ff6e 	bl	80019e8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d902      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	75fb      	strb	r3, [r7, #23]
        break;
 8004b1a:	e005      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b1c:	4b9a      	ldr	r3, [pc, #616]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ef      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d166      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b2e:	4b95      	ldr	r3, [pc, #596]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b38:	4053      	eors	r3, r2
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b42:	4b90      	ldr	r3, [pc, #576]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b4c:	4b8d      	ldr	r3, [pc, #564]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	4a8c      	ldr	r2, [pc, #560]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b58:	4b8a      	ldr	r3, [pc, #552]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a89      	ldr	r2, [pc, #548]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b64:	4a87      	ldr	r2, [pc, #540]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b74:	d115      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fc ff37 	bl	80019e8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b7c:	e00b      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fc ff33 	bl	80019e8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d902      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	75fb      	strb	r3, [r7, #23]
            break;
 8004b94:	e005      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b96:	4b7b      	ldr	r3, [pc, #492]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ed      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d126      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004bb8:	4b72      	ldr	r3, [pc, #456]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bc6:	0919      	lsrs	r1, r3, #4
 8004bc8:	4b70      	ldr	r3, [pc, #448]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	496d      	ldr	r1, [pc, #436]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	610b      	str	r3, [r1, #16]
 8004bd2:	e005      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004bd4:	4b6b      	ldr	r3, [pc, #428]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	4a6a      	ldr	r2, [pc, #424]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bde:	6113      	str	r3, [r2, #16]
 8004be0:	4b68      	ldr	r3, [pc, #416]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bee:	4965      	ldr	r1, [pc, #404]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	670b      	str	r3, [r1, #112]	; 0x70
 8004bf4:	e004      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	75bb      	strb	r3, [r7, #22]
 8004bfa:	e001      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d07e      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c10:	2b28      	cmp	r3, #40	; 0x28
 8004c12:	d867      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004c14:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004ceb 	.word	0x08004ceb
 8004c20:	08004ce5 	.word	0x08004ce5
 8004c24:	08004ce5 	.word	0x08004ce5
 8004c28:	08004ce5 	.word	0x08004ce5
 8004c2c:	08004ce5 	.word	0x08004ce5
 8004c30:	08004ce5 	.word	0x08004ce5
 8004c34:	08004ce5 	.word	0x08004ce5
 8004c38:	08004ce5 	.word	0x08004ce5
 8004c3c:	08004cc1 	.word	0x08004cc1
 8004c40:	08004ce5 	.word	0x08004ce5
 8004c44:	08004ce5 	.word	0x08004ce5
 8004c48:	08004ce5 	.word	0x08004ce5
 8004c4c:	08004ce5 	.word	0x08004ce5
 8004c50:	08004ce5 	.word	0x08004ce5
 8004c54:	08004ce5 	.word	0x08004ce5
 8004c58:	08004ce5 	.word	0x08004ce5
 8004c5c:	08004cd3 	.word	0x08004cd3
 8004c60:	08004ce5 	.word	0x08004ce5
 8004c64:	08004ce5 	.word	0x08004ce5
 8004c68:	08004ce5 	.word	0x08004ce5
 8004c6c:	08004ce5 	.word	0x08004ce5
 8004c70:	08004ce5 	.word	0x08004ce5
 8004c74:	08004ce5 	.word	0x08004ce5
 8004c78:	08004ce5 	.word	0x08004ce5
 8004c7c:	08004ceb 	.word	0x08004ceb
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004ce5 	.word	0x08004ce5
 8004c88:	08004ce5 	.word	0x08004ce5
 8004c8c:	08004ce5 	.word	0x08004ce5
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004ce5 	.word	0x08004ce5
 8004c9c:	08004ceb 	.word	0x08004ceb
 8004ca0:	08004ce5 	.word	0x08004ce5
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004ce5 	.word	0x08004ce5
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	08004ceb 	.word	0x08004ceb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fdf4 	bl	80058b4 <RCCEx_PLL2_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fe9d 	bl	8005a18 <RCCEx_PLL3_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cf2:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cfe:	4921      	ldr	r1, [pc, #132]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	654b      	str	r3, [r1, #84]	; 0x54
 8004d04:	e001      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d03e      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d820      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d67 	.word	0x08004d67
 8004d28:	08004d3d 	.word	0x08004d3d
 8004d2c:	08004d4f 	.word	0x08004d4f
 8004d30:	08004d67 	.word	0x08004d67
 8004d34:	08004d67 	.word	0x08004d67
 8004d38:	08004d67 	.word	0x08004d67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	2101      	movs	r1, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fdb6 	bl	80058b4 <RCCEx_PLL2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3324      	adds	r3, #36	; 0x24
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fe5f 	bl	8005a18 <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d5e:	e003      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d72:	f023 0207 	bic.w	r2, r3, #7
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7a:	4902      	ldr	r1, [pc, #8]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004d82:	bf00      	nop
 8004d84:	58024400 	.word	0x58024400
 8004d88:	58024800 	.word	0x58024800
 8004d8c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d039      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d820      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004df3 	.word	0x08004df3
 8004db4:	08004dc9 	.word	0x08004dc9
 8004db8:	08004ddb 	.word	0x08004ddb
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004df3 	.word	0x08004df3
 8004dc4:	08004df3 	.word	0x08004df3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fd70 	bl	80058b4 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fe19 	bl	8005a18 <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfa:	4bb7      	ldr	r3, [pc, #732]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfe:	f023 0207 	bic.w	r2, r3, #7
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	49b3      	ldr	r1, [pc, #716]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e0e:	e001      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d04b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e2a:	d02e      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e30:	d828      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d02a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d822      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e42:	d026      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004e44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e48:	d81c      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e54:	d816      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01d      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5e:	d111      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fd24 	bl	80058b4 <RCCEx_PLL2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e70:	e012      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	2102      	movs	r1, #2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fdcd 	bl	8005a18 <RCCEx_PLL3_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e82:	e009      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
      break;
 8004e88:	e006      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e004      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e9e:	4b8e      	ldr	r3, [pc, #568]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eac:	498a      	ldr	r1, [pc, #552]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	654b      	str	r3, [r1, #84]	; 0x54
 8004eb2:	e001      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ece:	d02e      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004ed0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ed4:	d828      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	d02a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee6:	d026      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eec:	d81c      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d816      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d111      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fcd2 	bl	80058b4 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f14:	e012      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd7b 	bl	8005a18 <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f26:	e009      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e004      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f42:	4b65      	ldr	r3, [pc, #404]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f50:	4961      	ldr	r1, [pc, #388]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	658b      	str	r3, [r1, #88]	; 0x58
 8004f56:	e001      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d04b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f6e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f72:	d02e      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004f74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f78:	d828      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	d02a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	d822      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f8a:	d026      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004f8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f90:	d81c      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f96:	d010      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f9c:	d816      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01d      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	d111      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fc80 	bl	80058b4 <RCCEx_PLL2_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fb8:	e012      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3324      	adds	r3, #36	; 0x24
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fd29 	bl	8005a18 <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fca:	e009      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff4:	4938      	ldr	r1, [pc, #224]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8004ffa:	e001      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	d10a      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3324      	adds	r3, #36	; 0x24
 800501c:	2102      	movs	r1, #2
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fcfa 	bl	8005a18 <RCCEx_PLL3_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503c:	4926      	ldr	r1, [pc, #152]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800503e:	4313      	orrs	r3, r2
 8005040:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005058:	d10a      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3324      	adds	r3, #36	; 0x24
 800505e:	2102      	movs	r1, #2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fcd9 	bl	8005a18 <RCCEx_PLL3_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507e:	4916      	ldr	r1, [pc, #88]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005080:	4313      	orrs	r3, r2
 8005082:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d036      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800509a:	d01f      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d817      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80050a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050aa:	d009      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80050ac:	e011      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fbfd 	bl	80058b4 <RCCEx_PLL2_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050be:	e00e      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	2102      	movs	r1, #2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fca6 	bl	8005a18 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050d0:	e005      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
      break;
 80050d6:	e002      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80050d8:	58024400 	.word	0x58024400
      break;
 80050dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e4:	4b93      	ldr	r3, [pc, #588]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050f2:	4990      	ldr	r1, [pc, #576]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	658b      	str	r3, [r1, #88]	; 0x58
 80050f8:	e001      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d033      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005110:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005114:	d01c      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800511a:	d816      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800511c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005120:	d003      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005126:	d007      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005128:	e00f      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512a:	4b82      	ldr	r3, [pc, #520]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	4a81      	ldr	r2, [pc, #516]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005136:	e00c      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fc6a 	bl	8005a18 <RCCEx_PLL3_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
      break;
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005158:	4b76      	ldr	r3, [pc, #472]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005166:	4973      	ldr	r1, [pc, #460]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	654b      	str	r3, [r1, #84]	; 0x54
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d029      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d007      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800518c:	e00f      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518e:	4b69      	ldr	r3, [pc, #420]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	4a68      	ldr	r2, [pc, #416]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005198:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800519a:	e00b      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	2102      	movs	r1, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb86 	bl	80058b4 <RCCEx_PLL2_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051ac:	e002      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
      break;
 80051b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051ba:	4b5e      	ldr	r3, [pc, #376]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	495b      	ldr	r1, [pc, #364]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051cc:	e001      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fc17 	bl	8005a18 <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d030      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005208:	d017      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800520a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520e:	d811      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005214:	d013      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800521a:	d80b      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d010      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005224:	d106      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005226:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	4a42      	ldr	r2, [pc, #264]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800522c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005232:	e007      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75fb      	strb	r3, [r7, #23]
      break;
 8005238:	e004      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800523a:	bf00      	nop
 800523c:	e002      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800524a:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005256:	4937      	ldr	r1, [pc, #220]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	654b      	str	r3, [r1, #84]	; 0x54
 800525c:	e001      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	492e      	ldr	r1, [pc, #184]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800527c:	4313      	orrs	r3, r2
 800527e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800528c:	4b29      	ldr	r3, [pc, #164]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800529a:	4926      	ldr	r1, [pc, #152]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ac:	4b21      	ldr	r3, [pc, #132]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b8:	491e      	ldr	r1, [pc, #120]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ca:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d4:	6113      	str	r3, [r2, #16]
 80052d6:	4b17      	ldr	r3, [pc, #92]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052e0:	4914      	ldr	r1, [pc, #80]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da08      	bge.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fa:	490e      	ldr	r1, [pc, #56]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	4906      	ldr	r1, [pc, #24]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005320:	7dbb      	ldrb	r3, [r7, #22]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e000      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	58024400 	.word	0x58024400

08005338 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800533c:	f7ff f860 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8005340:	4602      	mov	r2, r0
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	4904      	ldr	r1, [pc, #16]	; (8005360 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800534e:	5ccb      	ldrb	r3, [r1, r3]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	58024400 	.word	0x58024400
 8005360:	0800bac0 	.word	0x0800bac0

08005364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005364:	b480      	push	{r7}
 8005366:	b089      	sub	sp, #36	; 0x24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800536c:	4ba1      	ldr	r3, [pc, #644]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005376:	4b9f      	ldr	r3, [pc, #636]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	0b1b      	lsrs	r3, r3, #12
 800537c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005380:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005382:	4b9c      	ldr	r3, [pc, #624]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800538e:	4b99      	ldr	r3, [pc, #612]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8111 	beq.w	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	f000 8083 	beq.w	80054c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	f200 80a1 	bhi.w	8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d056      	beq.n	800547c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053ce:	e099      	b.n	8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d0:	4b88      	ldr	r3, [pc, #544]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02d      	beq.n	8005438 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053dc:	4b85      	ldr	r3, [pc, #532]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	4a84      	ldr	r2, [pc, #528]	; (80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b7b      	ldr	r3, [pc, #492]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a03 	vldr	s12, [r7, #12]
 800541a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005436:	e087      	b.n	8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a03 	vldr	s12, [r7, #12]
 800545e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800547a:	e065      	b.n	8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548e:	4b59      	ldr	r3, [pc, #356]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054be:	e043      	b.n	8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d2:	4b48      	ldr	r3, [pc, #288]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005502:	e021      	b.n	8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	4b37      	ldr	r3, [pc, #220]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005526:	ed97 6a03 	vldr	s12, [r7, #12]
 800552a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800552e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005546:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	0a5b      	lsrs	r3, r3, #9
 800554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005562:	edd7 6a07 	vldr	s13, [r7, #28]
 8005566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556e:	ee17 2a90 	vmov	r2, s15
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005576:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005590:	edd7 6a07 	vldr	s13, [r7, #28]
 8005594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559c:	ee17 2a90 	vmov	r2, s15
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	0e1b      	lsrs	r3, r3, #24
 80055aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055be:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ca:	ee17 2a90 	vmov	r2, s15
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055d2:	e008      	b.n	80055e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
}
 80055e6:	bf00      	nop
 80055e8:	3724      	adds	r7, #36	; 0x24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	03d09000 	.word	0x03d09000
 80055fc:	46000000 	.word	0x46000000
 8005600:	4c742400 	.word	0x4c742400
 8005604:	4a742400 	.word	0x4a742400
 8005608:	4af42400 	.word	0x4af42400

0800560c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	; 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005614:	4ba1      	ldr	r3, [pc, #644]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800561e:	4b9f      	ldr	r3, [pc, #636]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	0d1b      	lsrs	r3, r3, #20
 8005624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005628:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800562a:	4b9c      	ldr	r3, [pc, #624]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	0a1b      	lsrs	r3, r3, #8
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005636:	4b99      	ldr	r3, [pc, #612]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8111 	beq.w	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b02      	cmp	r3, #2
 800565e:	f000 8083 	beq.w	8005768 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f200 80a1 	bhi.w	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d056      	beq.n	8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005676:	e099      	b.n	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005678:	4b88      	ldr	r3, [pc, #544]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02d      	beq.n	80056e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005684:	4b85      	ldr	r3, [pc, #532]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	4a84      	ldr	r2, [pc, #528]	; (80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b7b      	ldr	r3, [pc, #492]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056de:	e087      	b.n	80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a03 	vldr	s12, [r7, #12]
 8005706:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005722:	e065      	b.n	80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a03 	vldr	s12, [r7, #12]
 800574a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005766:	e043      	b.n	80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b48      	ldr	r3, [pc, #288]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a03 	vldr	s12, [r7, #12]
 800578e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057aa:	e021      	b.n	80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b37      	ldr	r3, [pc, #220]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057f0:	4b2a      	ldr	r3, [pc, #168]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	0a5b      	lsrs	r3, r3, #9
 80057f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580a:	edd7 6a07 	vldr	s13, [r7, #28]
 800580e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005816:	ee17 2a90 	vmov	r2, s15
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800581e:	4b1f      	ldr	r3, [pc, #124]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005828:	ee07 3a90 	vmov	s15, r3
 800582c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005838:	edd7 6a07 	vldr	s13, [r7, #28]
 800583c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005844:	ee17 2a90 	vmov	r2, s15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800584c:	4b13      	ldr	r3, [pc, #76]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	0e1b      	lsrs	r3, r3, #24
 8005852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005866:	edd7 6a07 	vldr	s13, [r7, #28]
 800586a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005872:	ee17 2a90 	vmov	r2, s15
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800587a:	e008      	b.n	800588e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
}
 800588e:	bf00      	nop
 8005890:	3724      	adds	r7, #36	; 0x24
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	58024400 	.word	0x58024400
 80058a0:	03d09000 	.word	0x03d09000
 80058a4:	46000000 	.word	0x46000000
 80058a8:	4c742400 	.word	0x4c742400
 80058ac:	4a742400 	.word	0x4a742400
 80058b0:	4af42400 	.word	0x4af42400

080058b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058c2:	4b53      	ldr	r3, [pc, #332]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d101      	bne.n	80058d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e099      	b.n	8005a06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058d2:	4b4f      	ldr	r3, [pc, #316]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a4e      	ldr	r2, [pc, #312]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058de:	f7fc f883 	bl	80019e8 <HAL_GetTick>
 80058e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058e6:	f7fc f87f 	bl	80019e8 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e086      	b.n	8005a06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058f8:	4b45      	ldr	r3, [pc, #276]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005904:	4b42      	ldr	r3, [pc, #264]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	493f      	ldr	r1, [pc, #252]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005914:	4313      	orrs	r3, r2
 8005916:	628b      	str	r3, [r1, #40]	; 0x28
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	3b01      	subs	r3, #1
 800591e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	3b01      	subs	r3, #1
 8005928:	025b      	lsls	r3, r3, #9
 800592a:	b29b      	uxth	r3, r3
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	3b01      	subs	r3, #1
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	3b01      	subs	r3, #1
 8005942:	061b      	lsls	r3, r3, #24
 8005944:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005948:	4931      	ldr	r1, [pc, #196]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800594e:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	492d      	ldr	r1, [pc, #180]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005960:	4b2b      	ldr	r3, [pc, #172]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f023 0220 	bic.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	4928      	ldr	r1, [pc, #160]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005972:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005978:	f023 0310 	bic.w	r3, r3, #16
 800597c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <RCCEx_PLL2_Config+0x160>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	69d2      	ldr	r2, [r2, #28]
 800598a:	00d2      	lsls	r2, r2, #3
 800598c:	4920      	ldr	r1, [pc, #128]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005992:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005998:	f043 0310 	orr.w	r3, r3, #16
 800599c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059b0:	e00f      	b.n	80059d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d106      	bne.n	80059c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059b8:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059c4:	e005      	b.n	80059d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059c6:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4a11      	ldr	r2, [pc, #68]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059d2:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059de:	f7fc f803 	bl	80019e8 <HAL_GetTick>
 80059e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059e4:	e008      	b.n	80059f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059e6:	f7fb ffff 	bl	80019e8 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	58024400 	.word	0x58024400
 8005a14:	ffff0007 	.word	0xffff0007

08005a18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a26:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d101      	bne.n	8005a36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e099      	b.n	8005b6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a36:	4b4f      	ldr	r3, [pc, #316]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a4e      	ldr	r2, [pc, #312]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a42:	f7fb ffd1 	bl	80019e8 <HAL_GetTick>
 8005a46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a48:	e008      	b.n	8005a5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a4a:	f7fb ffcd 	bl	80019e8 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e086      	b.n	8005b6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a5c:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	051b      	lsls	r3, r3, #20
 8005a76:	493f      	ldr	r1, [pc, #252]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	025b      	lsls	r3, r3, #9
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005aac:	4931      	ldr	r1, [pc, #196]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ab2:	4b30      	ldr	r3, [pc, #192]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	492d      	ldr	r1, [pc, #180]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	4928      	ldr	r1, [pc, #160]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ad6:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ae2:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <RCCEx_PLL3_Config+0x160>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	69d2      	ldr	r2, [r2, #28]
 8005aee:	00d2      	lsls	r2, r2, #3
 8005af0:	4920      	ldr	r1, [pc, #128]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005af6:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b08:	4b1a      	ldr	r3, [pc, #104]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b14:	e00f      	b.n	8005b36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b28:	e005      	b.n	8005b36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b36:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a0e      	ldr	r2, [pc, #56]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b42:	f7fb ff51 	bl	80019e8 <HAL_GetTick>
 8005b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b48:	e008      	b.n	8005b5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b4a:	f7fb ff4d 	bl	80019e8 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e006      	b.n	8005b6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
 8005b78:	ffff0007 	.word	0xffff0007

08005b7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0eb      	b.n	8005d6a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a75      	ldr	r2, [pc, #468]	; (8005d74 <HAL_SPI_Init+0x1f8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <HAL_SPI_Init+0x46>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a74      	ldr	r2, [pc, #464]	; (8005d78 <HAL_SPI_Init+0x1fc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00a      	beq.n	8005bc2 <HAL_SPI_Init+0x46>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a72      	ldr	r2, [pc, #456]	; (8005d7c <HAL_SPI_Init+0x200>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d005      	beq.n	8005bc2 <HAL_SPI_Init+0x46>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	d901      	bls.n	8005bc2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e0d3      	b.n	8005d6a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8dc 	bl	8005d80 <SPI_GetPacketSize>
 8005bc8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a69      	ldr	r2, [pc, #420]	; (8005d74 <HAL_SPI_Init+0x1f8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00c      	beq.n	8005bee <HAL_SPI_Init+0x72>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a67      	ldr	r2, [pc, #412]	; (8005d78 <HAL_SPI_Init+0x1fc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <HAL_SPI_Init+0x72>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a66      	ldr	r2, [pc, #408]	; (8005d7c <HAL_SPI_Init+0x200>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d002      	beq.n	8005bee <HAL_SPI_Init+0x72>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d811      	bhi.n	8005c12 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bf2:	4a60      	ldr	r2, [pc, #384]	; (8005d74 <HAL_SPI_Init+0x1f8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5e      	ldr	r2, [pc, #376]	; (8005d78 <HAL_SPI_Init+0x1fc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_SPI_Init+0x90>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5d      	ldr	r2, [pc, #372]	; (8005d7c <HAL_SPI_Init+0x200>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d104      	bne.n	8005c16 <HAL_SPI_Init+0x9a>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d901      	bls.n	8005c16 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0a9      	b.n	8005d6a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fb faf6 	bl	800121c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c50:	d119      	bne.n	8005c86 <HAL_SPI_Init+0x10a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5a:	d103      	bne.n	8005c64 <HAL_SPI_Init+0xe8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10c      	bne.n	8005c86 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c74:	d107      	bne.n	8005c86 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69da      	ldr	r2, [r3, #28]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c98:	ea42 0103 	orr.w	r1, r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce6:	ea42 0103 	orr.w	r1, r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d113      	bne.n	8005d26 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40013000 	.word	0x40013000
 8005d78:	40003800 	.word	0x40003800
 8005d7c:	40003c00 	.word	0x40003c00

08005d80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	3307      	adds	r3, #7
 8005d9e:	08db      	lsrs	r3, r3, #3
 8005da0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e042      	b.n	8005e4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fb fc32 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2224      	movs	r2, #36	; 0x24
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0201 	bic.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f82d 	bl	8005e58 <UART_SetConfig>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e022      	b.n	8005e4e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fd81 	bl	8006918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fe08 	bl	8006a5c <UART_CheckIdleState>
 8005e4c:	4603      	mov	r3, r0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e58:	b5b0      	push	{r4, r5, r7, lr}
 8005e5a:	b08e      	sub	sp, #56	; 0x38
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4bbf      	ldr	r3, [pc, #764]	; (8006184 <UART_SetConfig+0x32c>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4ab5      	ldr	r2, [pc, #724]	; (8006188 <UART_SetConfig+0x330>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	4bb0      	ldr	r3, [pc, #704]	; (800618c <UART_SetConfig+0x334>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	f023 010f 	bic.w	r1, r3, #15
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4aa7      	ldr	r2, [pc, #668]	; (8006190 <UART_SetConfig+0x338>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d176      	bne.n	8005fe4 <UART_SetConfig+0x18c>
 8005ef6:	4ba7      	ldr	r3, [pc, #668]	; (8006194 <UART_SetConfig+0x33c>)
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efe:	2b28      	cmp	r3, #40	; 0x28
 8005f00:	d86c      	bhi.n	8005fdc <UART_SetConfig+0x184>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0xb0>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005fad 	.word	0x08005fad
 8005f0c:	08005fdd 	.word	0x08005fdd
 8005f10:	08005fdd 	.word	0x08005fdd
 8005f14:	08005fdd 	.word	0x08005fdd
 8005f18:	08005fdd 	.word	0x08005fdd
 8005f1c:	08005fdd 	.word	0x08005fdd
 8005f20:	08005fdd 	.word	0x08005fdd
 8005f24:	08005fdd 	.word	0x08005fdd
 8005f28:	08005fb5 	.word	0x08005fb5
 8005f2c:	08005fdd 	.word	0x08005fdd
 8005f30:	08005fdd 	.word	0x08005fdd
 8005f34:	08005fdd 	.word	0x08005fdd
 8005f38:	08005fdd 	.word	0x08005fdd
 8005f3c:	08005fdd 	.word	0x08005fdd
 8005f40:	08005fdd 	.word	0x08005fdd
 8005f44:	08005fdd 	.word	0x08005fdd
 8005f48:	08005fbd 	.word	0x08005fbd
 8005f4c:	08005fdd 	.word	0x08005fdd
 8005f50:	08005fdd 	.word	0x08005fdd
 8005f54:	08005fdd 	.word	0x08005fdd
 8005f58:	08005fdd 	.word	0x08005fdd
 8005f5c:	08005fdd 	.word	0x08005fdd
 8005f60:	08005fdd 	.word	0x08005fdd
 8005f64:	08005fdd 	.word	0x08005fdd
 8005f68:	08005fc5 	.word	0x08005fc5
 8005f6c:	08005fdd 	.word	0x08005fdd
 8005f70:	08005fdd 	.word	0x08005fdd
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08005fdd 	.word	0x08005fdd
 8005f7c:	08005fdd 	.word	0x08005fdd
 8005f80:	08005fdd 	.word	0x08005fdd
 8005f84:	08005fdd 	.word	0x08005fdd
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fdd 	.word	0x08005fdd
 8005f90:	08005fdd 	.word	0x08005fdd
 8005f94:	08005fdd 	.word	0x08005fdd
 8005f98:	08005fdd 	.word	0x08005fdd
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	08005fdd 	.word	0x08005fdd
 8005fa4:	08005fdd 	.word	0x08005fdd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb2:	e222      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fba:	e21e      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc2:	e21a      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fca:	e216      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fcc:	2320      	movs	r3, #32
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e212      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fd4:	2340      	movs	r3, #64	; 0x40
 8005fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fda:	e20e      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe2:	e20a      	b.n	80063fa <UART_SetConfig+0x5a2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a6b      	ldr	r2, [pc, #428]	; (8006198 <UART_SetConfig+0x340>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d130      	bne.n	8006050 <UART_SetConfig+0x1f8>
 8005fee:	4b69      	ldr	r3, [pc, #420]	; (8006194 <UART_SetConfig+0x33c>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d826      	bhi.n	8006048 <UART_SetConfig+0x1f0>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0x1a8>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006019 	.word	0x08006019
 8006004:	08006021 	.word	0x08006021
 8006008:	08006029 	.word	0x08006029
 800600c:	08006031 	.word	0x08006031
 8006010:	08006039 	.word	0x08006039
 8006014:	08006041 	.word	0x08006041
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e1ec      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006020:	2304      	movs	r3, #4
 8006022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006026:	e1e8      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006028:	2308      	movs	r3, #8
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e1e4      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006030:	2310      	movs	r3, #16
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e1e0      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006038:	2320      	movs	r3, #32
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e1dc      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006040:	2340      	movs	r3, #64	; 0x40
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e1d8      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e1d4      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a51      	ldr	r2, [pc, #324]	; (800619c <UART_SetConfig+0x344>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d130      	bne.n	80060bc <UART_SetConfig+0x264>
 800605a:	4b4e      	ldr	r3, [pc, #312]	; (8006194 <UART_SetConfig+0x33c>)
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b05      	cmp	r3, #5
 8006064:	d826      	bhi.n	80060b4 <UART_SetConfig+0x25c>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <UART_SetConfig+0x214>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006085 	.word	0x08006085
 8006070:	0800608d 	.word	0x0800608d
 8006074:	08006095 	.word	0x08006095
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608a:	e1b6      	b.n	80063fa <UART_SetConfig+0x5a2>
 800608c:	2304      	movs	r3, #4
 800608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006092:	e1b2      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006094:	2308      	movs	r3, #8
 8006096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609a:	e1ae      	b.n	80063fa <UART_SetConfig+0x5a2>
 800609c:	2310      	movs	r3, #16
 800609e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a2:	e1aa      	b.n	80063fa <UART_SetConfig+0x5a2>
 80060a4:	2320      	movs	r3, #32
 80060a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060aa:	e1a6      	b.n	80063fa <UART_SetConfig+0x5a2>
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b2:	e1a2      	b.n	80063fa <UART_SetConfig+0x5a2>
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ba:	e19e      	b.n	80063fa <UART_SetConfig+0x5a2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a37      	ldr	r2, [pc, #220]	; (80061a0 <UART_SetConfig+0x348>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d130      	bne.n	8006128 <UART_SetConfig+0x2d0>
 80060c6:	4b33      	ldr	r3, [pc, #204]	; (8006194 <UART_SetConfig+0x33c>)
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d826      	bhi.n	8006120 <UART_SetConfig+0x2c8>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x280>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060f1 	.word	0x080060f1
 80060dc:	080060f9 	.word	0x080060f9
 80060e0:	08006101 	.word	0x08006101
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006119 	.word	0x08006119
 80060f0:	2300      	movs	r3, #0
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e180      	b.n	80063fa <UART_SetConfig+0x5a2>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	e17c      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006106:	e178      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610e:	e174      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006110:	2320      	movs	r3, #32
 8006112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006116:	e170      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006118:	2340      	movs	r3, #64	; 0x40
 800611a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611e:	e16c      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006126:	e168      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <UART_SetConfig+0x34c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d142      	bne.n	80061b8 <UART_SetConfig+0x360>
 8006132:	4b18      	ldr	r3, [pc, #96]	; (8006194 <UART_SetConfig+0x33c>)
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b05      	cmp	r3, #5
 800613c:	d838      	bhi.n	80061b0 <UART_SetConfig+0x358>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x2ec>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	0800615d 	.word	0x0800615d
 8006148:	08006165 	.word	0x08006165
 800614c:	0800616d 	.word	0x0800616d
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	080061a9 	.word	0x080061a9
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006162:	e14a      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616a:	e146      	b.n	80063fa <UART_SetConfig+0x5a2>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006172:	e142      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e13e      	b.n	80063fa <UART_SetConfig+0x5a2>
 800617c:	2320      	movs	r3, #32
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e13a      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006184:	cfff69f3 	.word	0xcfff69f3
 8006188:	58000c00 	.word	0x58000c00
 800618c:	11fff4ff 	.word	0x11fff4ff
 8006190:	40011000 	.word	0x40011000
 8006194:	58024400 	.word	0x58024400
 8006198:	40004400 	.word	0x40004400
 800619c:	40004800 	.word	0x40004800
 80061a0:	40004c00 	.word	0x40004c00
 80061a4:	40005000 	.word	0x40005000
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ae:	e124      	b.n	80063fa <UART_SetConfig+0x5a2>
 80061b0:	2380      	movs	r3, #128	; 0x80
 80061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b6:	e120      	b.n	80063fa <UART_SetConfig+0x5a2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4acc      	ldr	r2, [pc, #816]	; (80064f0 <UART_SetConfig+0x698>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d176      	bne.n	80062b0 <UART_SetConfig+0x458>
 80061c2:	4bcc      	ldr	r3, [pc, #816]	; (80064f4 <UART_SetConfig+0x69c>)
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ca:	2b28      	cmp	r3, #40	; 0x28
 80061cc:	d86c      	bhi.n	80062a8 <UART_SetConfig+0x450>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0x37c>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	08006279 	.word	0x08006279
 80061d8:	080062a9 	.word	0x080062a9
 80061dc:	080062a9 	.word	0x080062a9
 80061e0:	080062a9 	.word	0x080062a9
 80061e4:	080062a9 	.word	0x080062a9
 80061e8:	080062a9 	.word	0x080062a9
 80061ec:	080062a9 	.word	0x080062a9
 80061f0:	080062a9 	.word	0x080062a9
 80061f4:	08006281 	.word	0x08006281
 80061f8:	080062a9 	.word	0x080062a9
 80061fc:	080062a9 	.word	0x080062a9
 8006200:	080062a9 	.word	0x080062a9
 8006204:	080062a9 	.word	0x080062a9
 8006208:	080062a9 	.word	0x080062a9
 800620c:	080062a9 	.word	0x080062a9
 8006210:	080062a9 	.word	0x080062a9
 8006214:	08006289 	.word	0x08006289
 8006218:	080062a9 	.word	0x080062a9
 800621c:	080062a9 	.word	0x080062a9
 8006220:	080062a9 	.word	0x080062a9
 8006224:	080062a9 	.word	0x080062a9
 8006228:	080062a9 	.word	0x080062a9
 800622c:	080062a9 	.word	0x080062a9
 8006230:	080062a9 	.word	0x080062a9
 8006234:	08006291 	.word	0x08006291
 8006238:	080062a9 	.word	0x080062a9
 800623c:	080062a9 	.word	0x080062a9
 8006240:	080062a9 	.word	0x080062a9
 8006244:	080062a9 	.word	0x080062a9
 8006248:	080062a9 	.word	0x080062a9
 800624c:	080062a9 	.word	0x080062a9
 8006250:	080062a9 	.word	0x080062a9
 8006254:	08006299 	.word	0x08006299
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080062a9 	.word	0x080062a9
 8006260:	080062a9 	.word	0x080062a9
 8006264:	080062a9 	.word	0x080062a9
 8006268:	080062a9 	.word	0x080062a9
 800626c:	080062a9 	.word	0x080062a9
 8006270:	080062a9 	.word	0x080062a9
 8006274:	080062a1 	.word	0x080062a1
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e0bc      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e0b8      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e0b4      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e0b0      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006298:	2320      	movs	r3, #32
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e0ac      	b.n	80063fa <UART_SetConfig+0x5a2>
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e0a8      	b.n	80063fa <UART_SetConfig+0x5a2>
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e0a4      	b.n	80063fa <UART_SetConfig+0x5a2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a90      	ldr	r2, [pc, #576]	; (80064f8 <UART_SetConfig+0x6a0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d130      	bne.n	800631c <UART_SetConfig+0x4c4>
 80062ba:	4b8e      	ldr	r3, [pc, #568]	; (80064f4 <UART_SetConfig+0x69c>)
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d826      	bhi.n	8006314 <UART_SetConfig+0x4bc>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x474>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062e5 	.word	0x080062e5
 80062d0:	080062ed 	.word	0x080062ed
 80062d4:	080062f5 	.word	0x080062f5
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	08006305 	.word	0x08006305
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ea:	e086      	b.n	80063fa <UART_SetConfig+0x5a2>
 80062ec:	2304      	movs	r3, #4
 80062ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f2:	e082      	b.n	80063fa <UART_SetConfig+0x5a2>
 80062f4:	2308      	movs	r3, #8
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e07e      	b.n	80063fa <UART_SetConfig+0x5a2>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	e07a      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006304:	2320      	movs	r3, #32
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630a:	e076      	b.n	80063fa <UART_SetConfig+0x5a2>
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e072      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e06e      	b.n	80063fa <UART_SetConfig+0x5a2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a76      	ldr	r2, [pc, #472]	; (80064fc <UART_SetConfig+0x6a4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d130      	bne.n	8006388 <UART_SetConfig+0x530>
 8006326:	4b73      	ldr	r3, [pc, #460]	; (80064f4 <UART_SetConfig+0x69c>)
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	2b05      	cmp	r3, #5
 8006330:	d826      	bhi.n	8006380 <UART_SetConfig+0x528>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <UART_SetConfig+0x4e0>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	08006351 	.word	0x08006351
 800633c:	08006359 	.word	0x08006359
 8006340:	08006361 	.word	0x08006361
 8006344:	08006369 	.word	0x08006369
 8006348:	08006371 	.word	0x08006371
 800634c:	08006379 	.word	0x08006379
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006356:	e050      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635e:	e04c      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006366:	e048      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	e044      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006370:	2320      	movs	r3, #32
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006376:	e040      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637e:	e03c      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006386:	e038      	b.n	80063fa <UART_SetConfig+0x5a2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a5c      	ldr	r2, [pc, #368]	; (8006500 <UART_SetConfig+0x6a8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d130      	bne.n	80063f4 <UART_SetConfig+0x59c>
 8006392:	4b58      	ldr	r3, [pc, #352]	; (80064f4 <UART_SetConfig+0x69c>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b05      	cmp	r3, #5
 800639c:	d826      	bhi.n	80063ec <UART_SetConfig+0x594>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x54c>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063bd 	.word	0x080063bd
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	080063cd 	.word	0x080063cd
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063dd 	.word	0x080063dd
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	2302      	movs	r3, #2
 80063be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c2:	e01a      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063c4:	2304      	movs	r3, #4
 80063c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ca:	e016      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063cc:	2308      	movs	r3, #8
 80063ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d2:	e012      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063da:	e00e      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063dc:	2320      	movs	r3, #32
 80063de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e2:	e00a      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063e4:	2340      	movs	r3, #64	; 0x40
 80063e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ea:	e006      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063ec:	2380      	movs	r3, #128	; 0x80
 80063ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f2:	e002      	b.n	80063fa <UART_SetConfig+0x5a2>
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a40      	ldr	r2, [pc, #256]	; (8006500 <UART_SetConfig+0x6a8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	f040 80ef 	bne.w	80065e4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800640a:	2b20      	cmp	r3, #32
 800640c:	dc46      	bgt.n	800649c <UART_SetConfig+0x644>
 800640e:	2b02      	cmp	r3, #2
 8006410:	f2c0 8081 	blt.w	8006516 <UART_SetConfig+0x6be>
 8006414:	3b02      	subs	r3, #2
 8006416:	2b1e      	cmp	r3, #30
 8006418:	d87d      	bhi.n	8006516 <UART_SetConfig+0x6be>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <UART_SetConfig+0x5c8>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	080064a3 	.word	0x080064a3
 8006424:	08006517 	.word	0x08006517
 8006428:	080064ab 	.word	0x080064ab
 800642c:	08006517 	.word	0x08006517
 8006430:	08006517 	.word	0x08006517
 8006434:	08006517 	.word	0x08006517
 8006438:	080064bb 	.word	0x080064bb
 800643c:	08006517 	.word	0x08006517
 8006440:	08006517 	.word	0x08006517
 8006444:	08006517 	.word	0x08006517
 8006448:	08006517 	.word	0x08006517
 800644c:	08006517 	.word	0x08006517
 8006450:	08006517 	.word	0x08006517
 8006454:	08006517 	.word	0x08006517
 8006458:	080064cb 	.word	0x080064cb
 800645c:	08006517 	.word	0x08006517
 8006460:	08006517 	.word	0x08006517
 8006464:	08006517 	.word	0x08006517
 8006468:	08006517 	.word	0x08006517
 800646c:	08006517 	.word	0x08006517
 8006470:	08006517 	.word	0x08006517
 8006474:	08006517 	.word	0x08006517
 8006478:	08006517 	.word	0x08006517
 800647c:	08006517 	.word	0x08006517
 8006480:	08006517 	.word	0x08006517
 8006484:	08006517 	.word	0x08006517
 8006488:	08006517 	.word	0x08006517
 800648c:	08006517 	.word	0x08006517
 8006490:	08006517 	.word	0x08006517
 8006494:	08006517 	.word	0x08006517
 8006498:	08006509 	.word	0x08006509
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d036      	beq.n	800650e <UART_SetConfig+0x6b6>
 80064a0:	e039      	b.n	8006516 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064a2:	f7fe ff49 	bl	8005338 <HAL_RCCEx_GetD3PCLK1Freq>
 80064a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80064a8:	e03b      	b.n	8006522 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe ff58 	bl	8005364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064b8:	e033      	b.n	8006522 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff f8a4 	bl	800560c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c8:	e02b      	b.n	8006522 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <UART_SetConfig+0x69c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <UART_SetConfig+0x69c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	08db      	lsrs	r3, r3, #3
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <UART_SetConfig+0x6ac>)
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064e8:	e01b      	b.n	8006522 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <UART_SetConfig+0x6ac>)
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064ee:	e018      	b.n	8006522 <UART_SetConfig+0x6ca>
 80064f0:	40011400 	.word	0x40011400
 80064f4:	58024400 	.word	0x58024400
 80064f8:	40007800 	.word	0x40007800
 80064fc:	40007c00 	.word	0x40007c00
 8006500:	58000c00 	.word	0x58000c00
 8006504:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006508:	4bc4      	ldr	r3, [pc, #784]	; (800681c <UART_SetConfig+0x9c4>)
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800650c:	e009      	b.n	8006522 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006514:	e005      	b.n	8006522 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 81da 	beq.w	80068de <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	4abc      	ldr	r2, [pc, #752]	; (8006820 <UART_SetConfig+0x9c8>)
 8006530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006534:	461a      	mov	r2, r3
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	fbb3 f3f2 	udiv	r3, r3, r2
 800653c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	4413      	add	r3, r2
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	429a      	cmp	r2, r3
 800654c:	d305      	bcc.n	800655a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	429a      	cmp	r2, r3
 8006558:	d903      	bls.n	8006562 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006560:	e1bd      	b.n	80068de <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	4618      	mov	r0, r3
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	4aac      	ldr	r2, [pc, #688]	; (8006820 <UART_SetConfig+0x9c8>)
 8006570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006574:	b29a      	uxth	r2, r3
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	f7f9 ff11 	bl	80003a0 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	020b      	lsls	r3, r1, #8
 8006590:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006594:	0202      	lsls	r2, r0, #8
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	6849      	ldr	r1, [r1, #4]
 800659a:	0849      	lsrs	r1, r1, #1
 800659c:	4608      	mov	r0, r1
 800659e:	f04f 0100 	mov.w	r1, #0
 80065a2:	1814      	adds	r4, r2, r0
 80065a4:	eb43 0501 	adc.w	r5, r3, r1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	461a      	mov	r2, r3
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7f9 fef3 	bl	80003a0 <__aeabi_uldivmod>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4613      	mov	r3, r2
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c8:	d308      	bcc.n	80065dc <UART_SetConfig+0x784>
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d0:	d204      	bcs.n	80065dc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e180      	b.n	80068de <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80065e2:	e17c      	b.n	80068de <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ec:	f040 80bf 	bne.w	800676e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80065f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	dc49      	bgt.n	800668c <UART_SetConfig+0x834>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	db7c      	blt.n	80066f6 <UART_SetConfig+0x89e>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d87a      	bhi.n	80066f6 <UART_SetConfig+0x89e>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x7b0>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006693 	.word	0x08006693
 800660c:	0800669b 	.word	0x0800669b
 8006610:	080066f7 	.word	0x080066f7
 8006614:	080066f7 	.word	0x080066f7
 8006618:	080066a3 	.word	0x080066a3
 800661c:	080066f7 	.word	0x080066f7
 8006620:	080066f7 	.word	0x080066f7
 8006624:	080066f7 	.word	0x080066f7
 8006628:	080066b3 	.word	0x080066b3
 800662c:	080066f7 	.word	0x080066f7
 8006630:	080066f7 	.word	0x080066f7
 8006634:	080066f7 	.word	0x080066f7
 8006638:	080066f7 	.word	0x080066f7
 800663c:	080066f7 	.word	0x080066f7
 8006640:	080066f7 	.word	0x080066f7
 8006644:	080066f7 	.word	0x080066f7
 8006648:	080066c3 	.word	0x080066c3
 800664c:	080066f7 	.word	0x080066f7
 8006650:	080066f7 	.word	0x080066f7
 8006654:	080066f7 	.word	0x080066f7
 8006658:	080066f7 	.word	0x080066f7
 800665c:	080066f7 	.word	0x080066f7
 8006660:	080066f7 	.word	0x080066f7
 8006664:	080066f7 	.word	0x080066f7
 8006668:	080066f7 	.word	0x080066f7
 800666c:	080066f7 	.word	0x080066f7
 8006670:	080066f7 	.word	0x080066f7
 8006674:	080066f7 	.word	0x080066f7
 8006678:	080066f7 	.word	0x080066f7
 800667c:	080066f7 	.word	0x080066f7
 8006680:	080066f7 	.word	0x080066f7
 8006684:	080066f7 	.word	0x080066f7
 8006688:	080066e9 	.word	0x080066e9
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d02e      	beq.n	80066ee <UART_SetConfig+0x896>
 8006690:	e031      	b.n	80066f6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006692:	f7fd fee5 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006696:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006698:	e033      	b.n	8006702 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800669a:	f7fd fef7 	bl	800448c <HAL_RCC_GetPCLK2Freq>
 800669e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80066a0:	e02f      	b.n	8006702 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fe5c 	bl	8005364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b0:	e027      	b.n	8006702 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe ffa8 	bl	800560c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066c0:	e01f      	b.n	8006702 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c2:	4b58      	ldr	r3, [pc, #352]	; (8006824 <UART_SetConfig+0x9cc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066ce:	4b55      	ldr	r3, [pc, #340]	; (8006824 <UART_SetConfig+0x9cc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	08db      	lsrs	r3, r3, #3
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	4a53      	ldr	r2, [pc, #332]	; (8006828 <UART_SetConfig+0x9d0>)
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066e0:	e00f      	b.n	8006702 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80066e2:	4b51      	ldr	r3, [pc, #324]	; (8006828 <UART_SetConfig+0x9d0>)
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066e6:	e00c      	b.n	8006702 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066e8:	4b4c      	ldr	r3, [pc, #304]	; (800681c <UART_SetConfig+0x9c4>)
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ec:	e009      	b.n	8006702 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066f4:	e005      	b.n	8006702 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80ea 	beq.w	80068de <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	4a44      	ldr	r2, [pc, #272]	; (8006820 <UART_SetConfig+0x9c8>)
 8006710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006714:	461a      	mov	r2, r3
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	fbb3 f3f2 	udiv	r3, r3, r2
 800671c:	005a      	lsls	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d916      	bls.n	8006766 <UART_SetConfig+0x90e>
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673e:	d212      	bcs.n	8006766 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	b29b      	uxth	r3, r3
 8006744:	f023 030f 	bic.w	r3, r3, #15
 8006748:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	b29b      	uxth	r3, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	b29a      	uxth	r2, r3
 8006756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006758:	4313      	orrs	r3, r2
 800675a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006762:	60da      	str	r2, [r3, #12]
 8006764:	e0bb      	b.n	80068de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800676c:	e0b7      	b.n	80068de <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800676e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006772:	2b20      	cmp	r3, #32
 8006774:	dc4a      	bgt.n	800680c <UART_SetConfig+0x9b4>
 8006776:	2b00      	cmp	r3, #0
 8006778:	f2c0 8086 	blt.w	8006888 <UART_SetConfig+0xa30>
 800677c:	2b20      	cmp	r3, #32
 800677e:	f200 8083 	bhi.w	8006888 <UART_SetConfig+0xa30>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x930>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	08006813 	.word	0x08006813
 800678c:	0800682d 	.word	0x0800682d
 8006790:	08006889 	.word	0x08006889
 8006794:	08006889 	.word	0x08006889
 8006798:	08006835 	.word	0x08006835
 800679c:	08006889 	.word	0x08006889
 80067a0:	08006889 	.word	0x08006889
 80067a4:	08006889 	.word	0x08006889
 80067a8:	08006845 	.word	0x08006845
 80067ac:	08006889 	.word	0x08006889
 80067b0:	08006889 	.word	0x08006889
 80067b4:	08006889 	.word	0x08006889
 80067b8:	08006889 	.word	0x08006889
 80067bc:	08006889 	.word	0x08006889
 80067c0:	08006889 	.word	0x08006889
 80067c4:	08006889 	.word	0x08006889
 80067c8:	08006855 	.word	0x08006855
 80067cc:	08006889 	.word	0x08006889
 80067d0:	08006889 	.word	0x08006889
 80067d4:	08006889 	.word	0x08006889
 80067d8:	08006889 	.word	0x08006889
 80067dc:	08006889 	.word	0x08006889
 80067e0:	08006889 	.word	0x08006889
 80067e4:	08006889 	.word	0x08006889
 80067e8:	08006889 	.word	0x08006889
 80067ec:	08006889 	.word	0x08006889
 80067f0:	08006889 	.word	0x08006889
 80067f4:	08006889 	.word	0x08006889
 80067f8:	08006889 	.word	0x08006889
 80067fc:	08006889 	.word	0x08006889
 8006800:	08006889 	.word	0x08006889
 8006804:	08006889 	.word	0x08006889
 8006808:	0800687b 	.word	0x0800687b
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	d037      	beq.n	8006880 <UART_SetConfig+0xa28>
 8006810:	e03a      	b.n	8006888 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006812:	f7fd fe25 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006816:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006818:	e03c      	b.n	8006894 <UART_SetConfig+0xa3c>
 800681a:	bf00      	nop
 800681c:	003d0900 	.word	0x003d0900
 8006820:	0800bad0 	.word	0x0800bad0
 8006824:	58024400 	.word	0x58024400
 8006828:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800682c:	f7fd fe2e 	bl	800448c <HAL_RCC_GetPCLK2Freq>
 8006830:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006832:	e02f      	b.n	8006894 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fd93 	bl	8005364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006842:	e027      	b.n	8006894 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006844:	f107 0308 	add.w	r3, r7, #8
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fedf 	bl	800560c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006852:	e01f      	b.n	8006894 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006854:	4b2c      	ldr	r3, [pc, #176]	; (8006908 <UART_SetConfig+0xab0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006860:	4b29      	ldr	r3, [pc, #164]	; (8006908 <UART_SetConfig+0xab0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a28      	ldr	r2, [pc, #160]	; (800690c <UART_SetConfig+0xab4>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006872:	e00f      	b.n	8006894 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006874:	4b25      	ldr	r3, [pc, #148]	; (800690c <UART_SetConfig+0xab4>)
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006878:	e00c      	b.n	8006894 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800687a:	4b25      	ldr	r3, [pc, #148]	; (8006910 <UART_SetConfig+0xab8>)
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800687e:	e009      	b.n	8006894 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006886:	e005      	b.n	8006894 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006892:	bf00      	nop
    }

    if (pclk != 0U)
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d021      	beq.n	80068de <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <UART_SetConfig+0xabc>)
 80068a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	441a      	add	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068bc:	b29b      	uxth	r3, r3
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	d908      	bls.n	80068d8 <UART_SetConfig+0xa80>
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d204      	bcs.n	80068d8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d4:	60da      	str	r2, [r3, #12]
 80068d6:	e002      	b.n	80068de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80068fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3738      	adds	r7, #56	; 0x38
 8006902:	46bd      	mov	sp, r7
 8006904:	bdb0      	pop	{r4, r5, r7, pc}
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	003d0900 	.word	0x003d0900
 8006914:	0800bad0 	.word	0x0800bad0

08006918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01a      	beq.n	8006a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	d10a      	bne.n	8006a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a6c:	f7fa ffbc 	bl	80019e8 <HAL_GetTick>
 8006a70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d10e      	bne.n	8006a9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f82f 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e025      	b.n	8006aea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d10e      	bne.n	8006aca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f819 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	4613      	mov	r3, r2
 8006b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b02:	e062      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d05e      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0c:	f7fa ff6c 	bl	80019e8 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11d      	bne.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e045      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02e      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7a:	d126      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e00f      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d08d      	beq.n	8006b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e027      	b.n	8006c58 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2224      	movs	r2, #36	; 0x24
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e02d      	b.n	8006cd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2224      	movs	r2, #36	; 0x24
 8006c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f84f 	bl	8006d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e02d      	b.n	8006d54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2224      	movs	r2, #36	; 0x24
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f811 	bl	8006d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d108      	bne.n	8006d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d7c:	e031      	b.n	8006de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d7e:	2310      	movs	r3, #16
 8006d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d82:	2310      	movs	r3, #16
 8006d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	0e5b      	lsrs	r3, r3, #25
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	0f5b      	lsrs	r3, r3, #29
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	7b3a      	ldrb	r2, [r7, #12]
 8006daa:	4911      	ldr	r1, [pc, #68]	; (8006df0 <UARTEx_SetNbDataToProcess+0x94>)
 8006dac:	5c8a      	ldrb	r2, [r1, r2]
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006db2:	7b3a      	ldrb	r2, [r7, #12]
 8006db4:	490f      	ldr	r1, [pc, #60]	; (8006df4 <UARTEx_SetNbDataToProcess+0x98>)
 8006db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	7b7a      	ldrb	r2, [r7, #13]
 8006dc8:	4909      	ldr	r1, [pc, #36]	; (8006df0 <UARTEx_SetNbDataToProcess+0x94>)
 8006dca:	5c8a      	ldrb	r2, [r1, r2]
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dd0:	7b7a      	ldrb	r2, [r7, #13]
 8006dd2:	4908      	ldr	r1, [pc, #32]	; (8006df4 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	0800bae8 	.word	0x0800bae8
 8006df4:	0800baf0 	.word	0x0800baf0

08006df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df8:	b084      	sub	sp, #16
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	f107 001c 	add.w	r0, r7, #28
 8006e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d120      	bne.n	8006e52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	4b2a      	ldr	r3, [pc, #168]	; (8006ecc <USB_CoreInit+0xd4>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa60 	bl	800730c <USB_CoreReset>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e01a      	b.n	8006e88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa54 	bl	800730c <USB_CoreReset>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
 8006e7a:	e005      	b.n	8006e88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d116      	bne.n	8006ebc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <USB_CoreInit+0xd8>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f043 0206 	orr.w	r2, r3, #6
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec8:	b004      	add	sp, #16
 8006eca:	4770      	bx	lr
 8006ecc:	ffbdffbf 	.word	0xffbdffbf
 8006ed0:	03ee0000 	.word	0x03ee0000

08006ed4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f023 0201 	bic.w	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d106      	bne.n	8006f22 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e00b      	b.n	8006f3a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e001      	b.n	8006f3a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e003      	b.n	8006f42 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f3a:	2032      	movs	r0, #50	; 0x32
 8006f3c:	f7fa fd60 	bl	8001a00 <HAL_Delay>

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e009      	b.n	8006f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	3340      	adds	r3, #64	; 0x40
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b0e      	cmp	r3, #14
 8006f84:	d9f2      	bls.n	8006f6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d11c      	bne.n	8006fc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9a:	f043 0302 	orr.w	r3, r3, #2
 8006f9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e005      	b.n	8006fd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	461a      	mov	r2, r3
 8006fee:	680b      	ldr	r3, [r1, #0]
 8006ff0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d10c      	bne.n	8007012 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f949 	bl	8007298 <USB_SetDevSpeed>
 8007006:	e008      	b.n	800701a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007008:	2101      	movs	r1, #1
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f944 	bl	8007298 <USB_SetDevSpeed>
 8007010:	e003      	b.n	800701a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007012:	2103      	movs	r1, #3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f93f 	bl	8007298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800701a:	2110      	movs	r1, #16
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f8f3 	bl	8007208 <USB_FlushTxFifo>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f911 	bl	8007254 <USB_FlushRxFifo>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	461a      	mov	r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	461a      	mov	r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	461a      	mov	r2, r3
 800705c:	2300      	movs	r3, #0
 800705e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e043      	b.n	80070ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707c:	d118      	bne.n	80070b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	461a      	mov	r2, r3
 8007092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e013      	b.n	80070c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	461a      	mov	r2, r3
 80070a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e008      	b.n	80070c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	461a      	mov	r2, r3
 80070be:	2300      	movs	r3, #0
 80070c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	461a      	mov	r2, r3
 80070d0:	2300      	movs	r3, #0
 80070d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3301      	adds	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3b7      	bcc.n	8007066 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e043      	b.n	8007184 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800710e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007112:	d118      	bne.n	8007146 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	461a      	mov	r2, r3
 8007128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	e013      	b.n	8007158 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713c:	461a      	mov	r2, r3
 800713e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e008      	b.n	8007158 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	461a      	mov	r2, r3
 8007154:	2300      	movs	r3, #0
 8007156:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	461a      	mov	r2, r3
 8007166:	2300      	movs	r3, #0
 8007168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800717c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	d3b7      	bcc.n	80070fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800719e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f043 0210 	orr.w	r2, r3, #16
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <USB_DevInit+0x2b4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f043 0208 	orr.w	r2, r3, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <USB_DevInit+0x2b8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071fc:	b004      	add	sp, #16
 80071fe:	4770      	bx	lr
 8007200:	803c3800 	.word	0x803c3800
 8007204:	40000004 	.word	0x40000004

08007208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	f043 0220 	orr.w	r2, r3, #32
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a09      	ldr	r2, [pc, #36]	; (8007250 <USB_FlushTxFifo+0x48>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e006      	b.n	8007242 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b20      	cmp	r3, #32
 800723e:	d0f0      	beq.n	8007222 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	00030d40 	.word	0x00030d40

08007254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2210      	movs	r2, #16
 8007264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <USB_FlushRxFifo+0x40>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d901      	bls.n	8007278 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e006      	b.n	8007286 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b10      	cmp	r3, #16
 8007282:	d0f0      	beq.n	8007266 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	00030d40 	.word	0x00030d40

08007298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4a13      	ldr	r2, [pc, #76]	; (8007370 <USB_CoreReset+0x64>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e01b      	b.n	8007362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	daf2      	bge.n	8007318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f043 0201 	orr.w	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4a09      	ldr	r2, [pc, #36]	; (8007370 <USB_CoreReset+0x64>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e006      	b.n	8007362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d0f0      	beq.n	8007342 <USB_CoreReset+0x36>

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	00030d40 	.word	0x00030d40

08007374 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8007378:	bf00      	nop
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af04      	add	r7, sp, #16
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800738e:	f04f 33ff 	mov.w	r3, #4294967295
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	2301      	movs	r3, #1
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	1dfb      	adds	r3, r7, #7
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2301      	movs	r3, #1
 800739e:	2200      	movs	r2, #0
 80073a0:	2178      	movs	r1, #120	; 0x78
 80073a2:	4803      	ldr	r0, [pc, #12]	; (80073b0 <ssd1306_WriteCommand+0x2c>)
 80073a4:	f7fb fbac 	bl	8002b00 <HAL_I2C_Mem_Write>
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	240005b8 	.word	0x240005b8

080073b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af04      	add	r7, sp, #16
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f04f 32ff 	mov.w	r2, #4294967295
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	2301      	movs	r3, #1
 80073d0:	2240      	movs	r2, #64	; 0x40
 80073d2:	2178      	movs	r1, #120	; 0x78
 80073d4:	4803      	ldr	r0, [pc, #12]	; (80073e4 <ssd1306_WriteData+0x30>)
 80073d6:	f7fb fb93 	bl	8002b00 <HAL_I2C_Mem_Write>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	240005b8 	.word	0x240005b8

080073e8 <ssd1306_Init>:
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80073ec:	f7ff ffc2 	bl	8007374 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80073f0:	2064      	movs	r0, #100	; 0x64
 80073f2:	f7fa fb05 	bl	8001a00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80073f6:	2000      	movs	r0, #0
 80073f8:	f000 f9e6 	bl	80077c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80073fc:	2020      	movs	r0, #32
 80073fe:	f7ff ffc1 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8007402:	2000      	movs	r0, #0
 8007404:	f7ff ffbe 	bl	8007384 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007408:	20b0      	movs	r0, #176	; 0xb0
 800740a:	f7ff ffbb 	bl	8007384 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800740e:	20c8      	movs	r0, #200	; 0xc8
 8007410:	f7ff ffb8 	bl	8007384 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007414:	2000      	movs	r0, #0
 8007416:	f7ff ffb5 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800741a:	2010      	movs	r0, #16
 800741c:	f7ff ffb2 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8007420:	2040      	movs	r0, #64	; 0x40
 8007422:	f7ff ffaf 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007426:	20ff      	movs	r0, #255	; 0xff
 8007428:	f000 f9ba 	bl	80077a0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800742c:	20a1      	movs	r0, #161	; 0xa1
 800742e:	f7ff ffa9 	bl	8007384 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007432:	20a6      	movs	r0, #166	; 0xa6
 8007434:	f7ff ffa6 	bl	8007384 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007438:	20a8      	movs	r0, #168	; 0xa8
 800743a:	f7ff ffa3 	bl	8007384 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800743e:	201f      	movs	r0, #31
 8007440:	f7ff ffa0 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007444:	20a4      	movs	r0, #164	; 0xa4
 8007446:	f7ff ff9d 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800744a:	20d3      	movs	r0, #211	; 0xd3
 800744c:	f7ff ff9a 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007450:	2000      	movs	r0, #0
 8007452:	f7ff ff97 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007456:	20d5      	movs	r0, #213	; 0xd5
 8007458:	f7ff ff94 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800745c:	20f0      	movs	r0, #240	; 0xf0
 800745e:	f7ff ff91 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007462:	20d9      	movs	r0, #217	; 0xd9
 8007464:	f7ff ff8e 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007468:	2022      	movs	r0, #34	; 0x22
 800746a:	f7ff ff8b 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800746e:	20da      	movs	r0, #218	; 0xda
 8007470:	f7ff ff88 	bl	8007384 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8007474:	2002      	movs	r0, #2
 8007476:	f7ff ff85 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800747a:	20db      	movs	r0, #219	; 0xdb
 800747c:	f7ff ff82 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007480:	2020      	movs	r0, #32
 8007482:	f7ff ff7f 	bl	8007384 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8007486:	208d      	movs	r0, #141	; 0x8d
 8007488:	f7ff ff7c 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800748c:	2014      	movs	r0, #20
 800748e:	f7ff ff79 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8007492:	2001      	movs	r0, #1
 8007494:	f000 f998 	bl	80077c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8007498:	2000      	movs	r0, #0
 800749a:	f000 f80f 	bl	80074bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800749e:	f000 f831 	bl	8007504 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <ssd1306_Init+0xd0>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80074a8:	4b03      	ldr	r3, [pc, #12]	; (80074b8 <ssd1306_Init+0xd0>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80074ae:	4b02      	ldr	r3, [pc, #8]	; (80074b8 <ssd1306_Init+0xd0>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	715a      	strb	r2, [r3, #5]
}
 80074b4:	bf00      	nop
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	24000454 	.word	0x24000454

080074bc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e00d      	b.n	80074e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <ssd1306_Fill+0x1a>
 80074d2:	2100      	movs	r1, #0
 80074d4:	e000      	b.n	80074d8 <ssd1306_Fill+0x1c>
 80074d6:	21ff      	movs	r1, #255	; 0xff
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <ssd1306_Fill+0x44>)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	460a      	mov	r2, r1
 80074e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ee:	d3ed      	bcc.n	80074cc <ssd1306_Fill+0x10>
    }
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	24000254 	.word	0x24000254

08007504 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800750a:	2300      	movs	r3, #0
 800750c:	71fb      	strb	r3, [r7, #7]
 800750e:	e016      	b.n	800753e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	3b50      	subs	r3, #80	; 0x50
 8007514:	b2db      	uxtb	r3, r3
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff ff34 	bl	8007384 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800751c:	2000      	movs	r0, #0
 800751e:	f7ff ff31 	bl	8007384 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8007522:	2010      	movs	r0, #16
 8007524:	f7ff ff2e 	bl	8007384 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	01db      	lsls	r3, r3, #7
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <ssd1306_UpdateScreen+0x4c>)
 800752e:	4413      	add	r3, r2
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff ff3e 	bl	80073b4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	3301      	adds	r3, #1
 800753c:	71fb      	strb	r3, [r7, #7]
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d9e5      	bls.n	8007510 <ssd1306_UpdateScreen+0xc>
    }
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	24000254 	.word	0x24000254

08007554 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
 800755e:	460b      	mov	r3, r1
 8007560:	71bb      	strb	r3, [r7, #6]
 8007562:	4613      	mov	r3, r2
 8007564:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8007566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756a:	2b00      	cmp	r3, #0
 800756c:	db48      	blt.n	8007600 <ssd1306_DrawPixel+0xac>
 800756e:	79bb      	ldrb	r3, [r7, #6]
 8007570:	2b1f      	cmp	r3, #31
 8007572:	d845      	bhi.n	8007600 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted)
 8007574:	4b25      	ldr	r3, [pc, #148]	; (800760c <ssd1306_DrawPixel+0xb8>)
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d006      	beq.n	800758a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800757c:	797b      	ldrb	r3, [r7, #5]
 800757e:	2b00      	cmp	r3, #0
 8007580:	bf0c      	ite	eq
 8007582:	2301      	moveq	r3, #1
 8007584:	2300      	movne	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White)
 800758a:	797b      	ldrb	r3, [r7, #5]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d11a      	bne.n	80075c6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007590:	79fa      	ldrb	r2, [r7, #7]
 8007592:	79bb      	ldrb	r3, [r7, #6]
 8007594:	08db      	lsrs	r3, r3, #3
 8007596:	b2d8      	uxtb	r0, r3
 8007598:	4603      	mov	r3, r0
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	4413      	add	r3, r2
 800759e:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <ssd1306_DrawPixel+0xbc>)
 80075a0:	5cd3      	ldrb	r3, [r2, r3]
 80075a2:	b25a      	sxtb	r2, r3
 80075a4:	79bb      	ldrb	r3, [r7, #6]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2101      	movs	r1, #1
 80075ac:	fa01 f303 	lsl.w	r3, r1, r3
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b259      	sxtb	r1, r3
 80075b6:	79fa      	ldrb	r2, [r7, #7]
 80075b8:	4603      	mov	r3, r0
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	4413      	add	r3, r2
 80075be:	b2c9      	uxtb	r1, r1
 80075c0:	4a13      	ldr	r2, [pc, #76]	; (8007610 <ssd1306_DrawPixel+0xbc>)
 80075c2:	54d1      	strb	r1, [r2, r3]
 80075c4:	e01d      	b.n	8007602 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80075c6:	79fa      	ldrb	r2, [r7, #7]
 80075c8:	79bb      	ldrb	r3, [r7, #6]
 80075ca:	08db      	lsrs	r3, r3, #3
 80075cc:	b2d8      	uxtb	r0, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	01db      	lsls	r3, r3, #7
 80075d2:	4413      	add	r3, r2
 80075d4:	4a0e      	ldr	r2, [pc, #56]	; (8007610 <ssd1306_DrawPixel+0xbc>)
 80075d6:	5cd3      	ldrb	r3, [r2, r3]
 80075d8:	b25a      	sxtb	r2, r3
 80075da:	79bb      	ldrb	r3, [r7, #6]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	b25b      	sxtb	r3, r3
 80075e8:	43db      	mvns	r3, r3
 80075ea:	b25b      	sxtb	r3, r3
 80075ec:	4013      	ands	r3, r2
 80075ee:	b259      	sxtb	r1, r3
 80075f0:	79fa      	ldrb	r2, [r7, #7]
 80075f2:	4603      	mov	r3, r0
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	4413      	add	r3, r2
 80075f8:	b2c9      	uxtb	r1, r1
 80075fa:	4a05      	ldr	r2, [pc, #20]	; (8007610 <ssd1306_DrawPixel+0xbc>)
 80075fc:	54d1      	strb	r1, [r2, r3]
 80075fe:	e000      	b.n	8007602 <ssd1306_DrawPixel+0xae>
        return;
 8007600:	bf00      	nop
    }
}
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	24000454 	.word	0x24000454
 8007610:	24000254 	.word	0x24000254

08007614 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	4604      	mov	r4, r0
 800761c:	1d38      	adds	r0, r7, #4
 800761e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007622:	461a      	mov	r2, r3
 8007624:	4623      	mov	r3, r4
 8007626:	73fb      	strb	r3, [r7, #15]
 8007628:	4613      	mov	r3, r2
 800762a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	2b1f      	cmp	r3, #31
 8007630:	d902      	bls.n	8007638 <ssd1306_WriteChar+0x24>
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b7e      	cmp	r3, #126	; 0x7e
 8007636:	d901      	bls.n	800763c <ssd1306_WriteChar+0x28>
        return 0;
 8007638:	2300      	movs	r3, #0
 800763a:	e06d      	b.n	8007718 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800763c:	4b38      	ldr	r3, [pc, #224]	; (8007720 <ssd1306_WriteChar+0x10c>)
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	793b      	ldrb	r3, [r7, #4]
 8007644:	4413      	add	r3, r2
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	dc06      	bgt.n	8007658 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800764a:	4b35      	ldr	r3, [pc, #212]	; (8007720 <ssd1306_WriteChar+0x10c>)
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	461a      	mov	r2, r3
 8007650:	797b      	ldrb	r3, [r7, #5]
 8007652:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007654:	2b20      	cmp	r3, #32
 8007656:	dd01      	ble.n	800765c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8007658:	2300      	movs	r3, #0
 800765a:	e05d      	b.n	8007718 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++)
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e04c      	b.n	80076fc <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	3b20      	subs	r3, #32
 8007668:	7979      	ldrb	r1, [r7, #5]
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	4619      	mov	r1, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	440b      	add	r3, r1
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	4413      	add	r3, r2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++)
 800767c:	2300      	movs	r3, #0
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e034      	b.n	80076ec <ssd1306_WriteChar+0xd8>
        {
            if((b << j) & 0x8000)
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d012      	beq.n	80076b8 <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007692:	4b23      	ldr	r3, [pc, #140]	; (8007720 <ssd1306_WriteChar+0x10c>)
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b2da      	uxtb	r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4413      	add	r3, r2
 800769e:	b2d8      	uxtb	r0, r3
 80076a0:	4b1f      	ldr	r3, [pc, #124]	; (8007720 <ssd1306_WriteChar+0x10c>)
 80076a2:	885b      	ldrh	r3, [r3, #2]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	7bba      	ldrb	r2, [r7, #14]
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7ff ff4f 	bl	8007554 <ssd1306_DrawPixel>
 80076b6:	e016      	b.n	80076e6 <ssd1306_WriteChar+0xd2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80076b8:	4b19      	ldr	r3, [pc, #100]	; (8007720 <ssd1306_WriteChar+0x10c>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	b2d8      	uxtb	r0, r3
 80076c6:	4b16      	ldr	r3, [pc, #88]	; (8007720 <ssd1306_WriteChar+0x10c>)
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	b2d9      	uxtb	r1, r3
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bf0c      	ite	eq
 80076da:	2301      	moveq	r3, #1
 80076dc:	2300      	movne	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	f7ff ff37 	bl	8007554 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	3301      	adds	r3, #1
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	793b      	ldrb	r3, [r7, #4]
 80076ee:	461a      	mov	r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d3c5      	bcc.n	8007682 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	3301      	adds	r3, #1
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	797b      	ldrb	r3, [r7, #5]
 80076fe:	461a      	mov	r2, r3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	4293      	cmp	r3, r2
 8007704:	d3ad      	bcc.n	8007662 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007706:	4b06      	ldr	r3, [pc, #24]	; (8007720 <ssd1306_WriteChar+0x10c>)
 8007708:	881a      	ldrh	r2, [r3, #0]
 800770a:	793b      	ldrb	r3, [r7, #4]
 800770c:	b29b      	uxth	r3, r3
 800770e:	4413      	add	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	4b03      	ldr	r3, [pc, #12]	; (8007720 <ssd1306_WriteChar+0x10c>)
 8007714:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3724      	adds	r7, #36	; 0x24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd90      	pop	{r4, r7, pc}
 8007720:	24000454 	.word	0x24000454

08007724 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	1d38      	adds	r0, r7, #4
 800772e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007732:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8007734:	e012      	b.n	800775c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	7818      	ldrb	r0, [r3, #0]
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	1d3a      	adds	r2, r7, #4
 800773e:	ca06      	ldmia	r2, {r1, r2}
 8007740:	f7ff ff68 	bl	8007614 <ssd1306_WriteChar>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d002      	beq.n	8007756 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	e008      	b.n	8007768 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e8      	bne.n	8007736 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	781b      	ldrb	r3, [r3, #0]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	460a      	mov	r2, r1
 800777a:	71fb      	strb	r3, [r7, #7]
 800777c:	4613      	mov	r3, r2
 800777e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	b29a      	uxth	r2, r3
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <ssd1306_SetCursor+0x2c>)
 8007786:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007788:	79bb      	ldrb	r3, [r7, #6]
 800778a:	b29a      	uxth	r2, r3
 800778c:	4b03      	ldr	r3, [pc, #12]	; (800779c <ssd1306_SetCursor+0x2c>)
 800778e:	805a      	strh	r2, [r3, #2]
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	24000454 	.word	0x24000454

080077a0 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80077aa:	2381      	movs	r3, #129	; 0x81
 80077ac:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fde7 	bl	8007384 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fde3 	bl	8007384 <ssd1306_WriteCommand>
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80077d8:	23af      	movs	r3, #175	; 0xaf
 80077da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80077dc:	4b08      	ldr	r3, [pc, #32]	; (8007800 <ssd1306_SetDisplayOn+0x38>)
 80077de:	2201      	movs	r2, #1
 80077e0:	719a      	strb	r2, [r3, #6]
 80077e2:	e004      	b.n	80077ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80077e4:	23ae      	movs	r3, #174	; 0xae
 80077e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <ssd1306_SetDisplayOn+0x38>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fdc7 	bl	8007384 <ssd1306_WriteCommand>
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	24000454 	.word	0x24000454

08007804 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800780a:	2000      	movs	r0, #0
 800780c:	f7ff fe56 	bl	80074bc <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8007810:	f7fa f8ea 	bl	80019e8 <HAL_GetTick>
 8007814:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8007822:	7bb9      	ldrb	r1, [r7, #14]
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2200      	movs	r2, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fe93 	bl	8007554 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <ssd1306_TestBorder+0x3e>
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b7e      	cmp	r3, #126	; 0x7e
 8007838:	d803      	bhi.n	8007842 <ssd1306_TestBorder+0x3e>
            x++;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	3301      	adds	r3, #1
 800783e:	73fb      	strb	r3, [r7, #15]
 8007840:	e016      	b.n	8007870 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b7f      	cmp	r3, #127	; 0x7f
 8007846:	d106      	bne.n	8007856 <ssd1306_TestBorder+0x52>
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b1e      	cmp	r3, #30
 800784c:	d803      	bhi.n	8007856 <ssd1306_TestBorder+0x52>
            y++;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	3301      	adds	r3, #1
 8007852:	73bb      	strb	r3, [r7, #14]
 8007854:	e00c      	b.n	8007870 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b1f      	cmp	r3, #31
 800785a:	d106      	bne.n	800786a <ssd1306_TestBorder+0x66>
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <ssd1306_TestBorder+0x66>
            x--;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	3b01      	subs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
 8007868:	e002      	b.n	8007870 <ssd1306_TestBorder+0x6c>
        else
            y--;
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	3b01      	subs	r3, #1
 800786e:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8007870:	7bb9      	ldrb	r1, [r7, #14]
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	2201      	movs	r2, #1
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fe6c 	bl	8007554 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800787c:	f7ff fe42 	bl	8007504 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8007880:	2005      	movs	r0, #5
 8007882:	f7fa f8bd 	bl	8001a00 <HAL_Delay>
        end = HAL_GetTick();
 8007886:	f7fa f8af 	bl	80019e8 <HAL_GetTick>
 800788a:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8007896:	d3c4      	bcc.n	8007822 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8007898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800789c:	f7fa f8b0 	bl	8001a00 <HAL_Delay>
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	605a      	str	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	601a      	str	r2, [r3, #0]
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	601a      	str	r2, [r3, #0]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ffdd 	bl	80078ca <metal_list_add_before>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 ff89 	bl	800983c <metal_machine_cache_flush>
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 ff87 	bl	8009852 <metal_machine_cache_invalidate>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ffdd 	bl	8007918 <__metal_cache_flush>
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ffdd 	bl	8007932 <__metal_cache_invalidate>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d008      	beq.n	80079a0 <metal_bus_register+0x20>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <metal_bus_register+0x20>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <metal_bus_register+0x26>
		return -EINVAL;
 80079a0:	f06f 0315 	mvn.w	r3, #21
 80079a4:	e026      	b.n	80079f4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 f82b 	bl	8007a08 <metal_bus_find>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <metal_bus_register+0x3e>
		return -EEXIST;
 80079b8:	f06f 0310 	mvn.w	r3, #16
 80079bc:	e01a      	b.n	80079f4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	331c      	adds	r3, #28
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff ff70 	bl	80078a8 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3324      	adds	r3, #36	; 0x24
 80079cc:	4619      	mov	r1, r3
 80079ce:	480b      	ldr	r0, [pc, #44]	; (80079fc <metal_bus_register+0x7c>)
 80079d0:	f7ff ff95 	bl	80078fe <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <metal_bus_register+0x80>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b06      	cmp	r3, #6
 80079da:	d90a      	bls.n	80079f2 <metal_bus_register+0x72>
 80079dc:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <metal_bus_register+0x80>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d006      	beq.n	80079f2 <metal_bus_register+0x72>
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <metal_bus_register+0x80>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	4905      	ldr	r1, [pc, #20]	; (8007a04 <metal_bus_register+0x84>)
 80079ee:	2007      	movs	r0, #7
 80079f0:	4798      	blx	r3
	return 0;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	24000b30 	.word	0x24000b30
 8007a00:	24000b28 	.word	0x24000b28
 8007a04:	0800b8e4 	.word	0x0800b8e4

08007a08 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <metal_bus_find+0x58>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e017      	b.n	8007a4a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3b24      	subs	r3, #36	; 0x24
 8007a1e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7f8 fc5a 	bl	80002e0 <strcmp>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e007      	b.n	8007a4a <metal_bus_find+0x42>
			continue;
		if (result)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <metal_bus_find+0x3e>
			*result = bus;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	601a      	str	r2, [r3, #0]
		return 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e005      	b.n	8007a56 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4a05      	ldr	r2, [pc, #20]	; (8007a64 <metal_bus_find+0x5c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d1e3      	bne.n	8007a1a <metal_bus_find+0x12>
	}
	return -ENOENT;
 8007a52:	f06f 0301 	mvn.w	r3, #1
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	24000b28 	.word	0x24000b28
 8007a64:	24000b30 	.word	0x24000b30

08007a68 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00d      	beq.n	8007a96 <metal_device_open+0x2e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <metal_device_open+0x2e>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d006      	beq.n	8007a96 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <metal_device_open+0x2e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8007a96:	f06f 0315 	mvn.w	r3, #21
 8007a9a:	e01f      	b.n	8007adc <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8007a9c:	f107 0310 	add.w	r3, r7, #16
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff ffb0 	bl	8007a08 <metal_bus_find>
 8007aa8:	6178      	str	r0, [r7, #20]
	if (error)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <metal_device_open+0x4c>
		return error;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	e013      	b.n	8007adc <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <metal_device_open+0x5a>
		return -ENODEV;
 8007abc:	f06f 0312 	mvn.w	r3, #18
 8007ac0:	e00c      	b.n	8007adc <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	6938      	ldr	r0, [r7, #16]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4798      	blx	r3
 8007ace:	6178      	str	r0, [r7, #20]
	if (error)
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <metal_device_open+0x72>
		return error;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	e000      	b.n	8007adc <metal_device_open+0x74>

	return 0;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <metal_register_generic_device+0x22>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d902      	bls.n	8007b0c <metal_register_generic_device+0x28>
		return -EINVAL;
 8007b06:	f06f 0315 	mvn.w	r3, #21
 8007b0a:	e009      	b.n	8007b20 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a06      	ldr	r2, [pc, #24]	; (8007b28 <metal_register_generic_device+0x44>)
 8007b10:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	336c      	adds	r3, #108	; 0x6c
 8007b16:	4619      	mov	r1, r3
 8007b18:	4804      	ldr	r0, [pc, #16]	; (8007b2c <metal_register_generic_device+0x48>)
 8007b1a:	f7ff fef0 	bl	80078fe <metal_list_add_tail>
			    &device->node);
	return 0;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	24000018 	.word	0x24000018
 8007b2c:	24000b40 	.word	0x24000b40

08007b30 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <metal_generic_dev_open+0x58>)
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e017      	b.n	8007b74 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	3b6c      	subs	r3, #108	; 0x6c
 8007b48:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7f8 fbc5 	bl	80002e0 <strcmp>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	e007      	b.n	8007b74 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8007b6a:	6938      	ldr	r0, [r7, #16]
 8007b6c:	f000 f88c 	bl	8007c88 <metal_generic_dev_sys_open>
 8007b70:	4603      	mov	r3, r0
 8007b72:	e005      	b.n	8007b80 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4a05      	ldr	r2, [pc, #20]	; (8007b8c <metal_generic_dev_open+0x5c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d1e3      	bne.n	8007b44 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8007b7c:	f06f 0312 	mvn.w	r3, #18
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	24000b28 	.word	0x24000b28
 8007b8c:	24000b40 	.word	0x24000b40

08007b90 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d009      	beq.n	8007bba <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bb6:	f002 fcd9 	bl	800a56c <memcpy>
	for (i = 0; i < nents_in; i++) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e02f      	b.n	8007c20 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d114      	bne.n	8007bf0 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	4413      	add	r3, r2
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	461a      	mov	r2, r3
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	4413      	add	r3, r2
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	4619      	mov	r1, r3
 8007bec:	f7ff feae 	bl	800794c <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	4413      	add	r3, r2
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4613      	mov	r3, r2
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	4413      	add	r3, r2
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	4619      	mov	r1, r3
 8007c16:	f7ff fea6 	bl	8007966 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	dbcb      	blt.n	8007bc0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8007c28:	6a3b      	ldr	r3, [r7, #32]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	e017      	b.n	8007c76 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	461a      	mov	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	461a      	mov	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	4413      	add	r3, r2
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f7ff fe7b 	bl	8007966 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3301      	adds	r3, #1
 8007c74:	617b      	str	r3, [r7, #20]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	dbe3      	blt.n	8007c46 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e013      	b.n	8007cbe <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8007cb2:	68b8      	ldr	r0, [r7, #8]
 8007cb4:	f000 f81e 	bl	8007cf4 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d3e6      	bcc.n	8007c96 <metal_generic_dev_sys_open+0xe>
 8007cc8:	e000      	b.n	8007ccc <metal_generic_dev_sys_open+0x44>
			break;
 8007cca:	bf00      	nop
	}

	return 0;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8007ce0:	4803      	ldr	r0, [pc, #12]	; (8007cf0 <metal_sys_init+0x18>)
 8007ce2:	f7ff fe4d 	bl	8007980 <metal_bus_register>
	return 0;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	24000018 	.word	0x24000018

08007cf4 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	613b      	str	r3, [r7, #16]
	if (psize) {
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d02c      	beq.n	8007d68 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	e013      	b.n	8007d56 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	6819      	ldr	r1, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fd91 	bl	8009868 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	3301      	adds	r3, #1
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d9e2      	bls.n	8007d2e <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <metal_list_init>:
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	605a      	str	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	int error = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8007da0:	2220      	movs	r2, #32
 8007da2:	2100      	movs	r1, #0
 8007da4:	4810      	ldr	r0, [pc, #64]	; (8007de8 <metal_init+0x54>)
 8007da6:	f002 fc09 	bl	800a5bc <memset>

	_metal.common.log_handler   = params->log_handler;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a0e      	ldr	r2, [pc, #56]	; (8007de8 <metal_init+0x54>)
 8007db0:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	791a      	ldrb	r2, [r3, #4]
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <metal_init+0x54>)
 8007db8:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8007dba:	480c      	ldr	r0, [pc, #48]	; (8007dec <metal_init+0x58>)
 8007dbc:	f7ff ffd8 	bl	8007d70 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8007dc0:	480b      	ldr	r0, [pc, #44]	; (8007df0 <metal_init+0x5c>)
 8007dc2:	f7ff ffd5 	bl	8007d70 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8007dc6:	480b      	ldr	r0, [pc, #44]	; (8007df4 <metal_init+0x60>)
 8007dc8:	f7ff ffd2 	bl	8007d70 <metal_list_init>

	error = metal_sys_init(params);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ff83 	bl	8007cd8 <metal_sys_init>
 8007dd2:	60f8      	str	r0, [r7, #12]
	if (error)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <metal_init+0x4a>
		return error;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	e000      	b.n	8007de0 <metal_init+0x4c>

	return error;
 8007dde:	68fb      	ldr	r3, [r7, #12]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	24000b28 	.word	0x24000b28
 8007dec:	24000b30 	.word	0x24000b30
 8007df0:	24000b38 	.word	0x24000b38
 8007df4:	24000b40 	.word	0x24000b40

08007df8 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d009      	beq.n	8007e20 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d804      	bhi.n	8007e20 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	e000      	b.n	8007e22 <metal_io_virt+0x2a>
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8007e2e:	b5b0      	push	{r4, r5, r7, lr}
 8007e30:	b08a      	sub	sp, #40	; 0x28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	605a      	str	r2, [r3, #4]
 8007e46:	609a      	str	r2, [r3, #8]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	611a      	str	r2, [r3, #16]
 8007e4c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	605a      	str	r2, [r3, #4]
	io->size = size;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e64:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	2b1f      	cmp	r3, #31
 8007e6a:	d904      	bls.n	8007e76 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	611a      	str	r2, [r3, #16]
 8007e74:	e006      	b.n	8007e84 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8007e76:	2201      	movs	r2, #1
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	1e5a      	subs	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e88:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <metal_io_init+0x7a>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e94:	f103 0418 	add.w	r4, r3, #24
 8007e98:	4615      	mov	r5, r2
 8007e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ea2:	e884 0003 	stmia.w	r4, {r0, r1}
 8007ea6:	e00a      	b.n	8007ebe <metal_io_init+0x90>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f103 0418 	add.w	r4, r3, #24
 8007eae:	f107 0510 	add.w	r5, r7, #16
 8007eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007eba:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff ff18 	bl	8007cf4 <metal_sys_io_mem_map>
}
 8007ec4:	bf00      	nop
 8007ec6:	3728      	adds	r7, #40	; 0x28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bdb0      	pop	{r4, r5, r7, pc}

08007ecc <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b08b      	sub	sp, #44	; 0x2c
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff ff8b 	bl	8007df8 <metal_io_virt>
 8007ee2:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d902      	bls.n	8007ef8 <metal_io_block_read+0x2c>
		return -ERANGE;
 8007ef2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8007ef6:	e05c      	b.n	8007fb2 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	441a      	add	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d904      	bls.n	8007f10 <metal_io_block_read+0x44>
		len = io->size - offset;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1c      	ldr	r4, [r3, #32]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	2305      	movs	r3, #5
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	47a0      	blx	r4
 8007f2e:	6178      	str	r0, [r7, #20]
 8007f30:	e03e      	b.n	8007fb0 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8007f32:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8007f36:	e00c      	b.n	8007f52 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	701a      	strb	r2, [r3, #0]
			dest++;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61bb      	str	r3, [r7, #24]
			ptr++;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
			len--;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	603b      	str	r3, [r7, #0]
		while ( len && (
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d017      	beq.n	8007f88 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1ea      	bne.n	8007f38 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e5      	bne.n	8007f38 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007f6c:	e00c      	b.n	8007f88 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	dcef      	bgt.n	8007f6e <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8007f8e:	e00c      	b.n	8007faa <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1ef      	bne.n	8007f90 <metal_io_block_read+0xc4>
	}
	return retlen;
 8007fb0:	697b      	ldr	r3, [r7, #20]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3724      	adds	r7, #36	; 0x24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd90      	pop	{r4, r7, pc}

08007fba <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8007fba:	b590      	push	{r4, r7, lr}
 8007fbc:	b08b      	sub	sp, #44	; 0x2c
 8007fbe:	af02      	add	r7, sp, #8
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8007fc8:	68b9      	ldr	r1, [r7, #8]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7ff ff14 	bl	8007df8 <metal_io_virt>
 8007fd0:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d902      	bls.n	8007fe6 <metal_io_block_write+0x2c>
		return -ERANGE;
 8007fe0:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8007fe4:	e05b      	b.n	800809e <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	441a      	add	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d904      	bls.n	8007ffe <metal_io_block_write+0x44>
		len = io->size - offset;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	603b      	str	r3, [r7, #0]
	retlen = len;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d017      	beq.n	800803a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2305      	movs	r3, #5
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	47a0      	blx	r4
 800801c:	6178      	str	r0, [r7, #20]
 800801e:	e03d      	b.n	800809c <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	701a      	strb	r2, [r3, #0]
			ptr++;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	3301      	adds	r3, #1
 800802c:	61fb      	str	r3, [r7, #28]
			source++;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	3301      	adds	r3, #1
 8008032:	61bb      	str	r3, [r7, #24]
			len--;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	3b01      	subs	r3, #1
 8008038:	603b      	str	r3, [r7, #0]
		while ( len && (
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1ea      	bne.n	8008020 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e5      	bne.n	8008020 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008054:	e00c      	b.n	8008070 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	3304      	adds	r3, #4
 8008062:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	3304      	adds	r3, #4
 8008068:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	3b04      	subs	r3, #4
 800806e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b03      	cmp	r3, #3
 8008074:	dcef      	bgt.n	8008056 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8008076:	e00c      	b.n	8008092 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	3301      	adds	r3, #1
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	3301      	adds	r3, #1
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	3b01      	subs	r3, #1
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1ef      	bne.n	8008078 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8008098:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800809c:	697b      	ldr	r3, [r7, #20]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3724      	adds	r7, #36	; 0x24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd90      	pop	{r4, r7, pc}

080080a6 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 80080a6:	b590      	push	{r4, r7, lr}
 80080a8:	b08b      	sub	sp, #44	; 0x2c
 80080aa:	af02      	add	r7, sp, #8
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	4613      	mov	r3, r2
 80080b4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fe9d 	bl	8007df8 <metal_io_virt>
 80080be:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d902      	bls.n	80080d4 <metal_io_block_set+0x2e>
		return -ERANGE;
 80080ce:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80080d2:	e05d      	b.n	8008190 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	441a      	add	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d904      	bls.n	80080ec <metal_io_block_set+0x46>
		len = io->size - offset;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	603b      	str	r3, [r7, #0]
	retlen = len;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d009      	beq.n	800810c <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80080fc:	79fa      	ldrb	r2, [r7, #7]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2305      	movs	r3, #5
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	47a0      	blx	r4
 800810a:	e040      	b.n	800818e <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e00a      	b.n	800812c <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8008116:	79fa      	ldrb	r2, [r7, #7]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	4313      	orrs	r3, r2
 8008124:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	3301      	adds	r3, #1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d9f1      	bls.n	8008116 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008132:	e008      	b.n	8008146 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	79fa      	ldrb	r2, [r7, #7]
 8008138:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	3301      	adds	r3, #1
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	3b01      	subs	r3, #1
 8008144:	603b      	str	r3, [r7, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00e      	beq.n	800816a <metal_io_block_set+0xc4>
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1ee      	bne.n	8008134 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008156:	e008      	b.n	800816a <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	3304      	adds	r3, #4
 8008162:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3b04      	subs	r3, #4
 8008168:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b03      	cmp	r3, #3
 800816e:	dcf3      	bgt.n	8008158 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8008170:	e008      	b.n	8008184 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	79fa      	ldrb	r2, [r7, #7]
 8008176:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f3      	bne.n	8008172 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800818a:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800818e:	693b      	ldr	r3, [r7, #16]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3724      	adds	r7, #36	; 0x24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}

08008198 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8008198:	b40e      	push	{r1, r2, r3}
 800819a:	b480      	push	{r7}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	4603      	mov	r3, r0
 80081a2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	b003      	add	sp, #12
 80081b0:	4770      	bx	lr

080081b2 <metal_io_virt>:
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
		: NULL);
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c4:	d009      	beq.n	80081da <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d804      	bhi.n	80081da <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681a      	ldr	r2, [r3, #0]
		: NULL);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	4413      	add	r3, r2
 80081d8:	e000      	b.n	80081dc <metal_io_virt+0x2a>
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	429a      	cmp	r2, r3
 8008204:	d201      	bcs.n	800820a <metal_io_virt_to_offset+0x22>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	e001      	b.n	800820e <metal_io_virt_to_offset+0x26>
 800820a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b08d      	sub	sp, #52	; 0x34
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff ffbf 	bl	80081b2 <metal_io_virt>
 8008234:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699c      	ldr	r4, [r3, #24]
 8008242:	79fa      	ldrb	r2, [r7, #7]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	47a0      	blx	r4
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	e057      	b.n	8008302 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d011      	beq.n	800827c <metal_io_read+0x60>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d10e      	bne.n	800827c <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	f3bf 8f5b 	dmb	ish
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	f3bf 8f5b 	dmb	ish
 800826e:	b2db      	uxtb	r3, r3
 8008270:	76fb      	strb	r3, [r7, #27]
 8008272:	7efb      	ldrb	r3, [r7, #27]
 8008274:	b2da      	uxtb	r2, r3
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	e042      	b.n	8008302 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d011      	beq.n	80082a6 <metal_io_read+0x8a>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d10e      	bne.n	80082a6 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	f3bf 8f5b 	dmb	ish
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	f3bf 8f5b 	dmb	ish
 8008298:	b29b      	uxth	r3, r3
 800829a:	833b      	strh	r3, [r7, #24]
 800829c:	8b3b      	ldrh	r3, [r7, #24]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	f04f 0300 	mov.w	r3, #0
 80082a4:	e02d      	b.n	8008302 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d010      	beq.n	80082ce <metal_io_read+0xb2>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d10d      	bne.n	80082ce <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	623b      	str	r3, [r7, #32]
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	f3bf 8f5b 	dmb	ish
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f3bf 8f5b 	dmb	ish
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	461a      	mov	r2, r3
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	e019      	b.n	8008302 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d010      	beq.n	80082f6 <metal_io_read+0xda>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d10d      	bne.n	80082f6 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f3bf 8f5b 	dmb	ish
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f3bf 8f5b 	dmb	ish
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	e005      	b.n	8008302 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <metal_io_read+0xf0>)
 80082f8:	4a05      	ldr	r2, [pc, #20]	; (8008310 <metal_io_read+0xf4>)
 80082fa:	21f0      	movs	r1, #240	; 0xf0
 80082fc:	4805      	ldr	r0, [pc, #20]	; (8008314 <metal_io_read+0xf8>)
 80082fe:	f002 f8cb 	bl	800a498 <__assert_func>
	return 0; /* quiet compiler */
}
 8008302:	4610      	mov	r0, r2
 8008304:	4619      	mov	r1, r3
 8008306:	3734      	adds	r7, #52	; 0x34
 8008308:	46bd      	mov	sp, r7
 800830a:	bd90      	pop	{r4, r7, pc}
 800830c:	0800b9a0 	.word	0x0800b9a0
 8008310:	0800c2a8 	.word	0x0800c2a8
 8008314:	0800b9a4 	.word	0x0800b9a4

08008318 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b08f      	sub	sp, #60	; 0x3c
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff42 	bl	80081b2 <metal_io_virt>
 800832e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00c      	beq.n	8008352 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	69dc      	ldr	r4, [r3, #28]
 800833c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8008350:	e04e      	b.n	80083f0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00e      	beq.n	8008376 <metal_io_write+0x5e>
 8008358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10b      	bne.n	8008376 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
 8008362:	783b      	ldrb	r3, [r7, #0]
 8008364:	76fb      	strb	r3, [r7, #27]
 8008366:	7efa      	ldrb	r2, [r7, #27]
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	f3bf 8f5b 	dmb	ish
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	f3bf 8f5b 	dmb	ish
 8008374:	e03c      	b.n	80083f0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00e      	beq.n	800839a <metal_io_write+0x82>
 800837c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837e:	2b02      	cmp	r3, #2
 8008380:	d10b      	bne.n	800839a <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
 8008386:	883b      	ldrh	r3, [r7, #0]
 8008388:	833b      	strh	r3, [r7, #24]
 800838a:	8b3a      	ldrh	r2, [r7, #24]
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	f3bf 8f5b 	dmb	ish
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	f3bf 8f5b 	dmb	ish
 8008398:	e02a      	b.n	80083f0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00e      	beq.n	80083be <metal_io_write+0xa6>
 80083a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d10b      	bne.n	80083be <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	f3bf 8f5b 	dmb	ish
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f5b 	dmb	ish
 80083bc:	e018      	b.n	80083f0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <metal_io_write+0xca>
 80083c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d10b      	bne.n	80083e2 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	61fb      	str	r3, [r7, #28]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f3bf 8f5b 	dmb	ish
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f5b 	dmb	ish
 80083e0:	e006      	b.n	80083f0 <metal_io_write+0xd8>
		metal_assert (0);
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <metal_io_write+0xe0>)
 80083e4:	4a05      	ldr	r2, [pc, #20]	; (80083fc <metal_io_write+0xe4>)
 80083e6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80083ea:	4805      	ldr	r0, [pc, #20]	; (8008400 <metal_io_write+0xe8>)
 80083ec:	f002 f854 	bl	800a498 <__assert_func>
}
 80083f0:	bf00      	nop
 80083f2:	3734      	adds	r7, #52	; 0x34
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd90      	pop	{r4, r7, pc}
 80083f8:	0800b9a0 	.word	0x0800b9a0
 80083fc:	0800c2b8 	.word	0x0800c2b8
 8008400:	0800b9a4 	.word	0x0800b9a4

08008404 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f002 f89d 	bl	800a54c <malloc>
 8008412:	4603      	mov	r3, r0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	free(ptr);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f002 f899 	bl	800a55c <free>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3307      	adds	r3, #7
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7ff ffde 	bl	8008404 <metal_allocate_memory>
 8008448:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d004      	beq.n	800845a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	2100      	movs	r1, #0
 8008454:	68b8      	ldr	r0, [r7, #8]
 8008456:	f002 f8b1 	bl	800a5bc <memset>
	}

	return vqs;
 800845a:	68bb      	ldr	r3, [r7, #8]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	891b      	ldrh	r3, [r3, #8]
 8008470:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3b18      	subs	r3, #24
 800847c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	429a      	cmp	r2, r3
 8008486:	d905      	bls.n	8008494 <rproc_virtio_virtqueue_notify+0x30>
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <rproc_virtio_virtqueue_notify+0x5c>)
 800848a:	4a0e      	ldr	r2, [pc, #56]	; (80084c4 <rproc_virtio_virtqueue_notify+0x60>)
 800848c:	2133      	movs	r1, #51	; 0x33
 800848e:	480e      	ldr	r0, [pc, #56]	; (80084c8 <rproc_virtio_virtqueue_notify+0x64>)
 8008490:	f002 f802 	bl	800a498 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4613      	mov	r3, r2
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	4413      	add	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	440b      	add	r3, r1
 80084a4:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	6810      	ldr	r0, [r2, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	6912      	ldr	r2, [r2, #16]
 80084b2:	4611      	mov	r1, r2
 80084b4:	4798      	blx	r3
}
 80084b6:	bf00      	nop
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	0800b9ec 	.word	0x0800b9ec
 80084c4:	0800c288 	.word	0x0800c288
 80084c8:	0800ba08 	.word	0x0800ba08

080084cc <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3b18      	subs	r3, #24
 80084d8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3318      	adds	r3, #24
 80084ea:	4619      	mov	r1, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fe7b 	bl	80081e8 <metal_io_virt_to_offset>
 80084f2:	4601      	mov	r1, r0
 80084f4:	2301      	movs	r3, #1
 80084f6:	2205      	movs	r2, #5
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff fe8f 	bl	800821c <metal_io_read>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4613      	mov	r3, r2
 8008504:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8008506:	7afb      	ldrb	r3, [r7, #11]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af02      	add	r7, sp, #8
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3b18      	subs	r3, #24
 8008520:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3318      	adds	r3, #24
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff fe57 	bl	80081e8 <metal_io_virt_to_offset>
 800853a:	4601      	mov	r1, r0
 800853c:	78fa      	ldrb	r2, [r7, #3]
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	2001      	movs	r0, #1
 8008544:	9001      	str	r0, [sp, #4]
 8008546:	2005      	movs	r0, #5
 8008548:	9000      	str	r0, [sp, #0]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff fee4 	bl	8008318 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	6810      	ldr	r0, [r2, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	4611      	mov	r1, r2
 800855e:	4798      	blx	r3
}
 8008560:	bf00      	nop
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3b18      	subs	r3, #24
 8008574:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	330c      	adds	r3, #12
 8008586:	4619      	mov	r1, r3
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7ff fe2d 	bl	80081e8 <metal_io_virt_to_offset>
 800858e:	4601      	mov	r1, r0
 8008590:	2304      	movs	r3, #4
 8008592:	2205      	movs	r2, #5
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff fe41 	bl	800821c <metal_io_read>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4613      	mov	r3, r2
 80085a0:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 80085a2:	68bb      	ldr	r3, [r7, #8]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3b18      	subs	r3, #24
 80085ba:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	330c      	adds	r3, #12
 80085cc:	4619      	mov	r1, r3
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7ff fe0a 	bl	80081e8 <metal_io_virt_to_offset>
 80085d4:	4601      	mov	r1, r0
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	f04f 0300 	mov.w	r3, #0
 80085de:	2004      	movs	r0, #4
 80085e0:	9001      	str	r0, [sp, #4]
 80085e2:	2005      	movs	r0, #5
 80085e4:	9000      	str	r0, [sp, #0]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7ff fe96 	bl	8008318 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	6810      	ldr	r0, [r2, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	4611      	mov	r1, r2
 80085fa:	4798      	blx	r3
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
 8008642:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d103      	bne.n	8008668 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8008660:	2140      	movs	r1, #64	; 0x40
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff ff54 	bl	8008510 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	; 0x38
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	7e5b      	ldrb	r3, [r3, #25]
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8008688:	2050      	movs	r0, #80	; 0x50
 800868a:	f7ff febb 	bl	8008404 <metal_allocate_memory>
 800868e:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	e092      	b.n	80087c0 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869c:	4613      	mov	r3, r2
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4413      	add	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff fead 	bl	8008404 <metal_allocate_memory>
 80086aa:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 8081 	beq.w	80087b6 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 80086b4:	2250      	movs	r2, #80	; 0x50
 80086b6:	2100      	movs	r1, #0
 80086b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086ba:	f001 ff7f 	bl	800a5bc <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 80086be:	2218      	movs	r2, #24
 80086c0:	2100      	movs	r1, #0
 80086c2:	6a38      	ldr	r0, [r7, #32]
 80086c4:	f001 ff7a 	bl	800a5bc <memset>
	vdev = &rpvdev->vdev;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	3318      	adds	r3, #24
 80086cc:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 80086ce:	2300      	movs	r3, #0
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
 80086d2:	e025      	b.n	8008720 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 80086d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	3318      	adds	r3, #24
 80086e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e6:	4413      	add	r3, r2
 80086e8:	3304      	adds	r3, #4
 80086ea:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d102      	bne.n	80086f8 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 80086f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086fa:	f7ff fe9a 	bl	8008432 <virtqueue_allocate>
 80086fe:	6178      	str	r0, [r7, #20]
		if (!vq)
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d031      	beq.n	800876a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8008706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008708:	4613      	mov	r3, r2
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	461a      	mov	r2, r3
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	4413      	add	r3, r2
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	3301      	adds	r3, #1
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
 8008720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	429a      	cmp	r2, r3
 8008726:	d3d5      	bcc.n	80086d4 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800872c:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008732:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	6a3a      	ldr	r2, [r7, #32]
 8008738:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873e:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008756:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875c:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <rproc_virtio_create_vdev+0x158>)
 8008762:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	3318      	adds	r3, #24
 8008768:	e02a      	b.n	80087c0 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800876a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800876c:	2300      	movs	r3, #0
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
 8008770:	e019      	b.n	80087a6 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8008772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008774:	4613      	mov	r3, r2
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	4413      	add	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	461a      	mov	r2, r3
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	4413      	add	r3, r2
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8008788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	461a      	mov	r2, r3
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	4413      	add	r3, r2
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff fe3e 	bl	800841c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 80087a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a2:	3301      	adds	r3, #1
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
 80087a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d3e1      	bcc.n	8008772 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 80087ae:	6a38      	ldr	r0, [r7, #32]
 80087b0:	f7ff fe34 	bl	800841c <metal_free_memory>
 80087b4:	e000      	b.n	80087b8 <rproc_virtio_create_vdev+0x148>
		goto err0;
 80087b6:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 80087b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ba:	f7ff fe2f 	bl	800841c <metal_free_memory>
	return NULL;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3738      	adds	r7, #56	; 0x38
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	0800c264 	.word	0x0800c264

080087cc <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087de:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 80087e8:	f06f 0301 	mvn.w	r3, #1
 80087ec:	e019      	b.n	8008822 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	4613      	mov	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	440b      	add	r3, r1
 80087fe:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6a3a      	ldr	r2, [r7, #32]
 8008804:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	b29a      	uxth	r2, r3
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881e:	609a      	str	r2, [r3, #8]

	return 0;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800883e:	f06f 0315 	mvn.w	r3, #21
 8008842:	e02c      	b.n	800889e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d101      	bne.n	8008852 <rproc_virtio_notified+0x24>
		return 0;
 800884e:	2300      	movs	r3, #0
 8008850:	e025      	b.n	800889e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e01a      	b.n	8008894 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4613      	mov	r3, r2
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4413      	add	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	440b      	add	r3, r1
 800886e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d003      	beq.n	8008882 <rproc_virtio_notified+0x54>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d105      	bne.n	800888e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8008888:	68b8      	ldr	r0, [r7, #8]
 800888a:	f001 fb58 	bl	8009f3e <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	3301      	adds	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3e0      	bcc.n	800885e <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fe08 	bl	80084cc <rproc_virtio_get_status>
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 80088ca:	e7f4      	b.n	80088b6 <rproc_virtio_wait_remote_ready+0x10>
		return;
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80088d0:	bf00      	nop
	}
}
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 80088e0:	bf00      	nop
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	4611      	mov	r1, r2
 80088e8:	f3bf 8f5b 	dmb	ish
 80088ec:	e8d3 2f4f 	ldrexb	r2, [r3]
 80088f0:	e8c3 1f40 	strexb	r0, r1, [r3]
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d1f9      	bne.n	80088ec <__metal_mutex_acquire+0x14>
 80088f8:	f3bf 8f5b 	dmb	ish
 80088fc:	b2d3      	uxtb	r3, r2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1ef      	bne.n	80088e2 <__metal_mutex_acquire+0xa>
		;
	}
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f3bf 8f5b 	dmb	ish
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	f3bf 8f5b 	dmb	ish
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff ffcc 	bl	80088d8 <__metal_mutex_acquire>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff ffdd 	bl	8008910 <__metal_mutex_release>
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <metal_list_add_before>:
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	601a      	str	r2, [r3, #0]
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <metal_list_add_tail>:
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff ffdd 	bl	800895e <metal_list_add_before>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6852      	ldr	r2, [r2, #4]
 80089bc:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	009a      	lsls	r2, r3, #2
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	440a      	add	r2, r1
 80089f6:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	f002 021f 	and.w	r2, r2, #31
 80089fe:	2001      	movs	r0, #1
 8008a00:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4403      	add	r3, r0
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	2101      	movs	r1, #1
 8008a38:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8008a3c:	4013      	ands	r3, r2
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	009a      	lsls	r2, r3, #2
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	f002 021f 	and.w	r2, r2, #31
 8008a66:	2001      	movs	r0, #1
 8008a68:	fa00 f202 	lsl.w	r2, r0, r2
 8008a6c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	4403      	add	r3, r0
 8008a74:	400a      	ands	r2, r1
 8008a76:	601a      	str	r2, [r3, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff ffc2 	bl	8008a1a <metal_bitmap_is_bit_set>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bf0c      	ite	eq
 8008a9c:	2301      	moveq	r3, #1
 8008a9e:	2300      	movne	r3, #0
 8008aa0:	b2db      	uxtb	r3, r3
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b086      	sub	sp, #24
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e002      	b.n	8008ac2 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d207      	bcs.n	8008ada <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4619      	mov	r1, r3
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7ff ffd8 	bl	8008a84 <metal_bitmap_is_bit_clear>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8008ada:	697b      	ldr	r3, [r7, #20]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <rpmsg_init_ept>:
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2220      	movs	r2, #32
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f002 f955 	bl	800ada8 <strncpy>
	ept->addr = src;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8008b28:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2c:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	2100      	movs	r1, #0
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff ffb8 	bl	8008aaa <metal_bitmap_next_clear_bit>
 8008b3a:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d206      	bcs.n	8008b52 <rpmsg_get_address+0x34>
		addr = nextbit;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff ff48 	bl	80089e2 <metal_bitmap_set_bit>
	}

	return addr;
 8008b52:	68fb      	ldr	r3, [r7, #12]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	da03      	bge.n	8008b78 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7ff ff69 	bl	8008a4a <metal_bitmap_clear_bit>
}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	da05      	bge.n	8008ba0 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff ff3f 	bl	8008a1a <metal_bitmap_is_bit_set>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	e000      	b.n	8008ba2 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <rpmsg_is_address_set+0x2c>)
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	fffff82d 	.word	0xfffff82d

08008bb0 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	da05      	bge.n	8008bd0 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ff0b 	bl	80089e2 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e000      	b.n	8008bd2 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <rpmsg_set_address+0x2c>)
	}
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	fffff82d 	.word	0xfffff82d

08008be0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b089      	sub	sp, #36	; 0x24
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00a      	beq.n	8008c0a <rpmsg_send_offchannel_raw+0x2a>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <rpmsg_send_offchannel_raw+0x2a>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <rpmsg_send_offchannel_raw+0x2a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d101      	bne.n	8008c0e <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <rpmsg_send_offchannel_raw+0x60>)
 8008c0c:	e014      	b.n	8008c38 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	47a0      	blx	r4
 8008c32:	4603      	mov	r3, r0
 8008c34:	e000      	b.n	8008c38 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8008c36:	4b02      	ldr	r3, [pc, #8]	; (8008c40 <rpmsg_send_offchannel_raw+0x60>)
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	371c      	adds	r7, #28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd90      	pop	{r4, r7, pc}
 8008c40:	fffff82d 	.word	0xfffff82d

08008c44 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b090      	sub	sp, #64	; 0x40
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	f107 030c 	add.w	r3, r7, #12
 8008c5e:	2220      	movs	r2, #32
 8008c60:	4618      	mov	r0, r3
 8008c62:	f002 f8a1 	bl	800ada8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	2201      	movs	r2, #1
 8008c70:	9201      	str	r2, [sp, #4]
 8008c72:	2228      	movs	r2, #40	; 0x28
 8008c74:	9200      	str	r2, [sp, #0]
 8008c76:	2235      	movs	r2, #53	; 0x35
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ffb1 	bl	8008be0 <rpmsg_send_offchannel_raw>
 8008c7e:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	da01      	bge.n	8008c8a <rpmsg_send_ns_message+0x46>
		return ret;
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	e000      	b.n	8008c8c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3738      	adds	r7, #56	; 0x38
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	e04b      	b.n	8008d42 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	3b34      	subs	r3, #52	; 0x34
 8008cb2:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d006      	beq.n	8008cca <rpmsg_get_endpoint+0x36>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d101      	bne.n	8008cca <rpmsg_get_endpoint+0x36>
			return ept;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	e040      	b.n	8008d4c <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d106      	bne.n	8008ce2 <rpmsg_get_endpoint+0x4e>
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d101      	bne.n	8008ce2 <rpmsg_get_endpoint+0x4e>
			return ept;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	e034      	b.n	8008d4c <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2220      	movs	r2, #32
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f002 f848 	bl	800ad84 <strncmp>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d018      	beq.n	8008d3a <rpmsg_get_endpoint+0xa6>
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d015      	beq.n	8008d3a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d006      	beq.n	8008d24 <rpmsg_get_endpoint+0x90>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d101      	bne.n	8008d24 <rpmsg_get_endpoint+0x90>
			return ept;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	e013      	b.n	8008d4c <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d107      	bne.n	8008d3c <rpmsg_get_endpoint+0xa8>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d102      	bne.n	8008d3c <rpmsg_get_endpoint+0xa8>
			return ept;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	e008      	b.n	8008d4c <rpmsg_get_endpoint+0xb8>
			continue;
 8008d3a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d1af      	bne.n	8008caa <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d016      	beq.n	8008d90 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d008      	beq.n	8008d84 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2180      	movs	r1, #128	; 0x80
 8008d80:	f7ff feec 	bl	8008b5c <rpmsg_release_address>
	metal_list_del(&ept->node);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3334      	adds	r3, #52	; 0x34
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff fe0f 	bl	80089ac <metal_list_del>
 8008d8e:	e000      	b.n	8008d92 <rpmsg_unregister_endpoint+0x3e>
		return;
 8008d90:	bf00      	nop
}
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	3334      	adds	r3, #52	; 0x34
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7ff fdee 	bl	8008992 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	613b      	str	r3, [r7, #16]

	if (!ept)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8008dd8:	4b37      	ldr	r3, [pc, #220]	; (8008eb8 <rpmsg_create_ept+0xf8>)
 8008dda:	e068      	b.n	8008eae <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	3358      	adds	r3, #88	; 0x58
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fda6 	bl	8008932 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d018      	beq.n	8008e20 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	3348      	adds	r3, #72	; 0x48
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	2180      	movs	r1, #128	; 0x80
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fec2 	bl	8008b80 <rpmsg_is_address_set>
 8008dfc:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d107      	bne.n	8008e14 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3348      	adds	r3, #72	; 0x48
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	2180      	movs	r1, #128	; 0x80
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fecf 	bl	8008bb0 <rpmsg_set_address>
 8008e12:	e00c      	b.n	8008e2e <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	dd40      	ble.n	8008e9c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8008e1e:	e040      	b.n	8008ea2 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	3348      	adds	r3, #72	; 0x48
 8008e24:	2180      	movs	r1, #128	; 0x80
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fe79 	bl	8008b1e <rpmsg_get_address>
 8008e2c:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff fe51 	bl	8008ae4 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	68b8      	ldr	r0, [r7, #8]
 8008e46:	f7ff ffa7 	bl	8008d98 <rpmsg_register_endpoint>
 8008e4a:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	da06      	bge.n	8008e60 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	3348      	adds	r3, #72	; 0x48
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	2180      	movs	r1, #128	; 0x80
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fe7e 	bl	8008b5c <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d11c      	bne.n	8008ea0 <rpmsg_create_ept+0xe0>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6e:	d117      	bne.n	8008ea0 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	3358      	adds	r3, #88	; 0x58
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fd67 	bl	8008948 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fee1 	bl	8008c44 <rpmsg_send_ns_message>
 8008e82:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	3358      	adds	r3, #88	; 0x58
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fd52 	bl	8008932 <metal_mutex_acquire>
		if (status)
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7ff ff5d 	bl	8008d54 <rpmsg_unregister_endpoint>
 8008e9a:	e002      	b.n	8008ea2 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8008e9c:	bf00      	nop
 8008e9e:	e000      	b.n	8008ea2 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8008ea0:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	3358      	adds	r3, #88	; 0x58
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff fd4e 	bl	8008948 <metal_mutex_release>
	return status;
 8008eac:	697b      	ldr	r3, [r7, #20]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	fffff82d 	.word	0xfffff82d

08008ebc <__metal_cache_invalidate>:
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fcc2 	bl	8009852 <metal_machine_cache_invalidate>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <metal_cache_invalidate>:
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff ffea 	bl	8008ebc <__metal_cache_invalidate>
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff ffee 	bl	8008ef0 <__metal_sleep_usec>
 8008f14:	4603      	mov	r3, r0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <metal_list_init>:
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	605a      	str	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <metal_io_virt_to_offset>:
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d201      	bcs.n	8008f62 <metal_io_virt_to_offset+0x22>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	e001      	b.n	8008f66 <metal_io_virt_to_offset+0x26>
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <__metal_mutex_init>:
{
 8008f72:	b480      	push	{r7}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	461a      	mov	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f3bf 8f5b 	dmb	ish
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	f3bf 8f5b 	dmb	ish
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <__metal_mutex_acquire>:
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8008fa6:	bf00      	nop
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	4611      	mov	r1, r2
 8008fae:	f3bf 8f5b 	dmb	ish
 8008fb2:	e8d3 2f4f 	ldrexb	r2, [r3]
 8008fb6:	e8c3 1f40 	strexb	r0, r1, [r3]
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d1f9      	bne.n	8008fb2 <__metal_mutex_acquire+0x14>
 8008fbe:	f3bf 8f5b 	dmb	ish
 8008fc2:	b2d3      	uxtb	r3, r2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ef      	bne.n	8008fa8 <__metal_mutex_acquire+0xa>
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <__metal_mutex_release>:
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f3bf 8f5b 	dmb	ish
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	f3bf 8f5b 	dmb	ish
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <metal_mutex_init>:
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff ffb6 	bl	8008f72 <__metal_mutex_init>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <metal_mutex_acquire>:
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff ffc1 	bl	8008f9e <__metal_mutex_acquire>
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <metal_mutex_release>:
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff ffd2 	bl	8008fd6 <__metal_mutex_release>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <rpmsg_init_ept>:
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f001 feaa 	bl	800ada8 <strncpy>
	ept->addr = src;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009080:	699b      	ldr	r3, [r3, #24]
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80090a6:	78f9      	ldrb	r1, [r7, #3]
 80090a8:	4610      	mov	r0, r2
 80090aa:	4798      	blx	r3
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80090ea:	4610      	mov	r0, r2
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	f000 fbf2 	bl	80098fc <virtio_create_virtqueues>
 8009118:	4603      	mov	r3, r0
					callbacks);
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	2100      	movs	r1, #0
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff fdad 	bl	8008c94 <rpmsg_get_endpoint>
 800913a:	4603      	mov	r3, r0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d901      	bls.n	800915c <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	e00f      	b.n	800917c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6899      	ldr	r1, [r3, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	1acb      	subs	r3, r1, r3
 800916a:	4413      	add	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	1ad2      	subs	r2, r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	605a      	str	r2, [r3, #4]

	return buffer;
 800917a:	68fb      	ldr	r3, [r7, #12]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01d      	beq.n	80091d6 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <rpmsg_virtio_init_shm_pool+0x2c>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f023 0303 	bic.w	r3, r3, #3
 80091b0:	3304      	adds	r3, #4
 80091b2:	e000      	b.n	80091b6 <rpmsg_virtio_init_shm_pool+0x2e>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <rpmsg_virtio_init_shm_pool+0x46>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	3304      	adds	r3, #4
 80091cc:	e000      	b.n	80091d0 <rpmsg_virtio_init_shm_pool+0x48>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	6053      	str	r3, [r2, #4]
 80091d4:	e000      	b.n	80091d8 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 80091d6:	bf00      	nop
}
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b08a      	sub	sp, #40	; 0x28
 80091e6:	af02      	add	r7, sp, #8
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff ff3f 	bl	8009074 <rpmsg_virtio_get_role>
 80091f6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10d      	bne.n	800921a <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800920a:	f107 0114 	add.w	r1, r7, #20
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	2301      	movs	r3, #1
 8009214:	2200      	movs	r2, #0
 8009216:	f000 fcc0 	bl	8009b9a <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800921a:	bf00      	nop
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b08a      	sub	sp, #40	; 0x28
 8009226:	af02      	add	r7, sp, #8
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff ff1f 	bl	8009074 <rpmsg_virtio_get_role>
 8009236:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10f      	bne.n	800925e <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800924a:	f107 0114 	add.w	r1, r7, #20
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2301      	movs	r3, #1
 8009254:	2200      	movs	r2, #0
 8009256:	f000 fca0 	bl	8009b9a <virtqueue_add_buffer>
 800925a:	4603      	mov	r3, r0
 800925c:	e000      	b.n	8009260 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff fefd 	bl	8009074 <rpmsg_virtio_get_role>
 800927a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d116      	bne.n	80092b4 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fcc7 	bl	8009c22 <virtqueue_get_buffer>
 8009294:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10b      	bne.n	80092b4 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff ff4d 	bl	8009144 <rpmsg_virtio_shm_pool_get_buffer>
 80092aa:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092b2:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 80092b4:	697b      	ldr	r3, [r7, #20]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff fed2 	bl	8009074 <rpmsg_virtio_get_role>
 80092d0:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d107      	bne.n	80092ec <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fc9c 	bl	8009c22 <virtqueue_get_buffer>
 80092ea:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6978      	ldr	r0, [r7, #20]
 80092fa:	f7ff fdec 	bl	8008ed6 <metal_cache_invalidate>
	}

	return data;
 80092fe:	697b      	ldr	r3, [r7, #20]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff feaf 	bl	8009074 <rpmsg_virtio_get_role>
 8009316:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8009322:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8009326:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8009328:	68fb      	ldr	r3, [r7, #12]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b090      	sub	sp, #64	; 0x40
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800934e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009350:	f7ff feb0 	bl	80090b4 <rpmsg_virtio_get_status>
 8009354:	4603      	mov	r3, r0
 8009356:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8009362:	4b45      	ldr	r3, [pc, #276]	; (8009478 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8009364:	e083      	b.n	800946e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8009366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800936c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009370:	63bb      	str	r3, [r7, #56]	; 0x38
 8009372:	e001      	b.n	8009378 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3358      	adds	r3, #88	; 0x58
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff fe46 	bl	800900e <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8009382:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009384:	f7ff ffc0 	bl	8009308 <_rpmsg_virtio_get_buffer_size>
 8009388:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800938a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	429a      	cmp	r2, r3
 8009390:	dc08      	bgt.n	80093a4 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8009392:	f107 0216 	add.w	r2, r7, #22
 8009396:	f107 0310 	add.w	r3, r7, #16
 800939a:	4619      	mov	r1, r3
 800939c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800939e:	f7ff ff63 	bl	8009268 <rpmsg_virtio_get_tx_buffer>
 80093a2:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3358      	adds	r3, #88	; 0x58
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fe3b 	bl	8009024 <metal_mutex_release>
		if (buffer || !tick_count)
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10e      	bne.n	80093d2 <rpmsg_virtio_send_offchannel_raw+0x9e>
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 80093c0:	4b2e      	ldr	r3, [pc, #184]	; (800947c <rpmsg_virtio_send_offchannel_raw+0x148>)
 80093c2:	e054      	b.n	800946e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 80093c4:	200a      	movs	r0, #10
 80093c6:	f7ff fd9e 	bl	8008f06 <metal_sleep_usec>
		tick_count--;
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	3b01      	subs	r3, #1
 80093ce:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 80093d0:	e7d2      	b.n	8009378 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 80093d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 80093d8:	4b29      	ldr	r3, [pc, #164]	; (8009480 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 80093da:	e048      	b.n	800946e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 80093e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 80093f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f8:	f7ff fda2 	bl	8008f40 <metal_io_virt_to_offset>
 80093fc:	4601      	mov	r1, r0
 80093fe:	f107 0218 	add.w	r2, r7, #24
 8009402:	2310      	movs	r3, #16
 8009404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009406:	f7fe fdd8 	bl	8007fba <metal_io_block_write>
 800940a:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	2b10      	cmp	r3, #16
 8009410:	d000      	beq.n	8009414 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8009412:	e7fe      	b.n	8009412 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8009414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009416:	3310      	adds	r3, #16
 8009418:	4619      	mov	r1, r3
 800941a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941c:	f7ff fd90 	bl	8008f40 <metal_io_virt_to_offset>
 8009420:	4601      	mov	r1, r0
 8009422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009428:	f7fe fdc7 	bl	8007fba <metal_io_block_write>
 800942c:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800942e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009432:	429a      	cmp	r2, r3
 8009434:	d000      	beq.n	8009438 <rpmsg_virtio_send_offchannel_raw+0x104>
 8009436:	e7fe      	b.n	8009436 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3358      	adds	r3, #88	; 0x58
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff fde6 	bl	800900e <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	8afb      	ldrh	r3, [r7, #22]
 8009446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009448:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800944a:	f7ff feea 	bl	8009222 <rpmsg_virtio_enqueue_buffer>
 800944e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d000      	beq.n	8009458 <rpmsg_virtio_send_offchannel_raw+0x124>
 8009456:	e7fe      	b.n	8009456 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8009458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fc5a 	bl	8009d16 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3358      	adds	r3, #88	; 0x58
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff fddc 	bl	8009024 <metal_mutex_release>

	return size;
 800946c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800946e:	4618      	mov	r0, r3
 8009470:	3740      	adds	r7, #64	; 0x40
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	fffff82c 	.word	0xfffff82c
 800947c:	fffff82b 	.word	0xfffff82b
 8009480:	fffff82e 	.word	0xfffff82e

08009484 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b08d      	sub	sp, #52	; 0x34
 800949c:	af02      	add	r7, sp, #8
 800949e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	3358      	adds	r3, #88	; 0x58
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff fdaa 	bl	800900e <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 80094ba:	f107 020a 	add.w	r2, r7, #10
 80094be:	f107 030c 	add.w	r3, r7, #12
 80094c2:	4619      	mov	r1, r3
 80094c4:	69f8      	ldr	r0, [r7, #28]
 80094c6:	f7ff fefa 	bl	80092be <rpmsg_virtio_get_rx_buffer>
 80094ca:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	3358      	adds	r3, #88	; 0x58
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff fda7 	bl	8009024 <metal_mutex_release>

	while (rp_hdr) {
 80094d6:	e04c      	b.n	8009572 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	3358      	adds	r3, #88	; 0x58
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fd96 	bl	800900e <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4619      	mov	r1, r3
 80094e8:	69b8      	ldr	r0, [r7, #24]
 80094ea:	f7ff fe1a 	bl	8009122 <rpmsg_get_ept_from_addr>
 80094ee:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	3358      	adds	r3, #88	; 0x58
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff fd95 	bl	8009024 <metal_mutex_release>

		if (!ept)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d03c      	beq.n	800957a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009508:	d103      	bne.n	8009512 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	899b      	ldrh	r3, [r3, #12]
 8009520:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8009522:	4618      	mov	r0, r3
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	4613      	mov	r3, r2
 8009530:	4602      	mov	r2, r0
 8009532:	6978      	ldr	r0, [r7, #20]
 8009534:	47a0      	blx	r4
 8009536:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d000      	beq.n	8009540 <rpmsg_virtio_rx_callback+0xa8>
 800953e:	e7fe      	b.n	800953e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	3358      	adds	r3, #88	; 0x58
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff fd62 	bl	800900e <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	897b      	ldrh	r3, [r7, #10]
 800954e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009550:	69f8      	ldr	r0, [r7, #28]
 8009552:	f7ff fe46 	bl	80091e2 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8009556:	f107 020a 	add.w	r2, r7, #10
 800955a:	f107 030c 	add.w	r3, r7, #12
 800955e:	4619      	mov	r1, r3
 8009560:	69f8      	ldr	r0, [r7, #28]
 8009562:	f7ff feac 	bl	80092be <rpmsg_virtio_get_rx_buffer>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	3358      	adds	r3, #88	; 0x58
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fd59 	bl	8009024 <metal_mutex_release>
	while (rp_hdr) {
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1af      	bne.n	80094d8 <rpmsg_virtio_rx_callback+0x40>
 8009578:	e000      	b.n	800957c <rpmsg_virtio_rx_callback+0xe4>
			return;
 800957a:	bf00      	nop
	}
}
 800957c:	372c      	adds	r7, #44	; 0x2c
 800957e:	46bd      	mov	sp, r7
 8009580:	bd90      	pop	{r4, r7, pc}

08009582 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b092      	sub	sp, #72	; 0x48
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8009596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009598:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800959a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b28      	cmp	r3, #40	; 0x28
 80095a8:	d001      	beq.n	80095ae <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e057      	b.n	800965e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 80095b0:	4619      	mov	r1, r3
 80095b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80095b4:	f7ff fcc4 	bl	8008f40 <metal_io_virt_to_offset>
 80095b8:	4601      	mov	r1, r0
 80095ba:	f107 0210 	add.w	r2, r7, #16
 80095be:	2320      	movs	r3, #32
 80095c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80095c2:	f7fe fc83 	bl	8007ecc <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 80095c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 80095cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ce:	3358      	adds	r3, #88	; 0x58
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fd1c 	bl	800900e <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 80095d6:	f107 0110 	add.w	r1, r7, #16
 80095da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095dc:	f04f 32ff 	mov.w	r2, #4294967295
 80095e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80095e2:	f7ff fb57 	bl	8008c94 <rpmsg_get_endpoint>
 80095e6:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d017      	beq.n	8009624 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8009602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009604:	3358      	adds	r3, #88	; 0x58
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fd0c 	bl	8009024 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	2b00      	cmp	r3, #0
 8009610:	d024      	beq.n	800965c <rpmsg_virtio_ns_callback+0xda>
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d020      	beq.n	800965c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	4798      	blx	r3
 8009622:	e01b      	b.n	800965c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	2b00      	cmp	r3, #0
 8009628:	d110      	bne.n	800964c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800962a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962c:	3358      	adds	r3, #88	; 0x58
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff fcf8 	bl	8009024 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8009634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800963c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800963e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009640:	f107 0110 	add.w	r1, r7, #16
 8009644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009646:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009648:	4798      	blx	r3
 800964a:	e007      	b.n	800965c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009650:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8009652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009654:	3358      	adds	r3, #88	; 0x58
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fce4 	bl	8009024 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3748      	adds	r7, #72	; 0x48
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b094      	sub	sp, #80	; 0x50
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800967a:	2264      	movs	r2, #100	; 0x64
 800967c:	2100      	movs	r1, #0
 800967e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009680:	f000 ff9c 	bl	800a5bc <memset>
	metal_mutex_init(&rdev->lock);
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	3358      	adds	r3, #88	; 0x58
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff fcb5 	bl	8008ff8 <metal_mutex_init>
	rvdev->vdev = vdev;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	4a5d      	ldr	r2, [pc, #372]	; (8009818 <rpmsg_init_vdev+0x1b0>)
 80096a4:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7ff fce4 	bl	8009074 <rpmsg_virtio_get_role>
 80096ac:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d120      	bne.n	80096f6 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 80096b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 80096ba:	4b58      	ldr	r3, [pc, #352]	; (800981c <rpmsg_init_vdev+0x1b4>)
 80096bc:	e0a7      	b.n	800980e <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 80096be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 80096c6:	4b56      	ldr	r3, [pc, #344]	; (8009820 <rpmsg_init_vdev+0x1b8>)
 80096c8:	e0a1      	b.n	800980e <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ce:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 80096d0:	4b54      	ldr	r3, [pc, #336]	; (8009824 <rpmsg_init_vdev+0x1bc>)
 80096d2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 80096d4:	4b54      	ldr	r3, [pc, #336]	; (8009828 <rpmsg_init_vdev+0x1c0>)
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 80096d8:	4b54      	ldr	r3, [pc, #336]	; (800982c <rpmsg_init_vdev+0x1c4>)
 80096da:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 80096dc:	4b54      	ldr	r3, [pc, #336]	; (8009830 <rpmsg_init_vdev+0x1c8>)
 80096de:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ee:	3318      	adds	r3, #24
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 80096fc:	f107 0220 	add.w	r2, r7, #32
 8009700:	f107 0318 	add.w	r3, r7, #24
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	4613      	mov	r3, r2
 8009708:	2202      	movs	r2, #2
 800970a:	2100      	movs	r1, #0
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fcf3 	bl	80090f8 <rpmsg_virtio_create_virtqueues>
 8009712:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8009714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <rpmsg_init_vdev+0xb6>
		return status;
 800971a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800971c:	e077      	b.n	800980e <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800971e:	2300      	movs	r3, #0
 8009720:	643b      	str	r3, [r7, #64]	; 0x40
 8009722:	e00f      	b.n	8009744 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800972a:	4613      	mov	r3, r2
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	4413      	add	r3, r2
 8009730:	00db      	lsls	r3, r3, #3
 8009732:	440b      	add	r3, r1
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800973e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009740:	3301      	adds	r3, #1
 8009742:	643b      	str	r3, [r7, #64]	; 0x40
 8009744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009746:	2b01      	cmp	r3, #1
 8009748:	d9ec      	bls.n	8009724 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974c:	2b00      	cmp	r3, #0
 800974e:	d137      	bne.n	80097c0 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8009750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009754:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800975a:	e02a      	b.n	80097b2 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800975c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009760:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009762:	f7ff fcef 	bl	8009144 <rpmsg_virtio_shm_pool_get_buffer>
 8009766:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800976e:	4b2c      	ldr	r3, [pc, #176]	; (8009820 <rpmsg_init_vdev+0x1b8>)
 8009770:	e04d      	b.n	800980e <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8009776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009778:	6838      	ldr	r0, [r7, #0]
 800977a:	f7ff fbe1 	bl	8008f40 <metal_io_virt_to_offset>
 800977e:	4601      	mov	r1, r0
 8009780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009784:	2200      	movs	r2, #0
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	f7fe fc8d 	bl	80080a6 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009790:	f107 0110 	add.w	r1, r7, #16
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2301      	movs	r3, #1
 800979a:	2200      	movs	r2, #0
 800979c:	f000 f9fd 	bl	8009b9a <virtqueue_add_buffer>
 80097a0:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 80097a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <rpmsg_init_vdev+0x144>
				return status;
 80097a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097aa:	e030      	b.n	800980e <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ae:	3301      	adds	r3, #1
 80097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b6:	895b      	ldrh	r3, [r3, #10]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097bc:	4293      	cmp	r3, r2
 80097be:	d3cd      	bcc.n	800975c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff fbab 	bl	8008f1e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7ff fc84 	bl	80090d6 <rpmsg_virtio_get_features>
 80097ce:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d011      	beq.n	80097fe <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	f103 0008 	add.w	r0, r3, #8
 80097e0:	2300      	movs	r3, #0
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	4b13      	ldr	r3, [pc, #76]	; (8009834 <rpmsg_init_vdev+0x1cc>)
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	2335      	movs	r3, #53	; 0x35
 80097ea:	2235      	movs	r2, #53	; 0x35
 80097ec:	4912      	ldr	r1, [pc, #72]	; (8009838 <rpmsg_init_vdev+0x1d0>)
 80097ee:	f7ff fc24 	bl	800903a <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	3308      	adds	r3, #8
 80097f6:	4619      	mov	r1, r3
 80097f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097fa:	f7ff facd 	bl	8008d98 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8009804:	2104      	movs	r1, #4
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff fc41 	bl	800908e <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800980c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800980e:	4618      	mov	r0, r3
 8009810:	3748      	adds	r7, #72	; 0x48
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	08009335 	.word	0x08009335
 800981c:	fffff82d 	.word	0xfffff82d
 8009820:	fffff82e 	.word	0xfffff82e
 8009824:	0800ba8c 	.word	0x0800ba8c
 8009828:	0800ba94 	.word	0x0800ba94
 800982c:	08009499 	.word	0x08009499
 8009830:	08009485 	.word	0x08009485
 8009834:	08009583 	.word	0x08009583
 8009838:	0800ba9c 	.word	0x0800ba9c

0800983c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8009876:	68fb      	ldr	r3, [r7, #12]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3303      	adds	r3, #3
 8009898:	005a      	lsls	r2, r3, #1
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	4413      	add	r3, r2
 80098a6:	1e5a      	subs	r2, r3, #1
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	425b      	negs	r3, r3
 80098ac:	4013      	ands	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4413      	add	r3, r2
 80098b8:	3306      	adds	r3, #6
 80098ba:	60fb      	str	r3, [r7, #12]

	return size;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <metal_io_virt_to_offset>:
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d201      	bcs.n	80098ec <metal_io_virt_to_offset+0x22>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	e001      	b.n	80098f0 <metal_io_virt_to_offset+0x26>
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 80098fc:	b590      	push	{r4, r7, lr}
 80098fe:	b091      	sub	sp, #68	; 0x44
 8009900:	af04      	add	r7, sp, #16
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	429a      	cmp	r2, r3
 8009916:	d902      	bls.n	800991e <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8009918:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800991c:	e053      	b.n	80099c6 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800991e:	2300      	movs	r3, #0
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009922:	e04b      	b.n	80099bc <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800992a:	4613      	mov	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4413      	add	r3, r2
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	440b      	add	r3, r1
 8009934:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	3304      	adds	r3, #4
 800993a:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d118      	bne.n	8009976 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4619      	mov	r1, r3
 8009950:	69f8      	ldr	r0, [r7, #28]
 8009952:	f7ff ffba 	bl	80098ca <metal_io_virt_to_offset>
 8009956:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800995c:	461a      	mov	r2, r3
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	4619      	mov	r1, r3
 8009964:	4610      	mov	r0, r2
 8009966:	f7ff ff8d 	bl	8009884 <vring_size>
 800996a:	4603      	mov	r3, r0
 800996c:	2200      	movs	r2, #0
 800996e:	69b9      	ldr	r1, [r7, #24]
 8009970:	69f8      	ldr	r0, [r7, #28]
 8009972:	f7fe fb98 	bl	80080a6 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	b298      	uxth	r0, r3
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	4413      	add	r3, r2
 8009982:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800998a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800998c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8009992:	6a12      	ldr	r2, [r2, #32]
 8009994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009996:	6809      	ldr	r1, [r1, #0]
 8009998:	9102      	str	r1, [sp, #8]
 800999a:	9201      	str	r2, [sp, #4]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	4622      	mov	r2, r4
 80099a2:	4601      	mov	r1, r0
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f8c4 	bl	8009b32 <virtqueue_create>
 80099aa:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <virtio_create_virtqueues+0xba>
			return ret;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	e007      	b.n	80099c6 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	3301      	adds	r3, #1
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d3af      	bcc.n	8009924 <virtio_create_virtqueues+0x28>
	}
	return 0;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3734      	adds	r7, #52	; 0x34
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd90      	pop	{r4, r7, pc}

080099ce <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
	vr->num = num;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	441a      	add	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	461a      	mov	r2, r3
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	425b      	negs	r3, r3
 8009a0c:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8009a0e:	461a      	mov	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	60da      	str	r2, [r3, #12]
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	80fb      	strh	r3, [r7, #6]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	80bb      	strh	r3, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8009a32:	88ba      	ldrh	r2, [r7, #4]
 8009a34:	88fb      	ldrh	r3, [r7, #6]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8009a3e:	88b9      	ldrh	r1, [r7, #4]
 8009a40:	887b      	ldrh	r3, [r7, #2]
 8009a42:	1acb      	subs	r3, r1, r3
 8009a44:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8009a46:	429a      	cmp	r2, r3
 8009a48:	bf34      	ite	cc
 8009a4a:	2301      	movcc	r3, #1
 8009a4c:	2300      	movcs	r3, #0
 8009a4e:	b2db      	uxtb	r3, r3
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <metal_io_virt_to_offset>:
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d201      	bcs.n	8009a7e <metal_io_virt_to_offset+0x22>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	e001      	b.n	8009a82 <metal_io_virt_to_offset+0x26>
 8009a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <metal_io_phys>:
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b085      	sub	sp, #20
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8009a9c:	2b1f      	cmp	r3, #31
 8009a9e:	d805      	bhi.n	8009aac <metal_io_phys+0x1e>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	e000      	b.n	8009aae <metal_io_phys+0x20>
 8009aac:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8009aae:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d010      	beq.n	8009ada <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d80b      	bhi.n	8009ada <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6919      	ldr	r1, [r3, #16]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8009ad6:	4413      	add	r3, r2
 8009ad8:	e001      	b.n	8009ade <metal_io_phys+0x50>
 8009ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <metal_io_virt_to_phys>:
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b082      	sub	sp, #8
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff ffb0 	bl	8009a5c <metal_io_virt_to_offset>
 8009afc:	4603      	mov	r3, r0
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff ffc4 	bl	8009a8e <metal_io_phys>
 8009b06:	4603      	mov	r3, r0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff ffe1 	bl	8009aea <metal_io_virt_to_phys>
 8009b28:	4603      	mov	r3, r0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d121      	bne.n	8009b90 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	897a      	ldrh	r2, [r7, #10]
 8009b5c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	891a      	ldrh	r2, [r3, #8]
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8009b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b68:	895a      	ldrh	r2, [r3, #10]
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	6a3a      	ldr	r2, [r7, #32]
 8009b72:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b78:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	6819      	ldr	r1, [r3, #0]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	461a      	mov	r2, r3
 8009b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b86:	f000 f97a 	bl	8009e7e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8009b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b8c:	f000 f899 	bl	8009cc2 <virtqueue_disable_cb>
	}

	return (status);
 8009b90:	697b      	ldr	r3, [r7, #20]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b08a      	sub	sp, #40	; 0x28
 8009b9e:	af02      	add	r7, sp, #8
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8009bac:	2300      	movs	r3, #0
 8009bae:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d12c      	bne.n	8009c18 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009bc2:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8009bc4:	8a7b      	ldrh	r3, [r7, #18]
 8009bc6:	3307      	adds	r3, #7
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4413      	add	r3, r2
 8009bce:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bd4:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	69d9      	ldr	r1, [r3, #28]
 8009be2:	8a7a      	ldrh	r2, [r7, #18]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f8a7 	bl	8009d42 <vq_ring_add_buffer>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8a3a      	ldrh	r2, [r7, #16]
 8009bfc:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8009c0e:	8a7b      	ldrh	r3, [r7, #18]
 8009c10:	4619      	mov	r1, r3
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 f966 	bl	8009ee4 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8009c18:	69bb      	ldr	r3, [r7, #24]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3720      	adds	r7, #32
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b088      	sub	sp, #32
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d006      	beq.n	8009c42 <virtqueue_get_buffer+0x20>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d101      	bne.n	8009c46 <virtqueue_get_buffer+0x24>
		return (NULL);
 8009c42:	2300      	movs	r3, #0
 8009c44:	e039      	b.n	8009cba <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	b291      	uxth	r1, r2
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	8651      	strh	r1, [r2, #50]	; 0x32
 8009c52:	b21a      	sxth	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	895b      	ldrh	r3, [r3, #10]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	4013      	ands	r3, r2
 8009c60:	b21b      	sxth	r3, r3
 8009c62:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c68:	8bfb      	ldrh	r3, [r7, #30]
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3304      	adds	r3, #4
 8009c70:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8009c72:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	82fb      	strh	r3, [r7, #22]
	if (len)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8009c8a:	8afb      	ldrh	r3, [r7, #22]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 f8ae 	bl	8009df0 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8009c94:	8afa      	ldrh	r2, [r7, #22]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3207      	adds	r2, #7
 8009c9a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009c9e:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8009ca0:	8afa      	ldrh	r2, [r7, #22]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3207      	adds	r2, #7
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8bfa      	ldrh	r2, [r7, #30]
 8009cb6:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8009cb8:	693b      	ldr	r3, [r7, #16]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d010      	beq.n	8009cf8 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	895b      	ldrh	r3, [r3, #10]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1a      	ldr	r2, [r3, #32]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8009cea:	3901      	subs	r1, #1
 8009cec:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	460a      	mov	r2, r1
 8009cf4:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8009cf6:	e008      	b.n	8009d0a <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	f042 0201 	orr.w	r2, r2, #1
 8009d06:	b292      	uxth	r2, r2
 8009d08:	801a      	strh	r2, [r3, #0]
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8009d1e:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f91d 	bl	8009f62 <vq_ring_must_notify_host>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f94d 	bl	8009fce <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b088      	sub	sp, #32
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8009d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	4413      	add	r3, r2
 8009d58:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61fb      	str	r3, [r7, #28]
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	837b      	strh	r3, [r7, #26]
 8009d62:	e03c      	b.n	8009dde <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8009d64:	8b7b      	ldrh	r3, [r7, #26]
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7ff fec8 	bl	8009b10 <virtqueue_virt_to_phys>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	f04f 0300 	mov.w	r3, #0
 8009d88:	6939      	ldr	r1, [r7, #16]
 8009d8a:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	4413      	add	r3, r2
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2200      	movs	r2, #0
 8009da2:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	69fa      	ldr	r2, [r7, #28]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	da06      	bge.n	8009dbc <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	899b      	ldrh	r3, [r3, #12]
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	db06      	blt.n	8009dd2 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	899b      	ldrh	r3, [r3, #12]
 8009dc8:	f043 0302 	orr.w	r3, r3, #2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	61fb      	str	r3, [r7, #28]
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	89db      	ldrh	r3, [r3, #14]
 8009ddc:	837b      	strh	r3, [r7, #26]
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	dbbe      	blt.n	8009d64 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8009de6:	8b7b      	ldrh	r3, [r7, #26]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3720      	adds	r7, #32
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	69da      	ldr	r2, [r3, #28]
 8009e00:	887b      	ldrh	r3, [r7, #2]
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	4413      	add	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8009e08:	887b      	ldrh	r3, [r7, #2]
 8009e0a:	3307      	adds	r3, #7
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4413      	add	r3, r2
 8009e12:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	889b      	ldrh	r3, [r3, #4]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	889b      	ldrh	r3, [r3, #4]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d113      	bne.n	8009e64 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009e3c:	e00c      	b.n	8009e58 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69da      	ldr	r2, [r3, #28]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	89db      	ldrh	r3, [r3, #14]
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	4413      	add	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	889b      	ldrh	r3, [r3, #4]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	899b      	ldrh	r3, [r3, #12]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1ec      	bne.n	8009e3e <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	887a      	ldrh	r2, [r7, #2]
 8009e70:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8009e72:	bf00      	nop
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b088      	sub	sp, #32
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	895b      	ldrh	r3, [r3, #10]
 8009e8e:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3318      	adds	r3, #24
 8009e94:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8009e96:	69b9      	ldr	r1, [r7, #24]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	6978      	ldr	r0, [r7, #20]
 8009e9e:	f7ff fd96 	bl	80099ce <vring_init>

	for (i = 0; i < size - 1; i++)
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	e00c      	b.n	8009ec2 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	6859      	ldr	r1, [r3, #4]
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3201      	adds	r2, #1
 8009eb8:	b292      	uxth	r2, r2
 8009eba:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	61fb      	str	r3, [r7, #28]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	dbed      	blt.n	8009ea8 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009eda:	81da      	strh	r2, [r3, #14]
}
 8009edc:	bf00      	nop
 8009ede:	3720      	adds	r7, #32
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	b21a      	sxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	895b      	ldrh	r3, [r3, #10]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	b21b      	sxth	r3, r3
 8009f02:	4013      	ands	r3, r2
 8009f04:	b21b      	sxth	r3, r3
 8009f06:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1a      	ldr	r2, [r3, #32]
 8009f0c:	89fb      	ldrh	r3, [r7, #14]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	4413      	add	r3, r2
 8009f12:	887a      	ldrh	r2, [r7, #2]
 8009f14:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8009f16:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	885a      	ldrh	r2, [r3, #2]
 8009f20:	3201      	adds	r2, #1
 8009f22:	b292      	uxth	r2, r2
 8009f24:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b082      	sub	sp, #8
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8009f46:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <virtqueue_notification+0x1c>
		vq->callback(vq);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	4798      	blx	r3
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	f003 0302 	and.w	r3, r3, #2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d01d      	beq.n	8009fb2 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	885b      	ldrh	r3, [r3, #2]
 8009f7c:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f82:	89fa      	ldrh	r2, [r7, #14]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	4413      	add	r3, r2
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8009f98:	89ba      	ldrh	r2, [r7, #12]
 8009f9a:	89f9      	ldrh	r1, [r7, #14]
 8009f9c:	897b      	ldrh	r3, [r7, #10]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fd3e 	bl	8009a20 <vring_need_event>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	bf14      	ite	ne
 8009faa:	2301      	movne	r3, #1
 8009fac:	2300      	moveq	r3, #0
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	e009      	b.n	8009fc6 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <HAL_HSEM_FreeCallback+0x1c>)
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8009ffe:	2002      	movs	r0, #2
 800a000:	f7f8 fcc2 	bl	8002988 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	2400045c 	.word	0x2400045c

0800a010 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800a016:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <MAILBOX_Init+0x44>)
 800a018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a01c:	4a0d      	ldr	r2, [pc, #52]	; (800a054 <MAILBOX_Init+0x44>)
 800a01e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a026:	4b0b      	ldr	r3, [pc, #44]	; (800a054 <MAILBOX_Init+0x44>)
 800a028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a02c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a030:	607b      	str	r3, [r7, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800a034:	2201      	movs	r2, #1
 800a036:	2100      	movs	r1, #0
 800a038:	207d      	movs	r0, #125	; 0x7d
 800a03a:	f7f7 fe00 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800a03e:	207d      	movs	r0, #125	; 0x7d
 800a040:	f7f7 fe17 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800a044:	2002      	movs	r0, #2
 800a046:	f7f8 fc9f 	bl	8002988 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	58024400 	.word	0x58024400

0800a058 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800a060:	4b09      	ldr	r3, [pc, #36]	; (800a088 <MAILBOX_Poll+0x30>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d108      	bne.n	800a07a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800a068:	2100      	movs	r1, #0
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe fbdf 	bl	800882e <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800a070:	4b05      	ldr	r3, [pc, #20]	; (800a088 <MAILBOX_Poll+0x30>)
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
    return 0;
 800a076:	2300      	movs	r3, #0
 800a078:	e001      	b.n	800a07e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800a07a:	f06f 030a 	mvn.w	r3, #10
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	2400045c 	.word	0x2400045c

0800a08c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800a096:	2000      	movs	r0, #0
 800a098:	f7f8 fc48 	bl	800292c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800a09c:	2100      	movs	r1, #0
 800a09e:	2000      	movs	r0, #0
 800a0a0:	f7f8 fc5e 	bl	8002960 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d006      	beq.n	800a0ce <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c8:	d001      	beq.n	800a0ce <is_rpmsg_ept_ready+0x20>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <is_rpmsg_ept_ready+0x22>
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d209      	bcs.n	800a104 <metal_device_io_region+0x28>
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	4413      	add	r3, r2
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	4413      	add	r3, r2
 800a100:	3304      	adds	r3, #4
 800a102:	e000      	b.n	800a106 <metal_device_io_region+0x2a>
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
	...

0800a114 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b08d      	sub	sp, #52	; 0x34
 800a118:	af04      	add	r7, sp, #16
 800a11a:	6078      	str	r0, [r7, #4]
  int status = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800a120:	2300      	movs	r3, #0
 800a122:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800a124:	4a41      	ldr	r2, [pc, #260]	; (800a22c <OPENAMP_shmem_init+0x118>)
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a12e:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800a13a:	f107 0310 	add.w	r3, r7, #16
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fd fe28 	bl	8007d94 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800a144:	483a      	ldr	r0, [pc, #232]	; (800a230 <OPENAMP_shmem_init+0x11c>)
 800a146:	f7fd fccd 	bl	8007ae4 <metal_register_generic_device>
 800a14a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <OPENAMP_shmem_init+0x42>
    return status;
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	e066      	b.n	800a224 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800a156:	f107 0318 	add.w	r3, r7, #24
 800a15a:	461a      	mov	r2, r3
 800a15c:	4935      	ldr	r1, [pc, #212]	; (800a234 <OPENAMP_shmem_init+0x120>)
 800a15e:	4836      	ldr	r0, [pc, #216]	; (800a238 <OPENAMP_shmem_init+0x124>)
 800a160:	f7fd fc82 	bl	8007a68 <metal_device_open>
 800a164:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <OPENAMP_shmem_init+0x5c>
    return status;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	e059      	b.n	800a224 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800a170:	4a32      	ldr	r2, [pc, #200]	; (800a23c <OPENAMP_shmem_init+0x128>)
 800a172:	4b33      	ldr	r3, [pc, #204]	; (800a240 <OPENAMP_shmem_init+0x12c>)
 800a174:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800a17c:	4a31      	ldr	r2, [pc, #196]	; (800a244 <OPENAMP_shmem_init+0x130>)
 800a17e:	4b2f      	ldr	r3, [pc, #188]	; (800a23c <OPENAMP_shmem_init+0x128>)
 800a180:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800a182:	461a      	mov	r2, r3
 800a184:	2300      	movs	r3, #0
 800a186:	9302      	str	r3, [sp, #8]
 800a188:	2300      	movs	r3, #0
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	4613      	mov	r3, r2
 800a194:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <OPENAMP_shmem_init+0x12c>)
 800a196:	4929      	ldr	r1, [pc, #164]	; (800a23c <OPENAMP_shmem_init+0x128>)
 800a198:	f7fd fe49 	bl	8007e2e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff ff9b 	bl	800a0dc <metal_device_io_region>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4a27      	ldr	r2, [pc, #156]	; (800a248 <OPENAMP_shmem_init+0x134>)
 800a1aa:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800a1ac:	4b26      	ldr	r3, [pc, #152]	; (800a248 <OPENAMP_shmem_init+0x134>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <OPENAMP_shmem_init+0xa6>
    return -1;
 800a1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b8:	e034      	b.n	800a224 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800a1ba:	f107 0208 	add.w	r2, r7, #8
 800a1be:	f107 030c 	add.w	r3, r7, #12
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f91d 	bl	800a404 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4a1f      	ldr	r2, [pc, #124]	; (800a24c <OPENAMP_shmem_init+0x138>)
 800a1ce:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800a1d0:	4b1e      	ldr	r3, [pc, #120]	; (800a24c <OPENAMP_shmem_init+0x138>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d102      	bne.n	800a1de <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1dc:	e022      	b.n	800a224 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a1e4:	4b19      	ldr	r3, [pc, #100]	; (800a24c <OPENAMP_shmem_init+0x138>)
 800a1e6:	6819      	ldr	r1, [r3, #0]
 800a1e8:	4b18      	ldr	r3, [pc, #96]	; (800a24c <OPENAMP_shmem_init+0x138>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	461c      	mov	r4, r3
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9302      	str	r3, [sp, #8]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4623      	mov	r3, r4
 800a200:	f7fd fe15 	bl	8007e2e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2101      	movs	r1, #1
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff ff67 	bl	800a0dc <metal_device_io_region>
 800a20e:	4603      	mov	r3, r0
 800a210:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <OPENAMP_shmem_init+0x13c>)
 800a212:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800a214:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <OPENAMP_shmem_init+0x13c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <OPENAMP_shmem_init+0x10e>
    return -1;
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	e000      	b.n	800a224 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3724      	adds	r7, #36	; 0x24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd90      	pop	{r4, r7, pc}
 800a22c:	0800bab4 	.word	0x0800bab4
 800a230:	24000044 	.word	0x24000044
 800a234:	0800baa0 	.word	0x0800baa0
 800a238:	0800baac 	.word	0x0800baac
 800a23c:	38000400 	.word	0x38000400
 800a240:	240004f0 	.word	0x240004f0
 800a244:	38010000 	.word	0x38010000
 800a248:	24000460 	.word	0x24000460
 800a24c:	24000468 	.word	0x24000468
 800a250:	24000464 	.word	0x24000464

0800a254 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800a254:	b590      	push	{r4, r7, lr}
 800a256:	b08b      	sub	sp, #44	; 0x2c
 800a258:	af04      	add	r7, sp, #16
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	613b      	str	r3, [r7, #16]
  int status = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800a26a:	f7ff fed1 	bl	800a010 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff ff50 	bl	800a114 <OPENAMP_shmem_init>
 800a274:	60f8      	str	r0, [r7, #12]
  if(status)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	e06a      	b.n	800a356 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	4b37      	ldr	r3, [pc, #220]	; (800a360 <MX_OPENAMP_Init+0x10c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f103 0218 	add.w	r2, r3, #24
 800a28a:	4b36      	ldr	r3, [pc, #216]	; (800a364 <MX_OPENAMP_Init+0x110>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2100      	movs	r1, #0
 800a290:	9102      	str	r1, [sp, #8]
 800a292:	4935      	ldr	r1, [pc, #212]	; (800a368 <MX_OPENAMP_Init+0x114>)
 800a294:	9101      	str	r1, [sp, #4]
 800a296:	2100      	movs	r1, #0
 800a298:	9100      	str	r1, [sp, #0]
 800a29a:	21ff      	movs	r1, #255	; 0xff
 800a29c:	f7fe f9e8 	bl	8008670 <rproc_virtio_create_vdev>
 800a2a0:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d102      	bne.n	800a2ae <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	e053      	b.n	800a356 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800a2ae:	6938      	ldr	r0, [r7, #16]
 800a2b0:	f7fe faf9 	bl	80088a6 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800a2b4:	4b2a      	ldr	r3, [pc, #168]	; (800a360 <MX_OPENAMP_Init+0x10c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3334      	adds	r3, #52	; 0x34
 800a2ba:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a2c4:	461c      	mov	r4, r3
 800a2c6:	4b29      	ldr	r3, [pc, #164]	; (800a36c <MX_OPENAMP_Init+0x118>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	6892      	ldr	r2, [r2, #8]
 800a2ce:	6979      	ldr	r1, [r7, #20]
 800a2d0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800a2d2:	9102      	str	r1, [sp, #8]
 800a2d4:	9201      	str	r2, [sp, #4]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4623      	mov	r3, r4
 800a2da:	4602      	mov	r2, r0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6938      	ldr	r0, [r7, #16]
 800a2e0:	f7fe fa74 	bl	80087cc <rproc_virtio_init_vring>
 800a2e4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	e032      	b.n	800a356 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800a2f0:	4b1b      	ldr	r3, [pc, #108]	; (800a360 <MX_OPENAMP_Init+0x10c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3348      	adds	r3, #72	; 0x48
 800a2f6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a300:	461c      	mov	r4, r3
 800a302:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <MX_OPENAMP_Init+0x118>)
 800a304:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	6892      	ldr	r2, [r2, #8]
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800a30e:	9102      	str	r1, [sp, #8]
 800a310:	9201      	str	r2, [sp, #4]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	4623      	mov	r3, r4
 800a316:	4602      	mov	r2, r0
 800a318:	2101      	movs	r1, #1
 800a31a:	6938      	ldr	r0, [r7, #16]
 800a31c:	f7fe fa56 	bl	80087cc <rproc_virtio_init_vring>
 800a320:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	e014      	b.n	800a356 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800a32c:	4b10      	ldr	r3, [pc, #64]	; (800a370 <MX_OPENAMP_Init+0x11c>)
 800a32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a332:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800a334:	4a0f      	ldr	r2, [pc, #60]	; (800a374 <MX_OPENAMP_Init+0x120>)
 800a336:	4b0e      	ldr	r3, [pc, #56]	; (800a370 <MX_OPENAMP_Init+0x11c>)
 800a338:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800a33a:	461a      	mov	r2, r3
 800a33c:	480e      	ldr	r0, [pc, #56]	; (800a378 <MX_OPENAMP_Init+0x124>)
 800a33e:	f7fe ff23 	bl	8009188 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800a342:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <MX_OPENAMP_Init+0x118>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a0c      	ldr	r2, [pc, #48]	; (800a378 <MX_OPENAMP_Init+0x124>)
 800a348:	9200      	str	r2, [sp, #0]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	6939      	ldr	r1, [r7, #16]
 800a34e:	480b      	ldr	r0, [pc, #44]	; (800a37c <MX_OPENAMP_Init+0x128>)
 800a350:	f7ff f98a 	bl	8009668 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	371c      	adds	r7, #28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd90      	pop	{r4, r7, pc}
 800a35e:	bf00      	nop
 800a360:	24000468 	.word	0x24000468
 800a364:	24000464 	.word	0x24000464
 800a368:	0800a08d 	.word	0x0800a08d
 800a36c:	24000460 	.word	0x24000460
 800a370:	38000400 	.word	0x38000400
 800a374:	38010000 	.word	0x38010000
 800a378:	2400046c 	.word	0x2400046c
 800a37c:	24000478 	.word	0x24000478

0800a380 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08a      	sub	sp, #40	; 0x28
 800a384:	af04      	add	r7, sp, #16
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	9302      	str	r3, [sp, #8]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	4904      	ldr	r1, [pc, #16]	; (800a3b8 <OPENAMP_create_endpoint+0x38>)
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f7fe fd0a 	bl	8008dc0 <rpmsg_create_ept>
 800a3ac:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	24000478 	.word	0x24000478

0800a3bc <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800a3c0:	4b03      	ldr	r3, [pc, #12]	; (800a3d0 <OPENAMP_check_for_message+0x14>)
 800a3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fe47 	bl	800a058 <MAILBOX_Poll>
}
 800a3ca:	bf00      	nop
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	24000478 	.word	0x24000478

0800a3d4 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800a3dc:	e004      	b.n	800a3e8 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <OPENAMP_Wait_EndPointready+0x2c>)
 800a3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fe38 	bl	800a058 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff fe60 	bl	800a0ae <is_rpmsg_ept_ready>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0f4      	beq.n	800a3de <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	24000478 	.word	0x24000478

0800a404 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800a410:	228c      	movs	r2, #140	; 0x8c
 800a412:	2100      	movs	r1, #0
 800a414:	481e      	ldr	r0, [pc, #120]	; (800a490 <resource_table_init+0x8c>)
 800a416:	f000 f8d1 	bl	800a5bc <memset>
	resource_table.num = 1;
 800a41a:	4b1d      	ldr	r3, [pc, #116]	; (800a490 <resource_table_init+0x8c>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800a420:	4b1b      	ldr	r3, [pc, #108]	; (800a490 <resource_table_init+0x8c>)
 800a422:	2201      	movs	r2, #1
 800a424:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800a426:	4b1a      	ldr	r3, [pc, #104]	; (800a490 <resource_table_init+0x8c>)
 800a428:	2218      	movs	r2, #24
 800a42a:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800a42c:	4b19      	ldr	r3, [pc, #100]	; (800a494 <resource_table_init+0x90>)
 800a42e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a432:	4a17      	ldr	r2, [pc, #92]	; (800a490 <resource_table_init+0x8c>)
 800a434:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800a436:	4b16      	ldr	r3, [pc, #88]	; (800a490 <resource_table_init+0x8c>)
 800a438:	2204      	movs	r2, #4
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800a43c:	4b14      	ldr	r3, [pc, #80]	; (800a490 <resource_table_init+0x8c>)
 800a43e:	2204      	movs	r2, #4
 800a440:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <resource_table_init+0x8c>)
 800a444:	2200      	movs	r2, #0
 800a446:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800a448:	4a12      	ldr	r2, [pc, #72]	; (800a494 <resource_table_init+0x90>)
 800a44a:	4b11      	ldr	r3, [pc, #68]	; (800a490 <resource_table_init+0x8c>)
 800a44c:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800a44e:	4b10      	ldr	r3, [pc, #64]	; (800a490 <resource_table_init+0x8c>)
 800a450:	2204      	movs	r2, #4
 800a452:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800a454:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <resource_table_init+0x8c>)
 800a456:	2204      	movs	r2, #4
 800a458:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800a45a:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <resource_table_init+0x8c>)
 800a45c:	2201      	movs	r2, #1
 800a45e:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <resource_table_init+0x8c>)
 800a462:	2203      	movs	r2, #3
 800a464:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800a466:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <resource_table_init+0x8c>)
 800a468:	2207      	movs	r2, #7
 800a46a:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800a46c:	4b08      	ldr	r3, [pc, #32]	; (800a490 <resource_table_init+0x8c>)
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800a474:	4b06      	ldr	r3, [pc, #24]	; (800a490 <resource_table_init+0x8c>)
 800a476:	2201      	movs	r2, #1
 800a478:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	228c      	movs	r2, #140	; 0x8c
 800a47e:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4a03      	ldr	r2, [pc, #12]	; (800a490 <resource_table_init+0x8c>)
 800a484:	601a      	str	r2, [r3, #0]
}
 800a486:	bf00      	nop
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	38000000 	.word	0x38000000
 800a494:	38000400 	.word	0x38000400

0800a498 <__assert_func>:
 800a498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a49a:	4614      	mov	r4, r2
 800a49c:	461a      	mov	r2, r3
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <__assert_func+0x2c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	68d8      	ldr	r0, [r3, #12]
 800a4a6:	b14c      	cbz	r4, 800a4bc <__assert_func+0x24>
 800a4a8:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <__assert_func+0x30>)
 800a4aa:	9100      	str	r1, [sp, #0]
 800a4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4b0:	4906      	ldr	r1, [pc, #24]	; (800a4cc <__assert_func+0x34>)
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	f000 f814 	bl	800a4e0 <fiprintf>
 800a4b8:	f000 fd4a 	bl	800af50 <abort>
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <__assert_func+0x38>)
 800a4be:	461c      	mov	r4, r3
 800a4c0:	e7f3      	b.n	800a4aa <__assert_func+0x12>
 800a4c2:	bf00      	nop
 800a4c4:	240000c0 	.word	0x240000c0
 800a4c8:	0800c2c7 	.word	0x0800c2c7
 800a4cc:	0800c2d4 	.word	0x0800c2d4
 800a4d0:	0800c302 	.word	0x0800c302

0800a4d4 <__errno>:
 800a4d4:	4b01      	ldr	r3, [pc, #4]	; (800a4dc <__errno+0x8>)
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	240000c0 	.word	0x240000c0

0800a4e0 <fiprintf>:
 800a4e0:	b40e      	push	{r1, r2, r3}
 800a4e2:	b503      	push	{r0, r1, lr}
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	ab03      	add	r3, sp, #12
 800a4e8:	4805      	ldr	r0, [pc, #20]	; (800a500 <fiprintf+0x20>)
 800a4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ee:	6800      	ldr	r0, [r0, #0]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	f000 f93f 	bl	800a774 <_vfiprintf_r>
 800a4f6:	b002      	add	sp, #8
 800a4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4fc:	b003      	add	sp, #12
 800a4fe:	4770      	bx	lr
 800a500:	240000c0 	.word	0x240000c0

0800a504 <__libc_init_array>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	4d0d      	ldr	r5, [pc, #52]	; (800a53c <__libc_init_array+0x38>)
 800a508:	4c0d      	ldr	r4, [pc, #52]	; (800a540 <__libc_init_array+0x3c>)
 800a50a:	1b64      	subs	r4, r4, r5
 800a50c:	10a4      	asrs	r4, r4, #2
 800a50e:	2600      	movs	r6, #0
 800a510:	42a6      	cmp	r6, r4
 800a512:	d109      	bne.n	800a528 <__libc_init_array+0x24>
 800a514:	4d0b      	ldr	r5, [pc, #44]	; (800a544 <__libc_init_array+0x40>)
 800a516:	4c0c      	ldr	r4, [pc, #48]	; (800a548 <__libc_init_array+0x44>)
 800a518:	f001 f9c6 	bl	800b8a8 <_init>
 800a51c:	1b64      	subs	r4, r4, r5
 800a51e:	10a4      	asrs	r4, r4, #2
 800a520:	2600      	movs	r6, #0
 800a522:	42a6      	cmp	r6, r4
 800a524:	d105      	bne.n	800a532 <__libc_init_array+0x2e>
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	f855 3b04 	ldr.w	r3, [r5], #4
 800a52c:	4798      	blx	r3
 800a52e:	3601      	adds	r6, #1
 800a530:	e7ee      	b.n	800a510 <__libc_init_array+0xc>
 800a532:	f855 3b04 	ldr.w	r3, [r5], #4
 800a536:	4798      	blx	r3
 800a538:	3601      	adds	r6, #1
 800a53a:	e7f2      	b.n	800a522 <__libc_init_array+0x1e>
 800a53c:	0800c3a4 	.word	0x0800c3a4
 800a540:	0800c3a4 	.word	0x0800c3a4
 800a544:	0800c3a4 	.word	0x0800c3a4
 800a548:	0800c3a8 	.word	0x0800c3a8

0800a54c <malloc>:
 800a54c:	4b02      	ldr	r3, [pc, #8]	; (800a558 <malloc+0xc>)
 800a54e:	4601      	mov	r1, r0
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	f000 b88b 	b.w	800a66c <_malloc_r>
 800a556:	bf00      	nop
 800a558:	240000c0 	.word	0x240000c0

0800a55c <free>:
 800a55c:	4b02      	ldr	r3, [pc, #8]	; (800a568 <free+0xc>)
 800a55e:	4601      	mov	r1, r0
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	f000 b833 	b.w	800a5cc <_free_r>
 800a566:	bf00      	nop
 800a568:	240000c0 	.word	0x240000c0

0800a56c <memcpy>:
 800a56c:	440a      	add	r2, r1
 800a56e:	4291      	cmp	r1, r2
 800a570:	f100 33ff 	add.w	r3, r0, #4294967295
 800a574:	d100      	bne.n	800a578 <memcpy+0xc>
 800a576:	4770      	bx	lr
 800a578:	b510      	push	{r4, lr}
 800a57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a582:	4291      	cmp	r1, r2
 800a584:	d1f9      	bne.n	800a57a <memcpy+0xe>
 800a586:	bd10      	pop	{r4, pc}

0800a588 <memmove>:
 800a588:	4288      	cmp	r0, r1
 800a58a:	b510      	push	{r4, lr}
 800a58c:	eb01 0402 	add.w	r4, r1, r2
 800a590:	d902      	bls.n	800a598 <memmove+0x10>
 800a592:	4284      	cmp	r4, r0
 800a594:	4623      	mov	r3, r4
 800a596:	d807      	bhi.n	800a5a8 <memmove+0x20>
 800a598:	1e43      	subs	r3, r0, #1
 800a59a:	42a1      	cmp	r1, r4
 800a59c:	d008      	beq.n	800a5b0 <memmove+0x28>
 800a59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5a6:	e7f8      	b.n	800a59a <memmove+0x12>
 800a5a8:	4402      	add	r2, r0
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	428a      	cmp	r2, r1
 800a5ae:	d100      	bne.n	800a5b2 <memmove+0x2a>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ba:	e7f7      	b.n	800a5ac <memmove+0x24>

0800a5bc <memset>:
 800a5bc:	4402      	add	r2, r0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d100      	bne.n	800a5c6 <memset+0xa>
 800a5c4:	4770      	bx	lr
 800a5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ca:	e7f9      	b.n	800a5c0 <memset+0x4>

0800a5cc <_free_r>:
 800a5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ce:	2900      	cmp	r1, #0
 800a5d0:	d048      	beq.n	800a664 <_free_r+0x98>
 800a5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5d6:	9001      	str	r0, [sp, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f1a1 0404 	sub.w	r4, r1, #4
 800a5de:	bfb8      	it	lt
 800a5e0:	18e4      	addlt	r4, r4, r3
 800a5e2:	f000 fedb 	bl	800b39c <__malloc_lock>
 800a5e6:	4a20      	ldr	r2, [pc, #128]	; (800a668 <_free_r+0x9c>)
 800a5e8:	9801      	ldr	r0, [sp, #4]
 800a5ea:	6813      	ldr	r3, [r2, #0]
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	b933      	cbnz	r3, 800a5fe <_free_r+0x32>
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	6014      	str	r4, [r2, #0]
 800a5f4:	b003      	add	sp, #12
 800a5f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5fa:	f000 bed5 	b.w	800b3a8 <__malloc_unlock>
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	d90b      	bls.n	800a61a <_free_r+0x4e>
 800a602:	6821      	ldr	r1, [r4, #0]
 800a604:	1862      	adds	r2, r4, r1
 800a606:	4293      	cmp	r3, r2
 800a608:	bf04      	itt	eq
 800a60a:	681a      	ldreq	r2, [r3, #0]
 800a60c:	685b      	ldreq	r3, [r3, #4]
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	bf04      	itt	eq
 800a612:	1852      	addeq	r2, r2, r1
 800a614:	6022      	streq	r2, [r4, #0]
 800a616:	602c      	str	r4, [r5, #0]
 800a618:	e7ec      	b.n	800a5f4 <_free_r+0x28>
 800a61a:	461a      	mov	r2, r3
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	b10b      	cbz	r3, 800a624 <_free_r+0x58>
 800a620:	42a3      	cmp	r3, r4
 800a622:	d9fa      	bls.n	800a61a <_free_r+0x4e>
 800a624:	6811      	ldr	r1, [r2, #0]
 800a626:	1855      	adds	r5, r2, r1
 800a628:	42a5      	cmp	r5, r4
 800a62a:	d10b      	bne.n	800a644 <_free_r+0x78>
 800a62c:	6824      	ldr	r4, [r4, #0]
 800a62e:	4421      	add	r1, r4
 800a630:	1854      	adds	r4, r2, r1
 800a632:	42a3      	cmp	r3, r4
 800a634:	6011      	str	r1, [r2, #0]
 800a636:	d1dd      	bne.n	800a5f4 <_free_r+0x28>
 800a638:	681c      	ldr	r4, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	6053      	str	r3, [r2, #4]
 800a63e:	4421      	add	r1, r4
 800a640:	6011      	str	r1, [r2, #0]
 800a642:	e7d7      	b.n	800a5f4 <_free_r+0x28>
 800a644:	d902      	bls.n	800a64c <_free_r+0x80>
 800a646:	230c      	movs	r3, #12
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	e7d3      	b.n	800a5f4 <_free_r+0x28>
 800a64c:	6825      	ldr	r5, [r4, #0]
 800a64e:	1961      	adds	r1, r4, r5
 800a650:	428b      	cmp	r3, r1
 800a652:	bf04      	itt	eq
 800a654:	6819      	ldreq	r1, [r3, #0]
 800a656:	685b      	ldreq	r3, [r3, #4]
 800a658:	6063      	str	r3, [r4, #4]
 800a65a:	bf04      	itt	eq
 800a65c:	1949      	addeq	r1, r1, r5
 800a65e:	6021      	streq	r1, [r4, #0]
 800a660:	6054      	str	r4, [r2, #4]
 800a662:	e7c7      	b.n	800a5f4 <_free_r+0x28>
 800a664:	b003      	add	sp, #12
 800a666:	bd30      	pop	{r4, r5, pc}
 800a668:	240004f4 	.word	0x240004f4

0800a66c <_malloc_r>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	1ccd      	adds	r5, r1, #3
 800a670:	f025 0503 	bic.w	r5, r5, #3
 800a674:	3508      	adds	r5, #8
 800a676:	2d0c      	cmp	r5, #12
 800a678:	bf38      	it	cc
 800a67a:	250c      	movcc	r5, #12
 800a67c:	2d00      	cmp	r5, #0
 800a67e:	4606      	mov	r6, r0
 800a680:	db01      	blt.n	800a686 <_malloc_r+0x1a>
 800a682:	42a9      	cmp	r1, r5
 800a684:	d903      	bls.n	800a68e <_malloc_r+0x22>
 800a686:	230c      	movs	r3, #12
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	2000      	movs	r0, #0
 800a68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68e:	f000 fe85 	bl	800b39c <__malloc_lock>
 800a692:	4921      	ldr	r1, [pc, #132]	; (800a718 <_malloc_r+0xac>)
 800a694:	680a      	ldr	r2, [r1, #0]
 800a696:	4614      	mov	r4, r2
 800a698:	b99c      	cbnz	r4, 800a6c2 <_malloc_r+0x56>
 800a69a:	4f20      	ldr	r7, [pc, #128]	; (800a71c <_malloc_r+0xb0>)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	b923      	cbnz	r3, 800a6aa <_malloc_r+0x3e>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f000 fb2a 	bl	800acfc <_sbrk_r>
 800a6a8:	6038      	str	r0, [r7, #0]
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 fb25 	bl	800acfc <_sbrk_r>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	d123      	bne.n	800a6fe <_malloc_r+0x92>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	6033      	str	r3, [r6, #0]
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f000 fe74 	bl	800b3a8 <__malloc_unlock>
 800a6c0:	e7e3      	b.n	800a68a <_malloc_r+0x1e>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	1b5b      	subs	r3, r3, r5
 800a6c6:	d417      	bmi.n	800a6f8 <_malloc_r+0x8c>
 800a6c8:	2b0b      	cmp	r3, #11
 800a6ca:	d903      	bls.n	800a6d4 <_malloc_r+0x68>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	441c      	add	r4, r3
 800a6d0:	6025      	str	r5, [r4, #0]
 800a6d2:	e004      	b.n	800a6de <_malloc_r+0x72>
 800a6d4:	6863      	ldr	r3, [r4, #4]
 800a6d6:	42a2      	cmp	r2, r4
 800a6d8:	bf0c      	ite	eq
 800a6da:	600b      	streq	r3, [r1, #0]
 800a6dc:	6053      	strne	r3, [r2, #4]
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f000 fe62 	bl	800b3a8 <__malloc_unlock>
 800a6e4:	f104 000b 	add.w	r0, r4, #11
 800a6e8:	1d23      	adds	r3, r4, #4
 800a6ea:	f020 0007 	bic.w	r0, r0, #7
 800a6ee:	1ac2      	subs	r2, r0, r3
 800a6f0:	d0cc      	beq.n	800a68c <_malloc_r+0x20>
 800a6f2:	1a1b      	subs	r3, r3, r0
 800a6f4:	50a3      	str	r3, [r4, r2]
 800a6f6:	e7c9      	b.n	800a68c <_malloc_r+0x20>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	6864      	ldr	r4, [r4, #4]
 800a6fc:	e7cc      	b.n	800a698 <_malloc_r+0x2c>
 800a6fe:	1cc4      	adds	r4, r0, #3
 800a700:	f024 0403 	bic.w	r4, r4, #3
 800a704:	42a0      	cmp	r0, r4
 800a706:	d0e3      	beq.n	800a6d0 <_malloc_r+0x64>
 800a708:	1a21      	subs	r1, r4, r0
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 faf6 	bl	800acfc <_sbrk_r>
 800a710:	3001      	adds	r0, #1
 800a712:	d1dd      	bne.n	800a6d0 <_malloc_r+0x64>
 800a714:	e7cf      	b.n	800a6b6 <_malloc_r+0x4a>
 800a716:	bf00      	nop
 800a718:	240004f4 	.word	0x240004f4
 800a71c:	240004f8 	.word	0x240004f8

0800a720 <__sfputc_r>:
 800a720:	6893      	ldr	r3, [r2, #8]
 800a722:	3b01      	subs	r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	b410      	push	{r4}
 800a728:	6093      	str	r3, [r2, #8]
 800a72a:	da08      	bge.n	800a73e <__sfputc_r+0x1e>
 800a72c:	6994      	ldr	r4, [r2, #24]
 800a72e:	42a3      	cmp	r3, r4
 800a730:	db01      	blt.n	800a736 <__sfputc_r+0x16>
 800a732:	290a      	cmp	r1, #10
 800a734:	d103      	bne.n	800a73e <__sfputc_r+0x1e>
 800a736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a73a:	f000 bb49 	b.w	800add0 <__swbuf_r>
 800a73e:	6813      	ldr	r3, [r2, #0]
 800a740:	1c58      	adds	r0, r3, #1
 800a742:	6010      	str	r0, [r2, #0]
 800a744:	7019      	strb	r1, [r3, #0]
 800a746:	4608      	mov	r0, r1
 800a748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <__sfputs_r>:
 800a74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a750:	4606      	mov	r6, r0
 800a752:	460f      	mov	r7, r1
 800a754:	4614      	mov	r4, r2
 800a756:	18d5      	adds	r5, r2, r3
 800a758:	42ac      	cmp	r4, r5
 800a75a:	d101      	bne.n	800a760 <__sfputs_r+0x12>
 800a75c:	2000      	movs	r0, #0
 800a75e:	e007      	b.n	800a770 <__sfputs_r+0x22>
 800a760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a764:	463a      	mov	r2, r7
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ffda 	bl	800a720 <__sfputc_r>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d1f3      	bne.n	800a758 <__sfputs_r+0xa>
 800a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a774 <_vfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	460d      	mov	r5, r1
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4614      	mov	r4, r2
 800a77e:	4698      	mov	r8, r3
 800a780:	4606      	mov	r6, r0
 800a782:	b118      	cbz	r0, 800a78c <_vfiprintf_r+0x18>
 800a784:	6983      	ldr	r3, [r0, #24]
 800a786:	b90b      	cbnz	r3, 800a78c <_vfiprintf_r+0x18>
 800a788:	f000 fd04 	bl	800b194 <__sinit>
 800a78c:	4b89      	ldr	r3, [pc, #548]	; (800a9b4 <_vfiprintf_r+0x240>)
 800a78e:	429d      	cmp	r5, r3
 800a790:	d11b      	bne.n	800a7ca <_vfiprintf_r+0x56>
 800a792:	6875      	ldr	r5, [r6, #4]
 800a794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d405      	bmi.n	800a7a6 <_vfiprintf_r+0x32>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d402      	bmi.n	800a7a6 <_vfiprintf_r+0x32>
 800a7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a2:	f000 fd95 	bl	800b2d0 <__retarget_lock_acquire_recursive>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	071b      	lsls	r3, r3, #28
 800a7aa:	d501      	bpl.n	800a7b0 <_vfiprintf_r+0x3c>
 800a7ac:	692b      	ldr	r3, [r5, #16]
 800a7ae:	b9eb      	cbnz	r3, 800a7ec <_vfiprintf_r+0x78>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f000 fb5e 	bl	800ae74 <__swsetup_r>
 800a7b8:	b1c0      	cbz	r0, 800a7ec <_vfiprintf_r+0x78>
 800a7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7bc:	07dc      	lsls	r4, r3, #31
 800a7be:	d50e      	bpl.n	800a7de <_vfiprintf_r+0x6a>
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	b01d      	add	sp, #116	; 0x74
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	4b7b      	ldr	r3, [pc, #492]	; (800a9b8 <_vfiprintf_r+0x244>)
 800a7cc:	429d      	cmp	r5, r3
 800a7ce:	d101      	bne.n	800a7d4 <_vfiprintf_r+0x60>
 800a7d0:	68b5      	ldr	r5, [r6, #8]
 800a7d2:	e7df      	b.n	800a794 <_vfiprintf_r+0x20>
 800a7d4:	4b79      	ldr	r3, [pc, #484]	; (800a9bc <_vfiprintf_r+0x248>)
 800a7d6:	429d      	cmp	r5, r3
 800a7d8:	bf08      	it	eq
 800a7da:	68f5      	ldreq	r5, [r6, #12]
 800a7dc:	e7da      	b.n	800a794 <_vfiprintf_r+0x20>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	0598      	lsls	r0, r3, #22
 800a7e2:	d4ed      	bmi.n	800a7c0 <_vfiprintf_r+0x4c>
 800a7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e6:	f000 fd74 	bl	800b2d2 <__retarget_lock_release_recursive>
 800a7ea:	e7e9      	b.n	800a7c0 <_vfiprintf_r+0x4c>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f0:	2320      	movs	r3, #32
 800a7f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7fa:	2330      	movs	r3, #48	; 0x30
 800a7fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9c0 <_vfiprintf_r+0x24c>
 800a800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a804:	f04f 0901 	mov.w	r9, #1
 800a808:	4623      	mov	r3, r4
 800a80a:	469a      	mov	sl, r3
 800a80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a810:	b10a      	cbz	r2, 800a816 <_vfiprintf_r+0xa2>
 800a812:	2a25      	cmp	r2, #37	; 0x25
 800a814:	d1f9      	bne.n	800a80a <_vfiprintf_r+0x96>
 800a816:	ebba 0b04 	subs.w	fp, sl, r4
 800a81a:	d00b      	beq.n	800a834 <_vfiprintf_r+0xc0>
 800a81c:	465b      	mov	r3, fp
 800a81e:	4622      	mov	r2, r4
 800a820:	4629      	mov	r1, r5
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff93 	bl	800a74e <__sfputs_r>
 800a828:	3001      	adds	r0, #1
 800a82a:	f000 80aa 	beq.w	800a982 <_vfiprintf_r+0x20e>
 800a82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a830:	445a      	add	r2, fp
 800a832:	9209      	str	r2, [sp, #36]	; 0x24
 800a834:	f89a 3000 	ldrb.w	r3, [sl]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80a2 	beq.w	800a982 <_vfiprintf_r+0x20e>
 800a83e:	2300      	movs	r3, #0
 800a840:	f04f 32ff 	mov.w	r2, #4294967295
 800a844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a848:	f10a 0a01 	add.w	sl, sl, #1
 800a84c:	9304      	str	r3, [sp, #16]
 800a84e:	9307      	str	r3, [sp, #28]
 800a850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a854:	931a      	str	r3, [sp, #104]	; 0x68
 800a856:	4654      	mov	r4, sl
 800a858:	2205      	movs	r2, #5
 800a85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85e:	4858      	ldr	r0, [pc, #352]	; (800a9c0 <_vfiprintf_r+0x24c>)
 800a860:	f7f5 fd4e 	bl	8000300 <memchr>
 800a864:	9a04      	ldr	r2, [sp, #16]
 800a866:	b9d8      	cbnz	r0, 800a8a0 <_vfiprintf_r+0x12c>
 800a868:	06d1      	lsls	r1, r2, #27
 800a86a:	bf44      	itt	mi
 800a86c:	2320      	movmi	r3, #32
 800a86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a872:	0713      	lsls	r3, r2, #28
 800a874:	bf44      	itt	mi
 800a876:	232b      	movmi	r3, #43	; 0x2b
 800a878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a87c:	f89a 3000 	ldrb.w	r3, [sl]
 800a880:	2b2a      	cmp	r3, #42	; 0x2a
 800a882:	d015      	beq.n	800a8b0 <_vfiprintf_r+0x13c>
 800a884:	9a07      	ldr	r2, [sp, #28]
 800a886:	4654      	mov	r4, sl
 800a888:	2000      	movs	r0, #0
 800a88a:	f04f 0c0a 	mov.w	ip, #10
 800a88e:	4621      	mov	r1, r4
 800a890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a894:	3b30      	subs	r3, #48	; 0x30
 800a896:	2b09      	cmp	r3, #9
 800a898:	d94e      	bls.n	800a938 <_vfiprintf_r+0x1c4>
 800a89a:	b1b0      	cbz	r0, 800a8ca <_vfiprintf_r+0x156>
 800a89c:	9207      	str	r2, [sp, #28]
 800a89e:	e014      	b.n	800a8ca <_vfiprintf_r+0x156>
 800a8a0:	eba0 0308 	sub.w	r3, r0, r8
 800a8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	46a2      	mov	sl, r4
 800a8ae:	e7d2      	b.n	800a856 <_vfiprintf_r+0xe2>
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	1d19      	adds	r1, r3, #4
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	9103      	str	r1, [sp, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bfbb      	ittet	lt
 800a8bc:	425b      	neglt	r3, r3
 800a8be:	f042 0202 	orrlt.w	r2, r2, #2
 800a8c2:	9307      	strge	r3, [sp, #28]
 800a8c4:	9307      	strlt	r3, [sp, #28]
 800a8c6:	bfb8      	it	lt
 800a8c8:	9204      	strlt	r2, [sp, #16]
 800a8ca:	7823      	ldrb	r3, [r4, #0]
 800a8cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ce:	d10c      	bne.n	800a8ea <_vfiprintf_r+0x176>
 800a8d0:	7863      	ldrb	r3, [r4, #1]
 800a8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d4:	d135      	bne.n	800a942 <_vfiprintf_r+0x1ce>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	1d1a      	adds	r2, r3, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	9203      	str	r2, [sp, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfb8      	it	lt
 800a8e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8e6:	3402      	adds	r4, #2
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9d0 <_vfiprintf_r+0x25c>
 800a8ee:	7821      	ldrb	r1, [r4, #0]
 800a8f0:	2203      	movs	r2, #3
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	f7f5 fd04 	bl	8000300 <memchr>
 800a8f8:	b140      	cbz	r0, 800a90c <_vfiprintf_r+0x198>
 800a8fa:	2340      	movs	r3, #64	; 0x40
 800a8fc:	eba0 000a 	sub.w	r0, r0, sl
 800a900:	fa03 f000 	lsl.w	r0, r3, r0
 800a904:	9b04      	ldr	r3, [sp, #16]
 800a906:	4303      	orrs	r3, r0
 800a908:	3401      	adds	r4, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a910:	482c      	ldr	r0, [pc, #176]	; (800a9c4 <_vfiprintf_r+0x250>)
 800a912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a916:	2206      	movs	r2, #6
 800a918:	f7f5 fcf2 	bl	8000300 <memchr>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d03f      	beq.n	800a9a0 <_vfiprintf_r+0x22c>
 800a920:	4b29      	ldr	r3, [pc, #164]	; (800a9c8 <_vfiprintf_r+0x254>)
 800a922:	bb1b      	cbnz	r3, 800a96c <_vfiprintf_r+0x1f8>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	3307      	adds	r3, #7
 800a928:	f023 0307 	bic.w	r3, r3, #7
 800a92c:	3308      	adds	r3, #8
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	443b      	add	r3, r7
 800a934:	9309      	str	r3, [sp, #36]	; 0x24
 800a936:	e767      	b.n	800a808 <_vfiprintf_r+0x94>
 800a938:	fb0c 3202 	mla	r2, ip, r2, r3
 800a93c:	460c      	mov	r4, r1
 800a93e:	2001      	movs	r0, #1
 800a940:	e7a5      	b.n	800a88e <_vfiprintf_r+0x11a>
 800a942:	2300      	movs	r3, #0
 800a944:	3401      	adds	r4, #1
 800a946:	9305      	str	r3, [sp, #20]
 800a948:	4619      	mov	r1, r3
 800a94a:	f04f 0c0a 	mov.w	ip, #10
 800a94e:	4620      	mov	r0, r4
 800a950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a954:	3a30      	subs	r2, #48	; 0x30
 800a956:	2a09      	cmp	r2, #9
 800a958:	d903      	bls.n	800a962 <_vfiprintf_r+0x1ee>
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0c5      	beq.n	800a8ea <_vfiprintf_r+0x176>
 800a95e:	9105      	str	r1, [sp, #20]
 800a960:	e7c3      	b.n	800a8ea <_vfiprintf_r+0x176>
 800a962:	fb0c 2101 	mla	r1, ip, r1, r2
 800a966:	4604      	mov	r4, r0
 800a968:	2301      	movs	r3, #1
 800a96a:	e7f0      	b.n	800a94e <_vfiprintf_r+0x1da>
 800a96c:	ab03      	add	r3, sp, #12
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	462a      	mov	r2, r5
 800a972:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <_vfiprintf_r+0x258>)
 800a974:	a904      	add	r1, sp, #16
 800a976:	4630      	mov	r0, r6
 800a978:	f3af 8000 	nop.w
 800a97c:	4607      	mov	r7, r0
 800a97e:	1c78      	adds	r0, r7, #1
 800a980:	d1d6      	bne.n	800a930 <_vfiprintf_r+0x1bc>
 800a982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a984:	07d9      	lsls	r1, r3, #31
 800a986:	d405      	bmi.n	800a994 <_vfiprintf_r+0x220>
 800a988:	89ab      	ldrh	r3, [r5, #12]
 800a98a:	059a      	lsls	r2, r3, #22
 800a98c:	d402      	bmi.n	800a994 <_vfiprintf_r+0x220>
 800a98e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a990:	f000 fc9f 	bl	800b2d2 <__retarget_lock_release_recursive>
 800a994:	89ab      	ldrh	r3, [r5, #12]
 800a996:	065b      	lsls	r3, r3, #25
 800a998:	f53f af12 	bmi.w	800a7c0 <_vfiprintf_r+0x4c>
 800a99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a99e:	e711      	b.n	800a7c4 <_vfiprintf_r+0x50>
 800a9a0:	ab03      	add	r3, sp, #12
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <_vfiprintf_r+0x258>)
 800a9a8:	a904      	add	r1, sp, #16
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 f880 	bl	800aab0 <_printf_i>
 800a9b0:	e7e4      	b.n	800a97c <_vfiprintf_r+0x208>
 800a9b2:	bf00      	nop
 800a9b4:	0800c35c 	.word	0x0800c35c
 800a9b8:	0800c37c 	.word	0x0800c37c
 800a9bc:	0800c33c 	.word	0x0800c33c
 800a9c0:	0800c308 	.word	0x0800c308
 800a9c4:	0800c312 	.word	0x0800c312
 800a9c8:	00000000 	.word	0x00000000
 800a9cc:	0800a74f 	.word	0x0800a74f
 800a9d0:	0800c30e 	.word	0x0800c30e

0800a9d4 <_printf_common>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	4616      	mov	r6, r2
 800a9da:	4699      	mov	r9, r3
 800a9dc:	688a      	ldr	r2, [r1, #8]
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	bfb8      	it	lt
 800a9e8:	4613      	movlt	r3, r2
 800a9ea:	6033      	str	r3, [r6, #0]
 800a9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b10a      	cbz	r2, 800a9fa <_printf_common+0x26>
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	0699      	lsls	r1, r3, #26
 800a9fe:	bf42      	ittt	mi
 800aa00:	6833      	ldrmi	r3, [r6, #0]
 800aa02:	3302      	addmi	r3, #2
 800aa04:	6033      	strmi	r3, [r6, #0]
 800aa06:	6825      	ldr	r5, [r4, #0]
 800aa08:	f015 0506 	ands.w	r5, r5, #6
 800aa0c:	d106      	bne.n	800aa1c <_printf_common+0x48>
 800aa0e:	f104 0a19 	add.w	sl, r4, #25
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	6832      	ldr	r2, [r6, #0]
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	dc26      	bgt.n	800aa6a <_printf_common+0x96>
 800aa1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa20:	1e13      	subs	r3, r2, #0
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	bf18      	it	ne
 800aa26:	2301      	movne	r3, #1
 800aa28:	0692      	lsls	r2, r2, #26
 800aa2a:	d42b      	bmi.n	800aa84 <_printf_common+0xb0>
 800aa2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa30:	4649      	mov	r1, r9
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c0      	blx	r8
 800aa36:	3001      	adds	r0, #1
 800aa38:	d01e      	beq.n	800aa78 <_printf_common+0xa4>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	68e5      	ldr	r5, [r4, #12]
 800aa3e:	6832      	ldr	r2, [r6, #0]
 800aa40:	f003 0306 	and.w	r3, r3, #6
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	bf08      	it	eq
 800aa48:	1aad      	subeq	r5, r5, r2
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	6922      	ldr	r2, [r4, #16]
 800aa4e:	bf0c      	ite	eq
 800aa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa54:	2500      	movne	r5, #0
 800aa56:	4293      	cmp	r3, r2
 800aa58:	bfc4      	itt	gt
 800aa5a:	1a9b      	subgt	r3, r3, r2
 800aa5c:	18ed      	addgt	r5, r5, r3
 800aa5e:	2600      	movs	r6, #0
 800aa60:	341a      	adds	r4, #26
 800aa62:	42b5      	cmp	r5, r6
 800aa64:	d11a      	bne.n	800aa9c <_printf_common+0xc8>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e008      	b.n	800aa7c <_printf_common+0xa8>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4638      	mov	r0, r7
 800aa72:	47c0      	blx	r8
 800aa74:	3001      	adds	r0, #1
 800aa76:	d103      	bne.n	800aa80 <_printf_common+0xac>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa80:	3501      	adds	r5, #1
 800aa82:	e7c6      	b.n	800aa12 <_printf_common+0x3e>
 800aa84:	18e1      	adds	r1, r4, r3
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	2030      	movs	r0, #48	; 0x30
 800aa8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa8e:	4422      	add	r2, r4
 800aa90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa98:	3302      	adds	r3, #2
 800aa9a:	e7c7      	b.n	800aa2c <_printf_common+0x58>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d0e6      	beq.n	800aa78 <_printf_common+0xa4>
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7d9      	b.n	800aa62 <_printf_common+0x8e>
	...

0800aab0 <_printf_i>:
 800aab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	460c      	mov	r4, r1
 800aab6:	4691      	mov	r9, r2
 800aab8:	7e27      	ldrb	r7, [r4, #24]
 800aaba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aabc:	2f78      	cmp	r7, #120	; 0x78
 800aabe:	4680      	mov	r8, r0
 800aac0:	469a      	mov	sl, r3
 800aac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aac6:	d807      	bhi.n	800aad8 <_printf_i+0x28>
 800aac8:	2f62      	cmp	r7, #98	; 0x62
 800aaca:	d80a      	bhi.n	800aae2 <_printf_i+0x32>
 800aacc:	2f00      	cmp	r7, #0
 800aace:	f000 80d8 	beq.w	800ac82 <_printf_i+0x1d2>
 800aad2:	2f58      	cmp	r7, #88	; 0x58
 800aad4:	f000 80a3 	beq.w	800ac1e <_printf_i+0x16e>
 800aad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aae0:	e03a      	b.n	800ab58 <_printf_i+0xa8>
 800aae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aae6:	2b15      	cmp	r3, #21
 800aae8:	d8f6      	bhi.n	800aad8 <_printf_i+0x28>
 800aaea:	a001      	add	r0, pc, #4	; (adr r0, 800aaf0 <_printf_i+0x40>)
 800aaec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800aad9 	.word	0x0800aad9
 800aafc:	0800aad9 	.word	0x0800aad9
 800ab00:	0800aad9 	.word	0x0800aad9
 800ab04:	0800aad9 	.word	0x0800aad9
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800aad9 	.word	0x0800aad9
 800ab10:	0800aad9 	.word	0x0800aad9
 800ab14:	0800aad9 	.word	0x0800aad9
 800ab18:	0800aad9 	.word	0x0800aad9
 800ab1c:	0800ac69 	.word	0x0800ac69
 800ab20:	0800ab8d 	.word	0x0800ab8d
 800ab24:	0800ac4b 	.word	0x0800ac4b
 800ab28:	0800aad9 	.word	0x0800aad9
 800ab2c:	0800aad9 	.word	0x0800aad9
 800ab30:	0800ac8b 	.word	0x0800ac8b
 800ab34:	0800aad9 	.word	0x0800aad9
 800ab38:	0800ab8d 	.word	0x0800ab8d
 800ab3c:	0800aad9 	.word	0x0800aad9
 800ab40:	0800aad9 	.word	0x0800aad9
 800ab44:	0800ac53 	.word	0x0800ac53
 800ab48:	680b      	ldr	r3, [r1, #0]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	600a      	str	r2, [r1, #0]
 800ab50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e0a3      	b.n	800aca4 <_printf_i+0x1f4>
 800ab5c:	6825      	ldr	r5, [r4, #0]
 800ab5e:	6808      	ldr	r0, [r1, #0]
 800ab60:	062e      	lsls	r6, r5, #24
 800ab62:	f100 0304 	add.w	r3, r0, #4
 800ab66:	d50a      	bpl.n	800ab7e <_printf_i+0xce>
 800ab68:	6805      	ldr	r5, [r0, #0]
 800ab6a:	600b      	str	r3, [r1, #0]
 800ab6c:	2d00      	cmp	r5, #0
 800ab6e:	da03      	bge.n	800ab78 <_printf_i+0xc8>
 800ab70:	232d      	movs	r3, #45	; 0x2d
 800ab72:	426d      	negs	r5, r5
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	485e      	ldr	r0, [pc, #376]	; (800acf4 <_printf_i+0x244>)
 800ab7a:	230a      	movs	r3, #10
 800ab7c:	e019      	b.n	800abb2 <_printf_i+0x102>
 800ab7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab82:	6805      	ldr	r5, [r0, #0]
 800ab84:	600b      	str	r3, [r1, #0]
 800ab86:	bf18      	it	ne
 800ab88:	b22d      	sxthne	r5, r5
 800ab8a:	e7ef      	b.n	800ab6c <_printf_i+0xbc>
 800ab8c:	680b      	ldr	r3, [r1, #0]
 800ab8e:	6825      	ldr	r5, [r4, #0]
 800ab90:	1d18      	adds	r0, r3, #4
 800ab92:	6008      	str	r0, [r1, #0]
 800ab94:	0628      	lsls	r0, r5, #24
 800ab96:	d501      	bpl.n	800ab9c <_printf_i+0xec>
 800ab98:	681d      	ldr	r5, [r3, #0]
 800ab9a:	e002      	b.n	800aba2 <_printf_i+0xf2>
 800ab9c:	0669      	lsls	r1, r5, #25
 800ab9e:	d5fb      	bpl.n	800ab98 <_printf_i+0xe8>
 800aba0:	881d      	ldrh	r5, [r3, #0]
 800aba2:	4854      	ldr	r0, [pc, #336]	; (800acf4 <_printf_i+0x244>)
 800aba4:	2f6f      	cmp	r7, #111	; 0x6f
 800aba6:	bf0c      	ite	eq
 800aba8:	2308      	moveq	r3, #8
 800abaa:	230a      	movne	r3, #10
 800abac:	2100      	movs	r1, #0
 800abae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abb2:	6866      	ldr	r6, [r4, #4]
 800abb4:	60a6      	str	r6, [r4, #8]
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	bfa2      	ittt	ge
 800abba:	6821      	ldrge	r1, [r4, #0]
 800abbc:	f021 0104 	bicge.w	r1, r1, #4
 800abc0:	6021      	strge	r1, [r4, #0]
 800abc2:	b90d      	cbnz	r5, 800abc8 <_printf_i+0x118>
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	d04d      	beq.n	800ac64 <_printf_i+0x1b4>
 800abc8:	4616      	mov	r6, r2
 800abca:	fbb5 f1f3 	udiv	r1, r5, r3
 800abce:	fb03 5711 	mls	r7, r3, r1, r5
 800abd2:	5dc7      	ldrb	r7, [r0, r7]
 800abd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abd8:	462f      	mov	r7, r5
 800abda:	42bb      	cmp	r3, r7
 800abdc:	460d      	mov	r5, r1
 800abde:	d9f4      	bls.n	800abca <_printf_i+0x11a>
 800abe0:	2b08      	cmp	r3, #8
 800abe2:	d10b      	bne.n	800abfc <_printf_i+0x14c>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	07df      	lsls	r7, r3, #31
 800abe8:	d508      	bpl.n	800abfc <_printf_i+0x14c>
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	6861      	ldr	r1, [r4, #4]
 800abee:	4299      	cmp	r1, r3
 800abf0:	bfde      	ittt	le
 800abf2:	2330      	movle	r3, #48	; 0x30
 800abf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abfc:	1b92      	subs	r2, r2, r6
 800abfe:	6122      	str	r2, [r4, #16]
 800ac00:	f8cd a000 	str.w	sl, [sp]
 800ac04:	464b      	mov	r3, r9
 800ac06:	aa03      	add	r2, sp, #12
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	f7ff fee2 	bl	800a9d4 <_printf_common>
 800ac10:	3001      	adds	r0, #1
 800ac12:	d14c      	bne.n	800acae <_printf_i+0x1fe>
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	b004      	add	sp, #16
 800ac1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1e:	4835      	ldr	r0, [pc, #212]	; (800acf4 <_printf_i+0x244>)
 800ac20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	680e      	ldr	r6, [r1, #0]
 800ac28:	061f      	lsls	r7, r3, #24
 800ac2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac2e:	600e      	str	r6, [r1, #0]
 800ac30:	d514      	bpl.n	800ac5c <_printf_i+0x1ac>
 800ac32:	07d9      	lsls	r1, r3, #31
 800ac34:	bf44      	itt	mi
 800ac36:	f043 0320 	orrmi.w	r3, r3, #32
 800ac3a:	6023      	strmi	r3, [r4, #0]
 800ac3c:	b91d      	cbnz	r5, 800ac46 <_printf_i+0x196>
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	f023 0320 	bic.w	r3, r3, #32
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	2310      	movs	r3, #16
 800ac48:	e7b0      	b.n	800abac <_printf_i+0xfc>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	f043 0320 	orr.w	r3, r3, #32
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	2378      	movs	r3, #120	; 0x78
 800ac54:	4828      	ldr	r0, [pc, #160]	; (800acf8 <_printf_i+0x248>)
 800ac56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac5a:	e7e3      	b.n	800ac24 <_printf_i+0x174>
 800ac5c:	065e      	lsls	r6, r3, #25
 800ac5e:	bf48      	it	mi
 800ac60:	b2ad      	uxthmi	r5, r5
 800ac62:	e7e6      	b.n	800ac32 <_printf_i+0x182>
 800ac64:	4616      	mov	r6, r2
 800ac66:	e7bb      	b.n	800abe0 <_printf_i+0x130>
 800ac68:	680b      	ldr	r3, [r1, #0]
 800ac6a:	6826      	ldr	r6, [r4, #0]
 800ac6c:	6960      	ldr	r0, [r4, #20]
 800ac6e:	1d1d      	adds	r5, r3, #4
 800ac70:	600d      	str	r5, [r1, #0]
 800ac72:	0635      	lsls	r5, r6, #24
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	d501      	bpl.n	800ac7c <_printf_i+0x1cc>
 800ac78:	6018      	str	r0, [r3, #0]
 800ac7a:	e002      	b.n	800ac82 <_printf_i+0x1d2>
 800ac7c:	0671      	lsls	r1, r6, #25
 800ac7e:	d5fb      	bpl.n	800ac78 <_printf_i+0x1c8>
 800ac80:	8018      	strh	r0, [r3, #0]
 800ac82:	2300      	movs	r3, #0
 800ac84:	6123      	str	r3, [r4, #16]
 800ac86:	4616      	mov	r6, r2
 800ac88:	e7ba      	b.n	800ac00 <_printf_i+0x150>
 800ac8a:	680b      	ldr	r3, [r1, #0]
 800ac8c:	1d1a      	adds	r2, r3, #4
 800ac8e:	600a      	str	r2, [r1, #0]
 800ac90:	681e      	ldr	r6, [r3, #0]
 800ac92:	6862      	ldr	r2, [r4, #4]
 800ac94:	2100      	movs	r1, #0
 800ac96:	4630      	mov	r0, r6
 800ac98:	f7f5 fb32 	bl	8000300 <memchr>
 800ac9c:	b108      	cbz	r0, 800aca2 <_printf_i+0x1f2>
 800ac9e:	1b80      	subs	r0, r0, r6
 800aca0:	6060      	str	r0, [r4, #4]
 800aca2:	6863      	ldr	r3, [r4, #4]
 800aca4:	6123      	str	r3, [r4, #16]
 800aca6:	2300      	movs	r3, #0
 800aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acac:	e7a8      	b.n	800ac00 <_printf_i+0x150>
 800acae:	6923      	ldr	r3, [r4, #16]
 800acb0:	4632      	mov	r2, r6
 800acb2:	4649      	mov	r1, r9
 800acb4:	4640      	mov	r0, r8
 800acb6:	47d0      	blx	sl
 800acb8:	3001      	adds	r0, #1
 800acba:	d0ab      	beq.n	800ac14 <_printf_i+0x164>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	079b      	lsls	r3, r3, #30
 800acc0:	d413      	bmi.n	800acea <_printf_i+0x23a>
 800acc2:	68e0      	ldr	r0, [r4, #12]
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	4298      	cmp	r0, r3
 800acc8:	bfb8      	it	lt
 800acca:	4618      	movlt	r0, r3
 800accc:	e7a4      	b.n	800ac18 <_printf_i+0x168>
 800acce:	2301      	movs	r3, #1
 800acd0:	4632      	mov	r2, r6
 800acd2:	4649      	mov	r1, r9
 800acd4:	4640      	mov	r0, r8
 800acd6:	47d0      	blx	sl
 800acd8:	3001      	adds	r0, #1
 800acda:	d09b      	beq.n	800ac14 <_printf_i+0x164>
 800acdc:	3501      	adds	r5, #1
 800acde:	68e3      	ldr	r3, [r4, #12]
 800ace0:	9903      	ldr	r1, [sp, #12]
 800ace2:	1a5b      	subs	r3, r3, r1
 800ace4:	42ab      	cmp	r3, r5
 800ace6:	dcf2      	bgt.n	800acce <_printf_i+0x21e>
 800ace8:	e7eb      	b.n	800acc2 <_printf_i+0x212>
 800acea:	2500      	movs	r5, #0
 800acec:	f104 0619 	add.w	r6, r4, #25
 800acf0:	e7f5      	b.n	800acde <_printf_i+0x22e>
 800acf2:	bf00      	nop
 800acf4:	0800c319 	.word	0x0800c319
 800acf8:	0800c32a 	.word	0x0800c32a

0800acfc <_sbrk_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d06      	ldr	r5, [pc, #24]	; (800ad18 <_sbrk_r+0x1c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f6 fc1a 	bl	8001540 <_sbrk>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_sbrk_r+0x1a>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_sbrk_r+0x1a>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	24000b54 	.word	0x24000b54

0800ad1c <sniprintf>:
 800ad1c:	b40c      	push	{r2, r3}
 800ad1e:	b530      	push	{r4, r5, lr}
 800ad20:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <sniprintf+0x64>)
 800ad22:	1e0c      	subs	r4, r1, #0
 800ad24:	681d      	ldr	r5, [r3, #0]
 800ad26:	b09d      	sub	sp, #116	; 0x74
 800ad28:	da08      	bge.n	800ad3c <sniprintf+0x20>
 800ad2a:	238b      	movs	r3, #139	; 0x8b
 800ad2c:	602b      	str	r3, [r5, #0]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	b01d      	add	sp, #116	; 0x74
 800ad34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad38:	b002      	add	sp, #8
 800ad3a:	4770      	bx	lr
 800ad3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad44:	bf14      	ite	ne
 800ad46:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad4a:	4623      	moveq	r3, r4
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	9307      	str	r3, [sp, #28]
 800ad50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad54:	9002      	str	r0, [sp, #8]
 800ad56:	9006      	str	r0, [sp, #24]
 800ad58:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad5e:	ab21      	add	r3, sp, #132	; 0x84
 800ad60:	a902      	add	r1, sp, #8
 800ad62:	4628      	mov	r0, r5
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	f000 fba7 	bl	800b4b8 <_svfiprintf_r>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	bfbc      	itt	lt
 800ad6e:	238b      	movlt	r3, #139	; 0x8b
 800ad70:	602b      	strlt	r3, [r5, #0]
 800ad72:	2c00      	cmp	r4, #0
 800ad74:	d0dd      	beq.n	800ad32 <sniprintf+0x16>
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e7d9      	b.n	800ad32 <sniprintf+0x16>
 800ad7e:	bf00      	nop
 800ad80:	240000c0 	.word	0x240000c0

0800ad84 <strncmp>:
 800ad84:	b510      	push	{r4, lr}
 800ad86:	b16a      	cbz	r2, 800ada4 <strncmp+0x20>
 800ad88:	3901      	subs	r1, #1
 800ad8a:	1884      	adds	r4, r0, r2
 800ad8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d103      	bne.n	800ada0 <strncmp+0x1c>
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d001      	beq.n	800ada0 <strncmp+0x1c>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f5      	bne.n	800ad8c <strncmp+0x8>
 800ada0:	1a98      	subs	r0, r3, r2
 800ada2:	bd10      	pop	{r4, pc}
 800ada4:	4610      	mov	r0, r2
 800ada6:	e7fc      	b.n	800ada2 <strncmp+0x1e>

0800ada8 <strncpy>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	3901      	subs	r1, #1
 800adac:	4603      	mov	r3, r0
 800adae:	b132      	cbz	r2, 800adbe <strncpy+0x16>
 800adb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800adb4:	f803 4b01 	strb.w	r4, [r3], #1
 800adb8:	3a01      	subs	r2, #1
 800adba:	2c00      	cmp	r4, #0
 800adbc:	d1f7      	bne.n	800adae <strncpy+0x6>
 800adbe:	441a      	add	r2, r3
 800adc0:	2100      	movs	r1, #0
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d100      	bne.n	800adc8 <strncpy+0x20>
 800adc6:	bd10      	pop	{r4, pc}
 800adc8:	f803 1b01 	strb.w	r1, [r3], #1
 800adcc:	e7f9      	b.n	800adc2 <strncpy+0x1a>
	...

0800add0 <__swbuf_r>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	460e      	mov	r6, r1
 800add4:	4614      	mov	r4, r2
 800add6:	4605      	mov	r5, r0
 800add8:	b118      	cbz	r0, 800ade2 <__swbuf_r+0x12>
 800adda:	6983      	ldr	r3, [r0, #24]
 800addc:	b90b      	cbnz	r3, 800ade2 <__swbuf_r+0x12>
 800adde:	f000 f9d9 	bl	800b194 <__sinit>
 800ade2:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <__swbuf_r+0x98>)
 800ade4:	429c      	cmp	r4, r3
 800ade6:	d12b      	bne.n	800ae40 <__swbuf_r+0x70>
 800ade8:	686c      	ldr	r4, [r5, #4]
 800adea:	69a3      	ldr	r3, [r4, #24]
 800adec:	60a3      	str	r3, [r4, #8]
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	071a      	lsls	r2, r3, #28
 800adf2:	d52f      	bpl.n	800ae54 <__swbuf_r+0x84>
 800adf4:	6923      	ldr	r3, [r4, #16]
 800adf6:	b36b      	cbz	r3, 800ae54 <__swbuf_r+0x84>
 800adf8:	6923      	ldr	r3, [r4, #16]
 800adfa:	6820      	ldr	r0, [r4, #0]
 800adfc:	1ac0      	subs	r0, r0, r3
 800adfe:	6963      	ldr	r3, [r4, #20]
 800ae00:	b2f6      	uxtb	r6, r6
 800ae02:	4283      	cmp	r3, r0
 800ae04:	4637      	mov	r7, r6
 800ae06:	dc04      	bgt.n	800ae12 <__swbuf_r+0x42>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f000 f92e 	bl	800b06c <_fflush_r>
 800ae10:	bb30      	cbnz	r0, 800ae60 <__swbuf_r+0x90>
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	60a3      	str	r3, [r4, #8]
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	6022      	str	r2, [r4, #0]
 800ae1e:	701e      	strb	r6, [r3, #0]
 800ae20:	6963      	ldr	r3, [r4, #20]
 800ae22:	3001      	adds	r0, #1
 800ae24:	4283      	cmp	r3, r0
 800ae26:	d004      	beq.n	800ae32 <__swbuf_r+0x62>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	07db      	lsls	r3, r3, #31
 800ae2c:	d506      	bpl.n	800ae3c <__swbuf_r+0x6c>
 800ae2e:	2e0a      	cmp	r6, #10
 800ae30:	d104      	bne.n	800ae3c <__swbuf_r+0x6c>
 800ae32:	4621      	mov	r1, r4
 800ae34:	4628      	mov	r0, r5
 800ae36:	f000 f919 	bl	800b06c <_fflush_r>
 800ae3a:	b988      	cbnz	r0, 800ae60 <__swbuf_r+0x90>
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae40:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <__swbuf_r+0x9c>)
 800ae42:	429c      	cmp	r4, r3
 800ae44:	d101      	bne.n	800ae4a <__swbuf_r+0x7a>
 800ae46:	68ac      	ldr	r4, [r5, #8]
 800ae48:	e7cf      	b.n	800adea <__swbuf_r+0x1a>
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <__swbuf_r+0xa0>)
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	bf08      	it	eq
 800ae50:	68ec      	ldreq	r4, [r5, #12]
 800ae52:	e7ca      	b.n	800adea <__swbuf_r+0x1a>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f80c 	bl	800ae74 <__swsetup_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0cb      	beq.n	800adf8 <__swbuf_r+0x28>
 800ae60:	f04f 37ff 	mov.w	r7, #4294967295
 800ae64:	e7ea      	b.n	800ae3c <__swbuf_r+0x6c>
 800ae66:	bf00      	nop
 800ae68:	0800c35c 	.word	0x0800c35c
 800ae6c:	0800c37c 	.word	0x0800c37c
 800ae70:	0800c33c 	.word	0x0800c33c

0800ae74 <__swsetup_r>:
 800ae74:	4b32      	ldr	r3, [pc, #200]	; (800af40 <__swsetup_r+0xcc>)
 800ae76:	b570      	push	{r4, r5, r6, lr}
 800ae78:	681d      	ldr	r5, [r3, #0]
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	b125      	cbz	r5, 800ae8a <__swsetup_r+0x16>
 800ae80:	69ab      	ldr	r3, [r5, #24]
 800ae82:	b913      	cbnz	r3, 800ae8a <__swsetup_r+0x16>
 800ae84:	4628      	mov	r0, r5
 800ae86:	f000 f985 	bl	800b194 <__sinit>
 800ae8a:	4b2e      	ldr	r3, [pc, #184]	; (800af44 <__swsetup_r+0xd0>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	d10f      	bne.n	800aeb0 <__swsetup_r+0x3c>
 800ae90:	686c      	ldr	r4, [r5, #4]
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae98:	0719      	lsls	r1, r3, #28
 800ae9a:	d42c      	bmi.n	800aef6 <__swsetup_r+0x82>
 800ae9c:	06dd      	lsls	r5, r3, #27
 800ae9e:	d411      	bmi.n	800aec4 <__swsetup_r+0x50>
 800aea0:	2309      	movs	r3, #9
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	e03e      	b.n	800af2e <__swsetup_r+0xba>
 800aeb0:	4b25      	ldr	r3, [pc, #148]	; (800af48 <__swsetup_r+0xd4>)
 800aeb2:	429c      	cmp	r4, r3
 800aeb4:	d101      	bne.n	800aeba <__swsetup_r+0x46>
 800aeb6:	68ac      	ldr	r4, [r5, #8]
 800aeb8:	e7eb      	b.n	800ae92 <__swsetup_r+0x1e>
 800aeba:	4b24      	ldr	r3, [pc, #144]	; (800af4c <__swsetup_r+0xd8>)
 800aebc:	429c      	cmp	r4, r3
 800aebe:	bf08      	it	eq
 800aec0:	68ec      	ldreq	r4, [r5, #12]
 800aec2:	e7e6      	b.n	800ae92 <__swsetup_r+0x1e>
 800aec4:	0758      	lsls	r0, r3, #29
 800aec6:	d512      	bpl.n	800aeee <__swsetup_r+0x7a>
 800aec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeca:	b141      	cbz	r1, 800aede <__swsetup_r+0x6a>
 800aecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed0:	4299      	cmp	r1, r3
 800aed2:	d002      	beq.n	800aeda <__swsetup_r+0x66>
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7ff fb79 	bl	800a5cc <_free_r>
 800aeda:	2300      	movs	r3, #0
 800aedc:	6363      	str	r3, [r4, #52]	; 0x34
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	2300      	movs	r3, #0
 800aee8:	6063      	str	r3, [r4, #4]
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	f043 0308 	orr.w	r3, r3, #8
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	b94b      	cbnz	r3, 800af0e <__swsetup_r+0x9a>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af04:	d003      	beq.n	800af0e <__swsetup_r+0x9a>
 800af06:	4621      	mov	r1, r4
 800af08:	4630      	mov	r0, r6
 800af0a:	f000 fa07 	bl	800b31c <__smakebuf_r>
 800af0e:	89a0      	ldrh	r0, [r4, #12]
 800af10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af14:	f010 0301 	ands.w	r3, r0, #1
 800af18:	d00a      	beq.n	800af30 <__swsetup_r+0xbc>
 800af1a:	2300      	movs	r3, #0
 800af1c:	60a3      	str	r3, [r4, #8]
 800af1e:	6963      	ldr	r3, [r4, #20]
 800af20:	425b      	negs	r3, r3
 800af22:	61a3      	str	r3, [r4, #24]
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	b943      	cbnz	r3, 800af3a <__swsetup_r+0xc6>
 800af28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af2c:	d1ba      	bne.n	800aea4 <__swsetup_r+0x30>
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	0781      	lsls	r1, r0, #30
 800af32:	bf58      	it	pl
 800af34:	6963      	ldrpl	r3, [r4, #20]
 800af36:	60a3      	str	r3, [r4, #8]
 800af38:	e7f4      	b.n	800af24 <__swsetup_r+0xb0>
 800af3a:	2000      	movs	r0, #0
 800af3c:	e7f7      	b.n	800af2e <__swsetup_r+0xba>
 800af3e:	bf00      	nop
 800af40:	240000c0 	.word	0x240000c0
 800af44:	0800c35c 	.word	0x0800c35c
 800af48:	0800c37c 	.word	0x0800c37c
 800af4c:	0800c33c 	.word	0x0800c33c

0800af50 <abort>:
 800af50:	b508      	push	{r3, lr}
 800af52:	2006      	movs	r0, #6
 800af54:	f000 fbd8 	bl	800b708 <raise>
 800af58:	2001      	movs	r0, #1
 800af5a:	f7f6 fa79 	bl	8001450 <_exit>
	...

0800af60 <__sflush_r>:
 800af60:	898a      	ldrh	r2, [r1, #12]
 800af62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af66:	4605      	mov	r5, r0
 800af68:	0710      	lsls	r0, r2, #28
 800af6a:	460c      	mov	r4, r1
 800af6c:	d458      	bmi.n	800b020 <__sflush_r+0xc0>
 800af6e:	684b      	ldr	r3, [r1, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	dc05      	bgt.n	800af80 <__sflush_r+0x20>
 800af74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	dc02      	bgt.n	800af80 <__sflush_r+0x20>
 800af7a:	2000      	movs	r0, #0
 800af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af82:	2e00      	cmp	r6, #0
 800af84:	d0f9      	beq.n	800af7a <__sflush_r+0x1a>
 800af86:	2300      	movs	r3, #0
 800af88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af8c:	682f      	ldr	r7, [r5, #0]
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	d032      	beq.n	800aff8 <__sflush_r+0x98>
 800af92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	075a      	lsls	r2, r3, #29
 800af98:	d505      	bpl.n	800afa6 <__sflush_r+0x46>
 800af9a:	6863      	ldr	r3, [r4, #4]
 800af9c:	1ac0      	subs	r0, r0, r3
 800af9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afa0:	b10b      	cbz	r3, 800afa6 <__sflush_r+0x46>
 800afa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afa4:	1ac0      	subs	r0, r0, r3
 800afa6:	2300      	movs	r3, #0
 800afa8:	4602      	mov	r2, r0
 800afaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afac:	6a21      	ldr	r1, [r4, #32]
 800afae:	4628      	mov	r0, r5
 800afb0:	47b0      	blx	r6
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	d106      	bne.n	800afc6 <__sflush_r+0x66>
 800afb8:	6829      	ldr	r1, [r5, #0]
 800afba:	291d      	cmp	r1, #29
 800afbc:	d82c      	bhi.n	800b018 <__sflush_r+0xb8>
 800afbe:	4a2a      	ldr	r2, [pc, #168]	; (800b068 <__sflush_r+0x108>)
 800afc0:	40ca      	lsrs	r2, r1
 800afc2:	07d6      	lsls	r6, r2, #31
 800afc4:	d528      	bpl.n	800b018 <__sflush_r+0xb8>
 800afc6:	2200      	movs	r2, #0
 800afc8:	6062      	str	r2, [r4, #4]
 800afca:	04d9      	lsls	r1, r3, #19
 800afcc:	6922      	ldr	r2, [r4, #16]
 800afce:	6022      	str	r2, [r4, #0]
 800afd0:	d504      	bpl.n	800afdc <__sflush_r+0x7c>
 800afd2:	1c42      	adds	r2, r0, #1
 800afd4:	d101      	bne.n	800afda <__sflush_r+0x7a>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	b903      	cbnz	r3, 800afdc <__sflush_r+0x7c>
 800afda:	6560      	str	r0, [r4, #84]	; 0x54
 800afdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afde:	602f      	str	r7, [r5, #0]
 800afe0:	2900      	cmp	r1, #0
 800afe2:	d0ca      	beq.n	800af7a <__sflush_r+0x1a>
 800afe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afe8:	4299      	cmp	r1, r3
 800afea:	d002      	beq.n	800aff2 <__sflush_r+0x92>
 800afec:	4628      	mov	r0, r5
 800afee:	f7ff faed 	bl	800a5cc <_free_r>
 800aff2:	2000      	movs	r0, #0
 800aff4:	6360      	str	r0, [r4, #52]	; 0x34
 800aff6:	e7c1      	b.n	800af7c <__sflush_r+0x1c>
 800aff8:	6a21      	ldr	r1, [r4, #32]
 800affa:	2301      	movs	r3, #1
 800affc:	4628      	mov	r0, r5
 800affe:	47b0      	blx	r6
 800b000:	1c41      	adds	r1, r0, #1
 800b002:	d1c7      	bne.n	800af94 <__sflush_r+0x34>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0c4      	beq.n	800af94 <__sflush_r+0x34>
 800b00a:	2b1d      	cmp	r3, #29
 800b00c:	d001      	beq.n	800b012 <__sflush_r+0xb2>
 800b00e:	2b16      	cmp	r3, #22
 800b010:	d101      	bne.n	800b016 <__sflush_r+0xb6>
 800b012:	602f      	str	r7, [r5, #0]
 800b014:	e7b1      	b.n	800af7a <__sflush_r+0x1a>
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	e7ad      	b.n	800af7c <__sflush_r+0x1c>
 800b020:	690f      	ldr	r7, [r1, #16]
 800b022:	2f00      	cmp	r7, #0
 800b024:	d0a9      	beq.n	800af7a <__sflush_r+0x1a>
 800b026:	0793      	lsls	r3, r2, #30
 800b028:	680e      	ldr	r6, [r1, #0]
 800b02a:	bf08      	it	eq
 800b02c:	694b      	ldreq	r3, [r1, #20]
 800b02e:	600f      	str	r7, [r1, #0]
 800b030:	bf18      	it	ne
 800b032:	2300      	movne	r3, #0
 800b034:	eba6 0807 	sub.w	r8, r6, r7
 800b038:	608b      	str	r3, [r1, #8]
 800b03a:	f1b8 0f00 	cmp.w	r8, #0
 800b03e:	dd9c      	ble.n	800af7a <__sflush_r+0x1a>
 800b040:	6a21      	ldr	r1, [r4, #32]
 800b042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b044:	4643      	mov	r3, r8
 800b046:	463a      	mov	r2, r7
 800b048:	4628      	mov	r0, r5
 800b04a:	47b0      	blx	r6
 800b04c:	2800      	cmp	r0, #0
 800b04e:	dc06      	bgt.n	800b05e <__sflush_r+0xfe>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	e78e      	b.n	800af7c <__sflush_r+0x1c>
 800b05e:	4407      	add	r7, r0
 800b060:	eba8 0800 	sub.w	r8, r8, r0
 800b064:	e7e9      	b.n	800b03a <__sflush_r+0xda>
 800b066:	bf00      	nop
 800b068:	20400001 	.word	0x20400001

0800b06c <_fflush_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	690b      	ldr	r3, [r1, #16]
 800b070:	4605      	mov	r5, r0
 800b072:	460c      	mov	r4, r1
 800b074:	b913      	cbnz	r3, 800b07c <_fflush_r+0x10>
 800b076:	2500      	movs	r5, #0
 800b078:	4628      	mov	r0, r5
 800b07a:	bd38      	pop	{r3, r4, r5, pc}
 800b07c:	b118      	cbz	r0, 800b086 <_fflush_r+0x1a>
 800b07e:	6983      	ldr	r3, [r0, #24]
 800b080:	b90b      	cbnz	r3, 800b086 <_fflush_r+0x1a>
 800b082:	f000 f887 	bl	800b194 <__sinit>
 800b086:	4b14      	ldr	r3, [pc, #80]	; (800b0d8 <_fflush_r+0x6c>)
 800b088:	429c      	cmp	r4, r3
 800b08a:	d11b      	bne.n	800b0c4 <_fflush_r+0x58>
 800b08c:	686c      	ldr	r4, [r5, #4]
 800b08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0ef      	beq.n	800b076 <_fflush_r+0xa>
 800b096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b098:	07d0      	lsls	r0, r2, #31
 800b09a:	d404      	bmi.n	800b0a6 <_fflush_r+0x3a>
 800b09c:	0599      	lsls	r1, r3, #22
 800b09e:	d402      	bmi.n	800b0a6 <_fflush_r+0x3a>
 800b0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0a2:	f000 f915 	bl	800b2d0 <__retarget_lock_acquire_recursive>
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	f7ff ff59 	bl	800af60 <__sflush_r>
 800b0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0b0:	07da      	lsls	r2, r3, #31
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	d4e0      	bmi.n	800b078 <_fflush_r+0xc>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	059b      	lsls	r3, r3, #22
 800b0ba:	d4dd      	bmi.n	800b078 <_fflush_r+0xc>
 800b0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0be:	f000 f908 	bl	800b2d2 <__retarget_lock_release_recursive>
 800b0c2:	e7d9      	b.n	800b078 <_fflush_r+0xc>
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <_fflush_r+0x70>)
 800b0c6:	429c      	cmp	r4, r3
 800b0c8:	d101      	bne.n	800b0ce <_fflush_r+0x62>
 800b0ca:	68ac      	ldr	r4, [r5, #8]
 800b0cc:	e7df      	b.n	800b08e <_fflush_r+0x22>
 800b0ce:	4b04      	ldr	r3, [pc, #16]	; (800b0e0 <_fflush_r+0x74>)
 800b0d0:	429c      	cmp	r4, r3
 800b0d2:	bf08      	it	eq
 800b0d4:	68ec      	ldreq	r4, [r5, #12]
 800b0d6:	e7da      	b.n	800b08e <_fflush_r+0x22>
 800b0d8:	0800c35c 	.word	0x0800c35c
 800b0dc:	0800c37c 	.word	0x0800c37c
 800b0e0:	0800c33c 	.word	0x0800c33c

0800b0e4 <std>:
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	b510      	push	{r4, lr}
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0f2:	6083      	str	r3, [r0, #8]
 800b0f4:	8181      	strh	r1, [r0, #12]
 800b0f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b0f8:	81c2      	strh	r2, [r0, #14]
 800b0fa:	6183      	str	r3, [r0, #24]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	2208      	movs	r2, #8
 800b100:	305c      	adds	r0, #92	; 0x5c
 800b102:	f7ff fa5b 	bl	800a5bc <memset>
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <std+0x38>)
 800b108:	6263      	str	r3, [r4, #36]	; 0x24
 800b10a:	4b05      	ldr	r3, [pc, #20]	; (800b120 <std+0x3c>)
 800b10c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <std+0x40>)
 800b110:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b112:	4b05      	ldr	r3, [pc, #20]	; (800b128 <std+0x44>)
 800b114:	6224      	str	r4, [r4, #32]
 800b116:	6323      	str	r3, [r4, #48]	; 0x30
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop
 800b11c:	0800b741 	.word	0x0800b741
 800b120:	0800b763 	.word	0x0800b763
 800b124:	0800b79b 	.word	0x0800b79b
 800b128:	0800b7bf 	.word	0x0800b7bf

0800b12c <_cleanup_r>:
 800b12c:	4901      	ldr	r1, [pc, #4]	; (800b134 <_cleanup_r+0x8>)
 800b12e:	f000 b8af 	b.w	800b290 <_fwalk_reent>
 800b132:	bf00      	nop
 800b134:	0800b06d 	.word	0x0800b06d

0800b138 <__sfmoreglue>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	1e4a      	subs	r2, r1, #1
 800b13c:	2568      	movs	r5, #104	; 0x68
 800b13e:	4355      	muls	r5, r2
 800b140:	460e      	mov	r6, r1
 800b142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b146:	f7ff fa91 	bl	800a66c <_malloc_r>
 800b14a:	4604      	mov	r4, r0
 800b14c:	b140      	cbz	r0, 800b160 <__sfmoreglue+0x28>
 800b14e:	2100      	movs	r1, #0
 800b150:	e9c0 1600 	strd	r1, r6, [r0]
 800b154:	300c      	adds	r0, #12
 800b156:	60a0      	str	r0, [r4, #8]
 800b158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b15c:	f7ff fa2e 	bl	800a5bc <memset>
 800b160:	4620      	mov	r0, r4
 800b162:	bd70      	pop	{r4, r5, r6, pc}

0800b164 <__sfp_lock_acquire>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__sfp_lock_acquire+0x8>)
 800b166:	f000 b8b3 	b.w	800b2d0 <__retarget_lock_acquire_recursive>
 800b16a:	bf00      	nop
 800b16c:	24000b50 	.word	0x24000b50

0800b170 <__sfp_lock_release>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__sfp_lock_release+0x8>)
 800b172:	f000 b8ae 	b.w	800b2d2 <__retarget_lock_release_recursive>
 800b176:	bf00      	nop
 800b178:	24000b50 	.word	0x24000b50

0800b17c <__sinit_lock_acquire>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sinit_lock_acquire+0x8>)
 800b17e:	f000 b8a7 	b.w	800b2d0 <__retarget_lock_acquire_recursive>
 800b182:	bf00      	nop
 800b184:	24000b4b 	.word	0x24000b4b

0800b188 <__sinit_lock_release>:
 800b188:	4801      	ldr	r0, [pc, #4]	; (800b190 <__sinit_lock_release+0x8>)
 800b18a:	f000 b8a2 	b.w	800b2d2 <__retarget_lock_release_recursive>
 800b18e:	bf00      	nop
 800b190:	24000b4b 	.word	0x24000b4b

0800b194 <__sinit>:
 800b194:	b510      	push	{r4, lr}
 800b196:	4604      	mov	r4, r0
 800b198:	f7ff fff0 	bl	800b17c <__sinit_lock_acquire>
 800b19c:	69a3      	ldr	r3, [r4, #24]
 800b19e:	b11b      	cbz	r3, 800b1a8 <__sinit+0x14>
 800b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a4:	f7ff bff0 	b.w	800b188 <__sinit_lock_release>
 800b1a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1ac:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <__sinit+0x68>)
 800b1b0:	4a13      	ldr	r2, [pc, #76]	; (800b200 <__sinit+0x6c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1b6:	42a3      	cmp	r3, r4
 800b1b8:	bf04      	itt	eq
 800b1ba:	2301      	moveq	r3, #1
 800b1bc:	61a3      	streq	r3, [r4, #24]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 f820 	bl	800b204 <__sfp>
 800b1c4:	6060      	str	r0, [r4, #4]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 f81c 	bl	800b204 <__sfp>
 800b1cc:	60a0      	str	r0, [r4, #8]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 f818 	bl	800b204 <__sfp>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	60e0      	str	r0, [r4, #12]
 800b1d8:	2104      	movs	r1, #4
 800b1da:	6860      	ldr	r0, [r4, #4]
 800b1dc:	f7ff ff82 	bl	800b0e4 <std>
 800b1e0:	68a0      	ldr	r0, [r4, #8]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	2109      	movs	r1, #9
 800b1e6:	f7ff ff7d 	bl	800b0e4 <std>
 800b1ea:	68e0      	ldr	r0, [r4, #12]
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	2112      	movs	r1, #18
 800b1f0:	f7ff ff78 	bl	800b0e4 <std>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	61a3      	str	r3, [r4, #24]
 800b1f8:	e7d2      	b.n	800b1a0 <__sinit+0xc>
 800b1fa:	bf00      	nop
 800b1fc:	0800c304 	.word	0x0800c304
 800b200:	0800b12d 	.word	0x0800b12d

0800b204 <__sfp>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	4607      	mov	r7, r0
 800b208:	f7ff ffac 	bl	800b164 <__sfp_lock_acquire>
 800b20c:	4b1e      	ldr	r3, [pc, #120]	; (800b288 <__sfp+0x84>)
 800b20e:	681e      	ldr	r6, [r3, #0]
 800b210:	69b3      	ldr	r3, [r6, #24]
 800b212:	b913      	cbnz	r3, 800b21a <__sfp+0x16>
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ffbd 	bl	800b194 <__sinit>
 800b21a:	3648      	adds	r6, #72	; 0x48
 800b21c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b220:	3b01      	subs	r3, #1
 800b222:	d503      	bpl.n	800b22c <__sfp+0x28>
 800b224:	6833      	ldr	r3, [r6, #0]
 800b226:	b30b      	cbz	r3, 800b26c <__sfp+0x68>
 800b228:	6836      	ldr	r6, [r6, #0]
 800b22a:	e7f7      	b.n	800b21c <__sfp+0x18>
 800b22c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b230:	b9d5      	cbnz	r5, 800b268 <__sfp+0x64>
 800b232:	4b16      	ldr	r3, [pc, #88]	; (800b28c <__sfp+0x88>)
 800b234:	60e3      	str	r3, [r4, #12]
 800b236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b23a:	6665      	str	r5, [r4, #100]	; 0x64
 800b23c:	f000 f847 	bl	800b2ce <__retarget_lock_init_recursive>
 800b240:	f7ff ff96 	bl	800b170 <__sfp_lock_release>
 800b244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b24c:	6025      	str	r5, [r4, #0]
 800b24e:	61a5      	str	r5, [r4, #24]
 800b250:	2208      	movs	r2, #8
 800b252:	4629      	mov	r1, r5
 800b254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b258:	f7ff f9b0 	bl	800a5bc <memset>
 800b25c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b264:	4620      	mov	r0, r4
 800b266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b268:	3468      	adds	r4, #104	; 0x68
 800b26a:	e7d9      	b.n	800b220 <__sfp+0x1c>
 800b26c:	2104      	movs	r1, #4
 800b26e:	4638      	mov	r0, r7
 800b270:	f7ff ff62 	bl	800b138 <__sfmoreglue>
 800b274:	4604      	mov	r4, r0
 800b276:	6030      	str	r0, [r6, #0]
 800b278:	2800      	cmp	r0, #0
 800b27a:	d1d5      	bne.n	800b228 <__sfp+0x24>
 800b27c:	f7ff ff78 	bl	800b170 <__sfp_lock_release>
 800b280:	230c      	movs	r3, #12
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	e7ee      	b.n	800b264 <__sfp+0x60>
 800b286:	bf00      	nop
 800b288:	0800c304 	.word	0x0800c304
 800b28c:	ffff0001 	.word	0xffff0001

0800b290 <_fwalk_reent>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	4606      	mov	r6, r0
 800b296:	4688      	mov	r8, r1
 800b298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b29c:	2700      	movs	r7, #0
 800b29e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b2a6:	d505      	bpl.n	800b2b4 <_fwalk_reent+0x24>
 800b2a8:	6824      	ldr	r4, [r4, #0]
 800b2aa:	2c00      	cmp	r4, #0
 800b2ac:	d1f7      	bne.n	800b29e <_fwalk_reent+0xe>
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b4:	89ab      	ldrh	r3, [r5, #12]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d907      	bls.n	800b2ca <_fwalk_reent+0x3a>
 800b2ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	d003      	beq.n	800b2ca <_fwalk_reent+0x3a>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	47c0      	blx	r8
 800b2c8:	4307      	orrs	r7, r0
 800b2ca:	3568      	adds	r5, #104	; 0x68
 800b2cc:	e7e9      	b.n	800b2a2 <_fwalk_reent+0x12>

0800b2ce <__retarget_lock_init_recursive>:
 800b2ce:	4770      	bx	lr

0800b2d0 <__retarget_lock_acquire_recursive>:
 800b2d0:	4770      	bx	lr

0800b2d2 <__retarget_lock_release_recursive>:
 800b2d2:	4770      	bx	lr

0800b2d4 <__swhatbuf_r>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	460e      	mov	r6, r1
 800b2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	b096      	sub	sp, #88	; 0x58
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	461d      	mov	r5, r3
 800b2e4:	da07      	bge.n	800b2f6 <__swhatbuf_r+0x22>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	602b      	str	r3, [r5, #0]
 800b2ea:	89b3      	ldrh	r3, [r6, #12]
 800b2ec:	061a      	lsls	r2, r3, #24
 800b2ee:	d410      	bmi.n	800b312 <__swhatbuf_r+0x3e>
 800b2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2f4:	e00e      	b.n	800b314 <__swhatbuf_r+0x40>
 800b2f6:	466a      	mov	r2, sp
 800b2f8:	f000 fa88 	bl	800b80c <_fstat_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	dbf2      	blt.n	800b2e6 <__swhatbuf_r+0x12>
 800b300:	9a01      	ldr	r2, [sp, #4]
 800b302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b30a:	425a      	negs	r2, r3
 800b30c:	415a      	adcs	r2, r3
 800b30e:	602a      	str	r2, [r5, #0]
 800b310:	e7ee      	b.n	800b2f0 <__swhatbuf_r+0x1c>
 800b312:	2340      	movs	r3, #64	; 0x40
 800b314:	2000      	movs	r0, #0
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	b016      	add	sp, #88	; 0x58
 800b31a:	bd70      	pop	{r4, r5, r6, pc}

0800b31c <__smakebuf_r>:
 800b31c:	898b      	ldrh	r3, [r1, #12]
 800b31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b320:	079d      	lsls	r5, r3, #30
 800b322:	4606      	mov	r6, r0
 800b324:	460c      	mov	r4, r1
 800b326:	d507      	bpl.n	800b338 <__smakebuf_r+0x1c>
 800b328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	2301      	movs	r3, #1
 800b332:	6163      	str	r3, [r4, #20]
 800b334:	b002      	add	sp, #8
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	ab01      	add	r3, sp, #4
 800b33a:	466a      	mov	r2, sp
 800b33c:	f7ff ffca 	bl	800b2d4 <__swhatbuf_r>
 800b340:	9900      	ldr	r1, [sp, #0]
 800b342:	4605      	mov	r5, r0
 800b344:	4630      	mov	r0, r6
 800b346:	f7ff f991 	bl	800a66c <_malloc_r>
 800b34a:	b948      	cbnz	r0, 800b360 <__smakebuf_r+0x44>
 800b34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b350:	059a      	lsls	r2, r3, #22
 800b352:	d4ef      	bmi.n	800b334 <__smakebuf_r+0x18>
 800b354:	f023 0303 	bic.w	r3, r3, #3
 800b358:	f043 0302 	orr.w	r3, r3, #2
 800b35c:	81a3      	strh	r3, [r4, #12]
 800b35e:	e7e3      	b.n	800b328 <__smakebuf_r+0xc>
 800b360:	4b0d      	ldr	r3, [pc, #52]	; (800b398 <__smakebuf_r+0x7c>)
 800b362:	62b3      	str	r3, [r6, #40]	; 0x28
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	6020      	str	r0, [r4, #0]
 800b368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b36c:	81a3      	strh	r3, [r4, #12]
 800b36e:	9b00      	ldr	r3, [sp, #0]
 800b370:	6163      	str	r3, [r4, #20]
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	6120      	str	r0, [r4, #16]
 800b376:	b15b      	cbz	r3, 800b390 <__smakebuf_r+0x74>
 800b378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b37c:	4630      	mov	r0, r6
 800b37e:	f000 fa57 	bl	800b830 <_isatty_r>
 800b382:	b128      	cbz	r0, 800b390 <__smakebuf_r+0x74>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f023 0303 	bic.w	r3, r3, #3
 800b38a:	f043 0301 	orr.w	r3, r3, #1
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	89a0      	ldrh	r0, [r4, #12]
 800b392:	4305      	orrs	r5, r0
 800b394:	81a5      	strh	r5, [r4, #12]
 800b396:	e7cd      	b.n	800b334 <__smakebuf_r+0x18>
 800b398:	0800b12d 	.word	0x0800b12d

0800b39c <__malloc_lock>:
 800b39c:	4801      	ldr	r0, [pc, #4]	; (800b3a4 <__malloc_lock+0x8>)
 800b39e:	f7ff bf97 	b.w	800b2d0 <__retarget_lock_acquire_recursive>
 800b3a2:	bf00      	nop
 800b3a4:	24000b4c 	.word	0x24000b4c

0800b3a8 <__malloc_unlock>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	; (800b3b0 <__malloc_unlock+0x8>)
 800b3aa:	f7ff bf92 	b.w	800b2d2 <__retarget_lock_release_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	24000b4c 	.word	0x24000b4c

0800b3b4 <_realloc_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	460e      	mov	r6, r1
 800b3bc:	b921      	cbnz	r1, 800b3c8 <_realloc_r+0x14>
 800b3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	f7ff b952 	b.w	800a66c <_malloc_r>
 800b3c8:	b922      	cbnz	r2, 800b3d4 <_realloc_r+0x20>
 800b3ca:	f7ff f8ff 	bl	800a5cc <_free_r>
 800b3ce:	4625      	mov	r5, r4
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d4:	f000 fa4e 	bl	800b874 <_malloc_usable_size_r>
 800b3d8:	42a0      	cmp	r0, r4
 800b3da:	d20f      	bcs.n	800b3fc <_realloc_r+0x48>
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f7ff f944 	bl	800a66c <_malloc_r>
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d0f2      	beq.n	800b3d0 <_realloc_r+0x1c>
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	f7ff f8bd 	bl	800a56c <memcpy>
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7ff f8e9 	bl	800a5cc <_free_r>
 800b3fa:	e7e9      	b.n	800b3d0 <_realloc_r+0x1c>
 800b3fc:	4635      	mov	r5, r6
 800b3fe:	e7e7      	b.n	800b3d0 <_realloc_r+0x1c>

0800b400 <__ssputs_r>:
 800b400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	688e      	ldr	r6, [r1, #8]
 800b406:	429e      	cmp	r6, r3
 800b408:	4682      	mov	sl, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	4690      	mov	r8, r2
 800b40e:	461f      	mov	r7, r3
 800b410:	d838      	bhi.n	800b484 <__ssputs_r+0x84>
 800b412:	898a      	ldrh	r2, [r1, #12]
 800b414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b418:	d032      	beq.n	800b480 <__ssputs_r+0x80>
 800b41a:	6825      	ldr	r5, [r4, #0]
 800b41c:	6909      	ldr	r1, [r1, #16]
 800b41e:	eba5 0901 	sub.w	r9, r5, r1
 800b422:	6965      	ldr	r5, [r4, #20]
 800b424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b42c:	3301      	adds	r3, #1
 800b42e:	444b      	add	r3, r9
 800b430:	106d      	asrs	r5, r5, #1
 800b432:	429d      	cmp	r5, r3
 800b434:	bf38      	it	cc
 800b436:	461d      	movcc	r5, r3
 800b438:	0553      	lsls	r3, r2, #21
 800b43a:	d531      	bpl.n	800b4a0 <__ssputs_r+0xa0>
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7ff f915 	bl	800a66c <_malloc_r>
 800b442:	4606      	mov	r6, r0
 800b444:	b950      	cbnz	r0, 800b45c <__ssputs_r+0x5c>
 800b446:	230c      	movs	r3, #12
 800b448:	f8ca 3000 	str.w	r3, [sl]
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45c:	6921      	ldr	r1, [r4, #16]
 800b45e:	464a      	mov	r2, r9
 800b460:	f7ff f884 	bl	800a56c <memcpy>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46e:	81a3      	strh	r3, [r4, #12]
 800b470:	6126      	str	r6, [r4, #16]
 800b472:	6165      	str	r5, [r4, #20]
 800b474:	444e      	add	r6, r9
 800b476:	eba5 0509 	sub.w	r5, r5, r9
 800b47a:	6026      	str	r6, [r4, #0]
 800b47c:	60a5      	str	r5, [r4, #8]
 800b47e:	463e      	mov	r6, r7
 800b480:	42be      	cmp	r6, r7
 800b482:	d900      	bls.n	800b486 <__ssputs_r+0x86>
 800b484:	463e      	mov	r6, r7
 800b486:	4632      	mov	r2, r6
 800b488:	6820      	ldr	r0, [r4, #0]
 800b48a:	4641      	mov	r1, r8
 800b48c:	f7ff f87c 	bl	800a588 <memmove>
 800b490:	68a3      	ldr	r3, [r4, #8]
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	1b9b      	subs	r3, r3, r6
 800b496:	4432      	add	r2, r6
 800b498:	60a3      	str	r3, [r4, #8]
 800b49a:	6022      	str	r2, [r4, #0]
 800b49c:	2000      	movs	r0, #0
 800b49e:	e7db      	b.n	800b458 <__ssputs_r+0x58>
 800b4a0:	462a      	mov	r2, r5
 800b4a2:	f7ff ff87 	bl	800b3b4 <_realloc_r>
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d1e1      	bne.n	800b470 <__ssputs_r+0x70>
 800b4ac:	6921      	ldr	r1, [r4, #16]
 800b4ae:	4650      	mov	r0, sl
 800b4b0:	f7ff f88c 	bl	800a5cc <_free_r>
 800b4b4:	e7c7      	b.n	800b446 <__ssputs_r+0x46>
	...

0800b4b8 <_svfiprintf_r>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	4698      	mov	r8, r3
 800b4be:	898b      	ldrh	r3, [r1, #12]
 800b4c0:	061b      	lsls	r3, r3, #24
 800b4c2:	b09d      	sub	sp, #116	; 0x74
 800b4c4:	4607      	mov	r7, r0
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	4614      	mov	r4, r2
 800b4ca:	d50e      	bpl.n	800b4ea <_svfiprintf_r+0x32>
 800b4cc:	690b      	ldr	r3, [r1, #16]
 800b4ce:	b963      	cbnz	r3, 800b4ea <_svfiprintf_r+0x32>
 800b4d0:	2140      	movs	r1, #64	; 0x40
 800b4d2:	f7ff f8cb 	bl	800a66c <_malloc_r>
 800b4d6:	6028      	str	r0, [r5, #0]
 800b4d8:	6128      	str	r0, [r5, #16]
 800b4da:	b920      	cbnz	r0, 800b4e6 <_svfiprintf_r+0x2e>
 800b4dc:	230c      	movs	r3, #12
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	e0d1      	b.n	800b68a <_svfiprintf_r+0x1d2>
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	616b      	str	r3, [r5, #20]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ee:	2320      	movs	r3, #32
 800b4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4f8:	2330      	movs	r3, #48	; 0x30
 800b4fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6a4 <_svfiprintf_r+0x1ec>
 800b4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b502:	f04f 0901 	mov.w	r9, #1
 800b506:	4623      	mov	r3, r4
 800b508:	469a      	mov	sl, r3
 800b50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b50e:	b10a      	cbz	r2, 800b514 <_svfiprintf_r+0x5c>
 800b510:	2a25      	cmp	r2, #37	; 0x25
 800b512:	d1f9      	bne.n	800b508 <_svfiprintf_r+0x50>
 800b514:	ebba 0b04 	subs.w	fp, sl, r4
 800b518:	d00b      	beq.n	800b532 <_svfiprintf_r+0x7a>
 800b51a:	465b      	mov	r3, fp
 800b51c:	4622      	mov	r2, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	4638      	mov	r0, r7
 800b522:	f7ff ff6d 	bl	800b400 <__ssputs_r>
 800b526:	3001      	adds	r0, #1
 800b528:	f000 80aa 	beq.w	800b680 <_svfiprintf_r+0x1c8>
 800b52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b52e:	445a      	add	r2, fp
 800b530:	9209      	str	r2, [sp, #36]	; 0x24
 800b532:	f89a 3000 	ldrb.w	r3, [sl]
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 80a2 	beq.w	800b680 <_svfiprintf_r+0x1c8>
 800b53c:	2300      	movs	r3, #0
 800b53e:	f04f 32ff 	mov.w	r2, #4294967295
 800b542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b546:	f10a 0a01 	add.w	sl, sl, #1
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	9307      	str	r3, [sp, #28]
 800b54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b552:	931a      	str	r3, [sp, #104]	; 0x68
 800b554:	4654      	mov	r4, sl
 800b556:	2205      	movs	r2, #5
 800b558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55c:	4851      	ldr	r0, [pc, #324]	; (800b6a4 <_svfiprintf_r+0x1ec>)
 800b55e:	f7f4 fecf 	bl	8000300 <memchr>
 800b562:	9a04      	ldr	r2, [sp, #16]
 800b564:	b9d8      	cbnz	r0, 800b59e <_svfiprintf_r+0xe6>
 800b566:	06d0      	lsls	r0, r2, #27
 800b568:	bf44      	itt	mi
 800b56a:	2320      	movmi	r3, #32
 800b56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b570:	0711      	lsls	r1, r2, #28
 800b572:	bf44      	itt	mi
 800b574:	232b      	movmi	r3, #43	; 0x2b
 800b576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b57a:	f89a 3000 	ldrb.w	r3, [sl]
 800b57e:	2b2a      	cmp	r3, #42	; 0x2a
 800b580:	d015      	beq.n	800b5ae <_svfiprintf_r+0xf6>
 800b582:	9a07      	ldr	r2, [sp, #28]
 800b584:	4654      	mov	r4, sl
 800b586:	2000      	movs	r0, #0
 800b588:	f04f 0c0a 	mov.w	ip, #10
 800b58c:	4621      	mov	r1, r4
 800b58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b592:	3b30      	subs	r3, #48	; 0x30
 800b594:	2b09      	cmp	r3, #9
 800b596:	d94e      	bls.n	800b636 <_svfiprintf_r+0x17e>
 800b598:	b1b0      	cbz	r0, 800b5c8 <_svfiprintf_r+0x110>
 800b59a:	9207      	str	r2, [sp, #28]
 800b59c:	e014      	b.n	800b5c8 <_svfiprintf_r+0x110>
 800b59e:	eba0 0308 	sub.w	r3, r0, r8
 800b5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	46a2      	mov	sl, r4
 800b5ac:	e7d2      	b.n	800b554 <_svfiprintf_r+0x9c>
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	1d19      	adds	r1, r3, #4
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	9103      	str	r1, [sp, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bfbb      	ittet	lt
 800b5ba:	425b      	neglt	r3, r3
 800b5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c0:	9307      	strge	r3, [sp, #28]
 800b5c2:	9307      	strlt	r3, [sp, #28]
 800b5c4:	bfb8      	it	lt
 800b5c6:	9204      	strlt	r2, [sp, #16]
 800b5c8:	7823      	ldrb	r3, [r4, #0]
 800b5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b5cc:	d10c      	bne.n	800b5e8 <_svfiprintf_r+0x130>
 800b5ce:	7863      	ldrb	r3, [r4, #1]
 800b5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d2:	d135      	bne.n	800b640 <_svfiprintf_r+0x188>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	9203      	str	r2, [sp, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	bfb8      	it	lt
 800b5e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5e4:	3402      	adds	r4, #2
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6b4 <_svfiprintf_r+0x1fc>
 800b5ec:	7821      	ldrb	r1, [r4, #0]
 800b5ee:	2203      	movs	r2, #3
 800b5f0:	4650      	mov	r0, sl
 800b5f2:	f7f4 fe85 	bl	8000300 <memchr>
 800b5f6:	b140      	cbz	r0, 800b60a <_svfiprintf_r+0x152>
 800b5f8:	2340      	movs	r3, #64	; 0x40
 800b5fa:	eba0 000a 	sub.w	r0, r0, sl
 800b5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800b602:	9b04      	ldr	r3, [sp, #16]
 800b604:	4303      	orrs	r3, r0
 800b606:	3401      	adds	r4, #1
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60e:	4826      	ldr	r0, [pc, #152]	; (800b6a8 <_svfiprintf_r+0x1f0>)
 800b610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b614:	2206      	movs	r2, #6
 800b616:	f7f4 fe73 	bl	8000300 <memchr>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d038      	beq.n	800b690 <_svfiprintf_r+0x1d8>
 800b61e:	4b23      	ldr	r3, [pc, #140]	; (800b6ac <_svfiprintf_r+0x1f4>)
 800b620:	bb1b      	cbnz	r3, 800b66a <_svfiprintf_r+0x1b2>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	3307      	adds	r3, #7
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	3308      	adds	r3, #8
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b630:	4433      	add	r3, r6
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	e767      	b.n	800b506 <_svfiprintf_r+0x4e>
 800b636:	fb0c 3202 	mla	r2, ip, r2, r3
 800b63a:	460c      	mov	r4, r1
 800b63c:	2001      	movs	r0, #1
 800b63e:	e7a5      	b.n	800b58c <_svfiprintf_r+0xd4>
 800b640:	2300      	movs	r3, #0
 800b642:	3401      	adds	r4, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4619      	mov	r1, r3
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4620      	mov	r0, r4
 800b64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b652:	3a30      	subs	r2, #48	; 0x30
 800b654:	2a09      	cmp	r2, #9
 800b656:	d903      	bls.n	800b660 <_svfiprintf_r+0x1a8>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0c5      	beq.n	800b5e8 <_svfiprintf_r+0x130>
 800b65c:	9105      	str	r1, [sp, #20]
 800b65e:	e7c3      	b.n	800b5e8 <_svfiprintf_r+0x130>
 800b660:	fb0c 2101 	mla	r1, ip, r1, r2
 800b664:	4604      	mov	r4, r0
 800b666:	2301      	movs	r3, #1
 800b668:	e7f0      	b.n	800b64c <_svfiprintf_r+0x194>
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	462a      	mov	r2, r5
 800b670:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <_svfiprintf_r+0x1f8>)
 800b672:	a904      	add	r1, sp, #16
 800b674:	4638      	mov	r0, r7
 800b676:	f3af 8000 	nop.w
 800b67a:	1c42      	adds	r2, r0, #1
 800b67c:	4606      	mov	r6, r0
 800b67e:	d1d6      	bne.n	800b62e <_svfiprintf_r+0x176>
 800b680:	89ab      	ldrh	r3, [r5, #12]
 800b682:	065b      	lsls	r3, r3, #25
 800b684:	f53f af2c 	bmi.w	800b4e0 <_svfiprintf_r+0x28>
 800b688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b68a:	b01d      	add	sp, #116	; 0x74
 800b68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b690:	ab03      	add	r3, sp, #12
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	462a      	mov	r2, r5
 800b696:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <_svfiprintf_r+0x1f8>)
 800b698:	a904      	add	r1, sp, #16
 800b69a:	4638      	mov	r0, r7
 800b69c:	f7ff fa08 	bl	800aab0 <_printf_i>
 800b6a0:	e7eb      	b.n	800b67a <_svfiprintf_r+0x1c2>
 800b6a2:	bf00      	nop
 800b6a4:	0800c308 	.word	0x0800c308
 800b6a8:	0800c312 	.word	0x0800c312
 800b6ac:	00000000 	.word	0x00000000
 800b6b0:	0800b401 	.word	0x0800b401
 800b6b4:	0800c30e 	.word	0x0800c30e

0800b6b8 <_raise_r>:
 800b6b8:	291f      	cmp	r1, #31
 800b6ba:	b538      	push	{r3, r4, r5, lr}
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	d904      	bls.n	800b6cc <_raise_r+0x14>
 800b6c2:	2316      	movs	r3, #22
 800b6c4:	6003      	str	r3, [r0, #0]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6ce:	b112      	cbz	r2, 800b6d6 <_raise_r+0x1e>
 800b6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6d4:	b94b      	cbnz	r3, 800b6ea <_raise_r+0x32>
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f000 f830 	bl	800b73c <_getpid_r>
 800b6dc:	462a      	mov	r2, r5
 800b6de:	4601      	mov	r1, r0
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e6:	f000 b817 	b.w	800b718 <_kill_r>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d00a      	beq.n	800b704 <_raise_r+0x4c>
 800b6ee:	1c59      	adds	r1, r3, #1
 800b6f0:	d103      	bne.n	800b6fa <_raise_r+0x42>
 800b6f2:	2316      	movs	r3, #22
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	e7e7      	b.n	800b6ca <_raise_r+0x12>
 800b6fa:	2400      	movs	r4, #0
 800b6fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b700:	4628      	mov	r0, r5
 800b702:	4798      	blx	r3
 800b704:	2000      	movs	r0, #0
 800b706:	e7e0      	b.n	800b6ca <_raise_r+0x12>

0800b708 <raise>:
 800b708:	4b02      	ldr	r3, [pc, #8]	; (800b714 <raise+0xc>)
 800b70a:	4601      	mov	r1, r0
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	f7ff bfd3 	b.w	800b6b8 <_raise_r>
 800b712:	bf00      	nop
 800b714:	240000c0 	.word	0x240000c0

0800b718 <_kill_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d07      	ldr	r5, [pc, #28]	; (800b738 <_kill_r+0x20>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	4611      	mov	r1, r2
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	f7f5 fe83 	bl	8001430 <_kill>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	d102      	bne.n	800b734 <_kill_r+0x1c>
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	b103      	cbz	r3, 800b734 <_kill_r+0x1c>
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	bf00      	nop
 800b738:	24000b54 	.word	0x24000b54

0800b73c <_getpid_r>:
 800b73c:	f7f5 be70 	b.w	8001420 <_getpid>

0800b740 <__sread>:
 800b740:	b510      	push	{r4, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b748:	f000 f89c 	bl	800b884 <_read_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	bfab      	itete	ge
 800b750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b752:	89a3      	ldrhlt	r3, [r4, #12]
 800b754:	181b      	addge	r3, r3, r0
 800b756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b75a:	bfac      	ite	ge
 800b75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b75e:	81a3      	strhlt	r3, [r4, #12]
 800b760:	bd10      	pop	{r4, pc}

0800b762 <__swrite>:
 800b762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b766:	461f      	mov	r7, r3
 800b768:	898b      	ldrh	r3, [r1, #12]
 800b76a:	05db      	lsls	r3, r3, #23
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	4616      	mov	r6, r2
 800b772:	d505      	bpl.n	800b780 <__swrite+0x1e>
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	2302      	movs	r3, #2
 800b77a:	2200      	movs	r2, #0
 800b77c:	f000 f868 	bl	800b850 <_lseek_r>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	4628      	mov	r0, r5
 800b792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	f000 b817 	b.w	800b7c8 <_write_r>

0800b79a <__sseek>:
 800b79a:	b510      	push	{r4, lr}
 800b79c:	460c      	mov	r4, r1
 800b79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a2:	f000 f855 	bl	800b850 <_lseek_r>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	bf15      	itete	ne
 800b7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7b6:	81a3      	strheq	r3, [r4, #12]
 800b7b8:	bf18      	it	ne
 800b7ba:	81a3      	strhne	r3, [r4, #12]
 800b7bc:	bd10      	pop	{r4, pc}

0800b7be <__sclose>:
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f000 b813 	b.w	800b7ec <_close_r>
	...

0800b7c8 <_write_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	; (800b7e8 <_write_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7f5 fe61 	bl	800149e <_write>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_write_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_write_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	24000b54 	.word	0x24000b54

0800b7ec <_close_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d06      	ldr	r5, [pc, #24]	; (800b808 <_close_r+0x1c>)
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4608      	mov	r0, r1
 800b7f6:	602b      	str	r3, [r5, #0]
 800b7f8:	f7f5 fe6d 	bl	80014d6 <_close>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_close_r+0x1a>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	b103      	cbz	r3, 800b806 <_close_r+0x1a>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	24000b54 	.word	0x24000b54

0800b80c <_fstat_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d07      	ldr	r5, [pc, #28]	; (800b82c <_fstat_r+0x20>)
 800b810:	2300      	movs	r3, #0
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	4611      	mov	r1, r2
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f7f5 fe68 	bl	80014ee <_fstat>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d102      	bne.n	800b828 <_fstat_r+0x1c>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	b103      	cbz	r3, 800b828 <_fstat_r+0x1c>
 800b826:	6023      	str	r3, [r4, #0]
 800b828:	bd38      	pop	{r3, r4, r5, pc}
 800b82a:	bf00      	nop
 800b82c:	24000b54 	.word	0x24000b54

0800b830 <_isatty_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	; (800b84c <_isatty_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f5 fe67 	bl	800150e <_isatty>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_isatty_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_isatty_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	24000b54 	.word	0x24000b54

0800b850 <_lseek_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_lseek_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f5 fe60 	bl	8001524 <_lseek>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_lseek_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_lseek_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	24000b54 	.word	0x24000b54

0800b874 <_malloc_usable_size_r>:
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f18      	subs	r0, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfbc      	itt	lt
 800b87e:	580b      	ldrlt	r3, [r1, r0]
 800b880:	18c0      	addlt	r0, r0, r3
 800b882:	4770      	bx	lr

0800b884 <_read_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	; (800b8a4 <_read_r+0x20>)
 800b888:	4604      	mov	r4, r0
 800b88a:	4608      	mov	r0, r1
 800b88c:	4611      	mov	r1, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	602a      	str	r2, [r5, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f7f5 fde6 	bl	8001464 <_read>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_read_r+0x1e>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_read_r+0x1e>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	24000b54 	.word	0x24000b54

0800b8a8 <_init>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	bf00      	nop
 800b8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ae:	bc08      	pop	{r3}
 800b8b0:	469e      	mov	lr, r3
 800b8b2:	4770      	bx	lr

0800b8b4 <_fini>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr
