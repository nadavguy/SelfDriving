
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f880  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  0800fb20  0800fb20  0001fb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109fc  080109fc  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080109fc  080109fc  000209fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a04  08010a04  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a04  08010a04  00020a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a08  08010a08  00020a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  24000000  08010a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000294  08010ca0  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240002f4  08010d00  000302f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000097c  24000354  08010d60  00030354  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000cd0  08010d60  00030cd0  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  08010d60  00040000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 15 .debug_info   000513a7  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000089dc  00000000  00000000  00081729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001f58  00000000  00000000  0008a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001c70  00000000  00000000  0008c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00045653  00000000  00000000  0008dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033d50  00000000  00000000  000d3323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018bddc  00000000  00000000  00107073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  00292e4f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000093d4  00000000  00000000  00292ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fb08 	.word	0x0800fb08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	0800fb08 	.word	0x0800fb08

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000730 	.word	0x24000730
 8000acc:	24000370 	.word	0x24000370
 8000ad0:	24000778 	.word	0x24000778

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f00a fbd7 	bl	800b28c <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	24000778 	.word	0x24000778
 8000b00:	24000734 	.word	0x24000734
 8000b04:	24000730 	.word	0x24000730

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	24000734 	.word	0x24000734

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f00a fb86 	bl	800b250 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	24000738 	.word	0x24000738
 8000b60:	24000734 	.word	0x24000734

08000b64 <parseRecievedMessages>:
 */

#include "main.h"

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b092      	sub	sp, #72	; 0x48
 8000b68:	af06      	add	r7, sp, #24
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d142      	bne.n	8000bfa <parseRecievedMessages+0x96>
	{
#ifdef CORE_CM7
		case (1):
		{
			int a = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <parseRecievedMessages+0xa0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <parseRecievedMessages+0xa4>)
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	4611      	mov	r1, r2
 8000b82:	221c      	movs	r2, #28
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00a fc59 	bl	800b43c <memcpy>
			char localT[32] = "";
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	619a      	str	r2, [r3, #24]
			snprintf(localT,sizeof(localT),"R: %3.3f, P: %3.3f, Y: %3.3f", receivedAnglesData->bodyAngles.Roll,
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <parseRecievedMessages+0xa0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					receivedAnglesData->bodyAngles.Pitch,receivedAnglesData->bodyAngles.Yaw);
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <parseRecievedMessages+0xa0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	edd3 6a02 	vldr	s13, [r3, #8]
			snprintf(localT,sizeof(localT),"R: %3.3f, P: %3.3f, Y: %3.3f", receivedAnglesData->bodyAngles.Roll,
 8000bb6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					receivedAnglesData->bodyAngles.Pitch,receivedAnglesData->bodyAngles.Yaw);
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <parseRecievedMessages+0xa0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	edd3 5a03 	vldr	s11, [r3, #12]
			snprintf(localT,sizeof(localT),"R: %3.3f, P: %3.3f, Y: %3.3f", receivedAnglesData->bodyAngles.Roll,
 8000bc2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000bce:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000bd2:	ed8d 7b00 	vstr	d7, [sp]
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <parseRecievedMessages+0xa8>)
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00b fcc0 	bl	800c560 <sniprintf>
			ssd1306_SetCursor(0, 12);
 8000be0:	210c      	movs	r1, #12
 8000be2:	2000      	movs	r0, #0
 8000be4:	f007 fd2c 	bl	8008640 <ssd1306_SetCursor>
			ssd1306_WriteString(localT, Font_7x10, White);
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <parseRecievedMessages+0xac>)
 8000bea:	f107 000c 	add.w	r0, r7, #12
 8000bee:	2301      	movs	r3, #1
 8000bf0:	ca06      	ldmia	r2, {r1, r2}
 8000bf2:	f007 fcff 	bl	80085f4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000bf6:	f007 fbed 	bl	80083d4 <ssd1306_UpdateScreen>
		default:
		{

		}
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	; 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2400072c 	.word	0x2400072c
 8000c08:	24000370 	.word	0x24000370
 8000c0c:	0800fb20 	.word	0x0800fb20
 8000c10:	24000010 	.word	0x24000010

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c18:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <SystemInit+0x104>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <SystemInit+0x104>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <SystemInit+0x104>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a3a      	ldr	r2, [pc, #232]	; (8000d18 <SystemInit+0x104>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <SystemInit+0x108>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d807      	bhi.n	8000c50 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c40:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <SystemInit+0x108>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	4a34      	ldr	r2, [pc, #208]	; (8000d1c <SystemInit+0x108>)
 8000c4a:	f043 0307 	orr.w	r3, r3, #7
 8000c4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a32      	ldr	r2, [pc, #200]	; (8000d20 <SystemInit+0x10c>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <SystemInit+0x10c>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	492e      	ldr	r1, [pc, #184]	; (8000d20 <SystemInit+0x10c>)
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <SystemInit+0x110>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <SystemInit+0x108>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d007      	beq.n	8000c8a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <SystemInit+0x108>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <SystemInit+0x108>)
 8000c84:	f043 0307 	orr.w	r3, r3, #7
 8000c88:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <SystemInit+0x10c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <SystemInit+0x10c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <SystemInit+0x10c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <SystemInit+0x10c>)
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <SystemInit+0x114>)
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <SystemInit+0x10c>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <SystemInit+0x118>)
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <SystemInit+0x10c>)
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <SystemInit+0x11c>)
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <SystemInit+0x10c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <SystemInit+0x10c>)
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <SystemInit+0x11c>)
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <SystemInit+0x10c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <SystemInit+0x10c>)
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <SystemInit+0x11c>)
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <SystemInit+0x10c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <SystemInit+0x10c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <SystemInit+0x10c>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <SystemInit+0x10c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <SystemInit+0x120>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <SystemInit+0x120>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <SystemInit+0x124>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <SystemInit+0x128>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cf6:	d202      	bcs.n	8000cfe <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <SystemInit+0x12c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <SystemInit+0x130>)
 8000d00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d04:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SystemInit+0x104>)
 8000d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00
 8000d1c:	52002000 	.word	0x52002000
 8000d20:	58024400 	.word	0x58024400
 8000d24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d28:	02020200 	.word	0x02020200
 8000d2c:	01ff0000 	.word	0x01ff0000
 8000d30:	01010280 	.word	0x01010280
 8000d34:	580000c0 	.word	0x580000c0
 8000d38:	5c001000 	.word	0x5c001000
 8000d3c:	ffff0000 	.word	0xffff0000
 8000d40:	51008108 	.word	0x51008108
 8000d44:	52004000 	.word	0x52004000

08000d48 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_ETH_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	22e1      	movs	r2, #225	; 0xe1
 8000d6c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	3303      	adds	r3, #3
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	3305      	adds	r3, #5
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_ETH_Init+0x98>)
 8000d96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MX_ETH_Init+0x9c>)
 8000d9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000da0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000da4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_ETH_Init+0x90>)
 8000da8:	f001 fca0 	bl	80026ec <HAL_ETH_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f000 fc28 	bl	8001606 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000db6:	2234      	movs	r2, #52	; 0x34
 8000db8:	2100      	movs	r1, #0
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <MX_ETH_Init+0xa0>)
 8000dbc:	f00a fb66 	bl	800b48c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_ETH_Init+0xa0>)
 8000dc2:	2221      	movs	r2, #33	; 0x21
 8000dc4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_ETH_Init+0xa0>)
 8000dc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dcc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_ETH_Init+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000624 	.word	0x24000624
 8000ddc:	40028000 	.word	0x40028000
 8000de0:	240002f4 	.word	0x240002f4
 8000de4:	24000294 	.word	0x24000294
 8000de8:	240006ac 	.word	0x240006ac

08000dec <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a59      	ldr	r2, [pc, #356]	; (8000f70 <HAL_ETH_MspInit+0x184>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	f040 80ab 	bne.w	8000f66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e10:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e16:	4a57      	ldr	r2, [pc, #348]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e20:	4b54      	ldr	r3, [pc, #336]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2a:	623b      	str	r3, [r7, #32]
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e34:	4a4f      	ldr	r2, [pc, #316]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e52:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a40      	ldr	r2, [pc, #256]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	4a39      	ldr	r2, [pc, #228]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a2a      	ldr	r2, [pc, #168]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ee2:	2332      	movs	r3, #50	; 0x32
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	481e      	ldr	r0, [pc, #120]	; (8000f78 <HAL_ETH_MspInit+0x18c>)
 8000efe:	f002 f80b 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f02:	2386      	movs	r3, #134	; 0x86
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f12:	230b      	movs	r3, #11
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_ETH_MspInit+0x190>)
 8000f1e:	f001 fffb 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f34:	230b      	movs	r3, #11
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4810      	ldr	r0, [pc, #64]	; (8000f80 <HAL_ETH_MspInit+0x194>)
 8000f40:	f001 ffea 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f56:	230b      	movs	r3, #11
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <HAL_ETH_MspInit+0x198>)
 8000f62:	f001 ffd9 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40028000 	.word	0x40028000
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020800 	.word	0x58020800
 8000f7c:	58020000 	.word	0x58020000
 8000f80:	58020400 	.word	0x58020400
 8000f84:	58021800 	.word	0x58021800

08000f88 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a27      	ldr	r2, [pc, #156]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_GPIO_Init+0xc8>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_GPIO_Init+0xc8>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <MX_GPIO_Init+0xc8>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_GPIO_Init+0xc8>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_GPIO_Init+0xc8>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <MX_GPIO_Init+0xc8>)
 800102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_GPIO_Init+0xc8>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400

08001054 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_I2C1_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_I2C1_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <MX_I2C1_Init+0x7c>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_I2C1_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001090:	f002 f94c 	bl	800332c <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800109a:	f000 fab4 	bl	8001606 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_I2C1_Init+0x74>)
 80010a2:	f002 fcc9 	bl	8003a38 <HAL_I2CEx_ConfigAnalogFilter>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f000 faab 	bl	8001606 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_I2C1_Init+0x74>)
 80010b4:	f002 fd0b 	bl	8003ace <HAL_I2CEx_ConfigDigitalFilter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010be:	f000 faa2 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	240006e0 	.word	0x240006e0
 80010cc:	40005400 	.word	0x40005400
 80010d0:	00301242 	.word	0x00301242

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b8      	sub	sp, #224	; 0xe0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22bc      	movs	r2, #188	; 0xbc
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00a f9c9 	bl	800b48c <memset>
  if(i2cHandle->Instance==I2C1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_I2C_MspInit+0xcc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d149      	bne.n	8001198 <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001104:	2308      	movs	r3, #8
 8001106:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fe76 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800111e:	f000 fa72 	bl	8001606 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001146:	2312      	movs	r3, #18
 8001148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001158:	2304      	movs	r3, #4
 800115a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_I2C_MspInit+0xd4>)
 8001166:	f001 fed7 	bl	8002f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 8001172:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001176:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800117c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2104      	movs	r1, #4
 800118c:	201f      	movs	r0, #31
 800118e:	f000 ffb8 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001192:	201f      	movs	r0, #31
 8001194:	f000 ffcf 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001198:	bf00      	nop
 800119a:	37e0      	adds	r7, #224	; 0xe0
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020400 	.word	0x58020400

080011ac <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d101      	bne.n	80011c6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <rpmsg_send+0x3c>)
 80011c4:	e00c      	b.n	80011e0 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ce:	2301      	movs	r3, #1
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f008 fc69 	bl	8009ab0 <rpmsg_send_offchannel_raw>
 80011de:	4603      	mov	r3, r0
					 len, true);
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	fffff829 	.word	0xfffff829

080011ec <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2220      	movs	r2, #32
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f00b fa13 	bl	800c62c <strncpy>
	ept->addr = src;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 800122e:	f000 f9c3 	bl	80015b8 <MPU_Config>
	CPU_CACHE_Enable();
 8001232:	f000 f953 	bl	80014dc <CPU_CACHE_Enable>
	timeout = 0xFFFF;
 8001236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
	//	if ( timeout < 0 )
	//	{
	//		Error_Handler();
	//	}
	  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800123c:	e000      	b.n	8001240 <main+0x18>
	  {
	      asm("nop");
 800123e:	bf00      	nop
	  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001240:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <main+0x188>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f8      	bne.n	800123e <main+0x16>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fda8 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f8be 	bl	80013d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001254:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <main+0x188>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	4a55      	ldr	r2, [pc, #340]	; (80013b0 <main+0x188>)
 800125c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001264:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <main+0x188>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001272:	2000      	movs	r0, #0
 8001274:	f002 f800 	bl	8003278 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001278:	2100      	movs	r1, #0
 800127a:	2000      	movs	r0, #0
 800127c:	f002 f816 	bl	80032ac <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f7ff fe82 	bl	8000f88 <MX_GPIO_Init>
  MX_ETH_Init();
 8001284:	f7ff fd60 	bl	8000d48 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001288:	f000 fbf2 	bl	8001a70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800128c:	f000 fca2 	bl	8001bd4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001290:	f7ff fee0 	bl	8001054 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001294:	f000 f9bc 	bl	8001610 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	MAILBOX_Init();
 8001298:	f009 fe22 	bl	800aee0 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 800129c:	2300      	movs	r3, #0
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	4941      	ldr	r1, [pc, #260]	; (80013b4 <main+0x18c>)
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <main+0x190>)
 80012b0:	f7ff ff9c 	bl	80011ec <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80012b4:	4941      	ldr	r1, [pc, #260]	; (80013bc <main+0x194>)
 80012b6:	2000      	movs	r0, #0
 80012b8:	f009 ff34 	bl	800b124 <MX_OPENAMP_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <main+0x9e>
	{
		Error_Handler();
 80012c2:	f000 f9a0 	bl	8001606 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 80012c6:	483c      	ldr	r0, [pc, #240]	; (80013b8 <main+0x190>)
 80012c8:	f009 ffec 	bl	800b2a4 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80012cc:	2204      	movs	r2, #4
 80012ce:	493c      	ldr	r1, [pc, #240]	; (80013c0 <main+0x198>)
 80012d0:	4839      	ldr	r0, [pc, #228]	; (80013b8 <main+0x190>)
 80012d2:	f7ff ff6b 	bl	80011ac <rpmsg_send>
 80012d6:	62b8      	str	r0, [r7, #40]	; 0x28

	if (status < 0)
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da01      	bge.n	80012e2 <main+0xba>
	{
		Error_Handler();
 80012de:	f000 f992 	bl	8001606 <Error_Handler>
	}

	//	ssd1306_TestAll();
	ssd1306_Init();
 80012e2:	f006 ffe9 	bl	80082b8 <ssd1306_Init>
	ssd1306_TestBorder();
 80012e6:	f007 f9f5 	bl	80086d4 <ssd1306_TestBorder>

	uint8_t message = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (message < 100)
 80012f0:	e034      	b.n	800135c <main+0x134>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 80012f2:	f7ff fbef 	bl	8000ad4 <receive_message>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char localT[32] = "";
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]
 8001312:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%d",message);
 8001314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001318:	4638      	mov	r0, r7
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <main+0x19c>)
 800131c:	2120      	movs	r1, #32
 800131e:	f00b f91f 	bl	800c560 <sniprintf>
		ssd1306_SetCursor(0, 0);
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f007 f98b 	bl	8008640 <ssd1306_SetCursor>
		ssd1306_WriteString(localT, Font_7x10, White);
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <main+0x1a0>)
 800132c:	4638      	mov	r0, r7
 800132e:	2301      	movs	r3, #1
 8001330:	ca06      	ldmia	r2, {r1, r2}
 8001332:	f007 f95f 	bl	80085f4 <ssd1306_WriteString>
		message++;
 8001336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800133a:	3301      	adds	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* Send the massage to the remote CPU */
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001342:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <main+0x190>)
 800134c:	f7ff ff2e 	bl	80011ac <rpmsg_send>
 8001350:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status < 0)
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	da01      	bge.n	800135c <main+0x134>
		{
			Error_Handler();
 8001358:	f000 f955 	bl	8001606 <Error_Handler>
	while (message < 100)
 800135c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001360:	2b63      	cmp	r3, #99	; 0x63
 8001362:	d9c6      	bls.n	80012f2 <main+0xca>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 8001364:	f7ff fbb6 	bl	8000ad4 <receive_message>
 8001368:	4603      	mov	r3, r0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char localT[32] = "";
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%03d",message);
 8001386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800138a:	4638      	mov	r0, r7
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <main+0x1a4>)
 800138e:	2120      	movs	r1, #32
 8001390:	f00b f8e6 	bl	800c560 <sniprintf>
		ssd1306_SetCursor(0, 0);
 8001394:	2100      	movs	r1, #0
 8001396:	2000      	movs	r0, #0
 8001398:	f007 f952 	bl	8008640 <ssd1306_SetCursor>
		ssd1306_WriteString(localT, Font_7x10, White);
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <main+0x1a0>)
 800139e:	4638      	mov	r0, r7
 80013a0:	2301      	movs	r3, #1
 80013a2:	ca06      	ldmia	r2, {r1, r2}
 80013a4:	f007 f926 	bl	80085f4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80013a8:	f007 f814 	bl	80083d4 <ssd1306_UpdateScreen>
	{
 80013ac:	e7da      	b.n	8001364 <main+0x13c>
 80013ae:	bf00      	nop
 80013b0:	58024400 	.word	0x58024400
 80013b4:	0800fb40 	.word	0x0800fb40
 80013b8:	24000738 	.word	0x24000738
 80013bc:	08000b29 	.word	0x08000b29
 80013c0:	24000374 	.word	0x24000374
 80013c4:	0800fb58 	.word	0x0800fb58
 80013c8:	24000010 	.word	0x24000010
 80013cc:	0800fb5c 	.word	0x0800fb5c

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b09c      	sub	sp, #112	; 0x70
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	224c      	movs	r2, #76	; 0x4c
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f00a f854 	bl	800b48c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2220      	movs	r2, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a f84e 	bl	800b48c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f002 fd01 	bl	8003df8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <SystemClock_Config+0x100>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <SystemClock_Config+0x100>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <SystemClock_Config+0x100>)
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <SystemClock_Config+0x104>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001418:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <SystemClock_Config+0x104>)
 800141a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <SystemClock_Config+0x104>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142c:	bf00      	nop
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <SystemClock_Config+0x104>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143a:	d1f8      	bne.n	800142e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <SystemClock_Config+0x108>)
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f023 0303 	bic.w	r3, r3, #3
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <SystemClock_Config+0x108>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144c:	2301      	movs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001450:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145a:	2302      	movs	r3, #2
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001462:	2312      	movs	r3, #18
 8001464:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001466:	2302      	movs	r3, #2
 8001468:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800146a:	2302      	movs	r3, #2
 800146c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001472:	230c      	movs	r3, #12
 8001474:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001476:	2302      	movs	r3, #2
 8001478:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800147a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800147e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fd21 	bl	8003ecc <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001490:	f000 f8b9 	bl	8001606 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	233f      	movs	r3, #63	; 0x3f
 8001496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2303      	movs	r3, #3
 800149a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2101      	movs	r1, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 f917 	bl	80046ec <HAL_RCC_ClockConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80014c4:	f000 f89f 	bl	8001606 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	3770      	adds	r7, #112	; 0x70
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58000400 	.word	0x58000400
 80014d4:	58024800 	.word	0x58024800
 80014d8:	58024400 	.word	0x58024400

080014dc <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11b      	bne.n	8001526 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014ee:	f3bf 8f4f 	dsb	sy
}
 80014f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f4:	f3bf 8f6f 	isb	sy
}
 80014f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001502:	f3bf 8f4f 	dsb	sy
}
 8001506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001508:	f3bf 8f6f 	isb	sy
}
 800150c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
}
 800151e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001520:	f3bf 8f6f 	isb	sy
}
 8001524:	e000      	b.n	8001528 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001526:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d138      	bne.n	80015a6 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 8001544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001548:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0b5b      	lsrs	r3, r3, #13
 800154e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001552:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	08db      	lsrs	r3, r3, #3
 8001558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001566:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800156c:	4911      	ldr	r1, [pc, #68]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 800156e:	4313      	orrs	r3, r2
 8001570:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ef      	bne.n	800155e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <CPU_CACHE_Enable+0xd8>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800159a:	f3bf 8f4f 	dsb	sy
}
 800159e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a0:	f3bf 8f6f 	isb	sy
}
 80015a4:	e000      	b.n	80015a8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015a6:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 80015be:	f000 fdd5 	bl	800216c <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 80015c6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80015ca:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80015cc:	230f      	movs	r3, #15
 80015ce:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80015d0:	2303      	movs	r3, #3
 80015d2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80015e8:	2300      	movs	r3, #0
 80015ea:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015f0:	463b      	mov	r3, r7
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fdf2 	bl	80021dc <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015f8:	2004      	movs	r0, #4
 80015fa:	f000 fdcf 	bl	800219c <HAL_MPU_Enable>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800160a:	b672      	cpsid	i
}
 800160c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800160e:	e7fe      	b.n	800160e <Error_Handler+0x8>

08001610 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <MX_SPI2_Init+0xa8>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800161c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001620:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001624:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001628:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800162c:	2207      	movs	r2, #7
 800162e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800163e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001642:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_SPI2_Init+0xa4>)
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI2_Init+0xa4>)
 800169c:	2200      	movs	r2, #0
 800169e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_SPI2_Init+0xa4>)
 80016a2:	f004 ff11 	bl	80064c8 <HAL_SPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80016ac:	f7ff ffab 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2400077c 	.word	0x2400077c
 80016b8:	40003800 	.word	0x40003800

080016bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0ba      	sub	sp, #232	; 0xe8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	22bc      	movs	r2, #188	; 0xbc
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f009 fed5 	bl	800b48c <memset>
  if(spiHandle->Instance==SPI2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3a      	ldr	r2, [pc, #232]	; (80017d0 <HAL_SPI_MspInit+0x114>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d16d      	bne.n	80017c8 <HAL_SPI_MspInit+0x10c>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fb82 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001706:	f7ff ff7e 	bl	8001606 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 800170c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 800171c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_SPI_MspInit+0x118>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001764:	2308      	movs	r3, #8
 8001766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177c:	2305      	movs	r3, #5
 800177e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001786:	4619      	mov	r1, r3
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <HAL_SPI_MspInit+0x11c>)
 800178a:	f001 fbc5 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800178e:	2308      	movs	r3, #8
 8001790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a6:	2305      	movs	r3, #5
 80017a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017b0:	4619      	mov	r1, r3
 80017b2:	480a      	ldr	r0, [pc, #40]	; (80017dc <HAL_SPI_MspInit+0x120>)
 80017b4:	f001 fbb0 	bl	8002f18 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2024      	movs	r0, #36	; 0x24
 80017be:	f000 fca0 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017c2:	2024      	movs	r0, #36	; 0x24
 80017c4:	f000 fcb7 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017c8:	bf00      	nop
 80017ca:	37e8      	adds	r7, #232	; 0xe8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40003800 	.word	0x40003800
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020800 	.word	0x58020800
 80017dc:	58020c00 	.word	0x58020c00

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_MspInit+0x5c>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_MspInit+0x5c>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_MspInit+0x5c>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	2041      	movs	r0, #65	; 0x41
 800180a:	f000 fc7a 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 800180e:	2041      	movs	r0, #65	; 0x41
 8001810:	f000 fc91 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2104      	movs	r1, #4
 8001818:	207d      	movs	r0, #125	; 0x7d
 800181a:	f000 fc72 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800181e:	207d      	movs	r0, #125	; 0x7d
 8001820:	f000 fc89 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2104      	movs	r1, #4
 8001828:	2094      	movs	r0, #148	; 0x94
 800182a:	f000 fc6a 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 800182e:	2094      	movs	r0, #148	; 0x94
 8001830:	f000 fc81 	bl	8002136 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 fafa 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <I2C1_EV_IRQHandler+0x10>)
 800189a:	f001 feeb 	bl	8003674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	240006e0 	.word	0x240006e0

080018a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <SPI2_IRQHandler+0x10>)
 80018ae:	f004 ff0d 	bl	80066cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2400077c 	.word	0x2400077c

080018bc <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80018ce:	f001 fd13 	bl	80032f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_kill>:

int _kill(int pid, int sig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018fe:	f009 fd51 	bl	800b3a4 <__errno>
 8001902:	4603      	mov	r3, r0
 8001904:	2216      	movs	r2, #22
 8001906:	601a      	str	r2, [r3, #0]
	return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe7 	bl	80018f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001926:	e7fe      	b.n	8001926 <_exit+0x12>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
	}

return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
	}
	return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c2:	605a      	str	r2, [r3, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_isatty>:

int _isatty(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f009 fcb6 	bl	800b3a4 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24040000 	.word	0x24040000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	24000378 	.word	0x24000378
 8001a6c:	24000cd0 	.word	0x24000cd0

08001a70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <MX_USART3_UART_Init+0x94>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001aba:	f005 f8e4 	bl	8006c86 <HAL_UART_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f7ff fd9f 	bl	8001606 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001acc:	f006 f832 	bl	8007b34 <HAL_UARTEx_SetTxFifoThreshold>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ad6:	f7ff fd96 	bl	8001606 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4808      	ldr	r0, [pc, #32]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001ade:	f006 f867 	bl	8007bb0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ae8:	f7ff fd8d 	bl	8001606 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_USART3_UART_Init+0x90>)
 8001aee:	f005 ffe8 	bl	8007ac2 <HAL_UARTEx_DisableFifoMode>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001af8:	f7ff fd85 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	24000804 	.word	0x24000804
 8001b04:	40004800 	.word	0x40004800

08001b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0b8      	sub	sp, #224	; 0xe0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	22bc      	movs	r2, #188	; 0xbc
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f009 fcaf 	bl	800b48c <memset>
  if(uartHandle->Instance==USART3)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <HAL_UART_MspInit+0xc0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d142      	bne.n	8001bbe <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 f95c 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b52:	f7ff fd58 	bl	8001606 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_UART_MspInit+0xc4>)
 8001b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_UART_MspInit+0xc4>)
 8001b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_UART_MspInit+0xc4>)
 8001b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_UART_MspInit+0xc4>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_UART_MspInit+0xc4>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_UART_MspInit+0xc4>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bac:	2307      	movs	r3, #7
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspInit+0xc8>)
 8001bba:	f001 f9ad 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	37e0      	adds	r7, #224	; 0xe0
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40004800 	.word	0x40004800
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	58020c00 	.word	0x58020c00

08001bd4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001be0:	2209      	movs	r2, #9
 8001be2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c1c:	f001 ffa3 	bl	8003b66 <HAL_PCD_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001c26:	f7ff fcee 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	24000894 	.word	0x24000894
 8001c34:	40080000 	.word	0x40080000

08001c38 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0b8      	sub	sp, #224	; 0xe0
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	22bc      	movs	r2, #188	; 0xbc
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f009 fc17 	bl	800b48c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <HAL_PCD_MspInit+0x108>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d166      	bne.n	8001d36 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001c72:	2312      	movs	r3, #18
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001c82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 8001c88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c8c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001c8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 f8b2 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001ca6:	f7ff fcae 	bl	8001606 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001caa:	f002 f8ff 	bl	8003eac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_PCD_MspInit+0x10c>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_PCD_MspInit+0x10c>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_PCD_MspInit+0x10c>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ccc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4815      	ldr	r0, [pc, #84]	; (8001d48 <HAL_PCD_MspInit+0x110>)
 8001cf4:	f001 f910 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <HAL_PCD_MspInit+0x110>)
 8001d14:	f001 f900 	bl	8002f18 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_PCD_MspInit+0x10c>)
 8001d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_PCD_MspInit+0x10c>)
 8001d20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_PCD_MspInit+0x10c>)
 8001d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d36:	bf00      	nop
 8001d38:	37e0      	adds	r7, #224	; 0xe0
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40080000 	.word	0x40080000
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58020000 	.word	0x58020000

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f7fe ff60 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f009 fb2b 	bl	800b3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7ff fa53 	bl	8001228 <main>
  bx  lr
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001d88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d8c:	24000294 	.word	0x24000294
  ldr r2, =_sidata
 8001d90:	08010a0c 	.word	0x08010a0c
  ldr r2, =_sbss
 8001d94:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001d98:	24000cd0 	.word	0x24000cd0

08001d9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC3_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da6:	2003      	movs	r0, #3
 8001da8:	f000 f9a0 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dac:	f002 fe54 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_Init+0x68>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	4913      	ldr	r1, [pc, #76]	; (8001e0c <HAL_Init+0x6c>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_Init+0x68>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_Init+0x6c>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_Init+0x70>)
 8001de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_Init+0x74>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 f814 	bl	8001e18 <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e002      	b.n	8001e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfa:	f7ff fcf1 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	0800fd40 	.word	0x0800fd40
 8001e10:	24000004 	.word	0x24000004
 8001e14:	24000000 	.word	0x24000000

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_InitTick+0x60>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e021      	b.n	8001e70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_InitTick+0x64>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_InitTick+0x60>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f985 	bl	8002152 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f000 f94f 	bl	8002102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_InitTick+0x68>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2400000c 	.word	0x2400000c
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	24000008 	.word	0x24000008

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2400000c 	.word	0x2400000c
 8001ea8:	24000c9c 	.word	0x24000c9c

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	24000c9c 	.word	0x24000c9c

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2400000c 	.word	0x2400000c

08001f0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetREVID+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0c1b      	lsrs	r3, r3, #16
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	5c001000 	.word	0x5c001000

08001f24 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001f34:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	58000400 	.word	0x58000400

08001f4c <__NVIC_SetPriorityGrouping>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <__NVIC_SetPriorityGrouping+0x40>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x40>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00
 8001f90:	05fa0000 	.word	0x05fa0000

08001f94 <__NVIC_GetPriorityGrouping>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_EnableIRQ>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <__NVIC_EnableIRQ+0x38>)
 8001fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_SetPriority>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	490c      	ldr	r1, [pc, #48]	; (8002038 <__NVIC_SetPriority+0x4c>)
 8002006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <__NVIC_SetPriority+0x50>)
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3b04      	subs	r3, #4
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b04      	cmp	r3, #4
 800205c:	bf28      	it	cs
 800205e:	2304      	movcs	r3, #4
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3304      	adds	r3, #4
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b03      	subs	r3, #3
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	4313      	orrs	r3, r2
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff8e 	bl	8001fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff29 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff40 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff90 	bl	8002040 <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5f 	bl	8001fec <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff33 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffa4 	bl	80020a8 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002170:	f3bf 8f5f 	dmb	sy
}
 8002174:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_MPU_Disable+0x28>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_MPU_Disable+0x28>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_MPU_Disable+0x2c>)
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00
 8002198:	e000ed90 	.word	0xe000ed90

0800219c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_MPU_Enable+0x38>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_MPU_Enable+0x3c>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_MPU_Enable+0x3c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021ba:	f3bf 8f4f 	dsb	sy
}
 80021be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021c0:	f3bf 8f6f 	isb	sy
}
 80021c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed90 	.word	0xe000ed90
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	785a      	ldrb	r2, [r3, #1]
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_MPU_ConfigRegion+0x84>)
 80021ea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d029      	beq.n	8002248 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_MPU_ConfigRegion+0x84>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7adb      	ldrb	r3, [r3, #11]
 8002206:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002208:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7a9b      	ldrb	r3, [r3, #10]
 800220e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002210:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7b5b      	ldrb	r3, [r3, #13]
 8002216:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002218:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7b9b      	ldrb	r3, [r3, #14]
 800221e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002220:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7bdb      	ldrb	r3, [r3, #15]
 8002226:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002228:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7a5b      	ldrb	r3, [r3, #9]
 800222e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002230:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7a1b      	ldrb	r3, [r3, #8]
 8002236:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002238:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002242:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002244:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002246:	e005      	b.n	8002254 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_MPU_ConfigRegion+0x84>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_MPU_ConfigRegion+0x84>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed90 	.word	0xe000ed90

08002264 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e205      	b.n	8002682 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d004      	beq.n	800228c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e1fa      	b.n	8002682 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a8c      	ldr	r2, [pc, #560]	; (80024c4 <HAL_DMA_Abort_IT+0x260>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d04a      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a8b      	ldr	r2, [pc, #556]	; (80024c8 <HAL_DMA_Abort_IT+0x264>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d045      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a89      	ldr	r2, [pc, #548]	; (80024cc <HAL_DMA_Abort_IT+0x268>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d040      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a88      	ldr	r2, [pc, #544]	; (80024d0 <HAL_DMA_Abort_IT+0x26c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d03b      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a86      	ldr	r2, [pc, #536]	; (80024d4 <HAL_DMA_Abort_IT+0x270>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d036      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a85      	ldr	r2, [pc, #532]	; (80024d8 <HAL_DMA_Abort_IT+0x274>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d031      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a83      	ldr	r2, [pc, #524]	; (80024dc <HAL_DMA_Abort_IT+0x278>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d02c      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a82      	ldr	r2, [pc, #520]	; (80024e0 <HAL_DMA_Abort_IT+0x27c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d027      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_DMA_Abort_IT+0x280>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d022      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7f      	ldr	r2, [pc, #508]	; (80024e8 <HAL_DMA_Abort_IT+0x284>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d01d      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7d      	ldr	r2, [pc, #500]	; (80024ec <HAL_DMA_Abort_IT+0x288>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d018      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7c      	ldr	r2, [pc, #496]	; (80024f0 <HAL_DMA_Abort_IT+0x28c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_DMA_Abort_IT+0x290>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00e      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a79      	ldr	r2, [pc, #484]	; (80024f8 <HAL_DMA_Abort_IT+0x294>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a77      	ldr	r2, [pc, #476]	; (80024fc <HAL_DMA_Abort_IT+0x298>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_DMA_Abort_IT+0xc8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a76      	ldr	r2, [pc, #472]	; (8002500 <HAL_DMA_Abort_IT+0x29c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_DMA_Abort_IT+0xcc>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_DMA_Abort_IT+0xce>
 8002330:	2300      	movs	r3, #0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d065      	beq.n	8002402 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_DMA_Abort_IT+0x260>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d04a      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a5e      	ldr	r2, [pc, #376]	; (80024c8 <HAL_DMA_Abort_IT+0x264>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d045      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_DMA_Abort_IT+0x268>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d040      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5b      	ldr	r2, [pc, #364]	; (80024d0 <HAL_DMA_Abort_IT+0x26c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d03b      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_DMA_Abort_IT+0x270>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d036      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_DMA_Abort_IT+0x274>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d031      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_DMA_Abort_IT+0x278>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d02c      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_DMA_Abort_IT+0x27c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d027      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_DMA_Abort_IT+0x280>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_DMA_Abort_IT+0x284>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_DMA_Abort_IT+0x288>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d018      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	; (80024f0 <HAL_DMA_Abort_IT+0x28c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_DMA_Abort_IT+0x290>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_DMA_Abort_IT+0x294>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <HAL_DMA_Abort_IT+0x298>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_Abort_IT+0x17a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a49      	ldr	r2, [pc, #292]	; (8002500 <HAL_DMA_Abort_IT+0x29c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d108      	bne.n	80023f0 <HAL_DMA_Abort_IT+0x18c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e147      	b.n	8002680 <HAL_DMA_Abort_IT+0x41c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e13e      	b.n	8002680 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020e 	bic.w	r2, r2, #14
 8002410:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <HAL_DMA_Abort_IT+0x260>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d04a      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <HAL_DMA_Abort_IT+0x264>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d045      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a28      	ldr	r2, [pc, #160]	; (80024cc <HAL_DMA_Abort_IT+0x268>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d040      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_DMA_Abort_IT+0x26c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d03b      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <HAL_DMA_Abort_IT+0x270>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d036      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_DMA_Abort_IT+0x274>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d031      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a22      	ldr	r2, [pc, #136]	; (80024dc <HAL_DMA_Abort_IT+0x278>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d02c      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <HAL_DMA_Abort_IT+0x27c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d027      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_DMA_Abort_IT+0x280>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_DMA_Abort_IT+0x284>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01d      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_DMA_Abort_IT+0x288>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d018      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_DMA_Abort_IT+0x28c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_DMA_Abort_IT+0x290>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_DMA_Abort_IT+0x294>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_DMA_Abort_IT+0x298>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_DMA_Abort_IT+0x29c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d128      	bne.n	8002504 <HAL_DMA_Abort_IT+0x2a0>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e027      	b.n	8002514 <HAL_DMA_Abort_IT+0x2b0>
 80024c4:	40020010 	.word	0x40020010
 80024c8:	40020028 	.word	0x40020028
 80024cc:	40020040 	.word	0x40020040
 80024d0:	40020058 	.word	0x40020058
 80024d4:	40020070 	.word	0x40020070
 80024d8:	40020088 	.word	0x40020088
 80024dc:	400200a0 	.word	0x400200a0
 80024e0:	400200b8 	.word	0x400200b8
 80024e4:	40020410 	.word	0x40020410
 80024e8:	40020428 	.word	0x40020428
 80024ec:	40020440 	.word	0x40020440
 80024f0:	40020458 	.word	0x40020458
 80024f4:	40020470 	.word	0x40020470
 80024f8:	40020488 	.word	0x40020488
 80024fc:	400204a0 	.word	0x400204a0
 8002500:	400204b8 	.word	0x400204b8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_DMA_Abort_IT+0x428>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d072      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_DMA_Abort_IT+0x42c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d06d      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a59      	ldr	r2, [pc, #356]	; (8002694 <HAL_DMA_Abort_IT+0x430>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d068      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_DMA_Abort_IT+0x434>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d063      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a56      	ldr	r2, [pc, #344]	; (800269c <HAL_DMA_Abort_IT+0x438>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d05e      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a55      	ldr	r2, [pc, #340]	; (80026a0 <HAL_DMA_Abort_IT+0x43c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d059      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a53      	ldr	r2, [pc, #332]	; (80026a4 <HAL_DMA_Abort_IT+0x440>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d054      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_DMA_Abort_IT+0x444>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d04f      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_DMA_Abort_IT+0x448>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <HAL_DMA_Abort_IT+0x44c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_DMA_Abort_IT+0x450>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a4c      	ldr	r2, [pc, #304]	; (80026b8 <HAL_DMA_Abort_IT+0x454>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_DMA_Abort_IT+0x458>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a49      	ldr	r2, [pc, #292]	; (80026c0 <HAL_DMA_Abort_IT+0x45c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a47      	ldr	r2, [pc, #284]	; (80026c4 <HAL_DMA_Abort_IT+0x460>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a46      	ldr	r2, [pc, #280]	; (80026c8 <HAL_DMA_Abort_IT+0x464>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a44      	ldr	r2, [pc, #272]	; (80026cc <HAL_DMA_Abort_IT+0x468>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a43      	ldr	r2, [pc, #268]	; (80026d0 <HAL_DMA_Abort_IT+0x46c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <HAL_DMA_Abort_IT+0x470>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <HAL_DMA_Abort_IT+0x474>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3e      	ldr	r2, [pc, #248]	; (80026dc <HAL_DMA_Abort_IT+0x478>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3d      	ldr	r2, [pc, #244]	; (80026e0 <HAL_DMA_Abort_IT+0x47c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <HAL_DMA_Abort_IT+0x480>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Abort_IT+0x3a0>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <HAL_DMA_Abort_IT+0x484>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_DMA_Abort_IT+0x3a4>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_DMA_Abort_IT+0x3a6>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d028      	beq.n	8002660 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2201      	movs	r2, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800263c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002654:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800265e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020010 	.word	0x40020010
 8002690:	40020028 	.word	0x40020028
 8002694:	40020040 	.word	0x40020040
 8002698:	40020058 	.word	0x40020058
 800269c:	40020070 	.word	0x40020070
 80026a0:	40020088 	.word	0x40020088
 80026a4:	400200a0 	.word	0x400200a0
 80026a8:	400200b8 	.word	0x400200b8
 80026ac:	40020410 	.word	0x40020410
 80026b0:	40020428 	.word	0x40020428
 80026b4:	40020440 	.word	0x40020440
 80026b8:	40020458 	.word	0x40020458
 80026bc:	40020470 	.word	0x40020470
 80026c0:	40020488 	.word	0x40020488
 80026c4:	400204a0 	.word	0x400204a0
 80026c8:	400204b8 	.word	0x400204b8
 80026cc:	58025408 	.word	0x58025408
 80026d0:	5802541c 	.word	0x5802541c
 80026d4:	58025430 	.word	0x58025430
 80026d8:	58025444 	.word	0x58025444
 80026dc:	58025458 	.word	0x58025458
 80026e0:	5802546c 	.word	0x5802546c
 80026e4:	58025480 	.word	0x58025480
 80026e8:	58025494 	.word	0x58025494

080026ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0c6      	b.n	800288c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fb70 	bl	8000dec <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2223      	movs	r2, #35	; 0x23
 8002710:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <HAL_ETH_Init+0x1a8>)
 8002714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002718:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_ETH_Init+0x1a8>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_ETH_Init+0x1a8>)
 8002724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7a1b      	ldrb	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff fbf3 	bl	8001f24 <HAL_SYSCFG_ETHInterfaceSelect>
 800273e:	e003      	b.n	8002748 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002740:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002744:	f7ff fbee 	bl	8001f24 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002760:	f7ff fba4 	bl	8001eac <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002766:	e00f      	b.n	8002788 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002768:	f7ff fba0 	bl	8001eac <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002776:	d907      	bls.n	8002788 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	22e0      	movs	r2, #224	; 0xe0
 8002782:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e081      	b.n	800288c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e6      	bne.n	8002768 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fac0 	bl	8002d20 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80027a0:	f002 fad4 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_ETH_Init+0x1ac>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	0c9a      	lsrs	r2, r3, #18
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3a01      	subs	r2, #1
 80027b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fa13 	bl	8002be4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80027d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80027d8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	22e0      	movs	r2, #224	; 0xe0
 80027f0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e04a      	b.n	800288c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f241 1308 	movw	r3, #4360	; 0x1108
 80027fe:	4413      	add	r3, r2
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_ETH_Init+0x1b0>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6952      	ldr	r2, [r2, #20]
 800280a:	0052      	lsls	r2, r2, #1
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	6809      	ldr	r1, [r1, #0]
 8002810:	431a      	orrs	r2, r3
 8002812:	f241 1308 	movw	r3, #4360	; 0x1108
 8002816:	440b      	add	r3, r1
 8002818:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fad8 	bl	8002dd0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fb1c 	bl	8002e5e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	3305      	adds	r3, #5
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	3303      	adds	r3, #3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	061a      	lsls	r2, r3, #24
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	3302      	adds	r3, #2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	3301      	adds	r3, #1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002864:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002872:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002874:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2210      	movs	r2, #16
 8002882:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2210      	movs	r2, #16
 8002888:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	58024400 	.word	0x58024400
 8002898:	431bde83 	.word	0x431bde83
 800289c:	ffff8001 	.word	0xffff8001

080028a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80028b2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	791b      	ldrb	r3, [r3, #4]
 80028b8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80028ba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028c2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	7b5b      	ldrb	r3, [r3, #13]
 80028c8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028ca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	7b9b      	ldrb	r3, [r3, #14]
 80028d0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	7bdb      	ldrb	r3, [r3, #15]
 80028d8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028da:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	7c12      	ldrb	r2, [r2, #16]
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d102      	bne.n	80028ea <ETH_SetMACConfig+0x4a>
 80028e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028e8:	e000      	b.n	80028ec <ETH_SetMACConfig+0x4c>
 80028ea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028ec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	7c52      	ldrb	r2, [r2, #17]
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	d102      	bne.n	80028fc <ETH_SetMACConfig+0x5c>
 80028f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028fa:	e000      	b.n	80028fe <ETH_SetMACConfig+0x5e>
 80028fc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028fe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	7c9b      	ldrb	r3, [r3, #18]
 8002904:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002906:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800290c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002912:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7f1b      	ldrb	r3, [r3, #28]
 8002918:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800291a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7f5b      	ldrb	r3, [r3, #29]
 8002920:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002922:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	7f92      	ldrb	r2, [r2, #30]
 8002928:	2a00      	cmp	r2, #0
 800292a:	d102      	bne.n	8002932 <ETH_SetMACConfig+0x92>
 800292c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002930:	e000      	b.n	8002934 <ETH_SetMACConfig+0x94>
 8002932:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002934:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	7fdb      	ldrb	r3, [r3, #31]
 800293a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800293c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002944:	2a00      	cmp	r2, #0
 8002946:	d102      	bne.n	800294e <ETH_SetMACConfig+0xae>
 8002948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294c:	e000      	b.n	8002950 <ETH_SetMACConfig+0xb0>
 800294e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002950:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002956:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800295e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002960:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b56      	ldr	r3, [pc, #344]	; (8002acc <ETH_SetMACConfig+0x22c>)
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	68f9      	ldr	r1, [r7, #12]
 800297a:	430b      	orrs	r3, r1
 800297c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800298a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800298c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002994:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002996:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800299e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80029a0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80029a8:	2a00      	cmp	r2, #0
 80029aa:	d102      	bne.n	80029b2 <ETH_SetMACConfig+0x112>
 80029ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b0:	e000      	b.n	80029b4 <ETH_SetMACConfig+0x114>
 80029b2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80029b4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <ETH_SetMACConfig+0x230>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <ETH_SetMACConfig+0x234>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	430b      	orrs	r3, r1
 80029f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a02:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d101      	bne.n	8002a12 <ETH_SetMACConfig+0x172>
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	e000      	b.n	8002a14 <ETH_SetMACConfig+0x174>
 8002a12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002a14:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a26:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002a3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f023 0103 	bic.w	r1, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a6a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	d101      	bne.n	8002a8e <ETH_SetMACConfig+0x1ee>
 8002a8a:	2240      	movs	r2, #64	; 0x40
 8002a8c:	e000      	b.n	8002a90 <ETH_SetMACConfig+0x1f0>
 8002a8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002a90:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002a98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a9a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002aa2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ab0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	00048083 	.word	0x00048083
 8002ad0:	c0f88000 	.word	0xc0f88000
 8002ad4:	fffffef0 	.word	0xfffffef0

08002ad8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <ETH_SetDMAConfig+0xf8>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	6809      	ldr	r1, [r1, #0]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002afe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	791b      	ldrb	r3, [r3, #4]
 8002b04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b0a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	7b1b      	ldrb	r3, [r3, #12]
 8002b10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b1e:	4413      	add	r3, r2
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <ETH_SetDMAConfig+0xfc>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6811      	ldr	r1, [r2, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b32:	440b      	add	r3, r1
 8002b34:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	7b5b      	ldrb	r3, [r3, #13]
 8002b3a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <ETH_SetDMAConfig+0x100>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002b5e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	7d1b      	ldrb	r3, [r3, #20]
 8002b68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b6a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	7f5b      	ldrb	r3, [r3, #29]
 8002b70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b7e:	4413      	add	r3, r2
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <ETH_SetDMAConfig+0x104>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6811      	ldr	r1, [r2, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b92:	440b      	add	r3, r1
 8002b94:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	7f1b      	ldrb	r3, [r3, #28]
 8002b9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bac:	4413      	add	r3, r2
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <ETH_SetDMAConfig+0x108>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6811      	ldr	r1, [r2, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bc0:	440b      	add	r3, r1
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	ffff87fd 	.word	0xffff87fd
 8002bd4:	ffff2ffe 	.word	0xffff2ffe
 8002bd8:	fffec000 	.word	0xfffec000
 8002bdc:	ffc0efef 	.word	0xffc0efef
 8002be0:	7fc0ffff 	.word	0x7fc0ffff

08002be4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0a4      	sub	sp, #144	; 0x90
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c3c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002c40:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002c66:	2300      	movs	r3, #0
 8002c68:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c8e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fde6 	bl	80028a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cf2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cfc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002d04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fee1 	bl	8002ad8 <ETH_SetDMAConfig>
}
 8002d16:	bf00      	nop
 8002d18:	3790      	adds	r7, #144	; 0x90
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d3a:	f002 f807 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8002d3e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d908      	bls.n	8002d5a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d804      	bhi.n	8002d5a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e027      	b.n	8002daa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d908      	bls.n	8002d74 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d204      	bcs.n	8002d74 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e01a      	b.n	8002daa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d303      	bcc.n	8002d84 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d911      	bls.n	8002da8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d908      	bls.n	8002d9e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d804      	bhi.n	8002d9e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e005      	b.n	8002daa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e000      	b.n	8002daa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002da8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	01312cff 	.word	0x01312cff
 8002dc0:	02160ebf 	.word	0x02160ebf
 8002dc4:	03938700 	.word	0x03938700
 8002dc8:	05f5e0ff 	.word	0x05f5e0ff
 8002dcc:	08f0d17f 	.word	0x08f0d17f

08002dd0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e01d      	b.n	8002e1a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	3206      	adds	r2, #6
 8002e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d9de      	bls.n	8002dde <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f241 132c 	movw	r3, #4396	; 0x112c
 8002e2e:	4413      	add	r3, r2
 8002e30:	2203      	movs	r2, #3
 8002e32:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68d9      	ldr	r1, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002e40:	4413      	add	r3, r2
 8002e42:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e024      	b.n	8002eb6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6919      	ldr	r1, [r3, #16]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d9d7      	bls.n	8002e6c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f241 1330 	movw	r3, #4400	; 0x1130
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6919      	ldr	r1, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f241 131c 	movw	r3, #4380	; 0x111c
 8002ef4:	4413      	add	r3, r2
 8002ef6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f08:	4413      	add	r3, r2
 8002f0a:	6019      	str	r1, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f26:	4b89      	ldr	r3, [pc, #548]	; (800314c <HAL_GPIO_Init+0x234>)
 8002f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f2a:	e194      	b.n	8003256 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8186 	beq.w	8003250 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d00b      	beq.n	8002f64 <HAL_GPIO_Init+0x4c>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d007      	beq.n	8002f64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d130      	bne.n	8002fc6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 0201 	and.w	r2, r3, #1
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0xee>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b12      	cmp	r3, #18
 8003004:	d123      	bne.n	800304e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	69b9      	ldr	r1, [r7, #24]
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80e0 	beq.w	8003250 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_GPIO_Init+0x238>)
 8003092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003096:	4a2e      	ldr	r2, [pc, #184]	; (8003150 <HAL_GPIO_Init+0x238>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_GPIO_Init+0x238>)
 80030a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ae:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_GPIO_Init+0x23c>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <HAL_GPIO_Init+0x240>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d052      	beq.n	8003180 <HAL_GPIO_Init+0x268>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_GPIO_Init+0x244>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_GPIO_Init+0x22e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_GPIO_Init+0x248>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02b      	beq.n	8003142 <HAL_GPIO_Init+0x22a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <HAL_GPIO_Init+0x24c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d025      	beq.n	800313e <HAL_GPIO_Init+0x226>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_GPIO_Init+0x250>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01f      	beq.n	800313a <HAL_GPIO_Init+0x222>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_GPIO_Init+0x254>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d019      	beq.n	8003136 <HAL_GPIO_Init+0x21e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_GPIO_Init+0x258>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_GPIO_Init+0x21a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_GPIO_Init+0x25c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00d      	beq.n	800312e <HAL_GPIO_Init+0x216>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_GPIO_Init+0x260>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <HAL_GPIO_Init+0x212>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a17      	ldr	r2, [pc, #92]	; (800317c <HAL_GPIO_Init+0x264>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_GPIO_Init+0x20e>
 8003122:	2309      	movs	r3, #9
 8003124:	e02d      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 8003126:	230a      	movs	r3, #10
 8003128:	e02b      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 800312a:	2308      	movs	r3, #8
 800312c:	e029      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 800312e:	2307      	movs	r3, #7
 8003130:	e027      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 8003132:	2306      	movs	r3, #6
 8003134:	e025      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 8003136:	2305      	movs	r3, #5
 8003138:	e023      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 800313a:	2304      	movs	r3, #4
 800313c:	e021      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 800313e:	2303      	movs	r3, #3
 8003140:	e01f      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 8003142:	2302      	movs	r3, #2
 8003144:	e01d      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 8003146:	2301      	movs	r3, #1
 8003148:	e01b      	b.n	8003182 <HAL_GPIO_Init+0x26a>
 800314a:	bf00      	nop
 800314c:	58000080 	.word	0x58000080
 8003150:	58024400 	.word	0x58024400
 8003154:	58000400 	.word	0x58000400
 8003158:	58020000 	.word	0x58020000
 800315c:	58020400 	.word	0x58020400
 8003160:	58020800 	.word	0x58020800
 8003164:	58020c00 	.word	0x58020c00
 8003168:	58021000 	.word	0x58021000
 800316c:	58021400 	.word	0x58021400
 8003170:	58021800 	.word	0x58021800
 8003174:	58021c00 	.word	0x58021c00
 8003178:	58022000 	.word	0x58022000
 800317c:	58022400 	.word	0x58022400
 8003180:	2300      	movs	r3, #0
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	f002 0203 	and.w	r2, r2, #3
 8003188:	0092      	lsls	r2, r2, #2
 800318a:	4093      	lsls	r3, r2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003192:	4938      	ldr	r1, [pc, #224]	; (8003274 <HAL_GPIO_Init+0x35c>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800321a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3301      	adds	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f ae63 	bne.w	8002f2c <HAL_GPIO_Init+0x14>
  }
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	3724      	adds	r7, #36	; 0x24
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	58000400 	.word	0x58000400

08003278 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_HSEM_FastTake+0x2c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3320      	adds	r3, #32
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_HSEM_FastTake+0x30>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	58026400 	.word	0x58026400
 80032a8:	80000300 	.word	0x80000300

080032ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032b6:	4906      	ldr	r1, [pc, #24]	; (80032d0 <HAL_HSEM_Release+0x24>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	58026400 	.word	0x58026400

080032d4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_HSEM_ActivateNotification+0x20>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4904      	ldr	r1, [pc, #16]	; (80032f4 <HAL_HSEM_ActivateNotification+0x20>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
#endif
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	58026500 	.word	0x58026500

080032f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_HSEM_IRQHandler+0x30>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_HSEM_IRQHandler+0x30>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	43db      	mvns	r3, r3
 800330c:	4906      	ldr	r1, [pc, #24]	; (8003328 <HAL_HSEM_IRQHandler+0x30>)
 800330e:	4013      	ands	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <HAL_HSEM_IRQHandler+0x30>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f007 fdd1 	bl	800aec0 <HAL_HSEM_FreeCallback>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	58026500 	.word	0x58026500

0800332c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd febe 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800337c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	e006      	b.n	80033b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d104      	bne.n	80033c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_I2C_Init+0x11c>)
 80033d2:	430b      	orrs	r3, r1
 80033d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69d9      	ldr	r1, [r3, #28]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	02008000 	.word	0x02008000

0800344c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	817b      	strh	r3, [r7, #10]
 800345e:	460b      	mov	r3, r1
 8003460:	813b      	strh	r3, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b20      	cmp	r3, #32
 8003470:	f040 80f9 	bne.w	8003666 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_I2C_Mem_Write+0x34>
 800347a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0ed      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_I2C_Mem_Write+0x4e>
 8003496:	2302      	movs	r3, #2
 8003498:	e0e6      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034a2:	f7fe fd03 	bl	8001eac <HAL_GetTick>
 80034a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2319      	movs	r3, #25
 80034ae:	2201      	movs	r2, #1
 80034b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f96f 	bl	8003798 <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0d1      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2221      	movs	r2, #33	; 0x21
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ec:	88f8      	ldrh	r0, [r7, #6]
 80034ee:	893a      	ldrh	r2, [r7, #8]
 80034f0:	8979      	ldrh	r1, [r7, #10]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	4603      	mov	r3, r0
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f8d3 	bl	80036a8 <I2C_RequestMemoryWrite>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0a9      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2bff      	cmp	r3, #255	; 0xff
 800351c:	d90e      	bls.n	800353c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	b2da      	uxtb	r2, r3
 800352a:	8979      	ldrh	r1, [r7, #10]
 800352c:	2300      	movs	r3, #0
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fa51 	bl	80039dc <I2C_TransferConfig>
 800353a:	e00f      	b.n	800355c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	b2da      	uxtb	r2, r3
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fa40 	bl	80039dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f959 	bl	8003818 <I2C_WaitOnTXISFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e07b      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d034      	beq.n	8003614 <HAL_I2C_Mem_Write+0x1c8>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d130      	bne.n	8003614 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	2200      	movs	r2, #0
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f8eb 	bl	8003798 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e04d      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2bff      	cmp	r3, #255	; 0xff
 80035d4:	d90e      	bls.n	80035f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	8979      	ldrh	r1, [r7, #10]
 80035e4:	2300      	movs	r3, #0
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9f5 	bl	80039dc <I2C_TransferConfig>
 80035f2:	e00f      	b.n	8003614 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	b2da      	uxtb	r2, r3
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	2300      	movs	r3, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f9e4 	bl	80039dc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d19e      	bne.n	800355c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f938 	bl	8003898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e01a      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2220      	movs	r2, #32
 8003638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_I2C_Mem_Write+0x224>)
 8003646:	400b      	ands	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	fe00e800 	.word	0xfe00e800

08003674 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
  }
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8979      	ldrh	r1, [r7, #10]
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <I2C_RequestMemoryWrite+0xa4>)
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f983 	bl	80039dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	69b9      	ldr	r1, [r7, #24]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f89c 	bl	8003818 <I2C_WaitOnTXISFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02c      	b.n	8003744 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
 80036fa:	e015      	b.n	8003728 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	69b9      	ldr	r1, [r7, #24]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f882 	bl	8003818 <I2C_WaitOnTXISFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e012      	b.n	8003744 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371e:	893b      	ldrh	r3, [r7, #8]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2200      	movs	r2, #0
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f830 	bl	8003798 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	80002000 	.word	0x80002000

08003750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d103      	bne.n	800376e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d007      	beq.n	800378c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	619a      	str	r2, [r3, #24]
  }
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a8:	e022      	b.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d01e      	beq.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	f7fe fb7b 	bl	8001eac <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d113      	bne.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e00f      	b.n	8003810 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	429a      	cmp	r2, r3
 800380c:	d0cd      	beq.n	80037aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003824:	e02c      	b.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f870 	bl	8003910 <I2C_IsAcknowledgeFailed>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e02a      	b.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d01e      	beq.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe fb33 	bl	8001eac <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d113      	bne.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e007      	b.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d1cb      	bne.n	8003826 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a4:	e028      	b.n	80038f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f830 	bl	8003910 <I2C_IsAcknowledgeFailed>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e026      	b.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fe faf7 	bl	8001eac <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d113      	bne.n	80038f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e007      	b.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b20      	cmp	r3, #32
 8003904:	d1cf      	bne.n	80038a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d151      	bne.n	80039ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800392a:	e022      	b.n	8003972 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d01e      	beq.n	8003972 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003934:	f7fe faba 	bl	8001eac <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <I2C_IsAcknowledgeFailed+0x3a>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e02e      	b.n	80039d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d1d5      	bne.n	800392c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2220      	movs	r2, #32
 800398e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7ff fedd 	bl	8003750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80039a2:	400b      	ands	r3, r1
 80039a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0204 	orr.w	r2, r3, #4
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	fe00e800 	.word	0xfe00e800

080039dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	4613      	mov	r3, r2
 80039ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	0d5b      	lsrs	r3, r3, #21
 80039f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <I2C_TransferConfig+0x58>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	43db      	mvns	r3, r3
 8003a02:	ea02 0103 	and.w	r1, r2, r3
 8003a06:	897b      	ldrh	r3, [r7, #10]
 8003a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a0c:	7a7b      	ldrb	r3, [r7, #9]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	03ff63ff 	.word	0x03ff63ff

08003a38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d138      	bne.n	8003ac0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e032      	b.n	8003ac2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	; 0x24
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d139      	bne.n	8003b58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e033      	b.n	8003b5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2224      	movs	r2, #36	; 0x24
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b68:	b08f      	sub	sp, #60	; 0x3c
 8003b6a:	af0a      	add	r7, sp, #40	; 0x28
 8003b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e116      	b.n	8003da6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe f850 	bl	8001c38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 f8f4 	bl	8007da4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	687e      	ldr	r6, [r7, #4]
 8003bc4:	466d      	mov	r5, sp
 8003bc6:	f106 0410 	add.w	r4, r6, #16
 8003bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bda:	1d33      	adds	r3, r6, #4
 8003bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bde:	6838      	ldr	r0, [r7, #0]
 8003be0:	f004 f872 	bl	8007cc8 <USB_CoreInit>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0d7      	b.n	8003da6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 f8e2 	bl	8007dc6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e04a      	b.n	8003c9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	333d      	adds	r3, #61	; 0x3d
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c1c:	7bfa      	ldrb	r2, [r7, #15]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	333c      	adds	r3, #60	; 0x3c
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	b298      	uxth	r0, r3
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3342      	adds	r3, #66	; 0x42
 8003c44:	4602      	mov	r2, r0
 8003c46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	333f      	adds	r3, #63	; 0x3f
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3344      	adds	r3, #68	; 0x44
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3348      	adds	r3, #72	; 0x48
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3350      	adds	r3, #80	; 0x50
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3af      	bcc.n	8003c08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e044      	b.n	8003d38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	3301      	adds	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3b5      	bcc.n	8003cae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	687e      	ldr	r6, [r7, #4]
 8003d4a:	466d      	mov	r5, sp
 8003d4c:	f106 0410 	add.w	r4, r6, #16
 8003d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d60:	1d33      	adds	r3, r6, #4
 8003d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d64:	6838      	ldr	r0, [r7, #0]
 8003d66:	f004 f859 	bl	8007e1c <USB_DevInit>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e014      	b.n	8003da6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d102      	bne.n	8003d9a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f80b 	bl	8003db0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 f9fb 	bl	800819a <USB_DevDisconnect>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	10000003 	.word	0x10000003

08003df8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d00a      	beq.n	8003e22 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d001      	beq.n	8003e1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e040      	b.n	8003ea0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e03e      	b.n	8003ea0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003e2a:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e32:	f7fe f83b 	bl	8001eac <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e38:	e009      	b.n	8003e4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e3a:	f7fe f837 	bl	8001eac <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e48:	d901      	bls.n	8003e4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e028      	b.n	8003ea0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b1e      	cmp	r3, #30
 8003e60:	d008      	beq.n	8003e74 <HAL_PWREx_ConfigSupply+0x7c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b2e      	cmp	r3, #46	; 0x2e
 8003e66:	d005      	beq.n	8003e74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b1d      	cmp	r3, #29
 8003e6c:	d002      	beq.n	8003e74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b2d      	cmp	r3, #45	; 0x2d
 8003e72:	d114      	bne.n	8003e9e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003e74:	f7fe f81a 	bl	8001eac <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e7a:	e009      	b.n	8003e90 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e7c:	f7fe f816 	bl	8001eac <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e8a:	d901      	bls.n	8003e90 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	58024800 	.word	0x58024800

08003eac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	60d3      	str	r3, [r2, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	58024800 	.word	0x58024800

08003ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e3ff      	b.n	80046de <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8087 	beq.w	8003ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eec:	4b99      	ldr	r3, [pc, #612]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ef6:	4b97      	ldr	r3, [pc, #604]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	d007      	beq.n	8003f12 <HAL_RCC_OscConfig+0x46>
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	2b18      	cmp	r3, #24
 8003f06:	d110      	bne.n	8003f2a <HAL_RCC_OscConfig+0x5e>
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d10b      	bne.n	8003f2a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f12:	4b90      	ldr	r3, [pc, #576]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d06c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x12c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d168      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e3d9      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x76>
 8003f34:	4b87      	ldr	r3, [pc, #540]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a86      	ldr	r2, [pc, #536]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e02e      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x98>
 8003f4a:	4b82      	ldr	r3, [pc, #520]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a81      	ldr	r2, [pc, #516]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0xbc>
 8003f6e:	4b79      	ldr	r3, [pc, #484]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a78      	ldr	r2, [pc, #480]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd4>
 8003f88:	4b72      	ldr	r3, [pc, #456]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a71      	ldr	r2, [pc, #452]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd ff80 	bl	8001eac <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd ff7c 	bl	8001eac <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e38d      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fc2:	4b64      	ldr	r3, [pc, #400]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xe4>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd ff6c 	bl	8001eac <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fd ff68 	bl	8001eac <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e379      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fea:	4b5a      	ldr	r3, [pc, #360]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x10c>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80ae 	beq.w	8004164 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004008:	4b52      	ldr	r3, [pc, #328]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004010:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004012:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_RCC_OscConfig+0x162>
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2b18      	cmp	r3, #24
 8004022:	d13a      	bne.n	800409a <HAL_RCC_OscConfig+0x1ce>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d135      	bne.n	800409a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402e:	4b49      	ldr	r3, [pc, #292]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x17a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e34b      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	f7fd ff61 	bl	8001f0c <HAL_GetREVID>
 800404a:	4603      	mov	r3, r0
 800404c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004050:	4293      	cmp	r3, r2
 8004052:	d817      	bhi.n	8004084 <HAL_RCC_OscConfig+0x1b8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d108      	bne.n	800406e <HAL_RCC_OscConfig+0x1a2>
 800405c:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004064:	4a3b      	ldr	r2, [pc, #236]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406c:	e07a      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	031b      	lsls	r3, r3, #12
 800407c:	4935      	ldr	r1, [pc, #212]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004082:	e06f      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004084:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	4930      	ldr	r1, [pc, #192]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	e064      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d045      	beq.n	800412e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040a2:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0219 	bic.w	r2, r3, #25
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4929      	ldr	r1, [pc, #164]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fd fefa 	bl	8001eac <HAL_GetTick>
 80040b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fd fef6 	bl	8001eac <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e307      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040da:	f7fd ff17 	bl	8001f0c <HAL_GetREVID>
 80040de:	4603      	mov	r3, r0
 80040e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d817      	bhi.n	8004118 <HAL_RCC_OscConfig+0x24c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d108      	bne.n	8004102 <HAL_RCC_OscConfig+0x236>
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fe:	6053      	str	r3, [r2, #4]
 8004100:	e030      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	031b      	lsls	r3, r3, #12
 8004110:	4910      	ldr	r1, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
 8004116:	e025      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	490b      	ldr	r1, [pc, #44]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	e01a      	b.n	8004164 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd feb7 	bl	8001eac <HAL_GetTick>
 800413e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004142:	f7fd feb3 	bl	8001eac <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d903      	bls.n	8004158 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e2c4      	b.n	80046de <HAL_RCC_OscConfig+0x812>
 8004154:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004158:	4ba4      	ldr	r3, [pc, #656]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ee      	bne.n	8004142 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a9 	beq.w	80042c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004172:	4b9e      	ldr	r3, [pc, #632]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800417a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800417c:	4b9b      	ldr	r3, [pc, #620]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d007      	beq.n	8004198 <HAL_RCC_OscConfig+0x2cc>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b18      	cmp	r3, #24
 800418c:	d13a      	bne.n	8004204 <HAL_RCC_OscConfig+0x338>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d135      	bne.n	8004204 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004198:	4b94      	ldr	r3, [pc, #592]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_OscConfig+0x2e4>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e296      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b0:	f7fd feac 	bl	8001f0c <HAL_GetREVID>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d817      	bhi.n	80041ee <HAL_RCC_OscConfig+0x322>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d108      	bne.n	80041d8 <HAL_RCC_OscConfig+0x30c>
 80041c6:	4b89      	ldr	r3, [pc, #548]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80041ce:	4a87      	ldr	r2, [pc, #540]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80041d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041d6:	e075      	b.n	80042c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041d8:	4b84      	ldr	r3, [pc, #528]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	069b      	lsls	r3, r3, #26
 80041e6:	4981      	ldr	r1, [pc, #516]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ec:	e06a      	b.n	80042c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ee:	4b7f      	ldr	r3, [pc, #508]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	497b      	ldr	r1, [pc, #492]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004202:	e05f      	b.n	80042c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d042      	beq.n	8004292 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800420c:	4b77      	ldr	r3, [pc, #476]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a76      	ldr	r2, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fe48 	bl	8001eac <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004220:	f7fd fe44 	bl	8001eac <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e255      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004232:	4b6e      	ldr	r3, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800423e:	f7fd fe65 	bl	8001f0c <HAL_GetREVID>
 8004242:	4603      	mov	r3, r0
 8004244:	f241 0203 	movw	r2, #4099	; 0x1003
 8004248:	4293      	cmp	r3, r2
 800424a:	d817      	bhi.n	800427c <HAL_RCC_OscConfig+0x3b0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	2b20      	cmp	r3, #32
 8004252:	d108      	bne.n	8004266 <HAL_RCC_OscConfig+0x39a>
 8004254:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800425c:	4a63      	ldr	r2, [pc, #396]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800425e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004262:	6053      	str	r3, [r2, #4]
 8004264:	e02e      	b.n	80042c4 <HAL_RCC_OscConfig+0x3f8>
 8004266:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	069b      	lsls	r3, r3, #26
 8004274:	495d      	ldr	r1, [pc, #372]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
 800427a:	e023      	b.n	80042c4 <HAL_RCC_OscConfig+0x3f8>
 800427c:	4b5b      	ldr	r3, [pc, #364]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	4958      	ldr	r1, [pc, #352]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800428c:	4313      	orrs	r3, r2
 800428e:	60cb      	str	r3, [r1, #12]
 8004290:	e018      	b.n	80042c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004292:	4b56      	ldr	r3, [pc, #344]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a55      	ldr	r2, [pc, #340]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd fe05 	bl	8001eac <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042a6:	f7fd fe01 	bl	8001eac <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e212      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042b8:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d036      	beq.n	800433e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d019      	beq.n	800430c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	4a43      	ldr	r2, [pc, #268]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fde2 	bl	8001eac <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd fdde 	bl	8001eac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e1ef      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x420>
 800430a:	e018      	b.n	800433e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b37      	ldr	r3, [pc, #220]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	4a36      	ldr	r2, [pc, #216]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fd fdc8 	bl	8001eac <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004320:	f7fd fdc4 	bl	8001eac <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1d5      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004332:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d036      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d019      	beq.n	8004386 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a25      	ldr	r2, [pc, #148]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800435c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800435e:	f7fd fda5 	bl	8001eac <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004366:	f7fd fda1 	bl	8001eac <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e1b2      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x49a>
 8004384:	e018      	b.n	80043b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004386:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 800438c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004390:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004392:	f7fd fd8b 	bl	8001eac <HAL_GetTick>
 8004396:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800439a:	f7fd fd87 	bl	8001eac <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e198      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RCC_OscConfig+0x520>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8085 	beq.w	80044d0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x524>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x524>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d2:	f7fd fd6b 	bl	8001eac <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d8:	e00c      	b.n	80043f4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fd fd67 	bl	8001eac <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b64      	cmp	r3, #100	; 0x64
 80043e6:	d905      	bls.n	80043f4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e178      	b.n	80046de <HAL_RCC_OscConfig+0x812>
 80043ec:	58024400 	.word	0x58024400
 80043f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f4:	4b96      	ldr	r3, [pc, #600]	; (8004650 <HAL_RCC_OscConfig+0x784>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ec      	beq.n	80043da <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x54a>
 8004408:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a91      	ldr	r2, [pc, #580]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
 8004414:	e02d      	b.n	8004472 <HAL_RCC_OscConfig+0x5a6>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x56c>
 800441e:	4b8d      	ldr	r3, [pc, #564]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a8c      	ldr	r2, [pc, #560]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	4b8a      	ldr	r3, [pc, #552]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4a89      	ldr	r2, [pc, #548]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	6713      	str	r3, [r2, #112]	; 0x70
 8004436:	e01c      	b.n	8004472 <HAL_RCC_OscConfig+0x5a6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0x58e>
 8004440:	4b84      	ldr	r3, [pc, #528]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a83      	ldr	r2, [pc, #524]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	4b81      	ldr	r3, [pc, #516]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a80      	ldr	r2, [pc, #512]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
 8004458:	e00b      	b.n	8004472 <HAL_RCC_OscConfig+0x5a6>
 800445a:	4b7e      	ldr	r3, [pc, #504]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a7d      	ldr	r2, [pc, #500]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	4b7b      	ldr	r3, [pc, #492]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a7a      	ldr	r2, [pc, #488]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d015      	beq.n	80044a6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fd17 	bl	8001eac <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fd13 	bl	8001eac <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e122      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004498:	4b6e      	ldr	r3, [pc, #440]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ee      	beq.n	8004482 <HAL_RCC_OscConfig+0x5b6>
 80044a4:	e014      	b.n	80044d0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fd fd01 	bl	8001eac <HAL_GetTick>
 80044aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fcfd 	bl	8001eac <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e10c      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044c4:	4b63      	ldr	r3, [pc, #396]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8101 	beq.w	80046dc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044da:	4b5e      	ldr	r3, [pc, #376]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e2:	2b18      	cmp	r3, #24
 80044e4:	f000 80bc 	beq.w	8004660 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	f040 8095 	bne.w	800461c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a57      	ldr	r2, [pc, #348]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd fcd5 	bl	8001eac <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fd fcd1 	bl	8001eac <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0e2      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004518:	4b4e      	ldr	r3, [pc, #312]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004528:	4b4b      	ldr	r3, [pc, #300]	; (8004658 <HAL_RCC_OscConfig+0x78c>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	430a      	orrs	r2, r1
 8004538:	4946      	ldr	r1, [pc, #280]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800453a:	4313      	orrs	r3, r2
 800453c:	628b      	str	r3, [r1, #40]	; 0x28
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	3b01      	subs	r3, #1
 8004544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	3b01      	subs	r3, #1
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	b29b      	uxth	r3, r3
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	3b01      	subs	r3, #1
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	3b01      	subs	r3, #1
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800456e:	4939      	ldr	r1, [pc, #228]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004570:	4313      	orrs	r3, r2
 8004572:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004574:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	4a36      	ldr	r2, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	4b35      	ldr	r3, [pc, #212]	; (800465c <HAL_RCC_OscConfig+0x790>)
 8004586:	4013      	ands	r3, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800458c:	00d2      	lsls	r2, r2, #3
 800458e:	4931      	ldr	r1, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004590:	4313      	orrs	r3, r2
 8004592:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004594:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	f023 020c 	bic.w	r2, r3, #12
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	492c      	ldr	r1, [pc, #176]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045a6:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	f023 0202 	bic.w	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4928      	ldr	r1, [pc, #160]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a25      	ldr	r2, [pc, #148]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4b23      	ldr	r3, [pc, #140]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045d0:	4b20      	ldr	r3, [pc, #128]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80045dc:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fc5a 	bl	8001eac <HAL_GetTick>
 80045f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd fc56 	bl	8001eac <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e067      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x730>
 800461a:	e05f      	b.n	80046dc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd fc40 	bl	8001eac <HAL_GetTick>
 800462c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd fc3c 	bl	8001eac <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04d      	b.n	80046de <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <HAL_RCC_OscConfig+0x788>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x764>
 800464e:	e045      	b.n	80046dc <HAL_RCC_OscConfig+0x810>
 8004650:	58024800 	.word	0x58024800
 8004654:	58024400 	.word	0x58024400
 8004658:	fffffc0c 	.word	0xfffffc0c
 800465c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCC_OscConfig+0x81c>)
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_RCC_OscConfig+0x81c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b01      	cmp	r3, #1
 8004672:	d031      	beq.n	80046d8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f003 0203 	and.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d12a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d122      	bne.n	80046d8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d11a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d111      	bne.n	80046d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d108      	bne.n	80046d8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0e1b      	lsrs	r3, r3, #24
 80046ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3730      	adds	r7, #48	; 0x30
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400

080046ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e19c      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b8a      	ldr	r3, [pc, #552]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d910      	bls.n	8004730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b87      	ldr	r3, [pc, #540]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 020f 	bic.w	r2, r3, #15
 8004716:	4985      	ldr	r1, [pc, #532]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b83      	ldr	r3, [pc, #524]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e184      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	4b7b      	ldr	r3, [pc, #492]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004748:	429a      	cmp	r2, r3
 800474a:	d908      	bls.n	800475e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800474c:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	4975      	ldr	r1, [pc, #468]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800475a:	4313      	orrs	r3, r2
 800475c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695a      	ldr	r2, [r3, #20]
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004776:	429a      	cmp	r2, r3
 8004778:	d908      	bls.n	800478c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800477a:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	496a      	ldr	r1, [pc, #424]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004788:	4313      	orrs	r3, r2
 800478a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d908      	bls.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047a8:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	495e      	ldr	r1, [pc, #376]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d908      	bls.n	80047e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047d6:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4953      	ldr	r1, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	429a      	cmp	r2, r3
 8004802:	d908      	bls.n	8004816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f023 020f 	bic.w	r2, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4947      	ldr	r1, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004812:	4313      	orrs	r3, r2
 8004814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d055      	beq.n	80048ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004822:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	4940      	ldr	r1, [pc, #256]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004830:	4313      	orrs	r3, r2
 8004832:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d107      	bne.n	800484c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800483c:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d121      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0f6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d115      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0ea      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0de      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487c:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0d6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800488c:	4b28      	ldr	r3, [pc, #160]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f023 0207 	bic.w	r2, r3, #7
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4925      	ldr	r1, [pc, #148]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800489a:	4313      	orrs	r3, r2
 800489c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fd fb05 	bl	8001eac <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a4:	e00a      	b.n	80048bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a6:	f7fd fb01 	bl	8001eac <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0be      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d1eb      	bne.n	80048a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d208      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ea:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f023 020f 	bic.w	r2, r3, #15
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d214      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 020f 	bic.w	r2, r3, #15
 8004912:	4906      	ldr	r1, [pc, #24]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e086      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
 800492c:	52002000 	.word	0x52002000
 8004930:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800494c:	429a      	cmp	r2, r3
 800494e:	d208      	bcs.n	8004962 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004950:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4939      	ldr	r1, [pc, #228]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 800495e:	4313      	orrs	r3, r2
 8004960:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497a:	429a      	cmp	r2, r3
 800497c:	d208      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	492e      	ldr	r1, [pc, #184]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 800498c:	4313      	orrs	r3, r2
 800498e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d208      	bcs.n	80049be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	4922      	ldr	r1, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d208      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049da:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4917      	ldr	r1, [pc, #92]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049ec:	f000 f834 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	4912      	ldr	r1, [pc, #72]	; (8004a48 <HAL_RCC_ClockConfig+0x35c>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <HAL_RCC_ClockConfig+0x35c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x360>)
 8004a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x364>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x368>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd f9f2 	bl	8001e18 <HAL_InitTick>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	0800fd40 	.word	0x0800fd40
 8004a4c:	24000004 	.word	0x24000004
 8004a50:	24000000 	.word	0x24000000
 8004a54:	24000008 	.word	0x24000008

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5e:	4bb3      	ldr	r3, [pc, #716]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a66:	2b18      	cmp	r3, #24
 8004a68:	f200 8155 	bhi.w	8004d16 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004ad9 	.word	0x08004ad9
 8004a78:	08004d17 	.word	0x08004d17
 8004a7c:	08004d17 	.word	0x08004d17
 8004a80:	08004d17 	.word	0x08004d17
 8004a84:	08004d17 	.word	0x08004d17
 8004a88:	08004d17 	.word	0x08004d17
 8004a8c:	08004d17 	.word	0x08004d17
 8004a90:	08004d17 	.word	0x08004d17
 8004a94:	08004aff 	.word	0x08004aff
 8004a98:	08004d17 	.word	0x08004d17
 8004a9c:	08004d17 	.word	0x08004d17
 8004aa0:	08004d17 	.word	0x08004d17
 8004aa4:	08004d17 	.word	0x08004d17
 8004aa8:	08004d17 	.word	0x08004d17
 8004aac:	08004d17 	.word	0x08004d17
 8004ab0:	08004d17 	.word	0x08004d17
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004d17 	.word	0x08004d17
 8004abc:	08004d17 	.word	0x08004d17
 8004ac0:	08004d17 	.word	0x08004d17
 8004ac4:	08004d17 	.word	0x08004d17
 8004ac8:	08004d17 	.word	0x08004d17
 8004acc:	08004d17 	.word	0x08004d17
 8004ad0:	08004d17 	.word	0x08004d17
 8004ad4:	08004b0b 	.word	0x08004b0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad8:	4b94      	ldr	r3, [pc, #592]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ae4:	4b91      	ldr	r3, [pc, #580]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	4a90      	ldr	r2, [pc, #576]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004af6:	e111      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004af8:	4b8d      	ldr	r3, [pc, #564]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004afa:	61bb      	str	r3, [r7, #24]
    break;
 8004afc:	e10e      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004afe:	4b8d      	ldr	r3, [pc, #564]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b00:	61bb      	str	r3, [r7, #24]
    break;
 8004b02:	e10b      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b04:	4b8c      	ldr	r3, [pc, #560]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b06:	61bb      	str	r3, [r7, #24]
    break;
 8004b08:	e108      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b0a:	4b88      	ldr	r3, [pc, #544]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b14:	4b85      	ldr	r3, [pc, #532]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b20:	4b82      	ldr	r3, [pc, #520]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b2a:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	08db      	lsrs	r3, r3, #3
 8004b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80e1 	beq.w	8004d10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	f000 8083 	beq.w	8004c5c <HAL_RCC_GetSysClockFreq+0x204>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	f200 80a1 	bhi.w	8004ca0 <HAL_RCC_GetSysClockFreq+0x248>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x114>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d056      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b6a:	e099      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02d      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b78:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	4a6b      	ldr	r2, [pc, #428]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b62      	ldr	r3, [pc, #392]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004bd2:	e087      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c16:	e065      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5a:	e043      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004d48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c9e:	e021      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cee:	3301      	adds	r3, #1
 8004cf0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d08:	ee17 3a90 	vmov	r3, s15
 8004d0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d0e:	e005      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d18:	61bb      	str	r3, [r7, #24]
    break;
 8004d1a:	bf00      	nop
  }

  return sysclockfreq;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	; 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	03d09000 	.word	0x03d09000
 8004d34:	003d0900 	.word	0x003d0900
 8004d38:	007a1200 	.word	0x007a1200
 8004d3c:	46000000 	.word	0x46000000
 8004d40:	4c742400 	.word	0x4c742400
 8004d44:	4a742400 	.word	0x4a742400
 8004d48:	4af42400 	.word	0x4af42400

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d52:	f7ff fe81 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	490f      	ldr	r1, [pc, #60]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d64:	5ccb      	ldrb	r3, [r1, r3]
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	fa22 f303 	lsr.w	r3, r2, r3
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	0800fd40 	.word	0x0800fd40
 8004da4:	24000004 	.word	0x24000004
 8004da8:	24000000 	.word	0x24000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004db0:	f7ff ffcc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	0800fd40 	.word	0x0800fd40

08004dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ddc:	f7ff ffb6 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4904      	ldr	r1, [pc, #16]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	0800fd40 	.word	0x0800fd40

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d03f      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e28:	d02a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e2e:	d824      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e34:	d018      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e3a:	d81e      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e44:	d007      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e46:	e018      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e48:	4bab      	ldr	r3, [pc, #684]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4aaa      	ldr	r2, [pc, #680]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e54:	e015      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f9cf 	bl	8006200 <RCCEx_PLL2_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e66:	e00c      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3324      	adds	r3, #36	; 0x24
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fa78 	bl	8006364 <RCCEx_PLL3_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e78:	e003      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e88:	4b9b      	ldr	r3, [pc, #620]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e94:	4998      	ldr	r1, [pc, #608]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	650b      	str	r3, [r1, #80]	; 0x50
 8004e9a:	e001      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d03d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d826      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ed1 	.word	0x08004ed1
 8004ec0:	08004edf 	.word	0x08004edf
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004f09 	.word	0x08004f09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed0:	4b89      	ldr	r3, [pc, #548]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4a88      	ldr	r2, [pc, #544]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004edc:	e015      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 f98b 	bl	8006200 <RCCEx_PLL2_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eee:	e00c      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3324      	adds	r3, #36	; 0x24
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 fa34 	bl	8006364 <RCCEx_PLL3_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f10:	4b79      	ldr	r3, [pc, #484]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f023 0207 	bic.w	r2, r3, #7
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	4976      	ldr	r1, [pc, #472]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	650b      	str	r3, [r1, #80]	; 0x50
 8004f22:	e001      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d042      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3c:	d02b      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f42:	d825      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f44:	2bc0      	cmp	r3, #192	; 0xc0
 8004f46:	d028      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f48:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4a:	d821      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d016      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d81d      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d007      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004f5c:	e018      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5e:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	4a65      	ldr	r2, [pc, #404]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f6a:	e017      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 f944 	bl	8006200 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f7c:	e00e      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 f9ed 	bl	8006364 <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e005      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fa2:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	4952      	ldr	r1, [pc, #328]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	650b      	str	r3, [r1, #80]	; 0x50
 8004fb4:	e001      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d049      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd0:	d030      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd6:	d82a      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fdc:	d02c      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004fde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fe2:	d824      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d018      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d81e      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff8:	d007      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ffa:	e018      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a3d      	ldr	r2, [pc, #244]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005008:	e017      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 f8f5 	bl	8006200 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800501a:	e00e      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f99e 	bl	8006364 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800502c:	e005      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
      break;
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005040:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800504e:	492a      	ldr	r1, [pc, #168]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	658b      	str	r3, [r1, #88]	; 0x58
 8005054:	e001      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005062:	2b00      	cmp	r3, #0
 8005064:	d04c      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800506c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005070:	d030      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005076:	d82a      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005078:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800507c:	d02c      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800507e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005082:	d824      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005088:	d018      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800508a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508e:	d81e      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005098:	d007      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800509a:	e018      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050a8:	e017      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f8a5 	bl	8006200 <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050ba:	e00e      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 f94e 	bl	8006364 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050cc:	e005      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
      break;
 80050d2:	e002      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80050d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050da:	7dfb      	ldrb	r3, [r7, #23]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10d      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050ee:	4902      	ldr	r1, [pc, #8]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	658b      	str	r3, [r1, #88]	; 0x58
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d032      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005110:	2b30      	cmp	r3, #48	; 0x30
 8005112:	d01c      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005114:	2b30      	cmp	r3, #48	; 0x30
 8005116:	d817      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d00c      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d813      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d016      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005124:	2b10      	cmp	r3, #16
 8005126:	d10f      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005128:	4baf      	ldr	r3, [pc, #700]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4aae      	ldr	r2, [pc, #696]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800512e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005134:	e00e      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f85f 	bl	8006200 <RCCEx_PLL2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005146:	e005      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	e002      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800515a:	4ba3      	ldr	r3, [pc, #652]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	49a0      	ldr	r1, [pc, #640]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d047      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005186:	d030      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518c:	d82a      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800518e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005192:	d02c      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005198:	d824      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800519a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519e:	d018      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80051a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a4:	d81e      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d007      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80051b0:	e018      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	4a8c      	ldr	r2, [pc, #560]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051be:	e017      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 f81a 	bl	8006200 <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051d0:	e00e      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3324      	adds	r3, #36	; 0x24
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 f8c3 	bl	8006364 <RCCEx_PLL3_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051e2:	e005      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80051ea:	bf00      	nop
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80051ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051f6:	4b7c      	ldr	r3, [pc, #496]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005202:	4979      	ldr	r1, [pc, #484]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	650b      	str	r3, [r1, #80]	; 0x50
 8005208:	e001      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d049      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005222:	d02e      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005228:	d828      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800522a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800522e:	d02a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005234:	d822      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005236:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800523a:	d026      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800523c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005240:	d81c      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005246:	d010      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524c:	d816      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01d      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005256:	d111      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	2101      	movs	r1, #1
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ffce 	bl	8006200 <RCCEx_PLL2_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005268:	e012      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	; 0x24
 800526e:	2101      	movs	r1, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f877 	bl	8006364 <RCCEx_PLL3_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800527a:	e009      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	75fb      	strb	r3, [r7, #23]
      break;
 8005280:	e006      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005282:	bf00      	nop
 8005284:	e004      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005286:	bf00      	nop
 8005288:	e002      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800528a:	bf00      	nop
 800528c:	e000      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800528e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005296:	4b54      	ldr	r3, [pc, #336]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	4951      	ldr	r1, [pc, #324]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	650b      	str	r3, [r1, #80]	; 0x50
 80052a8:	e001      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d04b      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c4:	d02e      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80052c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ca:	d828      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d02a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d822      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052dc:	d026      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80052de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e2:	d81c      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e8:	d010      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ee:	d816      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01d      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80052f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f8:	d111      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	2101      	movs	r1, #1
 8005300:	4618      	mov	r0, r3
 8005302:	f000 ff7d 	bl	8006200 <RCCEx_PLL2_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800530a:	e012      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f001 f826 	bl	8006364 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800531c:	e009      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
      break;
 8005322:	e006      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005324:	bf00      	nop
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005346:	4928      	ldr	r1, [pc, #160]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005348:	4313      	orrs	r3, r2
 800534a:	658b      	str	r3, [r1, #88]	; 0x58
 800534c:	e001      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d02f      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005366:	d00e      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d814      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d015      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005376:	d10f      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800537e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005384:	e00c      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f000 ff37 	bl	8006200 <RCCEx_PLL2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005396:	e003      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
      break;
 800539c:	e000      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800539e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b2:	490d      	ldr	r1, [pc, #52]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	650b      	str	r3, [r1, #80]	; 0x50
 80053b8:	e001      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d033      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d81c      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	08005413 	.word	0x08005413
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053fb 	.word	0x080053fb
 80053e4:	08005413 	.word	0x08005413
 80053e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4bb8      	ldr	r3, [pc, #736]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4ab7      	ldr	r2, [pc, #732]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053f8:	e00c      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fefd 	bl	8006200 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
      break;
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800541a:	4bad      	ldr	r3, [pc, #692]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	49aa      	ldr	r1, [pc, #680]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800542c:	e001      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8086 	beq.w	800554c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005440:	4ba4      	ldr	r3, [pc, #656]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4aa3      	ldr	r2, [pc, #652]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544c:	f7fc fd2e 	bl	8001eac <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005452:	e009      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fc fd2a 	bl	8001eac <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d902      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	75fb      	strb	r3, [r7, #23]
        break;
 8005466:	e005      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005468:	4b9a      	ldr	r3, [pc, #616]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ef      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d166      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800547a:	4b95      	ldr	r3, [pc, #596]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800547c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005484:	4053      	eors	r3, r2
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800548e:	4b90      	ldr	r3, [pc, #576]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005498:	4b8d      	ldr	r3, [pc, #564]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a8c      	ldr	r2, [pc, #560]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800549e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a4:	4b8a      	ldr	r3, [pc, #552]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a89      	ldr	r2, [pc, #548]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054b0:	4a87      	ldr	r2, [pc, #540]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d115      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc fcf3 	bl	8001eac <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c8:	e00b      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc fcef 	bl	8001eac <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	75fb      	strb	r3, [r7, #23]
            break;
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054e2:	4b7b      	ldr	r3, [pc, #492]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ed      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d126      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d10d      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005504:	4b72      	ldr	r3, [pc, #456]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005512:	0919      	lsrs	r1, r3, #4
 8005514:	4b70      	ldr	r3, [pc, #448]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005516:	400b      	ands	r3, r1
 8005518:	496d      	ldr	r1, [pc, #436]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005520:	4b6b      	ldr	r3, [pc, #428]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	4a6a      	ldr	r2, [pc, #424]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005526:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800552a:	6113      	str	r3, [r2, #16]
 800552c:	4b68      	ldr	r3, [pc, #416]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800552e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	4965      	ldr	r1, [pc, #404]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	670b      	str	r3, [r1, #112]	; 0x70
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	75bb      	strb	r3, [r7, #22]
 8005546:	e001      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d07e      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555c:	2b28      	cmp	r3, #40	; 0x28
 800555e:	d867      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	08005637 	.word	0x08005637
 800556c:	08005631 	.word	0x08005631
 8005570:	08005631 	.word	0x08005631
 8005574:	08005631 	.word	0x08005631
 8005578:	08005631 	.word	0x08005631
 800557c:	08005631 	.word	0x08005631
 8005580:	08005631 	.word	0x08005631
 8005584:	08005631 	.word	0x08005631
 8005588:	0800560d 	.word	0x0800560d
 800558c:	08005631 	.word	0x08005631
 8005590:	08005631 	.word	0x08005631
 8005594:	08005631 	.word	0x08005631
 8005598:	08005631 	.word	0x08005631
 800559c:	08005631 	.word	0x08005631
 80055a0:	08005631 	.word	0x08005631
 80055a4:	08005631 	.word	0x08005631
 80055a8:	0800561f 	.word	0x0800561f
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005631 	.word	0x08005631
 80055b4:	08005631 	.word	0x08005631
 80055b8:	08005631 	.word	0x08005631
 80055bc:	08005631 	.word	0x08005631
 80055c0:	08005631 	.word	0x08005631
 80055c4:	08005631 	.word	0x08005631
 80055c8:	08005637 	.word	0x08005637
 80055cc:	08005631 	.word	0x08005631
 80055d0:	08005631 	.word	0x08005631
 80055d4:	08005631 	.word	0x08005631
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005631 	.word	0x08005631
 80055e0:	08005631 	.word	0x08005631
 80055e4:	08005631 	.word	0x08005631
 80055e8:	08005637 	.word	0x08005637
 80055ec:	08005631 	.word	0x08005631
 80055f0:	08005631 	.word	0x08005631
 80055f4:	08005631 	.word	0x08005631
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005631 	.word	0x08005631
 8005604:	08005631 	.word	0x08005631
 8005608:	08005637 	.word	0x08005637
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fdf4 	bl	8006200 <RCCEx_PLL2_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800561c:	e00c      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	2101      	movs	r1, #1
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fe9d 	bl	8006364 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800562e:	e003      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564a:	4921      	ldr	r1, [pc, #132]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800564c:	4313      	orrs	r3, r2
 800564e:	654b      	str	r3, [r1, #84]	; 0x54
 8005650:	e001      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d03e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005666:	2b05      	cmp	r3, #5
 8005668:	d820      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056b3 	.word	0x080056b3
 8005674:	08005689 	.word	0x08005689
 8005678:	0800569b 	.word	0x0800569b
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056b3 	.word	0x080056b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	2101      	movs	r1, #1
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fdb6 	bl	8006200 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005698:	e00c      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3324      	adds	r3, #36	; 0x24
 800569e:	2101      	movs	r1, #1
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fe5f 	bl	8006364 <RCCEx_PLL3_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056aa:	e003      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
      break;
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80056b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d110      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f023 0207 	bic.w	r2, r3, #7
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c6:	4902      	ldr	r1, [pc, #8]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	654b      	str	r3, [r1, #84]	; 0x54
 80056cc:	e008      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80056ce:	bf00      	nop
 80056d0:	58024400 	.word	0x58024400
 80056d4:	58024800 	.word	0x58024800
 80056d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d039      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	2b05      	cmp	r3, #5
 80056f4:	d820      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	0800573f 	.word	0x0800573f
 8005700:	08005715 	.word	0x08005715
 8005704:	08005727 	.word	0x08005727
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fd70 	bl	8006200 <RCCEx_PLL2_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005724:	e00c      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fe19 	bl	8006364 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005736:	e003      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
      break;
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800573e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005746:	4bb7      	ldr	r3, [pc, #732]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f023 0207 	bic.w	r2, r3, #7
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005754:	49b3      	ldr	r1, [pc, #716]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005756:	4313      	orrs	r3, r2
 8005758:	658b      	str	r3, [r1, #88]	; 0x58
 800575a:	e001      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d04b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005776:	d02e      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800577c:	d828      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d02a      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005788:	d822      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800578a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800578e:	d026      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005794:	d81c      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579a:	d010      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800579c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a0:	d816      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01d      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80057a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057aa:	d111      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fd24 	bl	8006200 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057bc:	e012      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	2102      	movs	r1, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fdcd 	bl	8006364 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057ce:	e009      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057d6:	bf00      	nop
 80057d8:	e004      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057da:	bf00      	nop
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ea:	4b8e      	ldr	r3, [pc, #568]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f8:	498a      	ldr	r1, [pc, #552]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	654b      	str	r3, [r1, #84]	; 0x54
 80057fe:	e001      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d04b      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800581a:	d02e      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800581c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005820:	d828      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	d02a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d822      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800582e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005832:	d026      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005838:	d81c      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583e:	d010      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005844:	d816      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01d      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d111      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	2100      	movs	r1, #0
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fcd2 	bl	8006200 <RCCEx_PLL2_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005860:	e012      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3324      	adds	r3, #36	; 0x24
 8005866:	2102      	movs	r1, #2
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fd7b 	bl	8006364 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005872:	e009      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
      break;
 8005878:	e006      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800587a:	bf00      	nop
 800587c:	e004      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800588e:	4b65      	ldr	r3, [pc, #404]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800589c:	4961      	ldr	r1, [pc, #388]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	658b      	str	r3, [r1, #88]	; 0x58
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d04b      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058be:	d02e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80058c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058c4:	d828      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d02a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	d822      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058d6:	d026      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80058d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058dc:	d81c      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e2:	d010      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80058e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e8:	d816      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01d      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d111      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fc80 	bl	8006200 <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005904:	e012      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3324      	adds	r3, #36	; 0x24
 800590a:	2102      	movs	r1, #2
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fd29 	bl	8006364 <RCCEx_PLL3_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005916:	e009      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800591e:	bf00      	nop
 8005920:	e004      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800592a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005932:	4b3c      	ldr	r3, [pc, #240]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005940:	4938      	ldr	r1, [pc, #224]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005942:	4313      	orrs	r3, r2
 8005944:	658b      	str	r3, [r1, #88]	; 0x58
 8005946:	e001      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d10a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3324      	adds	r3, #36	; 0x24
 8005968:	2102      	movs	r1, #2
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fcfa 	bl	8006364 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800597a:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005988:	4926      	ldr	r1, [pc, #152]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800598a:	4313      	orrs	r3, r2
 800598c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d10a      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	2102      	movs	r1, #2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fcd9 	bl	8006364 <RCCEx_PLL3_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ca:	4916      	ldr	r1, [pc, #88]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d036      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059e6:	d01f      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80059e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ec:	d817      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f6:	d009      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80059f8:	e011      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fbfd 	bl	8006200 <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a0a:	e00e      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3324      	adds	r3, #36	; 0x24
 8005a10:	2102      	movs	r1, #2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fca6 	bl	8006364 <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a1c:	e005      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	e002      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005a24:	58024400 	.word	0x58024400
      break;
 8005a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a30:	4b93      	ldr	r3, [pc, #588]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a3e:	4990      	ldr	r1, [pc, #576]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	658b      	str	r3, [r1, #88]	; 0x58
 8005a44:	e001      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d033      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a60:	d01c      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005a62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a66:	d816      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a72:	d007      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005a74:	e00f      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a76:	4b82      	ldr	r3, [pc, #520]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	4a81      	ldr	r2, [pc, #516]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a82:	e00c      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3324      	adds	r3, #36	; 0x24
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fc6a 	bl	8006364 <RCCEx_PLL3_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a94:	e003      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aa4:	4b76      	ldr	r3, [pc, #472]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab2:	4973      	ldr	r1, [pc, #460]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	654b      	str	r3, [r1, #84]	; 0x54
 8005ab8:	e001      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d029      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad6:	d007      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005ad8:	e00f      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ada:	4b69      	ldr	r3, [pc, #420]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a68      	ldr	r2, [pc, #416]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ae6:	e00b      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fb86 	bl	8006200 <RCCEx_PLL2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005af8:	e002      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	75fb      	strb	r3, [r7, #23]
      break;
 8005afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b06:	4b5e      	ldr	r3, [pc, #376]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	495b      	ldr	r1, [pc, #364]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b18:	e001      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3324      	adds	r3, #36	; 0x24
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fc17 	bl	8006364 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d030      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b54:	d017      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5a:	d811      	bhi.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b60:	d013      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b66:	d80b      	bhi.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d010      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b70:	d106      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b72:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	4a42      	ldr	r2, [pc, #264]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b7e:	e007      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
      break;
 8005b84:	e004      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b86:	bf00      	nop
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b96:	4b3a      	ldr	r3, [pc, #232]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba2:	4937      	ldr	r1, [pc, #220]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	654b      	str	r3, [r1, #84]	; 0x54
 8005ba8:	e001      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	492e      	ldr	r1, [pc, #184]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bd8:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005be6:	4926      	ldr	r1, [pc, #152]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bf8:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c04:	491e      	ldr	r1, [pc, #120]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c16:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c20:	6113      	str	r3, [r2, #16]
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c2c:	4914      	ldr	r1, [pc, #80]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da08      	bge.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c3a:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	490e      	ldr	r1, [pc, #56]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c58:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	4906      	ldr	r1, [pc, #24]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005c6c:	7dbb      	ldrb	r3, [r7, #22]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400

08005c84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c88:	f7ff f860 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4904      	ldr	r1, [pc, #16]	; (8005cac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	0800fd40 	.word	0x0800fd40

08005cb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b089      	sub	sp, #36	; 0x24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cb8:	4ba1      	ldr	r3, [pc, #644]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cc2:	4b9f      	ldr	r3, [pc, #636]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	0b1b      	lsrs	r3, r3, #12
 8005cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ccc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cce:	4b9c      	ldr	r3, [pc, #624]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cda:	4b99      	ldr	r3, [pc, #612]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	08db      	lsrs	r3, r3, #3
 8005ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8111 	beq.w	8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	f000 8083 	beq.w	8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	f200 80a1 	bhi.w	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d056      	beq.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d1a:	e099      	b.n	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d1c:	4b88      	ldr	r3, [pc, #544]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02d      	beq.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d28:	4b85      	ldr	r3, [pc, #532]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	08db      	lsrs	r3, r3, #3
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	4a84      	ldr	r2, [pc, #528]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d82:	e087      	b.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005daa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc6:	e065      	b.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b59      	ldr	r3, [pc, #356]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0a:	e043      	b.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b48      	ldr	r3, [pc, #288]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e4e:	e021      	b.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e94:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	0a5b      	lsrs	r3, r3, #9
 8005e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eba:	ee17 2a90 	vmov	r2, s15
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ec2:	4b1f      	ldr	r3, [pc, #124]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	0e1b      	lsrs	r3, r3, #24
 8005ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f16:	ee17 2a90 	vmov	r2, s15
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f1e:	e008      	b.n	8005f32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	609a      	str	r2, [r3, #8]
}
 8005f32:	bf00      	nop
 8005f34:	3724      	adds	r7, #36	; 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	58024400 	.word	0x58024400
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	46000000 	.word	0x46000000
 8005f4c:	4c742400 	.word	0x4c742400
 8005f50:	4a742400 	.word	0x4a742400
 8005f54:	4af42400 	.word	0x4af42400

08005f58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f60:	4ba1      	ldr	r3, [pc, #644]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f6a:	4b9f      	ldr	r3, [pc, #636]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	0d1b      	lsrs	r3, r3, #20
 8005f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f76:	4b9c      	ldr	r3, [pc, #624]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f82:	4b99      	ldr	r3, [pc, #612]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	08db      	lsrs	r3, r3, #3
 8005f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8111 	beq.w	80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	f000 8083 	beq.w	80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	f200 80a1 	bhi.w	80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d056      	beq.n	8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fc2:	e099      	b.n	80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc4:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02d      	beq.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fd0:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	08db      	lsrs	r3, r3, #3
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	4a84      	ldr	r2, [pc, #528]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffa:	4b7b      	ldr	r3, [pc, #492]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600a:	ed97 6a03 	vldr	s12, [r7, #12]
 800600e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800602a:	e087      	b.n	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800603a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603e:	4b6a      	ldr	r3, [pc, #424]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006052:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800606e:	e065      	b.n	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006082:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006092:	ed97 6a03 	vldr	s12, [r7, #12]
 8006096:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800609a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b2:	e043      	b.n	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c6:	4b48      	ldr	r3, [pc, #288]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f6:	e021      	b.n	800613c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	ed97 6a03 	vldr	s12, [r7, #12]
 800611e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800613c:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	0a5b      	lsrs	r3, r3, #9
 8006142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006156:	edd7 6a07 	vldr	s13, [r7, #28]
 800615a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006162:	ee17 2a90 	vmov	r2, s15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800616a:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006180:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006184:	edd7 6a07 	vldr	s13, [r7, #28]
 8006188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800618c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006190:	ee17 2a90 	vmov	r2, s15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006198:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	0e1b      	lsrs	r3, r3, #24
 800619e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061be:	ee17 2a90 	vmov	r2, s15
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061c6:	e008      	b.n	80061da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	609a      	str	r2, [r3, #8]
}
 80061da:	bf00      	nop
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
 80061ec:	03d09000 	.word	0x03d09000
 80061f0:	46000000 	.word	0x46000000
 80061f4:	4c742400 	.word	0x4c742400
 80061f8:	4a742400 	.word	0x4a742400
 80061fc:	4af42400 	.word	0x4af42400

08006200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800620e:	4b53      	ldr	r3, [pc, #332]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d101      	bne.n	800621e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e099      	b.n	8006352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800621e:	4b4f      	ldr	r3, [pc, #316]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a4e      	ldr	r2, [pc, #312]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622a:	f7fb fe3f 	bl	8001eac <HAL_GetTick>
 800622e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006230:	e008      	b.n	8006244 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006232:	f7fb fe3b 	bl	8001eac <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e086      	b.n	8006352 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006244:	4b45      	ldr	r3, [pc, #276]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006250:	4b42      	ldr	r3, [pc, #264]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	493f      	ldr	r1, [pc, #252]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006260:	4313      	orrs	r3, r2
 8006262:	628b      	str	r3, [r1, #40]	; 0x28
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	3b01      	subs	r3, #1
 800626a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	3b01      	subs	r3, #1
 8006274:	025b      	lsls	r3, r3, #9
 8006276:	b29b      	uxth	r3, r3
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	3b01      	subs	r3, #1
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006294:	4931      	ldr	r1, [pc, #196]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800629a:	4b30      	ldr	r3, [pc, #192]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	492d      	ldr	r1, [pc, #180]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062ac:	4b2b      	ldr	r3, [pc, #172]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	f023 0220 	bic.w	r2, r3, #32
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	4928      	ldr	r1, [pc, #160]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062be:	4b27      	ldr	r3, [pc, #156]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	4a26      	ldr	r2, [pc, #152]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062c4:	f023 0310 	bic.w	r3, r3, #16
 80062c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <RCCEx_PLL2_Config+0x160>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	69d2      	ldr	r2, [r2, #28]
 80062d6:	00d2      	lsls	r2, r2, #3
 80062d8:	4920      	ldr	r1, [pc, #128]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062de:	4b1f      	ldr	r3, [pc, #124]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	4a1e      	ldr	r2, [pc, #120]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062e4:	f043 0310 	orr.w	r3, r3, #16
 80062e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062f0:	4b1a      	ldr	r3, [pc, #104]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a19      	ldr	r2, [pc, #100]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 80062f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062fc:	e00f      	b.n	800631e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d106      	bne.n	8006312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 800630a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006310:	e005      	b.n	800631e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006312:	4b12      	ldr	r3, [pc, #72]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	4a11      	ldr	r2, [pc, #68]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800631c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a0e      	ldr	r2, [pc, #56]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632a:	f7fb fdbf 	bl	8001eac <HAL_GetTick>
 800632e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006330:	e008      	b.n	8006344 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006332:	f7fb fdbb 	bl	8001eac <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e006      	b.n	8006352 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <RCCEx_PLL2_Config+0x15c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	58024400 	.word	0x58024400
 8006360:	ffff0007 	.word	0xffff0007

08006364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006372:	4b53      	ldr	r3, [pc, #332]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d101      	bne.n	8006382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e099      	b.n	80064b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006382:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a4e      	ldr	r2, [pc, #312]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800638c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638e:	f7fb fd8d 	bl	8001eac <HAL_GetTick>
 8006392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006394:	e008      	b.n	80063a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006396:	f7fb fd89 	bl	8001eac <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e086      	b.n	80064b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063a8:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f0      	bne.n	8006396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063b4:	4b42      	ldr	r3, [pc, #264]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	051b      	lsls	r3, r3, #20
 80063c2:	493f      	ldr	r1, [pc, #252]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	628b      	str	r3, [r1, #40]	; 0x28
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	025b      	lsls	r3, r3, #9
 80063da:	b29b      	uxth	r3, r3
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063f8:	4931      	ldr	r1, [pc, #196]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	492d      	ldr	r1, [pc, #180]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800640c:	4313      	orrs	r3, r2
 800640e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	4928      	ldr	r1, [pc, #160]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800641e:	4313      	orrs	r3, r2
 8006420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006422:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <RCCEx_PLL3_Config+0x160>)
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	69d2      	ldr	r2, [r2, #28]
 800643a:	00d2      	lsls	r2, r2, #3
 800643c:	4920      	ldr	r1, [pc, #128]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800643e:	4313      	orrs	r3, r2
 8006440:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006442:	4b1f      	ldr	r3, [pc, #124]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006454:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800645a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006460:	e00f      	b.n	8006482 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d106      	bne.n	8006476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006468:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800646e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006474:	e005      	b.n	8006482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	4a11      	ldr	r2, [pc, #68]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 800647c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648e:	f7fb fd0d 	bl	8001eac <HAL_GetTick>
 8006492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006494:	e008      	b.n	80064a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006496:	f7fb fd09 	bl	8001eac <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e006      	b.n	80064b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <RCCEx_PLL3_Config+0x15c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0f0      	beq.n	8006496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	58024400 	.word	0x58024400
 80064c4:	ffff0007 	.word	0xffff0007

080064c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e0eb      	b.n	80066b6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a75      	ldr	r2, [pc, #468]	; (80066c0 <HAL_SPI_Init+0x1f8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00f      	beq.n	800650e <HAL_SPI_Init+0x46>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a74      	ldr	r2, [pc, #464]	; (80066c4 <HAL_SPI_Init+0x1fc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00a      	beq.n	800650e <HAL_SPI_Init+0x46>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a72      	ldr	r2, [pc, #456]	; (80066c8 <HAL_SPI_Init+0x200>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d005      	beq.n	800650e <HAL_SPI_Init+0x46>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d901      	bls.n	800650e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e0d3      	b.n	80066b6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb9e 	bl	8006c50 <SPI_GetPacketSize>
 8006514:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a69      	ldr	r2, [pc, #420]	; (80066c0 <HAL_SPI_Init+0x1f8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00c      	beq.n	800653a <HAL_SPI_Init+0x72>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a67      	ldr	r2, [pc, #412]	; (80066c4 <HAL_SPI_Init+0x1fc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d007      	beq.n	800653a <HAL_SPI_Init+0x72>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a66      	ldr	r2, [pc, #408]	; (80066c8 <HAL_SPI_Init+0x200>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d002      	beq.n	800653a <HAL_SPI_Init+0x72>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b08      	cmp	r3, #8
 8006538:	d811      	bhi.n	800655e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800653e:	4a60      	ldr	r2, [pc, #384]	; (80066c0 <HAL_SPI_Init+0x1f8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a5e      	ldr	r2, [pc, #376]	; (80066c4 <HAL_SPI_Init+0x1fc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_SPI_Init+0x90>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a5d      	ldr	r2, [pc, #372]	; (80066c8 <HAL_SPI_Init+0x200>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d104      	bne.n	8006562 <HAL_SPI_Init+0x9a>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b10      	cmp	r3, #16
 800655c:	d901      	bls.n	8006562 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e0a9      	b.n	80066b6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fb f8a0 	bl	80016bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0201 	bic.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800659c:	d119      	bne.n	80065d2 <HAL_SPI_Init+0x10a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a6:	d103      	bne.n	80065b0 <HAL_SPI_Init+0xe8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10c      	bne.n	80065d2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c0:	d107      	bne.n	80065d2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	431a      	orrs	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	ea42 0103 	orr.w	r1, r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	ea42 0103 	orr.w	r1, r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800665c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006670:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40013000 	.word	0x40013000
 80066c4:	40003800 	.word	0x40003800
 80066c8:	40003c00 	.word	0x40003c00

080066cc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066fe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3330      	adds	r3, #48	; 0x30
 8006706:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d113      	bne.n	800673a <HAL_SPI_IRQHandler+0x6e>
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10e      	bne.n	800673a <HAL_SPI_IRQHandler+0x6e>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
    handled = 1UL;
 8006736:	2301      	movs	r3, #1
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10f      	bne.n	8006764 <HAL_SPI_IRQHandler+0x98>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_SPI_IRQHandler+0x98>
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
    handled = 1UL;
 8006760:	2301      	movs	r3, #1
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <HAL_SPI_IRQHandler+0xc2>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_SPI_IRQHandler+0xc2>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
    handled = 1UL;
 800678a:	2301      	movs	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	f040 816f 	bne.w	8006a74 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80a0 	beq.w	80068e2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0208 	orr.w	r2, r2, #8
 80067b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0210 	orr.w	r2, r2, #16
 80067c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0208 	bic.w	r2, r2, #8
 80067e0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <HAL_SPI_IRQHandler+0x140>
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d004      	beq.n	80067fc <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_SPI_IRQHandler+0x140>
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d059      	beq.n	80068b6 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d154      	bne.n	80068b6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d13d      	bne.n	8006896 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800681a:	e036      	b.n	800688a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b0f      	cmp	r3, #15
 8006822:	d90b      	bls.n	800683c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800682e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	665a      	str	r2, [r3, #100]	; 0x64
 800683a:	e01d      	b.n	8006878 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b07      	cmp	r3, #7
 8006842:	d90b      	bls.n	800685c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	8812      	ldrh	r2, [r2, #0]
 800684c:	b292      	uxth	r2, r2
 800684e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006854:	1c9a      	adds	r2, r3, #2
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	665a      	str	r2, [r3, #100]	; 0x64
 800685a:	e00d      	b.n	8006878 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1c2      	bne.n	800681c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f93a 	bl	8006b10 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f90a 	bl	8006ac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80068b4:	e0e3      	b.n	8006a7e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80068b6:	7cfb      	ldrb	r3, [r7, #19]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d103      	bne.n	80068c4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f8f9 	bl	8006ab4 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 80068c2:	e0d9      	b.n	8006a78 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80068c4:	7cfb      	ldrb	r3, [r7, #19]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d103      	bne.n	80068d2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f8e8 	bl	8006aa0 <HAL_SPI_RxCpltCallback>
    return;
 80068d0:	e0d2      	b.n	8006a78 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80068d2:	7cfb      	ldrb	r3, [r7, #19]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	f040 80cf 	bne.w	8006a78 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f8d6 	bl	8006a8c <HAL_SPI_TxCpltCallback>
    return;
 80068e0:	e0ca      	b.n	8006a78 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00d      	beq.n	8006908 <HAL_SPI_IRQHandler+0x23c>
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006904:	619a      	str	r2, [r3, #24]

    return;
 8006906:	e0ba      	b.n	8006a7e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80b5 	beq.w	8006a7e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00f      	beq.n	800693e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006924:	f043 0204 	orr.w	r2, r3, #4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00f      	beq.n	8006968 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694e:	f043 0201 	orr.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006966:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00f      	beq.n	8006992 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006978:	f043 0208 	orr.w	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006990:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00f      	beq.n	80069bc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0220 	orr.w	r2, r2, #32
 80069ba:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d05a      	beq.n	8006a7c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6919      	ldr	r1, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <HAL_SPI_IRQHandler+0x3b8>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069f0:	d138      	bne.n	8006a64 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a00:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d013      	beq.n	8006a32 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0e:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <HAL_SPI_IRQHandler+0x3bc>)
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fb fc24 	bl	8002264 <HAL_DMA_Abort_IT>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d020      	beq.n	8006a7c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	4a12      	ldr	r2, [pc, #72]	; (8006a88 <HAL_SPI_IRQHandler+0x3bc>)
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fb fc0c 	bl	8002264 <HAL_DMA_Abort_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d014      	beq.n	8006a7c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a62:	e00b      	b.n	8006a7c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f82b 	bl	8006ac8 <HAL_SPI_ErrorCallback>
    return;
 8006a72:	e003      	b.n	8006a7c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8006a74:	bf00      	nop
 8006a76:	e002      	b.n	8006a7e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006a78:	bf00      	nop
 8006a7a:	e000      	b.n	8006a7e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006a7c:	bf00      	nop
  }
}
 8006a7e:	3728      	adds	r7, #40	; 0x28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	fffffc94 	.word	0xfffffc94
 8006a88:	08006add 	.word	0x08006add

08006a8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff ffe0 	bl	8006ac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0208 	orr.w	r2, r2, #8
 8006b2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0210 	orr.w	r2, r2, #16
 8006b3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6919      	ldr	r1, [r3, #16]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <SPI_CloseTransfer+0x13c>)
 8006b5c:	400b      	ands	r3, r1
 8006b5e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d014      	beq.n	8006ba6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00f      	beq.n	8006ba6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0220 	orr.w	r2, r2, #32
 8006ba4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d014      	beq.n	8006bdc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00f      	beq.n	8006bdc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc2:	f043 0204 	orr.w	r2, r3, #4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bda:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00f      	beq.n	8006c06 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bec:	f043 0201 	orr.w	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00f      	beq.n	8006c30 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c16:	f043 0208 	orr.w	r2, r3, #8
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	fffffc90 	.word	0xfffffc90

08006c50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3307      	adds	r3, #7
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e042      	b.n	8006d1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fa ff2c 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2224      	movs	r2, #36	; 0x24
 8006cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f82d 	bl	8006d28 <UART_SetConfig>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e022      	b.n	8006d1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fd81 	bl	80077e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fe08 	bl	800792c <UART_CheckIdleState>
 8006d1c:	4603      	mov	r3, r0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b08e      	sub	sp, #56	; 0x38
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4bbf      	ldr	r3, [pc, #764]	; (8007054 <UART_SetConfig+0x32c>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4ab5      	ldr	r2, [pc, #724]	; (8007058 <UART_SetConfig+0x330>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	4bb0      	ldr	r3, [pc, #704]	; (800705c <UART_SetConfig+0x334>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006da2:	430b      	orrs	r3, r1
 8006da4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	f023 010f 	bic.w	r1, r3, #15
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4aa7      	ldr	r2, [pc, #668]	; (8007060 <UART_SetConfig+0x338>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d176      	bne.n	8006eb4 <UART_SetConfig+0x18c>
 8006dc6:	4ba7      	ldr	r3, [pc, #668]	; (8007064 <UART_SetConfig+0x33c>)
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dce:	2b28      	cmp	r3, #40	; 0x28
 8006dd0:	d86c      	bhi.n	8006eac <UART_SetConfig+0x184>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0xb0>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e7d 	.word	0x08006e7d
 8006ddc:	08006ead 	.word	0x08006ead
 8006de0:	08006ead 	.word	0x08006ead
 8006de4:	08006ead 	.word	0x08006ead
 8006de8:	08006ead 	.word	0x08006ead
 8006dec:	08006ead 	.word	0x08006ead
 8006df0:	08006ead 	.word	0x08006ead
 8006df4:	08006ead 	.word	0x08006ead
 8006df8:	08006e85 	.word	0x08006e85
 8006dfc:	08006ead 	.word	0x08006ead
 8006e00:	08006ead 	.word	0x08006ead
 8006e04:	08006ead 	.word	0x08006ead
 8006e08:	08006ead 	.word	0x08006ead
 8006e0c:	08006ead 	.word	0x08006ead
 8006e10:	08006ead 	.word	0x08006ead
 8006e14:	08006ead 	.word	0x08006ead
 8006e18:	08006e8d 	.word	0x08006e8d
 8006e1c:	08006ead 	.word	0x08006ead
 8006e20:	08006ead 	.word	0x08006ead
 8006e24:	08006ead 	.word	0x08006ead
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ead 	.word	0x08006ead
 8006e30:	08006ead 	.word	0x08006ead
 8006e34:	08006ead 	.word	0x08006ead
 8006e38:	08006e95 	.word	0x08006e95
 8006e3c:	08006ead 	.word	0x08006ead
 8006e40:	08006ead 	.word	0x08006ead
 8006e44:	08006ead 	.word	0x08006ead
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006ead 	.word	0x08006ead
 8006e50:	08006ead 	.word	0x08006ead
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006e9d 	.word	0x08006e9d
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006ead 	.word	0x08006ead
 8006e68:	08006ead 	.word	0x08006ead
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006ead 	.word	0x08006ead
 8006e74:	08006ead 	.word	0x08006ead
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e222      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e21e      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e21a      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e216      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea2:	e212      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006ea4:	2340      	movs	r3, #64	; 0x40
 8006ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eaa:	e20e      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb2:	e20a      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6b      	ldr	r2, [pc, #428]	; (8007068 <UART_SetConfig+0x340>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d130      	bne.n	8006f20 <UART_SetConfig+0x1f8>
 8006ebe:	4b69      	ldr	r3, [pc, #420]	; (8007064 <UART_SetConfig+0x33c>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d826      	bhi.n	8006f18 <UART_SetConfig+0x1f0>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x1a8>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006ef9 	.word	0x08006ef9
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eee:	e1ec      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e1e8      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006ef8:	2308      	movs	r3, #8
 8006efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efe:	e1e4      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f00:	2310      	movs	r3, #16
 8006f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f06:	e1e0      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f08:	2320      	movs	r3, #32
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e1dc      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f16:	e1d8      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f18:	2380      	movs	r3, #128	; 0x80
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e1d4      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a51      	ldr	r2, [pc, #324]	; (800706c <UART_SetConfig+0x344>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d130      	bne.n	8006f8c <UART_SetConfig+0x264>
 8006f2a:	4b4e      	ldr	r3, [pc, #312]	; (8007064 <UART_SetConfig+0x33c>)
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d826      	bhi.n	8006f84 <UART_SetConfig+0x25c>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <UART_SetConfig+0x214>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f55 	.word	0x08006f55
 8006f40:	08006f5d 	.word	0x08006f5d
 8006f44:	08006f65 	.word	0x08006f65
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	2300      	movs	r3, #0
 8006f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f5a:	e1b6      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f62:	e1b2      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f64:	2308      	movs	r3, #8
 8006f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6a:	e1ae      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f72:	e1aa      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f74:	2320      	movs	r3, #32
 8006f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7a:	e1a6      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f82:	e1a2      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8a:	e19e      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a37      	ldr	r2, [pc, #220]	; (8007070 <UART_SetConfig+0x348>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d130      	bne.n	8006ff8 <UART_SetConfig+0x2d0>
 8006f96:	4b33      	ldr	r3, [pc, #204]	; (8007064 <UART_SetConfig+0x33c>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d826      	bhi.n	8006ff0 <UART_SetConfig+0x2c8>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x280>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fc1 	.word	0x08006fc1
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc6:	e180      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fce:	e17c      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fd6:	e178      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fde:	e174      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fe6:	e170      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fee:	e16c      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff6:	e168      	b.n	80072ca <UART_SetConfig+0x5a2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <UART_SetConfig+0x34c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d142      	bne.n	8007088 <UART_SetConfig+0x360>
 8007002:	4b18      	ldr	r3, [pc, #96]	; (8007064 <UART_SetConfig+0x33c>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b05      	cmp	r3, #5
 800700c:	d838      	bhi.n	8007080 <UART_SetConfig+0x358>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x2ec>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007035 	.word	0x08007035
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007079 	.word	0x08007079
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e14a      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e146      	b.n	80072ca <UART_SetConfig+0x5a2>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007042:	e142      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800704a:	e13e      	b.n	80072ca <UART_SetConfig+0x5a2>
 800704c:	2320      	movs	r3, #32
 800704e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007052:	e13a      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007054:	cfff69f3 	.word	0xcfff69f3
 8007058:	58000c00 	.word	0x58000c00
 800705c:	11fff4ff 	.word	0x11fff4ff
 8007060:	40011000 	.word	0x40011000
 8007064:	58024400 	.word	0x58024400
 8007068:	40004400 	.word	0x40004400
 800706c:	40004800 	.word	0x40004800
 8007070:	40004c00 	.word	0x40004c00
 8007074:	40005000 	.word	0x40005000
 8007078:	2340      	movs	r3, #64	; 0x40
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e124      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007080:	2380      	movs	r3, #128	; 0x80
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e120      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4acc      	ldr	r2, [pc, #816]	; (80073c0 <UART_SetConfig+0x698>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d176      	bne.n	8007180 <UART_SetConfig+0x458>
 8007092:	4bcc      	ldr	r3, [pc, #816]	; (80073c4 <UART_SetConfig+0x69c>)
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800709a:	2b28      	cmp	r3, #40	; 0x28
 800709c:	d86c      	bhi.n	8007178 <UART_SetConfig+0x450>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <UART_SetConfig+0x37c>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	08007149 	.word	0x08007149
 80070a8:	08007179 	.word	0x08007179
 80070ac:	08007179 	.word	0x08007179
 80070b0:	08007179 	.word	0x08007179
 80070b4:	08007179 	.word	0x08007179
 80070b8:	08007179 	.word	0x08007179
 80070bc:	08007179 	.word	0x08007179
 80070c0:	08007179 	.word	0x08007179
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007179 	.word	0x08007179
 80070cc:	08007179 	.word	0x08007179
 80070d0:	08007179 	.word	0x08007179
 80070d4:	08007179 	.word	0x08007179
 80070d8:	08007179 	.word	0x08007179
 80070dc:	08007179 	.word	0x08007179
 80070e0:	08007179 	.word	0x08007179
 80070e4:	08007159 	.word	0x08007159
 80070e8:	08007179 	.word	0x08007179
 80070ec:	08007179 	.word	0x08007179
 80070f0:	08007179 	.word	0x08007179
 80070f4:	08007179 	.word	0x08007179
 80070f8:	08007179 	.word	0x08007179
 80070fc:	08007179 	.word	0x08007179
 8007100:	08007179 	.word	0x08007179
 8007104:	08007161 	.word	0x08007161
 8007108:	08007179 	.word	0x08007179
 800710c:	08007179 	.word	0x08007179
 8007110:	08007179 	.word	0x08007179
 8007114:	08007179 	.word	0x08007179
 8007118:	08007179 	.word	0x08007179
 800711c:	08007179 	.word	0x08007179
 8007120:	08007179 	.word	0x08007179
 8007124:	08007169 	.word	0x08007169
 8007128:	08007179 	.word	0x08007179
 800712c:	08007179 	.word	0x08007179
 8007130:	08007179 	.word	0x08007179
 8007134:	08007179 	.word	0x08007179
 8007138:	08007179 	.word	0x08007179
 800713c:	08007179 	.word	0x08007179
 8007140:	08007179 	.word	0x08007179
 8007144:	08007171 	.word	0x08007171
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800714e:	e0bc      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007150:	2304      	movs	r3, #4
 8007152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007156:	e0b8      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007158:	2308      	movs	r3, #8
 800715a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715e:	e0b4      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007160:	2310      	movs	r3, #16
 8007162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007166:	e0b0      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007168:	2320      	movs	r3, #32
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e0ac      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007176:	e0a8      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e0a4      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a90      	ldr	r2, [pc, #576]	; (80073c8 <UART_SetConfig+0x6a0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d130      	bne.n	80071ec <UART_SetConfig+0x4c4>
 800718a:	4b8e      	ldr	r3, [pc, #568]	; (80073c4 <UART_SetConfig+0x69c>)
 800718c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	2b05      	cmp	r3, #5
 8007194:	d826      	bhi.n	80071e4 <UART_SetConfig+0x4bc>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x474>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071b5 	.word	0x080071b5
 80071a0:	080071bd 	.word	0x080071bd
 80071a4:	080071c5 	.word	0x080071c5
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071d5 	.word	0x080071d5
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	2300      	movs	r3, #0
 80071b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ba:	e086      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071bc:	2304      	movs	r3, #4
 80071be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c2:	e082      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071c4:	2308      	movs	r3, #8
 80071c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ca:	e07e      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071cc:	2310      	movs	r3, #16
 80071ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d2:	e07a      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071d4:	2320      	movs	r3, #32
 80071d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071da:	e076      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071dc:	2340      	movs	r3, #64	; 0x40
 80071de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e2:	e072      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ea:	e06e      	b.n	80072ca <UART_SetConfig+0x5a2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a76      	ldr	r2, [pc, #472]	; (80073cc <UART_SetConfig+0x6a4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d130      	bne.n	8007258 <UART_SetConfig+0x530>
 80071f6:	4b73      	ldr	r3, [pc, #460]	; (80073c4 <UART_SetConfig+0x69c>)
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	2b05      	cmp	r3, #5
 8007200:	d826      	bhi.n	8007250 <UART_SetConfig+0x528>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0x4e0>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007221 	.word	0x08007221
 800720c:	08007229 	.word	0x08007229
 8007210:	08007231 	.word	0x08007231
 8007214:	08007239 	.word	0x08007239
 8007218:	08007241 	.word	0x08007241
 800721c:	08007249 	.word	0x08007249
 8007220:	2300      	movs	r3, #0
 8007222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007226:	e050      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007228:	2304      	movs	r3, #4
 800722a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722e:	e04c      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007230:	2308      	movs	r3, #8
 8007232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007236:	e048      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723e:	e044      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007240:	2320      	movs	r3, #32
 8007242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007246:	e040      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724e:	e03c      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007256:	e038      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a5c      	ldr	r2, [pc, #368]	; (80073d0 <UART_SetConfig+0x6a8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d130      	bne.n	80072c4 <UART_SetConfig+0x59c>
 8007262:	4b58      	ldr	r3, [pc, #352]	; (80073c4 <UART_SetConfig+0x69c>)
 8007264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b05      	cmp	r3, #5
 800726c:	d826      	bhi.n	80072bc <UART_SetConfig+0x594>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0x54c>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	0800728d 	.word	0x0800728d
 8007278:	08007295 	.word	0x08007295
 800727c:	0800729d 	.word	0x0800729d
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072b5 	.word	0x080072b5
 800728c:	2302      	movs	r3, #2
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e01a      	b.n	80072ca <UART_SetConfig+0x5a2>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	e016      	b.n	80072ca <UART_SetConfig+0x5a2>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a2:	e012      	b.n	80072ca <UART_SetConfig+0x5a2>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072aa:	e00e      	b.n	80072ca <UART_SetConfig+0x5a2>
 80072ac:	2320      	movs	r3, #32
 80072ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b2:	e00a      	b.n	80072ca <UART_SetConfig+0x5a2>
 80072b4:	2340      	movs	r3, #64	; 0x40
 80072b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ba:	e006      	b.n	80072ca <UART_SetConfig+0x5a2>
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072c2:	e002      	b.n	80072ca <UART_SetConfig+0x5a2>
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a40      	ldr	r2, [pc, #256]	; (80073d0 <UART_SetConfig+0x6a8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	f040 80ef 	bne.w	80074b4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072da:	2b20      	cmp	r3, #32
 80072dc:	dc46      	bgt.n	800736c <UART_SetConfig+0x644>
 80072de:	2b02      	cmp	r3, #2
 80072e0:	f2c0 8081 	blt.w	80073e6 <UART_SetConfig+0x6be>
 80072e4:	3b02      	subs	r3, #2
 80072e6:	2b1e      	cmp	r3, #30
 80072e8:	d87d      	bhi.n	80073e6 <UART_SetConfig+0x6be>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x5c8>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007373 	.word	0x08007373
 80072f4:	080073e7 	.word	0x080073e7
 80072f8:	0800737b 	.word	0x0800737b
 80072fc:	080073e7 	.word	0x080073e7
 8007300:	080073e7 	.word	0x080073e7
 8007304:	080073e7 	.word	0x080073e7
 8007308:	0800738b 	.word	0x0800738b
 800730c:	080073e7 	.word	0x080073e7
 8007310:	080073e7 	.word	0x080073e7
 8007314:	080073e7 	.word	0x080073e7
 8007318:	080073e7 	.word	0x080073e7
 800731c:	080073e7 	.word	0x080073e7
 8007320:	080073e7 	.word	0x080073e7
 8007324:	080073e7 	.word	0x080073e7
 8007328:	0800739b 	.word	0x0800739b
 800732c:	080073e7 	.word	0x080073e7
 8007330:	080073e7 	.word	0x080073e7
 8007334:	080073e7 	.word	0x080073e7
 8007338:	080073e7 	.word	0x080073e7
 800733c:	080073e7 	.word	0x080073e7
 8007340:	080073e7 	.word	0x080073e7
 8007344:	080073e7 	.word	0x080073e7
 8007348:	080073e7 	.word	0x080073e7
 800734c:	080073e7 	.word	0x080073e7
 8007350:	080073e7 	.word	0x080073e7
 8007354:	080073e7 	.word	0x080073e7
 8007358:	080073e7 	.word	0x080073e7
 800735c:	080073e7 	.word	0x080073e7
 8007360:	080073e7 	.word	0x080073e7
 8007364:	080073e7 	.word	0x080073e7
 8007368:	080073d9 	.word	0x080073d9
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d036      	beq.n	80073de <UART_SetConfig+0x6b6>
 8007370:	e039      	b.n	80073e6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007372:	f7fe fc87 	bl	8005c84 <HAL_RCCEx_GetD3PCLK1Freq>
 8007376:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007378:	e03b      	b.n	80073f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737a:	f107 0314 	add.w	r3, r7, #20
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fc96 	bl	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007388:	e033      	b.n	80073f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fde2 	bl	8005f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007398:	e02b      	b.n	80073f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739a:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <UART_SetConfig+0x69c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073a6:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <UART_SetConfig+0x69c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	08db      	lsrs	r3, r3, #3
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <UART_SetConfig+0x6ac>)
 80073b2:	fa22 f303 	lsr.w	r3, r2, r3
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073b8:	e01b      	b.n	80073f2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <UART_SetConfig+0x6ac>)
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073be:	e018      	b.n	80073f2 <UART_SetConfig+0x6ca>
 80073c0:	40011400 	.word	0x40011400
 80073c4:	58024400 	.word	0x58024400
 80073c8:	40007800 	.word	0x40007800
 80073cc:	40007c00 	.word	0x40007c00
 80073d0:	58000c00 	.word	0x58000c00
 80073d4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073d8:	4bc4      	ldr	r3, [pc, #784]	; (80076ec <UART_SetConfig+0x9c4>)
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073dc:	e009      	b.n	80073f2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e4:	e005      	b.n	80073f2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80073f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 81da 	beq.w	80077ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	4abc      	ldr	r2, [pc, #752]	; (80076f0 <UART_SetConfig+0x9c8>)
 8007400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007404:	461a      	mov	r2, r3
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	fbb3 f3f2 	udiv	r3, r3, r2
 800740c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	6a3a      	ldr	r2, [r7, #32]
 800741a:	429a      	cmp	r2, r3
 800741c:	d305      	bcc.n	800742a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007430:	e1bd      	b.n	80077ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	4618      	mov	r0, r3
 8007436:	f04f 0100 	mov.w	r1, #0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	4aac      	ldr	r2, [pc, #688]	; (80076f0 <UART_SetConfig+0x9c8>)
 8007440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007444:	b29a      	uxth	r2, r3
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	f7f9 f96d 	bl	8000728 <__aeabi_uldivmod>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	020b      	lsls	r3, r1, #8
 8007460:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007464:	0202      	lsls	r2, r0, #8
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	6849      	ldr	r1, [r1, #4]
 800746a:	0849      	lsrs	r1, r1, #1
 800746c:	4608      	mov	r0, r1
 800746e:	f04f 0100 	mov.w	r1, #0
 8007472:	1814      	adds	r4, r2, r0
 8007474:	eb43 0501 	adc.w	r5, r3, r1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	461a      	mov	r2, r3
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	4620      	mov	r0, r4
 8007484:	4629      	mov	r1, r5
 8007486:	f7f9 f94f 	bl	8000728 <__aeabi_uldivmod>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4613      	mov	r3, r2
 8007490:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007498:	d308      	bcc.n	80074ac <UART_SetConfig+0x784>
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a0:	d204      	bcs.n	80074ac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	e180      	b.n	80077ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80074b2:	e17c      	b.n	80077ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074bc:	f040 80bf 	bne.w	800763e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80074c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	dc49      	bgt.n	800755c <UART_SetConfig+0x834>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db7c      	blt.n	80075c6 <UART_SetConfig+0x89e>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d87a      	bhi.n	80075c6 <UART_SetConfig+0x89e>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <UART_SetConfig+0x7b0>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	08007563 	.word	0x08007563
 80074dc:	0800756b 	.word	0x0800756b
 80074e0:	080075c7 	.word	0x080075c7
 80074e4:	080075c7 	.word	0x080075c7
 80074e8:	08007573 	.word	0x08007573
 80074ec:	080075c7 	.word	0x080075c7
 80074f0:	080075c7 	.word	0x080075c7
 80074f4:	080075c7 	.word	0x080075c7
 80074f8:	08007583 	.word	0x08007583
 80074fc:	080075c7 	.word	0x080075c7
 8007500:	080075c7 	.word	0x080075c7
 8007504:	080075c7 	.word	0x080075c7
 8007508:	080075c7 	.word	0x080075c7
 800750c:	080075c7 	.word	0x080075c7
 8007510:	080075c7 	.word	0x080075c7
 8007514:	080075c7 	.word	0x080075c7
 8007518:	08007593 	.word	0x08007593
 800751c:	080075c7 	.word	0x080075c7
 8007520:	080075c7 	.word	0x080075c7
 8007524:	080075c7 	.word	0x080075c7
 8007528:	080075c7 	.word	0x080075c7
 800752c:	080075c7 	.word	0x080075c7
 8007530:	080075c7 	.word	0x080075c7
 8007534:	080075c7 	.word	0x080075c7
 8007538:	080075c7 	.word	0x080075c7
 800753c:	080075c7 	.word	0x080075c7
 8007540:	080075c7 	.word	0x080075c7
 8007544:	080075c7 	.word	0x080075c7
 8007548:	080075c7 	.word	0x080075c7
 800754c:	080075c7 	.word	0x080075c7
 8007550:	080075c7 	.word	0x080075c7
 8007554:	080075c7 	.word	0x080075c7
 8007558:	080075b9 	.word	0x080075b9
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d02e      	beq.n	80075be <UART_SetConfig+0x896>
 8007560:	e031      	b.n	80075c6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007562:	f7fd fc23 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8007566:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007568:	e033      	b.n	80075d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800756a:	f7fd fc35 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 800756e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007570:	e02f      	b.n	80075d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fb9a 	bl	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007580:	e027      	b.n	80075d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007582:	f107 0308 	add.w	r3, r7, #8
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fce6 	bl	8005f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007590:	e01f      	b.n	80075d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007592:	4b58      	ldr	r3, [pc, #352]	; (80076f4 <UART_SetConfig+0x9cc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800759e:	4b55      	ldr	r3, [pc, #340]	; (80076f4 <UART_SetConfig+0x9cc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	08db      	lsrs	r3, r3, #3
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	4a53      	ldr	r2, [pc, #332]	; (80076f8 <UART_SetConfig+0x9d0>)
 80075aa:	fa22 f303 	lsr.w	r3, r2, r3
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075b0:	e00f      	b.n	80075d2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80075b2:	4b51      	ldr	r3, [pc, #324]	; (80076f8 <UART_SetConfig+0x9d0>)
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075b6:	e00c      	b.n	80075d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075b8:	4b4c      	ldr	r3, [pc, #304]	; (80076ec <UART_SetConfig+0x9c4>)
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075bc:	e009      	b.n	80075d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075c4:	e005      	b.n	80075d2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80075d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80ea 	beq.w	80077ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	4a44      	ldr	r2, [pc, #272]	; (80076f0 <UART_SetConfig+0x9c8>)
 80075e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075ec:	005a      	lsls	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	441a      	add	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d916      	bls.n	8007636 <UART_SetConfig+0x90e>
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760e:	d212      	bcs.n	8007636 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	b29b      	uxth	r3, r3
 8007614:	f023 030f 	bic.w	r3, r3, #15
 8007618:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	b29a      	uxth	r2, r3
 8007626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007628:	4313      	orrs	r3, r2
 800762a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007632:	60da      	str	r2, [r3, #12]
 8007634:	e0bb      	b.n	80077ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800763c:	e0b7      	b.n	80077ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800763e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007642:	2b20      	cmp	r3, #32
 8007644:	dc4a      	bgt.n	80076dc <UART_SetConfig+0x9b4>
 8007646:	2b00      	cmp	r3, #0
 8007648:	f2c0 8086 	blt.w	8007758 <UART_SetConfig+0xa30>
 800764c:	2b20      	cmp	r3, #32
 800764e:	f200 8083 	bhi.w	8007758 <UART_SetConfig+0xa30>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x930>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076e3 	.word	0x080076e3
 800765c:	080076fd 	.word	0x080076fd
 8007660:	08007759 	.word	0x08007759
 8007664:	08007759 	.word	0x08007759
 8007668:	08007705 	.word	0x08007705
 800766c:	08007759 	.word	0x08007759
 8007670:	08007759 	.word	0x08007759
 8007674:	08007759 	.word	0x08007759
 8007678:	08007715 	.word	0x08007715
 800767c:	08007759 	.word	0x08007759
 8007680:	08007759 	.word	0x08007759
 8007684:	08007759 	.word	0x08007759
 8007688:	08007759 	.word	0x08007759
 800768c:	08007759 	.word	0x08007759
 8007690:	08007759 	.word	0x08007759
 8007694:	08007759 	.word	0x08007759
 8007698:	08007725 	.word	0x08007725
 800769c:	08007759 	.word	0x08007759
 80076a0:	08007759 	.word	0x08007759
 80076a4:	08007759 	.word	0x08007759
 80076a8:	08007759 	.word	0x08007759
 80076ac:	08007759 	.word	0x08007759
 80076b0:	08007759 	.word	0x08007759
 80076b4:	08007759 	.word	0x08007759
 80076b8:	08007759 	.word	0x08007759
 80076bc:	08007759 	.word	0x08007759
 80076c0:	08007759 	.word	0x08007759
 80076c4:	08007759 	.word	0x08007759
 80076c8:	08007759 	.word	0x08007759
 80076cc:	08007759 	.word	0x08007759
 80076d0:	08007759 	.word	0x08007759
 80076d4:	08007759 	.word	0x08007759
 80076d8:	0800774b 	.word	0x0800774b
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d037      	beq.n	8007750 <UART_SetConfig+0xa28>
 80076e0:	e03a      	b.n	8007758 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e2:	f7fd fb63 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 80076e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80076e8:	e03c      	b.n	8007764 <UART_SetConfig+0xa3c>
 80076ea:	bf00      	nop
 80076ec:	003d0900 	.word	0x003d0900
 80076f0:	0800fd50 	.word	0x0800fd50
 80076f4:	58024400 	.word	0x58024400
 80076f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076fc:	f7fd fb6c 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8007700:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007702:	e02f      	b.n	8007764 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fad1 	bl	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007712:	e027      	b.n	8007764 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007714:	f107 0308 	add.w	r3, r7, #8
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fc1d 	bl	8005f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007722:	e01f      	b.n	8007764 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007724:	4b2c      	ldr	r3, [pc, #176]	; (80077d8 <UART_SetConfig+0xab0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007730:	4b29      	ldr	r3, [pc, #164]	; (80077d8 <UART_SetConfig+0xab0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	4a28      	ldr	r2, [pc, #160]	; (80077dc <UART_SetConfig+0xab4>)
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007742:	e00f      	b.n	8007764 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <UART_SetConfig+0xab4>)
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007748:	e00c      	b.n	8007764 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800774a:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <UART_SetConfig+0xab8>)
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800774e:	e009      	b.n	8007764 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007756:	e005      	b.n	8007764 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007762:	bf00      	nop
    }

    if (pclk != 0U)
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d021      	beq.n	80077ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <UART_SetConfig+0xabc>)
 8007770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007774:	461a      	mov	r2, r3
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	fbb3 f2f2 	udiv	r2, r3, r2
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	441a      	add	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	fbb2 f3f3 	udiv	r3, r2, r3
 800778c:	b29b      	uxth	r3, r3
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	2b0f      	cmp	r3, #15
 8007794:	d908      	bls.n	80077a8 <UART_SetConfig+0xa80>
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779c:	d204      	bcs.n	80077a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	e002      	b.n	80077ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80077ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3738      	adds	r7, #56	; 0x38
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bdb0      	pop	{r4, r5, r7, pc}
 80077d6:	bf00      	nop
 80077d8:	58024400 	.word	0x58024400
 80077dc:	03d09000 	.word	0x03d09000
 80077e0:	003d0900 	.word	0x003d0900
 80077e4:	0800fd50 	.word	0x0800fd50

080077e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01a      	beq.n	80078fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e6:	d10a      	bne.n	80078fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800793c:	f7fa fab6 	bl	8001eac <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10e      	bne.n	800796e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f82f 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e025      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b04      	cmp	r3, #4
 800797a:	d10e      	bne.n	800799a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800797c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f819 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e00f      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d2:	e062      	b.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d05e      	beq.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079dc:	f7fa fa66 	bl	8001eac <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d11d      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e045      	b.n	8007aba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d02e      	beq.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a4a:	d126      	bne.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0201 	bic.w	r2, r2, #1
 8007a74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e00f      	b.n	8007aba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69da      	ldr	r2, [r3, #28]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d08d      	beq.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e027      	b.n	8007b28 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2224      	movs	r2, #36	; 0x24
 8007ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e02d      	b.n	8007ba8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2224      	movs	r2, #36	; 0x24
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f84f 	bl	8007c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e02d      	b.n	8007c24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2224      	movs	r2, #36	; 0x24
 8007bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0201 	bic.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f811 	bl	8007c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d108      	bne.n	8007c4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c4c:	e031      	b.n	8007cb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c4e:	2310      	movs	r3, #16
 8007c50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c52:	2310      	movs	r3, #16
 8007c54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	0e5b      	lsrs	r3, r3, #25
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	0f5b      	lsrs	r3, r3, #29
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	7b3a      	ldrb	r2, [r7, #12]
 8007c7a:	4911      	ldr	r1, [pc, #68]	; (8007cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8007c7c:	5c8a      	ldrb	r2, [r1, r2]
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c82:	7b3a      	ldrb	r2, [r7, #12]
 8007c84:	490f      	ldr	r1, [pc, #60]	; (8007cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8007c86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	7b7a      	ldrb	r2, [r7, #13]
 8007c98:	4909      	ldr	r1, [pc, #36]	; (8007cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8007c9a:	5c8a      	ldrb	r2, [r1, r2]
 8007c9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ca0:	7b7a      	ldrb	r2, [r7, #13]
 8007ca2:	4908      	ldr	r1, [pc, #32]	; (8007cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ca6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	0800fd68 	.word	0x0800fd68
 8007cc4:	0800fd70 	.word	0x0800fd70

08007cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cc8:	b084      	sub	sp, #16
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	f107 001c 	add.w	r0, r7, #28
 8007cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d120      	bne.n	8007d22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	4b2a      	ldr	r3, [pc, #168]	; (8007d9c <USB_CoreInit+0xd4>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d105      	bne.n	8007d16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa60 	bl	80081dc <USB_CoreReset>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	e01a      	b.n	8007d58 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa54 	bl	80081dc <USB_CoreReset>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
 8007d4a:	e005      	b.n	8007d58 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d116      	bne.n	8007d8c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <USB_CoreInit+0xd8>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f043 0206 	orr.w	r2, r3, #6
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f043 0220 	orr.w	r2, r3, #32
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d98:	b004      	add	sp, #16
 8007d9a:	4770      	bx	lr
 8007d9c:	ffbdffbf 	.word	0xffbdffbf
 8007da0:	03ee0000 	.word	0x03ee0000

08007da4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f023 0201 	bic.w	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d106      	bne.n	8007df2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]
 8007df0:	e00b      	b.n	8007e0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	e001      	b.n	8007e0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e003      	b.n	8007e12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e0a:	2032      	movs	r0, #50	; 0x32
 8007e0c:	f7fa f85a 	bl	8001ec4 <HAL_Delay>

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b086      	sub	sp, #24
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	e009      	b.n	8007e50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	3340      	adds	r3, #64	; 0x40
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	2200      	movs	r2, #0
 8007e48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b0e      	cmp	r3, #14
 8007e54:	d9f2      	bls.n	8007e3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d11c      	bne.n	8007e96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6a:	f043 0302 	orr.w	r3, r3, #2
 8007e6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e005      	b.n	8007ea2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	680b      	ldr	r3, [r1, #0]
 8007ec0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d10c      	bne.n	8007ee2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f949 	bl	8008168 <USB_SetDevSpeed>
 8007ed6:	e008      	b.n	8007eea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ed8:	2101      	movs	r1, #1
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f944 	bl	8008168 <USB_SetDevSpeed>
 8007ee0:	e003      	b.n	8007eea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ee2:	2103      	movs	r1, #3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f93f 	bl	8008168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007eea:	2110      	movs	r1, #16
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f8f3 	bl	80080d8 <USB_FlushTxFifo>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f911 	bl	8008124 <USB_FlushRxFifo>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	e043      	b.n	8007fbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f4c:	d118      	bne.n	8007f80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f60:	461a      	mov	r2, r3
 8007f62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e013      	b.n	8007f92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	461a      	mov	r2, r3
 8007f78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	e008      	b.n	8007f92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d3b7      	bcc.n	8007f36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	e043      	b.n	8008054 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe2:	d118      	bne.n	8008016 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e013      	b.n	8008028 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	461a      	mov	r2, r3
 800800e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	e008      	b.n	8008028 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	461a      	mov	r2, r3
 8008024:	2300      	movs	r3, #0
 8008026:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	2300      	movs	r3, #0
 8008038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008046:	461a      	mov	r2, r3
 8008048:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800804c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3301      	adds	r3, #1
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d3b7      	bcc.n	8007fcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800806a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800806e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800807c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d105      	bne.n	8008090 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f043 0210 	orr.w	r2, r3, #16
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <USB_DevInit+0x2b4>)
 8008096:	4313      	orrs	r3, r2
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f043 0208 	orr.w	r2, r3, #8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d105      	bne.n	80080c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699a      	ldr	r2, [r3, #24]
 80080b8:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <USB_DevInit+0x2b8>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080cc:	b004      	add	sp, #16
 80080ce:	4770      	bx	lr
 80080d0:	803c3800 	.word	0x803c3800
 80080d4:	40000004 	.word	0x40000004

080080d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	019b      	lsls	r3, r3, #6
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a09      	ldr	r2, [pc, #36]	; (8008120 <USB_FlushTxFifo+0x48>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d901      	bls.n	8008104 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e006      	b.n	8008112 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b20      	cmp	r3, #32
 800810e:	d0f0      	beq.n	80080f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	00030d40 	.word	0x00030d40

08008124 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2210      	movs	r2, #16
 8008134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4a09      	ldr	r2, [pc, #36]	; (8008164 <USB_FlushRxFifo+0x40>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d901      	bls.n	8008148 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e006      	b.n	8008156 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b10      	cmp	r3, #16
 8008152:	d0f0      	beq.n	8008136 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	00030d40 	.word	0x00030d40

08008168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008188:	4313      	orrs	r3, r2
 800818a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4a13      	ldr	r2, [pc, #76]	; (8008240 <USB_CoreReset+0x64>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d901      	bls.n	80081fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e01b      	b.n	8008232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	daf2      	bge.n	80081e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f043 0201 	orr.w	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4a09      	ldr	r2, [pc, #36]	; (8008240 <USB_CoreReset+0x64>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d901      	bls.n	8008224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e006      	b.n	8008232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b01      	cmp	r3, #1
 800822e:	d0f0      	beq.n	8008212 <USB_CoreReset+0x36>

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	00030d40 	.word	0x00030d40

08008244 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af04      	add	r7, sp, #16
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	9302      	str	r3, [sp, #8]
 8008264:	2301      	movs	r3, #1
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	1dfb      	adds	r3, r7, #7
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2301      	movs	r3, #1
 800826e:	2200      	movs	r2, #0
 8008270:	2178      	movs	r1, #120	; 0x78
 8008272:	4803      	ldr	r0, [pc, #12]	; (8008280 <ssd1306_WriteCommand+0x2c>)
 8008274:	f7fb f8ea 	bl	800344c <HAL_I2C_Mem_Write>
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	240006e0 	.word	0x240006e0

08008284 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af04      	add	r7, sp, #16
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f04f 32ff 	mov.w	r2, #4294967295
 8008296:	9202      	str	r2, [sp, #8]
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2301      	movs	r3, #1
 80082a0:	2240      	movs	r2, #64	; 0x40
 80082a2:	2178      	movs	r1, #120	; 0x78
 80082a4:	4803      	ldr	r0, [pc, #12]	; (80082b4 <ssd1306_WriteData+0x30>)
 80082a6:	f7fb f8d1 	bl	800344c <HAL_I2C_Mem_Write>
}
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	240006e0 	.word	0x240006e0

080082b8 <ssd1306_Init>:
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80082bc:	f7ff ffc2 	bl	8008244 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80082c0:	2064      	movs	r0, #100	; 0x64
 80082c2:	f7f9 fdff 	bl	8001ec4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80082c6:	2000      	movs	r0, #0
 80082c8:	f000 f9e6 	bl	8008698 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80082cc:	2020      	movs	r0, #32
 80082ce:	f7ff ffc1 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80082d2:	2000      	movs	r0, #0
 80082d4:	f7ff ffbe 	bl	8008254 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80082d8:	20b0      	movs	r0, #176	; 0xb0
 80082da:	f7ff ffbb 	bl	8008254 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80082de:	20c8      	movs	r0, #200	; 0xc8
 80082e0:	f7ff ffb8 	bl	8008254 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7ff ffb5 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80082ea:	2010      	movs	r0, #16
 80082ec:	f7ff ffb2 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80082f0:	2040      	movs	r0, #64	; 0x40
 80082f2:	f7ff ffaf 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80082f6:	20ff      	movs	r0, #255	; 0xff
 80082f8:	f000 f9ba 	bl	8008670 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80082fc:	20a1      	movs	r0, #161	; 0xa1
 80082fe:	f7ff ffa9 	bl	8008254 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8008302:	20a6      	movs	r0, #166	; 0xa6
 8008304:	f7ff ffa6 	bl	8008254 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008308:	20a8      	movs	r0, #168	; 0xa8
 800830a:	f7ff ffa3 	bl	8008254 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800830e:	201f      	movs	r0, #31
 8008310:	f7ff ffa0 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008314:	20a4      	movs	r0, #164	; 0xa4
 8008316:	f7ff ff9d 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800831a:	20d3      	movs	r0, #211	; 0xd3
 800831c:	f7ff ff9a 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8008320:	2000      	movs	r0, #0
 8008322:	f7ff ff97 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8008326:	20d5      	movs	r0, #213	; 0xd5
 8008328:	f7ff ff94 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800832c:	20f0      	movs	r0, #240	; 0xf0
 800832e:	f7ff ff91 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8008332:	20d9      	movs	r0, #217	; 0xd9
 8008334:	f7ff ff8e 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008338:	2022      	movs	r0, #34	; 0x22
 800833a:	f7ff ff8b 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800833e:	20da      	movs	r0, #218	; 0xda
 8008340:	f7ff ff88 	bl	8008254 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8008344:	2002      	movs	r0, #2
 8008346:	f7ff ff85 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800834a:	20db      	movs	r0, #219	; 0xdb
 800834c:	f7ff ff82 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008350:	2020      	movs	r0, #32
 8008352:	f7ff ff7f 	bl	8008254 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8008356:	208d      	movs	r0, #141	; 0x8d
 8008358:	f7ff ff7c 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800835c:	2014      	movs	r0, #20
 800835e:	f7ff ff79 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8008362:	2001      	movs	r0, #1
 8008364:	f000 f998 	bl	8008698 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8008368:	2000      	movs	r0, #0
 800836a:	f000 f80f 	bl	800838c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800836e:	f000 f831 	bl	80083d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <ssd1306_Init+0xd0>)
 8008374:	2200      	movs	r2, #0
 8008376:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <ssd1306_Init+0xd0>)
 800837a:	2200      	movs	r2, #0
 800837c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800837e:	4b02      	ldr	r3, [pc, #8]	; (8008388 <ssd1306_Init+0xd0>)
 8008380:	2201      	movs	r2, #1
 8008382:	715a      	strb	r2, [r3, #5]
}
 8008384:	bf00      	nop
 8008386:	bd80      	pop	{r7, pc}
 8008388:	2400057c 	.word	0x2400057c

0800838c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	e00d      	b.n	80083b8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <ssd1306_Fill+0x1a>
 80083a2:	2100      	movs	r1, #0
 80083a4:	e000      	b.n	80083a8 <ssd1306_Fill+0x1c>
 80083a6:	21ff      	movs	r1, #255	; 0xff
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <ssd1306_Fill+0x44>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	460a      	mov	r2, r1
 80083b0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3301      	adds	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083be:	d3ed      	bcc.n	800839c <ssd1306_Fill+0x10>
    }
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	2400037c 	.word	0x2400037c

080083d4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80083da:	2300      	movs	r3, #0
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	e016      	b.n	800840e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	3b50      	subs	r3, #80	; 0x50
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff ff34 	bl	8008254 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80083ec:	2000      	movs	r0, #0
 80083ee:	f7ff ff31 	bl	8008254 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80083f2:	2010      	movs	r0, #16
 80083f4:	f7ff ff2e 	bl	8008254 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	01db      	lsls	r3, r3, #7
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <ssd1306_UpdateScreen+0x4c>)
 80083fe:	4413      	add	r3, r2
 8008400:	2180      	movs	r1, #128	; 0x80
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff ff3e 	bl	8008284 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	3301      	adds	r3, #1
 800840c:	71fb      	strb	r3, [r7, #7]
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d9e5      	bls.n	80083e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	2400037c 	.word	0x2400037c

08008424 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	71fb      	strb	r3, [r7, #7]
 800842e:	460b      	mov	r3, r1
 8008430:	71bb      	strb	r3, [r7, #6]
 8008432:	4613      	mov	r3, r2
 8008434:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8008436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	db48      	blt.n	80084d0 <ssd1306_DrawPixel+0xac>
 800843e:	79bb      	ldrb	r3, [r7, #6]
 8008440:	2b1f      	cmp	r3, #31
 8008442:	d845      	bhi.n	80084d0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted)
 8008444:	4b25      	ldr	r3, [pc, #148]	; (80084dc <ssd1306_DrawPixel+0xb8>)
 8008446:	791b      	ldrb	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d006      	beq.n	800845a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800844c:	797b      	ldrb	r3, [r7, #5]
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White)
 800845a:	797b      	ldrb	r3, [r7, #5]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d11a      	bne.n	8008496 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008460:	79fa      	ldrb	r2, [r7, #7]
 8008462:	79bb      	ldrb	r3, [r7, #6]
 8008464:	08db      	lsrs	r3, r3, #3
 8008466:	b2d8      	uxtb	r0, r3
 8008468:	4603      	mov	r3, r0
 800846a:	01db      	lsls	r3, r3, #7
 800846c:	4413      	add	r3, r2
 800846e:	4a1c      	ldr	r2, [pc, #112]	; (80084e0 <ssd1306_DrawPixel+0xbc>)
 8008470:	5cd3      	ldrb	r3, [r2, r3]
 8008472:	b25a      	sxtb	r2, r3
 8008474:	79bb      	ldrb	r3, [r7, #6]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2101      	movs	r1, #1
 800847c:	fa01 f303 	lsl.w	r3, r1, r3
 8008480:	b25b      	sxtb	r3, r3
 8008482:	4313      	orrs	r3, r2
 8008484:	b259      	sxtb	r1, r3
 8008486:	79fa      	ldrb	r2, [r7, #7]
 8008488:	4603      	mov	r3, r0
 800848a:	01db      	lsls	r3, r3, #7
 800848c:	4413      	add	r3, r2
 800848e:	b2c9      	uxtb	r1, r1
 8008490:	4a13      	ldr	r2, [pc, #76]	; (80084e0 <ssd1306_DrawPixel+0xbc>)
 8008492:	54d1      	strb	r1, [r2, r3]
 8008494:	e01d      	b.n	80084d2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008496:	79fa      	ldrb	r2, [r7, #7]
 8008498:	79bb      	ldrb	r3, [r7, #6]
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	b2d8      	uxtb	r0, r3
 800849e:	4603      	mov	r3, r0
 80084a0:	01db      	lsls	r3, r3, #7
 80084a2:	4413      	add	r3, r2
 80084a4:	4a0e      	ldr	r2, [pc, #56]	; (80084e0 <ssd1306_DrawPixel+0xbc>)
 80084a6:	5cd3      	ldrb	r3, [r2, r3]
 80084a8:	b25a      	sxtb	r2, r3
 80084aa:	79bb      	ldrb	r3, [r7, #6]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	2101      	movs	r1, #1
 80084b2:	fa01 f303 	lsl.w	r3, r1, r3
 80084b6:	b25b      	sxtb	r3, r3
 80084b8:	43db      	mvns	r3, r3
 80084ba:	b25b      	sxtb	r3, r3
 80084bc:	4013      	ands	r3, r2
 80084be:	b259      	sxtb	r1, r3
 80084c0:	79fa      	ldrb	r2, [r7, #7]
 80084c2:	4603      	mov	r3, r0
 80084c4:	01db      	lsls	r3, r3, #7
 80084c6:	4413      	add	r3, r2
 80084c8:	b2c9      	uxtb	r1, r1
 80084ca:	4a05      	ldr	r2, [pc, #20]	; (80084e0 <ssd1306_DrawPixel+0xbc>)
 80084cc:	54d1      	strb	r1, [r2, r3]
 80084ce:	e000      	b.n	80084d2 <ssd1306_DrawPixel+0xae>
        return;
 80084d0:	bf00      	nop
    }
}
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	2400057c 	.word	0x2400057c
 80084e0:	2400037c 	.word	0x2400037c

080084e4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	1d38      	adds	r0, r7, #4
 80084ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80084f2:	461a      	mov	r2, r3
 80084f4:	4623      	mov	r3, r4
 80084f6:	73fb      	strb	r3, [r7, #15]
 80084f8:	4613      	mov	r3, r2
 80084fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b1f      	cmp	r3, #31
 8008500:	d902      	bls.n	8008508 <ssd1306_WriteChar+0x24>
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	2b7e      	cmp	r3, #126	; 0x7e
 8008506:	d901      	bls.n	800850c <ssd1306_WriteChar+0x28>
        return 0;
 8008508:	2300      	movs	r3, #0
 800850a:	e06d      	b.n	80085e8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800850c:	4b38      	ldr	r3, [pc, #224]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	793b      	ldrb	r3, [r7, #4]
 8008514:	4413      	add	r3, r2
 8008516:	2b80      	cmp	r3, #128	; 0x80
 8008518:	dc06      	bgt.n	8008528 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800851a:	4b35      	ldr	r3, [pc, #212]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	461a      	mov	r2, r3
 8008520:	797b      	ldrb	r3, [r7, #5]
 8008522:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008524:	2b20      	cmp	r3, #32
 8008526:	dd01      	ble.n	800852c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8008528:	2300      	movs	r3, #0
 800852a:	e05d      	b.n	80085e8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++)
 800852c:	2300      	movs	r3, #0
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	e04c      	b.n	80085cc <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	3b20      	subs	r3, #32
 8008538:	7979      	ldrb	r1, [r7, #5]
 800853a:	fb01 f303 	mul.w	r3, r1, r3
 800853e:	4619      	mov	r1, r3
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	440b      	add	r3, r1
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4413      	add	r3, r2
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++)
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	e034      	b.n	80085bc <ssd1306_WriteChar+0xd8>
        {
            if((b << j) & 0x8000)
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d012      	beq.n	8008588 <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008562:	4b23      	ldr	r3, [pc, #140]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	4413      	add	r3, r2
 800856e:	b2d8      	uxtb	r0, r3
 8008570:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 8008572:	885b      	ldrh	r3, [r3, #2]
 8008574:	b2da      	uxtb	r2, r3
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4413      	add	r3, r2
 800857c:	b2db      	uxtb	r3, r3
 800857e:	7bba      	ldrb	r2, [r7, #14]
 8008580:	4619      	mov	r1, r3
 8008582:	f7ff ff4f 	bl	8008424 <ssd1306_DrawPixel>
 8008586:	e016      	b.n	80085b6 <ssd1306_WriteChar+0xd2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008588:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b2da      	uxtb	r2, r3
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	4413      	add	r3, r2
 8008594:	b2d8      	uxtb	r0, r3
 8008596:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	b2da      	uxtb	r2, r3
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	b2d9      	uxtb	r1, r3
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bf0c      	ite	eq
 80085aa:	2301      	moveq	r3, #1
 80085ac:	2300      	movne	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	f7ff ff37 	bl	8008424 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++)
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	3301      	adds	r3, #1
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	793b      	ldrb	r3, [r7, #4]
 80085be:	461a      	mov	r2, r3
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d3c5      	bcc.n	8008552 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++)
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	3301      	adds	r3, #1
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	797b      	ldrb	r3, [r7, #5]
 80085ce:	461a      	mov	r2, r3
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d3ad      	bcc.n	8008532 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	793b      	ldrb	r3, [r7, #4]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4413      	add	r3, r2
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <ssd1306_WriteChar+0x10c>)
 80085e4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3724      	adds	r7, #36	; 0x24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd90      	pop	{r4, r7, pc}
 80085f0:	2400057c 	.word	0x2400057c

080085f4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	1d38      	adds	r0, r7, #4
 80085fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8008602:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8008604:	e012      	b.n	800862c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	7818      	ldrb	r0, [r3, #0]
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	1d3a      	adds	r2, r7, #4
 800860e:	ca06      	ldmia	r2, {r1, r2}
 8008610:	f7ff ff68 	bl	80084e4 <ssd1306_WriteChar>
 8008614:	4603      	mov	r3, r0
 8008616:	461a      	mov	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d002      	beq.n	8008626 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	e008      	b.n	8008638 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e8      	bne.n	8008606 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	781b      	ldrb	r3, [r3, #0]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	460a      	mov	r2, r1
 800864a:	71fb      	strb	r3, [r7, #7]
 800864c:	4613      	mov	r3, r2
 800864e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	b29a      	uxth	r2, r3
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <ssd1306_SetCursor+0x2c>)
 8008656:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008658:	79bb      	ldrb	r3, [r7, #6]
 800865a:	b29a      	uxth	r2, r3
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <ssd1306_SetCursor+0x2c>)
 800865e:	805a      	strh	r2, [r3, #2]
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	2400057c 	.word	0x2400057c

08008670 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800867a:	2381      	movs	r3, #129	; 0x81
 800867c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff fde7 	bl	8008254 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fde3 	bl	8008254 <ssd1306_WriteCommand>
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80086a8:	23af      	movs	r3, #175	; 0xaf
 80086aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80086ac:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <ssd1306_SetDisplayOn+0x38>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	719a      	strb	r2, [r3, #6]
 80086b2:	e004      	b.n	80086be <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80086b4:	23ae      	movs	r3, #174	; 0xae
 80086b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80086b8:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <ssd1306_SetDisplayOn+0x38>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff fdc7 	bl	8008254 <ssd1306_WriteCommand>
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	2400057c 	.word	0x2400057c

080086d4 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80086da:	2000      	movs	r0, #0
 80086dc:	f7ff fe56 	bl	800838c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80086e0:	f7f9 fbe4 	bl	8001eac <HAL_GetTick>
 80086e4:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 80086f2:	7bb9      	ldrb	r1, [r7, #14]
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	2200      	movs	r2, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fe93 	bl	8008424 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <ssd1306_TestBorder+0x3e>
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2b7e      	cmp	r3, #126	; 0x7e
 8008708:	d803      	bhi.n	8008712 <ssd1306_TestBorder+0x3e>
            x++;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	3301      	adds	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
 8008710:	e016      	b.n	8008740 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b7f      	cmp	r3, #127	; 0x7f
 8008716:	d106      	bne.n	8008726 <ssd1306_TestBorder+0x52>
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b1e      	cmp	r3, #30
 800871c:	d803      	bhi.n	8008726 <ssd1306_TestBorder+0x52>
            y++;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	3301      	adds	r3, #1
 8008722:	73bb      	strb	r3, [r7, #14]
 8008724:	e00c      	b.n	8008740 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b1f      	cmp	r3, #31
 800872a:	d106      	bne.n	800873a <ssd1306_TestBorder+0x66>
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <ssd1306_TestBorder+0x66>
            x--;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	3b01      	subs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
 8008738:	e002      	b.n	8008740 <ssd1306_TestBorder+0x6c>
        else
            y--;
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	3b01      	subs	r3, #1
 800873e:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8008740:	7bb9      	ldrb	r1, [r7, #14]
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	2201      	movs	r2, #1
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fe6c 	bl	8008424 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800874c:	f7ff fe42 	bl	80083d4 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8008750:	2005      	movs	r0, #5
 8008752:	f7f9 fbb7 	bl	8001ec4 <HAL_Delay>
        end = HAL_GetTick();
 8008756:	f7f9 fba9 	bl	8001eac <HAL_GetTick>
 800875a:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008766:	d3c4      	bcc.n	80086f2 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8008768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800876c:	f7f9 fbaa 	bl	8001ec4 <HAL_Delay>
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	601a      	str	r2, [r3, #0]
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff ffdd 	bl	800879a <metal_list_add_before>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 ff89 	bl	800a70c <metal_machine_cache_flush>
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 ff87 	bl	800a722 <metal_machine_cache_invalidate>
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ffdd 	bl	80087e8 <__metal_cache_flush>
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ffdd 	bl	8008802 <__metal_cache_invalidate>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d008      	beq.n	8008870 <metal_bus_register+0x20>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <metal_bus_register+0x20>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <metal_bus_register+0x26>
		return -EINVAL;
 8008870:	f06f 0315 	mvn.w	r3, #21
 8008874:	e026      	b.n	80088c4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f82b 	bl	80088d8 <metal_bus_find>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d102      	bne.n	800888e <metal_bus_register+0x3e>
		return -EEXIST;
 8008888:	f06f 0310 	mvn.w	r3, #16
 800888c:	e01a      	b.n	80088c4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	331c      	adds	r3, #28
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff ff70 	bl	8008778 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3324      	adds	r3, #36	; 0x24
 800889c:	4619      	mov	r1, r3
 800889e:	480b      	ldr	r0, [pc, #44]	; (80088cc <metal_bus_register+0x7c>)
 80088a0:	f7ff ff95 	bl	80087ce <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80088a4:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <metal_bus_register+0x80>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b06      	cmp	r3, #6
 80088aa:	d90a      	bls.n	80088c2 <metal_bus_register+0x72>
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <metal_bus_register+0x80>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <metal_bus_register+0x72>
 80088b4:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <metal_bus_register+0x80>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	4905      	ldr	r1, [pc, #20]	; (80088d4 <metal_bus_register+0x84>)
 80088be:	2007      	movs	r0, #7
 80088c0:	4798      	blx	r3
	return 0;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	24000ca8 	.word	0x24000ca8
 80088d0:	24000ca0 	.word	0x24000ca0
 80088d4:	0800fb64 	.word	0x0800fb64

080088d8 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 80088e2:	4b13      	ldr	r3, [pc, #76]	; (8008930 <metal_bus_find+0x58>)
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e017      	b.n	800891a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3b24      	subs	r3, #36	; 0x24
 80088ee:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f7 fcf2 	bl	80002e0 <strcmp>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	e007      	b.n	800891a <metal_bus_find+0x42>
			continue;
		if (result)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <metal_bus_find+0x3e>
			*result = bus;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	601a      	str	r2, [r3, #0]
		return 0;
 8008916:	2300      	movs	r3, #0
 8008918:	e005      	b.n	8008926 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4a05      	ldr	r2, [pc, #20]	; (8008934 <metal_bus_find+0x5c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d1e3      	bne.n	80088ea <metal_bus_find+0x12>
	}
	return -ENOENT;
 8008922:	f06f 0301 	mvn.w	r3, #1
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	24000ca0 	.word	0x24000ca0
 8008934:	24000ca8 	.word	0x24000ca8

08008938 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00d      	beq.n	8008966 <metal_device_open+0x2e>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <metal_device_open+0x2e>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d006      	beq.n	8008966 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <metal_device_open+0x2e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d102      	bne.n	800896c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8008966:	f06f 0315 	mvn.w	r3, #21
 800896a:	e01f      	b.n	80089ac <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 800896c:	f107 0310 	add.w	r3, r7, #16
 8008970:	4619      	mov	r1, r3
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff ffb0 	bl	80088d8 <metal_bus_find>
 8008978:	6178      	str	r0, [r7, #20]
	if (error)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <metal_device_open+0x4c>
		return error;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	e013      	b.n	80089ac <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <metal_device_open+0x5a>
		return -ENODEV;
 800898c:	f06f 0312 	mvn.w	r3, #18
 8008990:	e00c      	b.n	80089ac <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	6938      	ldr	r0, [r7, #16]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	4798      	blx	r3
 800899e:	6178      	str	r0, [r7, #20]
	if (error)
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <metal_device_open+0x72>
		return error;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	e000      	b.n	80089ac <metal_device_open+0x74>

	return 0;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <metal_register_generic_device+0x22>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d902      	bls.n	80089dc <metal_register_generic_device+0x28>
		return -EINVAL;
 80089d6:	f06f 0315 	mvn.w	r3, #21
 80089da:	e009      	b.n	80089f0 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a06      	ldr	r2, [pc, #24]	; (80089f8 <metal_register_generic_device+0x44>)
 80089e0:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	336c      	adds	r3, #108	; 0x6c
 80089e6:	4619      	mov	r1, r3
 80089e8:	4804      	ldr	r0, [pc, #16]	; (80089fc <metal_register_generic_device+0x48>)
 80089ea:	f7ff fef0 	bl	80087ce <metal_list_add_tail>
			    &device->node);
	return 0;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	24000018 	.word	0x24000018
 80089fc:	24000cb8 	.word	0x24000cb8

08008a00 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8008a0c:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <metal_generic_dev_open+0x58>)
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	e017      	b.n	8008a44 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	3b6c      	subs	r3, #108	; 0x6c
 8008a18:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f7 fc5d 	bl	80002e0 <strcmp>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	e007      	b.n	8008a44 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8008a3a:	6938      	ldr	r0, [r7, #16]
 8008a3c:	f000 f88c 	bl	8008b58 <metal_generic_dev_sys_open>
 8008a40:	4603      	mov	r3, r0
 8008a42:	e005      	b.n	8008a50 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	4a05      	ldr	r2, [pc, #20]	; (8008a5c <metal_generic_dev_open+0x5c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d1e3      	bne.n	8008a14 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8008a4c:	f06f 0312 	mvn.w	r3, #18
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	24000ca0 	.word	0x24000ca0
 8008a5c:	24000cb8 	.word	0x24000cb8

08008a60 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d009      	beq.n	8008a8a <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8008a76:	6a3a      	ldr	r2, [r7, #32]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	461a      	mov	r2, r3
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a86:	f002 fcd9 	bl	800b43c <memcpy>
	for (i = 0; i < nents_in; i++) {
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	e02f      	b.n	8008af0 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d114      	bne.n	8008ac0 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	4413      	add	r3, r2
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	4413      	add	r3, r2
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	4619      	mov	r1, r3
 8008abc:	f7ff feae 	bl	800881c <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	461a      	mov	r2, r3
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	4413      	add	r3, r2
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	461a      	mov	r2, r3
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	4413      	add	r3, r2
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f7ff fea6 	bl	8008836 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	3301      	adds	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	dbcb      	blt.n	8008a90 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8008af8:	6a3b      	ldr	r3, [r7, #32]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e017      	b.n	8008b46 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	461a      	mov	r2, r3
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	461a      	mov	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	4413      	add	r3, r2
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	f7ff fe7b 	bl	8008836 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	3301      	adds	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	dbe3      	blt.n	8008b16 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e013      	b.n	8008b8e <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	4413      	add	r3, r2
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	3308      	adds	r3, #8
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	4413      	add	r3, r2
 8008b76:	3304      	adds	r3, #4
 8008b78:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8008b82:	68b8      	ldr	r0, [r7, #8]
 8008b84:	f000 f81e 	bl	8008bc4 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3e6      	bcc.n	8008b66 <metal_generic_dev_sys_open+0xe>
 8008b98:	e000      	b.n	8008b9c <metal_generic_dev_sys_open+0x44>
			break;
 8008b9a:	bf00      	nop
	}

	return 0;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8008bb0:	4803      	ldr	r0, [pc, #12]	; (8008bc0 <metal_sys_init+0x18>)
 8008bb2:	f7ff fe4d 	bl	8008850 <metal_bus_register>
	return 0;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	24000018 	.word	0x24000018

08008bc4 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	613b      	str	r3, [r7, #16]
	if (psize) {
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d02c      	beq.n	8008c38 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e013      	b.n	8008c26 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f001 fd91 	bl	800a738 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	3301      	adds	r3, #1
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d9e2      	bls.n	8008bfe <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8008c38:	bf00      	nop
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <metal_list_init>:
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	int error = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8008c70:	2220      	movs	r2, #32
 8008c72:	2100      	movs	r1, #0
 8008c74:	4810      	ldr	r0, [pc, #64]	; (8008cb8 <metal_init+0x54>)
 8008c76:	f002 fc09 	bl	800b48c <memset>

	_metal.common.log_handler   = params->log_handler;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a0e      	ldr	r2, [pc, #56]	; (8008cb8 <metal_init+0x54>)
 8008c80:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	791a      	ldrb	r2, [r3, #4]
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <metal_init+0x54>)
 8008c88:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8008c8a:	480c      	ldr	r0, [pc, #48]	; (8008cbc <metal_init+0x58>)
 8008c8c:	f7ff ffd8 	bl	8008c40 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8008c90:	480b      	ldr	r0, [pc, #44]	; (8008cc0 <metal_init+0x5c>)
 8008c92:	f7ff ffd5 	bl	8008c40 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8008c96:	480b      	ldr	r0, [pc, #44]	; (8008cc4 <metal_init+0x60>)
 8008c98:	f7ff ffd2 	bl	8008c40 <metal_list_init>

	error = metal_sys_init(params);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff83 	bl	8008ba8 <metal_sys_init>
 8008ca2:	60f8      	str	r0, [r7, #12]
	if (error)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <metal_init+0x4a>
		return error;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	e000      	b.n	8008cb0 <metal_init+0x4c>

	return error;
 8008cae:	68fb      	ldr	r3, [r7, #12]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	24000ca0 	.word	0x24000ca0
 8008cbc:	24000ca8 	.word	0x24000ca8
 8008cc0:	24000cb0 	.word	0x24000cb0
 8008cc4:	24000cb8 	.word	0x24000cb8

08008cc8 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d009      	beq.n	8008cf0 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d804      	bhi.n	8008cf0 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	4413      	add	r3, r2
 8008cee:	e000      	b.n	8008cf2 <metal_io_virt+0x2a>
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8008cfe:	b5b0      	push	{r4, r5, r7, lr}
 8008d00:	b08a      	sub	sp, #40	; 0x28
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	605a      	str	r2, [r3, #4]
 8008d16:	609a      	str	r2, [r3, #8]
 8008d18:	60da      	str	r2, [r3, #12]
 8008d1a:	611a      	str	r2, [r3, #16]
 8008d1c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]
	io->size = size;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d34:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	2b1f      	cmp	r3, #31
 8008d3a:	d904      	bls.n	8008d46 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d42:	611a      	str	r2, [r3, #16]
 8008d44:	e006      	b.n	8008d54 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8008d46:	2201      	movs	r2, #1
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d58:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8008d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <metal_io_init+0x7a>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d64:	f103 0418 	add.w	r4, r3, #24
 8008d68:	4615      	mov	r5, r2
 8008d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d72:	e884 0003 	stmia.w	r4, {r0, r1}
 8008d76:	e00a      	b.n	8008d8e <metal_io_init+0x90>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f103 0418 	add.w	r4, r3, #24
 8008d7e:	f107 0510 	add.w	r5, r7, #16
 8008d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d8a:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff ff18 	bl	8008bc4 <metal_sys_io_mem_map>
}
 8008d94:	bf00      	nop
 8008d96:	3728      	adds	r7, #40	; 0x28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bdb0      	pop	{r4, r5, r7, pc}

08008d9c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b08b      	sub	sp, #44	; 0x2c
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ff8b 	bl	8008cc8 <metal_io_virt>
 8008db2:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d902      	bls.n	8008dc8 <metal_io_block_read+0x2c>
		return -ERANGE;
 8008dc2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8008dc6:	e05c      	b.n	8008e82 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d904      	bls.n	8008de0 <metal_io_block_read+0x44>
		len = io->size - offset;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1c      	ldr	r4, [r3, #32]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	2305      	movs	r3, #5
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	47a0      	blx	r4
 8008dfe:	6178      	str	r0, [r7, #20]
 8008e00:	e03e      	b.n	8008e80 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8008e02:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8008e06:	e00c      	b.n	8008e22 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	701a      	strb	r2, [r3, #0]
			dest++;
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	3301      	adds	r3, #1
 8008e14:	61bb      	str	r3, [r7, #24]
			ptr++;
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	61fb      	str	r3, [r7, #28]
			len--;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1ea      	bne.n	8008e08 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008e3c:	e00c      	b.n	8008e58 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	dcef      	bgt.n	8008e3e <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8008e5e:	e00c      	b.n	8008e7a <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	3301      	adds	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1ef      	bne.n	8008e60 <metal_io_block_read+0xc4>
	}
	return retlen;
 8008e80:	697b      	ldr	r3, [r7, #20]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3724      	adds	r7, #36	; 0x24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd90      	pop	{r4, r7, pc}

08008e8a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8008e8a:	b590      	push	{r4, r7, lr}
 8008e8c:	b08b      	sub	sp, #44	; 0x2c
 8008e8e:	af02      	add	r7, sp, #8
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff ff14 	bl	8008cc8 <metal_io_virt>
 8008ea0:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d902      	bls.n	8008eb6 <metal_io_block_write+0x2c>
		return -ERANGE;
 8008eb0:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8008eb4:	e05b      	b.n	8008f6e <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	441a      	add	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d904      	bls.n	8008ece <metal_io_block_write+0x44>
		len = io->size - offset;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d017      	beq.n	8008f0a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2305      	movs	r3, #5
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	68b9      	ldr	r1, [r7, #8]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	47a0      	blx	r4
 8008eec:	6178      	str	r0, [r7, #20]
 8008eee:	e03d      	b.n	8008f6c <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	701a      	strb	r2, [r3, #0]
			ptr++;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	3301      	adds	r3, #1
 8008efc:	61fb      	str	r3, [r7, #28]
			source++;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	3301      	adds	r3, #1
 8008f02:	61bb      	str	r3, [r7, #24]
			len--;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d017      	beq.n	8008f40 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1ea      	bne.n	8008ef0 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e5      	bne.n	8008ef0 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008f24:	e00c      	b.n	8008f40 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	3304      	adds	r3, #4
 8008f32:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	3304      	adds	r3, #4
 8008f38:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	3b04      	subs	r3, #4
 8008f3e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	dcef      	bgt.n	8008f26 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8008f46:	e00c      	b.n	8008f62 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	3301      	adds	r3, #1
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	61bb      	str	r3, [r7, #24]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1ef      	bne.n	8008f48 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8008f68:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008f6c:	697b      	ldr	r3, [r7, #20]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3724      	adds	r7, #36	; 0x24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}

08008f76 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8008f76:	b590      	push	{r4, r7, lr}
 8008f78:	b08b      	sub	sp, #44	; 0x2c
 8008f7a:	af02      	add	r7, sp, #8
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff fe9d 	bl	8008cc8 <metal_io_virt>
 8008f8e:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d902      	bls.n	8008fa4 <metal_io_block_set+0x2e>
		return -ERANGE;
 8008f9e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8008fa2:	e05d      	b.n	8009060 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	441a      	add	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d904      	bls.n	8008fbc <metal_io_block_set+0x46>
		len = io->size - offset;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8008fcc:	79fa      	ldrb	r2, [r7, #7]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	2305      	movs	r3, #5
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	47a0      	blx	r4
 8008fda:	e040      	b.n	800905e <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	e00a      	b.n	8008ffc <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8008fe6:	79fa      	ldrb	r2, [r7, #7]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d9f1      	bls.n	8008fe6 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8009002:	e008      	b.n	8009016 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	79fa      	ldrb	r2, [r7, #7]
 8009008:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	3301      	adds	r3, #1
 800900e:	61fb      	str	r3, [r7, #28]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3b01      	subs	r3, #1
 8009014:	603b      	str	r3, [r7, #0]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <metal_io_block_set+0xc4>
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1ee      	bne.n	8009004 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009026:	e008      	b.n	800903a <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	3304      	adds	r3, #4
 8009032:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	3b04      	subs	r3, #4
 8009038:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b03      	cmp	r3, #3
 800903e:	dcf3      	bgt.n	8009028 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8009040:	e008      	b.n	8009054 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	79fa      	ldrb	r2, [r7, #7]
 8009046:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	3301      	adds	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f3      	bne.n	8009042 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800905a:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800905e:	693b      	ldr	r3, [r7, #16]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3724      	adds	r7, #36	; 0x24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd90      	pop	{r4, r7, pc}

08009068 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8009068:	b40e      	push	{r1, r2, r3}
 800906a:	b480      	push	{r7}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	4603      	mov	r3, r0
 8009072:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	b003      	add	sp, #12
 8009080:	4770      	bx	lr

08009082 <metal_io_virt>:
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d009      	beq.n	80090aa <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d804      	bhi.n	80090aa <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
		: NULL);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	4413      	add	r3, r2
 80090a8:	e000      	b.n	80090ac <metal_io_virt+0x2a>
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d201      	bcs.n	80090da <metal_io_virt_to_offset+0x22>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	e001      	b.n	80090de <metal_io_virt_to_offset+0x26>
 80090da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b08d      	sub	sp, #52	; 0x34
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	4613      	mov	r3, r2
 80090fa:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff ffbf 	bl	8009082 <metal_io_virt>
 8009104:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	699c      	ldr	r4, [r3, #24]
 8009112:	79fa      	ldrb	r2, [r7, #7]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	47a0      	blx	r4
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	e057      	b.n	80091d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d011      	beq.n	800914c <metal_io_read+0x60>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d10e      	bne.n	800914c <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	62bb      	str	r3, [r7, #40]	; 0x28
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	f3bf 8f5b 	dmb	ish
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	f3bf 8f5b 	dmb	ish
 800913e:	b2db      	uxtb	r3, r3
 8009140:	76fb      	strb	r3, [r7, #27]
 8009142:	7efb      	ldrb	r3, [r7, #27]
 8009144:	b2da      	uxtb	r2, r3
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	e042      	b.n	80091d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d011      	beq.n	8009176 <metal_io_read+0x8a>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d10e      	bne.n	8009176 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	f3bf 8f5b 	dmb	ish
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	f3bf 8f5b 	dmb	ish
 8009168:	b29b      	uxth	r3, r3
 800916a:	833b      	strh	r3, [r7, #24]
 800916c:	8b3b      	ldrh	r3, [r7, #24]
 800916e:	b29a      	uxth	r2, r3
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	e02d      	b.n	80091d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <metal_io_read+0xb2>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b04      	cmp	r3, #4
 8009180:	d10d      	bne.n	800919e <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	623b      	str	r3, [r7, #32]
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	f3bf 8f5b 	dmb	ish
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f3bf 8f5b 	dmb	ish
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	461a      	mov	r2, r3
 8009198:	f04f 0300 	mov.w	r3, #0
 800919c:	e019      	b.n	80091d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d010      	beq.n	80091c6 <metal_io_read+0xda>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d10d      	bne.n	80091c6 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	61fb      	str	r3, [r7, #28]
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	f3bf 8f5b 	dmb	ish
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f3bf 8f5b 	dmb	ish
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	461a      	mov	r2, r3
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	e005      	b.n	80091d2 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <metal_io_read+0xf0>)
 80091c8:	4a05      	ldr	r2, [pc, #20]	; (80091e0 <metal_io_read+0xf4>)
 80091ca:	21f0      	movs	r1, #240	; 0xf0
 80091cc:	4805      	ldr	r0, [pc, #20]	; (80091e4 <metal_io_read+0xf8>)
 80091ce:	f002 f8cb 	bl	800b368 <__assert_func>
	return 0; /* quiet compiler */
}
 80091d2:	4610      	mov	r0, r2
 80091d4:	4619      	mov	r1, r3
 80091d6:	3734      	adds	r7, #52	; 0x34
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd90      	pop	{r4, r7, pc}
 80091dc:	0800fc20 	.word	0x0800fc20
 80091e0:	08010528 	.word	0x08010528
 80091e4:	0800fc24 	.word	0x0800fc24

080091e8 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 80091e8:	b590      	push	{r4, r7, lr}
 80091ea:	b08f      	sub	sp, #60	; 0x3c
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff ff42 	bl	8009082 <metal_io_virt>
 80091fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	69dc      	ldr	r4, [r3, #28]
 800920c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8009220:	e04e      	b.n	80092c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00e      	beq.n	8009246 <metal_io_write+0x5e>
 8009228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922a:	2b01      	cmp	r3, #1
 800922c:	d10b      	bne.n	8009246 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	62bb      	str	r3, [r7, #40]	; 0x28
 8009232:	783b      	ldrb	r3, [r7, #0]
 8009234:	76fb      	strb	r3, [r7, #27]
 8009236:	7efa      	ldrb	r2, [r7, #27]
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	f3bf 8f5b 	dmb	ish
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	f3bf 8f5b 	dmb	ish
 8009244:	e03c      	b.n	80092c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00e      	beq.n	800926a <metal_io_write+0x82>
 800924c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924e:	2b02      	cmp	r3, #2
 8009250:	d10b      	bne.n	800926a <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
 8009256:	883b      	ldrh	r3, [r7, #0]
 8009258:	833b      	strh	r3, [r7, #24]
 800925a:	8b3a      	ldrh	r2, [r7, #24]
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	f3bf 8f5b 	dmb	ish
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	f3bf 8f5b 	dmb	ish
 8009268:	e02a      	b.n	80092c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00e      	beq.n	800928e <metal_io_write+0xa6>
 8009270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009272:	2b04      	cmp	r3, #4
 8009274:	d10b      	bne.n	800928e <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	623b      	str	r3, [r7, #32]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	f3bf 8f5b 	dmb	ish
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f5b 	dmb	ish
 800928c:	e018      	b.n	80092c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00e      	beq.n	80092b2 <metal_io_write+0xca>
 8009294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009296:	2b04      	cmp	r3, #4
 8009298:	d10b      	bne.n	80092b2 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	61fb      	str	r3, [r7, #28]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	f3bf 8f5b 	dmb	ish
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f5b 	dmb	ish
 80092b0:	e006      	b.n	80092c0 <metal_io_write+0xd8>
		metal_assert (0);
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <metal_io_write+0xe0>)
 80092b4:	4a05      	ldr	r2, [pc, #20]	; (80092cc <metal_io_write+0xe4>)
 80092b6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80092ba:	4805      	ldr	r0, [pc, #20]	; (80092d0 <metal_io_write+0xe8>)
 80092bc:	f002 f854 	bl	800b368 <__assert_func>
}
 80092c0:	bf00      	nop
 80092c2:	3734      	adds	r7, #52	; 0x34
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd90      	pop	{r4, r7, pc}
 80092c8:	0800fc20 	.word	0x0800fc20
 80092cc:	08010538 	.word	0x08010538
 80092d0:	0800fc24 	.word	0x0800fc24

080092d4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f002 f89d 	bl	800b41c <malloc>
 80092e2:	4603      	mov	r3, r0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	free(ptr);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f002 f899 	bl	800b42c <free>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3307      	adds	r3, #7
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff ffde 	bl	80092d4 <metal_allocate_memory>
 8009318:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d004      	beq.n	800932a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	2100      	movs	r1, #0
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f002 f8b1 	bl	800b48c <memset>
	}

	return vqs;
 800932a:	68bb      	ldr	r3, [r7, #8]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	891b      	ldrh	r3, [r3, #8]
 8009340:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	3b18      	subs	r3, #24
 800934c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	429a      	cmp	r2, r3
 8009356:	d905      	bls.n	8009364 <rproc_virtio_virtqueue_notify+0x30>
 8009358:	4b0d      	ldr	r3, [pc, #52]	; (8009390 <rproc_virtio_virtqueue_notify+0x5c>)
 800935a:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <rproc_virtio_virtqueue_notify+0x60>)
 800935c:	2133      	movs	r1, #51	; 0x33
 800935e:	480e      	ldr	r0, [pc, #56]	; (8009398 <rproc_virtio_virtqueue_notify+0x64>)
 8009360:	f002 f802 	bl	800b368 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4613      	mov	r3, r2
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	4413      	add	r3, r2
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	440b      	add	r3, r1
 8009374:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	6810      	ldr	r0, [r2, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	6912      	ldr	r2, [r2, #16]
 8009382:	4611      	mov	r1, r2
 8009384:	4798      	blx	r3
}
 8009386:	bf00      	nop
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	0800fc6c 	.word	0x0800fc6c
 8009394:	08010508 	.word	0x08010508
 8009398:	0800fc88 	.word	0x0800fc88

0800939c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3b18      	subs	r3, #24
 80093a8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	3318      	adds	r3, #24
 80093ba:	4619      	mov	r1, r3
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7ff fe7b 	bl	80090b8 <metal_io_virt_to_offset>
 80093c2:	4601      	mov	r1, r0
 80093c4:	2301      	movs	r3, #1
 80093c6:	2205      	movs	r2, #5
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff fe8f 	bl	80090ec <metal_io_read>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4613      	mov	r3, r2
 80093d4:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 80093d6:	7afb      	ldrb	r3, [r7, #11]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3b18      	subs	r3, #24
 80093f0:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	3318      	adds	r3, #24
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff fe57 	bl	80090b8 <metal_io_virt_to_offset>
 800940a:	4601      	mov	r1, r0
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	2001      	movs	r0, #1
 8009414:	9001      	str	r0, [sp, #4]
 8009416:	2005      	movs	r0, #5
 8009418:	9000      	str	r0, [sp, #0]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff fee4 	bl	80091e8 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	6810      	ldr	r0, [r2, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	4611      	mov	r1, r2
 800942e:	4798      	blx	r3
}
 8009430:	bf00      	nop
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3b18      	subs	r3, #24
 8009444:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	330c      	adds	r3, #12
 8009456:	4619      	mov	r1, r3
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f7ff fe2d 	bl	80090b8 <metal_io_virt_to_offset>
 800945e:	4601      	mov	r1, r0
 8009460:	2304      	movs	r3, #4
 8009462:	2205      	movs	r2, #5
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f7ff fe41 	bl	80090ec <metal_io_read>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4613      	mov	r3, r2
 8009470:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8009472:	68bb      	ldr	r3, [r7, #8]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af02      	add	r7, sp, #8
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3b18      	subs	r3, #24
 800948a:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	330c      	adds	r3, #12
 800949c:	4619      	mov	r1, r3
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff fe0a 	bl	80090b8 <metal_io_virt_to_offset>
 80094a4:	4601      	mov	r1, r0
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	2004      	movs	r0, #4
 80094b0:	9001      	str	r0, [sp, #4]
 80094b2:	2005      	movs	r0, #5
 80094b4:	9000      	str	r0, [sp, #0]
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fe96 	bl	80091e8 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	6810      	ldr	r0, [r2, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4798      	blx	r3
}
 80094cc:	bf00      	nop
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80094fa:	bf00      	nop
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
 8009512:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8009514:	bf00      	nop
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d103      	bne.n	8009538 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8009530:	2140      	movs	r1, #64	; 0x40
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff ff54 	bl	80093e0 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08e      	sub	sp, #56	; 0x38
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	7e5b      	ldrb	r3, [r3, #25]
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8009558:	2050      	movs	r0, #80	; 0x50
 800955a:	f7ff febb 	bl	80092d4 <metal_allocate_memory>
 800955e:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	e092      	b.n	8009690 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800956a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800956c:	4613      	mov	r3, r2
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	4413      	add	r3, r2
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fead 	bl	80092d4 <metal_allocate_memory>
 800957a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 8081 	beq.w	8009686 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8009584:	2250      	movs	r2, #80	; 0x50
 8009586:	2100      	movs	r1, #0
 8009588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800958a:	f001 ff7f 	bl	800b48c <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800958e:	2218      	movs	r2, #24
 8009590:	2100      	movs	r1, #0
 8009592:	6a38      	ldr	r0, [r7, #32]
 8009594:	f001 ff7a 	bl	800b48c <memset>
	vdev = &rpvdev->vdev;
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	3318      	adds	r3, #24
 800959c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800959e:	2300      	movs	r3, #0
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
 80095a2:	e025      	b.n	80095f0 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 80095a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	3318      	adds	r3, #24
 80095b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095b6:	4413      	add	r3, r2
 80095b8:	3304      	adds	r3, #4
 80095ba:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 80095c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ca:	f7ff fe9a 	bl	8009302 <virtqueue_allocate>
 80095ce:	6178      	str	r0, [r7, #20]
		if (!vq)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d031      	beq.n	800963a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 80095d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d8:	4613      	mov	r3, r2
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	4413      	add	r3, r2
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	461a      	mov	r2, r3
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	4413      	add	r3, r2
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80095ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ec:	3301      	adds	r3, #1
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
 80095f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d3d5      	bcc.n	80095a4 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095fc:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009602:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	6a3a      	ldr	r2, [r7, #32]
 8009608:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960e:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009626:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800962c:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4a19      	ldr	r2, [pc, #100]	; (8009698 <rproc_virtio_create_vdev+0x158>)
 8009632:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	3318      	adds	r3, #24
 8009638:	e02a      	b.n	8009690 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800963a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800963c:	2300      	movs	r3, #0
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
 8009640:	e019      	b.n	8009676 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8009642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009644:	4613      	mov	r3, r2
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	4413      	add	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	461a      	mov	r2, r3
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	4413      	add	r3, r2
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8009658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800965a:	4613      	mov	r3, r2
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	4413      	add	r3, r2
 8009660:	00db      	lsls	r3, r3, #3
 8009662:	461a      	mov	r2, r3
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	4413      	add	r3, r2
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff fe3e 	bl	80092ec <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	3301      	adds	r3, #1
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
 8009676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	429a      	cmp	r2, r3
 800967c:	d3e1      	bcc.n	8009642 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800967e:	6a38      	ldr	r0, [r7, #32]
 8009680:	f7ff fe34 	bl	80092ec <metal_free_memory>
 8009684:	e000      	b.n	8009688 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8009686:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8009688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800968a:	f7ff fe2f 	bl	80092ec <metal_free_memory>
	return NULL;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3738      	adds	r7, #56	; 0x38
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	080104e4 	.word	0x080104e4

0800969c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d302      	bcc.n	80096be <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 80096b8:	f06f 0301 	mvn.w	r3, #1
 80096bc:	e019      	b.n	80096f2 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	4613      	mov	r3, r2
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	4413      	add	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ee:	609a      	str	r2, [r3, #8]

	return 0;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	371c      	adds	r7, #28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d102      	bne.n	8009714 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800970e:	f06f 0315 	mvn.w	r3, #21
 8009712:	e02c      	b.n	800976e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d101      	bne.n	8009722 <rproc_virtio_notified+0x24>
		return 0;
 800971e:	2300      	movs	r3, #0
 8009720:	e025      	b.n	800976e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e01a      	b.n	8009764 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4613      	mov	r3, r2
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	4413      	add	r3, r2
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	440b      	add	r3, r1
 800973e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d003      	beq.n	8009752 <rproc_virtio_notified+0x54>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d105      	bne.n	800975e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8009758:	68b8      	ldr	r0, [r7, #8]
 800975a:	f001 fb58 	bl	800ae0e <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	3301      	adds	r3, #1
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	429a      	cmp	r2, r3
 800976a:	d3e0      	bcc.n	800972e <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff fe08 	bl	800939c <rproc_virtio_get_status>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800979a:	e7f4      	b.n	8009786 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80097a0:	bf00      	nop
	}
}
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 80097b0:	bf00      	nop
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	4611      	mov	r1, r2
 80097b8:	f3bf 8f5b 	dmb	ish
 80097bc:	e8d3 2f4f 	ldrexb	r2, [r3]
 80097c0:	e8c3 1f40 	strexb	r0, r1, [r3]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1f9      	bne.n	80097bc <__metal_mutex_acquire+0x14>
 80097c8:	f3bf 8f5b 	dmb	ish
 80097cc:	b2d3      	uxtb	r3, r2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1ef      	bne.n	80097b2 <__metal_mutex_acquire+0xa>
		;
	}
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f3bf 8f5b 	dmb	ish
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	f3bf 8f5b 	dmb	ish
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff ffcc 	bl	80097a8 <__metal_mutex_acquire>
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ffdd 	bl	80097e0 <__metal_mutex_release>
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <metal_list_add_before>:
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	601a      	str	r2, [r3, #0]
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <metal_list_add_tail>:
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff ffdd 	bl	800982e <metal_list_add_before>
}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6852      	ldr	r2, [r2, #4]
 800988c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	605a      	str	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	095b      	lsrs	r3, r3, #5
 80098c0:	009a      	lsls	r2, r3, #2
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	440a      	add	r2, r1
 80098c6:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	f002 021f 	and.w	r2, r2, #31
 80098ce:	2001      	movs	r0, #1
 80098d0:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4403      	add	r3, r0
 80098da:	430a      	orrs	r2, r1
 80098dc:	601a      	str	r2, [r3, #0]
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	095b      	lsrs	r3, r3, #5
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4413      	add	r3, r2
 80098fe:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	f003 031f 	and.w	r3, r3, #31
 8009906:	2101      	movs	r1, #1
 8009908:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800990c:	4013      	ands	r3, r2
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	095b      	lsrs	r3, r3, #5
 8009928:	009a      	lsls	r2, r3, #2
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	440a      	add	r2, r1
 800992e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	f002 021f 	and.w	r2, r2, #31
 8009936:	2001      	movs	r0, #1
 8009938:	fa00 f202 	lsl.w	r2, r0, r2
 800993c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4403      	add	r3, r0
 8009944:	400a      	ands	r2, r1
 8009946:	601a      	str	r2, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff ffc2 	bl	80098ea <metal_bitmap_is_bit_set>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	bf0c      	ite	eq
 800996c:	2301      	moveq	r3, #1
 800996e:	2300      	movne	r3, #0
 8009970:	b2db      	uxtb	r3, r3
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e002      	b.n	8009992 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3301      	adds	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d207      	bcs.n	80099aa <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	4619      	mov	r1, r3
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff ffd8 	bl	8009954 <metal_bitmap_is_bit_clear>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0f0      	beq.n	800998c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 80099aa:	697b      	ldr	r3, [r7, #20]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <rpmsg_init_ept>:
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f002 fe2f 	bl	800c62c <strncpy>
	ept->addr = src;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	69ba      	ldr	r2, [r7, #24]
 80099de:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295
 80099fc:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	2100      	movs	r1, #0
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff ffb8 	bl	800997a <metal_bitmap_next_clear_bit>
 8009a0a:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d206      	bcs.n	8009a22 <rpmsg_get_address+0x34>
		addr = nextbit;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff ff48 	bl	80098b2 <metal_bitmap_set_bit>
	}

	return addr;
 8009a22:	68fb      	ldr	r3, [r7, #12]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	da03      	bge.n	8009a48 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff ff69 	bl	800991a <metal_bitmap_clear_bit>
}
 8009a48:	bf00      	nop
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	da05      	bge.n	8009a70 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7ff ff3f 	bl	80098ea <metal_bitmap_is_bit_set>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	e000      	b.n	8009a72 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <rpmsg_is_address_set+0x2c>)
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	fffff82d 	.word	0xfffff82d

08009a80 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	da05      	bge.n	8009aa0 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff ff0b 	bl	80098b2 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e000      	b.n	8009aa2 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <rpmsg_set_address+0x2c>)
	}
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	fffff82d 	.word	0xfffff82d

08009ab0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b089      	sub	sp, #36	; 0x24
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <rpmsg_send_offchannel_raw+0x2a>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d006      	beq.n	8009ada <rpmsg_send_offchannel_raw+0x2a>
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <rpmsg_send_offchannel_raw+0x2a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad8:	d101      	bne.n	8009ade <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8009ada:	4b0d      	ldr	r3, [pc, #52]	; (8009b10 <rpmsg_send_offchannel_raw+0x60>)
 8009adc:	e014      	b.n	8009b08 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00c      	beq.n	8009b06 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	6978      	ldr	r0, [r7, #20]
 8009b00:	47a0      	blx	r4
 8009b02:	4603      	mov	r3, r0
 8009b04:	e000      	b.n	8009b08 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8009b06:	4b02      	ldr	r3, [pc, #8]	; (8009b10 <rpmsg_send_offchannel_raw+0x60>)
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd90      	pop	{r4, r7, pc}
 8009b10:	fffff82d 	.word	0xfffff82d

08009b14 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b090      	sub	sp, #64	; 0x40
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8009b28:	6879      	ldr	r1, [r7, #4]
 8009b2a:	f107 030c 	add.w	r3, r7, #12
 8009b2e:	2220      	movs	r2, #32
 8009b30:	4618      	mov	r0, r3
 8009b32:	f002 fd7b 	bl	800c62c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b3a:	f107 030c 	add.w	r3, r7, #12
 8009b3e:	2201      	movs	r2, #1
 8009b40:	9201      	str	r2, [sp, #4]
 8009b42:	2228      	movs	r2, #40	; 0x28
 8009b44:	9200      	str	r2, [sp, #0]
 8009b46:	2235      	movs	r2, #53	; 0x35
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff ffb1 	bl	8009ab0 <rpmsg_send_offchannel_raw>
 8009b4e:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8009b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	da01      	bge.n	8009b5a <rpmsg_send_ns_message+0x46>
		return ret;
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	e000      	b.n	8009b5c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3738      	adds	r7, #56	; 0x38
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	e04b      	b.n	8009c12 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	3b34      	subs	r3, #52	; 0x34
 8009b82:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8a:	d006      	beq.n	8009b9a <rpmsg_get_endpoint+0x36>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d101      	bne.n	8009b9a <rpmsg_get_endpoint+0x36>
			return ept;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	e040      	b.n	8009c1c <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d106      	bne.n	8009bb2 <rpmsg_get_endpoint+0x4e>
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d101      	bne.n	8009bb2 <rpmsg_get_endpoint+0x4e>
			return ept;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	e034      	b.n	8009c1c <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00c      	beq.n	8009bd2 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f002 fd22 	bl	800c608 <strncmp>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bf0c      	ite	eq
 8009bca:	2301      	moveq	r3, #1
 8009bcc:	2300      	movne	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d018      	beq.n	8009c0a <rpmsg_get_endpoint+0xa6>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d015      	beq.n	8009c0a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d006      	beq.n	8009bf4 <rpmsg_get_endpoint+0x90>
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d101      	bne.n	8009bf4 <rpmsg_get_endpoint+0x90>
			return ept;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	e013      	b.n	8009c1c <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d107      	bne.n	8009c0c <rpmsg_get_endpoint+0xa8>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d102      	bne.n	8009c0c <rpmsg_get_endpoint+0xa8>
			return ept;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	e008      	b.n	8009c1c <rpmsg_get_endpoint+0xb8>
			continue;
 8009c0a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d1af      	bne.n	8009b7a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d016      	beq.n	8009c60 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d008      	beq.n	8009c54 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	2180      	movs	r1, #128	; 0x80
 8009c50:	f7ff feec 	bl	8009a2c <rpmsg_release_address>
	metal_list_del(&ept->node);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3334      	adds	r3, #52	; 0x34
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fe0f 	bl	800987c <metal_list_del>
 8009c5e:	e000      	b.n	8009c62 <rpmsg_unregister_endpoint+0x3e>
		return;
 8009c60:	bf00      	nop
}
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	3334      	adds	r3, #52	; 0x34
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7ff fdee 	bl	8009862 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	613b      	str	r3, [r7, #16]

	if (!ept)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8009ca8:	4b37      	ldr	r3, [pc, #220]	; (8009d88 <rpmsg_create_ept+0xf8>)
 8009caa:	e068      	b.n	8009d7e <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	3358      	adds	r3, #88	; 0x58
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff fda6 	bl	8009802 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d018      	beq.n	8009cf0 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	3348      	adds	r3, #72	; 0x48
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	2180      	movs	r1, #128	; 0x80
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fec2 	bl	8009a50 <rpmsg_is_address_set>
 8009ccc:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d107      	bne.n	8009ce4 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	3348      	adds	r3, #72	; 0x48
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff fecf 	bl	8009a80 <rpmsg_set_address>
 8009ce2:	e00c      	b.n	8009cfe <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dd40      	ble.n	8009d6c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8009cee:	e040      	b.n	8009d72 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	3348      	adds	r3, #72	; 0x48
 8009cf4:	2180      	movs	r1, #128	; 0x80
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff fe79 	bl	80099ee <rpmsg_get_address>
 8009cfc:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff fe51 	bl	80099b4 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8009d12:	68f9      	ldr	r1, [r7, #12]
 8009d14:	68b8      	ldr	r0, [r7, #8]
 8009d16:	f7ff ffa7 	bl	8009c68 <rpmsg_register_endpoint>
 8009d1a:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	da06      	bge.n	8009d30 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	3348      	adds	r3, #72	; 0x48
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	2180      	movs	r1, #128	; 0x80
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff fe7e 	bl	8009a2c <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d11c      	bne.n	8009d70 <rpmsg_create_ept+0xe0>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d117      	bne.n	8009d70 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	3358      	adds	r3, #88	; 0x58
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7ff fd67 	bl	8009818 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fee1 	bl	8009b14 <rpmsg_send_ns_message>
 8009d52:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	3358      	adds	r3, #88	; 0x58
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fd52 	bl	8009802 <metal_mutex_acquire>
		if (status)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ff5d 	bl	8009c24 <rpmsg_unregister_endpoint>
 8009d6a:	e002      	b.n	8009d72 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8009d6c:	bf00      	nop
 8009d6e:	e000      	b.n	8009d72 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8009d70:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	3358      	adds	r3, #88	; 0x58
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff fd4e 	bl	8009818 <metal_mutex_release>
	return status;
 8009d7c:	697b      	ldr	r3, [r7, #20]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	fffff82d 	.word	0xfffff82d

08009d8c <__metal_cache_invalidate>:
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fcc2 	bl	800a722 <metal_machine_cache_invalidate>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <metal_cache_invalidate>:
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff ffea 	bl	8009d8c <__metal_cache_invalidate>
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b082      	sub	sp, #8
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff ffee 	bl	8009dc0 <__metal_sleep_usec>
 8009de4:	4603      	mov	r3, r0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <metal_list_init>:
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	605a      	str	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <metal_io_virt_to_offset>:
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d201      	bcs.n	8009e32 <metal_io_virt_to_offset+0x22>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	e001      	b.n	8009e36 <metal_io_virt_to_offset+0x26>
 8009e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <__metal_mutex_init>:
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	461a      	mov	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f3bf 8f5b 	dmb	ish
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	f3bf 8f5b 	dmb	ish
}
 8009e62:	bf00      	nop
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <__metal_mutex_acquire>:
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009e76:	bf00      	nop
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	f3bf 8f5b 	dmb	ish
 8009e82:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009e86:	e8c3 1f40 	strexb	r0, r1, [r3]
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d1f9      	bne.n	8009e82 <__metal_mutex_acquire+0x14>
 8009e8e:	f3bf 8f5b 	dmb	ish
 8009e92:	b2d3      	uxtb	r3, r2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1ef      	bne.n	8009e78 <__metal_mutex_acquire+0xa>
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <__metal_mutex_release>:
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f3bf 8f5b 	dmb	ish
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	f3bf 8f5b 	dmb	ish
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <metal_mutex_init>:
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ffb6 	bl	8009e42 <__metal_mutex_init>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <metal_mutex_acquire>:
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff ffc1 	bl	8009e6e <__metal_mutex_acquire>
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <metal_mutex_release>:
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff ffd2 	bl	8009ea6 <__metal_mutex_release>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <rpmsg_init_ept>:
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
 8009f16:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	68b9      	ldr	r1, [r7, #8]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f002 fb84 	bl	800c62c <strncpy>
	ept->addr = src;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	69fa      	ldr	r2, [r7, #28]
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f50:	699b      	ldr	r3, [r3, #24]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009f76:	78f9      	ldrb	r1, [r7, #3]
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009f98:	4610      	mov	r0, r2
 8009f9a:	4798      	blx	r3
 8009f9c:	4603      	mov	r3, r0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fb2:	6a1b      	ldr	r3, [r3, #32]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4798      	blx	r3
 8009fbe:	4603      	mov	r3, r0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f000 fbf2 	bl	800a7cc <virtio_create_virtqueues>
 8009fe8:	4603      	mov	r3, r0
					callbacks);
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	2100      	movs	r1, #0
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fdad 	bl	8009b64 <rpmsg_get_endpoint>
 800a00a:	4603      	mov	r3, r0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d901      	bls.n	800a02c <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 800a028:	2300      	movs	r3, #0
 800a02a:	e00f      	b.n	800a04c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6899      	ldr	r1, [r3, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	1acb      	subs	r3, r1, r3
 800a03a:	4413      	add	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	1ad2      	subs	r2, r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	605a      	str	r2, [r3, #4]

	return buffer;
 800a04a:	68fb      	ldr	r3, [r7, #12]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
	if (!shpool)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d01d      	beq.n	800a0a6 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <rpmsg_virtio_init_shm_pool+0x2c>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f023 0303 	bic.w	r3, r3, #3
 800a080:	3304      	adds	r3, #4
 800a082:	e000      	b.n	800a086 <rpmsg_virtio_init_shm_pool+0x2e>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f003 0303 	and.w	r3, r3, #3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <rpmsg_virtio_init_shm_pool+0x46>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	3304      	adds	r3, #4
 800a09c:	e000      	b.n	800a0a0 <rpmsg_virtio_init_shm_pool+0x48>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	6053      	str	r3, [r2, #4]
 800a0a4:	e000      	b.n	800a0a8 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800a0a6:	bf00      	nop
}
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b08a      	sub	sp, #40	; 0x28
 800a0b6:	af02      	add	r7, sp, #8
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	607a      	str	r2, [r7, #4]
 800a0be:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff ff3f 	bl	8009f44 <rpmsg_virtio_get_role>
 800a0c6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10d      	bne.n	800a0ea <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a0da:	f107 0114 	add.w	r1, r7, #20
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f000 fcc0 	bl	800aa6a <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800a0ea:	bf00      	nop
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b08a      	sub	sp, #40	; 0x28
 800a0f6:	af02      	add	r7, sp, #8
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	607a      	str	r2, [r7, #4]
 800a0fe:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff ff1f 	bl	8009f44 <rpmsg_virtio_get_role>
 800a106:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10f      	bne.n	800a12e <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a11a:	f107 0114 	add.w	r1, r7, #20
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	2301      	movs	r3, #1
 800a124:	2200      	movs	r2, #0
 800a126:	f000 fca0 	bl	800aa6a <virtqueue_add_buffer>
 800a12a:	4603      	mov	r3, r0
 800a12c:	e000      	b.n	800a130 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fefd 	bl	8009f44 <rpmsg_virtio_get_role>
 800a14a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d116      	bne.n	800a184 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 fcc7 	bl	800aaf2 <virtqueue_get_buffer>
 800a164:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a170:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff ff4d 	bl	800a014 <rpmsg_virtio_shm_pool_get_buffer>
 800a17a:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a182:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800a184:	697b      	ldr	r3, [r7, #20]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b086      	sub	sp, #24
 800a192:	af00      	add	r7, sp, #0
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff fed2 	bl	8009f44 <rpmsg_virtio_get_role>
 800a1a0:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d107      	bne.n	800a1bc <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fc9c 	bl	800aaf2 <virtqueue_get_buffer>
 800a1ba:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6978      	ldr	r0, [r7, #20]
 800a1ca:	f7ff fdec 	bl	8009da6 <metal_cache_invalidate>
	}

	return data;
 800a1ce:	697b      	ldr	r3, [r7, #20]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff feaf 	bl	8009f44 <rpmsg_virtio_get_role>
 800a1e6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d102      	bne.n	800a1f8 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800a1f2:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800a1f6:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b090      	sub	sp, #64	; 0x40
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800a216:	2300      	movs	r3, #0
 800a218:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800a21e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a220:	f7ff feb0 	bl	8009f84 <rpmsg_virtio_get_status>
 800a224:	4603      	mov	r3, r0
 800a226:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800a232:	4b45      	ldr	r3, [pc, #276]	; (800a348 <rpmsg_virtio_send_offchannel_raw+0x144>)
 800a234:	e083      	b.n	800a33e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800a236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800a23c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a240:	63bb      	str	r3, [r7, #56]	; 0x38
 800a242:	e001      	b.n	800a248 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3358      	adds	r3, #88	; 0x58
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff fe46 	bl	8009ede <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800a252:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a254:	f7ff ffc0 	bl	800a1d8 <_rpmsg_virtio_get_buffer_size>
 800a258:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800a25a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	429a      	cmp	r2, r3
 800a260:	dc08      	bgt.n	800a274 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800a262:	f107 0216 	add.w	r2, r7, #22
 800a266:	f107 0310 	add.w	r3, r7, #16
 800a26a:	4619      	mov	r1, r3
 800a26c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a26e:	f7ff ff63 	bl	800a138 <rpmsg_virtio_get_tx_buffer>
 800a272:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3358      	adds	r3, #88	; 0x58
 800a278:	4618      	mov	r0, r3
 800a27a:	f7ff fe3b 	bl	8009ef4 <metal_mutex_release>
		if (buffer || !tick_count)
 800a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10e      	bne.n	800a2a2 <rpmsg_virtio_send_offchannel_raw+0x9e>
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00b      	beq.n	800a2a2 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800a290:	4b2e      	ldr	r3, [pc, #184]	; (800a34c <rpmsg_virtio_send_offchannel_raw+0x148>)
 800a292:	e054      	b.n	800a33e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800a294:	200a      	movs	r0, #10
 800a296:	f7ff fd9e 	bl	8009dd6 <metal_sleep_usec>
		tick_count--;
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	3b01      	subs	r3, #1
 800a29e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800a2a0:	e7d2      	b.n	800a248 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800a2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800a2a8:	4b29      	ldr	r3, [pc, #164]	; (800a350 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800a2aa:	e048      	b.n	800a33e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800a2b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800a2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800a2c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c8:	f7ff fda2 	bl	8009e10 <metal_io_virt_to_offset>
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	f107 0218 	add.w	r2, r7, #24
 800a2d2:	2310      	movs	r3, #16
 800a2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d6:	f7fe fdd8 	bl	8008e8a <metal_io_block_write>
 800a2da:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d000      	beq.n	800a2e4 <rpmsg_virtio_send_offchannel_raw+0xe0>
 800a2e2:	e7fe      	b.n	800a2e2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e6:	3310      	adds	r3, #16
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ec:	f7ff fd90 	bl	8009e10 <metal_io_virt_to_offset>
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f8:	f7fe fdc7 	bl	8008e8a <metal_io_block_write>
 800a2fc:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800a2fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a302:	429a      	cmp	r2, r3
 800a304:	d000      	beq.n	800a308 <rpmsg_virtio_send_offchannel_raw+0x104>
 800a306:	e7fe      	b.n	800a306 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3358      	adds	r3, #88	; 0x58
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fde6 	bl	8009ede <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	8afb      	ldrh	r3, [r7, #22]
 800a316:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a318:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a31a:	f7ff feea 	bl	800a0f2 <rpmsg_virtio_enqueue_buffer>
 800a31e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	2b00      	cmp	r3, #0
 800a324:	d000      	beq.n	800a328 <rpmsg_virtio_send_offchannel_raw+0x124>
 800a326:	e7fe      	b.n	800a326 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800a328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fc5a 	bl	800abe6 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3358      	adds	r3, #88	; 0x58
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fddc 	bl	8009ef4 <metal_mutex_release>

	return size;
 800a33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3740      	adds	r7, #64	; 0x40
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	fffff82c 	.word	0xfffff82c
 800a34c:	fffff82b 	.word	0xfffff82b
 800a350:	fffff82e 	.word	0xfffff82e

0800a354 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b08d      	sub	sp, #52	; 0x34
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	3358      	adds	r3, #88	; 0x58
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fdaa 	bl	8009ede <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800a38a:	f107 020a 	add.w	r2, r7, #10
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4619      	mov	r1, r3
 800a394:	69f8      	ldr	r0, [r7, #28]
 800a396:	f7ff fefa 	bl	800a18e <rpmsg_virtio_get_rx_buffer>
 800a39a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	3358      	adds	r3, #88	; 0x58
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fda7 	bl	8009ef4 <metal_mutex_release>

	while (rp_hdr) {
 800a3a6:	e04c      	b.n	800a442 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	3358      	adds	r3, #88	; 0x58
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fd96 	bl	8009ede <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	69b8      	ldr	r0, [r7, #24]
 800a3ba:	f7ff fe1a 	bl	8009ff2 <rpmsg_get_ept_from_addr>
 800a3be:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	3358      	adds	r3, #88	; 0x58
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fd95 	bl	8009ef4 <metal_mutex_release>

		if (!ept)
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d03c      	beq.n	800a44a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d103      	bne.n	800a3e2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	899b      	ldrh	r3, [r3, #12]
 800a3f0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4613      	mov	r3, r2
 800a400:	4602      	mov	r2, r0
 800a402:	6978      	ldr	r0, [r7, #20]
 800a404:	47a0      	blx	r4
 800a406:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d000      	beq.n	800a410 <rpmsg_virtio_rx_callback+0xa8>
 800a40e:	e7fe      	b.n	800a40e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	3358      	adds	r3, #88	; 0x58
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff fd62 	bl	8009ede <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	897b      	ldrh	r3, [r7, #10]
 800a41e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a420:	69f8      	ldr	r0, [r7, #28]
 800a422:	f7ff fe46 	bl	800a0b2 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800a426:	f107 020a 	add.w	r2, r7, #10
 800a42a:	f107 030c 	add.w	r3, r7, #12
 800a42e:	4619      	mov	r1, r3
 800a430:	69f8      	ldr	r0, [r7, #28]
 800a432:	f7ff feac 	bl	800a18e <rpmsg_virtio_get_rx_buffer>
 800a436:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	3358      	adds	r3, #88	; 0x58
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff fd59 	bl	8009ef4 <metal_mutex_release>
	while (rp_hdr) {
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1af      	bne.n	800a3a8 <rpmsg_virtio_rx_callback+0x40>
 800a448:	e000      	b.n	800a44c <rpmsg_virtio_rx_callback+0xe4>
			return;
 800a44a:	bf00      	nop
	}
}
 800a44c:	372c      	adds	r7, #44	; 0x2c
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd90      	pop	{r4, r7, pc}

0800a452 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b092      	sub	sp, #72	; 0x48
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	607a      	str	r2, [r7, #4]
 800a45e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800a466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a468:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b28      	cmp	r3, #40	; 0x28
 800a478:	d001      	beq.n	800a47e <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e057      	b.n	800a52e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800a480:	4619      	mov	r1, r3
 800a482:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a484:	f7ff fcc4 	bl	8009e10 <metal_io_virt_to_offset>
 800a488:	4601      	mov	r1, r0
 800a48a:	f107 0210 	add.w	r2, r7, #16
 800a48e:	2320      	movs	r3, #32
 800a490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a492:	f7fe fc83 	bl	8008d9c <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800a49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a49e:	3358      	adds	r3, #88	; 0x58
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff fd1c 	bl	8009ede <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800a4a6:	f107 0110 	add.w	r1, r7, #16
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4b2:	f7ff fb57 	bl	8009b64 <rpmsg_get_endpoint>
 800a4b6:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d017      	beq.n	800a4f4 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d0:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800a4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d4:	3358      	adds	r3, #88	; 0x58
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff fd0c 	bl	8009ef4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d024      	beq.n	800a52c <rpmsg_virtio_ns_callback+0xda>
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d020      	beq.n	800a52c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	4798      	blx	r3
 800a4f2:	e01b      	b.n	800a52c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d110      	bne.n	800a51c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800a4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fc:	3358      	adds	r3, #88	; 0x58
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fcf8 	bl	8009ef4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800a504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00f      	beq.n	800a52c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800a50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a510:	f107 0110 	add.w	r1, r7, #16
 800a514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a516:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a518:	4798      	blx	r3
 800a51a:	e007      	b.n	800a52c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a520:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800a522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a524:	3358      	adds	r3, #88	; 0x58
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff fce4 	bl	8009ef4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3748      	adds	r7, #72	; 0x48
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b094      	sub	sp, #80	; 0x50
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800a54a:	2264      	movs	r2, #100	; 0x64
 800a54c:	2100      	movs	r1, #0
 800a54e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a550:	f000 ff9c 	bl	800b48c <memset>
	metal_mutex_init(&rdev->lock);
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	3358      	adds	r3, #88	; 0x58
 800a558:	4618      	mov	r0, r3
 800a55a:	f7ff fcb5 	bl	8009ec8 <metal_mutex_init>
	rvdev->vdev = vdev;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	4a5d      	ldr	r2, [pc, #372]	; (800a6e8 <rpmsg_init_vdev+0x1b0>)
 800a574:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7ff fce4 	bl	8009f44 <rpmsg_virtio_get_role>
 800a57c:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a580:	2b00      	cmp	r3, #0
 800a582:	d120      	bne.n	800a5c6 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800a584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800a58a:	4b58      	ldr	r3, [pc, #352]	; (800a6ec <rpmsg_init_vdev+0x1b4>)
 800a58c:	e0a7      	b.n	800a6de <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800a58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800a596:	4b56      	ldr	r3, [pc, #344]	; (800a6f0 <rpmsg_init_vdev+0x1b8>)
 800a598:	e0a1      	b.n	800a6de <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a59e:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800a5a0:	4b54      	ldr	r3, [pc, #336]	; (800a6f4 <rpmsg_init_vdev+0x1bc>)
 800a5a2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800a5a4:	4b54      	ldr	r3, [pc, #336]	; (800a6f8 <rpmsg_init_vdev+0x1c0>)
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800a5a8:	4b54      	ldr	r3, [pc, #336]	; (800a6fc <rpmsg_init_vdev+0x1c4>)
 800a5aa:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800a5ac:	4b54      	ldr	r3, [pc, #336]	; (800a700 <rpmsg_init_vdev+0x1c8>)
 800a5ae:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	3318      	adds	r3, #24
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800a5cc:	f107 0220 	add.w	r2, r7, #32
 800a5d0:	f107 0318 	add.w	r3, r7, #24
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	2202      	movs	r2, #2
 800a5da:	2100      	movs	r1, #0
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7ff fcf3 	bl	8009fc8 <rpmsg_virtio_create_virtqueues>
 800a5e2:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800a5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <rpmsg_init_vdev+0xb6>
		return status;
 800a5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ec:	e077      	b.n	800a6de <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5f2:	e00f      	b.n	800a614 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4413      	add	r3, r2
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	440b      	add	r3, r1
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a610:	3301      	adds	r3, #1
 800a612:	643b      	str	r3, [r7, #64]	; 0x40
 800a614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a616:	2b01      	cmp	r3, #1
 800a618:	d9ec      	bls.n	800a5f4 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d137      	bne.n	800a690 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800a620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a624:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62a:	e02a      	b.n	800a682 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800a62c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a630:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a632:	f7ff fcef 	bl	800a014 <rpmsg_virtio_shm_pool_get_buffer>
 800a636:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800a63e:	4b2c      	ldr	r3, [pc, #176]	; (800a6f0 <rpmsg_init_vdev+0x1b8>)
 800a640:	e04d      	b.n	800a6de <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800a646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a648:	6838      	ldr	r0, [r7, #0]
 800a64a:	f7ff fbe1 	bl	8009e10 <metal_io_virt_to_offset>
 800a64e:	4601      	mov	r1, r0
 800a650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a654:	2200      	movs	r2, #0
 800a656:	6838      	ldr	r0, [r7, #0]
 800a658:	f7fe fc8d 	bl	8008f76 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a660:	f107 0110 	add.w	r1, r7, #16
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2301      	movs	r3, #1
 800a66a:	2200      	movs	r2, #0
 800a66c:	f000 f9fd 	bl	800aa6a <virtqueue_add_buffer>
 800a670:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800a672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <rpmsg_init_vdev+0x144>
				return status;
 800a678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67a:	e030      	b.n	800a6de <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	3301      	adds	r3, #1
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a686:	895b      	ldrh	r3, [r3, #10]
 800a688:	461a      	mov	r2, r3
 800a68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d3cd      	bcc.n	800a62c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fbab 	bl	8009dee <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7ff fc84 	bl	8009fa6 <rpmsg_virtio_get_features>
 800a69e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d011      	beq.n	800a6ce <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ac:	f103 0008 	add.w	r0, r3, #8
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	4b13      	ldr	r3, [pc, #76]	; (800a704 <rpmsg_init_vdev+0x1cc>)
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2335      	movs	r3, #53	; 0x35
 800a6ba:	2235      	movs	r2, #53	; 0x35
 800a6bc:	4912      	ldr	r1, [pc, #72]	; (800a708 <rpmsg_init_vdev+0x1d0>)
 800a6be:	f7ff fc24 	bl	8009f0a <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ca:	f7ff facd 	bl	8009c68 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800a6d4:	2104      	movs	r1, #4
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fc41 	bl	8009f5e <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3748      	adds	r7, #72	; 0x48
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800a205 	.word	0x0800a205
 800a6ec:	fffff82d 	.word	0xfffff82d
 800a6f0:	fffff82e 	.word	0xfffff82e
 800a6f4:	0800fd0c 	.word	0x0800fd0c
 800a6f8:	0800fd14 	.word	0x0800fd14
 800a6fc:	0800a369 	.word	0x0800a369
 800a700:	0800a355 	.word	0x0800a355
 800a704:	0800a453 	.word	0x0800a453
 800a708:	0800fd1c 	.word	0x0800fd1c

0800a70c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800a746:	68fb      	ldr	r3, [r7, #12]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3303      	adds	r3, #3
 800a768:	005a      	lsls	r2, r3, #1
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	4413      	add	r3, r2
 800a776:	1e5a      	subs	r2, r3, #1
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	425b      	negs	r3, r3
 800a77c:	4013      	ands	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	3306      	adds	r3, #6
 800a78a:	60fb      	str	r3, [r7, #12]

	return size;
 800a78c:	68fb      	ldr	r3, [r7, #12]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <metal_io_virt_to_offset>:
{
 800a79a:	b480      	push	{r7}
 800a79c:	b085      	sub	sp, #20
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d201      	bcs.n	800a7bc <metal_io_virt_to_offset+0x22>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	e001      	b.n	800a7c0 <metal_io_virt_to_offset+0x26>
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b091      	sub	sp, #68	; 0x44
 800a7d0:	af04      	add	r7, sp, #16
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7de:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d902      	bls.n	800a7ee <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800a7e8:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800a7ec:	e053      	b.n	800a896 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f2:	e04b      	b.n	800a88c <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	4413      	add	r3, r2
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	440b      	add	r3, r1
 800a804:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	3304      	adds	r3, #4
 800a80a:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d118      	bne.n	800a846 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800a81a:	6a3b      	ldr	r3, [r7, #32]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4619      	mov	r1, r3
 800a820:	69f8      	ldr	r0, [r7, #28]
 800a822:	f7ff ffba 	bl	800a79a <metal_io_virt_to_offset>
 800a826:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800a82c:	461a      	mov	r2, r3
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7ff ff8d 	bl	800a754 <vring_size>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2200      	movs	r2, #0
 800a83e:	69b9      	ldr	r1, [r7, #24]
 800a840:	69f8      	ldr	r0, [r7, #28]
 800a842:	f7fe fb98 	bl	8008f76 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	b298      	uxth	r0, r3
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	4413      	add	r3, r2
 800a852:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a85a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a85c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a862:	6a12      	ldr	r2, [r2, #32]
 800a864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a866:	6809      	ldr	r1, [r1, #0]
 800a868:	9102      	str	r1, [sp, #8]
 800a86a:	9201      	str	r2, [sp, #4]
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	4622      	mov	r2, r4
 800a872:	4601      	mov	r1, r0
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f8c4 	bl	800aa02 <virtqueue_create>
 800a87a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <virtio_create_virtqueues+0xba>
			return ret;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	e007      	b.n	800a896 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800a886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a888:	3301      	adds	r3, #1
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	429a      	cmp	r2, r3
 800a892:	d3af      	bcc.n	800a7f4 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3734      	adds	r7, #52	; 0x34
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd90      	pop	{r4, r7, pc}

0800a89e <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
 800a8aa:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	441a      	add	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	4413      	add	r3, r2
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	425b      	negs	r3, r3
 800a8dc:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	60da      	str	r2, [r3, #12]
}
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	80fb      	strh	r3, [r7, #6]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	80bb      	strh	r3, [r7, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800a902:	88ba      	ldrh	r2, [r7, #4]
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	b29b      	uxth	r3, r3
 800a90a:	3b01      	subs	r3, #1
 800a90c:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800a90e:	88b9      	ldrh	r1, [r7, #4]
 800a910:	887b      	ldrh	r3, [r7, #2]
 800a912:	1acb      	subs	r3, r1, r3
 800a914:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800a916:	429a      	cmp	r2, r3
 800a918:	bf34      	ite	cc
 800a91a:	2301      	movcc	r3, #1
 800a91c:	2300      	movcs	r3, #0
 800a91e:	b2db      	uxtb	r3, r3
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <metal_io_virt_to_offset>:
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	429a      	cmp	r2, r3
 800a948:	d201      	bcs.n	800a94e <metal_io_virt_to_offset+0x22>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	e001      	b.n	800a952 <metal_io_virt_to_offset+0x26>
 800a94e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <metal_io_phys>:
{
 800a95e:	b480      	push	{r7}
 800a960:	b085      	sub	sp, #20
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800a96c:	2b1f      	cmp	r3, #31
 800a96e:	d805      	bhi.n	800a97c <metal_io_phys+0x1e>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	fa22 f303 	lsr.w	r3, r2, r3
 800a97a:	e000      	b.n	800a97e <metal_io_phys+0x20>
 800a97c:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800a97e:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800a984:	2b00      	cmp	r3, #0
 800a986:	d010      	beq.n	800a9aa <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d80b      	bhi.n	800a9aa <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6919      	ldr	r1, [r3, #16]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800a9a6:	4413      	add	r3, r2
 800a9a8:	e001      	b.n	800a9ae <metal_io_phys+0x50>
 800a9aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <metal_io_virt_to_phys>:
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff ffb0 	bl	800a92c <metal_io_virt_to_offset>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ffc4 	bl	800a95e <metal_io_phys>
 800a9d6:	4603      	mov	r3, r0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff ffe1 	bl	800a9ba <metal_io_virt_to_phys>
 800a9f8:	4603      	mov	r3, r0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b086      	sub	sp, #24
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800aa12:	2300      	movs	r3, #0
 800aa14:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d121      	bne.n	800aa60 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	897a      	ldrh	r2, [r7, #10]
 800aa2c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	891a      	ldrh	r2, [r3, #8]
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	895a      	ldrh	r2, [r3, #10]
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa48:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6819      	ldr	r1, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	461a      	mov	r2, r3
 800aa54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa56:	f000 f97a 	bl	800ad4e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800aa5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5c:	f000 f899 	bl	800ab92 <virtqueue_disable_cb>
	}

	return (status);
 800aa60:	697b      	ldr	r3, [r7, #20]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b08a      	sub	sp, #40	; 0x28
 800aa6e:	af02      	add	r7, sp, #8
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	4413      	add	r3, r2
 800aa86:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d12c      	bne.n	800aae8 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800aa92:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800aa94:	8a7b      	ldrh	r3, [r7, #18]
 800aa96:	3307      	adds	r3, #7
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa4:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	69d9      	ldr	r1, [r3, #28]
 800aab2:	8a7a      	ldrh	r2, [r7, #18]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f8a7 	bl	800ac12 <vq_ring_add_buffer>
 800aac4:	4603      	mov	r3, r0
 800aac6:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	8a3a      	ldrh	r2, [r7, #16]
 800aacc:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	b29a      	uxth	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800aade:	8a7b      	ldrh	r3, [r7, #18]
 800aae0:	4619      	mov	r1, r3
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f966 	bl	800adb4 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800aae8:	69bb      	ldr	r3, [r7, #24]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b088      	sub	sp, #32
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d006      	beq.n	800ab12 <virtqueue_get_buffer+0x20>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	885b      	ldrh	r3, [r3, #2]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d101      	bne.n	800ab16 <virtqueue_get_buffer+0x24>
		return (NULL);
 800ab12:	2300      	movs	r3, #0
 800ab14:	e039      	b.n	800ab8a <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	b291      	uxth	r1, r2
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	8651      	strh	r1, [r2, #50]	; 0x32
 800ab22:	b21a      	sxth	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	895b      	ldrh	r3, [r3, #10]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	b21b      	sxth	r3, r3
 800ab2e:	4013      	ands	r3, r2
 800ab30:	b21b      	sxth	r3, r3
 800ab32:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab38:	8bfb      	ldrh	r3, [r7, #30]
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3304      	adds	r3, #4
 800ab40:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800ab42:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	82fb      	strh	r3, [r7, #22]
	if (len)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800ab5a:	8afb      	ldrh	r3, [r7, #22]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f8ae 	bl	800acc0 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800ab64:	8afa      	ldrh	r2, [r7, #22]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3207      	adds	r2, #7
 800ab6a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ab6e:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800ab70:	8afa      	ldrh	r2, [r7, #22]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3207      	adds	r2, #7
 800ab76:	2100      	movs	r1, #0
 800ab78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	8bfa      	ldrh	r2, [r7, #30]
 800ab86:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800ab88:	693b      	ldr	r3, [r7, #16]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3720      	adds	r7, #32
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d010      	beq.n	800abc8 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	895b      	ldrh	r3, [r3, #10]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800abba:	3901      	subs	r1, #1
 800abbc:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	4413      	add	r3, r2
 800abc2:	460a      	mov	r2, r1
 800abc4:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800abc6:	e008      	b.n	800abda <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	881a      	ldrh	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	f042 0201 	orr.w	r2, r2, #1
 800abd6:	b292      	uxth	r2, r2
 800abd8:	801a      	strh	r2, [r3, #0]
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800abee:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f91d 	bl	800ae32 <vq_ring_must_notify_host>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f94d 	bl	800ae9e <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b088      	sub	sp, #32
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	60b9      	str	r1, [r7, #8]
 800ac1c:	603b      	str	r3, [r7, #0]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800ac22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	4413      	add	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	837b      	strh	r3, [r7, #26]
 800ac32:	e03c      	b.n	800acae <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800ac34:	8b7b      	ldrh	r3, [r7, #26]
 800ac36:	011b      	lsls	r3, r3, #4
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	00db      	lsls	r3, r3, #3
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	4413      	add	r3, r2
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff fec8 	bl	800a9e0 <virtqueue_virt_to_phys>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	6939      	ldr	r1, [r7, #16]
 800ac5a:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	00db      	lsls	r3, r3, #3
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	4413      	add	r3, r2
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2200      	movs	r2, #0
 800ac72:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	da06      	bge.n	800ac8c <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	899b      	ldrh	r3, [r3, #12]
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800ac8c:	69fa      	ldr	r2, [r7, #28]
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	429a      	cmp	r2, r3
 800ac92:	db06      	blt.n	800aca2 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	899b      	ldrh	r3, [r3, #12]
 800ac98:	f043 0302 	orr.w	r3, r3, #2
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	3301      	adds	r3, #1
 800aca6:	61fb      	str	r3, [r7, #28]
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	89db      	ldrh	r3, [r3, #14]
 800acac:	837b      	strh	r3, [r7, #26]
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	dbbe      	blt.n	800ac34 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800acb6:	8b7b      	ldrh	r3, [r7, #26]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69da      	ldr	r2, [r3, #28]
 800acd0:	887b      	ldrh	r3, [r7, #2]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800acd8:	887b      	ldrh	r3, [r7, #2]
 800acda:	3307      	adds	r3, #7
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	4413      	add	r3, r2
 800ace2:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	889b      	ldrh	r3, [r3, #4]
 800acec:	4413      	add	r3, r2
 800acee:	b29a      	uxth	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	889b      	ldrh	r3, [r3, #4]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	899b      	ldrh	r3, [r3, #12]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d113      	bne.n	800ad34 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800ad0c:	e00c      	b.n	800ad28 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69da      	ldr	r2, [r3, #28]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	89db      	ldrh	r3, [r3, #14]
 800ad16:	011b      	lsls	r3, r3, #4
 800ad18:	4413      	add	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	889b      	ldrh	r3, [r3, #4]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	899b      	ldrh	r3, [r3, #12]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1ec      	bne.n	800ad0e <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	887a      	ldrh	r2, [r7, #2]
 800ad40:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800ad42:	bf00      	nop
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b088      	sub	sp, #32
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	895b      	ldrh	r3, [r3, #10]
 800ad5e:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3318      	adds	r3, #24
 800ad64:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800ad66:	69b9      	ldr	r1, [r7, #24]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f7ff fd96 	bl	800a89e <vring_init>

	for (i = 0; i < size - 1; i++)
 800ad72:	2300      	movs	r3, #0
 800ad74:	61fb      	str	r3, [r7, #28]
 800ad76:	e00c      	b.n	800ad92 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	6859      	ldr	r1, [r3, #4]
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	440b      	add	r3, r1
 800ad86:	3201      	adds	r2, #1
 800ad88:	b292      	uxth	r2, r2
 800ad8a:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	61fb      	str	r3, [r7, #28]
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	69fa      	ldr	r2, [r7, #28]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	dbed      	blt.n	800ad78 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	4413      	add	r3, r2
 800ada6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800adaa:	81da      	strh	r2, [r3, #14]
}
 800adac:	bf00      	nop
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	885b      	ldrh	r3, [r3, #2]
 800adc6:	b21a      	sxth	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	895b      	ldrh	r3, [r3, #10]
 800adcc:	3b01      	subs	r3, #1
 800adce:	b29b      	uxth	r3, r3
 800add0:	b21b      	sxth	r3, r3
 800add2:	4013      	ands	r3, r2
 800add4:	b21b      	sxth	r3, r3
 800add6:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a1a      	ldr	r2, [r3, #32]
 800addc:	89fb      	ldrh	r3, [r7, #14]
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	4413      	add	r3, r2
 800ade2:	887a      	ldrh	r2, [r7, #2]
 800ade4:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800ade6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	885a      	ldrh	r2, [r3, #2]
 800adf0:	3201      	adds	r2, #1
 800adf2:	b292      	uxth	r2, r2
 800adf4:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adfa:	3301      	adds	r3, #1
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b082      	sub	sp, #8
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800ae16:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <virtqueue_notification+0x1c>
		vq->callback(vq);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
}
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01d      	beq.n	800ae82 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	885b      	ldrh	r3, [r3, #2]
 800ae4c:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae52:	89fa      	ldrh	r2, [r7, #14]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4413      	add	r3, r2
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800ae68:	89ba      	ldrh	r2, [r7, #12]
 800ae6a:	89f9      	ldrh	r1, [r7, #14]
 800ae6c:	897b      	ldrh	r3, [r7, #10]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff fd3e 	bl	800a8f0 <vring_need_event>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf14      	ite	ne
 800ae7a:	2301      	movne	r3, #1
 800ae7c:	2300      	moveq	r3, #0
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	e009      	b.n	800ae96 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	bf0c      	ite	eq
 800ae90:	2301      	moveq	r3, #1
 800ae92:	2300      	movne	r3, #0
 800ae94:	b2db      	uxtb	r3, r3
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	4798      	blx	r3
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800aec8:	4b04      	ldr	r3, [pc, #16]	; (800aedc <HAL_HSEM_FreeCallback+0x1c>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800aece:	2002      	movs	r0, #2
 800aed0:	f7f8 fa00 	bl	80032d4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	24000584 	.word	0x24000584

0800aee0 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <MAILBOX_Init+0x44>)
 800aee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aeec:	4a0d      	ldr	r2, [pc, #52]	; (800af24 <MAILBOX_Init+0x44>)
 800aeee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aef6:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <MAILBOX_Init+0x44>)
 800aef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aefc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af00:	607b      	str	r3, [r7, #4]
 800af02:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800af04:	2201      	movs	r2, #1
 800af06:	2100      	movs	r1, #0
 800af08:	207d      	movs	r0, #125	; 0x7d
 800af0a:	f7f7 f8fa 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800af0e:	207d      	movs	r0, #125	; 0x7d
 800af10:	f7f7 f911 	bl	8002136 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800af14:	2002      	movs	r0, #2
 800af16:	f7f8 f9dd 	bl	80032d4 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	58024400 	.word	0x58024400

0800af28 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800af30:	4b09      	ldr	r3, [pc, #36]	; (800af58 <MAILBOX_Poll+0x30>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d108      	bne.n	800af4a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800af38:	2100      	movs	r1, #0
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7fe fbdf 	bl	80096fe <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800af40:	4b05      	ldr	r3, [pc, #20]	; (800af58 <MAILBOX_Poll+0x30>)
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
    return 0;
 800af46:	2300      	movs	r3, #0
 800af48:	e001      	b.n	800af4e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800af4a:	f06f 030a 	mvn.w	r3, #10
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	24000584 	.word	0x24000584

0800af5c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800af66:	2000      	movs	r0, #0
 800af68:	f7f8 f986 	bl	8003278 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800af6c:	2100      	movs	r1, #0
 800af6e:	2000      	movs	r0, #0
 800af70:	f7f8 f99c 	bl	80032ac <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d006      	beq.n	800af9e <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800af94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af98:	d001      	beq.n	800af9e <is_rpmsg_ept_ready+0x20>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <is_rpmsg_ept_ready+0x22>
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d209      	bcs.n	800afd4 <metal_device_io_region+0x28>
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	4613      	mov	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	011b      	lsls	r3, r3, #4
 800afca:	3308      	adds	r3, #8
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	4413      	add	r3, r2
 800afd0:	3304      	adds	r3, #4
 800afd2:	e000      	b.n	800afd6 <metal_device_io_region+0x2a>
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
	...

0800afe4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b08d      	sub	sp, #52	; 0x34
 800afe8:	af04      	add	r7, sp, #16
 800afea:	6078      	str	r0, [r7, #4]
  int status = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800aff4:	4a41      	ldr	r2, [pc, #260]	; (800b0fc <OPENAMP_shmem_init+0x118>)
 800aff6:	f107 0310 	add.w	r3, r7, #16
 800affa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800affe:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800b00a:	f107 0310 	add.w	r3, r7, #16
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fe28 	bl	8008c64 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800b014:	483a      	ldr	r0, [pc, #232]	; (800b100 <OPENAMP_shmem_init+0x11c>)
 800b016:	f7fd fccd 	bl	80089b4 <metal_register_generic_device>
 800b01a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <OPENAMP_shmem_init+0x42>
    return status;
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	e066      	b.n	800b0f4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800b026:	f107 0318 	add.w	r3, r7, #24
 800b02a:	461a      	mov	r2, r3
 800b02c:	4935      	ldr	r1, [pc, #212]	; (800b104 <OPENAMP_shmem_init+0x120>)
 800b02e:	4836      	ldr	r0, [pc, #216]	; (800b108 <OPENAMP_shmem_init+0x124>)
 800b030:	f7fd fc82 	bl	8008938 <metal_device_open>
 800b034:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <OPENAMP_shmem_init+0x5c>
    return status;
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	e059      	b.n	800b0f4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800b040:	4a32      	ldr	r2, [pc, #200]	; (800b10c <OPENAMP_shmem_init+0x128>)
 800b042:	4b33      	ldr	r3, [pc, #204]	; (800b110 <OPENAMP_shmem_init+0x12c>)
 800b044:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800b04c:	4a31      	ldr	r2, [pc, #196]	; (800b114 <OPENAMP_shmem_init+0x130>)
 800b04e:	4b2f      	ldr	r3, [pc, #188]	; (800b10c <OPENAMP_shmem_init+0x128>)
 800b050:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800b052:	461a      	mov	r2, r3
 800b054:	2300      	movs	r3, #0
 800b056:	9302      	str	r3, [sp, #8]
 800b058:	2300      	movs	r3, #0
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	f04f 33ff 	mov.w	r3, #4294967295
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	4613      	mov	r3, r2
 800b064:	4a2a      	ldr	r2, [pc, #168]	; (800b110 <OPENAMP_shmem_init+0x12c>)
 800b066:	4929      	ldr	r1, [pc, #164]	; (800b10c <OPENAMP_shmem_init+0x128>)
 800b068:	f7fd fe49 	bl	8008cfe <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff ff9b 	bl	800afac <metal_device_io_region>
 800b076:	4603      	mov	r3, r0
 800b078:	4a27      	ldr	r2, [pc, #156]	; (800b118 <OPENAMP_shmem_init+0x134>)
 800b07a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800b07c:	4b26      	ldr	r3, [pc, #152]	; (800b118 <OPENAMP_shmem_init+0x134>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d102      	bne.n	800b08a <OPENAMP_shmem_init+0xa6>
    return -1;
 800b084:	f04f 33ff 	mov.w	r3, #4294967295
 800b088:	e034      	b.n	800b0f4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800b08a:	f107 0208 	add.w	r2, r7, #8
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f91d 	bl	800b2d4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4a1f      	ldr	r2, [pc, #124]	; (800b11c <OPENAMP_shmem_init+0x138>)
 800b09e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800b0a0:	4b1e      	ldr	r3, [pc, #120]	; (800b11c <OPENAMP_shmem_init+0x138>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800b0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ac:	e022      	b.n	800b0f4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b0b4:	4b19      	ldr	r3, [pc, #100]	; (800b11c <OPENAMP_shmem_init+0x138>)
 800b0b6:	6819      	ldr	r1, [r3, #0]
 800b0b8:	4b18      	ldr	r3, [pc, #96]	; (800b11c <OPENAMP_shmem_init+0x138>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	461c      	mov	r4, r3
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9302      	str	r3, [sp, #8]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	f7fd fe15 	bl	8008cfe <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff ff67 	bl	800afac <metal_device_io_region>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	; (800b120 <OPENAMP_shmem_init+0x13c>)
 800b0e2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	; (800b120 <OPENAMP_shmem_init+0x13c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d102      	bne.n	800b0f2 <OPENAMP_shmem_init+0x10e>
    return -1;
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f0:	e000      	b.n	800b0f4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3724      	adds	r7, #36	; 0x24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd90      	pop	{r4, r7, pc}
 800b0fc:	0800fd34 	.word	0x0800fd34
 800b100:	24000044 	.word	0x24000044
 800b104:	0800fd20 	.word	0x0800fd20
 800b108:	0800fd2c 	.word	0x0800fd2c
 800b10c:	38000400 	.word	0x38000400
 800b110:	24000618 	.word	0x24000618
 800b114:	38010000 	.word	0x38010000
 800b118:	24000588 	.word	0x24000588
 800b11c:	24000590 	.word	0x24000590
 800b120:	2400058c 	.word	0x2400058c

0800b124 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800b124:	b590      	push	{r4, r7, lr}
 800b126:	b08b      	sub	sp, #44	; 0x2c
 800b128:	af04      	add	r7, sp, #16
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	613b      	str	r3, [r7, #16]
  int status = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800b13a:	f7ff fed1 	bl	800aee0 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff ff50 	bl	800afe4 <OPENAMP_shmem_init>
 800b144:	60f8      	str	r0, [r7, #12]
  if(status)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	e06a      	b.n	800b226 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	4b37      	ldr	r3, [pc, #220]	; (800b230 <MX_OPENAMP_Init+0x10c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f103 0218 	add.w	r2, r3, #24
 800b15a:	4b36      	ldr	r3, [pc, #216]	; (800b234 <MX_OPENAMP_Init+0x110>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2100      	movs	r1, #0
 800b160:	9102      	str	r1, [sp, #8]
 800b162:	4935      	ldr	r1, [pc, #212]	; (800b238 <MX_OPENAMP_Init+0x114>)
 800b164:	9101      	str	r1, [sp, #4]
 800b166:	2100      	movs	r1, #0
 800b168:	9100      	str	r1, [sp, #0]
 800b16a:	21ff      	movs	r1, #255	; 0xff
 800b16c:	f7fe f9e8 	bl	8009540 <rproc_virtio_create_vdev>
 800b170:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800b178:	f04f 33ff 	mov.w	r3, #4294967295
 800b17c:	e053      	b.n	800b226 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800b17e:	6938      	ldr	r0, [r7, #16]
 800b180:	f7fe faf9 	bl	8009776 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800b184:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <MX_OPENAMP_Init+0x10c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3334      	adds	r3, #52	; 0x34
 800b18a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800b194:	461c      	mov	r4, r3
 800b196:	4b29      	ldr	r3, [pc, #164]	; (800b23c <MX_OPENAMP_Init+0x118>)
 800b198:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	6892      	ldr	r2, [r2, #8]
 800b19e:	6979      	ldr	r1, [r7, #20]
 800b1a0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800b1a2:	9102      	str	r1, [sp, #8]
 800b1a4:	9201      	str	r2, [sp, #4]
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	4623      	mov	r3, r4
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6938      	ldr	r0, [r7, #16]
 800b1b0:	f7fe fa74 	bl	800969c <rproc_virtio_init_vring>
 800b1b4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	e032      	b.n	800b226 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800b1c0:	4b1b      	ldr	r3, [pc, #108]	; (800b230 <MX_OPENAMP_Init+0x10c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3348      	adds	r3, #72	; 0x48
 800b1c6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b1d0:	461c      	mov	r4, r3
 800b1d2:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <MX_OPENAMP_Init+0x118>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	6892      	ldr	r2, [r2, #8]
 800b1da:	6979      	ldr	r1, [r7, #20]
 800b1dc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b1de:	9102      	str	r1, [sp, #8]
 800b1e0:	9201      	str	r2, [sp, #4]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f7fe fa56 	bl	800969c <rproc_virtio_init_vring>
 800b1f0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	e014      	b.n	800b226 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800b1fc:	4b10      	ldr	r3, [pc, #64]	; (800b240 <MX_OPENAMP_Init+0x11c>)
 800b1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b202:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800b204:	4a0f      	ldr	r2, [pc, #60]	; (800b244 <MX_OPENAMP_Init+0x120>)
 800b206:	4b0e      	ldr	r3, [pc, #56]	; (800b240 <MX_OPENAMP_Init+0x11c>)
 800b208:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800b20a:	461a      	mov	r2, r3
 800b20c:	480e      	ldr	r0, [pc, #56]	; (800b248 <MX_OPENAMP_Init+0x124>)
 800b20e:	f7fe ff23 	bl	800a058 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <MX_OPENAMP_Init+0x118>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <MX_OPENAMP_Init+0x124>)
 800b218:	9200      	str	r2, [sp, #0]
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	6939      	ldr	r1, [r7, #16]
 800b21e:	480b      	ldr	r0, [pc, #44]	; (800b24c <MX_OPENAMP_Init+0x128>)
 800b220:	f7ff f98a 	bl	800a538 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	371c      	adds	r7, #28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd90      	pop	{r4, r7, pc}
 800b22e:	bf00      	nop
 800b230:	24000590 	.word	0x24000590
 800b234:	2400058c 	.word	0x2400058c
 800b238:	0800af5d 	.word	0x0800af5d
 800b23c:	24000588 	.word	0x24000588
 800b240:	38000400 	.word	0x38000400
 800b244:	38010000 	.word	0x38010000
 800b248:	24000594 	.word	0x24000594
 800b24c:	240005a0 	.word	0x240005a0

0800b250 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	; 0x28
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	9302      	str	r3, [sp, #8]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	f04f 33ff 	mov.w	r3, #4294967295
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	4904      	ldr	r1, [pc, #16]	; (800b288 <OPENAMP_create_endpoint+0x38>)
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7fe fd0a 	bl	8009c90 <rpmsg_create_ept>
 800b27c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800b27e:	697b      	ldr	r3, [r7, #20]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	240005a0 	.word	0x240005a0

0800b28c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800b290:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <OPENAMP_check_for_message+0x14>)
 800b292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fe47 	bl	800af28 <MAILBOX_Poll>
}
 800b29a:	bf00      	nop
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	240005a0 	.word	0x240005a0

0800b2a4 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800b2ac:	e004      	b.n	800b2b8 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800b2ae:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <OPENAMP_Wait_EndPointready+0x2c>)
 800b2b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff fe38 	bl	800af28 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff fe60 	bl	800af7e <is_rpmsg_ept_ready>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0f4      	beq.n	800b2ae <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	240005a0 	.word	0x240005a0

0800b2d4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800b2e0:	228c      	movs	r2, #140	; 0x8c
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	481e      	ldr	r0, [pc, #120]	; (800b360 <resource_table_init+0x8c>)
 800b2e6:	f000 f8d1 	bl	800b48c <memset>
	resource_table.num = 1;
 800b2ea:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <resource_table_init+0x8c>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800b2f0:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <resource_table_init+0x8c>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800b2f6:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <resource_table_init+0x8c>)
 800b2f8:	2218      	movs	r2, #24
 800b2fa:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800b2fc:	4b19      	ldr	r3, [pc, #100]	; (800b364 <resource_table_init+0x90>)
 800b2fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b302:	4a17      	ldr	r2, [pc, #92]	; (800b360 <resource_table_init+0x8c>)
 800b304:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800b306:	4b16      	ldr	r3, [pc, #88]	; (800b360 <resource_table_init+0x8c>)
 800b308:	2204      	movs	r2, #4
 800b30a:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800b30c:	4b14      	ldr	r3, [pc, #80]	; (800b360 <resource_table_init+0x8c>)
 800b30e:	2204      	movs	r2, #4
 800b310:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800b312:	4b13      	ldr	r3, [pc, #76]	; (800b360 <resource_table_init+0x8c>)
 800b314:	2200      	movs	r2, #0
 800b316:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800b318:	4a12      	ldr	r2, [pc, #72]	; (800b364 <resource_table_init+0x90>)
 800b31a:	4b11      	ldr	r3, [pc, #68]	; (800b360 <resource_table_init+0x8c>)
 800b31c:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800b31e:	4b10      	ldr	r3, [pc, #64]	; (800b360 <resource_table_init+0x8c>)
 800b320:	2204      	movs	r2, #4
 800b322:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <resource_table_init+0x8c>)
 800b326:	2204      	movs	r2, #4
 800b328:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800b32a:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <resource_table_init+0x8c>)
 800b32c:	2201      	movs	r2, #1
 800b32e:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <resource_table_init+0x8c>)
 800b332:	2203      	movs	r2, #3
 800b334:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800b336:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <resource_table_init+0x8c>)
 800b338:	2207      	movs	r2, #7
 800b33a:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <resource_table_init+0x8c>)
 800b33e:	2202      	movs	r2, #2
 800b340:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800b344:	4b06      	ldr	r3, [pc, #24]	; (800b360 <resource_table_init+0x8c>)
 800b346:	2201      	movs	r2, #1
 800b348:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	228c      	movs	r2, #140	; 0x8c
 800b34e:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	4a03      	ldr	r2, [pc, #12]	; (800b360 <resource_table_init+0x8c>)
 800b354:	601a      	str	r2, [r3, #0]
}
 800b356:	bf00      	nop
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	38000000 	.word	0x38000000
 800b364:	38000400 	.word	0x38000400

0800b368 <__assert_func>:
 800b368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b36a:	4614      	mov	r4, r2
 800b36c:	461a      	mov	r2, r3
 800b36e:	4b09      	ldr	r3, [pc, #36]	; (800b394 <__assert_func+0x2c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4605      	mov	r5, r0
 800b374:	68d8      	ldr	r0, [r3, #12]
 800b376:	b14c      	cbz	r4, 800b38c <__assert_func+0x24>
 800b378:	4b07      	ldr	r3, [pc, #28]	; (800b398 <__assert_func+0x30>)
 800b37a:	9100      	str	r1, [sp, #0]
 800b37c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b380:	4906      	ldr	r1, [pc, #24]	; (800b39c <__assert_func+0x34>)
 800b382:	462b      	mov	r3, r5
 800b384:	f000 f814 	bl	800b3b0 <fiprintf>
 800b388:	f002 f8a0 	bl	800d4cc <abort>
 800b38c:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <__assert_func+0x38>)
 800b38e:	461c      	mov	r4, r3
 800b390:	e7f3      	b.n	800b37a <__assert_func+0x12>
 800b392:	bf00      	nop
 800b394:	240000c0 	.word	0x240000c0
 800b398:	08010547 	.word	0x08010547
 800b39c:	08010554 	.word	0x08010554
 800b3a0:	08010582 	.word	0x08010582

0800b3a4 <__errno>:
 800b3a4:	4b01      	ldr	r3, [pc, #4]	; (800b3ac <__errno+0x8>)
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	240000c0 	.word	0x240000c0

0800b3b0 <fiprintf>:
 800b3b0:	b40e      	push	{r1, r2, r3}
 800b3b2:	b503      	push	{r0, r1, lr}
 800b3b4:	4601      	mov	r1, r0
 800b3b6:	ab03      	add	r3, sp, #12
 800b3b8:	4805      	ldr	r0, [pc, #20]	; (800b3d0 <fiprintf+0x20>)
 800b3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3be:	6800      	ldr	r0, [r0, #0]
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	f000 f93f 	bl	800b644 <_vfiprintf_r>
 800b3c6:	b002      	add	sp, #8
 800b3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3cc:	b003      	add	sp, #12
 800b3ce:	4770      	bx	lr
 800b3d0:	240000c0 	.word	0x240000c0

0800b3d4 <__libc_init_array>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	4d0d      	ldr	r5, [pc, #52]	; (800b40c <__libc_init_array+0x38>)
 800b3d8:	4c0d      	ldr	r4, [pc, #52]	; (800b410 <__libc_init_array+0x3c>)
 800b3da:	1b64      	subs	r4, r4, r5
 800b3dc:	10a4      	asrs	r4, r4, #2
 800b3de:	2600      	movs	r6, #0
 800b3e0:	42a6      	cmp	r6, r4
 800b3e2:	d109      	bne.n	800b3f8 <__libc_init_array+0x24>
 800b3e4:	4d0b      	ldr	r5, [pc, #44]	; (800b414 <__libc_init_array+0x40>)
 800b3e6:	4c0c      	ldr	r4, [pc, #48]	; (800b418 <__libc_init_array+0x44>)
 800b3e8:	f004 fb8e 	bl	800fb08 <_init>
 800b3ec:	1b64      	subs	r4, r4, r5
 800b3ee:	10a4      	asrs	r4, r4, #2
 800b3f0:	2600      	movs	r6, #0
 800b3f2:	42a6      	cmp	r6, r4
 800b3f4:	d105      	bne.n	800b402 <__libc_init_array+0x2e>
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fc:	4798      	blx	r3
 800b3fe:	3601      	adds	r6, #1
 800b400:	e7ee      	b.n	800b3e0 <__libc_init_array+0xc>
 800b402:	f855 3b04 	ldr.w	r3, [r5], #4
 800b406:	4798      	blx	r3
 800b408:	3601      	adds	r6, #1
 800b40a:	e7f2      	b.n	800b3f2 <__libc_init_array+0x1e>
 800b40c:	08010a04 	.word	0x08010a04
 800b410:	08010a04 	.word	0x08010a04
 800b414:	08010a04 	.word	0x08010a04
 800b418:	08010a08 	.word	0x08010a08

0800b41c <malloc>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <malloc+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f000 b88b 	b.w	800b53c <_malloc_r>
 800b426:	bf00      	nop
 800b428:	240000c0 	.word	0x240000c0

0800b42c <free>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <free+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f000 b833 	b.w	800b49c <_free_r>
 800b436:	bf00      	nop
 800b438:	240000c0 	.word	0x240000c0

0800b43c <memcpy>:
 800b43c:	440a      	add	r2, r1
 800b43e:	4291      	cmp	r1, r2
 800b440:	f100 33ff 	add.w	r3, r0, #4294967295
 800b444:	d100      	bne.n	800b448 <memcpy+0xc>
 800b446:	4770      	bx	lr
 800b448:	b510      	push	{r4, lr}
 800b44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b452:	4291      	cmp	r1, r2
 800b454:	d1f9      	bne.n	800b44a <memcpy+0xe>
 800b456:	bd10      	pop	{r4, pc}

0800b458 <memmove>:
 800b458:	4288      	cmp	r0, r1
 800b45a:	b510      	push	{r4, lr}
 800b45c:	eb01 0402 	add.w	r4, r1, r2
 800b460:	d902      	bls.n	800b468 <memmove+0x10>
 800b462:	4284      	cmp	r4, r0
 800b464:	4623      	mov	r3, r4
 800b466:	d807      	bhi.n	800b478 <memmove+0x20>
 800b468:	1e43      	subs	r3, r0, #1
 800b46a:	42a1      	cmp	r1, r4
 800b46c:	d008      	beq.n	800b480 <memmove+0x28>
 800b46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b476:	e7f8      	b.n	800b46a <memmove+0x12>
 800b478:	4402      	add	r2, r0
 800b47a:	4601      	mov	r1, r0
 800b47c:	428a      	cmp	r2, r1
 800b47e:	d100      	bne.n	800b482 <memmove+0x2a>
 800b480:	bd10      	pop	{r4, pc}
 800b482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b48a:	e7f7      	b.n	800b47c <memmove+0x24>

0800b48c <memset>:
 800b48c:	4402      	add	r2, r0
 800b48e:	4603      	mov	r3, r0
 800b490:	4293      	cmp	r3, r2
 800b492:	d100      	bne.n	800b496 <memset+0xa>
 800b494:	4770      	bx	lr
 800b496:	f803 1b01 	strb.w	r1, [r3], #1
 800b49a:	e7f9      	b.n	800b490 <memset+0x4>

0800b49c <_free_r>:
 800b49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d048      	beq.n	800b534 <_free_r+0x98>
 800b4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a6:	9001      	str	r0, [sp, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ae:	bfb8      	it	lt
 800b4b0:	18e4      	addlt	r4, r4, r3
 800b4b2:	f003 fbc3 	bl	800ec3c <__malloc_lock>
 800b4b6:	4a20      	ldr	r2, [pc, #128]	; (800b538 <_free_r+0x9c>)
 800b4b8:	9801      	ldr	r0, [sp, #4]
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	4615      	mov	r5, r2
 800b4be:	b933      	cbnz	r3, 800b4ce <_free_r+0x32>
 800b4c0:	6063      	str	r3, [r4, #4]
 800b4c2:	6014      	str	r4, [r2, #0]
 800b4c4:	b003      	add	sp, #12
 800b4c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4ca:	f003 bbbd 	b.w	800ec48 <__malloc_unlock>
 800b4ce:	42a3      	cmp	r3, r4
 800b4d0:	d90b      	bls.n	800b4ea <_free_r+0x4e>
 800b4d2:	6821      	ldr	r1, [r4, #0]
 800b4d4:	1862      	adds	r2, r4, r1
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	bf04      	itt	eq
 800b4da:	681a      	ldreq	r2, [r3, #0]
 800b4dc:	685b      	ldreq	r3, [r3, #4]
 800b4de:	6063      	str	r3, [r4, #4]
 800b4e0:	bf04      	itt	eq
 800b4e2:	1852      	addeq	r2, r2, r1
 800b4e4:	6022      	streq	r2, [r4, #0]
 800b4e6:	602c      	str	r4, [r5, #0]
 800b4e8:	e7ec      	b.n	800b4c4 <_free_r+0x28>
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	b10b      	cbz	r3, 800b4f4 <_free_r+0x58>
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	d9fa      	bls.n	800b4ea <_free_r+0x4e>
 800b4f4:	6811      	ldr	r1, [r2, #0]
 800b4f6:	1855      	adds	r5, r2, r1
 800b4f8:	42a5      	cmp	r5, r4
 800b4fa:	d10b      	bne.n	800b514 <_free_r+0x78>
 800b4fc:	6824      	ldr	r4, [r4, #0]
 800b4fe:	4421      	add	r1, r4
 800b500:	1854      	adds	r4, r2, r1
 800b502:	42a3      	cmp	r3, r4
 800b504:	6011      	str	r1, [r2, #0]
 800b506:	d1dd      	bne.n	800b4c4 <_free_r+0x28>
 800b508:	681c      	ldr	r4, [r3, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	6053      	str	r3, [r2, #4]
 800b50e:	4421      	add	r1, r4
 800b510:	6011      	str	r1, [r2, #0]
 800b512:	e7d7      	b.n	800b4c4 <_free_r+0x28>
 800b514:	d902      	bls.n	800b51c <_free_r+0x80>
 800b516:	230c      	movs	r3, #12
 800b518:	6003      	str	r3, [r0, #0]
 800b51a:	e7d3      	b.n	800b4c4 <_free_r+0x28>
 800b51c:	6825      	ldr	r5, [r4, #0]
 800b51e:	1961      	adds	r1, r4, r5
 800b520:	428b      	cmp	r3, r1
 800b522:	bf04      	itt	eq
 800b524:	6819      	ldreq	r1, [r3, #0]
 800b526:	685b      	ldreq	r3, [r3, #4]
 800b528:	6063      	str	r3, [r4, #4]
 800b52a:	bf04      	itt	eq
 800b52c:	1949      	addeq	r1, r1, r5
 800b52e:	6021      	streq	r1, [r4, #0]
 800b530:	6054      	str	r4, [r2, #4]
 800b532:	e7c7      	b.n	800b4c4 <_free_r+0x28>
 800b534:	b003      	add	sp, #12
 800b536:	bd30      	pop	{r4, r5, pc}
 800b538:	2400061c 	.word	0x2400061c

0800b53c <_malloc_r>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	1ccd      	adds	r5, r1, #3
 800b540:	f025 0503 	bic.w	r5, r5, #3
 800b544:	3508      	adds	r5, #8
 800b546:	2d0c      	cmp	r5, #12
 800b548:	bf38      	it	cc
 800b54a:	250c      	movcc	r5, #12
 800b54c:	2d00      	cmp	r5, #0
 800b54e:	4606      	mov	r6, r0
 800b550:	db01      	blt.n	800b556 <_malloc_r+0x1a>
 800b552:	42a9      	cmp	r1, r5
 800b554:	d903      	bls.n	800b55e <_malloc_r+0x22>
 800b556:	230c      	movs	r3, #12
 800b558:	6033      	str	r3, [r6, #0]
 800b55a:	2000      	movs	r0, #0
 800b55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55e:	f003 fb6d 	bl	800ec3c <__malloc_lock>
 800b562:	4921      	ldr	r1, [pc, #132]	; (800b5e8 <_malloc_r+0xac>)
 800b564:	680a      	ldr	r2, [r1, #0]
 800b566:	4614      	mov	r4, r2
 800b568:	b99c      	cbnz	r4, 800b592 <_malloc_r+0x56>
 800b56a:	4f20      	ldr	r7, [pc, #128]	; (800b5ec <_malloc_r+0xb0>)
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	b923      	cbnz	r3, 800b57a <_malloc_r+0x3e>
 800b570:	4621      	mov	r1, r4
 800b572:	4630      	mov	r0, r6
 800b574:	f000 ffde 	bl	800c534 <_sbrk_r>
 800b578:	6038      	str	r0, [r7, #0]
 800b57a:	4629      	mov	r1, r5
 800b57c:	4630      	mov	r0, r6
 800b57e:	f000 ffd9 	bl	800c534 <_sbrk_r>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d123      	bne.n	800b5ce <_malloc_r+0x92>
 800b586:	230c      	movs	r3, #12
 800b588:	6033      	str	r3, [r6, #0]
 800b58a:	4630      	mov	r0, r6
 800b58c:	f003 fb5c 	bl	800ec48 <__malloc_unlock>
 800b590:	e7e3      	b.n	800b55a <_malloc_r+0x1e>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	1b5b      	subs	r3, r3, r5
 800b596:	d417      	bmi.n	800b5c8 <_malloc_r+0x8c>
 800b598:	2b0b      	cmp	r3, #11
 800b59a:	d903      	bls.n	800b5a4 <_malloc_r+0x68>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	441c      	add	r4, r3
 800b5a0:	6025      	str	r5, [r4, #0]
 800b5a2:	e004      	b.n	800b5ae <_malloc_r+0x72>
 800b5a4:	6863      	ldr	r3, [r4, #4]
 800b5a6:	42a2      	cmp	r2, r4
 800b5a8:	bf0c      	ite	eq
 800b5aa:	600b      	streq	r3, [r1, #0]
 800b5ac:	6053      	strne	r3, [r2, #4]
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f003 fb4a 	bl	800ec48 <__malloc_unlock>
 800b5b4:	f104 000b 	add.w	r0, r4, #11
 800b5b8:	1d23      	adds	r3, r4, #4
 800b5ba:	f020 0007 	bic.w	r0, r0, #7
 800b5be:	1ac2      	subs	r2, r0, r3
 800b5c0:	d0cc      	beq.n	800b55c <_malloc_r+0x20>
 800b5c2:	1a1b      	subs	r3, r3, r0
 800b5c4:	50a3      	str	r3, [r4, r2]
 800b5c6:	e7c9      	b.n	800b55c <_malloc_r+0x20>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	6864      	ldr	r4, [r4, #4]
 800b5cc:	e7cc      	b.n	800b568 <_malloc_r+0x2c>
 800b5ce:	1cc4      	adds	r4, r0, #3
 800b5d0:	f024 0403 	bic.w	r4, r4, #3
 800b5d4:	42a0      	cmp	r0, r4
 800b5d6:	d0e3      	beq.n	800b5a0 <_malloc_r+0x64>
 800b5d8:	1a21      	subs	r1, r4, r0
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f000 ffaa 	bl	800c534 <_sbrk_r>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d1dd      	bne.n	800b5a0 <_malloc_r+0x64>
 800b5e4:	e7cf      	b.n	800b586 <_malloc_r+0x4a>
 800b5e6:	bf00      	nop
 800b5e8:	2400061c 	.word	0x2400061c
 800b5ec:	24000620 	.word	0x24000620

0800b5f0 <__sfputc_r>:
 800b5f0:	6893      	ldr	r3, [r2, #8]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	b410      	push	{r4}
 800b5f8:	6093      	str	r3, [r2, #8]
 800b5fa:	da08      	bge.n	800b60e <__sfputc_r+0x1e>
 800b5fc:	6994      	ldr	r4, [r2, #24]
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	db01      	blt.n	800b606 <__sfputc_r+0x16>
 800b602:	290a      	cmp	r1, #10
 800b604:	d103      	bne.n	800b60e <__sfputc_r+0x1e>
 800b606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b60a:	f001 be9f 	b.w	800d34c <__swbuf_r>
 800b60e:	6813      	ldr	r3, [r2, #0]
 800b610:	1c58      	adds	r0, r3, #1
 800b612:	6010      	str	r0, [r2, #0]
 800b614:	7019      	strb	r1, [r3, #0]
 800b616:	4608      	mov	r0, r1
 800b618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <__sfputs_r>:
 800b61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b620:	4606      	mov	r6, r0
 800b622:	460f      	mov	r7, r1
 800b624:	4614      	mov	r4, r2
 800b626:	18d5      	adds	r5, r2, r3
 800b628:	42ac      	cmp	r4, r5
 800b62a:	d101      	bne.n	800b630 <__sfputs_r+0x12>
 800b62c:	2000      	movs	r0, #0
 800b62e:	e007      	b.n	800b640 <__sfputs_r+0x22>
 800b630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b634:	463a      	mov	r2, r7
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff ffda 	bl	800b5f0 <__sfputc_r>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d1f3      	bne.n	800b628 <__sfputs_r+0xa>
 800b640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b644 <_vfiprintf_r>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	460d      	mov	r5, r1
 800b64a:	b09d      	sub	sp, #116	; 0x74
 800b64c:	4614      	mov	r4, r2
 800b64e:	4698      	mov	r8, r3
 800b650:	4606      	mov	r6, r0
 800b652:	b118      	cbz	r0, 800b65c <_vfiprintf_r+0x18>
 800b654:	6983      	ldr	r3, [r0, #24]
 800b656:	b90b      	cbnz	r3, 800b65c <_vfiprintf_r+0x18>
 800b658:	f002 fe66 	bl	800e328 <__sinit>
 800b65c:	4b89      	ldr	r3, [pc, #548]	; (800b884 <_vfiprintf_r+0x240>)
 800b65e:	429d      	cmp	r5, r3
 800b660:	d11b      	bne.n	800b69a <_vfiprintf_r+0x56>
 800b662:	6875      	ldr	r5, [r6, #4]
 800b664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b666:	07d9      	lsls	r1, r3, #31
 800b668:	d405      	bmi.n	800b676 <_vfiprintf_r+0x32>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	059a      	lsls	r2, r3, #22
 800b66e:	d402      	bmi.n	800b676 <_vfiprintf_r+0x32>
 800b670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b672:	f003 fa6a 	bl	800eb4a <__retarget_lock_acquire_recursive>
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	071b      	lsls	r3, r3, #28
 800b67a:	d501      	bpl.n	800b680 <_vfiprintf_r+0x3c>
 800b67c:	692b      	ldr	r3, [r5, #16]
 800b67e:	b9eb      	cbnz	r3, 800b6bc <_vfiprintf_r+0x78>
 800b680:	4629      	mov	r1, r5
 800b682:	4630      	mov	r0, r6
 800b684:	f001 feb4 	bl	800d3f0 <__swsetup_r>
 800b688:	b1c0      	cbz	r0, 800b6bc <_vfiprintf_r+0x78>
 800b68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b68c:	07dc      	lsls	r4, r3, #31
 800b68e:	d50e      	bpl.n	800b6ae <_vfiprintf_r+0x6a>
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	b01d      	add	sp, #116	; 0x74
 800b696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69a:	4b7b      	ldr	r3, [pc, #492]	; (800b888 <_vfiprintf_r+0x244>)
 800b69c:	429d      	cmp	r5, r3
 800b69e:	d101      	bne.n	800b6a4 <_vfiprintf_r+0x60>
 800b6a0:	68b5      	ldr	r5, [r6, #8]
 800b6a2:	e7df      	b.n	800b664 <_vfiprintf_r+0x20>
 800b6a4:	4b79      	ldr	r3, [pc, #484]	; (800b88c <_vfiprintf_r+0x248>)
 800b6a6:	429d      	cmp	r5, r3
 800b6a8:	bf08      	it	eq
 800b6aa:	68f5      	ldreq	r5, [r6, #12]
 800b6ac:	e7da      	b.n	800b664 <_vfiprintf_r+0x20>
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	0598      	lsls	r0, r3, #22
 800b6b2:	d4ed      	bmi.n	800b690 <_vfiprintf_r+0x4c>
 800b6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6b6:	f003 fa49 	bl	800eb4c <__retarget_lock_release_recursive>
 800b6ba:	e7e9      	b.n	800b690 <_vfiprintf_r+0x4c>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c0:	2320      	movs	r3, #32
 800b6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ca:	2330      	movs	r3, #48	; 0x30
 800b6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b890 <_vfiprintf_r+0x24c>
 800b6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6d4:	f04f 0901 	mov.w	r9, #1
 800b6d8:	4623      	mov	r3, r4
 800b6da:	469a      	mov	sl, r3
 800b6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6e0:	b10a      	cbz	r2, 800b6e6 <_vfiprintf_r+0xa2>
 800b6e2:	2a25      	cmp	r2, #37	; 0x25
 800b6e4:	d1f9      	bne.n	800b6da <_vfiprintf_r+0x96>
 800b6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ea:	d00b      	beq.n	800b704 <_vfiprintf_r+0xc0>
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ff93 	bl	800b61e <__sfputs_r>
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	f000 80aa 	beq.w	800b852 <_vfiprintf_r+0x20e>
 800b6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b700:	445a      	add	r2, fp
 800b702:	9209      	str	r2, [sp, #36]	; 0x24
 800b704:	f89a 3000 	ldrb.w	r3, [sl]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 80a2 	beq.w	800b852 <_vfiprintf_r+0x20e>
 800b70e:	2300      	movs	r3, #0
 800b710:	f04f 32ff 	mov.w	r2, #4294967295
 800b714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b718:	f10a 0a01 	add.w	sl, sl, #1
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	9307      	str	r3, [sp, #28]
 800b720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b724:	931a      	str	r3, [sp, #104]	; 0x68
 800b726:	4654      	mov	r4, sl
 800b728:	2205      	movs	r2, #5
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	4858      	ldr	r0, [pc, #352]	; (800b890 <_vfiprintf_r+0x24c>)
 800b730:	f7f4 fdee 	bl	8000310 <memchr>
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	b9d8      	cbnz	r0, 800b770 <_vfiprintf_r+0x12c>
 800b738:	06d1      	lsls	r1, r2, #27
 800b73a:	bf44      	itt	mi
 800b73c:	2320      	movmi	r3, #32
 800b73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b742:	0713      	lsls	r3, r2, #28
 800b744:	bf44      	itt	mi
 800b746:	232b      	movmi	r3, #43	; 0x2b
 800b748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b74c:	f89a 3000 	ldrb.w	r3, [sl]
 800b750:	2b2a      	cmp	r3, #42	; 0x2a
 800b752:	d015      	beq.n	800b780 <_vfiprintf_r+0x13c>
 800b754:	9a07      	ldr	r2, [sp, #28]
 800b756:	4654      	mov	r4, sl
 800b758:	2000      	movs	r0, #0
 800b75a:	f04f 0c0a 	mov.w	ip, #10
 800b75e:	4621      	mov	r1, r4
 800b760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b764:	3b30      	subs	r3, #48	; 0x30
 800b766:	2b09      	cmp	r3, #9
 800b768:	d94e      	bls.n	800b808 <_vfiprintf_r+0x1c4>
 800b76a:	b1b0      	cbz	r0, 800b79a <_vfiprintf_r+0x156>
 800b76c:	9207      	str	r2, [sp, #28]
 800b76e:	e014      	b.n	800b79a <_vfiprintf_r+0x156>
 800b770:	eba0 0308 	sub.w	r3, r0, r8
 800b774:	fa09 f303 	lsl.w	r3, r9, r3
 800b778:	4313      	orrs	r3, r2
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	46a2      	mov	sl, r4
 800b77e:	e7d2      	b.n	800b726 <_vfiprintf_r+0xe2>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	1d19      	adds	r1, r3, #4
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	9103      	str	r1, [sp, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfbb      	ittet	lt
 800b78c:	425b      	neglt	r3, r3
 800b78e:	f042 0202 	orrlt.w	r2, r2, #2
 800b792:	9307      	strge	r3, [sp, #28]
 800b794:	9307      	strlt	r3, [sp, #28]
 800b796:	bfb8      	it	lt
 800b798:	9204      	strlt	r2, [sp, #16]
 800b79a:	7823      	ldrb	r3, [r4, #0]
 800b79c:	2b2e      	cmp	r3, #46	; 0x2e
 800b79e:	d10c      	bne.n	800b7ba <_vfiprintf_r+0x176>
 800b7a0:	7863      	ldrb	r3, [r4, #1]
 800b7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a4:	d135      	bne.n	800b812 <_vfiprintf_r+0x1ce>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	1d1a      	adds	r2, r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	9203      	str	r2, [sp, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bfb8      	it	lt
 800b7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7b6:	3402      	adds	r4, #2
 800b7b8:	9305      	str	r3, [sp, #20]
 800b7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8a0 <_vfiprintf_r+0x25c>
 800b7be:	7821      	ldrb	r1, [r4, #0]
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	4650      	mov	r0, sl
 800b7c4:	f7f4 fda4 	bl	8000310 <memchr>
 800b7c8:	b140      	cbz	r0, 800b7dc <_vfiprintf_r+0x198>
 800b7ca:	2340      	movs	r3, #64	; 0x40
 800b7cc:	eba0 000a 	sub.w	r0, r0, sl
 800b7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	4303      	orrs	r3, r0
 800b7d8:	3401      	adds	r4, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e0:	482c      	ldr	r0, [pc, #176]	; (800b894 <_vfiprintf_r+0x250>)
 800b7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7e6:	2206      	movs	r2, #6
 800b7e8:	f7f4 fd92 	bl	8000310 <memchr>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d03f      	beq.n	800b870 <_vfiprintf_r+0x22c>
 800b7f0:	4b29      	ldr	r3, [pc, #164]	; (800b898 <_vfiprintf_r+0x254>)
 800b7f2:	bb1b      	cbnz	r3, 800b83c <_vfiprintf_r+0x1f8>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	3307      	adds	r3, #7
 800b7f8:	f023 0307 	bic.w	r3, r3, #7
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b802:	443b      	add	r3, r7
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	e767      	b.n	800b6d8 <_vfiprintf_r+0x94>
 800b808:	fb0c 3202 	mla	r2, ip, r2, r3
 800b80c:	460c      	mov	r4, r1
 800b80e:	2001      	movs	r0, #1
 800b810:	e7a5      	b.n	800b75e <_vfiprintf_r+0x11a>
 800b812:	2300      	movs	r3, #0
 800b814:	3401      	adds	r4, #1
 800b816:	9305      	str	r3, [sp, #20]
 800b818:	4619      	mov	r1, r3
 800b81a:	f04f 0c0a 	mov.w	ip, #10
 800b81e:	4620      	mov	r0, r4
 800b820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b824:	3a30      	subs	r2, #48	; 0x30
 800b826:	2a09      	cmp	r2, #9
 800b828:	d903      	bls.n	800b832 <_vfiprintf_r+0x1ee>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d0c5      	beq.n	800b7ba <_vfiprintf_r+0x176>
 800b82e:	9105      	str	r1, [sp, #20]
 800b830:	e7c3      	b.n	800b7ba <_vfiprintf_r+0x176>
 800b832:	fb0c 2101 	mla	r1, ip, r1, r2
 800b836:	4604      	mov	r4, r0
 800b838:	2301      	movs	r3, #1
 800b83a:	e7f0      	b.n	800b81e <_vfiprintf_r+0x1da>
 800b83c:	ab03      	add	r3, sp, #12
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	462a      	mov	r2, r5
 800b842:	4b16      	ldr	r3, [pc, #88]	; (800b89c <_vfiprintf_r+0x258>)
 800b844:	a904      	add	r1, sp, #16
 800b846:	4630      	mov	r0, r6
 800b848:	f000 f8be 	bl	800b9c8 <_printf_float>
 800b84c:	4607      	mov	r7, r0
 800b84e:	1c78      	adds	r0, r7, #1
 800b850:	d1d6      	bne.n	800b800 <_vfiprintf_r+0x1bc>
 800b852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b854:	07d9      	lsls	r1, r3, #31
 800b856:	d405      	bmi.n	800b864 <_vfiprintf_r+0x220>
 800b858:	89ab      	ldrh	r3, [r5, #12]
 800b85a:	059a      	lsls	r2, r3, #22
 800b85c:	d402      	bmi.n	800b864 <_vfiprintf_r+0x220>
 800b85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b860:	f003 f974 	bl	800eb4c <__retarget_lock_release_recursive>
 800b864:	89ab      	ldrh	r3, [r5, #12]
 800b866:	065b      	lsls	r3, r3, #25
 800b868:	f53f af12 	bmi.w	800b690 <_vfiprintf_r+0x4c>
 800b86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b86e:	e711      	b.n	800b694 <_vfiprintf_r+0x50>
 800b870:	ab03      	add	r3, sp, #12
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	462a      	mov	r2, r5
 800b876:	4b09      	ldr	r3, [pc, #36]	; (800b89c <_vfiprintf_r+0x258>)
 800b878:	a904      	add	r1, sp, #16
 800b87a:	4630      	mov	r0, r6
 800b87c:	f000 fb30 	bl	800bee0 <_printf_i>
 800b880:	e7e4      	b.n	800b84c <_vfiprintf_r+0x208>
 800b882:	bf00      	nop
 800b884:	080107e0 	.word	0x080107e0
 800b888:	08010800 	.word	0x08010800
 800b88c:	080107c0 	.word	0x080107c0
 800b890:	08010588 	.word	0x08010588
 800b894:	08010592 	.word	0x08010592
 800b898:	0800b9c9 	.word	0x0800b9c9
 800b89c:	0800b61f 	.word	0x0800b61f
 800b8a0:	0801058e 	.word	0x0801058e

0800b8a4 <__cvt>:
 800b8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a6:	ed2d 8b02 	vpush	{d8}
 800b8aa:	eeb0 8b40 	vmov.f64	d8, d0
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	4617      	mov	r7, r2
 800b8b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b8b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8b6:	ee18 2a90 	vmov	r2, s17
 800b8ba:	f025 0520 	bic.w	r5, r5, #32
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	bfb6      	itet	lt
 800b8c2:	222d      	movlt	r2, #45	; 0x2d
 800b8c4:	2200      	movge	r2, #0
 800b8c6:	eeb1 8b40 	vneglt.f64	d8, d0
 800b8ca:	2d46      	cmp	r5, #70	; 0x46
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	701a      	strb	r2, [r3, #0]
 800b8d0:	d004      	beq.n	800b8dc <__cvt+0x38>
 800b8d2:	2d45      	cmp	r5, #69	; 0x45
 800b8d4:	d100      	bne.n	800b8d8 <__cvt+0x34>
 800b8d6:	3401      	adds	r4, #1
 800b8d8:	2102      	movs	r1, #2
 800b8da:	e000      	b.n	800b8de <__cvt+0x3a>
 800b8dc:	2103      	movs	r1, #3
 800b8de:	ab03      	add	r3, sp, #12
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	ab02      	add	r3, sp, #8
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	4622      	mov	r2, r4
 800b8e8:	4633      	mov	r3, r6
 800b8ea:	eeb0 0b48 	vmov.f64	d0, d8
 800b8ee:	f001 fe7f 	bl	800d5f0 <_dtoa_r>
 800b8f2:	2d47      	cmp	r5, #71	; 0x47
 800b8f4:	d109      	bne.n	800b90a <__cvt+0x66>
 800b8f6:	07fb      	lsls	r3, r7, #31
 800b8f8:	d407      	bmi.n	800b90a <__cvt+0x66>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8fe:	1a1b      	subs	r3, r3, r0
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	b005      	add	sp, #20
 800b904:	ecbd 8b02 	vpop	{d8}
 800b908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b90a:	2d46      	cmp	r5, #70	; 0x46
 800b90c:	eb00 0204 	add.w	r2, r0, r4
 800b910:	d10c      	bne.n	800b92c <__cvt+0x88>
 800b912:	7803      	ldrb	r3, [r0, #0]
 800b914:	2b30      	cmp	r3, #48	; 0x30
 800b916:	d107      	bne.n	800b928 <__cvt+0x84>
 800b918:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b920:	bf1c      	itt	ne
 800b922:	f1c4 0401 	rsbne	r4, r4, #1
 800b926:	6034      	strne	r4, [r6, #0]
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	441a      	add	r2, r3
 800b92c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b934:	bf08      	it	eq
 800b936:	9203      	streq	r2, [sp, #12]
 800b938:	2130      	movs	r1, #48	; 0x30
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d2dc      	bcs.n	800b8fa <__cvt+0x56>
 800b940:	1c5c      	adds	r4, r3, #1
 800b942:	9403      	str	r4, [sp, #12]
 800b944:	7019      	strb	r1, [r3, #0]
 800b946:	e7f8      	b.n	800b93a <__cvt+0x96>

0800b948 <__exponent>:
 800b948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b94a:	4603      	mov	r3, r0
 800b94c:	2900      	cmp	r1, #0
 800b94e:	bfb8      	it	lt
 800b950:	4249      	neglt	r1, r1
 800b952:	f803 2b02 	strb.w	r2, [r3], #2
 800b956:	bfb4      	ite	lt
 800b958:	222d      	movlt	r2, #45	; 0x2d
 800b95a:	222b      	movge	r2, #43	; 0x2b
 800b95c:	2909      	cmp	r1, #9
 800b95e:	7042      	strb	r2, [r0, #1]
 800b960:	dd2a      	ble.n	800b9b8 <__exponent+0x70>
 800b962:	f10d 0407 	add.w	r4, sp, #7
 800b966:	46a4      	mov	ip, r4
 800b968:	270a      	movs	r7, #10
 800b96a:	46a6      	mov	lr, r4
 800b96c:	460a      	mov	r2, r1
 800b96e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b972:	fb07 1516 	mls	r5, r7, r6, r1
 800b976:	3530      	adds	r5, #48	; 0x30
 800b978:	2a63      	cmp	r2, #99	; 0x63
 800b97a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b97e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b982:	4631      	mov	r1, r6
 800b984:	dcf1      	bgt.n	800b96a <__exponent+0x22>
 800b986:	3130      	adds	r1, #48	; 0x30
 800b988:	f1ae 0502 	sub.w	r5, lr, #2
 800b98c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b990:	1c44      	adds	r4, r0, #1
 800b992:	4629      	mov	r1, r5
 800b994:	4561      	cmp	r1, ip
 800b996:	d30a      	bcc.n	800b9ae <__exponent+0x66>
 800b998:	f10d 0209 	add.w	r2, sp, #9
 800b99c:	eba2 020e 	sub.w	r2, r2, lr
 800b9a0:	4565      	cmp	r5, ip
 800b9a2:	bf88      	it	hi
 800b9a4:	2200      	movhi	r2, #0
 800b9a6:	4413      	add	r3, r2
 800b9a8:	1a18      	subs	r0, r3, r0
 800b9aa:	b003      	add	sp, #12
 800b9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b9b6:	e7ed      	b.n	800b994 <__exponent+0x4c>
 800b9b8:	2330      	movs	r3, #48	; 0x30
 800b9ba:	3130      	adds	r1, #48	; 0x30
 800b9bc:	7083      	strb	r3, [r0, #2]
 800b9be:	70c1      	strb	r1, [r0, #3]
 800b9c0:	1d03      	adds	r3, r0, #4
 800b9c2:	e7f1      	b.n	800b9a8 <__exponent+0x60>
 800b9c4:	0000      	movs	r0, r0
	...

0800b9c8 <_printf_float>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	b08b      	sub	sp, #44	; 0x2c
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b9d4:	4616      	mov	r6, r2
 800b9d6:	461f      	mov	r7, r3
 800b9d8:	4605      	mov	r5, r0
 800b9da:	f003 f8b1 	bl	800eb40 <_localeconv_r>
 800b9de:	f8d0 b000 	ldr.w	fp, [r0]
 800b9e2:	4658      	mov	r0, fp
 800b9e4:	f7f4 fc86 	bl	80002f4 <strlen>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	9308      	str	r3, [sp, #32]
 800b9ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b9f4:	6822      	ldr	r2, [r4, #0]
 800b9f6:	3307      	adds	r3, #7
 800b9f8:	f023 0307 	bic.w	r3, r3, #7
 800b9fc:	f103 0108 	add.w	r1, r3, #8
 800ba00:	f8c8 1000 	str.w	r1, [r8]
 800ba04:	4682      	mov	sl, r0
 800ba06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ba0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800bc70 <_printf_float+0x2a8>
 800ba12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ba16:	eeb0 6bc0 	vabs.f64	d6, d0
 800ba1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	dd24      	ble.n	800ba6e <_printf_float+0xa6>
 800ba24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ba28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2c:	d502      	bpl.n	800ba34 <_printf_float+0x6c>
 800ba2e:	232d      	movs	r3, #45	; 0x2d
 800ba30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba34:	4b90      	ldr	r3, [pc, #576]	; (800bc78 <_printf_float+0x2b0>)
 800ba36:	4891      	ldr	r0, [pc, #580]	; (800bc7c <_printf_float+0x2b4>)
 800ba38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ba3c:	bf94      	ite	ls
 800ba3e:	4698      	movls	r8, r3
 800ba40:	4680      	movhi	r8, r0
 800ba42:	2303      	movs	r3, #3
 800ba44:	6123      	str	r3, [r4, #16]
 800ba46:	f022 0204 	bic.w	r2, r2, #4
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6022      	str	r2, [r4, #0]
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	9700      	str	r7, [sp, #0]
 800ba52:	4633      	mov	r3, r6
 800ba54:	aa09      	add	r2, sp, #36	; 0x24
 800ba56:	4621      	mov	r1, r4
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f000 f9d3 	bl	800be04 <_printf_common>
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f040 808a 	bne.w	800bb78 <_printf_float+0x1b0>
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295
 800ba68:	b00b      	add	sp, #44	; 0x2c
 800ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ba72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba76:	d709      	bvc.n	800ba8c <_printf_float+0xc4>
 800ba78:	ee10 3a90 	vmov	r3, s1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bfbc      	itt	lt
 800ba80:	232d      	movlt	r3, #45	; 0x2d
 800ba82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba86:	487e      	ldr	r0, [pc, #504]	; (800bc80 <_printf_float+0x2b8>)
 800ba88:	4b7e      	ldr	r3, [pc, #504]	; (800bc84 <_printf_float+0x2bc>)
 800ba8a:	e7d5      	b.n	800ba38 <_printf_float+0x70>
 800ba8c:	6863      	ldr	r3, [r4, #4]
 800ba8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ba92:	9104      	str	r1, [sp, #16]
 800ba94:	1c59      	adds	r1, r3, #1
 800ba96:	d13c      	bne.n	800bb12 <_printf_float+0x14a>
 800ba98:	2306      	movs	r3, #6
 800ba9a:	6063      	str	r3, [r4, #4]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9303      	str	r3, [sp, #12]
 800baa0:	ab08      	add	r3, sp, #32
 800baa2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800baa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800baaa:	ab07      	add	r3, sp, #28
 800baac:	6861      	ldr	r1, [r4, #4]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	6022      	str	r2, [r4, #0]
 800bab2:	f10d 031b 	add.w	r3, sp, #27
 800bab6:	4628      	mov	r0, r5
 800bab8:	f7ff fef4 	bl	800b8a4 <__cvt>
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	9907      	ldr	r1, [sp, #28]
 800bac0:	2b47      	cmp	r3, #71	; 0x47
 800bac2:	4680      	mov	r8, r0
 800bac4:	d108      	bne.n	800bad8 <_printf_float+0x110>
 800bac6:	1cc8      	adds	r0, r1, #3
 800bac8:	db02      	blt.n	800bad0 <_printf_float+0x108>
 800baca:	6863      	ldr	r3, [r4, #4]
 800bacc:	4299      	cmp	r1, r3
 800bace:	dd41      	ble.n	800bb54 <_printf_float+0x18c>
 800bad0:	f1a9 0902 	sub.w	r9, r9, #2
 800bad4:	fa5f f989 	uxtb.w	r9, r9
 800bad8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800badc:	d820      	bhi.n	800bb20 <_printf_float+0x158>
 800bade:	3901      	subs	r1, #1
 800bae0:	464a      	mov	r2, r9
 800bae2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bae6:	9107      	str	r1, [sp, #28]
 800bae8:	f7ff ff2e 	bl	800b948 <__exponent>
 800baec:	9a08      	ldr	r2, [sp, #32]
 800baee:	9004      	str	r0, [sp, #16]
 800baf0:	1813      	adds	r3, r2, r0
 800baf2:	2a01      	cmp	r2, #1
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	dc02      	bgt.n	800bafe <_printf_float+0x136>
 800baf8:	6822      	ldr	r2, [r4, #0]
 800bafa:	07d2      	lsls	r2, r2, #31
 800bafc:	d501      	bpl.n	800bb02 <_printf_float+0x13a>
 800bafe:	3301      	adds	r3, #1
 800bb00:	6123      	str	r3, [r4, #16]
 800bb02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0a2      	beq.n	800ba50 <_printf_float+0x88>
 800bb0a:	232d      	movs	r3, #45	; 0x2d
 800bb0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb10:	e79e      	b.n	800ba50 <_printf_float+0x88>
 800bb12:	9904      	ldr	r1, [sp, #16]
 800bb14:	2947      	cmp	r1, #71	; 0x47
 800bb16:	d1c1      	bne.n	800ba9c <_printf_float+0xd4>
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1bf      	bne.n	800ba9c <_printf_float+0xd4>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e7bc      	b.n	800ba9a <_printf_float+0xd2>
 800bb20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bb24:	d118      	bne.n	800bb58 <_printf_float+0x190>
 800bb26:	2900      	cmp	r1, #0
 800bb28:	6863      	ldr	r3, [r4, #4]
 800bb2a:	dd0b      	ble.n	800bb44 <_printf_float+0x17c>
 800bb2c:	6121      	str	r1, [r4, #16]
 800bb2e:	b913      	cbnz	r3, 800bb36 <_printf_float+0x16e>
 800bb30:	6822      	ldr	r2, [r4, #0]
 800bb32:	07d0      	lsls	r0, r2, #31
 800bb34:	d502      	bpl.n	800bb3c <_printf_float+0x174>
 800bb36:	3301      	adds	r3, #1
 800bb38:	440b      	add	r3, r1
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	e7de      	b.n	800bb02 <_printf_float+0x13a>
 800bb44:	b913      	cbnz	r3, 800bb4c <_printf_float+0x184>
 800bb46:	6822      	ldr	r2, [r4, #0]
 800bb48:	07d2      	lsls	r2, r2, #31
 800bb4a:	d501      	bpl.n	800bb50 <_printf_float+0x188>
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	e7f4      	b.n	800bb3a <_printf_float+0x172>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7f2      	b.n	800bb3a <_printf_float+0x172>
 800bb54:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bb58:	9b08      	ldr	r3, [sp, #32]
 800bb5a:	4299      	cmp	r1, r3
 800bb5c:	db05      	blt.n	800bb6a <_printf_float+0x1a2>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	6121      	str	r1, [r4, #16]
 800bb62:	07d8      	lsls	r0, r3, #31
 800bb64:	d5ea      	bpl.n	800bb3c <_printf_float+0x174>
 800bb66:	1c4b      	adds	r3, r1, #1
 800bb68:	e7e7      	b.n	800bb3a <_printf_float+0x172>
 800bb6a:	2900      	cmp	r1, #0
 800bb6c:	bfd4      	ite	le
 800bb6e:	f1c1 0202 	rsble	r2, r1, #2
 800bb72:	2201      	movgt	r2, #1
 800bb74:	4413      	add	r3, r2
 800bb76:	e7e0      	b.n	800bb3a <_printf_float+0x172>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	055a      	lsls	r2, r3, #21
 800bb7c:	d407      	bmi.n	800bb8e <_printf_float+0x1c6>
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	4642      	mov	r2, r8
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d12a      	bne.n	800bbe2 <_printf_float+0x21a>
 800bb8c:	e76a      	b.n	800ba64 <_printf_float+0x9c>
 800bb8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb92:	f240 80e2 	bls.w	800bd5a <_printf_float+0x392>
 800bb96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bb9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba2:	d133      	bne.n	800bc0c <_printf_float+0x244>
 800bba4:	4a38      	ldr	r2, [pc, #224]	; (800bc88 <_printf_float+0x2c0>)
 800bba6:	2301      	movs	r3, #1
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	47b8      	blx	r7
 800bbae:	3001      	adds	r0, #1
 800bbb0:	f43f af58 	beq.w	800ba64 <_printf_float+0x9c>
 800bbb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	db02      	blt.n	800bbc2 <_printf_float+0x1fa>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	07d8      	lsls	r0, r3, #31
 800bbc0:	d50f      	bpl.n	800bbe2 <_printf_float+0x21a>
 800bbc2:	4653      	mov	r3, sl
 800bbc4:	465a      	mov	r2, fp
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b8      	blx	r7
 800bbcc:	3001      	adds	r0, #1
 800bbce:	f43f af49 	beq.w	800ba64 <_printf_float+0x9c>
 800bbd2:	f04f 0800 	mov.w	r8, #0
 800bbd6:	f104 091a 	add.w	r9, r4, #26
 800bbda:	9b08      	ldr	r3, [sp, #32]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	4543      	cmp	r3, r8
 800bbe0:	dc09      	bgt.n	800bbf6 <_printf_float+0x22e>
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	079b      	lsls	r3, r3, #30
 800bbe6:	f100 8108 	bmi.w	800bdfa <_printf_float+0x432>
 800bbea:	68e0      	ldr	r0, [r4, #12]
 800bbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbee:	4298      	cmp	r0, r3
 800bbf0:	bfb8      	it	lt
 800bbf2:	4618      	movlt	r0, r3
 800bbf4:	e738      	b.n	800ba68 <_printf_float+0xa0>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	464a      	mov	r2, r9
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	47b8      	blx	r7
 800bc00:	3001      	adds	r0, #1
 800bc02:	f43f af2f 	beq.w	800ba64 <_printf_float+0x9c>
 800bc06:	f108 0801 	add.w	r8, r8, #1
 800bc0a:	e7e6      	b.n	800bbda <_printf_float+0x212>
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	dc3c      	bgt.n	800bc8c <_printf_float+0x2c4>
 800bc12:	4a1d      	ldr	r2, [pc, #116]	; (800bc88 <_printf_float+0x2c0>)
 800bc14:	2301      	movs	r3, #1
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	f43f af21 	beq.w	800ba64 <_printf_float+0x9c>
 800bc22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	d102      	bne.n	800bc30 <_printf_float+0x268>
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	07d9      	lsls	r1, r3, #31
 800bc2e:	d5d8      	bpl.n	800bbe2 <_printf_float+0x21a>
 800bc30:	4653      	mov	r3, sl
 800bc32:	465a      	mov	r2, fp
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f43f af12 	beq.w	800ba64 <_printf_float+0x9c>
 800bc40:	f04f 0900 	mov.w	r9, #0
 800bc44:	f104 0a1a 	add.w	sl, r4, #26
 800bc48:	9b07      	ldr	r3, [sp, #28]
 800bc4a:	425b      	negs	r3, r3
 800bc4c:	454b      	cmp	r3, r9
 800bc4e:	dc01      	bgt.n	800bc54 <_printf_float+0x28c>
 800bc50:	9b08      	ldr	r3, [sp, #32]
 800bc52:	e795      	b.n	800bb80 <_printf_float+0x1b8>
 800bc54:	2301      	movs	r3, #1
 800bc56:	4652      	mov	r2, sl
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b8      	blx	r7
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f43f af00 	beq.w	800ba64 <_printf_float+0x9c>
 800bc64:	f109 0901 	add.w	r9, r9, #1
 800bc68:	e7ee      	b.n	800bc48 <_printf_float+0x280>
 800bc6a:	bf00      	nop
 800bc6c:	f3af 8000 	nop.w
 800bc70:	ffffffff 	.word	0xffffffff
 800bc74:	7fefffff 	.word	0x7fefffff
 800bc78:	08010599 	.word	0x08010599
 800bc7c:	0801059d 	.word	0x0801059d
 800bc80:	080105a5 	.word	0x080105a5
 800bc84:	080105a1 	.word	0x080105a1
 800bc88:	080105a9 	.word	0x080105a9
 800bc8c:	9a08      	ldr	r2, [sp, #32]
 800bc8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc90:	429a      	cmp	r2, r3
 800bc92:	bfa8      	it	ge
 800bc94:	461a      	movge	r2, r3
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	4691      	mov	r9, r2
 800bc9a:	dc38      	bgt.n	800bd0e <_printf_float+0x346>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bca4:	f104 021a 	add.w	r2, r4, #26
 800bca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcaa:	9905      	ldr	r1, [sp, #20]
 800bcac:	9304      	str	r3, [sp, #16]
 800bcae:	eba3 0309 	sub.w	r3, r3, r9
 800bcb2:	428b      	cmp	r3, r1
 800bcb4:	dc33      	bgt.n	800bd1e <_printf_float+0x356>
 800bcb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	db3c      	blt.n	800bd38 <_printf_float+0x370>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	07da      	lsls	r2, r3, #31
 800bcc2:	d439      	bmi.n	800bd38 <_printf_float+0x370>
 800bcc4:	9a08      	ldr	r2, [sp, #32]
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	9907      	ldr	r1, [sp, #28]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	eba2 0901 	sub.w	r9, r2, r1
 800bcd0:	4599      	cmp	r9, r3
 800bcd2:	bfa8      	it	ge
 800bcd4:	4699      	movge	r9, r3
 800bcd6:	f1b9 0f00 	cmp.w	r9, #0
 800bcda:	dc35      	bgt.n	800bd48 <_printf_float+0x380>
 800bcdc:	f04f 0800 	mov.w	r8, #0
 800bce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bce4:	f104 0a1a 	add.w	sl, r4, #26
 800bce8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bcec:	1a9b      	subs	r3, r3, r2
 800bcee:	eba3 0309 	sub.w	r3, r3, r9
 800bcf2:	4543      	cmp	r3, r8
 800bcf4:	f77f af75 	ble.w	800bbe2 <_printf_float+0x21a>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	47b8      	blx	r7
 800bd02:	3001      	adds	r0, #1
 800bd04:	f43f aeae 	beq.w	800ba64 <_printf_float+0x9c>
 800bd08:	f108 0801 	add.w	r8, r8, #1
 800bd0c:	e7ec      	b.n	800bce8 <_printf_float+0x320>
 800bd0e:	4613      	mov	r3, r2
 800bd10:	4631      	mov	r1, r6
 800bd12:	4642      	mov	r2, r8
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d1bf      	bne.n	800bc9c <_printf_float+0x2d4>
 800bd1c:	e6a2      	b.n	800ba64 <_printf_float+0x9c>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4631      	mov	r1, r6
 800bd22:	4628      	mov	r0, r5
 800bd24:	9204      	str	r2, [sp, #16]
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f ae9b 	beq.w	800ba64 <_printf_float+0x9c>
 800bd2e:	9b05      	ldr	r3, [sp, #20]
 800bd30:	9a04      	ldr	r2, [sp, #16]
 800bd32:	3301      	adds	r3, #1
 800bd34:	9305      	str	r3, [sp, #20]
 800bd36:	e7b7      	b.n	800bca8 <_printf_float+0x2e0>
 800bd38:	4653      	mov	r3, sl
 800bd3a:	465a      	mov	r2, fp
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b8      	blx	r7
 800bd42:	3001      	adds	r0, #1
 800bd44:	d1be      	bne.n	800bcc4 <_printf_float+0x2fc>
 800bd46:	e68d      	b.n	800ba64 <_printf_float+0x9c>
 800bd48:	9a04      	ldr	r2, [sp, #16]
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	4442      	add	r2, r8
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	d1c1      	bne.n	800bcdc <_printf_float+0x314>
 800bd58:	e684      	b.n	800ba64 <_printf_float+0x9c>
 800bd5a:	9a08      	ldr	r2, [sp, #32]
 800bd5c:	2a01      	cmp	r2, #1
 800bd5e:	dc01      	bgt.n	800bd64 <_printf_float+0x39c>
 800bd60:	07db      	lsls	r3, r3, #31
 800bd62:	d537      	bpl.n	800bdd4 <_printf_float+0x40c>
 800bd64:	2301      	movs	r3, #1
 800bd66:	4642      	mov	r2, r8
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f43f ae78 	beq.w	800ba64 <_printf_float+0x9c>
 800bd74:	4653      	mov	r3, sl
 800bd76:	465a      	mov	r2, fp
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	47b8      	blx	r7
 800bd7e:	3001      	adds	r0, #1
 800bd80:	f43f ae70 	beq.w	800ba64 <_printf_float+0x9c>
 800bd84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bd88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	d01b      	beq.n	800bdca <_printf_float+0x402>
 800bd92:	9b08      	ldr	r3, [sp, #32]
 800bd94:	f108 0201 	add.w	r2, r8, #1
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	47b8      	blx	r7
 800bda0:	3001      	adds	r0, #1
 800bda2:	d10e      	bne.n	800bdc2 <_printf_float+0x3fa>
 800bda4:	e65e      	b.n	800ba64 <_printf_float+0x9c>
 800bda6:	2301      	movs	r3, #1
 800bda8:	464a      	mov	r2, r9
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4628      	mov	r0, r5
 800bdae:	47b8      	blx	r7
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	f43f ae57 	beq.w	800ba64 <_printf_float+0x9c>
 800bdb6:	f108 0801 	add.w	r8, r8, #1
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	4543      	cmp	r3, r8
 800bdc0:	dcf1      	bgt.n	800bda6 <_printf_float+0x3de>
 800bdc2:	9b04      	ldr	r3, [sp, #16]
 800bdc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdc8:	e6db      	b.n	800bb82 <_printf_float+0x1ba>
 800bdca:	f04f 0800 	mov.w	r8, #0
 800bdce:	f104 091a 	add.w	r9, r4, #26
 800bdd2:	e7f2      	b.n	800bdba <_printf_float+0x3f2>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	4642      	mov	r2, r8
 800bdd8:	e7df      	b.n	800bd9a <_printf_float+0x3d2>
 800bdda:	2301      	movs	r3, #1
 800bddc:	464a      	mov	r2, r9
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	f43f ae3d 	beq.w	800ba64 <_printf_float+0x9c>
 800bdea:	f108 0801 	add.w	r8, r8, #1
 800bdee:	68e3      	ldr	r3, [r4, #12]
 800bdf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdf2:	1a5b      	subs	r3, r3, r1
 800bdf4:	4543      	cmp	r3, r8
 800bdf6:	dcf0      	bgt.n	800bdda <_printf_float+0x412>
 800bdf8:	e6f7      	b.n	800bbea <_printf_float+0x222>
 800bdfa:	f04f 0800 	mov.w	r8, #0
 800bdfe:	f104 0919 	add.w	r9, r4, #25
 800be02:	e7f4      	b.n	800bdee <_printf_float+0x426>

0800be04 <_printf_common>:
 800be04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	4616      	mov	r6, r2
 800be0a:	4699      	mov	r9, r3
 800be0c:	688a      	ldr	r2, [r1, #8]
 800be0e:	690b      	ldr	r3, [r1, #16]
 800be10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be14:	4293      	cmp	r3, r2
 800be16:	bfb8      	it	lt
 800be18:	4613      	movlt	r3, r2
 800be1a:	6033      	str	r3, [r6, #0]
 800be1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be20:	4607      	mov	r7, r0
 800be22:	460c      	mov	r4, r1
 800be24:	b10a      	cbz	r2, 800be2a <_printf_common+0x26>
 800be26:	3301      	adds	r3, #1
 800be28:	6033      	str	r3, [r6, #0]
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	0699      	lsls	r1, r3, #26
 800be2e:	bf42      	ittt	mi
 800be30:	6833      	ldrmi	r3, [r6, #0]
 800be32:	3302      	addmi	r3, #2
 800be34:	6033      	strmi	r3, [r6, #0]
 800be36:	6825      	ldr	r5, [r4, #0]
 800be38:	f015 0506 	ands.w	r5, r5, #6
 800be3c:	d106      	bne.n	800be4c <_printf_common+0x48>
 800be3e:	f104 0a19 	add.w	sl, r4, #25
 800be42:	68e3      	ldr	r3, [r4, #12]
 800be44:	6832      	ldr	r2, [r6, #0]
 800be46:	1a9b      	subs	r3, r3, r2
 800be48:	42ab      	cmp	r3, r5
 800be4a:	dc26      	bgt.n	800be9a <_printf_common+0x96>
 800be4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be50:	1e13      	subs	r3, r2, #0
 800be52:	6822      	ldr	r2, [r4, #0]
 800be54:	bf18      	it	ne
 800be56:	2301      	movne	r3, #1
 800be58:	0692      	lsls	r2, r2, #26
 800be5a:	d42b      	bmi.n	800beb4 <_printf_common+0xb0>
 800be5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be60:	4649      	mov	r1, r9
 800be62:	4638      	mov	r0, r7
 800be64:	47c0      	blx	r8
 800be66:	3001      	adds	r0, #1
 800be68:	d01e      	beq.n	800bea8 <_printf_common+0xa4>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	68e5      	ldr	r5, [r4, #12]
 800be6e:	6832      	ldr	r2, [r6, #0]
 800be70:	f003 0306 	and.w	r3, r3, #6
 800be74:	2b04      	cmp	r3, #4
 800be76:	bf08      	it	eq
 800be78:	1aad      	subeq	r5, r5, r2
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	6922      	ldr	r2, [r4, #16]
 800be7e:	bf0c      	ite	eq
 800be80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be84:	2500      	movne	r5, #0
 800be86:	4293      	cmp	r3, r2
 800be88:	bfc4      	itt	gt
 800be8a:	1a9b      	subgt	r3, r3, r2
 800be8c:	18ed      	addgt	r5, r5, r3
 800be8e:	2600      	movs	r6, #0
 800be90:	341a      	adds	r4, #26
 800be92:	42b5      	cmp	r5, r6
 800be94:	d11a      	bne.n	800becc <_printf_common+0xc8>
 800be96:	2000      	movs	r0, #0
 800be98:	e008      	b.n	800beac <_printf_common+0xa8>
 800be9a:	2301      	movs	r3, #1
 800be9c:	4652      	mov	r2, sl
 800be9e:	4649      	mov	r1, r9
 800bea0:	4638      	mov	r0, r7
 800bea2:	47c0      	blx	r8
 800bea4:	3001      	adds	r0, #1
 800bea6:	d103      	bne.n	800beb0 <_printf_common+0xac>
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295
 800beac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb0:	3501      	adds	r5, #1
 800beb2:	e7c6      	b.n	800be42 <_printf_common+0x3e>
 800beb4:	18e1      	adds	r1, r4, r3
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	2030      	movs	r0, #48	; 0x30
 800beba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bebe:	4422      	add	r2, r4
 800bec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bec8:	3302      	adds	r3, #2
 800beca:	e7c7      	b.n	800be5c <_printf_common+0x58>
 800becc:	2301      	movs	r3, #1
 800bece:	4622      	mov	r2, r4
 800bed0:	4649      	mov	r1, r9
 800bed2:	4638      	mov	r0, r7
 800bed4:	47c0      	blx	r8
 800bed6:	3001      	adds	r0, #1
 800bed8:	d0e6      	beq.n	800bea8 <_printf_common+0xa4>
 800beda:	3601      	adds	r6, #1
 800bedc:	e7d9      	b.n	800be92 <_printf_common+0x8e>
	...

0800bee0 <_printf_i>:
 800bee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bee4:	460c      	mov	r4, r1
 800bee6:	4691      	mov	r9, r2
 800bee8:	7e27      	ldrb	r7, [r4, #24]
 800beea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800beec:	2f78      	cmp	r7, #120	; 0x78
 800beee:	4680      	mov	r8, r0
 800bef0:	469a      	mov	sl, r3
 800bef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bef6:	d807      	bhi.n	800bf08 <_printf_i+0x28>
 800bef8:	2f62      	cmp	r7, #98	; 0x62
 800befa:	d80a      	bhi.n	800bf12 <_printf_i+0x32>
 800befc:	2f00      	cmp	r7, #0
 800befe:	f000 80d8 	beq.w	800c0b2 <_printf_i+0x1d2>
 800bf02:	2f58      	cmp	r7, #88	; 0x58
 800bf04:	f000 80a3 	beq.w	800c04e <_printf_i+0x16e>
 800bf08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf10:	e03a      	b.n	800bf88 <_printf_i+0xa8>
 800bf12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf16:	2b15      	cmp	r3, #21
 800bf18:	d8f6      	bhi.n	800bf08 <_printf_i+0x28>
 800bf1a:	a001      	add	r0, pc, #4	; (adr r0, 800bf20 <_printf_i+0x40>)
 800bf1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf20:	0800bf79 	.word	0x0800bf79
 800bf24:	0800bf8d 	.word	0x0800bf8d
 800bf28:	0800bf09 	.word	0x0800bf09
 800bf2c:	0800bf09 	.word	0x0800bf09
 800bf30:	0800bf09 	.word	0x0800bf09
 800bf34:	0800bf09 	.word	0x0800bf09
 800bf38:	0800bf8d 	.word	0x0800bf8d
 800bf3c:	0800bf09 	.word	0x0800bf09
 800bf40:	0800bf09 	.word	0x0800bf09
 800bf44:	0800bf09 	.word	0x0800bf09
 800bf48:	0800bf09 	.word	0x0800bf09
 800bf4c:	0800c099 	.word	0x0800c099
 800bf50:	0800bfbd 	.word	0x0800bfbd
 800bf54:	0800c07b 	.word	0x0800c07b
 800bf58:	0800bf09 	.word	0x0800bf09
 800bf5c:	0800bf09 	.word	0x0800bf09
 800bf60:	0800c0bb 	.word	0x0800c0bb
 800bf64:	0800bf09 	.word	0x0800bf09
 800bf68:	0800bfbd 	.word	0x0800bfbd
 800bf6c:	0800bf09 	.word	0x0800bf09
 800bf70:	0800bf09 	.word	0x0800bf09
 800bf74:	0800c083 	.word	0x0800c083
 800bf78:	680b      	ldr	r3, [r1, #0]
 800bf7a:	1d1a      	adds	r2, r3, #4
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	600a      	str	r2, [r1, #0]
 800bf80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e0a3      	b.n	800c0d4 <_printf_i+0x1f4>
 800bf8c:	6825      	ldr	r5, [r4, #0]
 800bf8e:	6808      	ldr	r0, [r1, #0]
 800bf90:	062e      	lsls	r6, r5, #24
 800bf92:	f100 0304 	add.w	r3, r0, #4
 800bf96:	d50a      	bpl.n	800bfae <_printf_i+0xce>
 800bf98:	6805      	ldr	r5, [r0, #0]
 800bf9a:	600b      	str	r3, [r1, #0]
 800bf9c:	2d00      	cmp	r5, #0
 800bf9e:	da03      	bge.n	800bfa8 <_printf_i+0xc8>
 800bfa0:	232d      	movs	r3, #45	; 0x2d
 800bfa2:	426d      	negs	r5, r5
 800bfa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa8:	485e      	ldr	r0, [pc, #376]	; (800c124 <_printf_i+0x244>)
 800bfaa:	230a      	movs	r3, #10
 800bfac:	e019      	b.n	800bfe2 <_printf_i+0x102>
 800bfae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bfb2:	6805      	ldr	r5, [r0, #0]
 800bfb4:	600b      	str	r3, [r1, #0]
 800bfb6:	bf18      	it	ne
 800bfb8:	b22d      	sxthne	r5, r5
 800bfba:	e7ef      	b.n	800bf9c <_printf_i+0xbc>
 800bfbc:	680b      	ldr	r3, [r1, #0]
 800bfbe:	6825      	ldr	r5, [r4, #0]
 800bfc0:	1d18      	adds	r0, r3, #4
 800bfc2:	6008      	str	r0, [r1, #0]
 800bfc4:	0628      	lsls	r0, r5, #24
 800bfc6:	d501      	bpl.n	800bfcc <_printf_i+0xec>
 800bfc8:	681d      	ldr	r5, [r3, #0]
 800bfca:	e002      	b.n	800bfd2 <_printf_i+0xf2>
 800bfcc:	0669      	lsls	r1, r5, #25
 800bfce:	d5fb      	bpl.n	800bfc8 <_printf_i+0xe8>
 800bfd0:	881d      	ldrh	r5, [r3, #0]
 800bfd2:	4854      	ldr	r0, [pc, #336]	; (800c124 <_printf_i+0x244>)
 800bfd4:	2f6f      	cmp	r7, #111	; 0x6f
 800bfd6:	bf0c      	ite	eq
 800bfd8:	2308      	moveq	r3, #8
 800bfda:	230a      	movne	r3, #10
 800bfdc:	2100      	movs	r1, #0
 800bfde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfe2:	6866      	ldr	r6, [r4, #4]
 800bfe4:	60a6      	str	r6, [r4, #8]
 800bfe6:	2e00      	cmp	r6, #0
 800bfe8:	bfa2      	ittt	ge
 800bfea:	6821      	ldrge	r1, [r4, #0]
 800bfec:	f021 0104 	bicge.w	r1, r1, #4
 800bff0:	6021      	strge	r1, [r4, #0]
 800bff2:	b90d      	cbnz	r5, 800bff8 <_printf_i+0x118>
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	d04d      	beq.n	800c094 <_printf_i+0x1b4>
 800bff8:	4616      	mov	r6, r2
 800bffa:	fbb5 f1f3 	udiv	r1, r5, r3
 800bffe:	fb03 5711 	mls	r7, r3, r1, r5
 800c002:	5dc7      	ldrb	r7, [r0, r7]
 800c004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c008:	462f      	mov	r7, r5
 800c00a:	42bb      	cmp	r3, r7
 800c00c:	460d      	mov	r5, r1
 800c00e:	d9f4      	bls.n	800bffa <_printf_i+0x11a>
 800c010:	2b08      	cmp	r3, #8
 800c012:	d10b      	bne.n	800c02c <_printf_i+0x14c>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	07df      	lsls	r7, r3, #31
 800c018:	d508      	bpl.n	800c02c <_printf_i+0x14c>
 800c01a:	6923      	ldr	r3, [r4, #16]
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	4299      	cmp	r1, r3
 800c020:	bfde      	ittt	le
 800c022:	2330      	movle	r3, #48	; 0x30
 800c024:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c028:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c02c:	1b92      	subs	r2, r2, r6
 800c02e:	6122      	str	r2, [r4, #16]
 800c030:	f8cd a000 	str.w	sl, [sp]
 800c034:	464b      	mov	r3, r9
 800c036:	aa03      	add	r2, sp, #12
 800c038:	4621      	mov	r1, r4
 800c03a:	4640      	mov	r0, r8
 800c03c:	f7ff fee2 	bl	800be04 <_printf_common>
 800c040:	3001      	adds	r0, #1
 800c042:	d14c      	bne.n	800c0de <_printf_i+0x1fe>
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	b004      	add	sp, #16
 800c04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c04e:	4835      	ldr	r0, [pc, #212]	; (800c124 <_printf_i+0x244>)
 800c050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	680e      	ldr	r6, [r1, #0]
 800c058:	061f      	lsls	r7, r3, #24
 800c05a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c05e:	600e      	str	r6, [r1, #0]
 800c060:	d514      	bpl.n	800c08c <_printf_i+0x1ac>
 800c062:	07d9      	lsls	r1, r3, #31
 800c064:	bf44      	itt	mi
 800c066:	f043 0320 	orrmi.w	r3, r3, #32
 800c06a:	6023      	strmi	r3, [r4, #0]
 800c06c:	b91d      	cbnz	r5, 800c076 <_printf_i+0x196>
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	f023 0320 	bic.w	r3, r3, #32
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	2310      	movs	r3, #16
 800c078:	e7b0      	b.n	800bfdc <_printf_i+0xfc>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	f043 0320 	orr.w	r3, r3, #32
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	2378      	movs	r3, #120	; 0x78
 800c084:	4828      	ldr	r0, [pc, #160]	; (800c128 <_printf_i+0x248>)
 800c086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c08a:	e7e3      	b.n	800c054 <_printf_i+0x174>
 800c08c:	065e      	lsls	r6, r3, #25
 800c08e:	bf48      	it	mi
 800c090:	b2ad      	uxthmi	r5, r5
 800c092:	e7e6      	b.n	800c062 <_printf_i+0x182>
 800c094:	4616      	mov	r6, r2
 800c096:	e7bb      	b.n	800c010 <_printf_i+0x130>
 800c098:	680b      	ldr	r3, [r1, #0]
 800c09a:	6826      	ldr	r6, [r4, #0]
 800c09c:	6960      	ldr	r0, [r4, #20]
 800c09e:	1d1d      	adds	r5, r3, #4
 800c0a0:	600d      	str	r5, [r1, #0]
 800c0a2:	0635      	lsls	r5, r6, #24
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	d501      	bpl.n	800c0ac <_printf_i+0x1cc>
 800c0a8:	6018      	str	r0, [r3, #0]
 800c0aa:	e002      	b.n	800c0b2 <_printf_i+0x1d2>
 800c0ac:	0671      	lsls	r1, r6, #25
 800c0ae:	d5fb      	bpl.n	800c0a8 <_printf_i+0x1c8>
 800c0b0:	8018      	strh	r0, [r3, #0]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	4616      	mov	r6, r2
 800c0b8:	e7ba      	b.n	800c030 <_printf_i+0x150>
 800c0ba:	680b      	ldr	r3, [r1, #0]
 800c0bc:	1d1a      	adds	r2, r3, #4
 800c0be:	600a      	str	r2, [r1, #0]
 800c0c0:	681e      	ldr	r6, [r3, #0]
 800c0c2:	6862      	ldr	r2, [r4, #4]
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7f4 f922 	bl	8000310 <memchr>
 800c0cc:	b108      	cbz	r0, 800c0d2 <_printf_i+0x1f2>
 800c0ce:	1b80      	subs	r0, r0, r6
 800c0d0:	6060      	str	r0, [r4, #4]
 800c0d2:	6863      	ldr	r3, [r4, #4]
 800c0d4:	6123      	str	r3, [r4, #16]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0dc:	e7a8      	b.n	800c030 <_printf_i+0x150>
 800c0de:	6923      	ldr	r3, [r4, #16]
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	47d0      	blx	sl
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d0ab      	beq.n	800c044 <_printf_i+0x164>
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	079b      	lsls	r3, r3, #30
 800c0f0:	d413      	bmi.n	800c11a <_printf_i+0x23a>
 800c0f2:	68e0      	ldr	r0, [r4, #12]
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	4298      	cmp	r0, r3
 800c0f8:	bfb8      	it	lt
 800c0fa:	4618      	movlt	r0, r3
 800c0fc:	e7a4      	b.n	800c048 <_printf_i+0x168>
 800c0fe:	2301      	movs	r3, #1
 800c100:	4632      	mov	r2, r6
 800c102:	4649      	mov	r1, r9
 800c104:	4640      	mov	r0, r8
 800c106:	47d0      	blx	sl
 800c108:	3001      	adds	r0, #1
 800c10a:	d09b      	beq.n	800c044 <_printf_i+0x164>
 800c10c:	3501      	adds	r5, #1
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	9903      	ldr	r1, [sp, #12]
 800c112:	1a5b      	subs	r3, r3, r1
 800c114:	42ab      	cmp	r3, r5
 800c116:	dcf2      	bgt.n	800c0fe <_printf_i+0x21e>
 800c118:	e7eb      	b.n	800c0f2 <_printf_i+0x212>
 800c11a:	2500      	movs	r5, #0
 800c11c:	f104 0619 	add.w	r6, r4, #25
 800c120:	e7f5      	b.n	800c10e <_printf_i+0x22e>
 800c122:	bf00      	nop
 800c124:	080105ab 	.word	0x080105ab
 800c128:	080105bc 	.word	0x080105bc

0800c12c <_scanf_float>:
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	b087      	sub	sp, #28
 800c132:	4617      	mov	r7, r2
 800c134:	9303      	str	r3, [sp, #12]
 800c136:	688b      	ldr	r3, [r1, #8]
 800c138:	1e5a      	subs	r2, r3, #1
 800c13a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c13e:	bf83      	ittte	hi
 800c140:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c144:	195b      	addhi	r3, r3, r5
 800c146:	9302      	strhi	r3, [sp, #8]
 800c148:	2300      	movls	r3, #0
 800c14a:	bf86      	itte	hi
 800c14c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c150:	608b      	strhi	r3, [r1, #8]
 800c152:	9302      	strls	r3, [sp, #8]
 800c154:	680b      	ldr	r3, [r1, #0]
 800c156:	468b      	mov	fp, r1
 800c158:	2500      	movs	r5, #0
 800c15a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c15e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c162:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c166:	4680      	mov	r8, r0
 800c168:	460c      	mov	r4, r1
 800c16a:	465e      	mov	r6, fp
 800c16c:	46aa      	mov	sl, r5
 800c16e:	46a9      	mov	r9, r5
 800c170:	9501      	str	r5, [sp, #4]
 800c172:	68a2      	ldr	r2, [r4, #8]
 800c174:	b152      	cbz	r2, 800c18c <_scanf_float+0x60>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b4e      	cmp	r3, #78	; 0x4e
 800c17c:	d864      	bhi.n	800c248 <_scanf_float+0x11c>
 800c17e:	2b40      	cmp	r3, #64	; 0x40
 800c180:	d83c      	bhi.n	800c1fc <_scanf_float+0xd0>
 800c182:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c186:	b2c8      	uxtb	r0, r1
 800c188:	280e      	cmp	r0, #14
 800c18a:	d93a      	bls.n	800c202 <_scanf_float+0xd6>
 800c18c:	f1b9 0f00 	cmp.w	r9, #0
 800c190:	d003      	beq.n	800c19a <_scanf_float+0x6e>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c19e:	f1ba 0f01 	cmp.w	sl, #1
 800c1a2:	f200 8113 	bhi.w	800c3cc <_scanf_float+0x2a0>
 800c1a6:	455e      	cmp	r6, fp
 800c1a8:	f200 8105 	bhi.w	800c3b6 <_scanf_float+0x28a>
 800c1ac:	2501      	movs	r5, #1
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	b007      	add	sp, #28
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c1ba:	2a0d      	cmp	r2, #13
 800c1bc:	d8e6      	bhi.n	800c18c <_scanf_float+0x60>
 800c1be:	a101      	add	r1, pc, #4	; (adr r1, 800c1c4 <_scanf_float+0x98>)
 800c1c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1c4:	0800c303 	.word	0x0800c303
 800c1c8:	0800c18d 	.word	0x0800c18d
 800c1cc:	0800c18d 	.word	0x0800c18d
 800c1d0:	0800c18d 	.word	0x0800c18d
 800c1d4:	0800c363 	.word	0x0800c363
 800c1d8:	0800c33b 	.word	0x0800c33b
 800c1dc:	0800c18d 	.word	0x0800c18d
 800c1e0:	0800c18d 	.word	0x0800c18d
 800c1e4:	0800c311 	.word	0x0800c311
 800c1e8:	0800c18d 	.word	0x0800c18d
 800c1ec:	0800c18d 	.word	0x0800c18d
 800c1f0:	0800c18d 	.word	0x0800c18d
 800c1f4:	0800c18d 	.word	0x0800c18d
 800c1f8:	0800c2c9 	.word	0x0800c2c9
 800c1fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c200:	e7db      	b.n	800c1ba <_scanf_float+0x8e>
 800c202:	290e      	cmp	r1, #14
 800c204:	d8c2      	bhi.n	800c18c <_scanf_float+0x60>
 800c206:	a001      	add	r0, pc, #4	; (adr r0, 800c20c <_scanf_float+0xe0>)
 800c208:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c20c:	0800c2bb 	.word	0x0800c2bb
 800c210:	0800c18d 	.word	0x0800c18d
 800c214:	0800c2bb 	.word	0x0800c2bb
 800c218:	0800c34f 	.word	0x0800c34f
 800c21c:	0800c18d 	.word	0x0800c18d
 800c220:	0800c269 	.word	0x0800c269
 800c224:	0800c2a5 	.word	0x0800c2a5
 800c228:	0800c2a5 	.word	0x0800c2a5
 800c22c:	0800c2a5 	.word	0x0800c2a5
 800c230:	0800c2a5 	.word	0x0800c2a5
 800c234:	0800c2a5 	.word	0x0800c2a5
 800c238:	0800c2a5 	.word	0x0800c2a5
 800c23c:	0800c2a5 	.word	0x0800c2a5
 800c240:	0800c2a5 	.word	0x0800c2a5
 800c244:	0800c2a5 	.word	0x0800c2a5
 800c248:	2b6e      	cmp	r3, #110	; 0x6e
 800c24a:	d809      	bhi.n	800c260 <_scanf_float+0x134>
 800c24c:	2b60      	cmp	r3, #96	; 0x60
 800c24e:	d8b2      	bhi.n	800c1b6 <_scanf_float+0x8a>
 800c250:	2b54      	cmp	r3, #84	; 0x54
 800c252:	d077      	beq.n	800c344 <_scanf_float+0x218>
 800c254:	2b59      	cmp	r3, #89	; 0x59
 800c256:	d199      	bne.n	800c18c <_scanf_float+0x60>
 800c258:	2d07      	cmp	r5, #7
 800c25a:	d197      	bne.n	800c18c <_scanf_float+0x60>
 800c25c:	2508      	movs	r5, #8
 800c25e:	e029      	b.n	800c2b4 <_scanf_float+0x188>
 800c260:	2b74      	cmp	r3, #116	; 0x74
 800c262:	d06f      	beq.n	800c344 <_scanf_float+0x218>
 800c264:	2b79      	cmp	r3, #121	; 0x79
 800c266:	e7f6      	b.n	800c256 <_scanf_float+0x12a>
 800c268:	6821      	ldr	r1, [r4, #0]
 800c26a:	05c8      	lsls	r0, r1, #23
 800c26c:	d51a      	bpl.n	800c2a4 <_scanf_float+0x178>
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c274:	6021      	str	r1, [r4, #0]
 800c276:	f109 0901 	add.w	r9, r9, #1
 800c27a:	b11b      	cbz	r3, 800c284 <_scanf_float+0x158>
 800c27c:	3b01      	subs	r3, #1
 800c27e:	3201      	adds	r2, #1
 800c280:	9302      	str	r3, [sp, #8]
 800c282:	60a2      	str	r2, [r4, #8]
 800c284:	68a3      	ldr	r3, [r4, #8]
 800c286:	3b01      	subs	r3, #1
 800c288:	60a3      	str	r3, [r4, #8]
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	3301      	adds	r3, #1
 800c28e:	6123      	str	r3, [r4, #16]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3b01      	subs	r3, #1
 800c294:	2b00      	cmp	r3, #0
 800c296:	607b      	str	r3, [r7, #4]
 800c298:	f340 8084 	ble.w	800c3a4 <_scanf_float+0x278>
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	603b      	str	r3, [r7, #0]
 800c2a2:	e766      	b.n	800c172 <_scanf_float+0x46>
 800c2a4:	eb1a 0f05 	cmn.w	sl, r5
 800c2a8:	f47f af70 	bne.w	800c18c <_scanf_float+0x60>
 800c2ac:	6822      	ldr	r2, [r4, #0]
 800c2ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c2b2:	6022      	str	r2, [r4, #0]
 800c2b4:	f806 3b01 	strb.w	r3, [r6], #1
 800c2b8:	e7e4      	b.n	800c284 <_scanf_float+0x158>
 800c2ba:	6822      	ldr	r2, [r4, #0]
 800c2bc:	0610      	lsls	r0, r2, #24
 800c2be:	f57f af65 	bpl.w	800c18c <_scanf_float+0x60>
 800c2c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2c6:	e7f4      	b.n	800c2b2 <_scanf_float+0x186>
 800c2c8:	f1ba 0f00 	cmp.w	sl, #0
 800c2cc:	d10e      	bne.n	800c2ec <_scanf_float+0x1c0>
 800c2ce:	f1b9 0f00 	cmp.w	r9, #0
 800c2d2:	d10e      	bne.n	800c2f2 <_scanf_float+0x1c6>
 800c2d4:	6822      	ldr	r2, [r4, #0]
 800c2d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c2da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c2de:	d108      	bne.n	800c2f2 <_scanf_float+0x1c6>
 800c2e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2e4:	6022      	str	r2, [r4, #0]
 800c2e6:	f04f 0a01 	mov.w	sl, #1
 800c2ea:	e7e3      	b.n	800c2b4 <_scanf_float+0x188>
 800c2ec:	f1ba 0f02 	cmp.w	sl, #2
 800c2f0:	d055      	beq.n	800c39e <_scanf_float+0x272>
 800c2f2:	2d01      	cmp	r5, #1
 800c2f4:	d002      	beq.n	800c2fc <_scanf_float+0x1d0>
 800c2f6:	2d04      	cmp	r5, #4
 800c2f8:	f47f af48 	bne.w	800c18c <_scanf_float+0x60>
 800c2fc:	3501      	adds	r5, #1
 800c2fe:	b2ed      	uxtb	r5, r5
 800c300:	e7d8      	b.n	800c2b4 <_scanf_float+0x188>
 800c302:	f1ba 0f01 	cmp.w	sl, #1
 800c306:	f47f af41 	bne.w	800c18c <_scanf_float+0x60>
 800c30a:	f04f 0a02 	mov.w	sl, #2
 800c30e:	e7d1      	b.n	800c2b4 <_scanf_float+0x188>
 800c310:	b97d      	cbnz	r5, 800c332 <_scanf_float+0x206>
 800c312:	f1b9 0f00 	cmp.w	r9, #0
 800c316:	f47f af3c 	bne.w	800c192 <_scanf_float+0x66>
 800c31a:	6822      	ldr	r2, [r4, #0]
 800c31c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c320:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c324:	f47f af39 	bne.w	800c19a <_scanf_float+0x6e>
 800c328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c32c:	6022      	str	r2, [r4, #0]
 800c32e:	2501      	movs	r5, #1
 800c330:	e7c0      	b.n	800c2b4 <_scanf_float+0x188>
 800c332:	2d03      	cmp	r5, #3
 800c334:	d0e2      	beq.n	800c2fc <_scanf_float+0x1d0>
 800c336:	2d05      	cmp	r5, #5
 800c338:	e7de      	b.n	800c2f8 <_scanf_float+0x1cc>
 800c33a:	2d02      	cmp	r5, #2
 800c33c:	f47f af26 	bne.w	800c18c <_scanf_float+0x60>
 800c340:	2503      	movs	r5, #3
 800c342:	e7b7      	b.n	800c2b4 <_scanf_float+0x188>
 800c344:	2d06      	cmp	r5, #6
 800c346:	f47f af21 	bne.w	800c18c <_scanf_float+0x60>
 800c34a:	2507      	movs	r5, #7
 800c34c:	e7b2      	b.n	800c2b4 <_scanf_float+0x188>
 800c34e:	6822      	ldr	r2, [r4, #0]
 800c350:	0591      	lsls	r1, r2, #22
 800c352:	f57f af1b 	bpl.w	800c18c <_scanf_float+0x60>
 800c356:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c35a:	6022      	str	r2, [r4, #0]
 800c35c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c360:	e7a8      	b.n	800c2b4 <_scanf_float+0x188>
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c368:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c36c:	d006      	beq.n	800c37c <_scanf_float+0x250>
 800c36e:	0550      	lsls	r0, r2, #21
 800c370:	f57f af0c 	bpl.w	800c18c <_scanf_float+0x60>
 800c374:	f1b9 0f00 	cmp.w	r9, #0
 800c378:	f43f af0f 	beq.w	800c19a <_scanf_float+0x6e>
 800c37c:	0591      	lsls	r1, r2, #22
 800c37e:	bf58      	it	pl
 800c380:	9901      	ldrpl	r1, [sp, #4]
 800c382:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c386:	bf58      	it	pl
 800c388:	eba9 0101 	subpl.w	r1, r9, r1
 800c38c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c390:	bf58      	it	pl
 800c392:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c396:	6022      	str	r2, [r4, #0]
 800c398:	f04f 0900 	mov.w	r9, #0
 800c39c:	e78a      	b.n	800c2b4 <_scanf_float+0x188>
 800c39e:	f04f 0a03 	mov.w	sl, #3
 800c3a2:	e787      	b.n	800c2b4 <_scanf_float+0x188>
 800c3a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4798      	blx	r3
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f43f aedf 	beq.w	800c172 <_scanf_float+0x46>
 800c3b4:	e6ea      	b.n	800c18c <_scanf_float+0x60>
 800c3b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3be:	463a      	mov	r2, r7
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	4798      	blx	r3
 800c3c4:	6923      	ldr	r3, [r4, #16]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	6123      	str	r3, [r4, #16]
 800c3ca:	e6ec      	b.n	800c1a6 <_scanf_float+0x7a>
 800c3cc:	1e6b      	subs	r3, r5, #1
 800c3ce:	2b06      	cmp	r3, #6
 800c3d0:	d825      	bhi.n	800c41e <_scanf_float+0x2f2>
 800c3d2:	2d02      	cmp	r5, #2
 800c3d4:	d836      	bhi.n	800c444 <_scanf_float+0x318>
 800c3d6:	455e      	cmp	r6, fp
 800c3d8:	f67f aee8 	bls.w	800c1ac <_scanf_float+0x80>
 800c3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3e4:	463a      	mov	r2, r7
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	4798      	blx	r3
 800c3ea:	6923      	ldr	r3, [r4, #16]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	6123      	str	r3, [r4, #16]
 800c3f0:	e7f1      	b.n	800c3d6 <_scanf_float+0x2aa>
 800c3f2:	9802      	ldr	r0, [sp, #8]
 800c3f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c3fc:	9002      	str	r0, [sp, #8]
 800c3fe:	463a      	mov	r2, r7
 800c400:	4640      	mov	r0, r8
 800c402:	4798      	blx	r3
 800c404:	6923      	ldr	r3, [r4, #16]
 800c406:	3b01      	subs	r3, #1
 800c408:	6123      	str	r3, [r4, #16]
 800c40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c40e:	fa5f fa8a 	uxtb.w	sl, sl
 800c412:	f1ba 0f02 	cmp.w	sl, #2
 800c416:	d1ec      	bne.n	800c3f2 <_scanf_float+0x2c6>
 800c418:	3d03      	subs	r5, #3
 800c41a:	b2ed      	uxtb	r5, r5
 800c41c:	1b76      	subs	r6, r6, r5
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	05da      	lsls	r2, r3, #23
 800c422:	d52f      	bpl.n	800c484 <_scanf_float+0x358>
 800c424:	055b      	lsls	r3, r3, #21
 800c426:	d510      	bpl.n	800c44a <_scanf_float+0x31e>
 800c428:	455e      	cmp	r6, fp
 800c42a:	f67f aebf 	bls.w	800c1ac <_scanf_float+0x80>
 800c42e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c436:	463a      	mov	r2, r7
 800c438:	4640      	mov	r0, r8
 800c43a:	4798      	blx	r3
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	3b01      	subs	r3, #1
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	e7f1      	b.n	800c428 <_scanf_float+0x2fc>
 800c444:	46aa      	mov	sl, r5
 800c446:	9602      	str	r6, [sp, #8]
 800c448:	e7df      	b.n	800c40a <_scanf_float+0x2de>
 800c44a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c44e:	6923      	ldr	r3, [r4, #16]
 800c450:	2965      	cmp	r1, #101	; 0x65
 800c452:	f103 33ff 	add.w	r3, r3, #4294967295
 800c456:	f106 35ff 	add.w	r5, r6, #4294967295
 800c45a:	6123      	str	r3, [r4, #16]
 800c45c:	d00c      	beq.n	800c478 <_scanf_float+0x34c>
 800c45e:	2945      	cmp	r1, #69	; 0x45
 800c460:	d00a      	beq.n	800c478 <_scanf_float+0x34c>
 800c462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c466:	463a      	mov	r2, r7
 800c468:	4640      	mov	r0, r8
 800c46a:	4798      	blx	r3
 800c46c:	6923      	ldr	r3, [r4, #16]
 800c46e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c472:	3b01      	subs	r3, #1
 800c474:	1eb5      	subs	r5, r6, #2
 800c476:	6123      	str	r3, [r4, #16]
 800c478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c47c:	463a      	mov	r2, r7
 800c47e:	4640      	mov	r0, r8
 800c480:	4798      	blx	r3
 800c482:	462e      	mov	r6, r5
 800c484:	6825      	ldr	r5, [r4, #0]
 800c486:	f015 0510 	ands.w	r5, r5, #16
 800c48a:	d14d      	bne.n	800c528 <_scanf_float+0x3fc>
 800c48c:	7035      	strb	r5, [r6, #0]
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c498:	d11a      	bne.n	800c4d0 <_scanf_float+0x3a4>
 800c49a:	9b01      	ldr	r3, [sp, #4]
 800c49c:	454b      	cmp	r3, r9
 800c49e:	eba3 0209 	sub.w	r2, r3, r9
 800c4a2:	d122      	bne.n	800c4ea <_scanf_float+0x3be>
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4659      	mov	r1, fp
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	f000 fec3 	bl	800d234 <_strtod_r>
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	6821      	ldr	r1, [r4, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f011 0f02 	tst.w	r1, #2
 800c4b8:	f103 0204 	add.w	r2, r3, #4
 800c4bc:	d020      	beq.n	800c500 <_scanf_float+0x3d4>
 800c4be:	9903      	ldr	r1, [sp, #12]
 800c4c0:	600a      	str	r2, [r1, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	ed83 0b00 	vstr	d0, [r3]
 800c4c8:	68e3      	ldr	r3, [r4, #12]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	60e3      	str	r3, [r4, #12]
 800c4ce:	e66e      	b.n	800c1ae <_scanf_float+0x82>
 800c4d0:	9b04      	ldr	r3, [sp, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0e6      	beq.n	800c4a4 <_scanf_float+0x378>
 800c4d6:	9905      	ldr	r1, [sp, #20]
 800c4d8:	230a      	movs	r3, #10
 800c4da:	462a      	mov	r2, r5
 800c4dc:	3101      	adds	r1, #1
 800c4de:	4640      	mov	r0, r8
 800c4e0:	f000 ff32 	bl	800d348 <_strtol_r>
 800c4e4:	9b04      	ldr	r3, [sp, #16]
 800c4e6:	9e05      	ldr	r6, [sp, #20]
 800c4e8:	1ac2      	subs	r2, r0, r3
 800c4ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c4ee:	429e      	cmp	r6, r3
 800c4f0:	bf28      	it	cs
 800c4f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c4f6:	490d      	ldr	r1, [pc, #52]	; (800c52c <_scanf_float+0x400>)
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f865 	bl	800c5c8 <siprintf>
 800c4fe:	e7d1      	b.n	800c4a4 <_scanf_float+0x378>
 800c500:	f011 0f04 	tst.w	r1, #4
 800c504:	9903      	ldr	r1, [sp, #12]
 800c506:	600a      	str	r2, [r1, #0]
 800c508:	d1db      	bne.n	800c4c2 <_scanf_float+0x396>
 800c50a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c512:	681e      	ldr	r6, [r3, #0]
 800c514:	d705      	bvc.n	800c522 <_scanf_float+0x3f6>
 800c516:	4806      	ldr	r0, [pc, #24]	; (800c530 <_scanf_float+0x404>)
 800c518:	f000 f81c 	bl	800c554 <nanf>
 800c51c:	ed86 0a00 	vstr	s0, [r6]
 800c520:	e7d2      	b.n	800c4c8 <_scanf_float+0x39c>
 800c522:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c526:	e7f9      	b.n	800c51c <_scanf_float+0x3f0>
 800c528:	2500      	movs	r5, #0
 800c52a:	e640      	b.n	800c1ae <_scanf_float+0x82>
 800c52c:	080105cd 	.word	0x080105cd
 800c530:	08010582 	.word	0x08010582

0800c534 <_sbrk_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d06      	ldr	r5, [pc, #24]	; (800c550 <_sbrk_r+0x1c>)
 800c538:	2300      	movs	r3, #0
 800c53a:	4604      	mov	r4, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	602b      	str	r3, [r5, #0]
 800c540:	f7f5 fa60 	bl	8001a04 <_sbrk>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d102      	bne.n	800c54e <_sbrk_r+0x1a>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	b103      	cbz	r3, 800c54e <_sbrk_r+0x1a>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	24000ccc 	.word	0x24000ccc

0800c554 <nanf>:
 800c554:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c55c <nanf+0x8>
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	7fc00000 	.word	0x7fc00000

0800c560 <sniprintf>:
 800c560:	b40c      	push	{r2, r3}
 800c562:	b530      	push	{r4, r5, lr}
 800c564:	4b17      	ldr	r3, [pc, #92]	; (800c5c4 <sniprintf+0x64>)
 800c566:	1e0c      	subs	r4, r1, #0
 800c568:	681d      	ldr	r5, [r3, #0]
 800c56a:	b09d      	sub	sp, #116	; 0x74
 800c56c:	da08      	bge.n	800c580 <sniprintf+0x20>
 800c56e:	238b      	movs	r3, #139	; 0x8b
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	b01d      	add	sp, #116	; 0x74
 800c578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c57c:	b002      	add	sp, #8
 800c57e:	4770      	bx	lr
 800c580:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c584:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c588:	bf14      	ite	ne
 800c58a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c58e:	4623      	moveq	r3, r4
 800c590:	9304      	str	r3, [sp, #16]
 800c592:	9307      	str	r3, [sp, #28]
 800c594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c598:	9002      	str	r0, [sp, #8]
 800c59a:	9006      	str	r0, [sp, #24]
 800c59c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c5a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5a2:	ab21      	add	r3, sp, #132	; 0x84
 800c5a4:	a902      	add	r1, sp, #8
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	f003 f89f 	bl	800f6ec <_svfiprintf_r>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	bfbc      	itt	lt
 800c5b2:	238b      	movlt	r3, #139	; 0x8b
 800c5b4:	602b      	strlt	r3, [r5, #0]
 800c5b6:	2c00      	cmp	r4, #0
 800c5b8:	d0dd      	beq.n	800c576 <sniprintf+0x16>
 800c5ba:	9b02      	ldr	r3, [sp, #8]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	e7d9      	b.n	800c576 <sniprintf+0x16>
 800c5c2:	bf00      	nop
 800c5c4:	240000c0 	.word	0x240000c0

0800c5c8 <siprintf>:
 800c5c8:	b40e      	push	{r1, r2, r3}
 800c5ca:	b500      	push	{lr}
 800c5cc:	b09c      	sub	sp, #112	; 0x70
 800c5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d0:	9002      	str	r0, [sp, #8]
 800c5d2:	9006      	str	r0, [sp, #24]
 800c5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5d8:	4809      	ldr	r0, [pc, #36]	; (800c600 <siprintf+0x38>)
 800c5da:	9107      	str	r1, [sp, #28]
 800c5dc:	9104      	str	r1, [sp, #16]
 800c5de:	4909      	ldr	r1, [pc, #36]	; (800c604 <siprintf+0x3c>)
 800c5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e4:	9105      	str	r1, [sp, #20]
 800c5e6:	6800      	ldr	r0, [r0, #0]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	a902      	add	r1, sp, #8
 800c5ec:	f003 f87e 	bl	800f6ec <_svfiprintf_r>
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	b01c      	add	sp, #112	; 0x70
 800c5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5fc:	b003      	add	sp, #12
 800c5fe:	4770      	bx	lr
 800c600:	240000c0 	.word	0x240000c0
 800c604:	ffff0208 	.word	0xffff0208

0800c608 <strncmp>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	b16a      	cbz	r2, 800c628 <strncmp+0x20>
 800c60c:	3901      	subs	r1, #1
 800c60e:	1884      	adds	r4, r0, r2
 800c610:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c614:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c618:	4293      	cmp	r3, r2
 800c61a:	d103      	bne.n	800c624 <strncmp+0x1c>
 800c61c:	42a0      	cmp	r0, r4
 800c61e:	d001      	beq.n	800c624 <strncmp+0x1c>
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f5      	bne.n	800c610 <strncmp+0x8>
 800c624:	1a98      	subs	r0, r3, r2
 800c626:	bd10      	pop	{r4, pc}
 800c628:	4610      	mov	r0, r2
 800c62a:	e7fc      	b.n	800c626 <strncmp+0x1e>

0800c62c <strncpy>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	3901      	subs	r1, #1
 800c630:	4603      	mov	r3, r0
 800c632:	b132      	cbz	r2, 800c642 <strncpy+0x16>
 800c634:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c638:	f803 4b01 	strb.w	r4, [r3], #1
 800c63c:	3a01      	subs	r2, #1
 800c63e:	2c00      	cmp	r4, #0
 800c640:	d1f7      	bne.n	800c632 <strncpy+0x6>
 800c642:	441a      	add	r2, r3
 800c644:	2100      	movs	r1, #0
 800c646:	4293      	cmp	r3, r2
 800c648:	d100      	bne.n	800c64c <strncpy+0x20>
 800c64a:	bd10      	pop	{r4, pc}
 800c64c:	f803 1b01 	strb.w	r1, [r3], #1
 800c650:	e7f9      	b.n	800c646 <strncpy+0x1a>

0800c652 <sulp>:
 800c652:	b570      	push	{r4, r5, r6, lr}
 800c654:	4604      	mov	r4, r0
 800c656:	460d      	mov	r5, r1
 800c658:	4616      	mov	r6, r2
 800c65a:	ec45 4b10 	vmov	d0, r4, r5
 800c65e:	f002 fe65 	bl	800f32c <__ulp>
 800c662:	b17e      	cbz	r6, 800c684 <sulp+0x32>
 800c664:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c668:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dd09      	ble.n	800c684 <sulp+0x32>
 800c670:	051b      	lsls	r3, r3, #20
 800c672:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c676:	2000      	movs	r0, #0
 800c678:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c67c:	ec41 0b17 	vmov	d7, r0, r1
 800c680:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c684:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c688 <_strtod_l>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	ed2d 8b0c 	vpush	{d8-d13}
 800c690:	b09d      	sub	sp, #116	; 0x74
 800c692:	461f      	mov	r7, r3
 800c694:	2300      	movs	r3, #0
 800c696:	9318      	str	r3, [sp, #96]	; 0x60
 800c698:	4ba6      	ldr	r3, [pc, #664]	; (800c934 <_strtod_l+0x2ac>)
 800c69a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	9308      	str	r3, [sp, #32]
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	468a      	mov	sl, r1
 800c6a6:	f7f3 fe25 	bl	80002f4 <strlen>
 800c6aa:	f04f 0800 	mov.w	r8, #0
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	f04f 0900 	mov.w	r9, #0
 800c6b4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	2a2b      	cmp	r2, #43	; 0x2b
 800c6be:	d04d      	beq.n	800c75c <_strtod_l+0xd4>
 800c6c0:	d83a      	bhi.n	800c738 <_strtod_l+0xb0>
 800c6c2:	2a0d      	cmp	r2, #13
 800c6c4:	d833      	bhi.n	800c72e <_strtod_l+0xa6>
 800c6c6:	2a08      	cmp	r2, #8
 800c6c8:	d833      	bhi.n	800c732 <_strtod_l+0xaa>
 800c6ca:	2a00      	cmp	r2, #0
 800c6cc:	d03d      	beq.n	800c74a <_strtod_l+0xc2>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c6d4:	7833      	ldrb	r3, [r6, #0]
 800c6d6:	2b30      	cmp	r3, #48	; 0x30
 800c6d8:	f040 80b6 	bne.w	800c848 <_strtod_l+0x1c0>
 800c6dc:	7873      	ldrb	r3, [r6, #1]
 800c6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6e2:	2b58      	cmp	r3, #88	; 0x58
 800c6e4:	d16d      	bne.n	800c7c2 <_strtod_l+0x13a>
 800c6e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	ab18      	add	r3, sp, #96	; 0x60
 800c6ec:	9702      	str	r7, [sp, #8]
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	4a91      	ldr	r2, [pc, #580]	; (800c938 <_strtod_l+0x2b0>)
 800c6f2:	ab19      	add	r3, sp, #100	; 0x64
 800c6f4:	a917      	add	r1, sp, #92	; 0x5c
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f001 ff1a 	bl	800e530 <__gethex>
 800c6fc:	f010 0507 	ands.w	r5, r0, #7
 800c700:	4607      	mov	r7, r0
 800c702:	d005      	beq.n	800c710 <_strtod_l+0x88>
 800c704:	2d06      	cmp	r5, #6
 800c706:	d12b      	bne.n	800c760 <_strtod_l+0xd8>
 800c708:	3601      	adds	r6, #1
 800c70a:	2300      	movs	r3, #0
 800c70c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c70e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c712:	2b00      	cmp	r3, #0
 800c714:	f040 856e 	bne.w	800d1f4 <_strtod_l+0xb6c>
 800c718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c71a:	b1e3      	cbz	r3, 800c756 <_strtod_l+0xce>
 800c71c:	ec49 8b17 	vmov	d7, r8, r9
 800c720:	eeb1 0b47 	vneg.f64	d0, d7
 800c724:	b01d      	add	sp, #116	; 0x74
 800c726:	ecbd 8b0c 	vpop	{d8-d13}
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	2a20      	cmp	r2, #32
 800c730:	d1cd      	bne.n	800c6ce <_strtod_l+0x46>
 800c732:	3301      	adds	r3, #1
 800c734:	9317      	str	r3, [sp, #92]	; 0x5c
 800c736:	e7bf      	b.n	800c6b8 <_strtod_l+0x30>
 800c738:	2a2d      	cmp	r2, #45	; 0x2d
 800c73a:	d1c8      	bne.n	800c6ce <_strtod_l+0x46>
 800c73c:	2201      	movs	r2, #1
 800c73e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	9217      	str	r2, [sp, #92]	; 0x5c
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1c3      	bne.n	800c6d2 <_strtod_l+0x4a>
 800c74a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c74c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c750:	2b00      	cmp	r3, #0
 800c752:	f040 854d 	bne.w	800d1f0 <_strtod_l+0xb68>
 800c756:	ec49 8b10 	vmov	d0, r8, r9
 800c75a:	e7e3      	b.n	800c724 <_strtod_l+0x9c>
 800c75c:	2200      	movs	r2, #0
 800c75e:	e7ee      	b.n	800c73e <_strtod_l+0xb6>
 800c760:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c762:	b13a      	cbz	r2, 800c774 <_strtod_l+0xec>
 800c764:	2135      	movs	r1, #53	; 0x35
 800c766:	a81a      	add	r0, sp, #104	; 0x68
 800c768:	f002 feec 	bl	800f544 <__copybits>
 800c76c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c76e:	4620      	mov	r0, r4
 800c770:	f002 fab0 	bl	800ecd4 <_Bfree>
 800c774:	3d01      	subs	r5, #1
 800c776:	2d05      	cmp	r5, #5
 800c778:	d807      	bhi.n	800c78a <_strtod_l+0x102>
 800c77a:	e8df f005 	tbb	[pc, r5]
 800c77e:	0b0e      	.short	0x0b0e
 800c780:	030e1d18 	.word	0x030e1d18
 800c784:	f04f 0900 	mov.w	r9, #0
 800c788:	46c8      	mov	r8, r9
 800c78a:	073b      	lsls	r3, r7, #28
 800c78c:	d5c0      	bpl.n	800c710 <_strtod_l+0x88>
 800c78e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c792:	e7bd      	b.n	800c710 <_strtod_l+0x88>
 800c794:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800c798:	e7f7      	b.n	800c78a <_strtod_l+0x102>
 800c79a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800c79e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c7a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c7a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c7a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c7ac:	e7ed      	b.n	800c78a <_strtod_l+0x102>
 800c7ae:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800c93c <_strtod_l+0x2b4>
 800c7b2:	f04f 0800 	mov.w	r8, #0
 800c7b6:	e7e8      	b.n	800c78a <_strtod_l+0x102>
 800c7b8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c7bc:	f04f 38ff 	mov.w	r8, #4294967295
 800c7c0:	e7e3      	b.n	800c78a <_strtod_l+0x102>
 800c7c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7c8:	785b      	ldrb	r3, [r3, #1]
 800c7ca:	2b30      	cmp	r3, #48	; 0x30
 800c7cc:	d0f9      	beq.n	800c7c2 <_strtod_l+0x13a>
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d09e      	beq.n	800c710 <_strtod_l+0x88>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	9306      	str	r3, [sp, #24]
 800c7d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c7da:	2300      	movs	r3, #0
 800c7dc:	9304      	str	r3, [sp, #16]
 800c7de:	930a      	str	r3, [sp, #40]	; 0x28
 800c7e0:	461e      	mov	r6, r3
 800c7e2:	220a      	movs	r2, #10
 800c7e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c7e6:	f890 b000 	ldrb.w	fp, [r0]
 800c7ea:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800c7ee:	b2d9      	uxtb	r1, r3
 800c7f0:	2909      	cmp	r1, #9
 800c7f2:	d92b      	bls.n	800c84c <_strtod_l+0x1c4>
 800c7f4:	9908      	ldr	r1, [sp, #32]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	f7ff ff06 	bl	800c608 <strncmp>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d035      	beq.n	800c86c <_strtod_l+0x1e4>
 800c800:	2000      	movs	r0, #0
 800c802:	465a      	mov	r2, fp
 800c804:	4633      	mov	r3, r6
 800c806:	4683      	mov	fp, r0
 800c808:	4601      	mov	r1, r0
 800c80a:	2a65      	cmp	r2, #101	; 0x65
 800c80c:	d001      	beq.n	800c812 <_strtod_l+0x18a>
 800c80e:	2a45      	cmp	r2, #69	; 0x45
 800c810:	d118      	bne.n	800c844 <_strtod_l+0x1bc>
 800c812:	b91b      	cbnz	r3, 800c81c <_strtod_l+0x194>
 800c814:	9b06      	ldr	r3, [sp, #24]
 800c816:	4303      	orrs	r3, r0
 800c818:	d097      	beq.n	800c74a <_strtod_l+0xc2>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800c820:	f10a 0201 	add.w	r2, sl, #1
 800c824:	9217      	str	r2, [sp, #92]	; 0x5c
 800c826:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c82a:	2a2b      	cmp	r2, #43	; 0x2b
 800c82c:	d077      	beq.n	800c91e <_strtod_l+0x296>
 800c82e:	2a2d      	cmp	r2, #45	; 0x2d
 800c830:	d07d      	beq.n	800c92e <_strtod_l+0x2a6>
 800c832:	f04f 0e00 	mov.w	lr, #0
 800c836:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c83a:	2d09      	cmp	r5, #9
 800c83c:	f240 8084 	bls.w	800c948 <_strtod_l+0x2c0>
 800c840:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c844:	2500      	movs	r5, #0
 800c846:	e09f      	b.n	800c988 <_strtod_l+0x300>
 800c848:	2300      	movs	r3, #0
 800c84a:	e7c3      	b.n	800c7d4 <_strtod_l+0x14c>
 800c84c:	2e08      	cmp	r6, #8
 800c84e:	bfd5      	itete	le
 800c850:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c852:	9904      	ldrgt	r1, [sp, #16]
 800c854:	fb02 3301 	mlale	r3, r2, r1, r3
 800c858:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c85c:	f100 0001 	add.w	r0, r0, #1
 800c860:	bfd4      	ite	le
 800c862:	930a      	strle	r3, [sp, #40]	; 0x28
 800c864:	9304      	strgt	r3, [sp, #16]
 800c866:	3601      	adds	r6, #1
 800c868:	9017      	str	r0, [sp, #92]	; 0x5c
 800c86a:	e7bb      	b.n	800c7e4 <_strtod_l+0x15c>
 800c86c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c86e:	195a      	adds	r2, r3, r5
 800c870:	9217      	str	r2, [sp, #92]	; 0x5c
 800c872:	5d5a      	ldrb	r2, [r3, r5]
 800c874:	b3ae      	cbz	r6, 800c8e2 <_strtod_l+0x25a>
 800c876:	4683      	mov	fp, r0
 800c878:	4633      	mov	r3, r6
 800c87a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c87e:	2909      	cmp	r1, #9
 800c880:	d912      	bls.n	800c8a8 <_strtod_l+0x220>
 800c882:	2101      	movs	r1, #1
 800c884:	e7c1      	b.n	800c80a <_strtod_l+0x182>
 800c886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	9217      	str	r2, [sp, #92]	; 0x5c
 800c88c:	785a      	ldrb	r2, [r3, #1]
 800c88e:	3001      	adds	r0, #1
 800c890:	2a30      	cmp	r2, #48	; 0x30
 800c892:	d0f8      	beq.n	800c886 <_strtod_l+0x1fe>
 800c894:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c898:	2b08      	cmp	r3, #8
 800c89a:	f200 84b0 	bhi.w	800d1fe <_strtod_l+0xb76>
 800c89e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c8a2:	4683      	mov	fp, r0
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	3a30      	subs	r2, #48	; 0x30
 800c8aa:	f100 0101 	add.w	r1, r0, #1
 800c8ae:	d012      	beq.n	800c8d6 <_strtod_l+0x24e>
 800c8b0:	448b      	add	fp, r1
 800c8b2:	eb00 0c03 	add.w	ip, r0, r3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	250a      	movs	r5, #10
 800c8ba:	4561      	cmp	r1, ip
 800c8bc:	d113      	bne.n	800c8e6 <_strtod_l+0x25e>
 800c8be:	1819      	adds	r1, r3, r0
 800c8c0:	2908      	cmp	r1, #8
 800c8c2:	f103 0301 	add.w	r3, r3, #1
 800c8c6:	4403      	add	r3, r0
 800c8c8:	dc1d      	bgt.n	800c906 <_strtod_l+0x27e>
 800c8ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8cc:	210a      	movs	r1, #10
 800c8ce:	fb01 2200 	mla	r2, r1, r0, r2
 800c8d2:	920a      	str	r2, [sp, #40]	; 0x28
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8d8:	1c50      	adds	r0, r2, #1
 800c8da:	9017      	str	r0, [sp, #92]	; 0x5c
 800c8dc:	7852      	ldrb	r2, [r2, #1]
 800c8de:	4608      	mov	r0, r1
 800c8e0:	e7cb      	b.n	800c87a <_strtod_l+0x1f2>
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	e7d4      	b.n	800c890 <_strtod_l+0x208>
 800c8e6:	2908      	cmp	r1, #8
 800c8e8:	dc04      	bgt.n	800c8f4 <_strtod_l+0x26c>
 800c8ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c8ec:	436f      	muls	r7, r5
 800c8ee:	970a      	str	r7, [sp, #40]	; 0x28
 800c8f0:	3101      	adds	r1, #1
 800c8f2:	e7e2      	b.n	800c8ba <_strtod_l+0x232>
 800c8f4:	f101 0e01 	add.w	lr, r1, #1
 800c8f8:	f1be 0f10 	cmp.w	lr, #16
 800c8fc:	bfde      	ittt	le
 800c8fe:	9f04      	ldrle	r7, [sp, #16]
 800c900:	436f      	mulle	r7, r5
 800c902:	9704      	strle	r7, [sp, #16]
 800c904:	e7f4      	b.n	800c8f0 <_strtod_l+0x268>
 800c906:	2b10      	cmp	r3, #16
 800c908:	bfdf      	itttt	le
 800c90a:	9804      	ldrle	r0, [sp, #16]
 800c90c:	210a      	movle	r1, #10
 800c90e:	fb01 2200 	mlale	r2, r1, r0, r2
 800c912:	9204      	strle	r2, [sp, #16]
 800c914:	e7de      	b.n	800c8d4 <_strtod_l+0x24c>
 800c916:	f04f 0b00 	mov.w	fp, #0
 800c91a:	2101      	movs	r1, #1
 800c91c:	e77a      	b.n	800c814 <_strtod_l+0x18c>
 800c91e:	f04f 0e00 	mov.w	lr, #0
 800c922:	f10a 0202 	add.w	r2, sl, #2
 800c926:	9217      	str	r2, [sp, #92]	; 0x5c
 800c928:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c92c:	e783      	b.n	800c836 <_strtod_l+0x1ae>
 800c92e:	f04f 0e01 	mov.w	lr, #1
 800c932:	e7f6      	b.n	800c922 <_strtod_l+0x29a>
 800c934:	0801088c 	.word	0x0801088c
 800c938:	080105d4 	.word	0x080105d4
 800c93c:	7ff00000 	.word	0x7ff00000
 800c940:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c942:	1c55      	adds	r5, r2, #1
 800c944:	9517      	str	r5, [sp, #92]	; 0x5c
 800c946:	7852      	ldrb	r2, [r2, #1]
 800c948:	2a30      	cmp	r2, #48	; 0x30
 800c94a:	d0f9      	beq.n	800c940 <_strtod_l+0x2b8>
 800c94c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c950:	2d08      	cmp	r5, #8
 800c952:	f63f af77 	bhi.w	800c844 <_strtod_l+0x1bc>
 800c956:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c95a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c95c:	9208      	str	r2, [sp, #32]
 800c95e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c960:	1c55      	adds	r5, r2, #1
 800c962:	9517      	str	r5, [sp, #92]	; 0x5c
 800c964:	7852      	ldrb	r2, [r2, #1]
 800c966:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c96a:	2f09      	cmp	r7, #9
 800c96c:	d937      	bls.n	800c9de <_strtod_l+0x356>
 800c96e:	9f08      	ldr	r7, [sp, #32]
 800c970:	1bed      	subs	r5, r5, r7
 800c972:	2d08      	cmp	r5, #8
 800c974:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c978:	dc02      	bgt.n	800c980 <_strtod_l+0x2f8>
 800c97a:	4565      	cmp	r5, ip
 800c97c:	bfa8      	it	ge
 800c97e:	4665      	movge	r5, ip
 800c980:	f1be 0f00 	cmp.w	lr, #0
 800c984:	d000      	beq.n	800c988 <_strtod_l+0x300>
 800c986:	426d      	negs	r5, r5
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d14f      	bne.n	800ca2c <_strtod_l+0x3a4>
 800c98c:	9b06      	ldr	r3, [sp, #24]
 800c98e:	4303      	orrs	r3, r0
 800c990:	f47f aebe 	bne.w	800c710 <_strtod_l+0x88>
 800c994:	2900      	cmp	r1, #0
 800c996:	f47f aed8 	bne.w	800c74a <_strtod_l+0xc2>
 800c99a:	2a69      	cmp	r2, #105	; 0x69
 800c99c:	d027      	beq.n	800c9ee <_strtod_l+0x366>
 800c99e:	dc24      	bgt.n	800c9ea <_strtod_l+0x362>
 800c9a0:	2a49      	cmp	r2, #73	; 0x49
 800c9a2:	d024      	beq.n	800c9ee <_strtod_l+0x366>
 800c9a4:	2a4e      	cmp	r2, #78	; 0x4e
 800c9a6:	f47f aed0 	bne.w	800c74a <_strtod_l+0xc2>
 800c9aa:	499b      	ldr	r1, [pc, #620]	; (800cc18 <_strtod_l+0x590>)
 800c9ac:	a817      	add	r0, sp, #92	; 0x5c
 800c9ae:	f002 f817 	bl	800e9e0 <__match>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f43f aec9 	beq.w	800c74a <_strtod_l+0xc2>
 800c9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b28      	cmp	r3, #40	; 0x28
 800c9be:	d12d      	bne.n	800ca1c <_strtod_l+0x394>
 800c9c0:	4996      	ldr	r1, [pc, #600]	; (800cc1c <_strtod_l+0x594>)
 800c9c2:	aa1a      	add	r2, sp, #104	; 0x68
 800c9c4:	a817      	add	r0, sp, #92	; 0x5c
 800c9c6:	f002 f81f 	bl	800ea08 <__hexnan>
 800c9ca:	2805      	cmp	r0, #5
 800c9cc:	d126      	bne.n	800ca1c <_strtod_l+0x394>
 800c9ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c9d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c9d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c9dc:	e698      	b.n	800c710 <_strtod_l+0x88>
 800c9de:	250a      	movs	r5, #10
 800c9e0:	fb05 250c 	mla	r5, r5, ip, r2
 800c9e4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c9e8:	e7b9      	b.n	800c95e <_strtod_l+0x2d6>
 800c9ea:	2a6e      	cmp	r2, #110	; 0x6e
 800c9ec:	e7db      	b.n	800c9a6 <_strtod_l+0x31e>
 800c9ee:	498c      	ldr	r1, [pc, #560]	; (800cc20 <_strtod_l+0x598>)
 800c9f0:	a817      	add	r0, sp, #92	; 0x5c
 800c9f2:	f001 fff5 	bl	800e9e0 <__match>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	f43f aea7 	beq.w	800c74a <_strtod_l+0xc2>
 800c9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9fe:	4989      	ldr	r1, [pc, #548]	; (800cc24 <_strtod_l+0x59c>)
 800ca00:	3b01      	subs	r3, #1
 800ca02:	a817      	add	r0, sp, #92	; 0x5c
 800ca04:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca06:	f001 ffeb 	bl	800e9e0 <__match>
 800ca0a:	b910      	cbnz	r0, 800ca12 <_strtod_l+0x38a>
 800ca0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca0e:	3301      	adds	r3, #1
 800ca10:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca12:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800cc38 <_strtod_l+0x5b0>
 800ca16:	f04f 0800 	mov.w	r8, #0
 800ca1a:	e679      	b.n	800c710 <_strtod_l+0x88>
 800ca1c:	4882      	ldr	r0, [pc, #520]	; (800cc28 <_strtod_l+0x5a0>)
 800ca1e:	f002 ff67 	bl	800f8f0 <nan>
 800ca22:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ca26:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ca2a:	e671      	b.n	800c710 <_strtod_l+0x88>
 800ca2c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800ca30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ca34:	eba5 020b 	sub.w	r2, r5, fp
 800ca38:	2e00      	cmp	r6, #0
 800ca3a:	bf08      	it	eq
 800ca3c:	461e      	moveq	r6, r3
 800ca3e:	2b10      	cmp	r3, #16
 800ca40:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca44:	9206      	str	r2, [sp, #24]
 800ca46:	461a      	mov	r2, r3
 800ca48:	bfa8      	it	ge
 800ca4a:	2210      	movge	r2, #16
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800ca52:	dd0e      	ble.n	800ca72 <_strtod_l+0x3ea>
 800ca54:	4975      	ldr	r1, [pc, #468]	; (800cc2c <_strtod_l+0x5a4>)
 800ca56:	eddd 7a04 	vldr	s15, [sp, #16]
 800ca5a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ca5e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800ca62:	ed9d 5b08 	vldr	d5, [sp, #32]
 800ca66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ca6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ca6e:	ec59 8b17 	vmov	r8, r9, d7
 800ca72:	2b0f      	cmp	r3, #15
 800ca74:	dc37      	bgt.n	800cae6 <_strtod_l+0x45e>
 800ca76:	9906      	ldr	r1, [sp, #24]
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	f43f ae49 	beq.w	800c710 <_strtod_l+0x88>
 800ca7e:	dd23      	ble.n	800cac8 <_strtod_l+0x440>
 800ca80:	2916      	cmp	r1, #22
 800ca82:	dc0b      	bgt.n	800ca9c <_strtod_l+0x414>
 800ca84:	4b69      	ldr	r3, [pc, #420]	; (800cc2c <_strtod_l+0x5a4>)
 800ca86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ca8a:	ed93 7b00 	vldr	d7, [r3]
 800ca8e:	ec49 8b16 	vmov	d6, r8, r9
 800ca92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca96:	ec59 8b17 	vmov	r8, r9, d7
 800ca9a:	e639      	b.n	800c710 <_strtod_l+0x88>
 800ca9c:	9806      	ldr	r0, [sp, #24]
 800ca9e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800caa2:	4281      	cmp	r1, r0
 800caa4:	db1f      	blt.n	800cae6 <_strtod_l+0x45e>
 800caa6:	4a61      	ldr	r2, [pc, #388]	; (800cc2c <_strtod_l+0x5a4>)
 800caa8:	f1c3 030f 	rsb	r3, r3, #15
 800caac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800cab0:	ed91 7b00 	vldr	d7, [r1]
 800cab4:	ec49 8b16 	vmov	d6, r8, r9
 800cab8:	1ac3      	subs	r3, r0, r3
 800caba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cabe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cac2:	ed92 6b00 	vldr	d6, [r2]
 800cac6:	e7e4      	b.n	800ca92 <_strtod_l+0x40a>
 800cac8:	9906      	ldr	r1, [sp, #24]
 800caca:	3116      	adds	r1, #22
 800cacc:	db0b      	blt.n	800cae6 <_strtod_l+0x45e>
 800cace:	4b57      	ldr	r3, [pc, #348]	; (800cc2c <_strtod_l+0x5a4>)
 800cad0:	ebab 0505 	sub.w	r5, fp, r5
 800cad4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cad8:	ed95 7b00 	vldr	d7, [r5]
 800cadc:	ec49 8b16 	vmov	d6, r8, r9
 800cae0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cae4:	e7d7      	b.n	800ca96 <_strtod_l+0x40e>
 800cae6:	9906      	ldr	r1, [sp, #24]
 800cae8:	1a9a      	subs	r2, r3, r2
 800caea:	440a      	add	r2, r1
 800caec:	2a00      	cmp	r2, #0
 800caee:	dd74      	ble.n	800cbda <_strtod_l+0x552>
 800caf0:	f012 000f 	ands.w	r0, r2, #15
 800caf4:	d00a      	beq.n	800cb0c <_strtod_l+0x484>
 800caf6:	494d      	ldr	r1, [pc, #308]	; (800cc2c <_strtod_l+0x5a4>)
 800caf8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cafc:	ed91 7b00 	vldr	d7, [r1]
 800cb00:	ec49 8b16 	vmov	d6, r8, r9
 800cb04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb08:	ec59 8b17 	vmov	r8, r9, d7
 800cb0c:	f032 020f 	bics.w	r2, r2, #15
 800cb10:	d04f      	beq.n	800cbb2 <_strtod_l+0x52a>
 800cb12:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800cb16:	dd22      	ble.n	800cb5e <_strtod_l+0x4d6>
 800cb18:	2500      	movs	r5, #0
 800cb1a:	462e      	mov	r6, r5
 800cb1c:	950a      	str	r5, [sp, #40]	; 0x28
 800cb1e:	462f      	mov	r7, r5
 800cb20:	2322      	movs	r3, #34	; 0x22
 800cb22:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800cc38 <_strtod_l+0x5b0>
 800cb26:	6023      	str	r3, [r4, #0]
 800cb28:	f04f 0800 	mov.w	r8, #0
 800cb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f43f adee 	beq.w	800c710 <_strtod_l+0x88>
 800cb34:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb36:	4620      	mov	r0, r4
 800cb38:	f002 f8cc 	bl	800ecd4 <_Bfree>
 800cb3c:	4639      	mov	r1, r7
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f002 f8c8 	bl	800ecd4 <_Bfree>
 800cb44:	4631      	mov	r1, r6
 800cb46:	4620      	mov	r0, r4
 800cb48:	f002 f8c4 	bl	800ecd4 <_Bfree>
 800cb4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f002 f8c0 	bl	800ecd4 <_Bfree>
 800cb54:	4629      	mov	r1, r5
 800cb56:	4620      	mov	r0, r4
 800cb58:	f002 f8bc 	bl	800ecd4 <_Bfree>
 800cb5c:	e5d8      	b.n	800c710 <_strtod_l+0x88>
 800cb5e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800cb62:	2000      	movs	r0, #0
 800cb64:	4f32      	ldr	r7, [pc, #200]	; (800cc30 <_strtod_l+0x5a8>)
 800cb66:	1112      	asrs	r2, r2, #4
 800cb68:	4601      	mov	r1, r0
 800cb6a:	2a01      	cmp	r2, #1
 800cb6c:	dc24      	bgt.n	800cbb8 <_strtod_l+0x530>
 800cb6e:	b108      	cbz	r0, 800cb74 <_strtod_l+0x4ec>
 800cb70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cb74:	4a2e      	ldr	r2, [pc, #184]	; (800cc30 <_strtod_l+0x5a8>)
 800cb76:	482f      	ldr	r0, [pc, #188]	; (800cc34 <_strtod_l+0x5ac>)
 800cb78:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800cb7c:	ed91 7b00 	vldr	d7, [r1]
 800cb80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cb84:	ec49 8b16 	vmov	d6, r8, r9
 800cb88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb90:	9905      	ldr	r1, [sp, #20]
 800cb92:	4a29      	ldr	r2, [pc, #164]	; (800cc38 <_strtod_l+0x5b0>)
 800cb94:	400a      	ands	r2, r1
 800cb96:	4282      	cmp	r2, r0
 800cb98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cb9c:	d8bc      	bhi.n	800cb18 <_strtod_l+0x490>
 800cb9e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800cba2:	4282      	cmp	r2, r0
 800cba4:	bf86      	itte	hi
 800cba6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800cc3c <_strtod_l+0x5b4>
 800cbaa:	f04f 38ff 	movhi.w	r8, #4294967295
 800cbae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	9204      	str	r2, [sp, #16]
 800cbb6:	e07f      	b.n	800ccb8 <_strtod_l+0x630>
 800cbb8:	f012 0f01 	tst.w	r2, #1
 800cbbc:	d00a      	beq.n	800cbd4 <_strtod_l+0x54c>
 800cbbe:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800cbc2:	ed90 7b00 	vldr	d7, [r0]
 800cbc6:	ed9d 6b04 	vldr	d6, [sp, #16]
 800cbca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cbce:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	3101      	adds	r1, #1
 800cbd6:	1052      	asrs	r2, r2, #1
 800cbd8:	e7c7      	b.n	800cb6a <_strtod_l+0x4e2>
 800cbda:	d0ea      	beq.n	800cbb2 <_strtod_l+0x52a>
 800cbdc:	4252      	negs	r2, r2
 800cbde:	f012 000f 	ands.w	r0, r2, #15
 800cbe2:	d00a      	beq.n	800cbfa <_strtod_l+0x572>
 800cbe4:	4911      	ldr	r1, [pc, #68]	; (800cc2c <_strtod_l+0x5a4>)
 800cbe6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cbea:	ed91 7b00 	vldr	d7, [r1]
 800cbee:	ec49 8b16 	vmov	d6, r8, r9
 800cbf2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cbf6:	ec59 8b17 	vmov	r8, r9, d7
 800cbfa:	1112      	asrs	r2, r2, #4
 800cbfc:	d0d9      	beq.n	800cbb2 <_strtod_l+0x52a>
 800cbfe:	2a1f      	cmp	r2, #31
 800cc00:	dd1e      	ble.n	800cc40 <_strtod_l+0x5b8>
 800cc02:	2500      	movs	r5, #0
 800cc04:	462e      	mov	r6, r5
 800cc06:	950a      	str	r5, [sp, #40]	; 0x28
 800cc08:	462f      	mov	r7, r5
 800cc0a:	2322      	movs	r3, #34	; 0x22
 800cc0c:	f04f 0800 	mov.w	r8, #0
 800cc10:	f04f 0900 	mov.w	r9, #0
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	e789      	b.n	800cb2c <_strtod_l+0x4a4>
 800cc18:	080105a6 	.word	0x080105a6
 800cc1c:	080105e8 	.word	0x080105e8
 800cc20:	0801059e 	.word	0x0801059e
 800cc24:	0801072c 	.word	0x0801072c
 800cc28:	08010582 	.word	0x08010582
 800cc2c:	08010928 	.word	0x08010928
 800cc30:	08010900 	.word	0x08010900
 800cc34:	7ca00000 	.word	0x7ca00000
 800cc38:	7ff00000 	.word	0x7ff00000
 800cc3c:	7fefffff 	.word	0x7fefffff
 800cc40:	f012 0110 	ands.w	r1, r2, #16
 800cc44:	bf18      	it	ne
 800cc46:	216a      	movne	r1, #106	; 0x6a
 800cc48:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800cc4c:	9104      	str	r1, [sp, #16]
 800cc4e:	49c0      	ldr	r1, [pc, #768]	; (800cf50 <_strtod_l+0x8c8>)
 800cc50:	2000      	movs	r0, #0
 800cc52:	07d7      	lsls	r7, r2, #31
 800cc54:	d508      	bpl.n	800cc68 <_strtod_l+0x5e0>
 800cc56:	ed9d 6b08 	vldr	d6, [sp, #32]
 800cc5a:	ed91 7b00 	vldr	d7, [r1]
 800cc5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cc62:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cc66:	2001      	movs	r0, #1
 800cc68:	1052      	asrs	r2, r2, #1
 800cc6a:	f101 0108 	add.w	r1, r1, #8
 800cc6e:	d1f0      	bne.n	800cc52 <_strtod_l+0x5ca>
 800cc70:	b108      	cbz	r0, 800cc76 <_strtod_l+0x5ee>
 800cc72:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800cc76:	9a04      	ldr	r2, [sp, #16]
 800cc78:	b1ba      	cbz	r2, 800ccaa <_strtod_l+0x622>
 800cc7a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cc7e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	4649      	mov	r1, r9
 800cc86:	dd10      	ble.n	800ccaa <_strtod_l+0x622>
 800cc88:	2a1f      	cmp	r2, #31
 800cc8a:	f340 8132 	ble.w	800cef2 <_strtod_l+0x86a>
 800cc8e:	2a34      	cmp	r2, #52	; 0x34
 800cc90:	bfde      	ittt	le
 800cc92:	3a20      	suble	r2, #32
 800cc94:	f04f 30ff 	movle.w	r0, #4294967295
 800cc98:	fa00 f202 	lslle.w	r2, r0, r2
 800cc9c:	f04f 0800 	mov.w	r8, #0
 800cca0:	bfcc      	ite	gt
 800cca2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cca6:	ea02 0901 	andle.w	r9, r2, r1
 800ccaa:	ec49 8b17 	vmov	d7, r8, r9
 800ccae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb6:	d0a4      	beq.n	800cc02 <_strtod_l+0x57a>
 800ccb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccba:	9200      	str	r2, [sp, #0]
 800ccbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f002 f873 	bl	800edac <__s2b>
 800ccc6:	900a      	str	r0, [sp, #40]	; 0x28
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	f43f af25 	beq.w	800cb18 <_strtod_l+0x490>
 800ccce:	9b06      	ldr	r3, [sp, #24]
 800ccd0:	ebab 0505 	sub.w	r5, fp, r5
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfb4      	ite	lt
 800ccd8:	462b      	movlt	r3, r5
 800ccda:	2300      	movge	r3, #0
 800ccdc:	930c      	str	r3, [sp, #48]	; 0x30
 800ccde:	9b06      	ldr	r3, [sp, #24]
 800cce0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800cf38 <_strtod_l+0x8b0>
 800cce4:	ed9f ab96 	vldr	d10, [pc, #600]	; 800cf40 <_strtod_l+0x8b8>
 800cce8:	ed9f bb97 	vldr	d11, [pc, #604]	; 800cf48 <_strtod_l+0x8c0>
 800ccec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccf0:	2500      	movs	r5, #0
 800ccf2:	9312      	str	r3, [sp, #72]	; 0x48
 800ccf4:	462e      	mov	r6, r5
 800ccf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	6859      	ldr	r1, [r3, #4]
 800ccfc:	f001 ffaa 	bl	800ec54 <_Balloc>
 800cd00:	4607      	mov	r7, r0
 800cd02:	2800      	cmp	r0, #0
 800cd04:	f43f af0c 	beq.w	800cb20 <_strtod_l+0x498>
 800cd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd0a:	691a      	ldr	r2, [r3, #16]
 800cd0c:	3202      	adds	r2, #2
 800cd0e:	f103 010c 	add.w	r1, r3, #12
 800cd12:	0092      	lsls	r2, r2, #2
 800cd14:	300c      	adds	r0, #12
 800cd16:	f7fe fb91 	bl	800b43c <memcpy>
 800cd1a:	ec49 8b10 	vmov	d0, r8, r9
 800cd1e:	aa1a      	add	r2, sp, #104	; 0x68
 800cd20:	a919      	add	r1, sp, #100	; 0x64
 800cd22:	4620      	mov	r0, r4
 800cd24:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800cd28:	f002 fb7c 	bl	800f424 <__d2b>
 800cd2c:	9018      	str	r0, [sp, #96]	; 0x60
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f43f aef6 	beq.w	800cb20 <_strtod_l+0x498>
 800cd34:	2101      	movs	r1, #1
 800cd36:	4620      	mov	r0, r4
 800cd38:	f002 f8d2 	bl	800eee0 <__i2b>
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f43f aeee 	beq.w	800cb20 <_strtod_l+0x498>
 800cd44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd46:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bfab      	itete	ge
 800cd4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cd4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cd50:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800cd54:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800cd58:	bfac      	ite	ge
 800cd5a:	eb03 0b02 	addge.w	fp, r3, r2
 800cd5e:	eba2 0a03 	sublt.w	sl, r2, r3
 800cd62:	9a04      	ldr	r2, [sp, #16]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	440b      	add	r3, r1
 800cd68:	4a7a      	ldr	r2, [pc, #488]	; (800cf54 <_strtod_l+0x8cc>)
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800cd72:	f280 80d1 	bge.w	800cf18 <_strtod_l+0x890>
 800cd76:	1ad2      	subs	r2, r2, r3
 800cd78:	2a1f      	cmp	r2, #31
 800cd7a:	eba1 0102 	sub.w	r1, r1, r2
 800cd7e:	f04f 0001 	mov.w	r0, #1
 800cd82:	f300 80bd 	bgt.w	800cf00 <_strtod_l+0x878>
 800cd86:	fa00 f302 	lsl.w	r3, r0, r2
 800cd8a:	930e      	str	r3, [sp, #56]	; 0x38
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	930d      	str	r3, [sp, #52]	; 0x34
 800cd90:	eb0b 0301 	add.w	r3, fp, r1
 800cd94:	9a04      	ldr	r2, [sp, #16]
 800cd96:	459b      	cmp	fp, r3
 800cd98:	448a      	add	sl, r1
 800cd9a:	4492      	add	sl, r2
 800cd9c:	465a      	mov	r2, fp
 800cd9e:	bfa8      	it	ge
 800cda0:	461a      	movge	r2, r3
 800cda2:	4552      	cmp	r2, sl
 800cda4:	bfa8      	it	ge
 800cda6:	4652      	movge	r2, sl
 800cda8:	2a00      	cmp	r2, #0
 800cdaa:	bfc2      	ittt	gt
 800cdac:	1a9b      	subgt	r3, r3, r2
 800cdae:	ebaa 0a02 	subgt.w	sl, sl, r2
 800cdb2:	ebab 0b02 	subgt.w	fp, fp, r2
 800cdb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdb8:	2a00      	cmp	r2, #0
 800cdba:	dd18      	ble.n	800cdee <_strtod_l+0x766>
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	9315      	str	r3, [sp, #84]	; 0x54
 800cdc2:	f002 f949 	bl	800f058 <__pow5mult>
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f aea9 	beq.w	800cb20 <_strtod_l+0x498>
 800cdce:	4601      	mov	r1, r0
 800cdd0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f002 f89a 	bl	800ef0c <__multiply>
 800cdd8:	9014      	str	r0, [sp, #80]	; 0x50
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f43f aea0 	beq.w	800cb20 <_strtod_l+0x498>
 800cde0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cde2:	4620      	mov	r0, r4
 800cde4:	f001 ff76 	bl	800ecd4 <_Bfree>
 800cde8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdec:	9218      	str	r2, [sp, #96]	; 0x60
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f300 8097 	bgt.w	800cf22 <_strtod_l+0x89a>
 800cdf4:	9b06      	ldr	r3, [sp, #24]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dd08      	ble.n	800ce0c <_strtod_l+0x784>
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f002 f92a 	bl	800f058 <__pow5mult>
 800ce04:	4607      	mov	r7, r0
 800ce06:	2800      	cmp	r0, #0
 800ce08:	f43f ae8a 	beq.w	800cb20 <_strtod_l+0x498>
 800ce0c:	f1ba 0f00 	cmp.w	sl, #0
 800ce10:	dd08      	ble.n	800ce24 <_strtod_l+0x79c>
 800ce12:	4639      	mov	r1, r7
 800ce14:	4652      	mov	r2, sl
 800ce16:	4620      	mov	r0, r4
 800ce18:	f002 f978 	bl	800f10c <__lshift>
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	f43f ae7e 	beq.w	800cb20 <_strtod_l+0x498>
 800ce24:	f1bb 0f00 	cmp.w	fp, #0
 800ce28:	dd08      	ble.n	800ce3c <_strtod_l+0x7b4>
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	465a      	mov	r2, fp
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f002 f96c 	bl	800f10c <__lshift>
 800ce34:	4606      	mov	r6, r0
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f43f ae72 	beq.w	800cb20 <_strtod_l+0x498>
 800ce3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce3e:	463a      	mov	r2, r7
 800ce40:	4620      	mov	r0, r4
 800ce42:	f002 f9eb 	bl	800f21c <__mdiff>
 800ce46:	4605      	mov	r5, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	f43f ae69 	beq.w	800cb20 <_strtod_l+0x498>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ce54:	60c3      	str	r3, [r0, #12]
 800ce56:	4631      	mov	r1, r6
 800ce58:	f002 f9c4 	bl	800f1e4 <__mcmp>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	da7f      	bge.n	800cf60 <_strtod_l+0x8d8>
 800ce60:	ea5a 0308 	orrs.w	r3, sl, r8
 800ce64:	f040 80a5 	bne.w	800cfb2 <_strtod_l+0x92a>
 800ce68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f040 80a0 	bne.w	800cfb2 <_strtod_l+0x92a>
 800ce72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce76:	0d1b      	lsrs	r3, r3, #20
 800ce78:	051b      	lsls	r3, r3, #20
 800ce7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce7e:	f240 8098 	bls.w	800cfb2 <_strtod_l+0x92a>
 800ce82:	696b      	ldr	r3, [r5, #20]
 800ce84:	b91b      	cbnz	r3, 800ce8e <_strtod_l+0x806>
 800ce86:	692b      	ldr	r3, [r5, #16]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	f340 8092 	ble.w	800cfb2 <_strtod_l+0x92a>
 800ce8e:	4629      	mov	r1, r5
 800ce90:	2201      	movs	r2, #1
 800ce92:	4620      	mov	r0, r4
 800ce94:	f002 f93a 	bl	800f10c <__lshift>
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	f002 f9a2 	bl	800f1e4 <__mcmp>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f340 8086 	ble.w	800cfb2 <_strtod_l+0x92a>
 800cea6:	9904      	ldr	r1, [sp, #16]
 800cea8:	4a2b      	ldr	r2, [pc, #172]	; (800cf58 <_strtod_l+0x8d0>)
 800ceaa:	464b      	mov	r3, r9
 800ceac:	2900      	cmp	r1, #0
 800ceae:	f000 80a1 	beq.w	800cff4 <_strtod_l+0x96c>
 800ceb2:	ea02 0109 	and.w	r1, r2, r9
 800ceb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ceba:	f300 809b 	bgt.w	800cff4 <_strtod_l+0x96c>
 800cebe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cec2:	f77f aea2 	ble.w	800cc0a <_strtod_l+0x582>
 800cec6:	4a25      	ldr	r2, [pc, #148]	; (800cf5c <_strtod_l+0x8d4>)
 800cec8:	2300      	movs	r3, #0
 800ceca:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800cece:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800ced2:	ec49 8b17 	vmov	d7, r8, r9
 800ced6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ceda:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cede:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	bf08      	it	eq
 800cee6:	2322      	moveq	r3, #34	; 0x22
 800cee8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ceec:	bf08      	it	eq
 800ceee:	6023      	streq	r3, [r4, #0]
 800cef0:	e620      	b.n	800cb34 <_strtod_l+0x4ac>
 800cef2:	f04f 31ff 	mov.w	r1, #4294967295
 800cef6:	fa01 f202 	lsl.w	r2, r1, r2
 800cefa:	ea02 0808 	and.w	r8, r2, r8
 800cefe:	e6d4      	b.n	800ccaa <_strtod_l+0x622>
 800cf00:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cf04:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cf08:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cf0c:	33e2      	adds	r3, #226	; 0xe2
 800cf0e:	fa00 f303 	lsl.w	r3, r0, r3
 800cf12:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800cf16:	e73b      	b.n	800cd90 <_strtod_l+0x708>
 800cf18:	2000      	movs	r0, #0
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800cf20:	e736      	b.n	800cd90 <_strtod_l+0x708>
 800cf22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf24:	461a      	mov	r2, r3
 800cf26:	4620      	mov	r0, r4
 800cf28:	f002 f8f0 	bl	800f10c <__lshift>
 800cf2c:	9018      	str	r0, [sp, #96]	; 0x60
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f47f af60 	bne.w	800cdf4 <_strtod_l+0x76c>
 800cf34:	e5f4      	b.n	800cb20 <_strtod_l+0x498>
 800cf36:	bf00      	nop
 800cf38:	94a03595 	.word	0x94a03595
 800cf3c:	3fcfffff 	.word	0x3fcfffff
 800cf40:	94a03595 	.word	0x94a03595
 800cf44:	3fdfffff 	.word	0x3fdfffff
 800cf48:	35afe535 	.word	0x35afe535
 800cf4c:	3fe00000 	.word	0x3fe00000
 800cf50:	08010600 	.word	0x08010600
 800cf54:	fffffc02 	.word	0xfffffc02
 800cf58:	7ff00000 	.word	0x7ff00000
 800cf5c:	39500000 	.word	0x39500000
 800cf60:	46cb      	mov	fp, r9
 800cf62:	d165      	bne.n	800d030 <_strtod_l+0x9a8>
 800cf64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf68:	f1ba 0f00 	cmp.w	sl, #0
 800cf6c:	d02a      	beq.n	800cfc4 <_strtod_l+0x93c>
 800cf6e:	4aaa      	ldr	r2, [pc, #680]	; (800d218 <_strtod_l+0xb90>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d12b      	bne.n	800cfcc <_strtod_l+0x944>
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	4641      	mov	r1, r8
 800cf78:	b1fb      	cbz	r3, 800cfba <_strtod_l+0x932>
 800cf7a:	4aa8      	ldr	r2, [pc, #672]	; (800d21c <_strtod_l+0xb94>)
 800cf7c:	ea09 0202 	and.w	r2, r9, r2
 800cf80:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cf84:	f04f 30ff 	mov.w	r0, #4294967295
 800cf88:	d81a      	bhi.n	800cfc0 <_strtod_l+0x938>
 800cf8a:	0d12      	lsrs	r2, r2, #20
 800cf8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cf90:	fa00 f303 	lsl.w	r3, r0, r3
 800cf94:	4299      	cmp	r1, r3
 800cf96:	d119      	bne.n	800cfcc <_strtod_l+0x944>
 800cf98:	4ba1      	ldr	r3, [pc, #644]	; (800d220 <_strtod_l+0xb98>)
 800cf9a:	459b      	cmp	fp, r3
 800cf9c:	d102      	bne.n	800cfa4 <_strtod_l+0x91c>
 800cf9e:	3101      	adds	r1, #1
 800cfa0:	f43f adbe 	beq.w	800cb20 <_strtod_l+0x498>
 800cfa4:	4b9d      	ldr	r3, [pc, #628]	; (800d21c <_strtod_l+0xb94>)
 800cfa6:	ea0b 0303 	and.w	r3, fp, r3
 800cfaa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cfae:	f04f 0800 	mov.w	r8, #0
 800cfb2:	9b04      	ldr	r3, [sp, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d186      	bne.n	800cec6 <_strtod_l+0x83e>
 800cfb8:	e5bc      	b.n	800cb34 <_strtod_l+0x4ac>
 800cfba:	f04f 33ff 	mov.w	r3, #4294967295
 800cfbe:	e7e9      	b.n	800cf94 <_strtod_l+0x90c>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	e7e7      	b.n	800cf94 <_strtod_l+0x90c>
 800cfc4:	ea53 0308 	orrs.w	r3, r3, r8
 800cfc8:	f43f af6d 	beq.w	800cea6 <_strtod_l+0x81e>
 800cfcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfce:	b1db      	cbz	r3, 800d008 <_strtod_l+0x980>
 800cfd0:	ea13 0f0b 	tst.w	r3, fp
 800cfd4:	d0ed      	beq.n	800cfb2 <_strtod_l+0x92a>
 800cfd6:	9a04      	ldr	r2, [sp, #16]
 800cfd8:	4640      	mov	r0, r8
 800cfda:	4649      	mov	r1, r9
 800cfdc:	f1ba 0f00 	cmp.w	sl, #0
 800cfe0:	d016      	beq.n	800d010 <_strtod_l+0x988>
 800cfe2:	f7ff fb36 	bl	800c652 <sulp>
 800cfe6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cfea:	ee37 7b00 	vadd.f64	d7, d7, d0
 800cfee:	ec59 8b17 	vmov	r8, r9, d7
 800cff2:	e7de      	b.n	800cfb2 <_strtod_l+0x92a>
 800cff4:	4013      	ands	r3, r2
 800cff6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cffa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cffe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d002:	f04f 38ff 	mov.w	r8, #4294967295
 800d006:	e7d4      	b.n	800cfb2 <_strtod_l+0x92a>
 800d008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d00a:	ea13 0f08 	tst.w	r3, r8
 800d00e:	e7e1      	b.n	800cfd4 <_strtod_l+0x94c>
 800d010:	f7ff fb1f 	bl	800c652 <sulp>
 800d014:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d018:	ee37 7b40 	vsub.f64	d7, d7, d0
 800d01c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d020:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d028:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d02c:	d1c1      	bne.n	800cfb2 <_strtod_l+0x92a>
 800d02e:	e5ec      	b.n	800cc0a <_strtod_l+0x582>
 800d030:	4631      	mov	r1, r6
 800d032:	4628      	mov	r0, r5
 800d034:	f002 fa52 	bl	800f4dc <__ratio>
 800d038:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d03c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d044:	d867      	bhi.n	800d116 <_strtod_l+0xa8e>
 800d046:	f1ba 0f00 	cmp.w	sl, #0
 800d04a:	d044      	beq.n	800d0d6 <_strtod_l+0xa4e>
 800d04c:	4b75      	ldr	r3, [pc, #468]	; (800d224 <_strtod_l+0xb9c>)
 800d04e:	2200      	movs	r2, #0
 800d050:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800d054:	4971      	ldr	r1, [pc, #452]	; (800d21c <_strtod_l+0xb94>)
 800d056:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800d230 <_strtod_l+0xba8>
 800d05a:	ea0b 0001 	and.w	r0, fp, r1
 800d05e:	4560      	cmp	r0, ip
 800d060:	900d      	str	r0, [sp, #52]	; 0x34
 800d062:	f040 808b 	bne.w	800d17c <_strtod_l+0xaf4>
 800d066:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d06a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800d06e:	ec49 8b10 	vmov	d0, r8, r9
 800d072:	ec43 2b1c 	vmov	d12, r2, r3
 800d076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d07a:	f002 f957 	bl	800f32c <__ulp>
 800d07e:	ec49 8b1d 	vmov	d13, r8, r9
 800d082:	eeac db00 	vfma.f64	d13, d12, d0
 800d086:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800d08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d08c:	4963      	ldr	r1, [pc, #396]	; (800d21c <_strtod_l+0xb94>)
 800d08e:	4a66      	ldr	r2, [pc, #408]	; (800d228 <_strtod_l+0xba0>)
 800d090:	4019      	ands	r1, r3
 800d092:	4291      	cmp	r1, r2
 800d094:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800d098:	d947      	bls.n	800d12a <_strtod_l+0xaa2>
 800d09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d103      	bne.n	800d0ac <_strtod_l+0xa24>
 800d0a4:	9b08      	ldr	r3, [sp, #32]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	f43f ad3a 	beq.w	800cb20 <_strtod_l+0x498>
 800d0ac:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800d220 <_strtod_l+0xb98>
 800d0b0:	f04f 38ff 	mov.w	r8, #4294967295
 800d0b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f001 fe0c 	bl	800ecd4 <_Bfree>
 800d0bc:	4639      	mov	r1, r7
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 fe08 	bl	800ecd4 <_Bfree>
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f001 fe04 	bl	800ecd4 <_Bfree>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f001 fe00 	bl	800ecd4 <_Bfree>
 800d0d4:	e60f      	b.n	800ccf6 <_strtod_l+0x66e>
 800d0d6:	f1b8 0f00 	cmp.w	r8, #0
 800d0da:	d112      	bne.n	800d102 <_strtod_l+0xa7a>
 800d0dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0e0:	b9b3      	cbnz	r3, 800d110 <_strtod_l+0xa88>
 800d0e2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d0e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ee:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d0f2:	d401      	bmi.n	800d0f8 <_strtod_l+0xa70>
 800d0f4:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d0f8:	eeb1 7b48 	vneg.f64	d7, d8
 800d0fc:	ec53 2b17 	vmov	r2, r3, d7
 800d100:	e7a8      	b.n	800d054 <_strtod_l+0x9cc>
 800d102:	f1b8 0f01 	cmp.w	r8, #1
 800d106:	d103      	bne.n	800d110 <_strtod_l+0xa88>
 800d108:	f1b9 0f00 	cmp.w	r9, #0
 800d10c:	f43f ad7d 	beq.w	800cc0a <_strtod_l+0x582>
 800d110:	4b46      	ldr	r3, [pc, #280]	; (800d22c <_strtod_l+0xba4>)
 800d112:	2200      	movs	r2, #0
 800d114:	e79c      	b.n	800d050 <_strtod_l+0x9c8>
 800d116:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d11a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d11e:	f1ba 0f00 	cmp.w	sl, #0
 800d122:	d0e9      	beq.n	800d0f8 <_strtod_l+0xa70>
 800d124:	ec53 2b18 	vmov	r2, r3, d8
 800d128:	e794      	b.n	800d054 <_strtod_l+0x9cc>
 800d12a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d12e:	9b04      	ldr	r3, [sp, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1bf      	bne.n	800d0b4 <_strtod_l+0xa2c>
 800d134:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d13a:	0d1b      	lsrs	r3, r3, #20
 800d13c:	051b      	lsls	r3, r3, #20
 800d13e:	429a      	cmp	r2, r3
 800d140:	d1b8      	bne.n	800d0b4 <_strtod_l+0xa2c>
 800d142:	ec51 0b18 	vmov	r0, r1, d8
 800d146:	f7f3 fb07 	bl	8000758 <__aeabi_d2lz>
 800d14a:	f7f3 fabf 	bl	80006cc <__aeabi_l2d>
 800d14e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d152:	ec41 0b17 	vmov	d7, r0, r1
 800d156:	ea43 0308 	orr.w	r3, r3, r8
 800d15a:	ea53 030a 	orrs.w	r3, r3, sl
 800d15e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d162:	d03e      	beq.n	800d1e2 <_strtod_l+0xb5a>
 800d164:	eeb4 8bca 	vcmpe.f64	d8, d10
 800d168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16c:	f53f ace2 	bmi.w	800cb34 <_strtod_l+0x4ac>
 800d170:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d178:	dd9c      	ble.n	800d0b4 <_strtod_l+0xa2c>
 800d17a:	e4db      	b.n	800cb34 <_strtod_l+0x4ac>
 800d17c:	9904      	ldr	r1, [sp, #16]
 800d17e:	b301      	cbz	r1, 800d1c2 <_strtod_l+0xb3a>
 800d180:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d182:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800d186:	d81c      	bhi.n	800d1c2 <_strtod_l+0xb3a>
 800d188:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d210 <_strtod_l+0xb88>
 800d18c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d194:	d811      	bhi.n	800d1ba <_strtod_l+0xb32>
 800d196:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d19a:	ee18 3a10 	vmov	r3, s16
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	bf38      	it	cc
 800d1a2:	2301      	movcc	r3, #1
 800d1a4:	ee08 3a10 	vmov	s16, r3
 800d1a8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d1ac:	f1ba 0f00 	cmp.w	sl, #0
 800d1b0:	d114      	bne.n	800d1dc <_strtod_l+0xb54>
 800d1b2:	eeb1 7b48 	vneg.f64	d7, d8
 800d1b6:	ec53 2b17 	vmov	r2, r3, d7
 800d1ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d1bc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800d1c0:	1a0b      	subs	r3, r1, r0
 800d1c2:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d1c6:	ec43 2b1c 	vmov	d12, r2, r3
 800d1ca:	f002 f8af 	bl	800f32c <__ulp>
 800d1ce:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d1d2:	eeac 7b00 	vfma.f64	d7, d12, d0
 800d1d6:	ec59 8b17 	vmov	r8, r9, d7
 800d1da:	e7a8      	b.n	800d12e <_strtod_l+0xaa6>
 800d1dc:	ec53 2b18 	vmov	r2, r3, d8
 800d1e0:	e7eb      	b.n	800d1ba <_strtod_l+0xb32>
 800d1e2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ea:	f57f af63 	bpl.w	800d0b4 <_strtod_l+0xa2c>
 800d1ee:	e4a1      	b.n	800cb34 <_strtod_l+0x4ac>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1f8:	6013      	str	r3, [r2, #0]
 800d1fa:	f7ff ba8d 	b.w	800c718 <_strtod_l+0x90>
 800d1fe:	2a65      	cmp	r2, #101	; 0x65
 800d200:	f43f ab89 	beq.w	800c916 <_strtod_l+0x28e>
 800d204:	2a45      	cmp	r2, #69	; 0x45
 800d206:	f43f ab86 	beq.w	800c916 <_strtod_l+0x28e>
 800d20a:	2101      	movs	r1, #1
 800d20c:	f7ff bbbe 	b.w	800c98c <_strtod_l+0x304>
 800d210:	ffc00000 	.word	0xffc00000
 800d214:	41dfffff 	.word	0x41dfffff
 800d218:	000fffff 	.word	0x000fffff
 800d21c:	7ff00000 	.word	0x7ff00000
 800d220:	7fefffff 	.word	0x7fefffff
 800d224:	3ff00000 	.word	0x3ff00000
 800d228:	7c9fffff 	.word	0x7c9fffff
 800d22c:	bff00000 	.word	0xbff00000
 800d230:	7fe00000 	.word	0x7fe00000

0800d234 <_strtod_r>:
 800d234:	4b01      	ldr	r3, [pc, #4]	; (800d23c <_strtod_r+0x8>)
 800d236:	f7ff ba27 	b.w	800c688 <_strtod_l>
 800d23a:	bf00      	nop
 800d23c:	24000128 	.word	0x24000128

0800d240 <_strtol_l.isra.0>:
 800d240:	2b01      	cmp	r3, #1
 800d242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d246:	d001      	beq.n	800d24c <_strtol_l.isra.0+0xc>
 800d248:	2b24      	cmp	r3, #36	; 0x24
 800d24a:	d906      	bls.n	800d25a <_strtol_l.isra.0+0x1a>
 800d24c:	f7fe f8aa 	bl	800b3a4 <__errno>
 800d250:	2316      	movs	r3, #22
 800d252:	6003      	str	r3, [r0, #0]
 800d254:	2000      	movs	r0, #0
 800d256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d25a:	4f3a      	ldr	r7, [pc, #232]	; (800d344 <_strtol_l.isra.0+0x104>)
 800d25c:	468e      	mov	lr, r1
 800d25e:	4676      	mov	r6, lr
 800d260:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d264:	5de5      	ldrb	r5, [r4, r7]
 800d266:	f015 0508 	ands.w	r5, r5, #8
 800d26a:	d1f8      	bne.n	800d25e <_strtol_l.isra.0+0x1e>
 800d26c:	2c2d      	cmp	r4, #45	; 0x2d
 800d26e:	d134      	bne.n	800d2da <_strtol_l.isra.0+0x9a>
 800d270:	f89e 4000 	ldrb.w	r4, [lr]
 800d274:	f04f 0801 	mov.w	r8, #1
 800d278:	f106 0e02 	add.w	lr, r6, #2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d05c      	beq.n	800d33a <_strtol_l.isra.0+0xfa>
 800d280:	2b10      	cmp	r3, #16
 800d282:	d10c      	bne.n	800d29e <_strtol_l.isra.0+0x5e>
 800d284:	2c30      	cmp	r4, #48	; 0x30
 800d286:	d10a      	bne.n	800d29e <_strtol_l.isra.0+0x5e>
 800d288:	f89e 4000 	ldrb.w	r4, [lr]
 800d28c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d290:	2c58      	cmp	r4, #88	; 0x58
 800d292:	d14d      	bne.n	800d330 <_strtol_l.isra.0+0xf0>
 800d294:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d298:	2310      	movs	r3, #16
 800d29a:	f10e 0e02 	add.w	lr, lr, #2
 800d29e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d2a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d2a6:	2600      	movs	r6, #0
 800d2a8:	fbbc f9f3 	udiv	r9, ip, r3
 800d2ac:	4635      	mov	r5, r6
 800d2ae:	fb03 ca19 	mls	sl, r3, r9, ip
 800d2b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d2b6:	2f09      	cmp	r7, #9
 800d2b8:	d818      	bhi.n	800d2ec <_strtol_l.isra.0+0xac>
 800d2ba:	463c      	mov	r4, r7
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	dd24      	ble.n	800d30a <_strtol_l.isra.0+0xca>
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	db1f      	blt.n	800d304 <_strtol_l.isra.0+0xc4>
 800d2c4:	45a9      	cmp	r9, r5
 800d2c6:	d31d      	bcc.n	800d304 <_strtol_l.isra.0+0xc4>
 800d2c8:	d101      	bne.n	800d2ce <_strtol_l.isra.0+0x8e>
 800d2ca:	45a2      	cmp	sl, r4
 800d2cc:	db1a      	blt.n	800d304 <_strtol_l.isra.0+0xc4>
 800d2ce:	fb05 4503 	mla	r5, r5, r3, r4
 800d2d2:	2601      	movs	r6, #1
 800d2d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d2d8:	e7eb      	b.n	800d2b2 <_strtol_l.isra.0+0x72>
 800d2da:	2c2b      	cmp	r4, #43	; 0x2b
 800d2dc:	bf08      	it	eq
 800d2de:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d2e2:	46a8      	mov	r8, r5
 800d2e4:	bf08      	it	eq
 800d2e6:	f106 0e02 	addeq.w	lr, r6, #2
 800d2ea:	e7c7      	b.n	800d27c <_strtol_l.isra.0+0x3c>
 800d2ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d2f0:	2f19      	cmp	r7, #25
 800d2f2:	d801      	bhi.n	800d2f8 <_strtol_l.isra.0+0xb8>
 800d2f4:	3c37      	subs	r4, #55	; 0x37
 800d2f6:	e7e1      	b.n	800d2bc <_strtol_l.isra.0+0x7c>
 800d2f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d2fc:	2f19      	cmp	r7, #25
 800d2fe:	d804      	bhi.n	800d30a <_strtol_l.isra.0+0xca>
 800d300:	3c57      	subs	r4, #87	; 0x57
 800d302:	e7db      	b.n	800d2bc <_strtol_l.isra.0+0x7c>
 800d304:	f04f 36ff 	mov.w	r6, #4294967295
 800d308:	e7e4      	b.n	800d2d4 <_strtol_l.isra.0+0x94>
 800d30a:	2e00      	cmp	r6, #0
 800d30c:	da05      	bge.n	800d31a <_strtol_l.isra.0+0xda>
 800d30e:	2322      	movs	r3, #34	; 0x22
 800d310:	6003      	str	r3, [r0, #0]
 800d312:	4665      	mov	r5, ip
 800d314:	b942      	cbnz	r2, 800d328 <_strtol_l.isra.0+0xe8>
 800d316:	4628      	mov	r0, r5
 800d318:	e79d      	b.n	800d256 <_strtol_l.isra.0+0x16>
 800d31a:	f1b8 0f00 	cmp.w	r8, #0
 800d31e:	d000      	beq.n	800d322 <_strtol_l.isra.0+0xe2>
 800d320:	426d      	negs	r5, r5
 800d322:	2a00      	cmp	r2, #0
 800d324:	d0f7      	beq.n	800d316 <_strtol_l.isra.0+0xd6>
 800d326:	b10e      	cbz	r6, 800d32c <_strtol_l.isra.0+0xec>
 800d328:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d32c:	6011      	str	r1, [r2, #0]
 800d32e:	e7f2      	b.n	800d316 <_strtol_l.isra.0+0xd6>
 800d330:	2430      	movs	r4, #48	; 0x30
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1b3      	bne.n	800d29e <_strtol_l.isra.0+0x5e>
 800d336:	2308      	movs	r3, #8
 800d338:	e7b1      	b.n	800d29e <_strtol_l.isra.0+0x5e>
 800d33a:	2c30      	cmp	r4, #48	; 0x30
 800d33c:	d0a4      	beq.n	800d288 <_strtol_l.isra.0+0x48>
 800d33e:	230a      	movs	r3, #10
 800d340:	e7ad      	b.n	800d29e <_strtol_l.isra.0+0x5e>
 800d342:	bf00      	nop
 800d344:	08010629 	.word	0x08010629

0800d348 <_strtol_r>:
 800d348:	f7ff bf7a 	b.w	800d240 <_strtol_l.isra.0>

0800d34c <__swbuf_r>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	460e      	mov	r6, r1
 800d350:	4614      	mov	r4, r2
 800d352:	4605      	mov	r5, r0
 800d354:	b118      	cbz	r0, 800d35e <__swbuf_r+0x12>
 800d356:	6983      	ldr	r3, [r0, #24]
 800d358:	b90b      	cbnz	r3, 800d35e <__swbuf_r+0x12>
 800d35a:	f000 ffe5 	bl	800e328 <__sinit>
 800d35e:	4b21      	ldr	r3, [pc, #132]	; (800d3e4 <__swbuf_r+0x98>)
 800d360:	429c      	cmp	r4, r3
 800d362:	d12b      	bne.n	800d3bc <__swbuf_r+0x70>
 800d364:	686c      	ldr	r4, [r5, #4]
 800d366:	69a3      	ldr	r3, [r4, #24]
 800d368:	60a3      	str	r3, [r4, #8]
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	071a      	lsls	r2, r3, #28
 800d36e:	d52f      	bpl.n	800d3d0 <__swbuf_r+0x84>
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	b36b      	cbz	r3, 800d3d0 <__swbuf_r+0x84>
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	6820      	ldr	r0, [r4, #0]
 800d378:	1ac0      	subs	r0, r0, r3
 800d37a:	6963      	ldr	r3, [r4, #20]
 800d37c:	b2f6      	uxtb	r6, r6
 800d37e:	4283      	cmp	r3, r0
 800d380:	4637      	mov	r7, r6
 800d382:	dc04      	bgt.n	800d38e <__swbuf_r+0x42>
 800d384:	4621      	mov	r1, r4
 800d386:	4628      	mov	r0, r5
 800d388:	f000 ff3a 	bl	800e200 <_fflush_r>
 800d38c:	bb30      	cbnz	r0, 800d3dc <__swbuf_r+0x90>
 800d38e:	68a3      	ldr	r3, [r4, #8]
 800d390:	3b01      	subs	r3, #1
 800d392:	60a3      	str	r3, [r4, #8]
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	6022      	str	r2, [r4, #0]
 800d39a:	701e      	strb	r6, [r3, #0]
 800d39c:	6963      	ldr	r3, [r4, #20]
 800d39e:	3001      	adds	r0, #1
 800d3a0:	4283      	cmp	r3, r0
 800d3a2:	d004      	beq.n	800d3ae <__swbuf_r+0x62>
 800d3a4:	89a3      	ldrh	r3, [r4, #12]
 800d3a6:	07db      	lsls	r3, r3, #31
 800d3a8:	d506      	bpl.n	800d3b8 <__swbuf_r+0x6c>
 800d3aa:	2e0a      	cmp	r6, #10
 800d3ac:	d104      	bne.n	800d3b8 <__swbuf_r+0x6c>
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f000 ff25 	bl	800e200 <_fflush_r>
 800d3b6:	b988      	cbnz	r0, 800d3dc <__swbuf_r+0x90>
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3bc:	4b0a      	ldr	r3, [pc, #40]	; (800d3e8 <__swbuf_r+0x9c>)
 800d3be:	429c      	cmp	r4, r3
 800d3c0:	d101      	bne.n	800d3c6 <__swbuf_r+0x7a>
 800d3c2:	68ac      	ldr	r4, [r5, #8]
 800d3c4:	e7cf      	b.n	800d366 <__swbuf_r+0x1a>
 800d3c6:	4b09      	ldr	r3, [pc, #36]	; (800d3ec <__swbuf_r+0xa0>)
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	bf08      	it	eq
 800d3cc:	68ec      	ldreq	r4, [r5, #12]
 800d3ce:	e7ca      	b.n	800d366 <__swbuf_r+0x1a>
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f000 f80c 	bl	800d3f0 <__swsetup_r>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0cb      	beq.n	800d374 <__swbuf_r+0x28>
 800d3dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d3e0:	e7ea      	b.n	800d3b8 <__swbuf_r+0x6c>
 800d3e2:	bf00      	nop
 800d3e4:	080107e0 	.word	0x080107e0
 800d3e8:	08010800 	.word	0x08010800
 800d3ec:	080107c0 	.word	0x080107c0

0800d3f0 <__swsetup_r>:
 800d3f0:	4b32      	ldr	r3, [pc, #200]	; (800d4bc <__swsetup_r+0xcc>)
 800d3f2:	b570      	push	{r4, r5, r6, lr}
 800d3f4:	681d      	ldr	r5, [r3, #0]
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	b125      	cbz	r5, 800d406 <__swsetup_r+0x16>
 800d3fc:	69ab      	ldr	r3, [r5, #24]
 800d3fe:	b913      	cbnz	r3, 800d406 <__swsetup_r+0x16>
 800d400:	4628      	mov	r0, r5
 800d402:	f000 ff91 	bl	800e328 <__sinit>
 800d406:	4b2e      	ldr	r3, [pc, #184]	; (800d4c0 <__swsetup_r+0xd0>)
 800d408:	429c      	cmp	r4, r3
 800d40a:	d10f      	bne.n	800d42c <__swsetup_r+0x3c>
 800d40c:	686c      	ldr	r4, [r5, #4]
 800d40e:	89a3      	ldrh	r3, [r4, #12]
 800d410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d414:	0719      	lsls	r1, r3, #28
 800d416:	d42c      	bmi.n	800d472 <__swsetup_r+0x82>
 800d418:	06dd      	lsls	r5, r3, #27
 800d41a:	d411      	bmi.n	800d440 <__swsetup_r+0x50>
 800d41c:	2309      	movs	r3, #9
 800d41e:	6033      	str	r3, [r6, #0]
 800d420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d424:	81a3      	strh	r3, [r4, #12]
 800d426:	f04f 30ff 	mov.w	r0, #4294967295
 800d42a:	e03e      	b.n	800d4aa <__swsetup_r+0xba>
 800d42c:	4b25      	ldr	r3, [pc, #148]	; (800d4c4 <__swsetup_r+0xd4>)
 800d42e:	429c      	cmp	r4, r3
 800d430:	d101      	bne.n	800d436 <__swsetup_r+0x46>
 800d432:	68ac      	ldr	r4, [r5, #8]
 800d434:	e7eb      	b.n	800d40e <__swsetup_r+0x1e>
 800d436:	4b24      	ldr	r3, [pc, #144]	; (800d4c8 <__swsetup_r+0xd8>)
 800d438:	429c      	cmp	r4, r3
 800d43a:	bf08      	it	eq
 800d43c:	68ec      	ldreq	r4, [r5, #12]
 800d43e:	e7e6      	b.n	800d40e <__swsetup_r+0x1e>
 800d440:	0758      	lsls	r0, r3, #29
 800d442:	d512      	bpl.n	800d46a <__swsetup_r+0x7a>
 800d444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d446:	b141      	cbz	r1, 800d45a <__swsetup_r+0x6a>
 800d448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d44c:	4299      	cmp	r1, r3
 800d44e:	d002      	beq.n	800d456 <__swsetup_r+0x66>
 800d450:	4630      	mov	r0, r6
 800d452:	f7fe f823 	bl	800b49c <_free_r>
 800d456:	2300      	movs	r3, #0
 800d458:	6363      	str	r3, [r4, #52]	; 0x34
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	2300      	movs	r3, #0
 800d464:	6063      	str	r3, [r4, #4]
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f043 0308 	orr.w	r3, r3, #8
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	6923      	ldr	r3, [r4, #16]
 800d474:	b94b      	cbnz	r3, 800d48a <__swsetup_r+0x9a>
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d480:	d003      	beq.n	800d48a <__swsetup_r+0x9a>
 800d482:	4621      	mov	r1, r4
 800d484:	4630      	mov	r0, r6
 800d486:	f001 fb87 	bl	800eb98 <__smakebuf_r>
 800d48a:	89a0      	ldrh	r0, [r4, #12]
 800d48c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d490:	f010 0301 	ands.w	r3, r0, #1
 800d494:	d00a      	beq.n	800d4ac <__swsetup_r+0xbc>
 800d496:	2300      	movs	r3, #0
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	6963      	ldr	r3, [r4, #20]
 800d49c:	425b      	negs	r3, r3
 800d49e:	61a3      	str	r3, [r4, #24]
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b943      	cbnz	r3, 800d4b6 <__swsetup_r+0xc6>
 800d4a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4a8:	d1ba      	bne.n	800d420 <__swsetup_r+0x30>
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	0781      	lsls	r1, r0, #30
 800d4ae:	bf58      	it	pl
 800d4b0:	6963      	ldrpl	r3, [r4, #20]
 800d4b2:	60a3      	str	r3, [r4, #8]
 800d4b4:	e7f4      	b.n	800d4a0 <__swsetup_r+0xb0>
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	e7f7      	b.n	800d4aa <__swsetup_r+0xba>
 800d4ba:	bf00      	nop
 800d4bc:	240000c0 	.word	0x240000c0
 800d4c0:	080107e0 	.word	0x080107e0
 800d4c4:	08010800 	.word	0x08010800
 800d4c8:	080107c0 	.word	0x080107c0

0800d4cc <abort>:
 800d4cc:	b508      	push	{r3, lr}
 800d4ce:	2006      	movs	r0, #6
 800d4d0:	f002 fa3e 	bl	800f950 <raise>
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	f7f4 fa1d 	bl	8001914 <_exit>

0800d4da <quorem>:
 800d4da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4de:	6903      	ldr	r3, [r0, #16]
 800d4e0:	690c      	ldr	r4, [r1, #16]
 800d4e2:	42a3      	cmp	r3, r4
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	f2c0 8081 	blt.w	800d5ec <quorem+0x112>
 800d4ea:	3c01      	subs	r4, #1
 800d4ec:	f101 0814 	add.w	r8, r1, #20
 800d4f0:	f100 0514 	add.w	r5, r0, #20
 800d4f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d502:	3301      	adds	r3, #1
 800d504:	429a      	cmp	r2, r3
 800d506:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d50a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d50e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d512:	d331      	bcc.n	800d578 <quorem+0x9e>
 800d514:	f04f 0e00 	mov.w	lr, #0
 800d518:	4640      	mov	r0, r8
 800d51a:	46ac      	mov	ip, r5
 800d51c:	46f2      	mov	sl, lr
 800d51e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d522:	b293      	uxth	r3, r2
 800d524:	fb06 e303 	mla	r3, r6, r3, lr
 800d528:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	ebaa 0303 	sub.w	r3, sl, r3
 800d532:	0c12      	lsrs	r2, r2, #16
 800d534:	f8dc a000 	ldr.w	sl, [ip]
 800d538:	fb06 e202 	mla	r2, r6, r2, lr
 800d53c:	fa13 f38a 	uxtah	r3, r3, sl
 800d540:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d544:	fa1f fa82 	uxth.w	sl, r2
 800d548:	f8dc 2000 	ldr.w	r2, [ip]
 800d54c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d554:	b29b      	uxth	r3, r3
 800d556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d55a:	4581      	cmp	r9, r0
 800d55c:	f84c 3b04 	str.w	r3, [ip], #4
 800d560:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d564:	d2db      	bcs.n	800d51e <quorem+0x44>
 800d566:	f855 300b 	ldr.w	r3, [r5, fp]
 800d56a:	b92b      	cbnz	r3, 800d578 <quorem+0x9e>
 800d56c:	9b01      	ldr	r3, [sp, #4]
 800d56e:	3b04      	subs	r3, #4
 800d570:	429d      	cmp	r5, r3
 800d572:	461a      	mov	r2, r3
 800d574:	d32e      	bcc.n	800d5d4 <quorem+0xfa>
 800d576:	613c      	str	r4, [r7, #16]
 800d578:	4638      	mov	r0, r7
 800d57a:	f001 fe33 	bl	800f1e4 <__mcmp>
 800d57e:	2800      	cmp	r0, #0
 800d580:	db24      	blt.n	800d5cc <quorem+0xf2>
 800d582:	3601      	adds	r6, #1
 800d584:	4628      	mov	r0, r5
 800d586:	f04f 0c00 	mov.w	ip, #0
 800d58a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d58e:	f8d0 e000 	ldr.w	lr, [r0]
 800d592:	b293      	uxth	r3, r2
 800d594:	ebac 0303 	sub.w	r3, ip, r3
 800d598:	0c12      	lsrs	r2, r2, #16
 800d59a:	fa13 f38e 	uxtah	r3, r3, lr
 800d59e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d5a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5ac:	45c1      	cmp	r9, r8
 800d5ae:	f840 3b04 	str.w	r3, [r0], #4
 800d5b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5b6:	d2e8      	bcs.n	800d58a <quorem+0xb0>
 800d5b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5c0:	b922      	cbnz	r2, 800d5cc <quorem+0xf2>
 800d5c2:	3b04      	subs	r3, #4
 800d5c4:	429d      	cmp	r5, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	d30a      	bcc.n	800d5e0 <quorem+0x106>
 800d5ca:	613c      	str	r4, [r7, #16]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	b003      	add	sp, #12
 800d5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d4:	6812      	ldr	r2, [r2, #0]
 800d5d6:	3b04      	subs	r3, #4
 800d5d8:	2a00      	cmp	r2, #0
 800d5da:	d1cc      	bne.n	800d576 <quorem+0x9c>
 800d5dc:	3c01      	subs	r4, #1
 800d5de:	e7c7      	b.n	800d570 <quorem+0x96>
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	3b04      	subs	r3, #4
 800d5e4:	2a00      	cmp	r2, #0
 800d5e6:	d1f0      	bne.n	800d5ca <quorem+0xf0>
 800d5e8:	3c01      	subs	r4, #1
 800d5ea:	e7eb      	b.n	800d5c4 <quorem+0xea>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e7ee      	b.n	800d5ce <quorem+0xf4>

0800d5f0 <_dtoa_r>:
 800d5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	ec59 8b10 	vmov	r8, r9, d0
 800d5f8:	b095      	sub	sp, #84	; 0x54
 800d5fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5fc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d5fe:	9107      	str	r1, [sp, #28]
 800d600:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d604:	4606      	mov	r6, r0
 800d606:	9209      	str	r2, [sp, #36]	; 0x24
 800d608:	9310      	str	r3, [sp, #64]	; 0x40
 800d60a:	b975      	cbnz	r5, 800d62a <_dtoa_r+0x3a>
 800d60c:	2010      	movs	r0, #16
 800d60e:	f7fd ff05 	bl	800b41c <malloc>
 800d612:	4602      	mov	r2, r0
 800d614:	6270      	str	r0, [r6, #36]	; 0x24
 800d616:	b920      	cbnz	r0, 800d622 <_dtoa_r+0x32>
 800d618:	4bab      	ldr	r3, [pc, #684]	; (800d8c8 <_dtoa_r+0x2d8>)
 800d61a:	21ea      	movs	r1, #234	; 0xea
 800d61c:	48ab      	ldr	r0, [pc, #684]	; (800d8cc <_dtoa_r+0x2dc>)
 800d61e:	f7fd fea3 	bl	800b368 <__assert_func>
 800d622:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d626:	6005      	str	r5, [r0, #0]
 800d628:	60c5      	str	r5, [r0, #12]
 800d62a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d62c:	6819      	ldr	r1, [r3, #0]
 800d62e:	b151      	cbz	r1, 800d646 <_dtoa_r+0x56>
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	604a      	str	r2, [r1, #4]
 800d634:	2301      	movs	r3, #1
 800d636:	4093      	lsls	r3, r2
 800d638:	608b      	str	r3, [r1, #8]
 800d63a:	4630      	mov	r0, r6
 800d63c:	f001 fb4a 	bl	800ecd4 <_Bfree>
 800d640:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
 800d646:	f1b9 0300 	subs.w	r3, r9, #0
 800d64a:	bfbb      	ittet	lt
 800d64c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d650:	9303      	strlt	r3, [sp, #12]
 800d652:	2300      	movge	r3, #0
 800d654:	2201      	movlt	r2, #1
 800d656:	bfac      	ite	ge
 800d658:	6023      	strge	r3, [r4, #0]
 800d65a:	6022      	strlt	r2, [r4, #0]
 800d65c:	4b9c      	ldr	r3, [pc, #624]	; (800d8d0 <_dtoa_r+0x2e0>)
 800d65e:	9c03      	ldr	r4, [sp, #12]
 800d660:	43a3      	bics	r3, r4
 800d662:	d11a      	bne.n	800d69a <_dtoa_r+0xaa>
 800d664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d666:	f242 730f 	movw	r3, #9999	; 0x270f
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d670:	ea53 0308 	orrs.w	r3, r3, r8
 800d674:	f000 8512 	beq.w	800e09c <_dtoa_r+0xaac>
 800d678:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d67a:	b953      	cbnz	r3, 800d692 <_dtoa_r+0xa2>
 800d67c:	4b95      	ldr	r3, [pc, #596]	; (800d8d4 <_dtoa_r+0x2e4>)
 800d67e:	e01f      	b.n	800d6c0 <_dtoa_r+0xd0>
 800d680:	4b95      	ldr	r3, [pc, #596]	; (800d8d8 <_dtoa_r+0x2e8>)
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	3308      	adds	r3, #8
 800d686:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d688:	6013      	str	r3, [r2, #0]
 800d68a:	9800      	ldr	r0, [sp, #0]
 800d68c:	b015      	add	sp, #84	; 0x54
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	4b90      	ldr	r3, [pc, #576]	; (800d8d4 <_dtoa_r+0x2e4>)
 800d694:	9300      	str	r3, [sp, #0]
 800d696:	3303      	adds	r3, #3
 800d698:	e7f5      	b.n	800d686 <_dtoa_r+0x96>
 800d69a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d69e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d6aa:	d10b      	bne.n	800d6c4 <_dtoa_r+0xd4>
 800d6ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 84ee 	beq.w	800e096 <_dtoa_r+0xaa6>
 800d6ba:	4888      	ldr	r0, [pc, #544]	; (800d8dc <_dtoa_r+0x2ec>)
 800d6bc:	6018      	str	r0, [r3, #0]
 800d6be:	1e43      	subs	r3, r0, #1
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	e7e2      	b.n	800d68a <_dtoa_r+0x9a>
 800d6c4:	a913      	add	r1, sp, #76	; 0x4c
 800d6c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d6ca:	aa12      	add	r2, sp, #72	; 0x48
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f001 fea9 	bl	800f424 <__d2b>
 800d6d2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d6da:	2900      	cmp	r1, #0
 800d6dc:	d047      	beq.n	800d76e <_dtoa_r+0x17e>
 800d6de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d6e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d6e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6e8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d6ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6f0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d6f4:	2400      	movs	r4, #0
 800d6f6:	ec43 2b16 	vmov	d6, r2, r3
 800d6fa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d6fe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d8b0 <_dtoa_r+0x2c0>
 800d702:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d706:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d8b8 <_dtoa_r+0x2c8>
 800d70a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d70e:	eeb0 7b46 	vmov.f64	d7, d6
 800d712:	ee06 1a90 	vmov	s13, r1
 800d716:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d71a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d8c0 <_dtoa_r+0x2d0>
 800d71e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d722:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d726:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72e:	ee16 ba90 	vmov	fp, s13
 800d732:	9411      	str	r4, [sp, #68]	; 0x44
 800d734:	d508      	bpl.n	800d748 <_dtoa_r+0x158>
 800d736:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d73a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	bf18      	it	ne
 800d744:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d748:	f1bb 0f16 	cmp.w	fp, #22
 800d74c:	d832      	bhi.n	800d7b4 <_dtoa_r+0x1c4>
 800d74e:	4b64      	ldr	r3, [pc, #400]	; (800d8e0 <_dtoa_r+0x2f0>)
 800d750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d754:	ed93 7b00 	vldr	d7, [r3]
 800d758:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d75c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d764:	d501      	bpl.n	800d76a <_dtoa_r+0x17a>
 800d766:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d76a:	2300      	movs	r3, #0
 800d76c:	e023      	b.n	800d7b6 <_dtoa_r+0x1c6>
 800d76e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d770:	4401      	add	r1, r0
 800d772:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d776:	2b20      	cmp	r3, #32
 800d778:	bfc3      	ittte	gt
 800d77a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d77e:	fa04 f303 	lslgt.w	r3, r4, r3
 800d782:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d786:	f1c3 0320 	rsble	r3, r3, #32
 800d78a:	bfc6      	itte	gt
 800d78c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d790:	ea43 0308 	orrgt.w	r3, r3, r8
 800d794:	fa08 f303 	lslle.w	r3, r8, r3
 800d798:	ee07 3a90 	vmov	s15, r3
 800d79c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d7a0:	3901      	subs	r1, #1
 800d7a2:	ed8d 7b00 	vstr	d7, [sp]
 800d7a6:	9c01      	ldr	r4, [sp, #4]
 800d7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d7b0:	2401      	movs	r4, #1
 800d7b2:	e7a0      	b.n	800d6f6 <_dtoa_r+0x106>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7b8:	1a43      	subs	r3, r0, r1
 800d7ba:	1e5a      	subs	r2, r3, #1
 800d7bc:	bf45      	ittet	mi
 800d7be:	f1c3 0301 	rsbmi	r3, r3, #1
 800d7c2:	9305      	strmi	r3, [sp, #20]
 800d7c4:	2300      	movpl	r3, #0
 800d7c6:	2300      	movmi	r3, #0
 800d7c8:	9206      	str	r2, [sp, #24]
 800d7ca:	bf54      	ite	pl
 800d7cc:	9305      	strpl	r3, [sp, #20]
 800d7ce:	9306      	strmi	r3, [sp, #24]
 800d7d0:	f1bb 0f00 	cmp.w	fp, #0
 800d7d4:	db18      	blt.n	800d808 <_dtoa_r+0x218>
 800d7d6:	9b06      	ldr	r3, [sp, #24]
 800d7d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d7dc:	445b      	add	r3, fp
 800d7de:	9306      	str	r3, [sp, #24]
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	9a07      	ldr	r2, [sp, #28]
 800d7e4:	2a09      	cmp	r2, #9
 800d7e6:	d849      	bhi.n	800d87c <_dtoa_r+0x28c>
 800d7e8:	2a05      	cmp	r2, #5
 800d7ea:	bfc4      	itt	gt
 800d7ec:	3a04      	subgt	r2, #4
 800d7ee:	9207      	strgt	r2, [sp, #28]
 800d7f0:	9a07      	ldr	r2, [sp, #28]
 800d7f2:	f1a2 0202 	sub.w	r2, r2, #2
 800d7f6:	bfcc      	ite	gt
 800d7f8:	2400      	movgt	r4, #0
 800d7fa:	2401      	movle	r4, #1
 800d7fc:	2a03      	cmp	r2, #3
 800d7fe:	d848      	bhi.n	800d892 <_dtoa_r+0x2a2>
 800d800:	e8df f002 	tbb	[pc, r2]
 800d804:	3a2c2e0b 	.word	0x3a2c2e0b
 800d808:	9b05      	ldr	r3, [sp, #20]
 800d80a:	2200      	movs	r2, #0
 800d80c:	eba3 030b 	sub.w	r3, r3, fp
 800d810:	9305      	str	r3, [sp, #20]
 800d812:	920e      	str	r2, [sp, #56]	; 0x38
 800d814:	f1cb 0300 	rsb	r3, fp, #0
 800d818:	e7e3      	b.n	800d7e2 <_dtoa_r+0x1f2>
 800d81a:	2200      	movs	r2, #0
 800d81c:	9208      	str	r2, [sp, #32]
 800d81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d820:	2a00      	cmp	r2, #0
 800d822:	dc39      	bgt.n	800d898 <_dtoa_r+0x2a8>
 800d824:	f04f 0a01 	mov.w	sl, #1
 800d828:	46d1      	mov	r9, sl
 800d82a:	4652      	mov	r2, sl
 800d82c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d830:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d832:	2100      	movs	r1, #0
 800d834:	6079      	str	r1, [r7, #4]
 800d836:	2004      	movs	r0, #4
 800d838:	f100 0c14 	add.w	ip, r0, #20
 800d83c:	4594      	cmp	ip, r2
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	d92f      	bls.n	800d8a2 <_dtoa_r+0x2b2>
 800d842:	4630      	mov	r0, r6
 800d844:	930c      	str	r3, [sp, #48]	; 0x30
 800d846:	f001 fa05 	bl	800ec54 <_Balloc>
 800d84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d84c:	9000      	str	r0, [sp, #0]
 800d84e:	4602      	mov	r2, r0
 800d850:	2800      	cmp	r0, #0
 800d852:	d149      	bne.n	800d8e8 <_dtoa_r+0x2f8>
 800d854:	4b23      	ldr	r3, [pc, #140]	; (800d8e4 <_dtoa_r+0x2f4>)
 800d856:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d85a:	e6df      	b.n	800d61c <_dtoa_r+0x2c>
 800d85c:	2201      	movs	r2, #1
 800d85e:	e7dd      	b.n	800d81c <_dtoa_r+0x22c>
 800d860:	2200      	movs	r2, #0
 800d862:	9208      	str	r2, [sp, #32]
 800d864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d866:	eb0b 0a02 	add.w	sl, fp, r2
 800d86a:	f10a 0901 	add.w	r9, sl, #1
 800d86e:	464a      	mov	r2, r9
 800d870:	2a01      	cmp	r2, #1
 800d872:	bfb8      	it	lt
 800d874:	2201      	movlt	r2, #1
 800d876:	e7db      	b.n	800d830 <_dtoa_r+0x240>
 800d878:	2201      	movs	r2, #1
 800d87a:	e7f2      	b.n	800d862 <_dtoa_r+0x272>
 800d87c:	2401      	movs	r4, #1
 800d87e:	2200      	movs	r2, #0
 800d880:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d884:	f04f 3aff 	mov.w	sl, #4294967295
 800d888:	2100      	movs	r1, #0
 800d88a:	46d1      	mov	r9, sl
 800d88c:	2212      	movs	r2, #18
 800d88e:	9109      	str	r1, [sp, #36]	; 0x24
 800d890:	e7ce      	b.n	800d830 <_dtoa_r+0x240>
 800d892:	2201      	movs	r2, #1
 800d894:	9208      	str	r2, [sp, #32]
 800d896:	e7f5      	b.n	800d884 <_dtoa_r+0x294>
 800d898:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d89c:	46d1      	mov	r9, sl
 800d89e:	4652      	mov	r2, sl
 800d8a0:	e7c6      	b.n	800d830 <_dtoa_r+0x240>
 800d8a2:	3101      	adds	r1, #1
 800d8a4:	6079      	str	r1, [r7, #4]
 800d8a6:	0040      	lsls	r0, r0, #1
 800d8a8:	e7c6      	b.n	800d838 <_dtoa_r+0x248>
 800d8aa:	bf00      	nop
 800d8ac:	f3af 8000 	nop.w
 800d8b0:	636f4361 	.word	0x636f4361
 800d8b4:	3fd287a7 	.word	0x3fd287a7
 800d8b8:	8b60c8b3 	.word	0x8b60c8b3
 800d8bc:	3fc68a28 	.word	0x3fc68a28
 800d8c0:	509f79fb 	.word	0x509f79fb
 800d8c4:	3fd34413 	.word	0x3fd34413
 800d8c8:	08010736 	.word	0x08010736
 800d8cc:	0801074d 	.word	0x0801074d
 800d8d0:	7ff00000 	.word	0x7ff00000
 800d8d4:	08010732 	.word	0x08010732
 800d8d8:	08010729 	.word	0x08010729
 800d8dc:	080105aa 	.word	0x080105aa
 800d8e0:	08010928 	.word	0x08010928
 800d8e4:	080107ac 	.word	0x080107ac
 800d8e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d8ea:	9900      	ldr	r1, [sp, #0]
 800d8ec:	6011      	str	r1, [r2, #0]
 800d8ee:	f1b9 0f0e 	cmp.w	r9, #14
 800d8f2:	d872      	bhi.n	800d9da <_dtoa_r+0x3ea>
 800d8f4:	2c00      	cmp	r4, #0
 800d8f6:	d070      	beq.n	800d9da <_dtoa_r+0x3ea>
 800d8f8:	f1bb 0f00 	cmp.w	fp, #0
 800d8fc:	f340 80a6 	ble.w	800da4c <_dtoa_r+0x45c>
 800d900:	49ca      	ldr	r1, [pc, #808]	; (800dc2c <_dtoa_r+0x63c>)
 800d902:	f00b 020f 	and.w	r2, fp, #15
 800d906:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d90a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d90e:	ed92 7b00 	vldr	d7, [r2]
 800d912:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d916:	f000 808d 	beq.w	800da34 <_dtoa_r+0x444>
 800d91a:	4ac5      	ldr	r2, [pc, #788]	; (800dc30 <_dtoa_r+0x640>)
 800d91c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d920:	ed92 6b08 	vldr	d6, [r2, #32]
 800d924:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d928:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d92c:	f001 010f 	and.w	r1, r1, #15
 800d930:	2203      	movs	r2, #3
 800d932:	48bf      	ldr	r0, [pc, #764]	; (800dc30 <_dtoa_r+0x640>)
 800d934:	2900      	cmp	r1, #0
 800d936:	d17f      	bne.n	800da38 <_dtoa_r+0x448>
 800d938:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d93c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d940:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d944:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d946:	2900      	cmp	r1, #0
 800d948:	f000 80b2 	beq.w	800dab0 <_dtoa_r+0x4c0>
 800d94c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d950:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d954:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95c:	f140 80a8 	bpl.w	800dab0 <_dtoa_r+0x4c0>
 800d960:	f1b9 0f00 	cmp.w	r9, #0
 800d964:	f000 80a4 	beq.w	800dab0 <_dtoa_r+0x4c0>
 800d968:	f1ba 0f00 	cmp.w	sl, #0
 800d96c:	dd31      	ble.n	800d9d2 <_dtoa_r+0x3e2>
 800d96e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d972:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d976:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d97a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d97e:	3201      	adds	r2, #1
 800d980:	4650      	mov	r0, sl
 800d982:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d986:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d98a:	ee07 2a90 	vmov	s15, r2
 800d98e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d992:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d996:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d99a:	9c03      	ldr	r4, [sp, #12]
 800d99c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d9a0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f040 8086 	bne.w	800dab6 <_dtoa_r+0x4c6>
 800d9aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d9ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d9b2:	ec42 1b17 	vmov	d7, r1, r2
 800d9b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9be:	f300 8272 	bgt.w	800dea6 <_dtoa_r+0x8b6>
 800d9c2:	eeb1 7b47 	vneg.f64	d7, d7
 800d9c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ce:	f100 8267 	bmi.w	800dea0 <_dtoa_r+0x8b0>
 800d9d2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d9d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d9da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	f2c0 8129 	blt.w	800dc34 <_dtoa_r+0x644>
 800d9e2:	f1bb 0f0e 	cmp.w	fp, #14
 800d9e6:	f300 8125 	bgt.w	800dc34 <_dtoa_r+0x644>
 800d9ea:	4b90      	ldr	r3, [pc, #576]	; (800dc2c <_dtoa_r+0x63c>)
 800d9ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9f0:	ed93 6b00 	vldr	d6, [r3]
 800d9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f280 80c3 	bge.w	800db82 <_dtoa_r+0x592>
 800d9fc:	f1b9 0f00 	cmp.w	r9, #0
 800da00:	f300 80bf 	bgt.w	800db82 <_dtoa_r+0x592>
 800da04:	f040 824c 	bne.w	800dea0 <_dtoa_r+0x8b0>
 800da08:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800da0c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800da10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1c:	464c      	mov	r4, r9
 800da1e:	464f      	mov	r7, r9
 800da20:	f280 8222 	bge.w	800de68 <_dtoa_r+0x878>
 800da24:	f8dd 8000 	ldr.w	r8, [sp]
 800da28:	2331      	movs	r3, #49	; 0x31
 800da2a:	f808 3b01 	strb.w	r3, [r8], #1
 800da2e:	f10b 0b01 	add.w	fp, fp, #1
 800da32:	e21e      	b.n	800de72 <_dtoa_r+0x882>
 800da34:	2202      	movs	r2, #2
 800da36:	e77c      	b.n	800d932 <_dtoa_r+0x342>
 800da38:	07cc      	lsls	r4, r1, #31
 800da3a:	d504      	bpl.n	800da46 <_dtoa_r+0x456>
 800da3c:	ed90 6b00 	vldr	d6, [r0]
 800da40:	3201      	adds	r2, #1
 800da42:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da46:	1049      	asrs	r1, r1, #1
 800da48:	3008      	adds	r0, #8
 800da4a:	e773      	b.n	800d934 <_dtoa_r+0x344>
 800da4c:	d02e      	beq.n	800daac <_dtoa_r+0x4bc>
 800da4e:	f1cb 0100 	rsb	r1, fp, #0
 800da52:	4a76      	ldr	r2, [pc, #472]	; (800dc2c <_dtoa_r+0x63c>)
 800da54:	f001 000f 	and.w	r0, r1, #15
 800da58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800da5c:	ed92 7b00 	vldr	d7, [r2]
 800da60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800da64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da68:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800da6c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800da70:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800da74:	486e      	ldr	r0, [pc, #440]	; (800dc30 <_dtoa_r+0x640>)
 800da76:	1109      	asrs	r1, r1, #4
 800da78:	2400      	movs	r4, #0
 800da7a:	2202      	movs	r2, #2
 800da7c:	b939      	cbnz	r1, 800da8e <_dtoa_r+0x49e>
 800da7e:	2c00      	cmp	r4, #0
 800da80:	f43f af60 	beq.w	800d944 <_dtoa_r+0x354>
 800da84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da8c:	e75a      	b.n	800d944 <_dtoa_r+0x354>
 800da8e:	07cf      	lsls	r7, r1, #31
 800da90:	d509      	bpl.n	800daa6 <_dtoa_r+0x4b6>
 800da92:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800da96:	ed90 7b00 	vldr	d7, [r0]
 800da9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da9e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800daa2:	3201      	adds	r2, #1
 800daa4:	2401      	movs	r4, #1
 800daa6:	1049      	asrs	r1, r1, #1
 800daa8:	3008      	adds	r0, #8
 800daaa:	e7e7      	b.n	800da7c <_dtoa_r+0x48c>
 800daac:	2202      	movs	r2, #2
 800daae:	e749      	b.n	800d944 <_dtoa_r+0x354>
 800dab0:	465f      	mov	r7, fp
 800dab2:	4648      	mov	r0, r9
 800dab4:	e765      	b.n	800d982 <_dtoa_r+0x392>
 800dab6:	ec42 1b17 	vmov	d7, r1, r2
 800daba:	4a5c      	ldr	r2, [pc, #368]	; (800dc2c <_dtoa_r+0x63c>)
 800dabc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dac0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dac4:	9a00      	ldr	r2, [sp, #0]
 800dac6:	1814      	adds	r4, r2, r0
 800dac8:	9a08      	ldr	r2, [sp, #32]
 800daca:	b352      	cbz	r2, 800db22 <_dtoa_r+0x532>
 800dacc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dad0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dad4:	f8dd 8000 	ldr.w	r8, [sp]
 800dad8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dadc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dae0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dae4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dae8:	ee14 2a90 	vmov	r2, s9
 800daec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800daf0:	3230      	adds	r2, #48	; 0x30
 800daf2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800daf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dafe:	f808 2b01 	strb.w	r2, [r8], #1
 800db02:	d439      	bmi.n	800db78 <_dtoa_r+0x588>
 800db04:	ee32 5b46 	vsub.f64	d5, d2, d6
 800db08:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800db0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db10:	d472      	bmi.n	800dbf8 <_dtoa_r+0x608>
 800db12:	45a0      	cmp	r8, r4
 800db14:	f43f af5d 	beq.w	800d9d2 <_dtoa_r+0x3e2>
 800db18:	ee27 7b03 	vmul.f64	d7, d7, d3
 800db1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db20:	e7e0      	b.n	800dae4 <_dtoa_r+0x4f4>
 800db22:	f8dd 8000 	ldr.w	r8, [sp]
 800db26:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db2a:	4621      	mov	r1, r4
 800db2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800db30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db34:	ee14 2a90 	vmov	r2, s9
 800db38:	3230      	adds	r2, #48	; 0x30
 800db3a:	f808 2b01 	strb.w	r2, [r8], #1
 800db3e:	45a0      	cmp	r8, r4
 800db40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db44:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db48:	d118      	bne.n	800db7c <_dtoa_r+0x58c>
 800db4a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800db4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800db52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5a:	dc4d      	bgt.n	800dbf8 <_dtoa_r+0x608>
 800db5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db68:	f57f af33 	bpl.w	800d9d2 <_dtoa_r+0x3e2>
 800db6c:	4688      	mov	r8, r1
 800db6e:	3901      	subs	r1, #1
 800db70:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800db74:	2b30      	cmp	r3, #48	; 0x30
 800db76:	d0f9      	beq.n	800db6c <_dtoa_r+0x57c>
 800db78:	46bb      	mov	fp, r7
 800db7a:	e02a      	b.n	800dbd2 <_dtoa_r+0x5e2>
 800db7c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db80:	e7d6      	b.n	800db30 <_dtoa_r+0x540>
 800db82:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db86:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800db8a:	f8dd 8000 	ldr.w	r8, [sp]
 800db8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800db92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800db96:	ee15 3a10 	vmov	r3, s10
 800db9a:	3330      	adds	r3, #48	; 0x30
 800db9c:	f808 3b01 	strb.w	r3, [r8], #1
 800dba0:	9b00      	ldr	r3, [sp, #0]
 800dba2:	eba8 0303 	sub.w	r3, r8, r3
 800dba6:	4599      	cmp	r9, r3
 800dba8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dbac:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dbb0:	d133      	bne.n	800dc1a <_dtoa_r+0x62a>
 800dbb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dbb6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbbe:	dc1a      	bgt.n	800dbf6 <_dtoa_r+0x606>
 800dbc0:	eeb4 7b46 	vcmp.f64	d7, d6
 800dbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc8:	d103      	bne.n	800dbd2 <_dtoa_r+0x5e2>
 800dbca:	ee15 3a10 	vmov	r3, s10
 800dbce:	07d9      	lsls	r1, r3, #31
 800dbd0:	d411      	bmi.n	800dbf6 <_dtoa_r+0x606>
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f001 f87d 	bl	800ecd4 <_Bfree>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbde:	f888 3000 	strb.w	r3, [r8]
 800dbe2:	f10b 0301 	add.w	r3, fp, #1
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f43f ad4d 	beq.w	800d68a <_dtoa_r+0x9a>
 800dbf0:	f8c3 8000 	str.w	r8, [r3]
 800dbf4:	e549      	b.n	800d68a <_dtoa_r+0x9a>
 800dbf6:	465f      	mov	r7, fp
 800dbf8:	4643      	mov	r3, r8
 800dbfa:	4698      	mov	r8, r3
 800dbfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc00:	2a39      	cmp	r2, #57	; 0x39
 800dc02:	d106      	bne.n	800dc12 <_dtoa_r+0x622>
 800dc04:	9a00      	ldr	r2, [sp, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d1f7      	bne.n	800dbfa <_dtoa_r+0x60a>
 800dc0a:	9900      	ldr	r1, [sp, #0]
 800dc0c:	2230      	movs	r2, #48	; 0x30
 800dc0e:	3701      	adds	r7, #1
 800dc10:	700a      	strb	r2, [r1, #0]
 800dc12:	781a      	ldrb	r2, [r3, #0]
 800dc14:	3201      	adds	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]
 800dc18:	e7ae      	b.n	800db78 <_dtoa_r+0x588>
 800dc1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc26:	d1b2      	bne.n	800db8e <_dtoa_r+0x59e>
 800dc28:	e7d3      	b.n	800dbd2 <_dtoa_r+0x5e2>
 800dc2a:	bf00      	nop
 800dc2c:	08010928 	.word	0x08010928
 800dc30:	08010900 	.word	0x08010900
 800dc34:	9908      	ldr	r1, [sp, #32]
 800dc36:	2900      	cmp	r1, #0
 800dc38:	f000 80d1 	beq.w	800ddde <_dtoa_r+0x7ee>
 800dc3c:	9907      	ldr	r1, [sp, #28]
 800dc3e:	2901      	cmp	r1, #1
 800dc40:	f300 80b4 	bgt.w	800ddac <_dtoa_r+0x7bc>
 800dc44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dc46:	2900      	cmp	r1, #0
 800dc48:	f000 80ac 	beq.w	800dda4 <_dtoa_r+0x7b4>
 800dc4c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dc54:	461c      	mov	r4, r3
 800dc56:	930a      	str	r3, [sp, #40]	; 0x28
 800dc58:	9b05      	ldr	r3, [sp, #20]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	9b06      	ldr	r3, [sp, #24]
 800dc60:	2101      	movs	r1, #1
 800dc62:	4413      	add	r3, r2
 800dc64:	4630      	mov	r0, r6
 800dc66:	9306      	str	r3, [sp, #24]
 800dc68:	f001 f93a 	bl	800eee0 <__i2b>
 800dc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc6e:	4607      	mov	r7, r0
 800dc70:	f1b8 0f00 	cmp.w	r8, #0
 800dc74:	dd0d      	ble.n	800dc92 <_dtoa_r+0x6a2>
 800dc76:	9a06      	ldr	r2, [sp, #24]
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	dd0a      	ble.n	800dc92 <_dtoa_r+0x6a2>
 800dc7c:	4542      	cmp	r2, r8
 800dc7e:	9905      	ldr	r1, [sp, #20]
 800dc80:	bfa8      	it	ge
 800dc82:	4642      	movge	r2, r8
 800dc84:	1a89      	subs	r1, r1, r2
 800dc86:	9105      	str	r1, [sp, #20]
 800dc88:	9906      	ldr	r1, [sp, #24]
 800dc8a:	eba8 0802 	sub.w	r8, r8, r2
 800dc8e:	1a8a      	subs	r2, r1, r2
 800dc90:	9206      	str	r2, [sp, #24]
 800dc92:	b303      	cbz	r3, 800dcd6 <_dtoa_r+0x6e6>
 800dc94:	9a08      	ldr	r2, [sp, #32]
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	f000 80a6 	beq.w	800dde8 <_dtoa_r+0x7f8>
 800dc9c:	2c00      	cmp	r4, #0
 800dc9e:	dd13      	ble.n	800dcc8 <_dtoa_r+0x6d8>
 800dca0:	4639      	mov	r1, r7
 800dca2:	4622      	mov	r2, r4
 800dca4:	4630      	mov	r0, r6
 800dca6:	930c      	str	r3, [sp, #48]	; 0x30
 800dca8:	f001 f9d6 	bl	800f058 <__pow5mult>
 800dcac:	462a      	mov	r2, r5
 800dcae:	4601      	mov	r1, r0
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f001 f92a 	bl	800ef0c <__multiply>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	900a      	str	r0, [sp, #40]	; 0x28
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	f001 f809 	bl	800ecd4 <_Bfree>
 800dcc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcc6:	4615      	mov	r5, r2
 800dcc8:	1b1a      	subs	r2, r3, r4
 800dcca:	d004      	beq.n	800dcd6 <_dtoa_r+0x6e6>
 800dccc:	4629      	mov	r1, r5
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f001 f9c2 	bl	800f058 <__pow5mult>
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	4630      	mov	r0, r6
 800dcda:	f001 f901 	bl	800eee0 <__i2b>
 800dcde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	4604      	mov	r4, r0
 800dce4:	f340 8082 	ble.w	800ddec <_dtoa_r+0x7fc>
 800dce8:	461a      	mov	r2, r3
 800dcea:	4601      	mov	r1, r0
 800dcec:	4630      	mov	r0, r6
 800dcee:	f001 f9b3 	bl	800f058 <__pow5mult>
 800dcf2:	9b07      	ldr	r3, [sp, #28]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	dd7b      	ble.n	800ddf2 <_dtoa_r+0x802>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	930a      	str	r3, [sp, #40]	; 0x28
 800dcfe:	6922      	ldr	r2, [r4, #16]
 800dd00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dd04:	6910      	ldr	r0, [r2, #16]
 800dd06:	f001 f89b 	bl	800ee40 <__hi0bits>
 800dd0a:	f1c0 0020 	rsb	r0, r0, #32
 800dd0e:	9b06      	ldr	r3, [sp, #24]
 800dd10:	4418      	add	r0, r3
 800dd12:	f010 001f 	ands.w	r0, r0, #31
 800dd16:	f000 808d 	beq.w	800de34 <_dtoa_r+0x844>
 800dd1a:	f1c0 0220 	rsb	r2, r0, #32
 800dd1e:	2a04      	cmp	r2, #4
 800dd20:	f340 8086 	ble.w	800de30 <_dtoa_r+0x840>
 800dd24:	f1c0 001c 	rsb	r0, r0, #28
 800dd28:	9b05      	ldr	r3, [sp, #20]
 800dd2a:	4403      	add	r3, r0
 800dd2c:	9305      	str	r3, [sp, #20]
 800dd2e:	9b06      	ldr	r3, [sp, #24]
 800dd30:	4403      	add	r3, r0
 800dd32:	4480      	add	r8, r0
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	9b05      	ldr	r3, [sp, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	dd05      	ble.n	800dd48 <_dtoa_r+0x758>
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	461a      	mov	r2, r3
 800dd40:	4630      	mov	r0, r6
 800dd42:	f001 f9e3 	bl	800f10c <__lshift>
 800dd46:	4605      	mov	r5, r0
 800dd48:	9b06      	ldr	r3, [sp, #24]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	dd05      	ble.n	800dd5a <_dtoa_r+0x76a>
 800dd4e:	4621      	mov	r1, r4
 800dd50:	461a      	mov	r2, r3
 800dd52:	4630      	mov	r0, r6
 800dd54:	f001 f9da 	bl	800f10c <__lshift>
 800dd58:	4604      	mov	r4, r0
 800dd5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d06b      	beq.n	800de38 <_dtoa_r+0x848>
 800dd60:	4621      	mov	r1, r4
 800dd62:	4628      	mov	r0, r5
 800dd64:	f001 fa3e 	bl	800f1e4 <__mcmp>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	da65      	bge.n	800de38 <_dtoa_r+0x848>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4629      	mov	r1, r5
 800dd70:	220a      	movs	r2, #10
 800dd72:	4630      	mov	r0, r6
 800dd74:	f000 ffd0 	bl	800ed18 <__multadd>
 800dd78:	9b08      	ldr	r3, [sp, #32]
 800dd7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd7e:	4605      	mov	r5, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 8192 	beq.w	800e0aa <_dtoa_r+0xaba>
 800dd86:	4639      	mov	r1, r7
 800dd88:	2300      	movs	r3, #0
 800dd8a:	220a      	movs	r2, #10
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f000 ffc3 	bl	800ed18 <__multadd>
 800dd92:	f1ba 0f00 	cmp.w	sl, #0
 800dd96:	4607      	mov	r7, r0
 800dd98:	f300 808e 	bgt.w	800deb8 <_dtoa_r+0x8c8>
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	dc51      	bgt.n	800de46 <_dtoa_r+0x856>
 800dda2:	e089      	b.n	800deb8 <_dtoa_r+0x8c8>
 800dda4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dda6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ddaa:	e751      	b.n	800dc50 <_dtoa_r+0x660>
 800ddac:	f109 34ff 	add.w	r4, r9, #4294967295
 800ddb0:	42a3      	cmp	r3, r4
 800ddb2:	bfbf      	itttt	lt
 800ddb4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ddb6:	1ae3      	sublt	r3, r4, r3
 800ddb8:	18d2      	addlt	r2, r2, r3
 800ddba:	4613      	movlt	r3, r2
 800ddbc:	bfb7      	itett	lt
 800ddbe:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ddc0:	1b1c      	subge	r4, r3, r4
 800ddc2:	4623      	movlt	r3, r4
 800ddc4:	2400      	movlt	r4, #0
 800ddc6:	f1b9 0f00 	cmp.w	r9, #0
 800ddca:	bfb5      	itete	lt
 800ddcc:	9a05      	ldrlt	r2, [sp, #20]
 800ddce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800ddd2:	eba2 0809 	sublt.w	r8, r2, r9
 800ddd6:	464a      	movge	r2, r9
 800ddd8:	bfb8      	it	lt
 800ddda:	2200      	movlt	r2, #0
 800dddc:	e73b      	b.n	800dc56 <_dtoa_r+0x666>
 800ddde:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dde2:	9f08      	ldr	r7, [sp, #32]
 800dde4:	461c      	mov	r4, r3
 800dde6:	e743      	b.n	800dc70 <_dtoa_r+0x680>
 800dde8:	461a      	mov	r2, r3
 800ddea:	e76f      	b.n	800dccc <_dtoa_r+0x6dc>
 800ddec:	9b07      	ldr	r3, [sp, #28]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	dc18      	bgt.n	800de24 <_dtoa_r+0x834>
 800ddf2:	9b02      	ldr	r3, [sp, #8]
 800ddf4:	b9b3      	cbnz	r3, 800de24 <_dtoa_r+0x834>
 800ddf6:	9b03      	ldr	r3, [sp, #12]
 800ddf8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ddfc:	b9a2      	cbnz	r2, 800de28 <_dtoa_r+0x838>
 800ddfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800de02:	0d12      	lsrs	r2, r2, #20
 800de04:	0512      	lsls	r2, r2, #20
 800de06:	b18a      	cbz	r2, 800de2c <_dtoa_r+0x83c>
 800de08:	9b05      	ldr	r3, [sp, #20]
 800de0a:	3301      	adds	r3, #1
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	9b06      	ldr	r3, [sp, #24]
 800de10:	3301      	adds	r3, #1
 800de12:	9306      	str	r3, [sp, #24]
 800de14:	2301      	movs	r3, #1
 800de16:	930a      	str	r3, [sp, #40]	; 0x28
 800de18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f47f af6f 	bne.w	800dcfe <_dtoa_r+0x70e>
 800de20:	2001      	movs	r0, #1
 800de22:	e774      	b.n	800dd0e <_dtoa_r+0x71e>
 800de24:	2300      	movs	r3, #0
 800de26:	e7f6      	b.n	800de16 <_dtoa_r+0x826>
 800de28:	9b02      	ldr	r3, [sp, #8]
 800de2a:	e7f4      	b.n	800de16 <_dtoa_r+0x826>
 800de2c:	920a      	str	r2, [sp, #40]	; 0x28
 800de2e:	e7f3      	b.n	800de18 <_dtoa_r+0x828>
 800de30:	d081      	beq.n	800dd36 <_dtoa_r+0x746>
 800de32:	4610      	mov	r0, r2
 800de34:	301c      	adds	r0, #28
 800de36:	e777      	b.n	800dd28 <_dtoa_r+0x738>
 800de38:	f1b9 0f00 	cmp.w	r9, #0
 800de3c:	dc37      	bgt.n	800deae <_dtoa_r+0x8be>
 800de3e:	9b07      	ldr	r3, [sp, #28]
 800de40:	2b02      	cmp	r3, #2
 800de42:	dd34      	ble.n	800deae <_dtoa_r+0x8be>
 800de44:	46ca      	mov	sl, r9
 800de46:	f1ba 0f00 	cmp.w	sl, #0
 800de4a:	d10d      	bne.n	800de68 <_dtoa_r+0x878>
 800de4c:	4621      	mov	r1, r4
 800de4e:	4653      	mov	r3, sl
 800de50:	2205      	movs	r2, #5
 800de52:	4630      	mov	r0, r6
 800de54:	f000 ff60 	bl	800ed18 <__multadd>
 800de58:	4601      	mov	r1, r0
 800de5a:	4604      	mov	r4, r0
 800de5c:	4628      	mov	r0, r5
 800de5e:	f001 f9c1 	bl	800f1e4 <__mcmp>
 800de62:	2800      	cmp	r0, #0
 800de64:	f73f adde 	bgt.w	800da24 <_dtoa_r+0x434>
 800de68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de6a:	f8dd 8000 	ldr.w	r8, [sp]
 800de6e:	ea6f 0b03 	mvn.w	fp, r3
 800de72:	f04f 0900 	mov.w	r9, #0
 800de76:	4621      	mov	r1, r4
 800de78:	4630      	mov	r0, r6
 800de7a:	f000 ff2b 	bl	800ecd4 <_Bfree>
 800de7e:	2f00      	cmp	r7, #0
 800de80:	f43f aea7 	beq.w	800dbd2 <_dtoa_r+0x5e2>
 800de84:	f1b9 0f00 	cmp.w	r9, #0
 800de88:	d005      	beq.n	800de96 <_dtoa_r+0x8a6>
 800de8a:	45b9      	cmp	r9, r7
 800de8c:	d003      	beq.n	800de96 <_dtoa_r+0x8a6>
 800de8e:	4649      	mov	r1, r9
 800de90:	4630      	mov	r0, r6
 800de92:	f000 ff1f 	bl	800ecd4 <_Bfree>
 800de96:	4639      	mov	r1, r7
 800de98:	4630      	mov	r0, r6
 800de9a:	f000 ff1b 	bl	800ecd4 <_Bfree>
 800de9e:	e698      	b.n	800dbd2 <_dtoa_r+0x5e2>
 800dea0:	2400      	movs	r4, #0
 800dea2:	4627      	mov	r7, r4
 800dea4:	e7e0      	b.n	800de68 <_dtoa_r+0x878>
 800dea6:	46bb      	mov	fp, r7
 800dea8:	4604      	mov	r4, r0
 800deaa:	4607      	mov	r7, r0
 800deac:	e5ba      	b.n	800da24 <_dtoa_r+0x434>
 800deae:	9b08      	ldr	r3, [sp, #32]
 800deb0:	46ca      	mov	sl, r9
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f000 8100 	beq.w	800e0b8 <_dtoa_r+0xac8>
 800deb8:	f1b8 0f00 	cmp.w	r8, #0
 800debc:	dd05      	ble.n	800deca <_dtoa_r+0x8da>
 800debe:	4639      	mov	r1, r7
 800dec0:	4642      	mov	r2, r8
 800dec2:	4630      	mov	r0, r6
 800dec4:	f001 f922 	bl	800f10c <__lshift>
 800dec8:	4607      	mov	r7, r0
 800deca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800decc:	2b00      	cmp	r3, #0
 800dece:	d05d      	beq.n	800df8c <_dtoa_r+0x99c>
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 febe 	bl	800ec54 <_Balloc>
 800ded8:	4680      	mov	r8, r0
 800deda:	b928      	cbnz	r0, 800dee8 <_dtoa_r+0x8f8>
 800dedc:	4b82      	ldr	r3, [pc, #520]	; (800e0e8 <_dtoa_r+0xaf8>)
 800dede:	4602      	mov	r2, r0
 800dee0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dee4:	f7ff bb9a 	b.w	800d61c <_dtoa_r+0x2c>
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	3202      	adds	r2, #2
 800deec:	0092      	lsls	r2, r2, #2
 800deee:	f107 010c 	add.w	r1, r7, #12
 800def2:	300c      	adds	r0, #12
 800def4:	f7fd faa2 	bl	800b43c <memcpy>
 800def8:	2201      	movs	r2, #1
 800defa:	4641      	mov	r1, r8
 800defc:	4630      	mov	r0, r6
 800defe:	f001 f905 	bl	800f10c <__lshift>
 800df02:	9b00      	ldr	r3, [sp, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	9305      	str	r3, [sp, #20]
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	4453      	add	r3, sl
 800df0c:	9309      	str	r3, [sp, #36]	; 0x24
 800df0e:	9b02      	ldr	r3, [sp, #8]
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	46b9      	mov	r9, r7
 800df16:	9308      	str	r3, [sp, #32]
 800df18:	4607      	mov	r7, r0
 800df1a:	9b05      	ldr	r3, [sp, #20]
 800df1c:	4621      	mov	r1, r4
 800df1e:	3b01      	subs	r3, #1
 800df20:	4628      	mov	r0, r5
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	f7ff fad9 	bl	800d4da <quorem>
 800df28:	4603      	mov	r3, r0
 800df2a:	3330      	adds	r3, #48	; 0x30
 800df2c:	9006      	str	r0, [sp, #24]
 800df2e:	4649      	mov	r1, r9
 800df30:	4628      	mov	r0, r5
 800df32:	930a      	str	r3, [sp, #40]	; 0x28
 800df34:	f001 f956 	bl	800f1e4 <__mcmp>
 800df38:	463a      	mov	r2, r7
 800df3a:	4682      	mov	sl, r0
 800df3c:	4621      	mov	r1, r4
 800df3e:	4630      	mov	r0, r6
 800df40:	f001 f96c 	bl	800f21c <__mdiff>
 800df44:	68c2      	ldr	r2, [r0, #12]
 800df46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df48:	4680      	mov	r8, r0
 800df4a:	bb0a      	cbnz	r2, 800df90 <_dtoa_r+0x9a0>
 800df4c:	4601      	mov	r1, r0
 800df4e:	4628      	mov	r0, r5
 800df50:	f001 f948 	bl	800f1e4 <__mcmp>
 800df54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df56:	4602      	mov	r2, r0
 800df58:	4641      	mov	r1, r8
 800df5a:	4630      	mov	r0, r6
 800df5c:	920e      	str	r2, [sp, #56]	; 0x38
 800df5e:	930a      	str	r3, [sp, #40]	; 0x28
 800df60:	f000 feb8 	bl	800ecd4 <_Bfree>
 800df64:	9b07      	ldr	r3, [sp, #28]
 800df66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800df6c:	ea43 0102 	orr.w	r1, r3, r2
 800df70:	9b08      	ldr	r3, [sp, #32]
 800df72:	430b      	orrs	r3, r1
 800df74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df76:	d10d      	bne.n	800df94 <_dtoa_r+0x9a4>
 800df78:	2b39      	cmp	r3, #57	; 0x39
 800df7a:	d029      	beq.n	800dfd0 <_dtoa_r+0x9e0>
 800df7c:	f1ba 0f00 	cmp.w	sl, #0
 800df80:	dd01      	ble.n	800df86 <_dtoa_r+0x996>
 800df82:	9b06      	ldr	r3, [sp, #24]
 800df84:	3331      	adds	r3, #49	; 0x31
 800df86:	9a02      	ldr	r2, [sp, #8]
 800df88:	7013      	strb	r3, [r2, #0]
 800df8a:	e774      	b.n	800de76 <_dtoa_r+0x886>
 800df8c:	4638      	mov	r0, r7
 800df8e:	e7b8      	b.n	800df02 <_dtoa_r+0x912>
 800df90:	2201      	movs	r2, #1
 800df92:	e7e1      	b.n	800df58 <_dtoa_r+0x968>
 800df94:	f1ba 0f00 	cmp.w	sl, #0
 800df98:	db06      	blt.n	800dfa8 <_dtoa_r+0x9b8>
 800df9a:	9907      	ldr	r1, [sp, #28]
 800df9c:	ea41 0a0a 	orr.w	sl, r1, sl
 800dfa0:	9908      	ldr	r1, [sp, #32]
 800dfa2:	ea5a 0101 	orrs.w	r1, sl, r1
 800dfa6:	d120      	bne.n	800dfea <_dtoa_r+0x9fa>
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	ddec      	ble.n	800df86 <_dtoa_r+0x996>
 800dfac:	4629      	mov	r1, r5
 800dfae:	2201      	movs	r2, #1
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	9305      	str	r3, [sp, #20]
 800dfb4:	f001 f8aa 	bl	800f10c <__lshift>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4605      	mov	r5, r0
 800dfbc:	f001 f912 	bl	800f1e4 <__mcmp>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	9b05      	ldr	r3, [sp, #20]
 800dfc4:	dc02      	bgt.n	800dfcc <_dtoa_r+0x9dc>
 800dfc6:	d1de      	bne.n	800df86 <_dtoa_r+0x996>
 800dfc8:	07da      	lsls	r2, r3, #31
 800dfca:	d5dc      	bpl.n	800df86 <_dtoa_r+0x996>
 800dfcc:	2b39      	cmp	r3, #57	; 0x39
 800dfce:	d1d8      	bne.n	800df82 <_dtoa_r+0x992>
 800dfd0:	9a02      	ldr	r2, [sp, #8]
 800dfd2:	2339      	movs	r3, #57	; 0x39
 800dfd4:	7013      	strb	r3, [r2, #0]
 800dfd6:	4643      	mov	r3, r8
 800dfd8:	4698      	mov	r8, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dfe0:	2a39      	cmp	r2, #57	; 0x39
 800dfe2:	d051      	beq.n	800e088 <_dtoa_r+0xa98>
 800dfe4:	3201      	adds	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	e745      	b.n	800de76 <_dtoa_r+0x886>
 800dfea:	2a00      	cmp	r2, #0
 800dfec:	dd03      	ble.n	800dff6 <_dtoa_r+0xa06>
 800dfee:	2b39      	cmp	r3, #57	; 0x39
 800dff0:	d0ee      	beq.n	800dfd0 <_dtoa_r+0x9e0>
 800dff2:	3301      	adds	r3, #1
 800dff4:	e7c7      	b.n	800df86 <_dtoa_r+0x996>
 800dff6:	9a05      	ldr	r2, [sp, #20]
 800dff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dffa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dffe:	428a      	cmp	r2, r1
 800e000:	d02b      	beq.n	800e05a <_dtoa_r+0xa6a>
 800e002:	4629      	mov	r1, r5
 800e004:	2300      	movs	r3, #0
 800e006:	220a      	movs	r2, #10
 800e008:	4630      	mov	r0, r6
 800e00a:	f000 fe85 	bl	800ed18 <__multadd>
 800e00e:	45b9      	cmp	r9, r7
 800e010:	4605      	mov	r5, r0
 800e012:	f04f 0300 	mov.w	r3, #0
 800e016:	f04f 020a 	mov.w	r2, #10
 800e01a:	4649      	mov	r1, r9
 800e01c:	4630      	mov	r0, r6
 800e01e:	d107      	bne.n	800e030 <_dtoa_r+0xa40>
 800e020:	f000 fe7a 	bl	800ed18 <__multadd>
 800e024:	4681      	mov	r9, r0
 800e026:	4607      	mov	r7, r0
 800e028:	9b05      	ldr	r3, [sp, #20]
 800e02a:	3301      	adds	r3, #1
 800e02c:	9305      	str	r3, [sp, #20]
 800e02e:	e774      	b.n	800df1a <_dtoa_r+0x92a>
 800e030:	f000 fe72 	bl	800ed18 <__multadd>
 800e034:	4639      	mov	r1, r7
 800e036:	4681      	mov	r9, r0
 800e038:	2300      	movs	r3, #0
 800e03a:	220a      	movs	r2, #10
 800e03c:	4630      	mov	r0, r6
 800e03e:	f000 fe6b 	bl	800ed18 <__multadd>
 800e042:	4607      	mov	r7, r0
 800e044:	e7f0      	b.n	800e028 <_dtoa_r+0xa38>
 800e046:	f1ba 0f00 	cmp.w	sl, #0
 800e04a:	9a00      	ldr	r2, [sp, #0]
 800e04c:	bfcc      	ite	gt
 800e04e:	46d0      	movgt	r8, sl
 800e050:	f04f 0801 	movle.w	r8, #1
 800e054:	4490      	add	r8, r2
 800e056:	f04f 0900 	mov.w	r9, #0
 800e05a:	4629      	mov	r1, r5
 800e05c:	2201      	movs	r2, #1
 800e05e:	4630      	mov	r0, r6
 800e060:	9302      	str	r3, [sp, #8]
 800e062:	f001 f853 	bl	800f10c <__lshift>
 800e066:	4621      	mov	r1, r4
 800e068:	4605      	mov	r5, r0
 800e06a:	f001 f8bb 	bl	800f1e4 <__mcmp>
 800e06e:	2800      	cmp	r0, #0
 800e070:	dcb1      	bgt.n	800dfd6 <_dtoa_r+0x9e6>
 800e072:	d102      	bne.n	800e07a <_dtoa_r+0xa8a>
 800e074:	9b02      	ldr	r3, [sp, #8]
 800e076:	07db      	lsls	r3, r3, #31
 800e078:	d4ad      	bmi.n	800dfd6 <_dtoa_r+0x9e6>
 800e07a:	4643      	mov	r3, r8
 800e07c:	4698      	mov	r8, r3
 800e07e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e082:	2a30      	cmp	r2, #48	; 0x30
 800e084:	d0fa      	beq.n	800e07c <_dtoa_r+0xa8c>
 800e086:	e6f6      	b.n	800de76 <_dtoa_r+0x886>
 800e088:	9a00      	ldr	r2, [sp, #0]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d1a4      	bne.n	800dfd8 <_dtoa_r+0x9e8>
 800e08e:	f10b 0b01 	add.w	fp, fp, #1
 800e092:	2331      	movs	r3, #49	; 0x31
 800e094:	e778      	b.n	800df88 <_dtoa_r+0x998>
 800e096:	4b15      	ldr	r3, [pc, #84]	; (800e0ec <_dtoa_r+0xafc>)
 800e098:	f7ff bb12 	b.w	800d6c0 <_dtoa_r+0xd0>
 800e09c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f47f aaee 	bne.w	800d680 <_dtoa_r+0x90>
 800e0a4:	4b12      	ldr	r3, [pc, #72]	; (800e0f0 <_dtoa_r+0xb00>)
 800e0a6:	f7ff bb0b 	b.w	800d6c0 <_dtoa_r+0xd0>
 800e0aa:	f1ba 0f00 	cmp.w	sl, #0
 800e0ae:	dc03      	bgt.n	800e0b8 <_dtoa_r+0xac8>
 800e0b0:	9b07      	ldr	r3, [sp, #28]
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	f73f aec7 	bgt.w	800de46 <_dtoa_r+0x856>
 800e0b8:	f8dd 8000 	ldr.w	r8, [sp]
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7ff fa0b 	bl	800d4da <quorem>
 800e0c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e0c8:	f808 3b01 	strb.w	r3, [r8], #1
 800e0cc:	9a00      	ldr	r2, [sp, #0]
 800e0ce:	eba8 0202 	sub.w	r2, r8, r2
 800e0d2:	4592      	cmp	sl, r2
 800e0d4:	ddb7      	ble.n	800e046 <_dtoa_r+0xa56>
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	2300      	movs	r3, #0
 800e0da:	220a      	movs	r2, #10
 800e0dc:	4630      	mov	r0, r6
 800e0de:	f000 fe1b 	bl	800ed18 <__multadd>
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	e7ea      	b.n	800e0bc <_dtoa_r+0xacc>
 800e0e6:	bf00      	nop
 800e0e8:	080107ac 	.word	0x080107ac
 800e0ec:	080105a9 	.word	0x080105a9
 800e0f0:	08010729 	.word	0x08010729

0800e0f4 <__sflush_r>:
 800e0f4:	898a      	ldrh	r2, [r1, #12]
 800e0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	0710      	lsls	r0, r2, #28
 800e0fe:	460c      	mov	r4, r1
 800e100:	d458      	bmi.n	800e1b4 <__sflush_r+0xc0>
 800e102:	684b      	ldr	r3, [r1, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	dc05      	bgt.n	800e114 <__sflush_r+0x20>
 800e108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dc02      	bgt.n	800e114 <__sflush_r+0x20>
 800e10e:	2000      	movs	r0, #0
 800e110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e116:	2e00      	cmp	r6, #0
 800e118:	d0f9      	beq.n	800e10e <__sflush_r+0x1a>
 800e11a:	2300      	movs	r3, #0
 800e11c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e120:	682f      	ldr	r7, [r5, #0]
 800e122:	602b      	str	r3, [r5, #0]
 800e124:	d032      	beq.n	800e18c <__sflush_r+0x98>
 800e126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	075a      	lsls	r2, r3, #29
 800e12c:	d505      	bpl.n	800e13a <__sflush_r+0x46>
 800e12e:	6863      	ldr	r3, [r4, #4]
 800e130:	1ac0      	subs	r0, r0, r3
 800e132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e134:	b10b      	cbz	r3, 800e13a <__sflush_r+0x46>
 800e136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e138:	1ac0      	subs	r0, r0, r3
 800e13a:	2300      	movs	r3, #0
 800e13c:	4602      	mov	r2, r0
 800e13e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e140:	6a21      	ldr	r1, [r4, #32]
 800e142:	4628      	mov	r0, r5
 800e144:	47b0      	blx	r6
 800e146:	1c43      	adds	r3, r0, #1
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	d106      	bne.n	800e15a <__sflush_r+0x66>
 800e14c:	6829      	ldr	r1, [r5, #0]
 800e14e:	291d      	cmp	r1, #29
 800e150:	d82c      	bhi.n	800e1ac <__sflush_r+0xb8>
 800e152:	4a2a      	ldr	r2, [pc, #168]	; (800e1fc <__sflush_r+0x108>)
 800e154:	40ca      	lsrs	r2, r1
 800e156:	07d6      	lsls	r6, r2, #31
 800e158:	d528      	bpl.n	800e1ac <__sflush_r+0xb8>
 800e15a:	2200      	movs	r2, #0
 800e15c:	6062      	str	r2, [r4, #4]
 800e15e:	04d9      	lsls	r1, r3, #19
 800e160:	6922      	ldr	r2, [r4, #16]
 800e162:	6022      	str	r2, [r4, #0]
 800e164:	d504      	bpl.n	800e170 <__sflush_r+0x7c>
 800e166:	1c42      	adds	r2, r0, #1
 800e168:	d101      	bne.n	800e16e <__sflush_r+0x7a>
 800e16a:	682b      	ldr	r3, [r5, #0]
 800e16c:	b903      	cbnz	r3, 800e170 <__sflush_r+0x7c>
 800e16e:	6560      	str	r0, [r4, #84]	; 0x54
 800e170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e172:	602f      	str	r7, [r5, #0]
 800e174:	2900      	cmp	r1, #0
 800e176:	d0ca      	beq.n	800e10e <__sflush_r+0x1a>
 800e178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e17c:	4299      	cmp	r1, r3
 800e17e:	d002      	beq.n	800e186 <__sflush_r+0x92>
 800e180:	4628      	mov	r0, r5
 800e182:	f7fd f98b 	bl	800b49c <_free_r>
 800e186:	2000      	movs	r0, #0
 800e188:	6360      	str	r0, [r4, #52]	; 0x34
 800e18a:	e7c1      	b.n	800e110 <__sflush_r+0x1c>
 800e18c:	6a21      	ldr	r1, [r4, #32]
 800e18e:	2301      	movs	r3, #1
 800e190:	4628      	mov	r0, r5
 800e192:	47b0      	blx	r6
 800e194:	1c41      	adds	r1, r0, #1
 800e196:	d1c7      	bne.n	800e128 <__sflush_r+0x34>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0c4      	beq.n	800e128 <__sflush_r+0x34>
 800e19e:	2b1d      	cmp	r3, #29
 800e1a0:	d001      	beq.n	800e1a6 <__sflush_r+0xb2>
 800e1a2:	2b16      	cmp	r3, #22
 800e1a4:	d101      	bne.n	800e1aa <__sflush_r+0xb6>
 800e1a6:	602f      	str	r7, [r5, #0]
 800e1a8:	e7b1      	b.n	800e10e <__sflush_r+0x1a>
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	e7ad      	b.n	800e110 <__sflush_r+0x1c>
 800e1b4:	690f      	ldr	r7, [r1, #16]
 800e1b6:	2f00      	cmp	r7, #0
 800e1b8:	d0a9      	beq.n	800e10e <__sflush_r+0x1a>
 800e1ba:	0793      	lsls	r3, r2, #30
 800e1bc:	680e      	ldr	r6, [r1, #0]
 800e1be:	bf08      	it	eq
 800e1c0:	694b      	ldreq	r3, [r1, #20]
 800e1c2:	600f      	str	r7, [r1, #0]
 800e1c4:	bf18      	it	ne
 800e1c6:	2300      	movne	r3, #0
 800e1c8:	eba6 0807 	sub.w	r8, r6, r7
 800e1cc:	608b      	str	r3, [r1, #8]
 800e1ce:	f1b8 0f00 	cmp.w	r8, #0
 800e1d2:	dd9c      	ble.n	800e10e <__sflush_r+0x1a>
 800e1d4:	6a21      	ldr	r1, [r4, #32]
 800e1d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1d8:	4643      	mov	r3, r8
 800e1da:	463a      	mov	r2, r7
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b0      	blx	r6
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	dc06      	bgt.n	800e1f2 <__sflush_r+0xfe>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ea:	81a3      	strh	r3, [r4, #12]
 800e1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f0:	e78e      	b.n	800e110 <__sflush_r+0x1c>
 800e1f2:	4407      	add	r7, r0
 800e1f4:	eba8 0800 	sub.w	r8, r8, r0
 800e1f8:	e7e9      	b.n	800e1ce <__sflush_r+0xda>
 800e1fa:	bf00      	nop
 800e1fc:	20400001 	.word	0x20400001

0800e200 <_fflush_r>:
 800e200:	b538      	push	{r3, r4, r5, lr}
 800e202:	690b      	ldr	r3, [r1, #16]
 800e204:	4605      	mov	r5, r0
 800e206:	460c      	mov	r4, r1
 800e208:	b913      	cbnz	r3, 800e210 <_fflush_r+0x10>
 800e20a:	2500      	movs	r5, #0
 800e20c:	4628      	mov	r0, r5
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	b118      	cbz	r0, 800e21a <_fflush_r+0x1a>
 800e212:	6983      	ldr	r3, [r0, #24]
 800e214:	b90b      	cbnz	r3, 800e21a <_fflush_r+0x1a>
 800e216:	f000 f887 	bl	800e328 <__sinit>
 800e21a:	4b14      	ldr	r3, [pc, #80]	; (800e26c <_fflush_r+0x6c>)
 800e21c:	429c      	cmp	r4, r3
 800e21e:	d11b      	bne.n	800e258 <_fflush_r+0x58>
 800e220:	686c      	ldr	r4, [r5, #4]
 800e222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0ef      	beq.n	800e20a <_fflush_r+0xa>
 800e22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e22c:	07d0      	lsls	r0, r2, #31
 800e22e:	d404      	bmi.n	800e23a <_fflush_r+0x3a>
 800e230:	0599      	lsls	r1, r3, #22
 800e232:	d402      	bmi.n	800e23a <_fflush_r+0x3a>
 800e234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e236:	f000 fc88 	bl	800eb4a <__retarget_lock_acquire_recursive>
 800e23a:	4628      	mov	r0, r5
 800e23c:	4621      	mov	r1, r4
 800e23e:	f7ff ff59 	bl	800e0f4 <__sflush_r>
 800e242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e244:	07da      	lsls	r2, r3, #31
 800e246:	4605      	mov	r5, r0
 800e248:	d4e0      	bmi.n	800e20c <_fflush_r+0xc>
 800e24a:	89a3      	ldrh	r3, [r4, #12]
 800e24c:	059b      	lsls	r3, r3, #22
 800e24e:	d4dd      	bmi.n	800e20c <_fflush_r+0xc>
 800e250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e252:	f000 fc7b 	bl	800eb4c <__retarget_lock_release_recursive>
 800e256:	e7d9      	b.n	800e20c <_fflush_r+0xc>
 800e258:	4b05      	ldr	r3, [pc, #20]	; (800e270 <_fflush_r+0x70>)
 800e25a:	429c      	cmp	r4, r3
 800e25c:	d101      	bne.n	800e262 <_fflush_r+0x62>
 800e25e:	68ac      	ldr	r4, [r5, #8]
 800e260:	e7df      	b.n	800e222 <_fflush_r+0x22>
 800e262:	4b04      	ldr	r3, [pc, #16]	; (800e274 <_fflush_r+0x74>)
 800e264:	429c      	cmp	r4, r3
 800e266:	bf08      	it	eq
 800e268:	68ec      	ldreq	r4, [r5, #12]
 800e26a:	e7da      	b.n	800e222 <_fflush_r+0x22>
 800e26c:	080107e0 	.word	0x080107e0
 800e270:	08010800 	.word	0x08010800
 800e274:	080107c0 	.word	0x080107c0

0800e278 <std>:
 800e278:	2300      	movs	r3, #0
 800e27a:	b510      	push	{r4, lr}
 800e27c:	4604      	mov	r4, r0
 800e27e:	e9c0 3300 	strd	r3, r3, [r0]
 800e282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e286:	6083      	str	r3, [r0, #8]
 800e288:	8181      	strh	r1, [r0, #12]
 800e28a:	6643      	str	r3, [r0, #100]	; 0x64
 800e28c:	81c2      	strh	r2, [r0, #14]
 800e28e:	6183      	str	r3, [r0, #24]
 800e290:	4619      	mov	r1, r3
 800e292:	2208      	movs	r2, #8
 800e294:	305c      	adds	r0, #92	; 0x5c
 800e296:	f7fd f8f9 	bl	800b48c <memset>
 800e29a:	4b05      	ldr	r3, [pc, #20]	; (800e2b0 <std+0x38>)
 800e29c:	6263      	str	r3, [r4, #36]	; 0x24
 800e29e:	4b05      	ldr	r3, [pc, #20]	; (800e2b4 <std+0x3c>)
 800e2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2a2:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <std+0x40>)
 800e2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2a6:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <std+0x44>)
 800e2a8:	6224      	str	r4, [r4, #32]
 800e2aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	bf00      	nop
 800e2b0:	0800f989 	.word	0x0800f989
 800e2b4:	0800f9ab 	.word	0x0800f9ab
 800e2b8:	0800f9e3 	.word	0x0800f9e3
 800e2bc:	0800fa07 	.word	0x0800fa07

0800e2c0 <_cleanup_r>:
 800e2c0:	4901      	ldr	r1, [pc, #4]	; (800e2c8 <_cleanup_r+0x8>)
 800e2c2:	f000 b8af 	b.w	800e424 <_fwalk_reent>
 800e2c6:	bf00      	nop
 800e2c8:	0800e201 	.word	0x0800e201

0800e2cc <__sfmoreglue>:
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	1e4a      	subs	r2, r1, #1
 800e2d0:	2568      	movs	r5, #104	; 0x68
 800e2d2:	4355      	muls	r5, r2
 800e2d4:	460e      	mov	r6, r1
 800e2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2da:	f7fd f92f 	bl	800b53c <_malloc_r>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	b140      	cbz	r0, 800e2f4 <__sfmoreglue+0x28>
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e2e8:	300c      	adds	r0, #12
 800e2ea:	60a0      	str	r0, [r4, #8]
 800e2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2f0:	f7fd f8cc 	bl	800b48c <memset>
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	bd70      	pop	{r4, r5, r6, pc}

0800e2f8 <__sfp_lock_acquire>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	; (800e300 <__sfp_lock_acquire+0x8>)
 800e2fa:	f000 bc26 	b.w	800eb4a <__retarget_lock_acquire_recursive>
 800e2fe:	bf00      	nop
 800e300:	24000cc8 	.word	0x24000cc8

0800e304 <__sfp_lock_release>:
 800e304:	4801      	ldr	r0, [pc, #4]	; (800e30c <__sfp_lock_release+0x8>)
 800e306:	f000 bc21 	b.w	800eb4c <__retarget_lock_release_recursive>
 800e30a:	bf00      	nop
 800e30c:	24000cc8 	.word	0x24000cc8

0800e310 <__sinit_lock_acquire>:
 800e310:	4801      	ldr	r0, [pc, #4]	; (800e318 <__sinit_lock_acquire+0x8>)
 800e312:	f000 bc1a 	b.w	800eb4a <__retarget_lock_acquire_recursive>
 800e316:	bf00      	nop
 800e318:	24000cc3 	.word	0x24000cc3

0800e31c <__sinit_lock_release>:
 800e31c:	4801      	ldr	r0, [pc, #4]	; (800e324 <__sinit_lock_release+0x8>)
 800e31e:	f000 bc15 	b.w	800eb4c <__retarget_lock_release_recursive>
 800e322:	bf00      	nop
 800e324:	24000cc3 	.word	0x24000cc3

0800e328 <__sinit>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	4604      	mov	r4, r0
 800e32c:	f7ff fff0 	bl	800e310 <__sinit_lock_acquire>
 800e330:	69a3      	ldr	r3, [r4, #24]
 800e332:	b11b      	cbz	r3, 800e33c <__sinit+0x14>
 800e334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e338:	f7ff bff0 	b.w	800e31c <__sinit_lock_release>
 800e33c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e340:	6523      	str	r3, [r4, #80]	; 0x50
 800e342:	4b13      	ldr	r3, [pc, #76]	; (800e390 <__sinit+0x68>)
 800e344:	4a13      	ldr	r2, [pc, #76]	; (800e394 <__sinit+0x6c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	62a2      	str	r2, [r4, #40]	; 0x28
 800e34a:	42a3      	cmp	r3, r4
 800e34c:	bf04      	itt	eq
 800e34e:	2301      	moveq	r3, #1
 800e350:	61a3      	streq	r3, [r4, #24]
 800e352:	4620      	mov	r0, r4
 800e354:	f000 f820 	bl	800e398 <__sfp>
 800e358:	6060      	str	r0, [r4, #4]
 800e35a:	4620      	mov	r0, r4
 800e35c:	f000 f81c 	bl	800e398 <__sfp>
 800e360:	60a0      	str	r0, [r4, #8]
 800e362:	4620      	mov	r0, r4
 800e364:	f000 f818 	bl	800e398 <__sfp>
 800e368:	2200      	movs	r2, #0
 800e36a:	60e0      	str	r0, [r4, #12]
 800e36c:	2104      	movs	r1, #4
 800e36e:	6860      	ldr	r0, [r4, #4]
 800e370:	f7ff ff82 	bl	800e278 <std>
 800e374:	68a0      	ldr	r0, [r4, #8]
 800e376:	2201      	movs	r2, #1
 800e378:	2109      	movs	r1, #9
 800e37a:	f7ff ff7d 	bl	800e278 <std>
 800e37e:	68e0      	ldr	r0, [r4, #12]
 800e380:	2202      	movs	r2, #2
 800e382:	2112      	movs	r1, #18
 800e384:	f7ff ff78 	bl	800e278 <std>
 800e388:	2301      	movs	r3, #1
 800e38a:	61a3      	str	r3, [r4, #24]
 800e38c:	e7d2      	b.n	800e334 <__sinit+0xc>
 800e38e:	bf00      	nop
 800e390:	08010584 	.word	0x08010584
 800e394:	0800e2c1 	.word	0x0800e2c1

0800e398 <__sfp>:
 800e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39a:	4607      	mov	r7, r0
 800e39c:	f7ff ffac 	bl	800e2f8 <__sfp_lock_acquire>
 800e3a0:	4b1e      	ldr	r3, [pc, #120]	; (800e41c <__sfp+0x84>)
 800e3a2:	681e      	ldr	r6, [r3, #0]
 800e3a4:	69b3      	ldr	r3, [r6, #24]
 800e3a6:	b913      	cbnz	r3, 800e3ae <__sfp+0x16>
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7ff ffbd 	bl	800e328 <__sinit>
 800e3ae:	3648      	adds	r6, #72	; 0x48
 800e3b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	d503      	bpl.n	800e3c0 <__sfp+0x28>
 800e3b8:	6833      	ldr	r3, [r6, #0]
 800e3ba:	b30b      	cbz	r3, 800e400 <__sfp+0x68>
 800e3bc:	6836      	ldr	r6, [r6, #0]
 800e3be:	e7f7      	b.n	800e3b0 <__sfp+0x18>
 800e3c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3c4:	b9d5      	cbnz	r5, 800e3fc <__sfp+0x64>
 800e3c6:	4b16      	ldr	r3, [pc, #88]	; (800e420 <__sfp+0x88>)
 800e3c8:	60e3      	str	r3, [r4, #12]
 800e3ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3ce:	6665      	str	r5, [r4, #100]	; 0x64
 800e3d0:	f000 fbba 	bl	800eb48 <__retarget_lock_init_recursive>
 800e3d4:	f7ff ff96 	bl	800e304 <__sfp_lock_release>
 800e3d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3e0:	6025      	str	r5, [r4, #0]
 800e3e2:	61a5      	str	r5, [r4, #24]
 800e3e4:	2208      	movs	r2, #8
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3ec:	f7fd f84e 	bl	800b48c <memset>
 800e3f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3fc:	3468      	adds	r4, #104	; 0x68
 800e3fe:	e7d9      	b.n	800e3b4 <__sfp+0x1c>
 800e400:	2104      	movs	r1, #4
 800e402:	4638      	mov	r0, r7
 800e404:	f7ff ff62 	bl	800e2cc <__sfmoreglue>
 800e408:	4604      	mov	r4, r0
 800e40a:	6030      	str	r0, [r6, #0]
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d1d5      	bne.n	800e3bc <__sfp+0x24>
 800e410:	f7ff ff78 	bl	800e304 <__sfp_lock_release>
 800e414:	230c      	movs	r3, #12
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	e7ee      	b.n	800e3f8 <__sfp+0x60>
 800e41a:	bf00      	nop
 800e41c:	08010584 	.word	0x08010584
 800e420:	ffff0001 	.word	0xffff0001

0800e424 <_fwalk_reent>:
 800e424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e428:	4606      	mov	r6, r0
 800e42a:	4688      	mov	r8, r1
 800e42c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e430:	2700      	movs	r7, #0
 800e432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e436:	f1b9 0901 	subs.w	r9, r9, #1
 800e43a:	d505      	bpl.n	800e448 <_fwalk_reent+0x24>
 800e43c:	6824      	ldr	r4, [r4, #0]
 800e43e:	2c00      	cmp	r4, #0
 800e440:	d1f7      	bne.n	800e432 <_fwalk_reent+0xe>
 800e442:	4638      	mov	r0, r7
 800e444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e448:	89ab      	ldrh	r3, [r5, #12]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d907      	bls.n	800e45e <_fwalk_reent+0x3a>
 800e44e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e452:	3301      	adds	r3, #1
 800e454:	d003      	beq.n	800e45e <_fwalk_reent+0x3a>
 800e456:	4629      	mov	r1, r5
 800e458:	4630      	mov	r0, r6
 800e45a:	47c0      	blx	r8
 800e45c:	4307      	orrs	r7, r0
 800e45e:	3568      	adds	r5, #104	; 0x68
 800e460:	e7e9      	b.n	800e436 <_fwalk_reent+0x12>

0800e462 <rshift>:
 800e462:	6903      	ldr	r3, [r0, #16]
 800e464:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e46c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e470:	f100 0414 	add.w	r4, r0, #20
 800e474:	dd45      	ble.n	800e502 <rshift+0xa0>
 800e476:	f011 011f 	ands.w	r1, r1, #31
 800e47a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e47e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e482:	d10c      	bne.n	800e49e <rshift+0x3c>
 800e484:	f100 0710 	add.w	r7, r0, #16
 800e488:	4629      	mov	r1, r5
 800e48a:	42b1      	cmp	r1, r6
 800e48c:	d334      	bcc.n	800e4f8 <rshift+0x96>
 800e48e:	1a9b      	subs	r3, r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	1eea      	subs	r2, r5, #3
 800e494:	4296      	cmp	r6, r2
 800e496:	bf38      	it	cc
 800e498:	2300      	movcc	r3, #0
 800e49a:	4423      	add	r3, r4
 800e49c:	e015      	b.n	800e4ca <rshift+0x68>
 800e49e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e4a2:	f1c1 0820 	rsb	r8, r1, #32
 800e4a6:	40cf      	lsrs	r7, r1
 800e4a8:	f105 0e04 	add.w	lr, r5, #4
 800e4ac:	46a1      	mov	r9, r4
 800e4ae:	4576      	cmp	r6, lr
 800e4b0:	46f4      	mov	ip, lr
 800e4b2:	d815      	bhi.n	800e4e0 <rshift+0x7e>
 800e4b4:	1a9b      	subs	r3, r3, r2
 800e4b6:	009a      	lsls	r2, r3, #2
 800e4b8:	3a04      	subs	r2, #4
 800e4ba:	3501      	adds	r5, #1
 800e4bc:	42ae      	cmp	r6, r5
 800e4be:	bf38      	it	cc
 800e4c0:	2200      	movcc	r2, #0
 800e4c2:	18a3      	adds	r3, r4, r2
 800e4c4:	50a7      	str	r7, [r4, r2]
 800e4c6:	b107      	cbz	r7, 800e4ca <rshift+0x68>
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	1b1a      	subs	r2, r3, r4
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e4d2:	bf08      	it	eq
 800e4d4:	2300      	moveq	r3, #0
 800e4d6:	6102      	str	r2, [r0, #16]
 800e4d8:	bf08      	it	eq
 800e4da:	6143      	streq	r3, [r0, #20]
 800e4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e0:	f8dc c000 	ldr.w	ip, [ip]
 800e4e4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e4e8:	ea4c 0707 	orr.w	r7, ip, r7
 800e4ec:	f849 7b04 	str.w	r7, [r9], #4
 800e4f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4f4:	40cf      	lsrs	r7, r1
 800e4f6:	e7da      	b.n	800e4ae <rshift+0x4c>
 800e4f8:	f851 cb04 	ldr.w	ip, [r1], #4
 800e4fc:	f847 cf04 	str.w	ip, [r7, #4]!
 800e500:	e7c3      	b.n	800e48a <rshift+0x28>
 800e502:	4623      	mov	r3, r4
 800e504:	e7e1      	b.n	800e4ca <rshift+0x68>

0800e506 <__hexdig_fun>:
 800e506:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e50a:	2b09      	cmp	r3, #9
 800e50c:	d802      	bhi.n	800e514 <__hexdig_fun+0xe>
 800e50e:	3820      	subs	r0, #32
 800e510:	b2c0      	uxtb	r0, r0
 800e512:	4770      	bx	lr
 800e514:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e518:	2b05      	cmp	r3, #5
 800e51a:	d801      	bhi.n	800e520 <__hexdig_fun+0x1a>
 800e51c:	3847      	subs	r0, #71	; 0x47
 800e51e:	e7f7      	b.n	800e510 <__hexdig_fun+0xa>
 800e520:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e524:	2b05      	cmp	r3, #5
 800e526:	d801      	bhi.n	800e52c <__hexdig_fun+0x26>
 800e528:	3827      	subs	r0, #39	; 0x27
 800e52a:	e7f1      	b.n	800e510 <__hexdig_fun+0xa>
 800e52c:	2000      	movs	r0, #0
 800e52e:	4770      	bx	lr

0800e530 <__gethex>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	ed2d 8b02 	vpush	{d8}
 800e538:	b089      	sub	sp, #36	; 0x24
 800e53a:	ee08 0a10 	vmov	s16, r0
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	4bbc      	ldr	r3, [pc, #752]	; (800e834 <__gethex+0x304>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	9301      	str	r3, [sp, #4]
 800e546:	4618      	mov	r0, r3
 800e548:	468b      	mov	fp, r1
 800e54a:	4690      	mov	r8, r2
 800e54c:	f7f1 fed2 	bl	80002f4 <strlen>
 800e550:	9b01      	ldr	r3, [sp, #4]
 800e552:	f8db 2000 	ldr.w	r2, [fp]
 800e556:	4403      	add	r3, r0
 800e558:	4682      	mov	sl, r0
 800e55a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e55e:	9305      	str	r3, [sp, #20]
 800e560:	1c93      	adds	r3, r2, #2
 800e562:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e566:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e56a:	32fe      	adds	r2, #254	; 0xfe
 800e56c:	18d1      	adds	r1, r2, r3
 800e56e:	461f      	mov	r7, r3
 800e570:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e574:	9100      	str	r1, [sp, #0]
 800e576:	2830      	cmp	r0, #48	; 0x30
 800e578:	d0f8      	beq.n	800e56c <__gethex+0x3c>
 800e57a:	f7ff ffc4 	bl	800e506 <__hexdig_fun>
 800e57e:	4604      	mov	r4, r0
 800e580:	2800      	cmp	r0, #0
 800e582:	d13a      	bne.n	800e5fa <__gethex+0xca>
 800e584:	9901      	ldr	r1, [sp, #4]
 800e586:	4652      	mov	r2, sl
 800e588:	4638      	mov	r0, r7
 800e58a:	f7fe f83d 	bl	800c608 <strncmp>
 800e58e:	4605      	mov	r5, r0
 800e590:	2800      	cmp	r0, #0
 800e592:	d168      	bne.n	800e666 <__gethex+0x136>
 800e594:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e598:	eb07 060a 	add.w	r6, r7, sl
 800e59c:	f7ff ffb3 	bl	800e506 <__hexdig_fun>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d062      	beq.n	800e66a <__gethex+0x13a>
 800e5a4:	4633      	mov	r3, r6
 800e5a6:	7818      	ldrb	r0, [r3, #0]
 800e5a8:	2830      	cmp	r0, #48	; 0x30
 800e5aa:	461f      	mov	r7, r3
 800e5ac:	f103 0301 	add.w	r3, r3, #1
 800e5b0:	d0f9      	beq.n	800e5a6 <__gethex+0x76>
 800e5b2:	f7ff ffa8 	bl	800e506 <__hexdig_fun>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	fab0 f480 	clz	r4, r0
 800e5bc:	0964      	lsrs	r4, r4, #5
 800e5be:	4635      	mov	r5, r6
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	463a      	mov	r2, r7
 800e5c4:	4616      	mov	r6, r2
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	7830      	ldrb	r0, [r6, #0]
 800e5ca:	f7ff ff9c 	bl	800e506 <__hexdig_fun>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d1f8      	bne.n	800e5c4 <__gethex+0x94>
 800e5d2:	9901      	ldr	r1, [sp, #4]
 800e5d4:	4652      	mov	r2, sl
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f7fe f816 	bl	800c608 <strncmp>
 800e5dc:	b980      	cbnz	r0, 800e600 <__gethex+0xd0>
 800e5de:	b94d      	cbnz	r5, 800e5f4 <__gethex+0xc4>
 800e5e0:	eb06 050a 	add.w	r5, r6, sl
 800e5e4:	462a      	mov	r2, r5
 800e5e6:	4616      	mov	r6, r2
 800e5e8:	3201      	adds	r2, #1
 800e5ea:	7830      	ldrb	r0, [r6, #0]
 800e5ec:	f7ff ff8b 	bl	800e506 <__hexdig_fun>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1f8      	bne.n	800e5e6 <__gethex+0xb6>
 800e5f4:	1bad      	subs	r5, r5, r6
 800e5f6:	00ad      	lsls	r5, r5, #2
 800e5f8:	e004      	b.n	800e604 <__gethex+0xd4>
 800e5fa:	2400      	movs	r4, #0
 800e5fc:	4625      	mov	r5, r4
 800e5fe:	e7e0      	b.n	800e5c2 <__gethex+0x92>
 800e600:	2d00      	cmp	r5, #0
 800e602:	d1f7      	bne.n	800e5f4 <__gethex+0xc4>
 800e604:	7833      	ldrb	r3, [r6, #0]
 800e606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e60a:	2b50      	cmp	r3, #80	; 0x50
 800e60c:	d13b      	bne.n	800e686 <__gethex+0x156>
 800e60e:	7873      	ldrb	r3, [r6, #1]
 800e610:	2b2b      	cmp	r3, #43	; 0x2b
 800e612:	d02c      	beq.n	800e66e <__gethex+0x13e>
 800e614:	2b2d      	cmp	r3, #45	; 0x2d
 800e616:	d02e      	beq.n	800e676 <__gethex+0x146>
 800e618:	1c71      	adds	r1, r6, #1
 800e61a:	f04f 0900 	mov.w	r9, #0
 800e61e:	7808      	ldrb	r0, [r1, #0]
 800e620:	f7ff ff71 	bl	800e506 <__hexdig_fun>
 800e624:	1e43      	subs	r3, r0, #1
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b18      	cmp	r3, #24
 800e62a:	d82c      	bhi.n	800e686 <__gethex+0x156>
 800e62c:	f1a0 0210 	sub.w	r2, r0, #16
 800e630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e634:	f7ff ff67 	bl	800e506 <__hexdig_fun>
 800e638:	1e43      	subs	r3, r0, #1
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b18      	cmp	r3, #24
 800e63e:	d91d      	bls.n	800e67c <__gethex+0x14c>
 800e640:	f1b9 0f00 	cmp.w	r9, #0
 800e644:	d000      	beq.n	800e648 <__gethex+0x118>
 800e646:	4252      	negs	r2, r2
 800e648:	4415      	add	r5, r2
 800e64a:	f8cb 1000 	str.w	r1, [fp]
 800e64e:	b1e4      	cbz	r4, 800e68a <__gethex+0x15a>
 800e650:	9b00      	ldr	r3, [sp, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	bf14      	ite	ne
 800e656:	2700      	movne	r7, #0
 800e658:	2706      	moveq	r7, #6
 800e65a:	4638      	mov	r0, r7
 800e65c:	b009      	add	sp, #36	; 0x24
 800e65e:	ecbd 8b02 	vpop	{d8}
 800e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e666:	463e      	mov	r6, r7
 800e668:	4625      	mov	r5, r4
 800e66a:	2401      	movs	r4, #1
 800e66c:	e7ca      	b.n	800e604 <__gethex+0xd4>
 800e66e:	f04f 0900 	mov.w	r9, #0
 800e672:	1cb1      	adds	r1, r6, #2
 800e674:	e7d3      	b.n	800e61e <__gethex+0xee>
 800e676:	f04f 0901 	mov.w	r9, #1
 800e67a:	e7fa      	b.n	800e672 <__gethex+0x142>
 800e67c:	230a      	movs	r3, #10
 800e67e:	fb03 0202 	mla	r2, r3, r2, r0
 800e682:	3a10      	subs	r2, #16
 800e684:	e7d4      	b.n	800e630 <__gethex+0x100>
 800e686:	4631      	mov	r1, r6
 800e688:	e7df      	b.n	800e64a <__gethex+0x11a>
 800e68a:	1bf3      	subs	r3, r6, r7
 800e68c:	3b01      	subs	r3, #1
 800e68e:	4621      	mov	r1, r4
 800e690:	2b07      	cmp	r3, #7
 800e692:	dc0b      	bgt.n	800e6ac <__gethex+0x17c>
 800e694:	ee18 0a10 	vmov	r0, s16
 800e698:	f000 fadc 	bl	800ec54 <_Balloc>
 800e69c:	4604      	mov	r4, r0
 800e69e:	b940      	cbnz	r0, 800e6b2 <__gethex+0x182>
 800e6a0:	4b65      	ldr	r3, [pc, #404]	; (800e838 <__gethex+0x308>)
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	21de      	movs	r1, #222	; 0xde
 800e6a6:	4865      	ldr	r0, [pc, #404]	; (800e83c <__gethex+0x30c>)
 800e6a8:	f7fc fe5e 	bl	800b368 <__assert_func>
 800e6ac:	3101      	adds	r1, #1
 800e6ae:	105b      	asrs	r3, r3, #1
 800e6b0:	e7ee      	b.n	800e690 <__gethex+0x160>
 800e6b2:	f100 0914 	add.w	r9, r0, #20
 800e6b6:	f04f 0b00 	mov.w	fp, #0
 800e6ba:	f1ca 0301 	rsb	r3, sl, #1
 800e6be:	f8cd 9008 	str.w	r9, [sp, #8]
 800e6c2:	f8cd b000 	str.w	fp, [sp]
 800e6c6:	9306      	str	r3, [sp, #24]
 800e6c8:	42b7      	cmp	r7, r6
 800e6ca:	d340      	bcc.n	800e74e <__gethex+0x21e>
 800e6cc:	9802      	ldr	r0, [sp, #8]
 800e6ce:	9b00      	ldr	r3, [sp, #0]
 800e6d0:	f840 3b04 	str.w	r3, [r0], #4
 800e6d4:	eba0 0009 	sub.w	r0, r0, r9
 800e6d8:	1080      	asrs	r0, r0, #2
 800e6da:	0146      	lsls	r6, r0, #5
 800e6dc:	6120      	str	r0, [r4, #16]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f000 fbae 	bl	800ee40 <__hi0bits>
 800e6e4:	1a30      	subs	r0, r6, r0
 800e6e6:	f8d8 6000 	ldr.w	r6, [r8]
 800e6ea:	42b0      	cmp	r0, r6
 800e6ec:	dd63      	ble.n	800e7b6 <__gethex+0x286>
 800e6ee:	1b87      	subs	r7, r0, r6
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f000 ff49 	bl	800f58a <__any_on>
 800e6f8:	4682      	mov	sl, r0
 800e6fa:	b1a8      	cbz	r0, 800e728 <__gethex+0x1f8>
 800e6fc:	1e7b      	subs	r3, r7, #1
 800e6fe:	1159      	asrs	r1, r3, #5
 800e700:	f003 021f 	and.w	r2, r3, #31
 800e704:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e708:	f04f 0a01 	mov.w	sl, #1
 800e70c:	fa0a f202 	lsl.w	r2, sl, r2
 800e710:	420a      	tst	r2, r1
 800e712:	d009      	beq.n	800e728 <__gethex+0x1f8>
 800e714:	4553      	cmp	r3, sl
 800e716:	dd05      	ble.n	800e724 <__gethex+0x1f4>
 800e718:	1eb9      	subs	r1, r7, #2
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 ff35 	bl	800f58a <__any_on>
 800e720:	2800      	cmp	r0, #0
 800e722:	d145      	bne.n	800e7b0 <__gethex+0x280>
 800e724:	f04f 0a02 	mov.w	sl, #2
 800e728:	4639      	mov	r1, r7
 800e72a:	4620      	mov	r0, r4
 800e72c:	f7ff fe99 	bl	800e462 <rshift>
 800e730:	443d      	add	r5, r7
 800e732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e736:	42ab      	cmp	r3, r5
 800e738:	da4c      	bge.n	800e7d4 <__gethex+0x2a4>
 800e73a:	ee18 0a10 	vmov	r0, s16
 800e73e:	4621      	mov	r1, r4
 800e740:	f000 fac8 	bl	800ecd4 <_Bfree>
 800e744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e746:	2300      	movs	r3, #0
 800e748:	6013      	str	r3, [r2, #0]
 800e74a:	27a3      	movs	r7, #163	; 0xa3
 800e74c:	e785      	b.n	800e65a <__gethex+0x12a>
 800e74e:	1e73      	subs	r3, r6, #1
 800e750:	9a05      	ldr	r2, [sp, #20]
 800e752:	9303      	str	r3, [sp, #12]
 800e754:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e758:	4293      	cmp	r3, r2
 800e75a:	d019      	beq.n	800e790 <__gethex+0x260>
 800e75c:	f1bb 0f20 	cmp.w	fp, #32
 800e760:	d107      	bne.n	800e772 <__gethex+0x242>
 800e762:	9b02      	ldr	r3, [sp, #8]
 800e764:	9a00      	ldr	r2, [sp, #0]
 800e766:	f843 2b04 	str.w	r2, [r3], #4
 800e76a:	9302      	str	r3, [sp, #8]
 800e76c:	2300      	movs	r3, #0
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	469b      	mov	fp, r3
 800e772:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e776:	f7ff fec6 	bl	800e506 <__hexdig_fun>
 800e77a:	9b00      	ldr	r3, [sp, #0]
 800e77c:	f000 000f 	and.w	r0, r0, #15
 800e780:	fa00 f00b 	lsl.w	r0, r0, fp
 800e784:	4303      	orrs	r3, r0
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	f10b 0b04 	add.w	fp, fp, #4
 800e78c:	9b03      	ldr	r3, [sp, #12]
 800e78e:	e00d      	b.n	800e7ac <__gethex+0x27c>
 800e790:	9b03      	ldr	r3, [sp, #12]
 800e792:	9a06      	ldr	r2, [sp, #24]
 800e794:	4413      	add	r3, r2
 800e796:	42bb      	cmp	r3, r7
 800e798:	d3e0      	bcc.n	800e75c <__gethex+0x22c>
 800e79a:	4618      	mov	r0, r3
 800e79c:	9901      	ldr	r1, [sp, #4]
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	4652      	mov	r2, sl
 800e7a2:	f7fd ff31 	bl	800c608 <strncmp>
 800e7a6:	9b07      	ldr	r3, [sp, #28]
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d1d7      	bne.n	800e75c <__gethex+0x22c>
 800e7ac:	461e      	mov	r6, r3
 800e7ae:	e78b      	b.n	800e6c8 <__gethex+0x198>
 800e7b0:	f04f 0a03 	mov.w	sl, #3
 800e7b4:	e7b8      	b.n	800e728 <__gethex+0x1f8>
 800e7b6:	da0a      	bge.n	800e7ce <__gethex+0x29e>
 800e7b8:	1a37      	subs	r7, r6, r0
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	ee18 0a10 	vmov	r0, s16
 800e7c0:	463a      	mov	r2, r7
 800e7c2:	f000 fca3 	bl	800f10c <__lshift>
 800e7c6:	1bed      	subs	r5, r5, r7
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	f100 0914 	add.w	r9, r0, #20
 800e7ce:	f04f 0a00 	mov.w	sl, #0
 800e7d2:	e7ae      	b.n	800e732 <__gethex+0x202>
 800e7d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e7d8:	42a8      	cmp	r0, r5
 800e7da:	dd72      	ble.n	800e8c2 <__gethex+0x392>
 800e7dc:	1b45      	subs	r5, r0, r5
 800e7de:	42ae      	cmp	r6, r5
 800e7e0:	dc36      	bgt.n	800e850 <__gethex+0x320>
 800e7e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d02a      	beq.n	800e840 <__gethex+0x310>
 800e7ea:	2b03      	cmp	r3, #3
 800e7ec:	d02c      	beq.n	800e848 <__gethex+0x318>
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d115      	bne.n	800e81e <__gethex+0x2ee>
 800e7f2:	42ae      	cmp	r6, r5
 800e7f4:	d113      	bne.n	800e81e <__gethex+0x2ee>
 800e7f6:	2e01      	cmp	r6, #1
 800e7f8:	d10b      	bne.n	800e812 <__gethex+0x2e2>
 800e7fa:	9a04      	ldr	r2, [sp, #16]
 800e7fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	2301      	movs	r3, #1
 800e804:	6123      	str	r3, [r4, #16]
 800e806:	f8c9 3000 	str.w	r3, [r9]
 800e80a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e80c:	2762      	movs	r7, #98	; 0x62
 800e80e:	601c      	str	r4, [r3, #0]
 800e810:	e723      	b.n	800e65a <__gethex+0x12a>
 800e812:	1e71      	subs	r1, r6, #1
 800e814:	4620      	mov	r0, r4
 800e816:	f000 feb8 	bl	800f58a <__any_on>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d1ed      	bne.n	800e7fa <__gethex+0x2ca>
 800e81e:	ee18 0a10 	vmov	r0, s16
 800e822:	4621      	mov	r1, r4
 800e824:	f000 fa56 	bl	800ecd4 <_Bfree>
 800e828:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e82a:	2300      	movs	r3, #0
 800e82c:	6013      	str	r3, [r2, #0]
 800e82e:	2750      	movs	r7, #80	; 0x50
 800e830:	e713      	b.n	800e65a <__gethex+0x12a>
 800e832:	bf00      	nop
 800e834:	0801088c 	.word	0x0801088c
 800e838:	080107ac 	.word	0x080107ac
 800e83c:	08010820 	.word	0x08010820
 800e840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1eb      	bne.n	800e81e <__gethex+0x2ee>
 800e846:	e7d8      	b.n	800e7fa <__gethex+0x2ca>
 800e848:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1d5      	bne.n	800e7fa <__gethex+0x2ca>
 800e84e:	e7e6      	b.n	800e81e <__gethex+0x2ee>
 800e850:	1e6f      	subs	r7, r5, #1
 800e852:	f1ba 0f00 	cmp.w	sl, #0
 800e856:	d131      	bne.n	800e8bc <__gethex+0x38c>
 800e858:	b127      	cbz	r7, 800e864 <__gethex+0x334>
 800e85a:	4639      	mov	r1, r7
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 fe94 	bl	800f58a <__any_on>
 800e862:	4682      	mov	sl, r0
 800e864:	117b      	asrs	r3, r7, #5
 800e866:	2101      	movs	r1, #1
 800e868:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e86c:	f007 071f 	and.w	r7, r7, #31
 800e870:	fa01 f707 	lsl.w	r7, r1, r7
 800e874:	421f      	tst	r7, r3
 800e876:	4629      	mov	r1, r5
 800e878:	4620      	mov	r0, r4
 800e87a:	bf18      	it	ne
 800e87c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e880:	1b76      	subs	r6, r6, r5
 800e882:	f7ff fdee 	bl	800e462 <rshift>
 800e886:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e88a:	2702      	movs	r7, #2
 800e88c:	f1ba 0f00 	cmp.w	sl, #0
 800e890:	d048      	beq.n	800e924 <__gethex+0x3f4>
 800e892:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e896:	2b02      	cmp	r3, #2
 800e898:	d015      	beq.n	800e8c6 <__gethex+0x396>
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	d017      	beq.n	800e8ce <__gethex+0x39e>
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d109      	bne.n	800e8b6 <__gethex+0x386>
 800e8a2:	f01a 0f02 	tst.w	sl, #2
 800e8a6:	d006      	beq.n	800e8b6 <__gethex+0x386>
 800e8a8:	f8d9 0000 	ldr.w	r0, [r9]
 800e8ac:	ea4a 0a00 	orr.w	sl, sl, r0
 800e8b0:	f01a 0f01 	tst.w	sl, #1
 800e8b4:	d10e      	bne.n	800e8d4 <__gethex+0x3a4>
 800e8b6:	f047 0710 	orr.w	r7, r7, #16
 800e8ba:	e033      	b.n	800e924 <__gethex+0x3f4>
 800e8bc:	f04f 0a01 	mov.w	sl, #1
 800e8c0:	e7d0      	b.n	800e864 <__gethex+0x334>
 800e8c2:	2701      	movs	r7, #1
 800e8c4:	e7e2      	b.n	800e88c <__gethex+0x35c>
 800e8c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8c8:	f1c3 0301 	rsb	r3, r3, #1
 800e8cc:	9315      	str	r3, [sp, #84]	; 0x54
 800e8ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d0f0      	beq.n	800e8b6 <__gethex+0x386>
 800e8d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8d8:	f104 0314 	add.w	r3, r4, #20
 800e8dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8e4:	f04f 0c00 	mov.w	ip, #0
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e8f2:	d01c      	beq.n	800e92e <__gethex+0x3fe>
 800e8f4:	3201      	adds	r2, #1
 800e8f6:	6002      	str	r2, [r0, #0]
 800e8f8:	2f02      	cmp	r7, #2
 800e8fa:	f104 0314 	add.w	r3, r4, #20
 800e8fe:	d13f      	bne.n	800e980 <__gethex+0x450>
 800e900:	f8d8 2000 	ldr.w	r2, [r8]
 800e904:	3a01      	subs	r2, #1
 800e906:	42b2      	cmp	r2, r6
 800e908:	d10a      	bne.n	800e920 <__gethex+0x3f0>
 800e90a:	1171      	asrs	r1, r6, #5
 800e90c:	2201      	movs	r2, #1
 800e90e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e912:	f006 061f 	and.w	r6, r6, #31
 800e916:	fa02 f606 	lsl.w	r6, r2, r6
 800e91a:	421e      	tst	r6, r3
 800e91c:	bf18      	it	ne
 800e91e:	4617      	movne	r7, r2
 800e920:	f047 0720 	orr.w	r7, r7, #32
 800e924:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e926:	601c      	str	r4, [r3, #0]
 800e928:	9b04      	ldr	r3, [sp, #16]
 800e92a:	601d      	str	r5, [r3, #0]
 800e92c:	e695      	b.n	800e65a <__gethex+0x12a>
 800e92e:	4299      	cmp	r1, r3
 800e930:	f843 cc04 	str.w	ip, [r3, #-4]
 800e934:	d8d8      	bhi.n	800e8e8 <__gethex+0x3b8>
 800e936:	68a3      	ldr	r3, [r4, #8]
 800e938:	459b      	cmp	fp, r3
 800e93a:	db19      	blt.n	800e970 <__gethex+0x440>
 800e93c:	6861      	ldr	r1, [r4, #4]
 800e93e:	ee18 0a10 	vmov	r0, s16
 800e942:	3101      	adds	r1, #1
 800e944:	f000 f986 	bl	800ec54 <_Balloc>
 800e948:	4681      	mov	r9, r0
 800e94a:	b918      	cbnz	r0, 800e954 <__gethex+0x424>
 800e94c:	4b1a      	ldr	r3, [pc, #104]	; (800e9b8 <__gethex+0x488>)
 800e94e:	4602      	mov	r2, r0
 800e950:	2184      	movs	r1, #132	; 0x84
 800e952:	e6a8      	b.n	800e6a6 <__gethex+0x176>
 800e954:	6922      	ldr	r2, [r4, #16]
 800e956:	3202      	adds	r2, #2
 800e958:	f104 010c 	add.w	r1, r4, #12
 800e95c:	0092      	lsls	r2, r2, #2
 800e95e:	300c      	adds	r0, #12
 800e960:	f7fc fd6c 	bl	800b43c <memcpy>
 800e964:	4621      	mov	r1, r4
 800e966:	ee18 0a10 	vmov	r0, s16
 800e96a:	f000 f9b3 	bl	800ecd4 <_Bfree>
 800e96e:	464c      	mov	r4, r9
 800e970:	6923      	ldr	r3, [r4, #16]
 800e972:	1c5a      	adds	r2, r3, #1
 800e974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e978:	6122      	str	r2, [r4, #16]
 800e97a:	2201      	movs	r2, #1
 800e97c:	615a      	str	r2, [r3, #20]
 800e97e:	e7bb      	b.n	800e8f8 <__gethex+0x3c8>
 800e980:	6922      	ldr	r2, [r4, #16]
 800e982:	455a      	cmp	r2, fp
 800e984:	dd0b      	ble.n	800e99e <__gethex+0x46e>
 800e986:	2101      	movs	r1, #1
 800e988:	4620      	mov	r0, r4
 800e98a:	f7ff fd6a 	bl	800e462 <rshift>
 800e98e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e992:	3501      	adds	r5, #1
 800e994:	42ab      	cmp	r3, r5
 800e996:	f6ff aed0 	blt.w	800e73a <__gethex+0x20a>
 800e99a:	2701      	movs	r7, #1
 800e99c:	e7c0      	b.n	800e920 <__gethex+0x3f0>
 800e99e:	f016 061f 	ands.w	r6, r6, #31
 800e9a2:	d0fa      	beq.n	800e99a <__gethex+0x46a>
 800e9a4:	449a      	add	sl, r3
 800e9a6:	f1c6 0620 	rsb	r6, r6, #32
 800e9aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e9ae:	f000 fa47 	bl	800ee40 <__hi0bits>
 800e9b2:	42b0      	cmp	r0, r6
 800e9b4:	dbe7      	blt.n	800e986 <__gethex+0x456>
 800e9b6:	e7f0      	b.n	800e99a <__gethex+0x46a>
 800e9b8:	080107ac 	.word	0x080107ac

0800e9bc <L_shift>:
 800e9bc:	f1c2 0208 	rsb	r2, r2, #8
 800e9c0:	0092      	lsls	r2, r2, #2
 800e9c2:	b570      	push	{r4, r5, r6, lr}
 800e9c4:	f1c2 0620 	rsb	r6, r2, #32
 800e9c8:	6843      	ldr	r3, [r0, #4]
 800e9ca:	6804      	ldr	r4, [r0, #0]
 800e9cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e9d0:	432c      	orrs	r4, r5
 800e9d2:	40d3      	lsrs	r3, r2
 800e9d4:	6004      	str	r4, [r0, #0]
 800e9d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9da:	4288      	cmp	r0, r1
 800e9dc:	d3f4      	bcc.n	800e9c8 <L_shift+0xc>
 800e9de:	bd70      	pop	{r4, r5, r6, pc}

0800e9e0 <__match>:
 800e9e0:	b530      	push	{r4, r5, lr}
 800e9e2:	6803      	ldr	r3, [r0, #0]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ea:	b914      	cbnz	r4, 800e9f2 <__match+0x12>
 800e9ec:	6003      	str	r3, [r0, #0]
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	bd30      	pop	{r4, r5, pc}
 800e9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e9fa:	2d19      	cmp	r5, #25
 800e9fc:	bf98      	it	ls
 800e9fe:	3220      	addls	r2, #32
 800ea00:	42a2      	cmp	r2, r4
 800ea02:	d0f0      	beq.n	800e9e6 <__match+0x6>
 800ea04:	2000      	movs	r0, #0
 800ea06:	e7f3      	b.n	800e9f0 <__match+0x10>

0800ea08 <__hexnan>:
 800ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea0c:	680b      	ldr	r3, [r1, #0]
 800ea0e:	6801      	ldr	r1, [r0, #0]
 800ea10:	115e      	asrs	r6, r3, #5
 800ea12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea16:	f013 031f 	ands.w	r3, r3, #31
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	bf18      	it	ne
 800ea1e:	3604      	addne	r6, #4
 800ea20:	2500      	movs	r5, #0
 800ea22:	1f37      	subs	r7, r6, #4
 800ea24:	4682      	mov	sl, r0
 800ea26:	4690      	mov	r8, r2
 800ea28:	9301      	str	r3, [sp, #4]
 800ea2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea2e:	46b9      	mov	r9, r7
 800ea30:	463c      	mov	r4, r7
 800ea32:	9502      	str	r5, [sp, #8]
 800ea34:	46ab      	mov	fp, r5
 800ea36:	784a      	ldrb	r2, [r1, #1]
 800ea38:	1c4b      	adds	r3, r1, #1
 800ea3a:	9303      	str	r3, [sp, #12]
 800ea3c:	b342      	cbz	r2, 800ea90 <__hexnan+0x88>
 800ea3e:	4610      	mov	r0, r2
 800ea40:	9105      	str	r1, [sp, #20]
 800ea42:	9204      	str	r2, [sp, #16]
 800ea44:	f7ff fd5f 	bl	800e506 <__hexdig_fun>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d14f      	bne.n	800eaec <__hexnan+0xe4>
 800ea4c:	9a04      	ldr	r2, [sp, #16]
 800ea4e:	9905      	ldr	r1, [sp, #20]
 800ea50:	2a20      	cmp	r2, #32
 800ea52:	d818      	bhi.n	800ea86 <__hexnan+0x7e>
 800ea54:	9b02      	ldr	r3, [sp, #8]
 800ea56:	459b      	cmp	fp, r3
 800ea58:	dd13      	ble.n	800ea82 <__hexnan+0x7a>
 800ea5a:	454c      	cmp	r4, r9
 800ea5c:	d206      	bcs.n	800ea6c <__hexnan+0x64>
 800ea5e:	2d07      	cmp	r5, #7
 800ea60:	dc04      	bgt.n	800ea6c <__hexnan+0x64>
 800ea62:	462a      	mov	r2, r5
 800ea64:	4649      	mov	r1, r9
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7ff ffa8 	bl	800e9bc <L_shift>
 800ea6c:	4544      	cmp	r4, r8
 800ea6e:	d950      	bls.n	800eb12 <__hexnan+0x10a>
 800ea70:	2300      	movs	r3, #0
 800ea72:	f1a4 0904 	sub.w	r9, r4, #4
 800ea76:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea7a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea7e:	464c      	mov	r4, r9
 800ea80:	461d      	mov	r5, r3
 800ea82:	9903      	ldr	r1, [sp, #12]
 800ea84:	e7d7      	b.n	800ea36 <__hexnan+0x2e>
 800ea86:	2a29      	cmp	r2, #41	; 0x29
 800ea88:	d156      	bne.n	800eb38 <__hexnan+0x130>
 800ea8a:	3102      	adds	r1, #2
 800ea8c:	f8ca 1000 	str.w	r1, [sl]
 800ea90:	f1bb 0f00 	cmp.w	fp, #0
 800ea94:	d050      	beq.n	800eb38 <__hexnan+0x130>
 800ea96:	454c      	cmp	r4, r9
 800ea98:	d206      	bcs.n	800eaa8 <__hexnan+0xa0>
 800ea9a:	2d07      	cmp	r5, #7
 800ea9c:	dc04      	bgt.n	800eaa8 <__hexnan+0xa0>
 800ea9e:	462a      	mov	r2, r5
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f7ff ff8a 	bl	800e9bc <L_shift>
 800eaa8:	4544      	cmp	r4, r8
 800eaaa:	d934      	bls.n	800eb16 <__hexnan+0x10e>
 800eaac:	f1a8 0204 	sub.w	r2, r8, #4
 800eab0:	4623      	mov	r3, r4
 800eab2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eab6:	f842 1f04 	str.w	r1, [r2, #4]!
 800eaba:	429f      	cmp	r7, r3
 800eabc:	d2f9      	bcs.n	800eab2 <__hexnan+0xaa>
 800eabe:	1b3b      	subs	r3, r7, r4
 800eac0:	f023 0303 	bic.w	r3, r3, #3
 800eac4:	3304      	adds	r3, #4
 800eac6:	3401      	adds	r4, #1
 800eac8:	3e03      	subs	r6, #3
 800eaca:	42b4      	cmp	r4, r6
 800eacc:	bf88      	it	hi
 800eace:	2304      	movhi	r3, #4
 800ead0:	4443      	add	r3, r8
 800ead2:	2200      	movs	r2, #0
 800ead4:	f843 2b04 	str.w	r2, [r3], #4
 800ead8:	429f      	cmp	r7, r3
 800eada:	d2fb      	bcs.n	800ead4 <__hexnan+0xcc>
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	b91b      	cbnz	r3, 800eae8 <__hexnan+0xe0>
 800eae0:	4547      	cmp	r7, r8
 800eae2:	d127      	bne.n	800eb34 <__hexnan+0x12c>
 800eae4:	2301      	movs	r3, #1
 800eae6:	603b      	str	r3, [r7, #0]
 800eae8:	2005      	movs	r0, #5
 800eaea:	e026      	b.n	800eb3a <__hexnan+0x132>
 800eaec:	3501      	adds	r5, #1
 800eaee:	2d08      	cmp	r5, #8
 800eaf0:	f10b 0b01 	add.w	fp, fp, #1
 800eaf4:	dd06      	ble.n	800eb04 <__hexnan+0xfc>
 800eaf6:	4544      	cmp	r4, r8
 800eaf8:	d9c3      	bls.n	800ea82 <__hexnan+0x7a>
 800eafa:	2300      	movs	r3, #0
 800eafc:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb00:	2501      	movs	r5, #1
 800eb02:	3c04      	subs	r4, #4
 800eb04:	6822      	ldr	r2, [r4, #0]
 800eb06:	f000 000f 	and.w	r0, r0, #15
 800eb0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eb0e:	6022      	str	r2, [r4, #0]
 800eb10:	e7b7      	b.n	800ea82 <__hexnan+0x7a>
 800eb12:	2508      	movs	r5, #8
 800eb14:	e7b5      	b.n	800ea82 <__hexnan+0x7a>
 800eb16:	9b01      	ldr	r3, [sp, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d0df      	beq.n	800eadc <__hexnan+0xd4>
 800eb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb20:	f1c3 0320 	rsb	r3, r3, #32
 800eb24:	fa22 f303 	lsr.w	r3, r2, r3
 800eb28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb2c:	401a      	ands	r2, r3
 800eb2e:	f846 2c04 	str.w	r2, [r6, #-4]
 800eb32:	e7d3      	b.n	800eadc <__hexnan+0xd4>
 800eb34:	3f04      	subs	r7, #4
 800eb36:	e7d1      	b.n	800eadc <__hexnan+0xd4>
 800eb38:	2004      	movs	r0, #4
 800eb3a:	b007      	add	sp, #28
 800eb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb40 <_localeconv_r>:
 800eb40:	4800      	ldr	r0, [pc, #0]	; (800eb44 <_localeconv_r+0x4>)
 800eb42:	4770      	bx	lr
 800eb44:	24000218 	.word	0x24000218

0800eb48 <__retarget_lock_init_recursive>:
 800eb48:	4770      	bx	lr

0800eb4a <__retarget_lock_acquire_recursive>:
 800eb4a:	4770      	bx	lr

0800eb4c <__retarget_lock_release_recursive>:
 800eb4c:	4770      	bx	lr

0800eb4e <__swhatbuf_r>:
 800eb4e:	b570      	push	{r4, r5, r6, lr}
 800eb50:	460e      	mov	r6, r1
 800eb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb56:	2900      	cmp	r1, #0
 800eb58:	b096      	sub	sp, #88	; 0x58
 800eb5a:	4614      	mov	r4, r2
 800eb5c:	461d      	mov	r5, r3
 800eb5e:	da07      	bge.n	800eb70 <__swhatbuf_r+0x22>
 800eb60:	2300      	movs	r3, #0
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	89b3      	ldrh	r3, [r6, #12]
 800eb66:	061a      	lsls	r2, r3, #24
 800eb68:	d410      	bmi.n	800eb8c <__swhatbuf_r+0x3e>
 800eb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb6e:	e00e      	b.n	800eb8e <__swhatbuf_r+0x40>
 800eb70:	466a      	mov	r2, sp
 800eb72:	f000 ff7b 	bl	800fa6c <_fstat_r>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	dbf2      	blt.n	800eb60 <__swhatbuf_r+0x12>
 800eb7a:	9a01      	ldr	r2, [sp, #4]
 800eb7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb84:	425a      	negs	r2, r3
 800eb86:	415a      	adcs	r2, r3
 800eb88:	602a      	str	r2, [r5, #0]
 800eb8a:	e7ee      	b.n	800eb6a <__swhatbuf_r+0x1c>
 800eb8c:	2340      	movs	r3, #64	; 0x40
 800eb8e:	2000      	movs	r0, #0
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	b016      	add	sp, #88	; 0x58
 800eb94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb98 <__smakebuf_r>:
 800eb98:	898b      	ldrh	r3, [r1, #12]
 800eb9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb9c:	079d      	lsls	r5, r3, #30
 800eb9e:	4606      	mov	r6, r0
 800eba0:	460c      	mov	r4, r1
 800eba2:	d507      	bpl.n	800ebb4 <__smakebuf_r+0x1c>
 800eba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	6123      	str	r3, [r4, #16]
 800ebac:	2301      	movs	r3, #1
 800ebae:	6163      	str	r3, [r4, #20]
 800ebb0:	b002      	add	sp, #8
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}
 800ebb4:	ab01      	add	r3, sp, #4
 800ebb6:	466a      	mov	r2, sp
 800ebb8:	f7ff ffc9 	bl	800eb4e <__swhatbuf_r>
 800ebbc:	9900      	ldr	r1, [sp, #0]
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7fc fcbb 	bl	800b53c <_malloc_r>
 800ebc6:	b948      	cbnz	r0, 800ebdc <__smakebuf_r+0x44>
 800ebc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebcc:	059a      	lsls	r2, r3, #22
 800ebce:	d4ef      	bmi.n	800ebb0 <__smakebuf_r+0x18>
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	81a3      	strh	r3, [r4, #12]
 800ebda:	e7e3      	b.n	800eba4 <__smakebuf_r+0xc>
 800ebdc:	4b0d      	ldr	r3, [pc, #52]	; (800ec14 <__smakebuf_r+0x7c>)
 800ebde:	62b3      	str	r3, [r6, #40]	; 0x28
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	6020      	str	r0, [r4, #0]
 800ebe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebe8:	81a3      	strh	r3, [r4, #12]
 800ebea:	9b00      	ldr	r3, [sp, #0]
 800ebec:	6163      	str	r3, [r4, #20]
 800ebee:	9b01      	ldr	r3, [sp, #4]
 800ebf0:	6120      	str	r0, [r4, #16]
 800ebf2:	b15b      	cbz	r3, 800ec0c <__smakebuf_r+0x74>
 800ebf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	f000 ff49 	bl	800fa90 <_isatty_r>
 800ebfe:	b128      	cbz	r0, 800ec0c <__smakebuf_r+0x74>
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	f023 0303 	bic.w	r3, r3, #3
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	81a3      	strh	r3, [r4, #12]
 800ec0c:	89a0      	ldrh	r0, [r4, #12]
 800ec0e:	4305      	orrs	r5, r0
 800ec10:	81a5      	strh	r5, [r4, #12]
 800ec12:	e7cd      	b.n	800ebb0 <__smakebuf_r+0x18>
 800ec14:	0800e2c1 	.word	0x0800e2c1

0800ec18 <__ascii_mbtowc>:
 800ec18:	b082      	sub	sp, #8
 800ec1a:	b901      	cbnz	r1, 800ec1e <__ascii_mbtowc+0x6>
 800ec1c:	a901      	add	r1, sp, #4
 800ec1e:	b142      	cbz	r2, 800ec32 <__ascii_mbtowc+0x1a>
 800ec20:	b14b      	cbz	r3, 800ec36 <__ascii_mbtowc+0x1e>
 800ec22:	7813      	ldrb	r3, [r2, #0]
 800ec24:	600b      	str	r3, [r1, #0]
 800ec26:	7812      	ldrb	r2, [r2, #0]
 800ec28:	1e10      	subs	r0, r2, #0
 800ec2a:	bf18      	it	ne
 800ec2c:	2001      	movne	r0, #1
 800ec2e:	b002      	add	sp, #8
 800ec30:	4770      	bx	lr
 800ec32:	4610      	mov	r0, r2
 800ec34:	e7fb      	b.n	800ec2e <__ascii_mbtowc+0x16>
 800ec36:	f06f 0001 	mvn.w	r0, #1
 800ec3a:	e7f8      	b.n	800ec2e <__ascii_mbtowc+0x16>

0800ec3c <__malloc_lock>:
 800ec3c:	4801      	ldr	r0, [pc, #4]	; (800ec44 <__malloc_lock+0x8>)
 800ec3e:	f7ff bf84 	b.w	800eb4a <__retarget_lock_acquire_recursive>
 800ec42:	bf00      	nop
 800ec44:	24000cc4 	.word	0x24000cc4

0800ec48 <__malloc_unlock>:
 800ec48:	4801      	ldr	r0, [pc, #4]	; (800ec50 <__malloc_unlock+0x8>)
 800ec4a:	f7ff bf7f 	b.w	800eb4c <__retarget_lock_release_recursive>
 800ec4e:	bf00      	nop
 800ec50:	24000cc4 	.word	0x24000cc4

0800ec54 <_Balloc>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec58:	4604      	mov	r4, r0
 800ec5a:	460d      	mov	r5, r1
 800ec5c:	b976      	cbnz	r6, 800ec7c <_Balloc+0x28>
 800ec5e:	2010      	movs	r0, #16
 800ec60:	f7fc fbdc 	bl	800b41c <malloc>
 800ec64:	4602      	mov	r2, r0
 800ec66:	6260      	str	r0, [r4, #36]	; 0x24
 800ec68:	b920      	cbnz	r0, 800ec74 <_Balloc+0x20>
 800ec6a:	4b18      	ldr	r3, [pc, #96]	; (800eccc <_Balloc+0x78>)
 800ec6c:	4818      	ldr	r0, [pc, #96]	; (800ecd0 <_Balloc+0x7c>)
 800ec6e:	2166      	movs	r1, #102	; 0x66
 800ec70:	f7fc fb7a 	bl	800b368 <__assert_func>
 800ec74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec78:	6006      	str	r6, [r0, #0]
 800ec7a:	60c6      	str	r6, [r0, #12]
 800ec7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec7e:	68f3      	ldr	r3, [r6, #12]
 800ec80:	b183      	cbz	r3, 800eca4 <_Balloc+0x50>
 800ec82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec8a:	b9b8      	cbnz	r0, 800ecbc <_Balloc+0x68>
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ec92:	1d72      	adds	r2, r6, #5
 800ec94:	0092      	lsls	r2, r2, #2
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 fc98 	bl	800f5cc <_calloc_r>
 800ec9c:	b160      	cbz	r0, 800ecb8 <_Balloc+0x64>
 800ec9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eca2:	e00e      	b.n	800ecc2 <_Balloc+0x6e>
 800eca4:	2221      	movs	r2, #33	; 0x21
 800eca6:	2104      	movs	r1, #4
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f000 fc8f 	bl	800f5cc <_calloc_r>
 800ecae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecb0:	60f0      	str	r0, [r6, #12]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1e4      	bne.n	800ec82 <_Balloc+0x2e>
 800ecb8:	2000      	movs	r0, #0
 800ecba:	bd70      	pop	{r4, r5, r6, pc}
 800ecbc:	6802      	ldr	r2, [r0, #0]
 800ecbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ecc8:	e7f7      	b.n	800ecba <_Balloc+0x66>
 800ecca:	bf00      	nop
 800eccc:	08010736 	.word	0x08010736
 800ecd0:	080108a0 	.word	0x080108a0

0800ecd4 <_Bfree>:
 800ecd4:	b570      	push	{r4, r5, r6, lr}
 800ecd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ecd8:	4605      	mov	r5, r0
 800ecda:	460c      	mov	r4, r1
 800ecdc:	b976      	cbnz	r6, 800ecfc <_Bfree+0x28>
 800ecde:	2010      	movs	r0, #16
 800ece0:	f7fc fb9c 	bl	800b41c <malloc>
 800ece4:	4602      	mov	r2, r0
 800ece6:	6268      	str	r0, [r5, #36]	; 0x24
 800ece8:	b920      	cbnz	r0, 800ecf4 <_Bfree+0x20>
 800ecea:	4b09      	ldr	r3, [pc, #36]	; (800ed10 <_Bfree+0x3c>)
 800ecec:	4809      	ldr	r0, [pc, #36]	; (800ed14 <_Bfree+0x40>)
 800ecee:	218a      	movs	r1, #138	; 0x8a
 800ecf0:	f7fc fb3a 	bl	800b368 <__assert_func>
 800ecf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecf8:	6006      	str	r6, [r0, #0]
 800ecfa:	60c6      	str	r6, [r0, #12]
 800ecfc:	b13c      	cbz	r4, 800ed0e <_Bfree+0x3a>
 800ecfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed00:	6862      	ldr	r2, [r4, #4]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed08:	6021      	str	r1, [r4, #0]
 800ed0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
 800ed10:	08010736 	.word	0x08010736
 800ed14:	080108a0 	.word	0x080108a0

0800ed18 <__multadd>:
 800ed18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1c:	690e      	ldr	r6, [r1, #16]
 800ed1e:	4607      	mov	r7, r0
 800ed20:	4698      	mov	r8, r3
 800ed22:	460c      	mov	r4, r1
 800ed24:	f101 0014 	add.w	r0, r1, #20
 800ed28:	2300      	movs	r3, #0
 800ed2a:	6805      	ldr	r5, [r0, #0]
 800ed2c:	b2a9      	uxth	r1, r5
 800ed2e:	fb02 8101 	mla	r1, r2, r1, r8
 800ed32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ed36:	0c2d      	lsrs	r5, r5, #16
 800ed38:	fb02 c505 	mla	r5, r2, r5, ip
 800ed3c:	b289      	uxth	r1, r1
 800ed3e:	3301      	adds	r3, #1
 800ed40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ed44:	429e      	cmp	r6, r3
 800ed46:	f840 1b04 	str.w	r1, [r0], #4
 800ed4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ed4e:	dcec      	bgt.n	800ed2a <__multadd+0x12>
 800ed50:	f1b8 0f00 	cmp.w	r8, #0
 800ed54:	d022      	beq.n	800ed9c <__multadd+0x84>
 800ed56:	68a3      	ldr	r3, [r4, #8]
 800ed58:	42b3      	cmp	r3, r6
 800ed5a:	dc19      	bgt.n	800ed90 <__multadd+0x78>
 800ed5c:	6861      	ldr	r1, [r4, #4]
 800ed5e:	4638      	mov	r0, r7
 800ed60:	3101      	adds	r1, #1
 800ed62:	f7ff ff77 	bl	800ec54 <_Balloc>
 800ed66:	4605      	mov	r5, r0
 800ed68:	b928      	cbnz	r0, 800ed76 <__multadd+0x5e>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	4b0d      	ldr	r3, [pc, #52]	; (800eda4 <__multadd+0x8c>)
 800ed6e:	480e      	ldr	r0, [pc, #56]	; (800eda8 <__multadd+0x90>)
 800ed70:	21b5      	movs	r1, #181	; 0xb5
 800ed72:	f7fc faf9 	bl	800b368 <__assert_func>
 800ed76:	6922      	ldr	r2, [r4, #16]
 800ed78:	3202      	adds	r2, #2
 800ed7a:	f104 010c 	add.w	r1, r4, #12
 800ed7e:	0092      	lsls	r2, r2, #2
 800ed80:	300c      	adds	r0, #12
 800ed82:	f7fc fb5b 	bl	800b43c <memcpy>
 800ed86:	4621      	mov	r1, r4
 800ed88:	4638      	mov	r0, r7
 800ed8a:	f7ff ffa3 	bl	800ecd4 <_Bfree>
 800ed8e:	462c      	mov	r4, r5
 800ed90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ed94:	3601      	adds	r6, #1
 800ed96:	f8c3 8014 	str.w	r8, [r3, #20]
 800ed9a:	6126      	str	r6, [r4, #16]
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda2:	bf00      	nop
 800eda4:	080107ac 	.word	0x080107ac
 800eda8:	080108a0 	.word	0x080108a0

0800edac <__s2b>:
 800edac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb0:	460c      	mov	r4, r1
 800edb2:	4615      	mov	r5, r2
 800edb4:	461f      	mov	r7, r3
 800edb6:	2209      	movs	r2, #9
 800edb8:	3308      	adds	r3, #8
 800edba:	4606      	mov	r6, r0
 800edbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800edc0:	2100      	movs	r1, #0
 800edc2:	2201      	movs	r2, #1
 800edc4:	429a      	cmp	r2, r3
 800edc6:	db09      	blt.n	800eddc <__s2b+0x30>
 800edc8:	4630      	mov	r0, r6
 800edca:	f7ff ff43 	bl	800ec54 <_Balloc>
 800edce:	b940      	cbnz	r0, 800ede2 <__s2b+0x36>
 800edd0:	4602      	mov	r2, r0
 800edd2:	4b19      	ldr	r3, [pc, #100]	; (800ee38 <__s2b+0x8c>)
 800edd4:	4819      	ldr	r0, [pc, #100]	; (800ee3c <__s2b+0x90>)
 800edd6:	21ce      	movs	r1, #206	; 0xce
 800edd8:	f7fc fac6 	bl	800b368 <__assert_func>
 800eddc:	0052      	lsls	r2, r2, #1
 800edde:	3101      	adds	r1, #1
 800ede0:	e7f0      	b.n	800edc4 <__s2b+0x18>
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	6143      	str	r3, [r0, #20]
 800ede6:	2d09      	cmp	r5, #9
 800ede8:	f04f 0301 	mov.w	r3, #1
 800edec:	6103      	str	r3, [r0, #16]
 800edee:	dd16      	ble.n	800ee1e <__s2b+0x72>
 800edf0:	f104 0909 	add.w	r9, r4, #9
 800edf4:	46c8      	mov	r8, r9
 800edf6:	442c      	add	r4, r5
 800edf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800edfc:	4601      	mov	r1, r0
 800edfe:	3b30      	subs	r3, #48	; 0x30
 800ee00:	220a      	movs	r2, #10
 800ee02:	4630      	mov	r0, r6
 800ee04:	f7ff ff88 	bl	800ed18 <__multadd>
 800ee08:	45a0      	cmp	r8, r4
 800ee0a:	d1f5      	bne.n	800edf8 <__s2b+0x4c>
 800ee0c:	f1a5 0408 	sub.w	r4, r5, #8
 800ee10:	444c      	add	r4, r9
 800ee12:	1b2d      	subs	r5, r5, r4
 800ee14:	1963      	adds	r3, r4, r5
 800ee16:	42bb      	cmp	r3, r7
 800ee18:	db04      	blt.n	800ee24 <__s2b+0x78>
 800ee1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1e:	340a      	adds	r4, #10
 800ee20:	2509      	movs	r5, #9
 800ee22:	e7f6      	b.n	800ee12 <__s2b+0x66>
 800ee24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee28:	4601      	mov	r1, r0
 800ee2a:	3b30      	subs	r3, #48	; 0x30
 800ee2c:	220a      	movs	r2, #10
 800ee2e:	4630      	mov	r0, r6
 800ee30:	f7ff ff72 	bl	800ed18 <__multadd>
 800ee34:	e7ee      	b.n	800ee14 <__s2b+0x68>
 800ee36:	bf00      	nop
 800ee38:	080107ac 	.word	0x080107ac
 800ee3c:	080108a0 	.word	0x080108a0

0800ee40 <__hi0bits>:
 800ee40:	0c03      	lsrs	r3, r0, #16
 800ee42:	041b      	lsls	r3, r3, #16
 800ee44:	b9d3      	cbnz	r3, 800ee7c <__hi0bits+0x3c>
 800ee46:	0400      	lsls	r0, r0, #16
 800ee48:	2310      	movs	r3, #16
 800ee4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ee4e:	bf04      	itt	eq
 800ee50:	0200      	lsleq	r0, r0, #8
 800ee52:	3308      	addeq	r3, #8
 800ee54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ee58:	bf04      	itt	eq
 800ee5a:	0100      	lsleq	r0, r0, #4
 800ee5c:	3304      	addeq	r3, #4
 800ee5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ee62:	bf04      	itt	eq
 800ee64:	0080      	lsleq	r0, r0, #2
 800ee66:	3302      	addeq	r3, #2
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	db05      	blt.n	800ee78 <__hi0bits+0x38>
 800ee6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ee70:	f103 0301 	add.w	r3, r3, #1
 800ee74:	bf08      	it	eq
 800ee76:	2320      	moveq	r3, #32
 800ee78:	4618      	mov	r0, r3
 800ee7a:	4770      	bx	lr
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	e7e4      	b.n	800ee4a <__hi0bits+0xa>

0800ee80 <__lo0bits>:
 800ee80:	6803      	ldr	r3, [r0, #0]
 800ee82:	f013 0207 	ands.w	r2, r3, #7
 800ee86:	4601      	mov	r1, r0
 800ee88:	d00b      	beq.n	800eea2 <__lo0bits+0x22>
 800ee8a:	07da      	lsls	r2, r3, #31
 800ee8c:	d424      	bmi.n	800eed8 <__lo0bits+0x58>
 800ee8e:	0798      	lsls	r0, r3, #30
 800ee90:	bf49      	itett	mi
 800ee92:	085b      	lsrmi	r3, r3, #1
 800ee94:	089b      	lsrpl	r3, r3, #2
 800ee96:	2001      	movmi	r0, #1
 800ee98:	600b      	strmi	r3, [r1, #0]
 800ee9a:	bf5c      	itt	pl
 800ee9c:	600b      	strpl	r3, [r1, #0]
 800ee9e:	2002      	movpl	r0, #2
 800eea0:	4770      	bx	lr
 800eea2:	b298      	uxth	r0, r3
 800eea4:	b9b0      	cbnz	r0, 800eed4 <__lo0bits+0x54>
 800eea6:	0c1b      	lsrs	r3, r3, #16
 800eea8:	2010      	movs	r0, #16
 800eeaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eeae:	bf04      	itt	eq
 800eeb0:	0a1b      	lsreq	r3, r3, #8
 800eeb2:	3008      	addeq	r0, #8
 800eeb4:	071a      	lsls	r2, r3, #28
 800eeb6:	bf04      	itt	eq
 800eeb8:	091b      	lsreq	r3, r3, #4
 800eeba:	3004      	addeq	r0, #4
 800eebc:	079a      	lsls	r2, r3, #30
 800eebe:	bf04      	itt	eq
 800eec0:	089b      	lsreq	r3, r3, #2
 800eec2:	3002      	addeq	r0, #2
 800eec4:	07da      	lsls	r2, r3, #31
 800eec6:	d403      	bmi.n	800eed0 <__lo0bits+0x50>
 800eec8:	085b      	lsrs	r3, r3, #1
 800eeca:	f100 0001 	add.w	r0, r0, #1
 800eece:	d005      	beq.n	800eedc <__lo0bits+0x5c>
 800eed0:	600b      	str	r3, [r1, #0]
 800eed2:	4770      	bx	lr
 800eed4:	4610      	mov	r0, r2
 800eed6:	e7e8      	b.n	800eeaa <__lo0bits+0x2a>
 800eed8:	2000      	movs	r0, #0
 800eeda:	4770      	bx	lr
 800eedc:	2020      	movs	r0, #32
 800eede:	4770      	bx	lr

0800eee0 <__i2b>:
 800eee0:	b510      	push	{r4, lr}
 800eee2:	460c      	mov	r4, r1
 800eee4:	2101      	movs	r1, #1
 800eee6:	f7ff feb5 	bl	800ec54 <_Balloc>
 800eeea:	4602      	mov	r2, r0
 800eeec:	b928      	cbnz	r0, 800eefa <__i2b+0x1a>
 800eeee:	4b05      	ldr	r3, [pc, #20]	; (800ef04 <__i2b+0x24>)
 800eef0:	4805      	ldr	r0, [pc, #20]	; (800ef08 <__i2b+0x28>)
 800eef2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eef6:	f7fc fa37 	bl	800b368 <__assert_func>
 800eefa:	2301      	movs	r3, #1
 800eefc:	6144      	str	r4, [r0, #20]
 800eefe:	6103      	str	r3, [r0, #16]
 800ef00:	bd10      	pop	{r4, pc}
 800ef02:	bf00      	nop
 800ef04:	080107ac 	.word	0x080107ac
 800ef08:	080108a0 	.word	0x080108a0

0800ef0c <__multiply>:
 800ef0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef10:	4614      	mov	r4, r2
 800ef12:	690a      	ldr	r2, [r1, #16]
 800ef14:	6923      	ldr	r3, [r4, #16]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	bfb8      	it	lt
 800ef1a:	460b      	movlt	r3, r1
 800ef1c:	460d      	mov	r5, r1
 800ef1e:	bfbc      	itt	lt
 800ef20:	4625      	movlt	r5, r4
 800ef22:	461c      	movlt	r4, r3
 800ef24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ef28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ef2c:	68ab      	ldr	r3, [r5, #8]
 800ef2e:	6869      	ldr	r1, [r5, #4]
 800ef30:	eb0a 0709 	add.w	r7, sl, r9
 800ef34:	42bb      	cmp	r3, r7
 800ef36:	b085      	sub	sp, #20
 800ef38:	bfb8      	it	lt
 800ef3a:	3101      	addlt	r1, #1
 800ef3c:	f7ff fe8a 	bl	800ec54 <_Balloc>
 800ef40:	b930      	cbnz	r0, 800ef50 <__multiply+0x44>
 800ef42:	4602      	mov	r2, r0
 800ef44:	4b42      	ldr	r3, [pc, #264]	; (800f050 <__multiply+0x144>)
 800ef46:	4843      	ldr	r0, [pc, #268]	; (800f054 <__multiply+0x148>)
 800ef48:	f240 115d 	movw	r1, #349	; 0x15d
 800ef4c:	f7fc fa0c 	bl	800b368 <__assert_func>
 800ef50:	f100 0614 	add.w	r6, r0, #20
 800ef54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ef58:	4633      	mov	r3, r6
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	4543      	cmp	r3, r8
 800ef5e:	d31e      	bcc.n	800ef9e <__multiply+0x92>
 800ef60:	f105 0c14 	add.w	ip, r5, #20
 800ef64:	f104 0314 	add.w	r3, r4, #20
 800ef68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ef6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ef70:	9202      	str	r2, [sp, #8]
 800ef72:	ebac 0205 	sub.w	r2, ip, r5
 800ef76:	3a15      	subs	r2, #21
 800ef78:	f022 0203 	bic.w	r2, r2, #3
 800ef7c:	3204      	adds	r2, #4
 800ef7e:	f105 0115 	add.w	r1, r5, #21
 800ef82:	458c      	cmp	ip, r1
 800ef84:	bf38      	it	cc
 800ef86:	2204      	movcc	r2, #4
 800ef88:	9201      	str	r2, [sp, #4]
 800ef8a:	9a02      	ldr	r2, [sp, #8]
 800ef8c:	9303      	str	r3, [sp, #12]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d808      	bhi.n	800efa4 <__multiply+0x98>
 800ef92:	2f00      	cmp	r7, #0
 800ef94:	dc55      	bgt.n	800f042 <__multiply+0x136>
 800ef96:	6107      	str	r7, [r0, #16]
 800ef98:	b005      	add	sp, #20
 800ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9e:	f843 2b04 	str.w	r2, [r3], #4
 800efa2:	e7db      	b.n	800ef5c <__multiply+0x50>
 800efa4:	f8b3 a000 	ldrh.w	sl, [r3]
 800efa8:	f1ba 0f00 	cmp.w	sl, #0
 800efac:	d020      	beq.n	800eff0 <__multiply+0xe4>
 800efae:	f105 0e14 	add.w	lr, r5, #20
 800efb2:	46b1      	mov	r9, r6
 800efb4:	2200      	movs	r2, #0
 800efb6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800efba:	f8d9 b000 	ldr.w	fp, [r9]
 800efbe:	b2a1      	uxth	r1, r4
 800efc0:	fa1f fb8b 	uxth.w	fp, fp
 800efc4:	fb0a b101 	mla	r1, sl, r1, fp
 800efc8:	4411      	add	r1, r2
 800efca:	f8d9 2000 	ldr.w	r2, [r9]
 800efce:	0c24      	lsrs	r4, r4, #16
 800efd0:	0c12      	lsrs	r2, r2, #16
 800efd2:	fb0a 2404 	mla	r4, sl, r4, r2
 800efd6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800efda:	b289      	uxth	r1, r1
 800efdc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800efe0:	45f4      	cmp	ip, lr
 800efe2:	f849 1b04 	str.w	r1, [r9], #4
 800efe6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800efea:	d8e4      	bhi.n	800efb6 <__multiply+0xaa>
 800efec:	9901      	ldr	r1, [sp, #4]
 800efee:	5072      	str	r2, [r6, r1]
 800eff0:	9a03      	ldr	r2, [sp, #12]
 800eff2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eff6:	3304      	adds	r3, #4
 800eff8:	f1b9 0f00 	cmp.w	r9, #0
 800effc:	d01f      	beq.n	800f03e <__multiply+0x132>
 800effe:	6834      	ldr	r4, [r6, #0]
 800f000:	f105 0114 	add.w	r1, r5, #20
 800f004:	46b6      	mov	lr, r6
 800f006:	f04f 0a00 	mov.w	sl, #0
 800f00a:	880a      	ldrh	r2, [r1, #0]
 800f00c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f010:	fb09 b202 	mla	r2, r9, r2, fp
 800f014:	4492      	add	sl, r2
 800f016:	b2a4      	uxth	r4, r4
 800f018:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f01c:	f84e 4b04 	str.w	r4, [lr], #4
 800f020:	f851 4b04 	ldr.w	r4, [r1], #4
 800f024:	f8be 2000 	ldrh.w	r2, [lr]
 800f028:	0c24      	lsrs	r4, r4, #16
 800f02a:	fb09 2404 	mla	r4, r9, r4, r2
 800f02e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f032:	458c      	cmp	ip, r1
 800f034:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f038:	d8e7      	bhi.n	800f00a <__multiply+0xfe>
 800f03a:	9a01      	ldr	r2, [sp, #4]
 800f03c:	50b4      	str	r4, [r6, r2]
 800f03e:	3604      	adds	r6, #4
 800f040:	e7a3      	b.n	800ef8a <__multiply+0x7e>
 800f042:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1a5      	bne.n	800ef96 <__multiply+0x8a>
 800f04a:	3f01      	subs	r7, #1
 800f04c:	e7a1      	b.n	800ef92 <__multiply+0x86>
 800f04e:	bf00      	nop
 800f050:	080107ac 	.word	0x080107ac
 800f054:	080108a0 	.word	0x080108a0

0800f058 <__pow5mult>:
 800f058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f05c:	4615      	mov	r5, r2
 800f05e:	f012 0203 	ands.w	r2, r2, #3
 800f062:	4606      	mov	r6, r0
 800f064:	460f      	mov	r7, r1
 800f066:	d007      	beq.n	800f078 <__pow5mult+0x20>
 800f068:	4c25      	ldr	r4, [pc, #148]	; (800f100 <__pow5mult+0xa8>)
 800f06a:	3a01      	subs	r2, #1
 800f06c:	2300      	movs	r3, #0
 800f06e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f072:	f7ff fe51 	bl	800ed18 <__multadd>
 800f076:	4607      	mov	r7, r0
 800f078:	10ad      	asrs	r5, r5, #2
 800f07a:	d03d      	beq.n	800f0f8 <__pow5mult+0xa0>
 800f07c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f07e:	b97c      	cbnz	r4, 800f0a0 <__pow5mult+0x48>
 800f080:	2010      	movs	r0, #16
 800f082:	f7fc f9cb 	bl	800b41c <malloc>
 800f086:	4602      	mov	r2, r0
 800f088:	6270      	str	r0, [r6, #36]	; 0x24
 800f08a:	b928      	cbnz	r0, 800f098 <__pow5mult+0x40>
 800f08c:	4b1d      	ldr	r3, [pc, #116]	; (800f104 <__pow5mult+0xac>)
 800f08e:	481e      	ldr	r0, [pc, #120]	; (800f108 <__pow5mult+0xb0>)
 800f090:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f094:	f7fc f968 	bl	800b368 <__assert_func>
 800f098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f09c:	6004      	str	r4, [r0, #0]
 800f09e:	60c4      	str	r4, [r0, #12]
 800f0a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f0a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f0a8:	b94c      	cbnz	r4, 800f0be <__pow5mult+0x66>
 800f0aa:	f240 2171 	movw	r1, #625	; 0x271
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f7ff ff16 	bl	800eee0 <__i2b>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	6003      	str	r3, [r0, #0]
 800f0be:	f04f 0900 	mov.w	r9, #0
 800f0c2:	07eb      	lsls	r3, r5, #31
 800f0c4:	d50a      	bpl.n	800f0dc <__pow5mult+0x84>
 800f0c6:	4639      	mov	r1, r7
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7ff ff1e 	bl	800ef0c <__multiply>
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	4680      	mov	r8, r0
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	f7ff fdfd 	bl	800ecd4 <_Bfree>
 800f0da:	4647      	mov	r7, r8
 800f0dc:	106d      	asrs	r5, r5, #1
 800f0de:	d00b      	beq.n	800f0f8 <__pow5mult+0xa0>
 800f0e0:	6820      	ldr	r0, [r4, #0]
 800f0e2:	b938      	cbnz	r0, 800f0f4 <__pow5mult+0x9c>
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7ff ff0f 	bl	800ef0c <__multiply>
 800f0ee:	6020      	str	r0, [r4, #0]
 800f0f0:	f8c0 9000 	str.w	r9, [r0]
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	e7e4      	b.n	800f0c2 <__pow5mult+0x6a>
 800f0f8:	4638      	mov	r0, r7
 800f0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0fe:	bf00      	nop
 800f100:	080109f0 	.word	0x080109f0
 800f104:	08010736 	.word	0x08010736
 800f108:	080108a0 	.word	0x080108a0

0800f10c <__lshift>:
 800f10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	460c      	mov	r4, r1
 800f112:	6849      	ldr	r1, [r1, #4]
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f11a:	68a3      	ldr	r3, [r4, #8]
 800f11c:	4607      	mov	r7, r0
 800f11e:	4691      	mov	r9, r2
 800f120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f124:	f108 0601 	add.w	r6, r8, #1
 800f128:	42b3      	cmp	r3, r6
 800f12a:	db0b      	blt.n	800f144 <__lshift+0x38>
 800f12c:	4638      	mov	r0, r7
 800f12e:	f7ff fd91 	bl	800ec54 <_Balloc>
 800f132:	4605      	mov	r5, r0
 800f134:	b948      	cbnz	r0, 800f14a <__lshift+0x3e>
 800f136:	4602      	mov	r2, r0
 800f138:	4b28      	ldr	r3, [pc, #160]	; (800f1dc <__lshift+0xd0>)
 800f13a:	4829      	ldr	r0, [pc, #164]	; (800f1e0 <__lshift+0xd4>)
 800f13c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f140:	f7fc f912 	bl	800b368 <__assert_func>
 800f144:	3101      	adds	r1, #1
 800f146:	005b      	lsls	r3, r3, #1
 800f148:	e7ee      	b.n	800f128 <__lshift+0x1c>
 800f14a:	2300      	movs	r3, #0
 800f14c:	f100 0114 	add.w	r1, r0, #20
 800f150:	f100 0210 	add.w	r2, r0, #16
 800f154:	4618      	mov	r0, r3
 800f156:	4553      	cmp	r3, sl
 800f158:	db33      	blt.n	800f1c2 <__lshift+0xb6>
 800f15a:	6920      	ldr	r0, [r4, #16]
 800f15c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f160:	f104 0314 	add.w	r3, r4, #20
 800f164:	f019 091f 	ands.w	r9, r9, #31
 800f168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f16c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f170:	d02b      	beq.n	800f1ca <__lshift+0xbe>
 800f172:	f1c9 0e20 	rsb	lr, r9, #32
 800f176:	468a      	mov	sl, r1
 800f178:	2200      	movs	r2, #0
 800f17a:	6818      	ldr	r0, [r3, #0]
 800f17c:	fa00 f009 	lsl.w	r0, r0, r9
 800f180:	4302      	orrs	r2, r0
 800f182:	f84a 2b04 	str.w	r2, [sl], #4
 800f186:	f853 2b04 	ldr.w	r2, [r3], #4
 800f18a:	459c      	cmp	ip, r3
 800f18c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f190:	d8f3      	bhi.n	800f17a <__lshift+0x6e>
 800f192:	ebac 0304 	sub.w	r3, ip, r4
 800f196:	3b15      	subs	r3, #21
 800f198:	f023 0303 	bic.w	r3, r3, #3
 800f19c:	3304      	adds	r3, #4
 800f19e:	f104 0015 	add.w	r0, r4, #21
 800f1a2:	4584      	cmp	ip, r0
 800f1a4:	bf38      	it	cc
 800f1a6:	2304      	movcc	r3, #4
 800f1a8:	50ca      	str	r2, [r1, r3]
 800f1aa:	b10a      	cbz	r2, 800f1b0 <__lshift+0xa4>
 800f1ac:	f108 0602 	add.w	r6, r8, #2
 800f1b0:	3e01      	subs	r6, #1
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	612e      	str	r6, [r5, #16]
 800f1b6:	4621      	mov	r1, r4
 800f1b8:	f7ff fd8c 	bl	800ecd4 <_Bfree>
 800f1bc:	4628      	mov	r0, r5
 800f1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	e7c5      	b.n	800f156 <__lshift+0x4a>
 800f1ca:	3904      	subs	r1, #4
 800f1cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1d4:	459c      	cmp	ip, r3
 800f1d6:	d8f9      	bhi.n	800f1cc <__lshift+0xc0>
 800f1d8:	e7ea      	b.n	800f1b0 <__lshift+0xa4>
 800f1da:	bf00      	nop
 800f1dc:	080107ac 	.word	0x080107ac
 800f1e0:	080108a0 	.word	0x080108a0

0800f1e4 <__mcmp>:
 800f1e4:	b530      	push	{r4, r5, lr}
 800f1e6:	6902      	ldr	r2, [r0, #16]
 800f1e8:	690c      	ldr	r4, [r1, #16]
 800f1ea:	1b12      	subs	r2, r2, r4
 800f1ec:	d10e      	bne.n	800f20c <__mcmp+0x28>
 800f1ee:	f100 0314 	add.w	r3, r0, #20
 800f1f2:	3114      	adds	r1, #20
 800f1f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f1f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f1fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f204:	42a5      	cmp	r5, r4
 800f206:	d003      	beq.n	800f210 <__mcmp+0x2c>
 800f208:	d305      	bcc.n	800f216 <__mcmp+0x32>
 800f20a:	2201      	movs	r2, #1
 800f20c:	4610      	mov	r0, r2
 800f20e:	bd30      	pop	{r4, r5, pc}
 800f210:	4283      	cmp	r3, r0
 800f212:	d3f3      	bcc.n	800f1fc <__mcmp+0x18>
 800f214:	e7fa      	b.n	800f20c <__mcmp+0x28>
 800f216:	f04f 32ff 	mov.w	r2, #4294967295
 800f21a:	e7f7      	b.n	800f20c <__mcmp+0x28>

0800f21c <__mdiff>:
 800f21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	460c      	mov	r4, r1
 800f222:	4606      	mov	r6, r0
 800f224:	4611      	mov	r1, r2
 800f226:	4620      	mov	r0, r4
 800f228:	4617      	mov	r7, r2
 800f22a:	f7ff ffdb 	bl	800f1e4 <__mcmp>
 800f22e:	1e05      	subs	r5, r0, #0
 800f230:	d110      	bne.n	800f254 <__mdiff+0x38>
 800f232:	4629      	mov	r1, r5
 800f234:	4630      	mov	r0, r6
 800f236:	f7ff fd0d 	bl	800ec54 <_Balloc>
 800f23a:	b930      	cbnz	r0, 800f24a <__mdiff+0x2e>
 800f23c:	4b39      	ldr	r3, [pc, #228]	; (800f324 <__mdiff+0x108>)
 800f23e:	4602      	mov	r2, r0
 800f240:	f240 2132 	movw	r1, #562	; 0x232
 800f244:	4838      	ldr	r0, [pc, #224]	; (800f328 <__mdiff+0x10c>)
 800f246:	f7fc f88f 	bl	800b368 <__assert_func>
 800f24a:	2301      	movs	r3, #1
 800f24c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f254:	bfa4      	itt	ge
 800f256:	463b      	movge	r3, r7
 800f258:	4627      	movge	r7, r4
 800f25a:	4630      	mov	r0, r6
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	bfa6      	itte	ge
 800f260:	461c      	movge	r4, r3
 800f262:	2500      	movge	r5, #0
 800f264:	2501      	movlt	r5, #1
 800f266:	f7ff fcf5 	bl	800ec54 <_Balloc>
 800f26a:	b920      	cbnz	r0, 800f276 <__mdiff+0x5a>
 800f26c:	4b2d      	ldr	r3, [pc, #180]	; (800f324 <__mdiff+0x108>)
 800f26e:	4602      	mov	r2, r0
 800f270:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f274:	e7e6      	b.n	800f244 <__mdiff+0x28>
 800f276:	693e      	ldr	r6, [r7, #16]
 800f278:	60c5      	str	r5, [r0, #12]
 800f27a:	6925      	ldr	r5, [r4, #16]
 800f27c:	f107 0114 	add.w	r1, r7, #20
 800f280:	f104 0914 	add.w	r9, r4, #20
 800f284:	f100 0e14 	add.w	lr, r0, #20
 800f288:	f107 0210 	add.w	r2, r7, #16
 800f28c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f290:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f294:	46f2      	mov	sl, lr
 800f296:	2700      	movs	r7, #0
 800f298:	f859 3b04 	ldr.w	r3, [r9], #4
 800f29c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f2a0:	fa1f f883 	uxth.w	r8, r3
 800f2a4:	fa17 f78b 	uxtah	r7, r7, fp
 800f2a8:	0c1b      	lsrs	r3, r3, #16
 800f2aa:	eba7 0808 	sub.w	r8, r7, r8
 800f2ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f2b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f2b6:	fa1f f888 	uxth.w	r8, r8
 800f2ba:	141f      	asrs	r7, r3, #16
 800f2bc:	454d      	cmp	r5, r9
 800f2be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f2c2:	f84a 3b04 	str.w	r3, [sl], #4
 800f2c6:	d8e7      	bhi.n	800f298 <__mdiff+0x7c>
 800f2c8:	1b2b      	subs	r3, r5, r4
 800f2ca:	3b15      	subs	r3, #21
 800f2cc:	f023 0303 	bic.w	r3, r3, #3
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	3415      	adds	r4, #21
 800f2d4:	42a5      	cmp	r5, r4
 800f2d6:	bf38      	it	cc
 800f2d8:	2304      	movcc	r3, #4
 800f2da:	4419      	add	r1, r3
 800f2dc:	4473      	add	r3, lr
 800f2de:	469e      	mov	lr, r3
 800f2e0:	460d      	mov	r5, r1
 800f2e2:	4565      	cmp	r5, ip
 800f2e4:	d30e      	bcc.n	800f304 <__mdiff+0xe8>
 800f2e6:	f10c 0203 	add.w	r2, ip, #3
 800f2ea:	1a52      	subs	r2, r2, r1
 800f2ec:	f022 0203 	bic.w	r2, r2, #3
 800f2f0:	3903      	subs	r1, #3
 800f2f2:	458c      	cmp	ip, r1
 800f2f4:	bf38      	it	cc
 800f2f6:	2200      	movcc	r2, #0
 800f2f8:	441a      	add	r2, r3
 800f2fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f2fe:	b17b      	cbz	r3, 800f320 <__mdiff+0x104>
 800f300:	6106      	str	r6, [r0, #16]
 800f302:	e7a5      	b.n	800f250 <__mdiff+0x34>
 800f304:	f855 8b04 	ldr.w	r8, [r5], #4
 800f308:	fa17 f488 	uxtah	r4, r7, r8
 800f30c:	1422      	asrs	r2, r4, #16
 800f30e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f312:	b2a4      	uxth	r4, r4
 800f314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f318:	f84e 4b04 	str.w	r4, [lr], #4
 800f31c:	1417      	asrs	r7, r2, #16
 800f31e:	e7e0      	b.n	800f2e2 <__mdiff+0xc6>
 800f320:	3e01      	subs	r6, #1
 800f322:	e7ea      	b.n	800f2fa <__mdiff+0xde>
 800f324:	080107ac 	.word	0x080107ac
 800f328:	080108a0 	.word	0x080108a0

0800f32c <__ulp>:
 800f32c:	b082      	sub	sp, #8
 800f32e:	ed8d 0b00 	vstr	d0, [sp]
 800f332:	9b01      	ldr	r3, [sp, #4]
 800f334:	4912      	ldr	r1, [pc, #72]	; (800f380 <__ulp+0x54>)
 800f336:	4019      	ands	r1, r3
 800f338:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f33c:	2900      	cmp	r1, #0
 800f33e:	dd05      	ble.n	800f34c <__ulp+0x20>
 800f340:	2200      	movs	r2, #0
 800f342:	460b      	mov	r3, r1
 800f344:	ec43 2b10 	vmov	d0, r2, r3
 800f348:	b002      	add	sp, #8
 800f34a:	4770      	bx	lr
 800f34c:	4249      	negs	r1, r1
 800f34e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f352:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f356:	f04f 0200 	mov.w	r2, #0
 800f35a:	f04f 0300 	mov.w	r3, #0
 800f35e:	da04      	bge.n	800f36a <__ulp+0x3e>
 800f360:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f364:	fa41 f300 	asr.w	r3, r1, r0
 800f368:	e7ec      	b.n	800f344 <__ulp+0x18>
 800f36a:	f1a0 0114 	sub.w	r1, r0, #20
 800f36e:	291e      	cmp	r1, #30
 800f370:	bfda      	itte	le
 800f372:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f376:	fa20 f101 	lsrle.w	r1, r0, r1
 800f37a:	2101      	movgt	r1, #1
 800f37c:	460a      	mov	r2, r1
 800f37e:	e7e1      	b.n	800f344 <__ulp+0x18>
 800f380:	7ff00000 	.word	0x7ff00000

0800f384 <__b2d>:
 800f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f386:	6905      	ldr	r5, [r0, #16]
 800f388:	f100 0714 	add.w	r7, r0, #20
 800f38c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f390:	1f2e      	subs	r6, r5, #4
 800f392:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f396:	4620      	mov	r0, r4
 800f398:	f7ff fd52 	bl	800ee40 <__hi0bits>
 800f39c:	f1c0 0320 	rsb	r3, r0, #32
 800f3a0:	280a      	cmp	r0, #10
 800f3a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f420 <__b2d+0x9c>
 800f3a6:	600b      	str	r3, [r1, #0]
 800f3a8:	dc14      	bgt.n	800f3d4 <__b2d+0x50>
 800f3aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800f3ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800f3b2:	42b7      	cmp	r7, r6
 800f3b4:	ea41 030c 	orr.w	r3, r1, ip
 800f3b8:	bf34      	ite	cc
 800f3ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f3be:	2100      	movcs	r1, #0
 800f3c0:	3015      	adds	r0, #21
 800f3c2:	fa04 f000 	lsl.w	r0, r4, r0
 800f3c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f3ca:	ea40 0201 	orr.w	r2, r0, r1
 800f3ce:	ec43 2b10 	vmov	d0, r2, r3
 800f3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d4:	42b7      	cmp	r7, r6
 800f3d6:	bf3a      	itte	cc
 800f3d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f3dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800f3e0:	2100      	movcs	r1, #0
 800f3e2:	380b      	subs	r0, #11
 800f3e4:	d017      	beq.n	800f416 <__b2d+0x92>
 800f3e6:	f1c0 0c20 	rsb	ip, r0, #32
 800f3ea:	fa04 f500 	lsl.w	r5, r4, r0
 800f3ee:	42be      	cmp	r6, r7
 800f3f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800f3f4:	ea45 0504 	orr.w	r5, r5, r4
 800f3f8:	bf8c      	ite	hi
 800f3fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f3fe:	2400      	movls	r4, #0
 800f400:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f404:	fa01 f000 	lsl.w	r0, r1, r0
 800f408:	fa24 f40c 	lsr.w	r4, r4, ip
 800f40c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f410:	ea40 0204 	orr.w	r2, r0, r4
 800f414:	e7db      	b.n	800f3ce <__b2d+0x4a>
 800f416:	ea44 030c 	orr.w	r3, r4, ip
 800f41a:	460a      	mov	r2, r1
 800f41c:	e7d7      	b.n	800f3ce <__b2d+0x4a>
 800f41e:	bf00      	nop
 800f420:	3ff00000 	.word	0x3ff00000

0800f424 <__d2b>:
 800f424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f428:	4689      	mov	r9, r1
 800f42a:	2101      	movs	r1, #1
 800f42c:	ec57 6b10 	vmov	r6, r7, d0
 800f430:	4690      	mov	r8, r2
 800f432:	f7ff fc0f 	bl	800ec54 <_Balloc>
 800f436:	4604      	mov	r4, r0
 800f438:	b930      	cbnz	r0, 800f448 <__d2b+0x24>
 800f43a:	4602      	mov	r2, r0
 800f43c:	4b25      	ldr	r3, [pc, #148]	; (800f4d4 <__d2b+0xb0>)
 800f43e:	4826      	ldr	r0, [pc, #152]	; (800f4d8 <__d2b+0xb4>)
 800f440:	f240 310a 	movw	r1, #778	; 0x30a
 800f444:	f7fb ff90 	bl	800b368 <__assert_func>
 800f448:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f44c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f450:	bb35      	cbnz	r5, 800f4a0 <__d2b+0x7c>
 800f452:	2e00      	cmp	r6, #0
 800f454:	9301      	str	r3, [sp, #4]
 800f456:	d028      	beq.n	800f4aa <__d2b+0x86>
 800f458:	4668      	mov	r0, sp
 800f45a:	9600      	str	r6, [sp, #0]
 800f45c:	f7ff fd10 	bl	800ee80 <__lo0bits>
 800f460:	9900      	ldr	r1, [sp, #0]
 800f462:	b300      	cbz	r0, 800f4a6 <__d2b+0x82>
 800f464:	9a01      	ldr	r2, [sp, #4]
 800f466:	f1c0 0320 	rsb	r3, r0, #32
 800f46a:	fa02 f303 	lsl.w	r3, r2, r3
 800f46e:	430b      	orrs	r3, r1
 800f470:	40c2      	lsrs	r2, r0
 800f472:	6163      	str	r3, [r4, #20]
 800f474:	9201      	str	r2, [sp, #4]
 800f476:	9b01      	ldr	r3, [sp, #4]
 800f478:	61a3      	str	r3, [r4, #24]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	bf14      	ite	ne
 800f47e:	2202      	movne	r2, #2
 800f480:	2201      	moveq	r2, #1
 800f482:	6122      	str	r2, [r4, #16]
 800f484:	b1d5      	cbz	r5, 800f4bc <__d2b+0x98>
 800f486:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f48a:	4405      	add	r5, r0
 800f48c:	f8c9 5000 	str.w	r5, [r9]
 800f490:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f494:	f8c8 0000 	str.w	r0, [r8]
 800f498:	4620      	mov	r0, r4
 800f49a:	b003      	add	sp, #12
 800f49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4a4:	e7d5      	b.n	800f452 <__d2b+0x2e>
 800f4a6:	6161      	str	r1, [r4, #20]
 800f4a8:	e7e5      	b.n	800f476 <__d2b+0x52>
 800f4aa:	a801      	add	r0, sp, #4
 800f4ac:	f7ff fce8 	bl	800ee80 <__lo0bits>
 800f4b0:	9b01      	ldr	r3, [sp, #4]
 800f4b2:	6163      	str	r3, [r4, #20]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	6122      	str	r2, [r4, #16]
 800f4b8:	3020      	adds	r0, #32
 800f4ba:	e7e3      	b.n	800f484 <__d2b+0x60>
 800f4bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f4c4:	f8c9 0000 	str.w	r0, [r9]
 800f4c8:	6918      	ldr	r0, [r3, #16]
 800f4ca:	f7ff fcb9 	bl	800ee40 <__hi0bits>
 800f4ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f4d2:	e7df      	b.n	800f494 <__d2b+0x70>
 800f4d4:	080107ac 	.word	0x080107ac
 800f4d8:	080108a0 	.word	0x080108a0

0800f4dc <__ratio>:
 800f4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	468a      	mov	sl, r1
 800f4e2:	4669      	mov	r1, sp
 800f4e4:	4683      	mov	fp, r0
 800f4e6:	f7ff ff4d 	bl	800f384 <__b2d>
 800f4ea:	a901      	add	r1, sp, #4
 800f4ec:	4650      	mov	r0, sl
 800f4ee:	ec59 8b10 	vmov	r8, r9, d0
 800f4f2:	ee10 6a10 	vmov	r6, s0
 800f4f6:	f7ff ff45 	bl	800f384 <__b2d>
 800f4fa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f4fe:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f502:	eba3 0c02 	sub.w	ip, r3, r2
 800f506:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f510:	ec55 4b10 	vmov	r4, r5, d0
 800f514:	2b00      	cmp	r3, #0
 800f516:	ee10 0a10 	vmov	r0, s0
 800f51a:	bfce      	itee	gt
 800f51c:	464a      	movgt	r2, r9
 800f51e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f522:	462a      	movle	r2, r5
 800f524:	464f      	mov	r7, r9
 800f526:	4629      	mov	r1, r5
 800f528:	bfcc      	ite	gt
 800f52a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f52e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f532:	ec47 6b17 	vmov	d7, r6, r7
 800f536:	ec41 0b16 	vmov	d6, r0, r1
 800f53a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800f53e:	b003      	add	sp, #12
 800f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f544 <__copybits>:
 800f544:	3901      	subs	r1, #1
 800f546:	b570      	push	{r4, r5, r6, lr}
 800f548:	1149      	asrs	r1, r1, #5
 800f54a:	6914      	ldr	r4, [r2, #16]
 800f54c:	3101      	adds	r1, #1
 800f54e:	f102 0314 	add.w	r3, r2, #20
 800f552:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f556:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f55a:	1f05      	subs	r5, r0, #4
 800f55c:	42a3      	cmp	r3, r4
 800f55e:	d30c      	bcc.n	800f57a <__copybits+0x36>
 800f560:	1aa3      	subs	r3, r4, r2
 800f562:	3b11      	subs	r3, #17
 800f564:	f023 0303 	bic.w	r3, r3, #3
 800f568:	3211      	adds	r2, #17
 800f56a:	42a2      	cmp	r2, r4
 800f56c:	bf88      	it	hi
 800f56e:	2300      	movhi	r3, #0
 800f570:	4418      	add	r0, r3
 800f572:	2300      	movs	r3, #0
 800f574:	4288      	cmp	r0, r1
 800f576:	d305      	bcc.n	800f584 <__copybits+0x40>
 800f578:	bd70      	pop	{r4, r5, r6, pc}
 800f57a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f57e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f582:	e7eb      	b.n	800f55c <__copybits+0x18>
 800f584:	f840 3b04 	str.w	r3, [r0], #4
 800f588:	e7f4      	b.n	800f574 <__copybits+0x30>

0800f58a <__any_on>:
 800f58a:	f100 0214 	add.w	r2, r0, #20
 800f58e:	6900      	ldr	r0, [r0, #16]
 800f590:	114b      	asrs	r3, r1, #5
 800f592:	4298      	cmp	r0, r3
 800f594:	b510      	push	{r4, lr}
 800f596:	db11      	blt.n	800f5bc <__any_on+0x32>
 800f598:	dd0a      	ble.n	800f5b0 <__any_on+0x26>
 800f59a:	f011 011f 	ands.w	r1, r1, #31
 800f59e:	d007      	beq.n	800f5b0 <__any_on+0x26>
 800f5a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f5a4:	fa24 f001 	lsr.w	r0, r4, r1
 800f5a8:	fa00 f101 	lsl.w	r1, r0, r1
 800f5ac:	428c      	cmp	r4, r1
 800f5ae:	d10b      	bne.n	800f5c8 <__any_on+0x3e>
 800f5b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d803      	bhi.n	800f5c0 <__any_on+0x36>
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	bd10      	pop	{r4, pc}
 800f5bc:	4603      	mov	r3, r0
 800f5be:	e7f7      	b.n	800f5b0 <__any_on+0x26>
 800f5c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f5c4:	2900      	cmp	r1, #0
 800f5c6:	d0f5      	beq.n	800f5b4 <__any_on+0x2a>
 800f5c8:	2001      	movs	r0, #1
 800f5ca:	e7f6      	b.n	800f5ba <__any_on+0x30>

0800f5cc <_calloc_r>:
 800f5cc:	b513      	push	{r0, r1, r4, lr}
 800f5ce:	434a      	muls	r2, r1
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	9201      	str	r2, [sp, #4]
 800f5d4:	f7fb ffb2 	bl	800b53c <_malloc_r>
 800f5d8:	4604      	mov	r4, r0
 800f5da:	b118      	cbz	r0, 800f5e4 <_calloc_r+0x18>
 800f5dc:	9a01      	ldr	r2, [sp, #4]
 800f5de:	2100      	movs	r1, #0
 800f5e0:	f7fb ff54 	bl	800b48c <memset>
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	b002      	add	sp, #8
 800f5e8:	bd10      	pop	{r4, pc}

0800f5ea <_realloc_r>:
 800f5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	4614      	mov	r4, r2
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	b921      	cbnz	r1, 800f5fe <_realloc_r+0x14>
 800f5f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	f7fb bf9f 	b.w	800b53c <_malloc_r>
 800f5fe:	b922      	cbnz	r2, 800f60a <_realloc_r+0x20>
 800f600:	f7fb ff4c 	bl	800b49c <_free_r>
 800f604:	4625      	mov	r5, r4
 800f606:	4628      	mov	r0, r5
 800f608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f60a:	f000 fa63 	bl	800fad4 <_malloc_usable_size_r>
 800f60e:	42a0      	cmp	r0, r4
 800f610:	d20f      	bcs.n	800f632 <_realloc_r+0x48>
 800f612:	4621      	mov	r1, r4
 800f614:	4638      	mov	r0, r7
 800f616:	f7fb ff91 	bl	800b53c <_malloc_r>
 800f61a:	4605      	mov	r5, r0
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d0f2      	beq.n	800f606 <_realloc_r+0x1c>
 800f620:	4631      	mov	r1, r6
 800f622:	4622      	mov	r2, r4
 800f624:	f7fb ff0a 	bl	800b43c <memcpy>
 800f628:	4631      	mov	r1, r6
 800f62a:	4638      	mov	r0, r7
 800f62c:	f7fb ff36 	bl	800b49c <_free_r>
 800f630:	e7e9      	b.n	800f606 <_realloc_r+0x1c>
 800f632:	4635      	mov	r5, r6
 800f634:	e7e7      	b.n	800f606 <_realloc_r+0x1c>

0800f636 <__ssputs_r>:
 800f636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f63a:	688e      	ldr	r6, [r1, #8]
 800f63c:	429e      	cmp	r6, r3
 800f63e:	4682      	mov	sl, r0
 800f640:	460c      	mov	r4, r1
 800f642:	4690      	mov	r8, r2
 800f644:	461f      	mov	r7, r3
 800f646:	d838      	bhi.n	800f6ba <__ssputs_r+0x84>
 800f648:	898a      	ldrh	r2, [r1, #12]
 800f64a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f64e:	d032      	beq.n	800f6b6 <__ssputs_r+0x80>
 800f650:	6825      	ldr	r5, [r4, #0]
 800f652:	6909      	ldr	r1, [r1, #16]
 800f654:	eba5 0901 	sub.w	r9, r5, r1
 800f658:	6965      	ldr	r5, [r4, #20]
 800f65a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f662:	3301      	adds	r3, #1
 800f664:	444b      	add	r3, r9
 800f666:	106d      	asrs	r5, r5, #1
 800f668:	429d      	cmp	r5, r3
 800f66a:	bf38      	it	cc
 800f66c:	461d      	movcc	r5, r3
 800f66e:	0553      	lsls	r3, r2, #21
 800f670:	d531      	bpl.n	800f6d6 <__ssputs_r+0xa0>
 800f672:	4629      	mov	r1, r5
 800f674:	f7fb ff62 	bl	800b53c <_malloc_r>
 800f678:	4606      	mov	r6, r0
 800f67a:	b950      	cbnz	r0, 800f692 <__ssputs_r+0x5c>
 800f67c:	230c      	movs	r3, #12
 800f67e:	f8ca 3000 	str.w	r3, [sl]
 800f682:	89a3      	ldrh	r3, [r4, #12]
 800f684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f688:	81a3      	strh	r3, [r4, #12]
 800f68a:	f04f 30ff 	mov.w	r0, #4294967295
 800f68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f692:	6921      	ldr	r1, [r4, #16]
 800f694:	464a      	mov	r2, r9
 800f696:	f7fb fed1 	bl	800b43c <memcpy>
 800f69a:	89a3      	ldrh	r3, [r4, #12]
 800f69c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6a4:	81a3      	strh	r3, [r4, #12]
 800f6a6:	6126      	str	r6, [r4, #16]
 800f6a8:	6165      	str	r5, [r4, #20]
 800f6aa:	444e      	add	r6, r9
 800f6ac:	eba5 0509 	sub.w	r5, r5, r9
 800f6b0:	6026      	str	r6, [r4, #0]
 800f6b2:	60a5      	str	r5, [r4, #8]
 800f6b4:	463e      	mov	r6, r7
 800f6b6:	42be      	cmp	r6, r7
 800f6b8:	d900      	bls.n	800f6bc <__ssputs_r+0x86>
 800f6ba:	463e      	mov	r6, r7
 800f6bc:	4632      	mov	r2, r6
 800f6be:	6820      	ldr	r0, [r4, #0]
 800f6c0:	4641      	mov	r1, r8
 800f6c2:	f7fb fec9 	bl	800b458 <memmove>
 800f6c6:	68a3      	ldr	r3, [r4, #8]
 800f6c8:	6822      	ldr	r2, [r4, #0]
 800f6ca:	1b9b      	subs	r3, r3, r6
 800f6cc:	4432      	add	r2, r6
 800f6ce:	60a3      	str	r3, [r4, #8]
 800f6d0:	6022      	str	r2, [r4, #0]
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	e7db      	b.n	800f68e <__ssputs_r+0x58>
 800f6d6:	462a      	mov	r2, r5
 800f6d8:	f7ff ff87 	bl	800f5ea <_realloc_r>
 800f6dc:	4606      	mov	r6, r0
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d1e1      	bne.n	800f6a6 <__ssputs_r+0x70>
 800f6e2:	6921      	ldr	r1, [r4, #16]
 800f6e4:	4650      	mov	r0, sl
 800f6e6:	f7fb fed9 	bl	800b49c <_free_r>
 800f6ea:	e7c7      	b.n	800f67c <__ssputs_r+0x46>

0800f6ec <_svfiprintf_r>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	4698      	mov	r8, r3
 800f6f2:	898b      	ldrh	r3, [r1, #12]
 800f6f4:	061b      	lsls	r3, r3, #24
 800f6f6:	b09d      	sub	sp, #116	; 0x74
 800f6f8:	4607      	mov	r7, r0
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	d50e      	bpl.n	800f71e <_svfiprintf_r+0x32>
 800f700:	690b      	ldr	r3, [r1, #16]
 800f702:	b963      	cbnz	r3, 800f71e <_svfiprintf_r+0x32>
 800f704:	2140      	movs	r1, #64	; 0x40
 800f706:	f7fb ff19 	bl	800b53c <_malloc_r>
 800f70a:	6028      	str	r0, [r5, #0]
 800f70c:	6128      	str	r0, [r5, #16]
 800f70e:	b920      	cbnz	r0, 800f71a <_svfiprintf_r+0x2e>
 800f710:	230c      	movs	r3, #12
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	e0d1      	b.n	800f8be <_svfiprintf_r+0x1d2>
 800f71a:	2340      	movs	r3, #64	; 0x40
 800f71c:	616b      	str	r3, [r5, #20]
 800f71e:	2300      	movs	r3, #0
 800f720:	9309      	str	r3, [sp, #36]	; 0x24
 800f722:	2320      	movs	r3, #32
 800f724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f728:	f8cd 800c 	str.w	r8, [sp, #12]
 800f72c:	2330      	movs	r3, #48	; 0x30
 800f72e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8d8 <_svfiprintf_r+0x1ec>
 800f732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f736:	f04f 0901 	mov.w	r9, #1
 800f73a:	4623      	mov	r3, r4
 800f73c:	469a      	mov	sl, r3
 800f73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f742:	b10a      	cbz	r2, 800f748 <_svfiprintf_r+0x5c>
 800f744:	2a25      	cmp	r2, #37	; 0x25
 800f746:	d1f9      	bne.n	800f73c <_svfiprintf_r+0x50>
 800f748:	ebba 0b04 	subs.w	fp, sl, r4
 800f74c:	d00b      	beq.n	800f766 <_svfiprintf_r+0x7a>
 800f74e:	465b      	mov	r3, fp
 800f750:	4622      	mov	r2, r4
 800f752:	4629      	mov	r1, r5
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff ff6e 	bl	800f636 <__ssputs_r>
 800f75a:	3001      	adds	r0, #1
 800f75c:	f000 80aa 	beq.w	800f8b4 <_svfiprintf_r+0x1c8>
 800f760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f762:	445a      	add	r2, fp
 800f764:	9209      	str	r2, [sp, #36]	; 0x24
 800f766:	f89a 3000 	ldrb.w	r3, [sl]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f000 80a2 	beq.w	800f8b4 <_svfiprintf_r+0x1c8>
 800f770:	2300      	movs	r3, #0
 800f772:	f04f 32ff 	mov.w	r2, #4294967295
 800f776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f77a:	f10a 0a01 	add.w	sl, sl, #1
 800f77e:	9304      	str	r3, [sp, #16]
 800f780:	9307      	str	r3, [sp, #28]
 800f782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f786:	931a      	str	r3, [sp, #104]	; 0x68
 800f788:	4654      	mov	r4, sl
 800f78a:	2205      	movs	r2, #5
 800f78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f790:	4851      	ldr	r0, [pc, #324]	; (800f8d8 <_svfiprintf_r+0x1ec>)
 800f792:	f7f0 fdbd 	bl	8000310 <memchr>
 800f796:	9a04      	ldr	r2, [sp, #16]
 800f798:	b9d8      	cbnz	r0, 800f7d2 <_svfiprintf_r+0xe6>
 800f79a:	06d0      	lsls	r0, r2, #27
 800f79c:	bf44      	itt	mi
 800f79e:	2320      	movmi	r3, #32
 800f7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7a4:	0711      	lsls	r1, r2, #28
 800f7a6:	bf44      	itt	mi
 800f7a8:	232b      	movmi	r3, #43	; 0x2b
 800f7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7b4:	d015      	beq.n	800f7e2 <_svfiprintf_r+0xf6>
 800f7b6:	9a07      	ldr	r2, [sp, #28]
 800f7b8:	4654      	mov	r4, sl
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f04f 0c0a 	mov.w	ip, #10
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c6:	3b30      	subs	r3, #48	; 0x30
 800f7c8:	2b09      	cmp	r3, #9
 800f7ca:	d94e      	bls.n	800f86a <_svfiprintf_r+0x17e>
 800f7cc:	b1b0      	cbz	r0, 800f7fc <_svfiprintf_r+0x110>
 800f7ce:	9207      	str	r2, [sp, #28]
 800f7d0:	e014      	b.n	800f7fc <_svfiprintf_r+0x110>
 800f7d2:	eba0 0308 	sub.w	r3, r0, r8
 800f7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	46a2      	mov	sl, r4
 800f7e0:	e7d2      	b.n	800f788 <_svfiprintf_r+0x9c>
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	1d19      	adds	r1, r3, #4
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	9103      	str	r1, [sp, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bfbb      	ittet	lt
 800f7ee:	425b      	neglt	r3, r3
 800f7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800f7f4:	9307      	strge	r3, [sp, #28]
 800f7f6:	9307      	strlt	r3, [sp, #28]
 800f7f8:	bfb8      	it	lt
 800f7fa:	9204      	strlt	r2, [sp, #16]
 800f7fc:	7823      	ldrb	r3, [r4, #0]
 800f7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f800:	d10c      	bne.n	800f81c <_svfiprintf_r+0x130>
 800f802:	7863      	ldrb	r3, [r4, #1]
 800f804:	2b2a      	cmp	r3, #42	; 0x2a
 800f806:	d135      	bne.n	800f874 <_svfiprintf_r+0x188>
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	1d1a      	adds	r2, r3, #4
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	9203      	str	r2, [sp, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bfb8      	it	lt
 800f814:	f04f 33ff 	movlt.w	r3, #4294967295
 800f818:	3402      	adds	r4, #2
 800f81a:	9305      	str	r3, [sp, #20]
 800f81c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8e8 <_svfiprintf_r+0x1fc>
 800f820:	7821      	ldrb	r1, [r4, #0]
 800f822:	2203      	movs	r2, #3
 800f824:	4650      	mov	r0, sl
 800f826:	f7f0 fd73 	bl	8000310 <memchr>
 800f82a:	b140      	cbz	r0, 800f83e <_svfiprintf_r+0x152>
 800f82c:	2340      	movs	r3, #64	; 0x40
 800f82e:	eba0 000a 	sub.w	r0, r0, sl
 800f832:	fa03 f000 	lsl.w	r0, r3, r0
 800f836:	9b04      	ldr	r3, [sp, #16]
 800f838:	4303      	orrs	r3, r0
 800f83a:	3401      	adds	r4, #1
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f842:	4826      	ldr	r0, [pc, #152]	; (800f8dc <_svfiprintf_r+0x1f0>)
 800f844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f848:	2206      	movs	r2, #6
 800f84a:	f7f0 fd61 	bl	8000310 <memchr>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d038      	beq.n	800f8c4 <_svfiprintf_r+0x1d8>
 800f852:	4b23      	ldr	r3, [pc, #140]	; (800f8e0 <_svfiprintf_r+0x1f4>)
 800f854:	bb1b      	cbnz	r3, 800f89e <_svfiprintf_r+0x1b2>
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	3307      	adds	r3, #7
 800f85a:	f023 0307 	bic.w	r3, r3, #7
 800f85e:	3308      	adds	r3, #8
 800f860:	9303      	str	r3, [sp, #12]
 800f862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f864:	4433      	add	r3, r6
 800f866:	9309      	str	r3, [sp, #36]	; 0x24
 800f868:	e767      	b.n	800f73a <_svfiprintf_r+0x4e>
 800f86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f86e:	460c      	mov	r4, r1
 800f870:	2001      	movs	r0, #1
 800f872:	e7a5      	b.n	800f7c0 <_svfiprintf_r+0xd4>
 800f874:	2300      	movs	r3, #0
 800f876:	3401      	adds	r4, #1
 800f878:	9305      	str	r3, [sp, #20]
 800f87a:	4619      	mov	r1, r3
 800f87c:	f04f 0c0a 	mov.w	ip, #10
 800f880:	4620      	mov	r0, r4
 800f882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f886:	3a30      	subs	r2, #48	; 0x30
 800f888:	2a09      	cmp	r2, #9
 800f88a:	d903      	bls.n	800f894 <_svfiprintf_r+0x1a8>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0c5      	beq.n	800f81c <_svfiprintf_r+0x130>
 800f890:	9105      	str	r1, [sp, #20]
 800f892:	e7c3      	b.n	800f81c <_svfiprintf_r+0x130>
 800f894:	fb0c 2101 	mla	r1, ip, r1, r2
 800f898:	4604      	mov	r4, r0
 800f89a:	2301      	movs	r3, #1
 800f89c:	e7f0      	b.n	800f880 <_svfiprintf_r+0x194>
 800f89e:	ab03      	add	r3, sp, #12
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	462a      	mov	r2, r5
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <_svfiprintf_r+0x1f8>)
 800f8a6:	a904      	add	r1, sp, #16
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f7fc f88d 	bl	800b9c8 <_printf_float>
 800f8ae:	1c42      	adds	r2, r0, #1
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	d1d6      	bne.n	800f862 <_svfiprintf_r+0x176>
 800f8b4:	89ab      	ldrh	r3, [r5, #12]
 800f8b6:	065b      	lsls	r3, r3, #25
 800f8b8:	f53f af2c 	bmi.w	800f714 <_svfiprintf_r+0x28>
 800f8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8be:	b01d      	add	sp, #116	; 0x74
 800f8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c4:	ab03      	add	r3, sp, #12
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	462a      	mov	r2, r5
 800f8ca:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <_svfiprintf_r+0x1f8>)
 800f8cc:	a904      	add	r1, sp, #16
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f7fc fb06 	bl	800bee0 <_printf_i>
 800f8d4:	e7eb      	b.n	800f8ae <_svfiprintf_r+0x1c2>
 800f8d6:	bf00      	nop
 800f8d8:	08010588 	.word	0x08010588
 800f8dc:	08010592 	.word	0x08010592
 800f8e0:	0800b9c9 	.word	0x0800b9c9
 800f8e4:	0800f637 	.word	0x0800f637
 800f8e8:	0801058e 	.word	0x0801058e
 800f8ec:	00000000 	.word	0x00000000

0800f8f0 <nan>:
 800f8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f8f8 <nan+0x8>
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	00000000 	.word	0x00000000
 800f8fc:	7ff80000 	.word	0x7ff80000

0800f900 <_raise_r>:
 800f900:	291f      	cmp	r1, #31
 800f902:	b538      	push	{r3, r4, r5, lr}
 800f904:	4604      	mov	r4, r0
 800f906:	460d      	mov	r5, r1
 800f908:	d904      	bls.n	800f914 <_raise_r+0x14>
 800f90a:	2316      	movs	r3, #22
 800f90c:	6003      	str	r3, [r0, #0]
 800f90e:	f04f 30ff 	mov.w	r0, #4294967295
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f916:	b112      	cbz	r2, 800f91e <_raise_r+0x1e>
 800f918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f91c:	b94b      	cbnz	r3, 800f932 <_raise_r+0x32>
 800f91e:	4620      	mov	r0, r4
 800f920:	f000 f830 	bl	800f984 <_getpid_r>
 800f924:	462a      	mov	r2, r5
 800f926:	4601      	mov	r1, r0
 800f928:	4620      	mov	r0, r4
 800f92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f92e:	f000 b817 	b.w	800f960 <_kill_r>
 800f932:	2b01      	cmp	r3, #1
 800f934:	d00a      	beq.n	800f94c <_raise_r+0x4c>
 800f936:	1c59      	adds	r1, r3, #1
 800f938:	d103      	bne.n	800f942 <_raise_r+0x42>
 800f93a:	2316      	movs	r3, #22
 800f93c:	6003      	str	r3, [r0, #0]
 800f93e:	2001      	movs	r0, #1
 800f940:	e7e7      	b.n	800f912 <_raise_r+0x12>
 800f942:	2400      	movs	r4, #0
 800f944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f948:	4628      	mov	r0, r5
 800f94a:	4798      	blx	r3
 800f94c:	2000      	movs	r0, #0
 800f94e:	e7e0      	b.n	800f912 <_raise_r+0x12>

0800f950 <raise>:
 800f950:	4b02      	ldr	r3, [pc, #8]	; (800f95c <raise+0xc>)
 800f952:	4601      	mov	r1, r0
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	f7ff bfd3 	b.w	800f900 <_raise_r>
 800f95a:	bf00      	nop
 800f95c:	240000c0 	.word	0x240000c0

0800f960 <_kill_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4d07      	ldr	r5, [pc, #28]	; (800f980 <_kill_r+0x20>)
 800f964:	2300      	movs	r3, #0
 800f966:	4604      	mov	r4, r0
 800f968:	4608      	mov	r0, r1
 800f96a:	4611      	mov	r1, r2
 800f96c:	602b      	str	r3, [r5, #0]
 800f96e:	f7f1 ffc1 	bl	80018f4 <_kill>
 800f972:	1c43      	adds	r3, r0, #1
 800f974:	d102      	bne.n	800f97c <_kill_r+0x1c>
 800f976:	682b      	ldr	r3, [r5, #0]
 800f978:	b103      	cbz	r3, 800f97c <_kill_r+0x1c>
 800f97a:	6023      	str	r3, [r4, #0]
 800f97c:	bd38      	pop	{r3, r4, r5, pc}
 800f97e:	bf00      	nop
 800f980:	24000ccc 	.word	0x24000ccc

0800f984 <_getpid_r>:
 800f984:	f7f1 bfae 	b.w	80018e4 <_getpid>

0800f988 <__sread>:
 800f988:	b510      	push	{r4, lr}
 800f98a:	460c      	mov	r4, r1
 800f98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f990:	f000 f8a8 	bl	800fae4 <_read_r>
 800f994:	2800      	cmp	r0, #0
 800f996:	bfab      	itete	ge
 800f998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f99a:	89a3      	ldrhlt	r3, [r4, #12]
 800f99c:	181b      	addge	r3, r3, r0
 800f99e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9a2:	bfac      	ite	ge
 800f9a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9a6:	81a3      	strhlt	r3, [r4, #12]
 800f9a8:	bd10      	pop	{r4, pc}

0800f9aa <__swrite>:
 800f9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ae:	461f      	mov	r7, r3
 800f9b0:	898b      	ldrh	r3, [r1, #12]
 800f9b2:	05db      	lsls	r3, r3, #23
 800f9b4:	4605      	mov	r5, r0
 800f9b6:	460c      	mov	r4, r1
 800f9b8:	4616      	mov	r6, r2
 800f9ba:	d505      	bpl.n	800f9c8 <__swrite+0x1e>
 800f9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f000 f874 	bl	800fab0 <_lseek_r>
 800f9c8:	89a3      	ldrh	r3, [r4, #12]
 800f9ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9d2:	81a3      	strh	r3, [r4, #12]
 800f9d4:	4632      	mov	r2, r6
 800f9d6:	463b      	mov	r3, r7
 800f9d8:	4628      	mov	r0, r5
 800f9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9de:	f000 b823 	b.w	800fa28 <_write_r>

0800f9e2 <__sseek>:
 800f9e2:	b510      	push	{r4, lr}
 800f9e4:	460c      	mov	r4, r1
 800f9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ea:	f000 f861 	bl	800fab0 <_lseek_r>
 800f9ee:	1c43      	adds	r3, r0, #1
 800f9f0:	89a3      	ldrh	r3, [r4, #12]
 800f9f2:	bf15      	itete	ne
 800f9f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9fe:	81a3      	strheq	r3, [r4, #12]
 800fa00:	bf18      	it	ne
 800fa02:	81a3      	strhne	r3, [r4, #12]
 800fa04:	bd10      	pop	{r4, pc}

0800fa06 <__sclose>:
 800fa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa0a:	f000 b81f 	b.w	800fa4c <_close_r>

0800fa0e <__ascii_wctomb>:
 800fa0e:	b149      	cbz	r1, 800fa24 <__ascii_wctomb+0x16>
 800fa10:	2aff      	cmp	r2, #255	; 0xff
 800fa12:	bf85      	ittet	hi
 800fa14:	238a      	movhi	r3, #138	; 0x8a
 800fa16:	6003      	strhi	r3, [r0, #0]
 800fa18:	700a      	strbls	r2, [r1, #0]
 800fa1a:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa1e:	bf98      	it	ls
 800fa20:	2001      	movls	r0, #1
 800fa22:	4770      	bx	lr
 800fa24:	4608      	mov	r0, r1
 800fa26:	4770      	bx	lr

0800fa28 <_write_r>:
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	4d07      	ldr	r5, [pc, #28]	; (800fa48 <_write_r+0x20>)
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	4608      	mov	r0, r1
 800fa30:	4611      	mov	r1, r2
 800fa32:	2200      	movs	r2, #0
 800fa34:	602a      	str	r2, [r5, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	f7f1 ff93 	bl	8001962 <_write>
 800fa3c:	1c43      	adds	r3, r0, #1
 800fa3e:	d102      	bne.n	800fa46 <_write_r+0x1e>
 800fa40:	682b      	ldr	r3, [r5, #0]
 800fa42:	b103      	cbz	r3, 800fa46 <_write_r+0x1e>
 800fa44:	6023      	str	r3, [r4, #0]
 800fa46:	bd38      	pop	{r3, r4, r5, pc}
 800fa48:	24000ccc 	.word	0x24000ccc

0800fa4c <_close_r>:
 800fa4c:	b538      	push	{r3, r4, r5, lr}
 800fa4e:	4d06      	ldr	r5, [pc, #24]	; (800fa68 <_close_r+0x1c>)
 800fa50:	2300      	movs	r3, #0
 800fa52:	4604      	mov	r4, r0
 800fa54:	4608      	mov	r0, r1
 800fa56:	602b      	str	r3, [r5, #0]
 800fa58:	f7f1 ff9f 	bl	800199a <_close>
 800fa5c:	1c43      	adds	r3, r0, #1
 800fa5e:	d102      	bne.n	800fa66 <_close_r+0x1a>
 800fa60:	682b      	ldr	r3, [r5, #0]
 800fa62:	b103      	cbz	r3, 800fa66 <_close_r+0x1a>
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	bd38      	pop	{r3, r4, r5, pc}
 800fa68:	24000ccc 	.word	0x24000ccc

0800fa6c <_fstat_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d07      	ldr	r5, [pc, #28]	; (800fa8c <_fstat_r+0x20>)
 800fa70:	2300      	movs	r3, #0
 800fa72:	4604      	mov	r4, r0
 800fa74:	4608      	mov	r0, r1
 800fa76:	4611      	mov	r1, r2
 800fa78:	602b      	str	r3, [r5, #0]
 800fa7a:	f7f1 ff9a 	bl	80019b2 <_fstat>
 800fa7e:	1c43      	adds	r3, r0, #1
 800fa80:	d102      	bne.n	800fa88 <_fstat_r+0x1c>
 800fa82:	682b      	ldr	r3, [r5, #0]
 800fa84:	b103      	cbz	r3, 800fa88 <_fstat_r+0x1c>
 800fa86:	6023      	str	r3, [r4, #0]
 800fa88:	bd38      	pop	{r3, r4, r5, pc}
 800fa8a:	bf00      	nop
 800fa8c:	24000ccc 	.word	0x24000ccc

0800fa90 <_isatty_r>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	4d06      	ldr	r5, [pc, #24]	; (800faac <_isatty_r+0x1c>)
 800fa94:	2300      	movs	r3, #0
 800fa96:	4604      	mov	r4, r0
 800fa98:	4608      	mov	r0, r1
 800fa9a:	602b      	str	r3, [r5, #0]
 800fa9c:	f7f1 ff99 	bl	80019d2 <_isatty>
 800faa0:	1c43      	adds	r3, r0, #1
 800faa2:	d102      	bne.n	800faaa <_isatty_r+0x1a>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	b103      	cbz	r3, 800faaa <_isatty_r+0x1a>
 800faa8:	6023      	str	r3, [r4, #0]
 800faaa:	bd38      	pop	{r3, r4, r5, pc}
 800faac:	24000ccc 	.word	0x24000ccc

0800fab0 <_lseek_r>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	4d07      	ldr	r5, [pc, #28]	; (800fad0 <_lseek_r+0x20>)
 800fab4:	4604      	mov	r4, r0
 800fab6:	4608      	mov	r0, r1
 800fab8:	4611      	mov	r1, r2
 800faba:	2200      	movs	r2, #0
 800fabc:	602a      	str	r2, [r5, #0]
 800fabe:	461a      	mov	r2, r3
 800fac0:	f7f1 ff92 	bl	80019e8 <_lseek>
 800fac4:	1c43      	adds	r3, r0, #1
 800fac6:	d102      	bne.n	800face <_lseek_r+0x1e>
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	b103      	cbz	r3, 800face <_lseek_r+0x1e>
 800facc:	6023      	str	r3, [r4, #0]
 800face:	bd38      	pop	{r3, r4, r5, pc}
 800fad0:	24000ccc 	.word	0x24000ccc

0800fad4 <_malloc_usable_size_r>:
 800fad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fad8:	1f18      	subs	r0, r3, #4
 800fada:	2b00      	cmp	r3, #0
 800fadc:	bfbc      	itt	lt
 800fade:	580b      	ldrlt	r3, [r1, r0]
 800fae0:	18c0      	addlt	r0, r0, r3
 800fae2:	4770      	bx	lr

0800fae4 <_read_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d07      	ldr	r5, [pc, #28]	; (800fb04 <_read_r+0x20>)
 800fae8:	4604      	mov	r4, r0
 800faea:	4608      	mov	r0, r1
 800faec:	4611      	mov	r1, r2
 800faee:	2200      	movs	r2, #0
 800faf0:	602a      	str	r2, [r5, #0]
 800faf2:	461a      	mov	r2, r3
 800faf4:	f7f1 ff18 	bl	8001928 <_read>
 800faf8:	1c43      	adds	r3, r0, #1
 800fafa:	d102      	bne.n	800fb02 <_read_r+0x1e>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	b103      	cbz	r3, 800fb02 <_read_r+0x1e>
 800fb00:	6023      	str	r3, [r4, #0]
 800fb02:	bd38      	pop	{r3, r4, r5, pc}
 800fb04:	24000ccc 	.word	0x24000ccc

0800fb08 <_init>:
 800fb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0a:	bf00      	nop
 800fb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb0e:	bc08      	pop	{r3}
 800fb10:	469e      	mov	lr, r3
 800fb12:	4770      	bx	lr

0800fb14 <_fini>:
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	bf00      	nop
 800fb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb1a:	bc08      	pop	{r3}
 800fb1c:	469e      	mov	lr, r3
 800fb1e:	4770      	bx	lr
