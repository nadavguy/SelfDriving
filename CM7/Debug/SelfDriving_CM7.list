
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003108  08009050  08009050  00019050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c158  0800c158  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c160  0800c160  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  0800c168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000094  0800c1fc  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f4  0800c25c  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000086c  24000154  0800c2bc  00020154  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240009c0  0800c2bc  000209c0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034e3f  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005151  00000000  00000000  00054fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001688  00000000  00000000  0005a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014c8  00000000  00000000  0005b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003dc6e  00000000  00000000  0005cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa60  00000000  00000000  0009a8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00184d91  00000000  00000000  000ba336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0023f0c7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000064ac  00000000  00000000  0023f11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009034 	.word	0x08009034

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08009034 	.word	0x08009034

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_ETH_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_ETH_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ETH_Init+0x90>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ETH_Init+0x90>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ETH_Init+0x90>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	3302      	adds	r3, #2
 80007ce:	22e1      	movs	r2, #225	; 0xe1
 80007d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ETH_Init+0x90>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	3303      	adds	r3, #3
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ETH_Init+0x90>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ETH_Init+0x90>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	3305      	adds	r3, #5
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_ETH_Init+0x90>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ETH_Init+0x90>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_ETH_Init+0x98>)
 80007fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_ETH_Init+0x90>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <MX_ETH_Init+0x9c>)
 8000800:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ETH_Init+0x90>)
 8000804:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000808:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ETH_Init+0x90>)
 800080c:	f000 ffc4 	bl	8001798 <HAL_ETH_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fad7 	bl	8000dc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_ETH_Init+0xa0>)
 8000820:	f007 f9c0 	bl	8007ba4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_ETH_Init+0xa0>)
 8000826:	2221      	movs	r2, #33	; 0x21
 8000828:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_ETH_Init+0xa0>)
 800082c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000830:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_ETH_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000384 	.word	0x24000384
 8000840:	40028000 	.word	0x40028000
 8000844:	240000f4 	.word	0x240000f4
 8000848:	24000094 	.word	0x24000094
 800084c:	2400040c 	.word	0x2400040c

08000850 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a59      	ldr	r2, [pc, #356]	; (80009d4 <HAL_ETH_MspInit+0x184>)
 800086e:	4293      	cmp	r3, r2
 8000870:	f040 80ab 	bne.w	80009ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 8000876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800087a:	4a57      	ldr	r2, [pc, #348]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 800087c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000880:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000884:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 8000886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800088a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 8000894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000898:	4a4f      	ldr	r2, [pc, #316]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 800089a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a2:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80008b0:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b6:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008c0:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a40      	ldr	r2, [pc, #256]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a39      	ldr	r2, [pc, #228]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a31      	ldr	r2, [pc, #196]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000946:	2332      	movs	r3, #50	; 0x32
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000956:	230b      	movs	r3, #11
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <HAL_ETH_MspInit+0x18c>)
 8000962:	f001 fb2f 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000966:	2386      	movs	r3, #134	; 0x86
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <HAL_ETH_MspInit+0x190>)
 8000982:	f001 fb1f 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000998:	230b      	movs	r3, #11
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4810      	ldr	r0, [pc, #64]	; (80009e4 <HAL_ETH_MspInit+0x194>)
 80009a4:	f001 fb0e 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ba:	230b      	movs	r3, #11
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <HAL_ETH_MspInit+0x198>)
 80009c6:	f001 fafd 	bl	8001fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3738      	adds	r7, #56	; 0x38
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40028000 	.word	0x40028000
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020800 	.word	0x58020800
 80009e0:	58020000 	.word	0x58020000
 80009e4:	58020400 	.word	0x58020400
 80009e8:	58021800 	.word	0x58021800

080009ec <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

}
 8000aa6:	bf00      	nop
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_I2C1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_I2C1_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000af4:	f001 fc44 	bl	8002380 <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 f963 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b06:	f001 ffc1 	bl	8002a8c <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 f95a 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b18:	f002 f803 	bl	8002b22 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 f951 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000440 	.word	0x24000440
 8000b30:	40005400 	.word	0x40005400
 8000b34:	00301242 	.word	0x00301242

08000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0b8      	sub	sp, #224	; 0xe0
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	22bc      	movs	r2, #188	; 0xbc
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f007 f823 	bl	8007ba4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_I2C_MspInit+0xcc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d149      	bne.n	8000bfc <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f96e 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b82:	f000 f921 	bl	8000dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_I2C_MspInit+0xd0>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <HAL_I2C_MspInit+0xd0>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_I2C_MspInit+0xd0>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba4:	23c0      	movs	r3, #192	; 0xc0
 8000ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000baa:	2312      	movs	r3, #18
 8000bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <HAL_I2C_MspInit+0xd4>)
 8000bca:	f001 f9fb 	bl	8001fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_I2C_MspInit+0xd0>)
 8000bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <HAL_I2C_MspInit+0xd0>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_I2C_MspInit+0xd0>)
 8000be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	201f      	movs	r0, #31
 8000bf2:	f000 fd9c 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bf6:	201f      	movs	r0, #31
 8000bf8:	f000 fdb3 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	37e0      	adds	r7, #224	; 0xe0
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40005400 	.word	0x40005400
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020400 	.word	0x58020400

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c1c:	bf00      	nop
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <main+0xa8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d004      	beq.n	8000c34 <main+0x24>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dcf4      	bgt.n	8000c1e <main+0xe>
  if ( timeout < 0 )
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da01      	bge.n	8000c3e <main+0x2e>
  {
  Error_Handler();
 8000c3a:	f000 f8c5 	bl	8000dc8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fbc5 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f83b 	bl	8000cbc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <main+0xa8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <main+0xa8>)
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <main+0xa8>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f001 fb5d 	bl	8002324 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f001 fb73 	bl	8002358 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c76:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c78:	bf00      	nop
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <main+0xa8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d104      	bne.n	8000c90 <main+0x80>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dcf4      	bgt.n	8000c7a <main+0x6a>
if ( timeout < 0 )
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da01      	bge.n	8000c9a <main+0x8a>
{
Error_Handler();
 8000c96:	f000 f897 	bl	8000dc8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9a:	f7ff fea7 	bl	80009ec <MX_GPIO_Init>
  MX_ETH_Init();
 8000c9e:	f7ff fd85 	bl	80007ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ca2:	f000 f9fb 	bl	800109c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ca6:	f000 faab 	bl	8001200 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000caa:	f7ff ff05 	bl	8000ab8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000cae:	f000 f891 	bl	8000dd4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_TestAll();
 8000cb2:	f006 feeb 	bl	8007a8c <ssd1306_TestAll>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <main+0xa6>
 8000cb8:	58024400 	.word	0x58024400

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09c      	sub	sp, #112	; 0x70
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	224c      	movs	r2, #76	; 0x4c
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 ff6a 	bl	8007ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 ff64 	bl	8007ba4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cdc:	2004      	movs	r0, #4
 8000cde:	f002 f8b5 	bl	8002e4c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <SystemClock_Config+0x100>)
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <SystemClock_Config+0x100>)
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <SystemClock_Config+0x100>)
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <SystemClock_Config+0x104>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d04:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d18:	bf00      	nop
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d26:	d1f8      	bne.n	8000d1a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <SystemClock_Config+0x108>)
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <SystemClock_Config+0x108>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	2302      	movs	r3, #2
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d62:	2302      	movs	r3, #2
 8000d64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000d66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f8d5 	bl	8002f20 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d7c:	f000 f824 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	233f      	movs	r3, #63	; 0x3f
 8000d82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2303      	movs	r3, #3
 8000d86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2101      	movs	r1, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fccb 	bl	8003740 <HAL_RCC_ClockConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000db0:	f000 f80a 	bl	8000dc8 <Error_Handler>
  }
}
 8000db4:	bf00      	nop
 8000db6:	3770      	adds	r7, #112	; 0x70
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58000400 	.word	0x58000400
 8000dc0:	58024800 	.word	0x58024800
 8000dc4:	58024400 	.word	0x58024400

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000dda:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <MX_SPI2_Init+0xa8>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000de0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000de4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_SPI2_Init+0xa4>)
 8000e64:	f004 fb5a 	bl	800551c <HAL_SPI_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000e6e:	f7ff ffab 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2400048c 	.word	0x2400048c
 8000e7c:	40003800 	.word	0x40003800

08000e80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ba      	sub	sp, #232	; 0xe8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	22bc      	movs	r2, #188	; 0xbc
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fe7f 	bl	8007ba4 <memset>
  if(spiHandle->Instance==SPI2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a36      	ldr	r2, [pc, #216]	; (8000f84 <HAL_SPI_MspInit+0x104>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d165      	bne.n	8000f7c <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 ffca 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000eca:	f7ff ff7d 	bl	8000dc8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed4:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_SPI_MspInit+0x108>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f40:	2305      	movs	r3, #5
 8000f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <HAL_SPI_MspInit+0x10c>)
 8000f4e:	f001 f839 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f52:	2308      	movs	r3, #8
 8000f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <HAL_SPI_MspInit+0x110>)
 8000f78:	f001 f824 	bl	8001fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	37e8      	adds	r7, #232	; 0xe8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40003800 	.word	0x40003800
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020c00 	.word	0x58020c00

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x30>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x30>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 fa4c 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <I2C1_EV_IRQHandler+0x10>)
 8001022:	f001 fb51 	bl	80026c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000440 	.word	0x24000440

08001030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <_sbrk+0x5c>)
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <_sbrk+0x60>)
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <_sbrk+0x64>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <_sbrk+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d207      	bcs.n	8001070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001060:	f006 fd4e 	bl	8007b00 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e009      	b.n	8001084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	24040000 	.word	0x24040000
 8001090:	00000400 	.word	0x00000400
 8001094:	24000170 	.word	0x24000170
 8001098:	240009c0 	.word	0x240009c0

0800109c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010a2:	4a23      	ldr	r2, [pc, #140]	; (8001130 <MX_USART3_UART_Init+0x94>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010e6:	f004 fb36 	bl	8005756 <HAL_UART_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010f0:	f7ff fe6a 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010f8:	f005 fa84 	bl	8006604 <HAL_UARTEx_SetTxFifoThreshold>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001102:	f7ff fe61 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <MX_USART3_UART_Init+0x90>)
 800110a:	f005 fab9 	bl	8006680 <HAL_UARTEx_SetRxFifoThreshold>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001114:	f7ff fe58 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_USART3_UART_Init+0x90>)
 800111a:	f005 fa3a 	bl	8006592 <HAL_UARTEx_DisableFifoMode>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001124:	f7ff fe50 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24000514 	.word	0x24000514
 8001130:	40004800 	.word	0x40004800

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0b8      	sub	sp, #224	; 0xe0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	22bc      	movs	r2, #188	; 0xbc
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fd25 	bl	8007ba4 <memset>
  if(uartHandle->Instance==USART3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_UART_MspInit+0xc0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d142      	bne.n	80011ea <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fe70 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800117e:	f7ff fe23 	bl	8000dc8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0xc4>)
 8001184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_UART_MspInit+0xc4>)
 800118a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0xc4>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0xc4>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_UART_MspInit+0xc4>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_UART_MspInit+0xc4>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d8:	2307      	movs	r3, #7
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_UART_MspInit+0xc8>)
 80011e6:	f000 feed 	bl	8001fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ea:	bf00      	nop
 80011ec:	37e0      	adds	r7, #224	; 0xe0
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40004800 	.word	0x40004800
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020c00 	.word	0x58020c00

08001200 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001208:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120c:	2209      	movs	r2, #9
 800120e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001212:	2202      	movs	r2, #2
 8001214:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121e:	2202      	movs	r2, #2
 8001220:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001236:	2201      	movs	r2, #1
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123c:	2201      	movs	r2, #1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001248:	f001 fcb7 	bl	8002bba <HAL_PCD_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001252:	f7ff fdb9 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	240005a4 	.word	0x240005a4
 8001260:	40080000 	.word	0x40080000

08001264 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0b8      	sub	sp, #224	; 0xe0
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	22bc      	movs	r2, #188	; 0xbc
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f006 fc8d 	bl	8007ba4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a37      	ldr	r2, [pc, #220]	; (800136c <HAL_PCD_MspInit+0x108>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d166      	bne.n	8001362 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001294:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001298:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800129e:	2312      	movs	r3, #18
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80012a6:	2303      	movs	r3, #3
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80012ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 80012b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80012ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fdc6 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80012d2:	f7ff fd79 	bl	8000dc8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012d6:	f001 fe13 	bl	8002f00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_PCD_MspInit+0x10c>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_PCD_MspInit+0x10c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_PCD_MspInit+0x10c>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012f8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001312:	230a      	movs	r3, #10
 8001314:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800131c:	4619      	mov	r1, r3
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <HAL_PCD_MspInit+0x110>)
 8001320:	f000 fe50 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <HAL_PCD_MspInit+0x110>)
 8001340:	f000 fe40 	bl	8001fc4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_PCD_MspInit+0x10c>)
 8001346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_PCD_MspInit+0x10c>)
 800134c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001350:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_PCD_MspInit+0x10c>)
 8001356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800135a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001362:	bf00      	nop
 8001364:	37e0      	adds	r7, #224	; 0xe0
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40080000 	.word	0x40080000
 8001370:	58024400 	.word	0x58024400
 8001374:	58020000 	.word	0x58020000

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff f97c 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a6:	f006 fbb1 	bl	8007b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fc31 	bl	8000c10 <main>
  bx  lr
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80013b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b8:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80013bc:	0800c168 	.word	0x0800c168
  ldr r2, =_sbss
 80013c0:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 80013c4:	240009c0 	.word	0x240009c0

080013c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC3_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f9a0 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d8:	f002 fb68 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_Init+0x68>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4913      	ldr	r1, [pc, #76]	; (8001438 <HAL_Init+0x6c>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_Init+0x68>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_Init+0x6c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_Init+0x70>)
 800140e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_Init+0x74>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f814 	bl	8001444 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e002      	b.n	800142c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001426:	f7ff fdb5 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58024400 	.word	0x58024400
 8001438:	080090b0 	.word	0x080090b0
 800143c:	24000004 	.word	0x24000004
 8001440:	24000000 	.word	0x24000000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_InitTick+0x60>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e021      	b.n	800149c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_InitTick+0x64>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_InitTick+0x60>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f985 	bl	800177e <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f94f 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x68>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2400000c 	.word	0x2400000c
 80014a8:	24000000 	.word	0x24000000
 80014ac:	24000008 	.word	0x24000008

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2400000c 	.word	0x2400000c
 80014d4:	240009ac 	.word	0x240009ac

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	240009ac 	.word	0x240009ac

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2400000c 	.word	0x2400000c

08001538 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_GetREVID+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0c1b      	lsrs	r3, r3, #16
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	5c001000 	.word	0x5c001000

08001550 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001560:	4904      	ldr	r1, [pc, #16]	; (8001574 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	58000400 	.word	0x58000400

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <__NVIC_SetPriorityGrouping+0x40>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x40>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00
 80015bc:	05fa0000 	.word	0x05fa0000

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff ff8e 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff29 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff40 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff33 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa4 	bl	80016d4 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0c6      	b.n	8001938 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff f84c 	bl	8000850 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2223      	movs	r2, #35	; 0x23
 80017bc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <HAL_ETH_Init+0x1a8>)
 80017c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c4:	4a5e      	ldr	r2, [pc, #376]	; (8001940 <HAL_ETH_Init+0x1a8>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ce:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <HAL_ETH_Init+0x1a8>)
 80017d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7a1b      	ldrb	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d103      	bne.n	80017ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff feb3 	bl	8001550 <HAL_SYSCFG_ETHInterfaceSelect>
 80017ea:	e003      	b.n	80017f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017f0:	f7ff feae 	bl	8001550 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180c:	f7ff fe64 	bl	80014d8 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001812:	e00f      	b.n	8001834 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001814:	f7ff fe60 	bl	80014d8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001822:	d907      	bls.n	8001834 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	22e0      	movs	r2, #224	; 0xe0
 800182e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e081      	b.n	8001938 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e6      	bne.n	8001814 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fac0 	bl	8001dcc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800184c:	f002 faa8 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8001850:	4603      	mov	r3, r0
 8001852:	4a3c      	ldr	r2, [pc, #240]	; (8001944 <HAL_ETH_Init+0x1ac>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	0c9a      	lsrs	r2, r3, #18
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3a01      	subs	r2, #1
 8001860:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fa13 	bl	8001c90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001880:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001884:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	22e0      	movs	r2, #224	; 0xe0
 800189c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e04a      	b.n	8001938 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80018aa:	4413      	add	r3, r2
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_ETH_Init+0x1b0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6952      	ldr	r2, [r2, #20]
 80018b6:	0052      	lsls	r2, r2, #1
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	6809      	ldr	r1, [r1, #0]
 80018bc:	431a      	orrs	r2, r3
 80018be:	f241 1308 	movw	r3, #4360	; 0x1108
 80018c2:	440b      	add	r3, r1
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fad8 	bl	8001e7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 fb1c 	bl	8001f0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	3305      	adds	r3, #5
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	021a      	lsls	r2, r3, #8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3304      	adds	r3, #4
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	3303      	adds	r3, #3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	061a      	lsls	r2, r3, #24
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	3302      	adds	r3, #2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	3301      	adds	r3, #1
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001910:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800191e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001920:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2210      	movs	r2, #16
 800192e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2210      	movs	r2, #16
 8001934:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	58024400 	.word	0x58024400
 8001944:	431bde83 	.word	0x431bde83
 8001948:	ffff8001 	.word	0xffff8001

0800194c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800195e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001966:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800196e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7b5b      	ldrb	r3, [r3, #13]
 8001974:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001976:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7b9b      	ldrb	r3, [r3, #14]
 800197c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800197e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7bdb      	ldrb	r3, [r3, #15]
 8001984:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001986:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	7c12      	ldrb	r2, [r2, #16]
 800198c:	2a00      	cmp	r2, #0
 800198e:	d102      	bne.n	8001996 <ETH_SetMACConfig+0x4a>
 8001990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001994:	e000      	b.n	8001998 <ETH_SetMACConfig+0x4c>
 8001996:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001998:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	7c52      	ldrb	r2, [r2, #17]
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d102      	bne.n	80019a8 <ETH_SetMACConfig+0x5c>
 80019a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a6:	e000      	b.n	80019aa <ETH_SetMACConfig+0x5e>
 80019a8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019aa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7c9b      	ldrb	r3, [r3, #18]
 80019b0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019b2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80019b8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80019be:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80019c6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	7f5b      	ldrb	r3, [r3, #29]
 80019cc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80019ce:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	7f92      	ldrb	r2, [r2, #30]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d102      	bne.n	80019de <ETH_SetMACConfig+0x92>
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x94>
 80019de:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80019e0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	7fdb      	ldrb	r3, [r3, #31]
 80019e6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80019e8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d102      	bne.n	80019fa <ETH_SetMACConfig+0xae>
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	e000      	b.n	80019fc <ETH_SetMACConfig+0xb0>
 80019fa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80019fc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001a02:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a0a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001a0c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <ETH_SetMACConfig+0x22c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a38:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001a42:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a4a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001a4c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d102      	bne.n	8001a5e <ETH_SetMACConfig+0x112>
 8001a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x114>
 8001a5e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001a60:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <ETH_SetMACConfig+0x230>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <ETH_SetMACConfig+0x234>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001aa8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aae:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d101      	bne.n	8001abe <ETH_SetMACConfig+0x172>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	e000      	b.n	8001ac0 <ETH_SetMACConfig+0x174>
 8001abe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ac0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ad2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001ae8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001af0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f023 0103 	bic.w	r1, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d101      	bne.n	8001b3a <ETH_SetMACConfig+0x1ee>
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	e000      	b.n	8001b3c <ETH_SetMACConfig+0x1f0>
 8001b3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	00048083 	.word	0x00048083
 8001b7c:	c0f88000 	.word	0xc0f88000
 8001b80:	fffffef0 	.word	0xfffffef0

08001b84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <ETH_SetDMAConfig+0xf8>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6809      	ldr	r1, [r1, #0]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001baa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bb6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7b1b      	ldrb	r3, [r3, #12]
 8001bbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001bca:	4413      	add	r3, r2
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <ETH_SetDMAConfig+0xfc>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6811      	ldr	r1, [r2, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	f241 0304 	movw	r3, #4100	; 0x1004
 8001bde:	440b      	add	r3, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7b5b      	ldrb	r3, [r3, #13]
 8001be6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <ETH_SetDMAConfig+0x100>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001c0a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c16:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7f5b      	ldrb	r3, [r3, #29]
 8001c1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <ETH_SetDMAConfig+0x104>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6811      	ldr	r1, [r2, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c3e:	440b      	add	r3, r1
 8001c40:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7f1b      	ldrb	r3, [r3, #28]
 8001c46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c58:	4413      	add	r3, r2
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <ETH_SetDMAConfig+0x108>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6811      	ldr	r1, [r2, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c6c:	440b      	add	r3, r1
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	ffff87fd 	.word	0xffff87fd
 8001c80:	ffff2ffe 	.word	0xffff2ffe
 8001c84:	fffec000 	.word	0xfffec000
 8001c88:	ffc0efef 	.word	0xffc0efef
 8001c8c:	7fc0ffff 	.word	0x7fc0ffff

08001c90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0a4      	sub	sp, #144	; 0x90
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ce8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d12:	2300      	movs	r3, #0
 8001d14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fde6 	bl	800194c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001db0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fee1 	bl	8001b84 <ETH_SetDMAConfig>
}
 8001dc2:	bf00      	nop
 8001dc4:	3790      	adds	r7, #144	; 0x90
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001de6:	f001 ffdb 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8001dea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d908      	bls.n	8001e06 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d804      	bhi.n	8001e06 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e027      	b.n	8001e56 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d908      	bls.n	8001e20 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d204      	bcs.n	8001e20 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e01a      	b.n	8001e56 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d303      	bcc.n	8001e30 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d911      	bls.n	8001e54 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d908      	bls.n	8001e4a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d804      	bhi.n	8001e4a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e005      	b.n	8001e56 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e000      	b.n	8001e56 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001e54:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	01312cff 	.word	0x01312cff
 8001e6c:	02160ebf 	.word	0x02160ebf
 8001e70:	03938700 	.word	0x03938700
 8001e74:	05f5e0ff 	.word	0x05f5e0ff
 8001e78:	08f0d17f 	.word	0x08f0d17f

08001e7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e01d      	b.n	8001ec6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	3206      	adds	r2, #6
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d9de      	bls.n	8001e8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f241 132c 	movw	r3, #4396	; 0x112c
 8001eda:	4413      	add	r3, r2
 8001edc:	2203      	movs	r2, #3
 8001ede:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68d9      	ldr	r1, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f241 1314 	movw	r3, #4372	; 0x1114
 8001eec:	4413      	add	r3, r2
 8001eee:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e024      	b.n	8001f62 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3310      	adds	r3, #16
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d9d7      	bls.n	8001f18 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f241 1330 	movw	r3, #4400	; 0x1130
 8001f8e:	4413      	add	r3, r2
 8001f90:	2203      	movs	r2, #3
 8001f92:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6919      	ldr	r1, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f241 131c 	movw	r3, #4380	; 0x111c
 8001fa0:	4413      	add	r3, r2
 8001fa2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	f241 1328 	movw	r3, #4392	; 0x1128
 8001fb4:	4413      	add	r3, r2
 8001fb6:	6019      	str	r1, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fd2:	4b89      	ldr	r3, [pc, #548]	; (80021f8 <HAL_GPIO_Init+0x234>)
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fd6:	e194      	b.n	8002302 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8186 	beq.w	80022fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00b      	beq.n	8002010 <HAL_GPIO_Init+0x4c>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d007      	beq.n	8002010 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002004:	2b11      	cmp	r3, #17
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d130      	bne.n	8002072 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002046:	2201      	movs	r2, #1
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 0201 	and.w	r2, r3, #1
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0xee>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	69b9      	ldr	r1, [r7, #24]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80e0 	beq.w	80022fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x238>)
 800213e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002142:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_GPIO_Init+0x238>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_GPIO_Init+0x238>)
 800214e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <HAL_GPIO_Init+0x23c>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_GPIO_Init+0x240>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d052      	beq.n	800222c <HAL_GPIO_Init+0x268>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_GPIO_Init+0x244>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d031      	beq.n	80021f2 <HAL_GPIO_Init+0x22e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_GPIO_Init+0x248>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02b      	beq.n	80021ee <HAL_GPIO_Init+0x22a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_GPIO_Init+0x24c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d025      	beq.n	80021ea <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_GPIO_Init+0x250>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_GPIO_Init+0x254>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d019      	beq.n	80021e2 <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_GPIO_Init+0x258>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0x21a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x25c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_GPIO_Init+0x216>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a18      	ldr	r2, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x260>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <HAL_GPIO_Init+0x212>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_GPIO_Init+0x264>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_GPIO_Init+0x20e>
 80021ce:	2309      	movs	r3, #9
 80021d0:	e02d      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021d2:	230a      	movs	r3, #10
 80021d4:	e02b      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021d6:	2308      	movs	r3, #8
 80021d8:	e029      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021da:	2307      	movs	r3, #7
 80021dc:	e027      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021de:	2306      	movs	r3, #6
 80021e0:	e025      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e023      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e021      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e01f      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e01d      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e01b      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021f6:	bf00      	nop
 80021f8:	58000080 	.word	0x58000080
 80021fc:	58024400 	.word	0x58024400
 8002200:	58000400 	.word	0x58000400
 8002204:	58020000 	.word	0x58020000
 8002208:	58020400 	.word	0x58020400
 800220c:	58020800 	.word	0x58020800
 8002210:	58020c00 	.word	0x58020c00
 8002214:	58021000 	.word	0x58021000
 8002218:	58021400 	.word	0x58021400
 800221c:	58021800 	.word	0x58021800
 8002220:	58021c00 	.word	0x58021c00
 8002224:	58022000 	.word	0x58022000
 8002228:	58022400 	.word	0x58022400
 800222c:	2300      	movs	r3, #0
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223e:	4938      	ldr	r1, [pc, #224]	; (8002320 <HAL_GPIO_Init+0x35c>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	f47f ae63 	bne.w	8001fd8 <HAL_GPIO_Init+0x14>
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3724      	adds	r7, #36	; 0x24
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	58000400 	.word	0x58000400

08002324 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_HSEM_FastTake+0x2c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3320      	adds	r3, #32
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HAL_HSEM_FastTake+0x30>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	58026400 	.word	0x58026400
 8002354:	80000300 	.word	0x80000300

08002358 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002362:	4906      	ldr	r1, [pc, #24]	; (800237c <HAL_HSEM_Release+0x24>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	58026400 	.word	0x58026400

08002380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07f      	b.n	8002492 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fbc6 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e006      	b.n	8002408 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002406:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d104      	bne.n	800241a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_I2C_Init+0x11c>)
 8002426:	430b      	orrs	r3, r1
 8002428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	ea42 0103 	orr.w	r1, r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	021a      	lsls	r2, r3, #8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69d9      	ldr	r1, [r3, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	02008000 	.word	0x02008000

080024a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	817b      	strh	r3, [r7, #10]
 80024b2:	460b      	mov	r3, r1
 80024b4:	813b      	strh	r3, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	f040 80f9 	bne.w	80026ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x34>
 80024ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0ed      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Mem_Write+0x4e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e0e6      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024f6:	f7fe ffef 	bl	80014d8 <HAL_GetTick>
 80024fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2319      	movs	r3, #25
 8002502:	2201      	movs	r2, #1
 8002504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f96f 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0d1      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2221      	movs	r2, #33	; 0x21
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002540:	88f8      	ldrh	r0, [r7, #6]
 8002542:	893a      	ldrh	r2, [r7, #8]
 8002544:	8979      	ldrh	r1, [r7, #10]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4603      	mov	r3, r0
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f8d3 	bl	80026fc <I2C_RequestMemoryWrite>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0a9      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2bff      	cmp	r3, #255	; 0xff
 8002570:	d90e      	bls.n	8002590 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	b2da      	uxtb	r2, r3
 800257e:	8979      	ldrh	r1, [r7, #10]
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fa51 	bl	8002a30 <I2C_TransferConfig>
 800258e:	e00f      	b.n	80025b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa40 	bl	8002a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f959 	bl	800286c <I2C_WaitOnTXISFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e07b      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d034      	beq.n	8002668 <HAL_I2C_Mem_Write+0x1c8>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	d130      	bne.n	8002668 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	2200      	movs	r2, #0
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f8eb 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e04d      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d90e      	bls.n	8002648 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	22ff      	movs	r2, #255	; 0xff
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	2300      	movs	r3, #0
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f9f5 	bl	8002a30 <I2C_TransferConfig>
 8002646:	e00f      	b.n	8002668 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	b2da      	uxtb	r2, r3
 8002658:	8979      	ldrh	r1, [r7, #10]
 800265a:	2300      	movs	r3, #0
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f9e4 	bl	8002a30 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d19e      	bne.n	80025b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f938 	bl	80028ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e01a      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2220      	movs	r2, #32
 800268c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_I2C_Mem_Write+0x224>)
 800269a:	400b      	ands	r3, r1
 800269c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	fe00e800 	.word	0xfe00e800

080026c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
  }
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4603      	mov	r3, r0
 800270c:	817b      	strh	r3, [r7, #10]
 800270e:	460b      	mov	r3, r1
 8002710:	813b      	strh	r3, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <I2C_RequestMemoryWrite+0xa4>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f983 	bl	8002a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f89c 	bl	800286c <I2C_WaitOnTXISFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02c      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
 800274e:	e015      	b.n	800277c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f882 	bl	800286c <I2C_WaitOnTXISFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e012      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2200      	movs	r2, #0
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f830 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	80002000 	.word	0x80002000

080027a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d103      	bne.n	80027c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d007      	beq.n	80027e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	619a      	str	r2, [r3, #24]
  }
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	e022      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d01e      	beq.n	8002844 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7fe fe67 	bl	80014d8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d113      	bne.n	8002844 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e00f      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	429a      	cmp	r2, r3
 8002860:	d0cd      	beq.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002878:	e02c      	b.n	80028d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f870 	bl	8002964 <I2C_IsAcknowledgeFailed>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e02a      	b.n	80028e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d01e      	beq.n	80028d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7fe fe1f 	bl	80014d8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d113      	bne.n	80028d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d1cb      	bne.n	800287a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f8:	e028      	b.n	800294c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f830 	bl	8002964 <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e026      	b.n	800295c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7fe fde3 	bl	80014d8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d113      	bne.n	800294c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d1cf      	bne.n	80028fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b10      	cmp	r3, #16
 800297c:	d151      	bne.n	8002a22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800297e:	e022      	b.n	80029c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d01e      	beq.n	80029c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002988:	f7fe fda6 	bl	80014d8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <I2C_IsAcknowledgeFailed+0x3a>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d113      	bne.n	80029c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e02e      	b.n	8002a24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d1d5      	bne.n	8002980 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2220      	movs	r2, #32
 80029e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fedd 	bl	80027a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <I2C_IsAcknowledgeFailed+0xc8>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	fe00e800 	.word	0xfe00e800

08002a30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	817b      	strh	r3, [r7, #10]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	0d5b      	lsrs	r3, r3, #21
 8002a4c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <I2C_TransferConfig+0x58>)
 8002a52:	430b      	orrs	r3, r1
 8002a54:	43db      	mvns	r3, r3
 8002a56:	ea02 0103 	and.w	r1, r2, r3
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a60:	7a7b      	ldrb	r3, [r7, #9]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	03ff63ff 	.word	0x03ff63ff

08002a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d138      	bne.n	8002b14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e032      	b.n	8002b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ade:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d139      	bne.n	8002bac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e033      	b.n	8002bae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2224      	movs	r2, #36	; 0x24
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bbc:	b08f      	sub	sp, #60	; 0x3c
 8002bbe:	af0a      	add	r7, sp, #40	; 0x28
 8002bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e116      	b.n	8002dfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fb3c 	bl	8001264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 fe32 	bl	8006874 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	687e      	ldr	r6, [r7, #4]
 8002c18:	466d      	mov	r5, sp
 8002c1a:	f106 0410 	add.w	r4, r6, #16
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c2e:	1d33      	adds	r3, r6, #4
 8002c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f003 fdb0 	bl	8006798 <USB_CoreInit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0d7      	b.n	8002dfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fe20 	bl	8006896 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e04a      	b.n	8002cf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	333d      	adds	r3, #61	; 0x3d
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	333c      	adds	r3, #60	; 0x3c
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	b298      	uxth	r0, r3
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3342      	adds	r3, #66	; 0x42
 8002c98:	4602      	mov	r2, r0
 8002c9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	333f      	adds	r3, #63	; 0x3f
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3344      	adds	r3, #68	; 0x44
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3348      	adds	r3, #72	; 0x48
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3350      	adds	r3, #80	; 0x50
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3af      	bcc.n	8002c5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e044      	b.n	8002d8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3b5      	bcc.n	8002d02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	687e      	ldr	r6, [r7, #4]
 8002d9e:	466d      	mov	r5, sp
 8002da0:	f106 0410 	add.w	r4, r6, #16
 8002da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db4:	1d33      	adds	r3, r6, #4
 8002db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	f003 fd97 	bl	80068ec <USB_DevInit>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e014      	b.n	8002dfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d102      	bne.n	8002dee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f80b 	bl	8002e04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 ff39 	bl	8006c6a <USB_DevDisconnect>

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	10000003 	.word	0x10000003

08002e4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d00a      	beq.n	8002e76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e040      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e03e      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e7e:	491f      	ldr	r1, [pc, #124]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e86:	f7fe fb27 	bl	80014d8 <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e8c:	e009      	b.n	8002ea2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e8e:	f7fe fb23 	bl	80014d8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e028      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d1ee      	bne.n	8002e8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b1e      	cmp	r3, #30
 8002eb4:	d008      	beq.n	8002ec8 <HAL_PWREx_ConfigSupply+0x7c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eba:	d005      	beq.n	8002ec8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b1d      	cmp	r3, #29
 8002ec0:	d002      	beq.n	8002ec8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b2d      	cmp	r3, #45	; 0x2d
 8002ec6:	d114      	bne.n	8002ef2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ec8:	f7fe fb06 	bl	80014d8 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ece:	e009      	b.n	8002ee4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ed0:	f7fe fb02 	bl	80014d8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ede:	d901      	bls.n	8002ee4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	58024800 	.word	0x58024800

08002f00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	58024800 	.word	0x58024800

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e3ff      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8087 	beq.w	800304e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f4a:	4b97      	ldr	r3, [pc, #604]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d007      	beq.n	8002f66 <HAL_RCC_OscConfig+0x46>
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	d110      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d10b      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f66:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d06c      	beq.n	800304c <HAL_RCC_OscConfig+0x12c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d168      	bne.n	800304c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e3d9      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x76>
 8002f88:	4b87      	ldr	r3, [pc, #540]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a86      	ldr	r2, [pc, #536]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e02e      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a81      	ldr	r2, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7e      	ldr	r2, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0xbc>
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a78      	ldr	r2, [pc, #480]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fdc:	4b72      	ldr	r3, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a71      	ldr	r2, [pc, #452]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fa6c 	bl	80014d8 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe fa68 	bl	80014d8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e38d      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003016:	4b64      	ldr	r3, [pc, #400]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xe4>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fa58 	bl	80014d8 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fa54 	bl	80014d8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e379      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x10c>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80ae 	beq.w	80031b8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305c:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003064:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003066:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_RCC_OscConfig+0x162>
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b18      	cmp	r3, #24
 8003076:	d13a      	bne.n	80030ee <HAL_RCC_OscConfig+0x1ce>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d135      	bne.n	80030ee <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003082:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x17a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e34b      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	f7fe fa4d 	bl	8001538 <HAL_GetREVID>
 800309e:	4603      	mov	r3, r0
 80030a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d817      	bhi.n	80030d8 <HAL_RCC_OscConfig+0x1b8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d108      	bne.n	80030c2 <HAL_RCC_OscConfig+0x1a2>
 80030b0:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030b8:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030be:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c0:	e07a      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	031b      	lsls	r3, r3, #12
 80030d0:	4935      	ldr	r1, [pc, #212]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d6:	e06f      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	4930      	ldr	r1, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ec:	e064      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d045      	beq.n	8003182 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0219 	bic.w	r2, r3, #25
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe f9e6 	bl	80014d8 <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe f9e2 	bl	80014d8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e307      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	f7fe fa03 	bl	8001538 <HAL_GetREVID>
 8003132:	4603      	mov	r3, r0
 8003134:	f241 0203 	movw	r2, #4099	; 0x1003
 8003138:	4293      	cmp	r3, r2
 800313a:	d817      	bhi.n	800316c <HAL_RCC_OscConfig+0x24c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d108      	bne.n	8003156 <HAL_RCC_OscConfig+0x236>
 8003144:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 800314e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003152:	6053      	str	r3, [r2, #4]
 8003154:	e030      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	031b      	lsls	r3, r3, #12
 8003164:	4910      	ldr	r1, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
 800316a:	e025      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	490b      	ldr	r1, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	e01a      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x288>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe f9a3 	bl	80014d8 <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe f99f 	bl	80014d8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d903      	bls.n	80031ac <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e2c4      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
 80031a8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031ac:	4ba4      	ldr	r3, [pc, #656]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a9 	beq.w	8003318 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c6:	4b9e      	ldr	r3, [pc, #632]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031d0:	4b9b      	ldr	r3, [pc, #620]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d007      	beq.n	80031ec <HAL_RCC_OscConfig+0x2cc>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b18      	cmp	r3, #24
 80031e0:	d13a      	bne.n	8003258 <HAL_RCC_OscConfig+0x338>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d135      	bne.n	8003258 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031ec:	4b94      	ldr	r3, [pc, #592]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_OscConfig+0x2e4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e296      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003204:	f7fe f998 	bl	8001538 <HAL_GetREVID>
 8003208:	4603      	mov	r3, r0
 800320a:	f241 0203 	movw	r2, #4099	; 0x1003
 800320e:	4293      	cmp	r3, r2
 8003210:	d817      	bhi.n	8003242 <HAL_RCC_OscConfig+0x322>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2b20      	cmp	r3, #32
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0x30c>
 800321a:	4b89      	ldr	r3, [pc, #548]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003222:	4a87      	ldr	r2, [pc, #540]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003228:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800322a:	e075      	b.n	8003318 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800322c:	4b84      	ldr	r3, [pc, #528]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	069b      	lsls	r3, r3, #26
 800323a:	4981      	ldr	r1, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003240:	e06a      	b.n	8003318 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003242:	4b7f      	ldr	r3, [pc, #508]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	497b      	ldr	r1, [pc, #492]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003252:	4313      	orrs	r3, r2
 8003254:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003256:	e05f      	b.n	8003318 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d042      	beq.n	80032e6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003260:	4b77      	ldr	r3, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a76      	ldr	r2, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe f934 	bl	80014d8 <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003274:	f7fe f930 	bl	80014d8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e255      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003286:	4b6e      	ldr	r3, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003292:	f7fe f951 	bl	8001538 <HAL_GetREVID>
 8003296:	4603      	mov	r3, r0
 8003298:	f241 0203 	movw	r2, #4099	; 0x1003
 800329c:	4293      	cmp	r3, r2
 800329e:	d817      	bhi.n	80032d0 <HAL_RCC_OscConfig+0x3b0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d108      	bne.n	80032ba <HAL_RCC_OscConfig+0x39a>
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032b0:	4a63      	ldr	r2, [pc, #396]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b6:	6053      	str	r3, [r2, #4]
 80032b8:	e02e      	b.n	8003318 <HAL_RCC_OscConfig+0x3f8>
 80032ba:	4b61      	ldr	r3, [pc, #388]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	069b      	lsls	r3, r3, #26
 80032c8:	495d      	ldr	r1, [pc, #372]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
 80032ce:	e023      	b.n	8003318 <HAL_RCC_OscConfig+0x3f8>
 80032d0:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	4958      	ldr	r1, [pc, #352]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
 80032e4:	e018      	b.n	8003318 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe f8f1 	bl	80014d8 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032fa:	f7fe f8ed 	bl	80014d8 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e212      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800330c:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d036      	beq.n	8003392 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332c:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe f8ce 	bl	80014d8 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003340:	f7fe f8ca 	bl	80014d8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1ef      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003352:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x420>
 800335e:	e018      	b.n	8003392 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	4a36      	ldr	r2, [pc, #216]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe f8b4 	bl	80014d8 <HAL_GetTick>
 8003370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe f8b0 	bl	80014d8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1d5      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d019      	beq.n	80033da <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80033ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033b2:	f7fe f891 	bl	80014d8 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033ba:	f7fe f88d 	bl	80014d8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1b2      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x49a>
 80033d8:	e018      	b.n	800340c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 80033e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033e6:	f7fe f877 	bl	80014d8 <HAL_GetTick>
 80033ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033ee:	f7fe f873 	bl	80014d8 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e198      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCC_OscConfig+0x520>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8085 	beq.w	8003524 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_OscConfig+0x524>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x524>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003426:	f7fe f857 	bl	80014d8 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342c:	e00c      	b.n	8003448 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fe f853 	bl	80014d8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d905      	bls.n	8003448 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e178      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
 8003440:	58024400 	.word	0x58024400
 8003444:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003448:	4b96      	ldr	r3, [pc, #600]	; (80036a4 <HAL_RCC_OscConfig+0x784>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ec      	beq.n	800342e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x54a>
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a91      	ldr	r2, [pc, #580]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
 8003468:	e02d      	b.n	80034c6 <HAL_RCC_OscConfig+0x5a6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x56c>
 8003472:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a8c      	ldr	r2, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	4b8a      	ldr	r3, [pc, #552]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a89      	ldr	r2, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	e01c      	b.n	80034c6 <HAL_RCC_OscConfig+0x5a6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b05      	cmp	r3, #5
 8003492:	d10c      	bne.n	80034ae <HAL_RCC_OscConfig+0x58e>
 8003494:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a83      	ldr	r2, [pc, #524]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	4b81      	ldr	r3, [pc, #516]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a80      	ldr	r2, [pc, #512]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	e00b      	b.n	80034c6 <HAL_RCC_OscConfig+0x5a6>
 80034ae:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a7d      	ldr	r2, [pc, #500]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	4b7b      	ldr	r3, [pc, #492]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a7a      	ldr	r2, [pc, #488]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d015      	beq.n	80034fa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe f803 	bl	80014d8 <HAL_GetTick>
 80034d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fd ffff 	bl	80014d8 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e122      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ec:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ee      	beq.n	80034d6 <HAL_RCC_OscConfig+0x5b6>
 80034f8:	e014      	b.n	8003524 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fd ffed 	bl	80014d8 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fd ffe9 	bl	80014d8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e10c      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003518:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ee      	bne.n	8003502 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8101 	beq.w	8003730 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800352e:	4b5e      	ldr	r3, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	2b18      	cmp	r3, #24
 8003538:	f000 80bc 	beq.w	80036b4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	2b02      	cmp	r3, #2
 8003542:	f040 8095 	bne.w	8003670 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b58      	ldr	r3, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a57      	ldr	r2, [pc, #348]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800354c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fd ffc1 	bl	80014d8 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fd ffbd 	bl	80014d8 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0e2      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800357a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <HAL_RCC_OscConfig+0x78c>)
 800357e:	4013      	ands	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	430a      	orrs	r2, r1
 800358c:	4946      	ldr	r1, [pc, #280]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800358e:	4313      	orrs	r3, r2
 8003590:	628b      	str	r3, [r1, #40]	; 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	3b01      	subs	r3, #1
 8003598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	3b01      	subs	r3, #1
 80035a2:	025b      	lsls	r3, r3, #9
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	3b01      	subs	r3, #1
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	3b01      	subs	r3, #1
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035c2:	4939      	ldr	r1, [pc, #228]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <HAL_RCC_OscConfig+0x790>)
 80035da:	4013      	ands	r3, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035e0:	00d2      	lsls	r2, r2, #3
 80035e2:	4931      	ldr	r1, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035e8:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f023 020c 	bic.w	r2, r3, #12
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	492c      	ldr	r1, [pc, #176]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f023 0202 	bic.w	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4928      	ldr	r1, [pc, #160]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003608:	4313      	orrs	r3, r2
 800360a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800361e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800362a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd ff46 	bl	80014d8 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd ff42 	bl	80014d8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e067      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x730>
 800366e:	e05f      	b.n	8003730 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd ff2c 	bl	80014d8 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd ff28 	bl	80014d8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04d      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RCC_OscConfig+0x788>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x764>
 80036a2:	e045      	b.n	8003730 <HAL_RCC_OscConfig+0x810>
 80036a4:	58024800 	.word	0x58024800
 80036a8:	58024400 	.word	0x58024400
 80036ac:	fffffc0c 	.word	0xfffffc0c
 80036b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_RCC_OscConfig+0x81c>)
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_OscConfig+0x81c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d031      	beq.n	800372c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0203 	and.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d12a      	bne.n	800372c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d122      	bne.n	800372c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d11a      	bne.n	800372c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	0a5b      	lsrs	r3, r3, #9
 80036fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d111      	bne.n	800372c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d108      	bne.n	800372c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0e1b      	lsrs	r3, r3, #24
 800371e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3730      	adds	r7, #48	; 0x30
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400

08003740 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e19c      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003754:	4b8a      	ldr	r3, [pc, #552]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d910      	bls.n	8003784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b87      	ldr	r3, [pc, #540]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 020f 	bic.w	r2, r3, #15
 800376a:	4985      	ldr	r1, [pc, #532]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b83      	ldr	r3, [pc, #524]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e184      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800379c:	429a      	cmp	r2, r3
 800379e:	d908      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037a0:	4b78      	ldr	r3, [pc, #480]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	4975      	ldr	r1, [pc, #468]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	4b70      	ldr	r3, [pc, #448]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d908      	bls.n	80037e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	496a      	ldr	r1, [pc, #424]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d908      	bls.n	800380e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037fc:	4b61      	ldr	r3, [pc, #388]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	495e      	ldr	r1, [pc, #376]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 800380a:	4313      	orrs	r3, r2
 800380c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003826:	429a      	cmp	r2, r3
 8003828:	d908      	bls.n	800383c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4953      	ldr	r1, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003838:	4313      	orrs	r3, r2
 800383a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	429a      	cmp	r2, r3
 8003856:	d908      	bls.n	800386a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b4a      	ldr	r3, [pc, #296]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f023 020f 	bic.w	r2, r3, #15
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4947      	ldr	r1, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003866:	4313      	orrs	r3, r2
 8003868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d055      	beq.n	8003922 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003876:	4b43      	ldr	r3, [pc, #268]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4940      	ldr	r1, [pc, #256]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003884:	4313      	orrs	r3, r2
 8003886:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d121      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0f6      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d115      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0ea      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0de      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0d6      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f023 0207 	bic.w	r2, r3, #7
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4925      	ldr	r1, [pc, #148]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd fdf1 	bl	80014d8 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fa:	f7fd fded 	bl	80014d8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0be      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	429a      	cmp	r2, r3
 8003920:	d1eb      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d010      	beq.n	8003950 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	429a      	cmp	r2, r3
 800393c:	d208      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f023 020f 	bic.w	r2, r3, #15
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x244>)
 800394c:	4313      	orrs	r3, r2
 800394e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d214      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 020f 	bic.w	r2, r3, #15
 8003966:	4906      	ldr	r1, [pc, #24]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCC_ClockConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e086      	b.n	8003a8e <HAL_RCC_ClockConfig+0x34e>
 8003980:	52002000 	.word	0x52002000
 8003984:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d208      	bcs.n	80039b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039a4:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4939      	ldr	r1, [pc, #228]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d208      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	492e      	ldr	r1, [pc, #184]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d010      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d208      	bcs.n	8003a12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4922      	ldr	r1, [pc, #136]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d208      	bcs.n	8003a40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4917      	ldr	r1, [pc, #92]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a40:	f000 f834 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	4912      	ldr	r1, [pc, #72]	; (8003a9c <HAL_RCC_ClockConfig+0x35c>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_RCC_ClockConfig+0x358>)
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_RCC_ClockConfig+0x35c>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x360>)
 8003a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a78:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HAL_RCC_ClockConfig+0x364>)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x368>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fcde 	bl	8001444 <HAL_InitTick>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	080090b0 	.word	0x080090b0
 8003aa0:	24000004 	.word	0x24000004
 8003aa4:	24000000 	.word	0x24000000
 8003aa8:	24000008 	.word	0x24000008

08003aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab2:	4bb3      	ldr	r3, [pc, #716]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aba:	2b18      	cmp	r3, #24
 8003abc:	f200 8155 	bhi.w	8003d6a <HAL_RCC_GetSysClockFreq+0x2be>
 8003ac0:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003b2d 	.word	0x08003b2d
 8003acc:	08003d6b 	.word	0x08003d6b
 8003ad0:	08003d6b 	.word	0x08003d6b
 8003ad4:	08003d6b 	.word	0x08003d6b
 8003ad8:	08003d6b 	.word	0x08003d6b
 8003adc:	08003d6b 	.word	0x08003d6b
 8003ae0:	08003d6b 	.word	0x08003d6b
 8003ae4:	08003d6b 	.word	0x08003d6b
 8003ae8:	08003b53 	.word	0x08003b53
 8003aec:	08003d6b 	.word	0x08003d6b
 8003af0:	08003d6b 	.word	0x08003d6b
 8003af4:	08003d6b 	.word	0x08003d6b
 8003af8:	08003d6b 	.word	0x08003d6b
 8003afc:	08003d6b 	.word	0x08003d6b
 8003b00:	08003d6b 	.word	0x08003d6b
 8003b04:	08003d6b 	.word	0x08003d6b
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003d6b 	.word	0x08003d6b
 8003b10:	08003d6b 	.word	0x08003d6b
 8003b14:	08003d6b 	.word	0x08003d6b
 8003b18:	08003d6b 	.word	0x08003d6b
 8003b1c:	08003d6b 	.word	0x08003d6b
 8003b20:	08003d6b 	.word	0x08003d6b
 8003b24:	08003d6b 	.word	0x08003d6b
 8003b28:	08003b5f 	.word	0x08003b5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b2c:	4b94      	ldr	r3, [pc, #592]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b38:	4b91      	ldr	r3, [pc, #580]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	4a90      	ldr	r2, [pc, #576]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003b4a:	e111      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b4c:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b4e:	61bb      	str	r3, [r7, #24]
    break;
 8003b50:	e10e      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b52:	4b8d      	ldr	r3, [pc, #564]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b54:	61bb      	str	r3, [r7, #24]
    break;
 8003b56:	e10b      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b58:	4b8c      	ldr	r3, [pc, #560]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b5a:	61bb      	str	r3, [r7, #24]
    break;
 8003b5c:	e108      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b68:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b74:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b7e:	4b80      	ldr	r3, [pc, #512]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	08db      	lsrs	r3, r3, #3
 8003b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80e1 	beq.w	8003d64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	f000 8083 	beq.w	8003cb0 <HAL_RCC_GetSysClockFreq+0x204>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f200 80a1 	bhi.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x248>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x114>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d056      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003bbe:	e099      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bc0:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bcc:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	4a6b      	ldr	r2, [pc, #428]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c26:	e087      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c6a:	e065      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7e:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cae:	e043      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cf2:	e021      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	0a5b      	lsrs	r3, r3, #9
 8003d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d42:	3301      	adds	r3, #1
 8003d44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5c:	ee17 3a90 	vmov	r3, s15
 8003d60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    break;
 8003d68:	e002      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d6c:	61bb      	str	r3, [r7, #24]
    break;
 8003d6e:	bf00      	nop
  }

  return sysclockfreq;
 8003d70:	69bb      	ldr	r3, [r7, #24]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	03d09000 	.word	0x03d09000
 8003d88:	003d0900 	.word	0x003d0900
 8003d8c:	007a1200 	.word	0x007a1200
 8003d90:	46000000 	.word	0x46000000
 8003d94:	4c742400 	.word	0x4c742400
 8003d98:	4a742400 	.word	0x4a742400
 8003d9c:	4af42400 	.word	0x4af42400

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003da6:	f7ff fe81 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	490f      	ldr	r1, [pc, #60]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003db8:	5ccb      	ldrb	r3, [r1, r3]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ddc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dde:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	58024400 	.word	0x58024400
 8003df4:	080090b0 	.word	0x080090b0
 8003df8:	24000004 	.word	0x24000004
 8003dfc:	24000000 	.word	0x24000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e04:	f7ff ffcc 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	58024400 	.word	0x58024400
 8003e28:	080090b0 	.word	0x080090b0

08003e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e30:	f7ff ffb6 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4904      	ldr	r1, [pc, #16]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	58024400 	.word	0x58024400
 8003e54:	080090b0 	.word	0x080090b0

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e64:	2300      	movs	r3, #0
 8003e66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d03f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e7c:	d02a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e82:	d824      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e88:	d018      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8e:	d81e      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e98:	d007      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e9a:	e018      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9c:	4bab      	ldr	r3, [pc, #684]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4aaa      	ldr	r2, [pc, #680]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f9cf 	bl	8005254 <RCCEx_PLL2_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3324      	adds	r3, #36	; 0x24
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 fa78 	bl	80053b8 <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003edc:	4b9b      	ldr	r3, [pc, #620]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee8:	4998      	ldr	r1, [pc, #608]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	650b      	str	r3, [r1, #80]	; 0x50
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03d      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d826      	bhi.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f25 	.word	0x08003f25
 8003f14:	08003f33 	.word	0x08003f33
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f5d 	.word	0x08003f5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4b89      	ldr	r3, [pc, #548]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	4a88      	ldr	r2, [pc, #544]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f30:	e015      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f98b 	bl	8005254 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f42:	e00c      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3324      	adds	r3, #36	; 0x24
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fa34 	bl	80053b8 <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f64:	4b79      	ldr	r3, [pc, #484]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f68:	f023 0207 	bic.w	r2, r3, #7
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	4976      	ldr	r1, [pc, #472]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	650b      	str	r3, [r1, #80]	; 0x50
 8003f76:	e001      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d042      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f90:	d02b      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d825      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f98:	2bc0      	cmp	r3, #192	; 0xc0
 8003f9a:	d028      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f9c:	2bc0      	cmp	r3, #192	; 0xc0
 8003f9e:	d821      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003fa0:	2b80      	cmp	r3, #128	; 0x80
 8003fa2:	d016      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d81d      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d007      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003fb0:	e018      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4b66      	ldr	r3, [pc, #408]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fbe:	e017      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f944 	bl	8005254 <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fd0:	e00e      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3324      	adds	r3, #36	; 0x24
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 f9ed 	bl	80053b8 <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fe2:	e005      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ff6:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	4952      	ldr	r1, [pc, #328]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	650b      	str	r3, [r1, #80]	; 0x50
 8004008:	e001      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	2b00      	cmp	r3, #0
 8004018:	d049      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004024:	d030      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800402a:	d82a      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800402c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004030:	d02c      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004032:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004036:	d824      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403c:	d018      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004042:	d81e      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800404c:	d007      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800404e:	e018      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	4a3d      	ldr	r2, [pc, #244]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800405c:	e017      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f8f5 	bl	8005254 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800406e:	e00e      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3324      	adds	r3, #36	; 0x24
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f001 f99e 	bl	80053b8 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004080:	e005      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
      break;
 8004086:	e002      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004088:	bf00      	nop
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800408c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a2:	492a      	ldr	r1, [pc, #168]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	658b      	str	r3, [r1, #88]	; 0x58
 80040a8:	e001      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04c      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c4:	d030      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80040c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ca:	d82a      	bhi.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040d0:	d02c      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80040d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040d6:	d824      	bhi.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040dc:	d018      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80040de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e2:	d81e      	bhi.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80040e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ec:	d007      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80040ee:	e018      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040fc:	e017      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f8a5 	bl	8005254 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800410e:	e00e      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f001 f94e 	bl	80053b8 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004120:	e005      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
      break;
 8004126:	e002      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800412c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004142:	4902      	ldr	r1, [pc, #8]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	658b      	str	r3, [r1, #88]	; 0x58
 8004148:	e004      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d032      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	2b30      	cmp	r3, #48	; 0x30
 8004166:	d01c      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004168:	2b30      	cmp	r3, #48	; 0x30
 800416a:	d817      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800416c:	2b20      	cmp	r3, #32
 800416e:	d00c      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004170:	2b20      	cmp	r3, #32
 8004172:	d813      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d016      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004178:	2b10      	cmp	r3, #16
 800417a:	d10f      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4baf      	ldr	r3, [pc, #700]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4aae      	ldr	r2, [pc, #696]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004188:	e00e      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f001 f85f 	bl	8005254 <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800419a:	e005      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	e002      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80041a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041ae:	4ba3      	ldr	r3, [pc, #652]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ba:	49a0      	ldr	r1, [pc, #640]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d047      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041da:	d030      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e0:	d82a      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80041e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041e6:	d02c      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80041e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ec:	d824      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80041ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f2:	d018      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f8:	d81e      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d007      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004204:	e018      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	4a8c      	ldr	r2, [pc, #560]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004212:	e017      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f81a 	bl	8005254 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004224:	e00e      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f001 f8c3 	bl	80053b8 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004236:	e005      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e002      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800424a:	4b7c      	ldr	r3, [pc, #496]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004256:	4979      	ldr	r1, [pc, #484]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	650b      	str	r3, [r1, #80]	; 0x50
 800425c:	e001      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d049      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004276:	d02e      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800427c:	d828      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800427e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004282:	d02a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004288:	d822      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800428a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800428e:	d026      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004294:	d81c      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429a:	d010      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x466>
 800429c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a0:	d816      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01d      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d111      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 ffce 	bl	8005254 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80042bc:	e012      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3324      	adds	r3, #36	; 0x24
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f877 	bl	80053b8 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80042ce:	e009      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
      break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80042d6:	bf00      	nop
 80042d8:	e004      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80042e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	4951      	ldr	r1, [pc, #324]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	650b      	str	r3, [r1, #80]	; 0x50
 80042fc:	e001      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d04b      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004318:	d02e      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800431a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800431e:	d828      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d02a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432a:	d822      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800432c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004330:	d026      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004336:	d81c      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800433c:	d010      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800433e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004342:	d816      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01d      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800434c:	d111      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f000 ff7d 	bl	8005254 <RCCEx_PLL2_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800435e:	e012      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f826 	bl	80053b8 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004370:	e009      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
      break;
 8004376:	e006      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004378:	bf00      	nop
 800437a:	e004      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800439a:	4928      	ldr	r1, [pc, #160]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	658b      	str	r3, [r1, #88]	; 0x58
 80043a0:	e001      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ba:	d00e      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x582>
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c0:	d814      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d015      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ca:	d10f      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80043d8:	e00c      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 ff37 	bl	8005254 <RCCEx_PLL2_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75fb      	strb	r3, [r7, #23]
      break;
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80043f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004406:	490d      	ldr	r1, [pc, #52]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004408:	4313      	orrs	r3, r2
 800440a:	650b      	str	r3, [r1, #80]	; 0x50
 800440c:	e001      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d033      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	2b03      	cmp	r3, #3
 8004424:	d81c      	bhi.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004467 	.word	0x08004467
 8004430:	08004441 	.word	0x08004441
 8004434:	0800444f 	.word	0x0800444f
 8004438:	08004467 	.word	0x08004467
 800443c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004440:	4bb8      	ldr	r3, [pc, #736]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4ab7      	ldr	r2, [pc, #732]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800444c:	e00c      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	2102      	movs	r1, #2
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fefd 	bl	8005254 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
      break;
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800446e:	4bad      	ldr	r3, [pc, #692]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	49aa      	ldr	r1, [pc, #680]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004480:	e001      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8086 	beq.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004494:	4ba4      	ldr	r3, [pc, #656]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4aa3      	ldr	r2, [pc, #652]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a0:	f7fd f81a 	bl	80014d8 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a6:	e009      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fd f816 	bl	80014d8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d902      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	75fb      	strb	r3, [r7, #23]
        break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044bc:	4b9a      	ldr	r3, [pc, #616]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ef      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d166      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044ce:	4b95      	ldr	r3, [pc, #596]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044d8:	4053      	eors	r3, r2
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e2:	4b90      	ldr	r3, [pc, #576]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ec:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	4a8c      	ldr	r2, [pc, #560]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f8:	4b8a      	ldr	r3, [pc, #552]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a89      	ldr	r2, [pc, #548]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004504:	4a87      	ldr	r2, [pc, #540]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004514:	d115      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fc ffdf 	bl	80014d8 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800451c:	e00b      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fc ffdb 	bl	80014d8 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d902      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	75fb      	strb	r3, [r7, #23]
            break;
 8004534:	e005      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004536:	4b7b      	ldr	r3, [pc, #492]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ed      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d126      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004556:	d10d      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004558:	4b72      	ldr	r3, [pc, #456]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004566:	0919      	lsrs	r1, r3, #4
 8004568:	4b70      	ldr	r3, [pc, #448]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800456a:	400b      	ands	r3, r1
 800456c:	496d      	ldr	r1, [pc, #436]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]
 8004572:	e005      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004574:	4b6b      	ldr	r3, [pc, #428]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	4a6a      	ldr	r2, [pc, #424]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800457a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800457e:	6113      	str	r3, [r2, #16]
 8004580:	4b68      	ldr	r3, [pc, #416]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800458a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458e:	4965      	ldr	r1, [pc, #404]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	670b      	str	r3, [r1, #112]	; 0x70
 8004594:	e004      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	75bb      	strb	r3, [r7, #22]
 800459a:	e001      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d07e      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b0:	2b28      	cmp	r3, #40	; 0x28
 80045b2:	d867      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	0800468b 	.word	0x0800468b
 80045c0:	08004685 	.word	0x08004685
 80045c4:	08004685 	.word	0x08004685
 80045c8:	08004685 	.word	0x08004685
 80045cc:	08004685 	.word	0x08004685
 80045d0:	08004685 	.word	0x08004685
 80045d4:	08004685 	.word	0x08004685
 80045d8:	08004685 	.word	0x08004685
 80045dc:	08004661 	.word	0x08004661
 80045e0:	08004685 	.word	0x08004685
 80045e4:	08004685 	.word	0x08004685
 80045e8:	08004685 	.word	0x08004685
 80045ec:	08004685 	.word	0x08004685
 80045f0:	08004685 	.word	0x08004685
 80045f4:	08004685 	.word	0x08004685
 80045f8:	08004685 	.word	0x08004685
 80045fc:	08004673 	.word	0x08004673
 8004600:	08004685 	.word	0x08004685
 8004604:	08004685 	.word	0x08004685
 8004608:	08004685 	.word	0x08004685
 800460c:	08004685 	.word	0x08004685
 8004610:	08004685 	.word	0x08004685
 8004614:	08004685 	.word	0x08004685
 8004618:	08004685 	.word	0x08004685
 800461c:	0800468b 	.word	0x0800468b
 8004620:	08004685 	.word	0x08004685
 8004624:	08004685 	.word	0x08004685
 8004628:	08004685 	.word	0x08004685
 800462c:	08004685 	.word	0x08004685
 8004630:	08004685 	.word	0x08004685
 8004634:	08004685 	.word	0x08004685
 8004638:	08004685 	.word	0x08004685
 800463c:	0800468b 	.word	0x0800468b
 8004640:	08004685 	.word	0x08004685
 8004644:	08004685 	.word	0x08004685
 8004648:	08004685 	.word	0x08004685
 800464c:	08004685 	.word	0x08004685
 8004650:	08004685 	.word	0x08004685
 8004654:	08004685 	.word	0x08004685
 8004658:	08004685 	.word	0x08004685
 800465c:	0800468b 	.word	0x0800468b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fdf4 	bl	8005254 <RCCEx_PLL2_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004670:	e00c      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3324      	adds	r3, #36	; 0x24
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fe9d 	bl	80053b8 <RCCEx_PLL3_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004682:	e003      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75fb      	strb	r3, [r7, #23]
      break;
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800468a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469e:	4921      	ldr	r1, [pc, #132]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	654b      	str	r3, [r1, #84]	; 0x54
 80046a4:	e001      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d03e      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d820      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	08004707 	.word	0x08004707
 80046c8:	080046dd 	.word	0x080046dd
 80046cc:	080046ef 	.word	0x080046ef
 80046d0:	08004707 	.word	0x08004707
 80046d4:	08004707 	.word	0x08004707
 80046d8:	08004707 	.word	0x08004707
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fdb6 	bl	8005254 <RCCEx_PLL2_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046ec:	e00c      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3324      	adds	r3, #36	; 0x24
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fe5f 	bl	80053b8 <RCCEx_PLL3_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046fe:	e003      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	75fb      	strb	r3, [r7, #23]
      break;
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d110      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f023 0207 	bic.w	r2, r3, #7
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	4902      	ldr	r1, [pc, #8]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	654b      	str	r3, [r1, #84]	; 0x54
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	58024800 	.word	0x58024800
 800472c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d039      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	2b05      	cmp	r3, #5
 8004748:	d820      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004793 	.word	0x08004793
 8004754:	08004769 	.word	0x08004769
 8004758:	0800477b 	.word	0x0800477b
 800475c:	08004793 	.word	0x08004793
 8004760:	08004793 	.word	0x08004793
 8004764:	08004793 	.word	0x08004793
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	2101      	movs	r1, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fd70 	bl	8005254 <RCCEx_PLL2_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004778:	e00c      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fe19 	bl	80053b8 <RCCEx_PLL3_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	75fb      	strb	r3, [r7, #23]
      break;
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800479a:	4bb7      	ldr	r3, [pc, #732]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	49b3      	ldr	r1, [pc, #716]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	658b      	str	r3, [r1, #88]	; 0x58
 80047ae:	e001      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d04b      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ca:	d02e      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80047cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d0:	d828      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d02a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d822      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80047de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047e2:	d026      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80047e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047e8:	d81c      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ee:	d010      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80047f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047f4:	d816      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01d      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80047fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047fe:	d111      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd24 	bl	8005254 <RCCEx_PLL2_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004810:	e012      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3324      	adds	r3, #36	; 0x24
 8004816:	2102      	movs	r1, #2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fdcd 	bl	80053b8 <RCCEx_PLL3_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004822:	e009      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
      break;
 8004828:	e006      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800482a:	bf00      	nop
 800482c:	e004      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800483e:	4b8e      	ldr	r3, [pc, #568]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484c:	498a      	ldr	r1, [pc, #552]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800484e:	4313      	orrs	r3, r2
 8004850:	654b      	str	r3, [r1, #84]	; 0x54
 8004852:	e001      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d04b      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800486e:	d02e      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004870:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004874:	d828      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487a:	d02a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	d822      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004886:	d026      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488c:	d81c      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d010      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004898:	d816      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01d      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800489e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a2:	d111      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2100      	movs	r1, #0
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fcd2 	bl	8005254 <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048b4:	e012      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3324      	adds	r3, #36	; 0x24
 80048ba:	2102      	movs	r1, #2
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fd7b 	bl	80053b8 <RCCEx_PLL3_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048c6:	e009      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
      break;
 80048cc:	e006      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80048ce:	bf00      	nop
 80048d0:	e004      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80048d2:	bf00      	nop
 80048d4:	e002      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80048d6:	bf00      	nop
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80048da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048e2:	4b65      	ldr	r3, [pc, #404]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048f0:	4961      	ldr	r1, [pc, #388]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	658b      	str	r3, [r1, #88]	; 0x58
 80048f6:	e001      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04b      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800490e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004912:	d02e      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004914:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004918:	d828      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d02a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	d822      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004926:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800492a:	d026      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800492c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004930:	d81c      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004936:	d010      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493c:	d816      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01d      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004946:	d111      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fc80 	bl	8005254 <RCCEx_PLL2_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004958:	e012      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3324      	adds	r3, #36	; 0x24
 800495e:	2102      	movs	r1, #2
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd29 	bl	80053b8 <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800496a:	e009      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
      break;
 8004970:	e006      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004972:	bf00      	nop
 8004974:	e004      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800497e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004986:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004994:	4938      	ldr	r1, [pc, #224]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004996:	4313      	orrs	r3, r2
 8004998:	658b      	str	r3, [r1, #88]	; 0x58
 800499a:	e001      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d10a      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3324      	adds	r3, #36	; 0x24
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fcfa 	bl	80053b8 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049dc:	4926      	ldr	r1, [pc, #152]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f8:	d10a      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3324      	adds	r3, #36	; 0x24
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fcd9 	bl	80053b8 <RCCEx_PLL3_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	4916      	ldr	r1, [pc, #88]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d036      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3a:	d01f      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a40:	d817      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d009      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004a4c:	e011      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fbfd 	bl	8005254 <RCCEx_PLL2_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a5e:	e00e      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3324      	adds	r3, #36	; 0x24
 8004a64:	2102      	movs	r1, #2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fca6 	bl	80053b8 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a70:	e005      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004a78:	58024400 	.word	0x58024400
      break;
 8004a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a84:	4b93      	ldr	r3, [pc, #588]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a92:	4990      	ldr	r1, [pc, #576]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	658b      	str	r3, [r1, #88]	; 0x58
 8004a98:	e001      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d033      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ab4:	d01c      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aba:	d816      	bhi.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ac6:	d007      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004ac8:	e00f      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aca:	4b82      	ldr	r3, [pc, #520]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a81      	ldr	r2, [pc, #516]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ad6:	e00c      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	2101      	movs	r1, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fc6a 	bl	80053b8 <RCCEx_PLL3_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
      break;
 8004aee:	e000      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af8:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b06:	4973      	ldr	r1, [pc, #460]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	654b      	str	r3, [r1, #84]	; 0x54
 8004b0c:	e001      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d029      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2a:	d007      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004b2c:	e00f      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2e:	4b69      	ldr	r3, [pc, #420]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a68      	ldr	r2, [pc, #416]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fb86 	bl	8005254 <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b4c:	e002      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
      break;
 8004b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b5a:	4b5e      	ldr	r3, [pc, #376]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	495b      	ldr	r1, [pc, #364]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b6c:	e001      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3324      	adds	r3, #36	; 0x24
 8004b82:	2102      	movs	r1, #2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc17 	bl	80053b8 <RCCEx_PLL3_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d030      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba8:	d017      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bae:	d811      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb4:	d013      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d80b      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc6:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	4a42      	ldr	r2, [pc, #264]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004bd2:	e007      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	e004      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bea:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	4937      	ldr	r1, [pc, #220]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	654b      	str	r3, [r1, #84]	; 0x54
 8004bfc:	e001      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c0e:	4b31      	ldr	r3, [pc, #196]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	492e      	ldr	r1, [pc, #184]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c2c:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c3a:	4926      	ldr	r1, [pc, #152]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c4c:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c58:	491e      	ldr	r1, [pc, #120]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c74:	6113      	str	r3, [r2, #16]
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c80:	4914      	ldr	r1, [pc, #80]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da08      	bge.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9a:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	4906      	ldr	r1, [pc, #24]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004cc0:	7dbb      	ldrb	r3, [r7, #22]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	58024400 	.word	0x58024400

08004cd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cdc:	f7ff f860 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4904      	ldr	r1, [pc, #16]	; (8004d00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	080090b0 	.word	0x080090b0

08004d04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	; 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d0c:	4ba1      	ldr	r3, [pc, #644]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d16:	4b9f      	ldr	r3, [pc, #636]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	0b1b      	lsrs	r3, r3, #12
 8004d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d22:	4b9c      	ldr	r3, [pc, #624]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d2e:	4b99      	ldr	r3, [pc, #612]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8111 	beq.w	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	f000 8083 	beq.w	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	f200 80a1 	bhi.w	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d056      	beq.n	8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d6e:	e099      	b.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d70:	4b88      	ldr	r3, [pc, #544]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d02d      	beq.n	8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d7c:	4b85      	ldr	r3, [pc, #532]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	4a84      	ldr	r2, [pc, #528]	; (8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da6:	4b7b      	ldr	r3, [pc, #492]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dd6:	e087      	b.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dea:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e1a:	e065      	b.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e5e:	e043      	b.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b48      	ldr	r3, [pc, #288]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ea2:	e021      	b.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ee6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	0a5b      	lsrs	r3, r3, #9
 8004eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f0e:	ee17 2a90 	vmov	r2, s15
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f16:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	0c1b      	lsrs	r3, r3, #16
 8004f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3c:	ee17 2a90 	vmov	r2, s15
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	0e1b      	lsrs	r3, r3, #24
 8004f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6a:	ee17 2a90 	vmov	r2, s15
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f72:	e008      	b.n	8004f86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
}
 8004f86:	bf00      	nop
 8004f88:	3724      	adds	r7, #36	; 0x24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	58024400 	.word	0x58024400
 8004f98:	03d09000 	.word	0x03d09000
 8004f9c:	46000000 	.word	0x46000000
 8004fa0:	4c742400 	.word	0x4c742400
 8004fa4:	4a742400 	.word	0x4a742400
 8004fa8:	4af42400 	.word	0x4af42400

08004fac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb4:	4ba1      	ldr	r3, [pc, #644]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004fbe:	4b9f      	ldr	r3, [pc, #636]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	0d1b      	lsrs	r3, r3, #20
 8004fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fca:	4b9c      	ldr	r3, [pc, #624]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fd6:	4b99      	ldr	r3, [pc, #612]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8111 	beq.w	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f000 8083 	beq.w	8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f200 80a1 	bhi.w	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d056      	beq.n	80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005016:	e099      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005018:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02d      	beq.n	8005080 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005024:	4b85      	ldr	r3, [pc, #532]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	4a84      	ldr	r2, [pc, #528]	; (8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b7b      	ldr	r3, [pc, #492]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005062:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800507e:	e087      	b.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005248 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050c2:	e065      	b.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800524c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005106:	e043      	b.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b48      	ldr	r3, [pc, #288]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800514a:	e021      	b.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800524c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800518e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b6:	ee17 2a90 	vmov	r2, s15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80051be:	4b1f      	ldr	r3, [pc, #124]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e4:	ee17 2a90 	vmov	r2, s15
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005206:	edd7 6a07 	vldr	s13, [r7, #28]
 800520a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005212:	ee17 2a90 	vmov	r2, s15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800521a:	e008      	b.n	800522e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
}
 800522e:	bf00      	nop
 8005230:	3724      	adds	r7, #36	; 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
 8005240:	03d09000 	.word	0x03d09000
 8005244:	46000000 	.word	0x46000000
 8005248:	4c742400 	.word	0x4c742400
 800524c:	4a742400 	.word	0x4a742400
 8005250:	4af42400 	.word	0x4af42400

08005254 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005262:	4b53      	ldr	r3, [pc, #332]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b03      	cmp	r3, #3
 800526c:	d101      	bne.n	8005272 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e099      	b.n	80053a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005272:	4b4f      	ldr	r3, [pc, #316]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4e      	ldr	r2, [pc, #312]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005278:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800527c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527e:	f7fc f92b 	bl	80014d8 <HAL_GetTick>
 8005282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005284:	e008      	b.n	8005298 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005286:	f7fc f927 	bl	80014d8 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e086      	b.n	80053a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005298:	4b45      	ldr	r3, [pc, #276]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052a4:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	493f      	ldr	r1, [pc, #252]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	628b      	str	r3, [r1, #40]	; 0x28
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	3b01      	subs	r3, #1
 80052be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	025b      	lsls	r3, r3, #9
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052e8:	4931      	ldr	r1, [pc, #196]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052ee:	4b30      	ldr	r3, [pc, #192]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	492d      	ldr	r1, [pc, #180]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005300:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	f023 0220 	bic.w	r2, r3, #32
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	4928      	ldr	r1, [pc, #160]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005312:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800531e:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <RCCEx_PLL2_Config+0x160>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	69d2      	ldr	r2, [r2, #28]
 800532a:	00d2      	lsls	r2, r2, #3
 800532c:	4920      	ldr	r1, [pc, #128]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005332:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005338:	f043 0310 	orr.w	r3, r3, #16
 800533c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800534a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800534e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005350:	e00f      	b.n	8005372 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005362:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005364:	e005      	b.n	8005372 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005370:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 8005378:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800537c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537e:	f7fc f8ab 	bl	80014d8 <HAL_GetTick>
 8005382:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005384:	e008      	b.n	8005398 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005386:	f7fc f8a7 	bl	80014d8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e006      	b.n	80053a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <RCCEx_PLL2_Config+0x15c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	58024400 	.word	0x58024400
 80053b4:	ffff0007 	.word	0xffff0007

080053b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053c6:	4b53      	ldr	r3, [pc, #332]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d101      	bne.n	80053d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e099      	b.n	800550a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053d6:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a4e      	ldr	r2, [pc, #312]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80053dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e2:	f7fc f879 	bl	80014d8 <HAL_GetTick>
 80053e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053e8:	e008      	b.n	80053fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053ea:	f7fc f875 	bl	80014d8 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e086      	b.n	800550a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053fc:	4b45      	ldr	r3, [pc, #276]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	051b      	lsls	r3, r3, #20
 8005416:	493f      	ldr	r1, [pc, #252]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	628b      	str	r3, [r1, #40]	; 0x28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	3b01      	subs	r3, #1
 8005422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	3b01      	subs	r3, #1
 800542c:	025b      	lsls	r3, r3, #9
 800542e:	b29b      	uxth	r3, r3
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	3b01      	subs	r3, #1
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	3b01      	subs	r3, #1
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800544c:	4931      	ldr	r1, [pc, #196]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 800544e:	4313      	orrs	r3, r2
 8005450:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005452:	4b30      	ldr	r3, [pc, #192]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	492d      	ldr	r1, [pc, #180]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005464:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	4928      	ldr	r1, [pc, #160]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005476:	4b27      	ldr	r3, [pc, #156]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	4a26      	ldr	r2, [pc, #152]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005486:	4b24      	ldr	r3, [pc, #144]	; (8005518 <RCCEx_PLL3_Config+0x160>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	69d2      	ldr	r2, [r2, #28]
 800548e:	00d2      	lsls	r2, r2, #3
 8005490:	4920      	ldr	r1, [pc, #128]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005496:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 800549c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054b4:	e00f      	b.n	80054d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d106      	bne.n	80054ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054bc:	4b15      	ldr	r3, [pc, #84]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054c8:	e005      	b.n	80054d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	4a11      	ldr	r2, [pc, #68]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e2:	f7fb fff9 	bl	80014d8 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054e8:	e008      	b.n	80054fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054ea:	f7fb fff5 	bl	80014d8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e006      	b.n	800550a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <RCCEx_PLL3_Config+0x15c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	ffff0007 	.word	0xffff0007

0800551c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0eb      	b.n	800570a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a75      	ldr	r2, [pc, #468]	; (8005714 <HAL_SPI_Init+0x1f8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <HAL_SPI_Init+0x46>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a74      	ldr	r2, [pc, #464]	; (8005718 <HAL_SPI_Init+0x1fc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00a      	beq.n	8005562 <HAL_SPI_Init+0x46>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a72      	ldr	r2, [pc, #456]	; (800571c <HAL_SPI_Init+0x200>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d005      	beq.n	8005562 <HAL_SPI_Init+0x46>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	d901      	bls.n	8005562 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0d3      	b.n	800570a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8dc 	bl	8005720 <SPI_GetPacketSize>
 8005568:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a69      	ldr	r2, [pc, #420]	; (8005714 <HAL_SPI_Init+0x1f8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00c      	beq.n	800558e <HAL_SPI_Init+0x72>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a67      	ldr	r2, [pc, #412]	; (8005718 <HAL_SPI_Init+0x1fc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d007      	beq.n	800558e <HAL_SPI_Init+0x72>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a66      	ldr	r2, [pc, #408]	; (800571c <HAL_SPI_Init+0x200>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d002      	beq.n	800558e <HAL_SPI_Init+0x72>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b08      	cmp	r3, #8
 800558c:	d811      	bhi.n	80055b2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005592:	4a60      	ldr	r2, [pc, #384]	; (8005714 <HAL_SPI_Init+0x1f8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5e      	ldr	r2, [pc, #376]	; (8005718 <HAL_SPI_Init+0x1fc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_SPI_Init+0x90>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a5d      	ldr	r2, [pc, #372]	; (800571c <HAL_SPI_Init+0x200>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d104      	bne.n	80055b6 <HAL_SPI_Init+0x9a>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d901      	bls.n	80055b6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0a9      	b.n	800570a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fb fc58 	bl	8000e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f0:	d119      	bne.n	8005626 <HAL_SPI_Init+0x10a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fa:	d103      	bne.n	8005604 <HAL_SPI_Init+0xe8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10c      	bne.n	8005626 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005614:	d107      	bne.n	8005626 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	ea42 0103 	orr.w	r1, r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	ea42 0103 	orr.w	r1, r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d113      	bne.n	80056c6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40013000 	.word	0x40013000
 8005718:	40003800 	.word	0x40003800
 800571c:	40003c00 	.word	0x40003c00

08005720 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	3301      	adds	r3, #1
 8005738:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3307      	adds	r3, #7
 800573e:	08db      	lsrs	r3, r3, #3
 8005740:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	fb02 f303 	mul.w	r3, r2, r3
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e042      	b.n	80057ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb fcda 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2224      	movs	r2, #36	; 0x24
 8005784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f82d 	bl	80057f8 <UART_SetConfig>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e022      	b.n	80057ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fd81 	bl	80062b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fe08 	bl	80063fc <UART_CheckIdleState>
 80057ec:	4603      	mov	r3, r0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f8:	b5b0      	push	{r4, r5, r7, lr}
 80057fa:	b08e      	sub	sp, #56	; 0x38
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4313      	orrs	r3, r2
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4bbf      	ldr	r3, [pc, #764]	; (8005b24 <UART_SetConfig+0x32c>)
 8005826:	4013      	ands	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800582e:	430b      	orrs	r3, r1
 8005830:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4ab5      	ldr	r2, [pc, #724]	; (8005b28 <UART_SetConfig+0x330>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800585e:	4313      	orrs	r3, r2
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4bb0      	ldr	r3, [pc, #704]	; (8005b2c <UART_SetConfig+0x334>)
 800586a:	4013      	ands	r3, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005872:	430b      	orrs	r3, r1
 8005874:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f023 010f 	bic.w	r1, r3, #15
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4aa7      	ldr	r2, [pc, #668]	; (8005b30 <UART_SetConfig+0x338>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d176      	bne.n	8005984 <UART_SetConfig+0x18c>
 8005896:	4ba7      	ldr	r3, [pc, #668]	; (8005b34 <UART_SetConfig+0x33c>)
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800589e:	2b28      	cmp	r3, #40	; 0x28
 80058a0:	d86c      	bhi.n	800597c <UART_SetConfig+0x184>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <UART_SetConfig+0xb0>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	0800594d 	.word	0x0800594d
 80058ac:	0800597d 	.word	0x0800597d
 80058b0:	0800597d 	.word	0x0800597d
 80058b4:	0800597d 	.word	0x0800597d
 80058b8:	0800597d 	.word	0x0800597d
 80058bc:	0800597d 	.word	0x0800597d
 80058c0:	0800597d 	.word	0x0800597d
 80058c4:	0800597d 	.word	0x0800597d
 80058c8:	08005955 	.word	0x08005955
 80058cc:	0800597d 	.word	0x0800597d
 80058d0:	0800597d 	.word	0x0800597d
 80058d4:	0800597d 	.word	0x0800597d
 80058d8:	0800597d 	.word	0x0800597d
 80058dc:	0800597d 	.word	0x0800597d
 80058e0:	0800597d 	.word	0x0800597d
 80058e4:	0800597d 	.word	0x0800597d
 80058e8:	0800595d 	.word	0x0800595d
 80058ec:	0800597d 	.word	0x0800597d
 80058f0:	0800597d 	.word	0x0800597d
 80058f4:	0800597d 	.word	0x0800597d
 80058f8:	0800597d 	.word	0x0800597d
 80058fc:	0800597d 	.word	0x0800597d
 8005900:	0800597d 	.word	0x0800597d
 8005904:	0800597d 	.word	0x0800597d
 8005908:	08005965 	.word	0x08005965
 800590c:	0800597d 	.word	0x0800597d
 8005910:	0800597d 	.word	0x0800597d
 8005914:	0800597d 	.word	0x0800597d
 8005918:	0800597d 	.word	0x0800597d
 800591c:	0800597d 	.word	0x0800597d
 8005920:	0800597d 	.word	0x0800597d
 8005924:	0800597d 	.word	0x0800597d
 8005928:	0800596d 	.word	0x0800596d
 800592c:	0800597d 	.word	0x0800597d
 8005930:	0800597d 	.word	0x0800597d
 8005934:	0800597d 	.word	0x0800597d
 8005938:	0800597d 	.word	0x0800597d
 800593c:	0800597d 	.word	0x0800597d
 8005940:	0800597d 	.word	0x0800597d
 8005944:	0800597d 	.word	0x0800597d
 8005948:	08005975 	.word	0x08005975
 800594c:	2301      	movs	r3, #1
 800594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005952:	e222      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595a:	e21e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005962:	e21a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e216      	b.n	8005d9a <UART_SetConfig+0x5a2>
 800596c:	2320      	movs	r3, #32
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005972:	e212      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005974:	2340      	movs	r3, #64	; 0x40
 8005976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597a:	e20e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005982:	e20a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6b      	ldr	r2, [pc, #428]	; (8005b38 <UART_SetConfig+0x340>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d130      	bne.n	80059f0 <UART_SetConfig+0x1f8>
 800598e:	4b69      	ldr	r3, [pc, #420]	; (8005b34 <UART_SetConfig+0x33c>)
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b05      	cmp	r3, #5
 8005998:	d826      	bhi.n	80059e8 <UART_SetConfig+0x1f0>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x1a8>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b9 	.word	0x080059b9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059be:	e1ec      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c6:	e1e8      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ce:	e1e4      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d6:	e1e0      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059d8:	2320      	movs	r3, #32
 80059da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059de:	e1dc      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059e0:	2340      	movs	r3, #64	; 0x40
 80059e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e6:	e1d8      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ee:	e1d4      	b.n	8005d9a <UART_SetConfig+0x5a2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a51      	ldr	r2, [pc, #324]	; (8005b3c <UART_SetConfig+0x344>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d130      	bne.n	8005a5c <UART_SetConfig+0x264>
 80059fa:	4b4e      	ldr	r3, [pc, #312]	; (8005b34 <UART_SetConfig+0x33c>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	d826      	bhi.n	8005a54 <UART_SetConfig+0x25c>
 8005a06:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <UART_SetConfig+0x214>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a25 	.word	0x08005a25
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2a:	e1b6      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a32:	e1b2      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a3a:	e1ae      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a42:	e1aa      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a44:	2320      	movs	r3, #32
 8005a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4a:	e1a6      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a4c:	2340      	movs	r3, #64	; 0x40
 8005a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a52:	e1a2      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e19e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <UART_SetConfig+0x348>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d130      	bne.n	8005ac8 <UART_SetConfig+0x2d0>
 8005a66:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <UART_SetConfig+0x33c>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d826      	bhi.n	8005ac0 <UART_SetConfig+0x2c8>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x280>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a91 	.word	0x08005a91
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	08005aa1 	.word	0x08005aa1
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005ab1 	.word	0x08005ab1
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	2300      	movs	r3, #0
 8005a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a96:	e180      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9e:	e17c      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa6:	e178      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aae:	e174      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab6:	e170      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005ab8:	2340      	movs	r3, #64	; 0x40
 8005aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005abe:	e16c      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005ac0:	2380      	movs	r3, #128	; 0x80
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e168      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <UART_SetConfig+0x34c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d142      	bne.n	8005b58 <UART_SetConfig+0x360>
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <UART_SetConfig+0x33c>)
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d838      	bhi.n	8005b50 <UART_SetConfig+0x358>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0x2ec>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	08005b0d 	.word	0x08005b0d
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b1d 	.word	0x08005b1d
 8005af8:	08005b49 	.word	0x08005b49
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b02:	e14a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0a:	e146      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b12:	e142      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b1a:	e13e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b22:	e13a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b24:	cfff69f3 	.word	0xcfff69f3
 8005b28:	58000c00 	.word	0x58000c00
 8005b2c:	11fff4ff 	.word	0x11fff4ff
 8005b30:	40011000 	.word	0x40011000
 8005b34:	58024400 	.word	0x58024400
 8005b38:	40004400 	.word	0x40004400
 8005b3c:	40004800 	.word	0x40004800
 8005b40:	40004c00 	.word	0x40004c00
 8005b44:	40005000 	.word	0x40005000
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e124      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e120      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4acc      	ldr	r2, [pc, #816]	; (8005e90 <UART_SetConfig+0x698>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d176      	bne.n	8005c50 <UART_SetConfig+0x458>
 8005b62:	4bcc      	ldr	r3, [pc, #816]	; (8005e94 <UART_SetConfig+0x69c>)
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b6a:	2b28      	cmp	r3, #40	; 0x28
 8005b6c:	d86c      	bhi.n	8005c48 <UART_SetConfig+0x450>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x37c>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005c19 	.word	0x08005c19
 8005b78:	08005c49 	.word	0x08005c49
 8005b7c:	08005c49 	.word	0x08005c49
 8005b80:	08005c49 	.word	0x08005c49
 8005b84:	08005c49 	.word	0x08005c49
 8005b88:	08005c49 	.word	0x08005c49
 8005b8c:	08005c49 	.word	0x08005c49
 8005b90:	08005c49 	.word	0x08005c49
 8005b94:	08005c21 	.word	0x08005c21
 8005b98:	08005c49 	.word	0x08005c49
 8005b9c:	08005c49 	.word	0x08005c49
 8005ba0:	08005c49 	.word	0x08005c49
 8005ba4:	08005c49 	.word	0x08005c49
 8005ba8:	08005c49 	.word	0x08005c49
 8005bac:	08005c49 	.word	0x08005c49
 8005bb0:	08005c49 	.word	0x08005c49
 8005bb4:	08005c29 	.word	0x08005c29
 8005bb8:	08005c49 	.word	0x08005c49
 8005bbc:	08005c49 	.word	0x08005c49
 8005bc0:	08005c49 	.word	0x08005c49
 8005bc4:	08005c49 	.word	0x08005c49
 8005bc8:	08005c49 	.word	0x08005c49
 8005bcc:	08005c49 	.word	0x08005c49
 8005bd0:	08005c49 	.word	0x08005c49
 8005bd4:	08005c31 	.word	0x08005c31
 8005bd8:	08005c49 	.word	0x08005c49
 8005bdc:	08005c49 	.word	0x08005c49
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005c49 	.word	0x08005c49
 8005bec:	08005c49 	.word	0x08005c49
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005c39 	.word	0x08005c39
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c49 	.word	0x08005c49
 8005c08:	08005c49 	.word	0x08005c49
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c49 	.word	0x08005c49
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e0bc      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e0b8      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e0b4      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e0b0      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e0ac      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e0a8      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e0a4      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a90      	ldr	r2, [pc, #576]	; (8005e98 <UART_SetConfig+0x6a0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d130      	bne.n	8005cbc <UART_SetConfig+0x4c4>
 8005c5a:	4b8e      	ldr	r3, [pc, #568]	; (8005e94 <UART_SetConfig+0x69c>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d826      	bhi.n	8005cb4 <UART_SetConfig+0x4bc>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0x474>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c85 	.word	0x08005c85
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005ca5 	.word	0x08005ca5
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c8a:	e086      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c92:	e082      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e07e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	e07a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005caa:	e076      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb2:	e072      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cba:	e06e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a76      	ldr	r2, [pc, #472]	; (8005e9c <UART_SetConfig+0x6a4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d130      	bne.n	8005d28 <UART_SetConfig+0x530>
 8005cc6:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <UART_SetConfig+0x69c>)
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d826      	bhi.n	8005d20 <UART_SetConfig+0x528>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x4e0>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005cf1 	.word	0x08005cf1
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d01 	.word	0x08005d01
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf6:	e050      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfe:	e04c      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d06:	e048      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e044      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d10:	2320      	movs	r3, #32
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e040      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d18:	2340      	movs	r3, #64	; 0x40
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e03c      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e038      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a5c      	ldr	r2, [pc, #368]	; (8005ea0 <UART_SetConfig+0x6a8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d130      	bne.n	8005d94 <UART_SetConfig+0x59c>
 8005d32:	4b58      	ldr	r3, [pc, #352]	; (8005e94 <UART_SetConfig+0x69c>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d826      	bhi.n	8005d8c <UART_SetConfig+0x594>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x54c>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d5d 	.word	0x08005d5d
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	08005d6d 	.word	0x08005d6d
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d85 	.word	0x08005d85
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e01a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d64:	2304      	movs	r3, #4
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e016      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e012      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e00e      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d82:	e00a      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8a:	e006      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d92:	e002      	b.n	8005d9a <UART_SetConfig+0x5a2>
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a40      	ldr	r2, [pc, #256]	; (8005ea0 <UART_SetConfig+0x6a8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	f040 80ef 	bne.w	8005f84 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	dc46      	bgt.n	8005e3c <UART_SetConfig+0x644>
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	f2c0 8081 	blt.w	8005eb6 <UART_SetConfig+0x6be>
 8005db4:	3b02      	subs	r3, #2
 8005db6:	2b1e      	cmp	r3, #30
 8005db8:	d87d      	bhi.n	8005eb6 <UART_SetConfig+0x6be>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <UART_SetConfig+0x5c8>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005e43 	.word	0x08005e43
 8005dc4:	08005eb7 	.word	0x08005eb7
 8005dc8:	08005e4b 	.word	0x08005e4b
 8005dcc:	08005eb7 	.word	0x08005eb7
 8005dd0:	08005eb7 	.word	0x08005eb7
 8005dd4:	08005eb7 	.word	0x08005eb7
 8005dd8:	08005e5b 	.word	0x08005e5b
 8005ddc:	08005eb7 	.word	0x08005eb7
 8005de0:	08005eb7 	.word	0x08005eb7
 8005de4:	08005eb7 	.word	0x08005eb7
 8005de8:	08005eb7 	.word	0x08005eb7
 8005dec:	08005eb7 	.word	0x08005eb7
 8005df0:	08005eb7 	.word	0x08005eb7
 8005df4:	08005eb7 	.word	0x08005eb7
 8005df8:	08005e6b 	.word	0x08005e6b
 8005dfc:	08005eb7 	.word	0x08005eb7
 8005e00:	08005eb7 	.word	0x08005eb7
 8005e04:	08005eb7 	.word	0x08005eb7
 8005e08:	08005eb7 	.word	0x08005eb7
 8005e0c:	08005eb7 	.word	0x08005eb7
 8005e10:	08005eb7 	.word	0x08005eb7
 8005e14:	08005eb7 	.word	0x08005eb7
 8005e18:	08005eb7 	.word	0x08005eb7
 8005e1c:	08005eb7 	.word	0x08005eb7
 8005e20:	08005eb7 	.word	0x08005eb7
 8005e24:	08005eb7 	.word	0x08005eb7
 8005e28:	08005eb7 	.word	0x08005eb7
 8005e2c:	08005eb7 	.word	0x08005eb7
 8005e30:	08005eb7 	.word	0x08005eb7
 8005e34:	08005eb7 	.word	0x08005eb7
 8005e38:	08005ea9 	.word	0x08005ea9
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	d036      	beq.n	8005eae <UART_SetConfig+0x6b6>
 8005e40:	e039      	b.n	8005eb6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e42:	f7fe ff49 	bl	8004cd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e48:	e03b      	b.n	8005ec2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4a:	f107 0314 	add.w	r3, r7, #20
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe ff58 	bl	8004d04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e58:	e033      	b.n	8005ec2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff f8a4 	bl	8004fac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e68:	e02b      	b.n	8005ec2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <UART_SetConfig+0x69c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <UART_SetConfig+0x69c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	08db      	lsrs	r3, r3, #3
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <UART_SetConfig+0x6ac>)
 8005e82:	fa22 f303 	lsr.w	r3, r2, r3
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e88:	e01b      	b.n	8005ec2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <UART_SetConfig+0x6ac>)
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e8e:	e018      	b.n	8005ec2 <UART_SetConfig+0x6ca>
 8005e90:	40011400 	.word	0x40011400
 8005e94:	58024400 	.word	0x58024400
 8005e98:	40007800 	.word	0x40007800
 8005e9c:	40007c00 	.word	0x40007c00
 8005ea0:	58000c00 	.word	0x58000c00
 8005ea4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ea8:	4bc4      	ldr	r3, [pc, #784]	; (80061bc <UART_SetConfig+0x9c4>)
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eac:	e009      	b.n	8005ec2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eb4:	e005      	b.n	8005ec2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 81da 	beq.w	800627e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	4abc      	ldr	r2, [pc, #752]	; (80061c0 <UART_SetConfig+0x9c8>)
 8005ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005edc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	6a3a      	ldr	r2, [r7, #32]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d305      	bcc.n	8005efa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d903      	bls.n	8005f02 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f00:	e1bd      	b.n	800627e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	4618      	mov	r0, r3
 8005f06:	f04f 0100 	mov.w	r1, #0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	4aac      	ldr	r2, [pc, #688]	; (80061c0 <UART_SetConfig+0x9c8>)
 8005f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	f7fa fa31 	bl	8000380 <__aeabi_uldivmod>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	020b      	lsls	r3, r1, #8
 8005f30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f34:	0202      	lsls	r2, r0, #8
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	6849      	ldr	r1, [r1, #4]
 8005f3a:	0849      	lsrs	r1, r1, #1
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	1814      	adds	r4, r2, r0
 8005f44:	eb43 0501 	adc.w	r5, r3, r1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	4620      	mov	r0, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	f7fa fa13 	bl	8000380 <__aeabi_uldivmod>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4613      	mov	r3, r2
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f68:	d308      	bcc.n	8005f7c <UART_SetConfig+0x784>
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f70:	d204      	bcs.n	8005f7c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e180      	b.n	800627e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f82:	e17c      	b.n	800627e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f8c:	f040 80bf 	bne.w	800610e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	dc49      	bgt.n	800602c <UART_SetConfig+0x834>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db7c      	blt.n	8006096 <UART_SetConfig+0x89e>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d87a      	bhi.n	8006096 <UART_SetConfig+0x89e>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x7b0>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08006033 	.word	0x08006033
 8005fac:	0800603b 	.word	0x0800603b
 8005fb0:	08006097 	.word	0x08006097
 8005fb4:	08006097 	.word	0x08006097
 8005fb8:	08006043 	.word	0x08006043
 8005fbc:	08006097 	.word	0x08006097
 8005fc0:	08006097 	.word	0x08006097
 8005fc4:	08006097 	.word	0x08006097
 8005fc8:	08006053 	.word	0x08006053
 8005fcc:	08006097 	.word	0x08006097
 8005fd0:	08006097 	.word	0x08006097
 8005fd4:	08006097 	.word	0x08006097
 8005fd8:	08006097 	.word	0x08006097
 8005fdc:	08006097 	.word	0x08006097
 8005fe0:	08006097 	.word	0x08006097
 8005fe4:	08006097 	.word	0x08006097
 8005fe8:	08006063 	.word	0x08006063
 8005fec:	08006097 	.word	0x08006097
 8005ff0:	08006097 	.word	0x08006097
 8005ff4:	08006097 	.word	0x08006097
 8005ff8:	08006097 	.word	0x08006097
 8005ffc:	08006097 	.word	0x08006097
 8006000:	08006097 	.word	0x08006097
 8006004:	08006097 	.word	0x08006097
 8006008:	08006097 	.word	0x08006097
 800600c:	08006097 	.word	0x08006097
 8006010:	08006097 	.word	0x08006097
 8006014:	08006097 	.word	0x08006097
 8006018:	08006097 	.word	0x08006097
 800601c:	08006097 	.word	0x08006097
 8006020:	08006097 	.word	0x08006097
 8006024:	08006097 	.word	0x08006097
 8006028:	08006089 	.word	0x08006089
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d02e      	beq.n	800608e <UART_SetConfig+0x896>
 8006030:	e031      	b.n	8006096 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006032:	f7fd fee5 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8006036:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006038:	e033      	b.n	80060a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800603a:	f7fd fef7 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 800603e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006040:	e02f      	b.n	80060a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fe5c 	bl	8004d04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006050:	e027      	b.n	80060a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006052:	f107 0308 	add.w	r3, r7, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe ffa8 	bl	8004fac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006060:	e01f      	b.n	80060a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006062:	4b58      	ldr	r3, [pc, #352]	; (80061c4 <UART_SetConfig+0x9cc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800606e:	4b55      	ldr	r3, [pc, #340]	; (80061c4 <UART_SetConfig+0x9cc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	08db      	lsrs	r3, r3, #3
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	4a53      	ldr	r2, [pc, #332]	; (80061c8 <UART_SetConfig+0x9d0>)
 800607a:	fa22 f303 	lsr.w	r3, r2, r3
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006080:	e00f      	b.n	80060a2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006082:	4b51      	ldr	r3, [pc, #324]	; (80061c8 <UART_SetConfig+0x9d0>)
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006086:	e00c      	b.n	80060a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006088:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <UART_SetConfig+0x9c4>)
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800608c:	e009      	b.n	80060a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006094:	e005      	b.n	80060a2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80ea 	beq.w	800627e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	4a44      	ldr	r2, [pc, #272]	; (80061c0 <UART_SetConfig+0x9c8>)
 80060b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b4:	461a      	mov	r2, r3
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060bc:	005a      	lsls	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	441a      	add	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	2b0f      	cmp	r3, #15
 80060d6:	d916      	bls.n	8006106 <UART_SetConfig+0x90e>
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060de:	d212      	bcs.n	8006106 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f023 030f 	bic.w	r3, r3, #15
 80060e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060f8:	4313      	orrs	r3, r2
 80060fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006102:	60da      	str	r2, [r3, #12]
 8006104:	e0bb      	b.n	800627e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800610c:	e0b7      	b.n	800627e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800610e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006112:	2b20      	cmp	r3, #32
 8006114:	dc4a      	bgt.n	80061ac <UART_SetConfig+0x9b4>
 8006116:	2b00      	cmp	r3, #0
 8006118:	f2c0 8086 	blt.w	8006228 <UART_SetConfig+0xa30>
 800611c:	2b20      	cmp	r3, #32
 800611e:	f200 8083 	bhi.w	8006228 <UART_SetConfig+0xa30>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <UART_SetConfig+0x930>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	080061b3 	.word	0x080061b3
 800612c:	080061cd 	.word	0x080061cd
 8006130:	08006229 	.word	0x08006229
 8006134:	08006229 	.word	0x08006229
 8006138:	080061d5 	.word	0x080061d5
 800613c:	08006229 	.word	0x08006229
 8006140:	08006229 	.word	0x08006229
 8006144:	08006229 	.word	0x08006229
 8006148:	080061e5 	.word	0x080061e5
 800614c:	08006229 	.word	0x08006229
 8006150:	08006229 	.word	0x08006229
 8006154:	08006229 	.word	0x08006229
 8006158:	08006229 	.word	0x08006229
 800615c:	08006229 	.word	0x08006229
 8006160:	08006229 	.word	0x08006229
 8006164:	08006229 	.word	0x08006229
 8006168:	080061f5 	.word	0x080061f5
 800616c:	08006229 	.word	0x08006229
 8006170:	08006229 	.word	0x08006229
 8006174:	08006229 	.word	0x08006229
 8006178:	08006229 	.word	0x08006229
 800617c:	08006229 	.word	0x08006229
 8006180:	08006229 	.word	0x08006229
 8006184:	08006229 	.word	0x08006229
 8006188:	08006229 	.word	0x08006229
 800618c:	08006229 	.word	0x08006229
 8006190:	08006229 	.word	0x08006229
 8006194:	08006229 	.word	0x08006229
 8006198:	08006229 	.word	0x08006229
 800619c:	08006229 	.word	0x08006229
 80061a0:	08006229 	.word	0x08006229
 80061a4:	08006229 	.word	0x08006229
 80061a8:	0800621b 	.word	0x0800621b
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d037      	beq.n	8006220 <UART_SetConfig+0xa28>
 80061b0:	e03a      	b.n	8006228 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b2:	f7fd fe25 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 80061b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061b8:	e03c      	b.n	8006234 <UART_SetConfig+0xa3c>
 80061ba:	bf00      	nop
 80061bc:	003d0900 	.word	0x003d0900
 80061c0:	080090c0 	.word	0x080090c0
 80061c4:	58024400 	.word	0x58024400
 80061c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061cc:	f7fd fe2e 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 80061d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061d2:	e02f      	b.n	8006234 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d4:	f107 0314 	add.w	r3, r7, #20
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe fd93 	bl	8004d04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e2:	e027      	b.n	8006234 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fedf 	bl	8004fac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061f2:	e01f      	b.n	8006234 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f4:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <UART_SetConfig+0xab0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006200:	4b29      	ldr	r3, [pc, #164]	; (80062a8 <UART_SetConfig+0xab0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	4a28      	ldr	r2, [pc, #160]	; (80062ac <UART_SetConfig+0xab4>)
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006212:	e00f      	b.n	8006234 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006214:	4b25      	ldr	r3, [pc, #148]	; (80062ac <UART_SetConfig+0xab4>)
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006218:	e00c      	b.n	8006234 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800621a:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <UART_SetConfig+0xab8>)
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800621e:	e009      	b.n	8006234 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006226:	e005      	b.n	8006234 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006232:	bf00      	nop
    }

    if (pclk != 0U)
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d021      	beq.n	800627e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <UART_SetConfig+0xabc>)
 8006240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006244:	461a      	mov	r2, r3
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	fbb3 f2f2 	udiv	r2, r3, r2
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	441a      	add	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	b29b      	uxth	r3, r3
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d908      	bls.n	8006278 <UART_SetConfig+0xa80>
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d204      	bcs.n	8006278 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	e002      	b.n	800627e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800629a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3738      	adds	r7, #56	; 0x38
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bdb0      	pop	{r4, r5, r7, pc}
 80062a6:	bf00      	nop
 80062a8:	58024400 	.word	0x58024400
 80062ac:	03d09000 	.word	0x03d09000
 80062b0:	003d0900 	.word	0x003d0900
 80062b4:	080090c0 	.word	0x080090c0

080062b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b6:	d10a      	bne.n	80063ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800640c:	f7fb f864 	bl	80014d8 <HAL_GetTick>
 8006410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d10e      	bne.n	800643e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f82f 	bl	8006492 <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e025      	b.n	800648a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d10e      	bne.n	800646a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f819 	bl	8006492 <UART_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e00f      	b.n	800648a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	4613      	mov	r3, r2
 80064a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a2:	e062      	b.n	800656a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d05e      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ac:	f7fb f814 	bl	80014d8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d302      	bcc.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11d      	bne.n	80064fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e045      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d02e      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651a:	d126      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006524:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006534:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e00f      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	bf0c      	ite	eq
 800657a:	2301      	moveq	r3, #1
 800657c:	2300      	movne	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	429a      	cmp	r2, r3
 8006586:	d08d      	beq.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e027      	b.n	80065f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	; 0x24
 80065b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006618:	2302      	movs	r3, #2
 800661a:	e02d      	b.n	8006678 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2224      	movs	r2, #36	; 0x24
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f84f 	bl	80066fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006694:	2302      	movs	r3, #2
 8006696:	e02d      	b.n	80066f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2224      	movs	r2, #36	; 0x24
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f811 	bl	80066fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006708:	2b00      	cmp	r3, #0
 800670a:	d108      	bne.n	800671e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800671c:	e031      	b.n	8006782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800671e:	2310      	movs	r3, #16
 8006720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006722:	2310      	movs	r3, #16
 8006724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	0e5b      	lsrs	r3, r3, #25
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0f5b      	lsrs	r3, r3, #29
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	7b3a      	ldrb	r2, [r7, #12]
 800674a:	4911      	ldr	r1, [pc, #68]	; (8006790 <UARTEx_SetNbDataToProcess+0x94>)
 800674c:	5c8a      	ldrb	r2, [r1, r2]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006752:	7b3a      	ldrb	r2, [r7, #12]
 8006754:	490f      	ldr	r1, [pc, #60]	; (8006794 <UARTEx_SetNbDataToProcess+0x98>)
 8006756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006758:	fb93 f3f2 	sdiv	r3, r3, r2
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	7b7a      	ldrb	r2, [r7, #13]
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <UARTEx_SetNbDataToProcess+0x94>)
 800676a:	5c8a      	ldrb	r2, [r1, r2]
 800676c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006770:	7b7a      	ldrb	r2, [r7, #13]
 8006772:	4908      	ldr	r1, [pc, #32]	; (8006794 <UARTEx_SetNbDataToProcess+0x98>)
 8006774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006776:	fb93 f3f2 	sdiv	r3, r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	080090d8 	.word	0x080090d8
 8006794:	080090e0 	.word	0x080090e0

08006798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006798:	b084      	sub	sp, #16
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	f107 001c 	add.w	r0, r7, #28
 80067a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d120      	bne.n	80067f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	4b2a      	ldr	r3, [pc, #168]	; (800686c <USB_CoreInit+0xd4>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa60 	bl	8006cac <USB_CoreReset>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	e01a      	b.n	8006828 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa54 	bl	8006cac <USB_CoreReset>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	639a      	str	r2, [r3, #56]	; 0x38
 800681a:	e005      	b.n	8006828 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	2b01      	cmp	r3, #1
 800682c:	d116      	bne.n	800685c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006832:	b29a      	uxth	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <USB_CoreInit+0xd8>)
 800683e:	4313      	orrs	r3, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f043 0206 	orr.w	r2, r3, #6
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006868:	b004      	add	sp, #16
 800686a:	4770      	bx	lr
 800686c:	ffbdffbf 	.word	0xffbdffbf
 8006870:	03ee0000 	.word	0x03ee0000

08006874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f023 0201 	bic.w	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d106      	bne.n	80068c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60da      	str	r2, [r3, #12]
 80068c0:	e00b      	b.n	80068da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	60da      	str	r2, [r3, #12]
 80068d4:	e001      	b.n	80068da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e003      	b.n	80068e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80068da:	2032      	movs	r0, #50	; 0x32
 80068dc:	f7fa fe08 	bl	80014f0 <HAL_Delay>

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ec:	b084      	sub	sp, #16
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e009      	b.n	8006920 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	3340      	adds	r3, #64	; 0x40
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	2200      	movs	r2, #0
 8006918:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3301      	adds	r3, #1
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b0e      	cmp	r3, #14
 8006924:	d9f2      	bls.n	800690c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11c      	bne.n	8006966 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693a:	f043 0302 	orr.w	r3, r3, #2
 800693e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e005      	b.n	8006972 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006978:	461a      	mov	r2, r3
 800697a:	2300      	movs	r3, #0
 800697c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006984:	4619      	mov	r1, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	461a      	mov	r2, r3
 800698e:	680b      	ldr	r3, [r1, #0]
 8006990:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	2b01      	cmp	r3, #1
 8006996:	d10c      	bne.n	80069b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800699e:	2100      	movs	r1, #0
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f949 	bl	8006c38 <USB_SetDevSpeed>
 80069a6:	e008      	b.n	80069ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069a8:	2101      	movs	r1, #1
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f944 	bl	8006c38 <USB_SetDevSpeed>
 80069b0:	e003      	b.n	80069ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069b2:	2103      	movs	r1, #3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f93f 	bl	8006c38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ba:	2110      	movs	r1, #16
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f8f3 	bl	8006ba8 <USB_FlushTxFifo>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f911 	bl	8006bf4 <USB_FlushRxFifo>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	461a      	mov	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	e043      	b.n	8006a8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1c:	d118      	bne.n	8006a50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e013      	b.n	8006a62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e008      	b.n	8006a62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	461a      	mov	r2, r3
 8006a82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3b7      	bcc.n	8006a06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	e043      	b.n	8006b24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab2:	d118      	bne.n	8006ae6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e013      	b.n	8006af8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e008      	b.n	8006af8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	461a      	mov	r2, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	461a      	mov	r2, r3
 8006b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	3301      	adds	r3, #1
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d3b7      	bcc.n	8006a9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d105      	bne.n	8006b60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f043 0210 	orr.w	r2, r3, #16
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <USB_DevInit+0x2b4>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f043 0208 	orr.w	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d105      	bne.n	8006b90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <USB_DevInit+0x2b8>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9c:	b004      	add	sp, #16
 8006b9e:	4770      	bx	lr
 8006ba0:	803c3800 	.word	0x803c3800
 8006ba4:	40000004 	.word	0x40000004

08006ba8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	019b      	lsls	r3, r3, #6
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <USB_FlushTxFifo+0x48>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d901      	bls.n	8006bd4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e006      	b.n	8006be2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d0f0      	beq.n	8006bc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	00030d40 	.word	0x00030d40

08006bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2210      	movs	r2, #16
 8006c04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <USB_FlushRxFifo+0x40>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e006      	b.n	8006c26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d0f0      	beq.n	8006c06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	00030d40 	.word	0x00030d40

08006c38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c84:	f023 0303 	bic.w	r3, r3, #3
 8006c88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <USB_CoreReset+0x64>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d901      	bls.n	8006cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e01b      	b.n	8006d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	daf2      	bge.n	8006cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <USB_CoreReset+0x64>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e006      	b.n	8006d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d0f0      	beq.n	8006ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	00030d40 	.word	0x00030d40

08006d14 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af04      	add	r7, sp, #16
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d32:	9302      	str	r3, [sp, #8]
 8006d34:	2301      	movs	r3, #1
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	1dfb      	adds	r3, r7, #7
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2178      	movs	r1, #120	; 0x78
 8006d42:	4803      	ldr	r0, [pc, #12]	; (8006d50 <ssd1306_WriteCommand+0x2c>)
 8006d44:	f7fb fbac 	bl	80024a0 <HAL_I2C_Mem_Write>
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	24000440 	.word	0x24000440

08006d54 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af04      	add	r7, sp, #16
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	2301      	movs	r3, #1
 8006d70:	2240      	movs	r2, #64	; 0x40
 8006d72:	2178      	movs	r1, #120	; 0x78
 8006d74:	4803      	ldr	r0, [pc, #12]	; (8006d84 <ssd1306_WriteData+0x30>)
 8006d76:	f7fb fb93 	bl	80024a0 <HAL_I2C_Mem_Write>
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	24000440 	.word	0x24000440

08006d88 <ssd1306_Init>:
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006d8c:	f7ff ffc2 	bl	8006d14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006d90:	2064      	movs	r0, #100	; 0x64
 8006d92:	f7fa fbad 	bl	80014f0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006d96:	2000      	movs	r0, #0
 8006d98:	f000 fc8e 	bl	80076b8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006d9c:	2020      	movs	r0, #32
 8006d9e:	f7ff ffc1 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006da2:	2000      	movs	r0, #0
 8006da4:	f7ff ffbe 	bl	8006d24 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006da8:	20b0      	movs	r0, #176	; 0xb0
 8006daa:	f7ff ffbb 	bl	8006d24 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006dae:	20c8      	movs	r0, #200	; 0xc8
 8006db0:	f7ff ffb8 	bl	8006d24 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006db4:	2000      	movs	r0, #0
 8006db6:	f7ff ffb5 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006dba:	2010      	movs	r0, #16
 8006dbc:	f7ff ffb2 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006dc0:	2040      	movs	r0, #64	; 0x40
 8006dc2:	f7ff ffaf 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006dc6:	20ff      	movs	r0, #255	; 0xff
 8006dc8:	f000 fc62 	bl	8007690 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006dcc:	20a1      	movs	r0, #161	; 0xa1
 8006dce:	f7ff ffa9 	bl	8006d24 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006dd2:	20a6      	movs	r0, #166	; 0xa6
 8006dd4:	f7ff ffa6 	bl	8006d24 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006dd8:	20a8      	movs	r0, #168	; 0xa8
 8006dda:	f7ff ffa3 	bl	8006d24 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8006dde:	201f      	movs	r0, #31
 8006de0:	f7ff ffa0 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006de4:	20a4      	movs	r0, #164	; 0xa4
 8006de6:	f7ff ff9d 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006dea:	20d3      	movs	r0, #211	; 0xd3
 8006dec:	f7ff ff9a 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7ff ff97 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006df6:	20d5      	movs	r0, #213	; 0xd5
 8006df8:	f7ff ff94 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006dfc:	20f0      	movs	r0, #240	; 0xf0
 8006dfe:	f7ff ff91 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006e02:	20d9      	movs	r0, #217	; 0xd9
 8006e04:	f7ff ff8e 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006e08:	2022      	movs	r0, #34	; 0x22
 8006e0a:	f7ff ff8b 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006e0e:	20da      	movs	r0, #218	; 0xda
 8006e10:	f7ff ff88 	bl	8006d24 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8006e14:	2002      	movs	r0, #2
 8006e16:	f7ff ff85 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006e1a:	20db      	movs	r0, #219	; 0xdb
 8006e1c:	f7ff ff82 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006e20:	2020      	movs	r0, #32
 8006e22:	f7ff ff7f 	bl	8006d24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006e26:	208d      	movs	r0, #141	; 0x8d
 8006e28:	f7ff ff7c 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006e2c:	2014      	movs	r0, #20
 8006e2e:	f7ff ff79 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006e32:	2001      	movs	r0, #1
 8006e34:	f000 fc40 	bl	80076b8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f000 f80f 	bl	8006e5c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006e3e:	f000 f831 	bl	8006ea4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <ssd1306_Init+0xd0>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006e48:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <ssd1306_Init+0xd0>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006e4e:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <ssd1306_Init+0xd0>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	715a      	strb	r2, [r3, #5]
}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	24000374 	.word	0x24000374

08006e5c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	e00d      	b.n	8006e88 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <ssd1306_Fill+0x1a>
 8006e72:	2100      	movs	r1, #0
 8006e74:	e000      	b.n	8006e78 <ssd1306_Fill+0x1c>
 8006e76:	21ff      	movs	r1, #255	; 0xff
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <ssd1306_Fill+0x44>)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	460a      	mov	r2, r1
 8006e80:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d3ed      	bcc.n	8006e6c <ssd1306_Fill+0x10>
    }
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	24000174 	.word	0x24000174

08006ea4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006eaa:	2300      	movs	r3, #0
 8006eac:	71fb      	strb	r3, [r7, #7]
 8006eae:	e016      	b.n	8006ede <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	3b50      	subs	r3, #80	; 0x50
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff ff34 	bl	8006d24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f7ff ff31 	bl	8006d24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8006ec2:	2010      	movs	r0, #16
 8006ec4:	f7ff ff2e 	bl	8006d24 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	01db      	lsls	r3, r3, #7
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <ssd1306_UpdateScreen+0x4c>)
 8006ece:	4413      	add	r3, r2
 8006ed0:	2180      	movs	r1, #128	; 0x80
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff ff3e 	bl	8006d54 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	3301      	adds	r3, #1
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d9e5      	bls.n	8006eb0 <ssd1306_UpdateScreen+0xc>
    }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	24000174 	.word	0x24000174

08006ef4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
 8006efe:	460b      	mov	r3, r1
 8006f00:	71bb      	strb	r3, [r7, #6]
 8006f02:	4613      	mov	r3, r2
 8006f04:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	db48      	blt.n	8006fa0 <ssd1306_DrawPixel+0xac>
 8006f0e:	79bb      	ldrb	r3, [r7, #6]
 8006f10:	2b1f      	cmp	r3, #31
 8006f12:	d845      	bhi.n	8006fa0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8006f14:	4b25      	ldr	r3, [pc, #148]	; (8006fac <ssd1306_DrawPixel+0xb8>)
 8006f16:	791b      	ldrb	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8006f1c:	797b      	ldrb	r3, [r7, #5]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8006f2a:	797b      	ldrb	r3, [r7, #5]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d11a      	bne.n	8006f66 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006f30:	79fa      	ldrb	r2, [r7, #7]
 8006f32:	79bb      	ldrb	r3, [r7, #6]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	b2d8      	uxtb	r0, r3
 8006f38:	4603      	mov	r3, r0
 8006f3a:	01db      	lsls	r3, r3, #7
 8006f3c:	4413      	add	r3, r2
 8006f3e:	4a1c      	ldr	r2, [pc, #112]	; (8006fb0 <ssd1306_DrawPixel+0xbc>)
 8006f40:	5cd3      	ldrb	r3, [r2, r3]
 8006f42:	b25a      	sxtb	r2, r3
 8006f44:	79bb      	ldrb	r3, [r7, #6]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f50:	b25b      	sxtb	r3, r3
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b259      	sxtb	r1, r3
 8006f56:	79fa      	ldrb	r2, [r7, #7]
 8006f58:	4603      	mov	r3, r0
 8006f5a:	01db      	lsls	r3, r3, #7
 8006f5c:	4413      	add	r3, r2
 8006f5e:	b2c9      	uxtb	r1, r1
 8006f60:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <ssd1306_DrawPixel+0xbc>)
 8006f62:	54d1      	strb	r1, [r2, r3]
 8006f64:	e01d      	b.n	8006fa2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006f66:	79fa      	ldrb	r2, [r7, #7]
 8006f68:	79bb      	ldrb	r3, [r7, #6]
 8006f6a:	08db      	lsrs	r3, r3, #3
 8006f6c:	b2d8      	uxtb	r0, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	01db      	lsls	r3, r3, #7
 8006f72:	4413      	add	r3, r2
 8006f74:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <ssd1306_DrawPixel+0xbc>)
 8006f76:	5cd3      	ldrb	r3, [r2, r3]
 8006f78:	b25a      	sxtb	r2, r3
 8006f7a:	79bb      	ldrb	r3, [r7, #6]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	2101      	movs	r1, #1
 8006f82:	fa01 f303 	lsl.w	r3, r1, r3
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	b259      	sxtb	r1, r3
 8006f90:	79fa      	ldrb	r2, [r7, #7]
 8006f92:	4603      	mov	r3, r0
 8006f94:	01db      	lsls	r3, r3, #7
 8006f96:	4413      	add	r3, r2
 8006f98:	b2c9      	uxtb	r1, r1
 8006f9a:	4a05      	ldr	r2, [pc, #20]	; (8006fb0 <ssd1306_DrawPixel+0xbc>)
 8006f9c:	54d1      	strb	r1, [r2, r3]
 8006f9e:	e000      	b.n	8006fa2 <ssd1306_DrawPixel+0xae>
        return;
 8006fa0:	bf00      	nop
    }
}
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	24000374 	.word	0x24000374
 8006fb0:	24000174 	.word	0x24000174

08006fb4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b089      	sub	sp, #36	; 0x24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	1d38      	adds	r0, r7, #4
 8006fbe:	e880 0006 	stmia.w	r0, {r1, r2}
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b1f      	cmp	r3, #31
 8006fd0:	d902      	bls.n	8006fd8 <ssd1306_WriteChar+0x24>
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	2b7e      	cmp	r3, #126	; 0x7e
 8006fd6:	d901      	bls.n	8006fdc <ssd1306_WriteChar+0x28>
        return 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e06d      	b.n	80070b8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006fdc:	4b38      	ldr	r3, [pc, #224]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	793b      	ldrb	r3, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	dc06      	bgt.n	8006ff8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006fea:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	797b      	ldrb	r3, [r7, #5]
 8006ff2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	dd01      	ble.n	8006ffc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e05d      	b.n	80070b8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e04c      	b.n	800709c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	3b20      	subs	r3, #32
 8007008:	7979      	ldrb	r1, [r7, #5]
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4619      	mov	r1, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	440b      	add	r3, r1
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	e034      	b.n	800708c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d012      	beq.n	8007058 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007032:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4413      	add	r3, r2
 800703e:	b2d8      	uxtb	r0, r3
 8007040:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	4413      	add	r3, r2
 800704c:	b2db      	uxtb	r3, r3
 800704e:	7bba      	ldrb	r2, [r7, #14]
 8007050:	4619      	mov	r1, r3
 8007052:	f7ff ff4f 	bl	8006ef4 <ssd1306_DrawPixel>
 8007056:	e016      	b.n	8007086 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	4413      	add	r3, r2
 8007064:	b2d8      	uxtb	r0, r3
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4413      	add	r3, r2
 8007072:	b2d9      	uxtb	r1, r3
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	bf0c      	ite	eq
 800707a:	2301      	moveq	r3, #1
 800707c:	2300      	movne	r3, #0
 800707e:	b2db      	uxtb	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	f7ff ff37 	bl	8006ef4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	3301      	adds	r3, #1
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	793b      	ldrb	r3, [r7, #4]
 800708e:	461a      	mov	r2, r3
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	4293      	cmp	r3, r2
 8007094:	d3c5      	bcc.n	8007022 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3301      	adds	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	797b      	ldrb	r3, [r7, #5]
 800709e:	461a      	mov	r2, r3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d3ad      	bcc.n	8007002 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80070a6:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 80070a8:	881a      	ldrh	r2, [r3, #0]
 80070aa:	793b      	ldrb	r3, [r7, #4]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	4413      	add	r3, r2
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <ssd1306_WriteChar+0x10c>)
 80070b4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3724      	adds	r7, #36	; 0x24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd90      	pop	{r4, r7, pc}
 80070c0:	24000374 	.word	0x24000374

080070c4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	1d38      	adds	r0, r7, #4
 80070ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80070d2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80070d4:	e012      	b.n	80070fc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	7818      	ldrb	r0, [r3, #0]
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	1d3a      	adds	r2, r7, #4
 80070de:	ca06      	ldmia	r2, {r1, r2}
 80070e0:	f7ff ff68 	bl	8006fb4 <ssd1306_WriteChar>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d002      	beq.n	80070f6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	e008      	b.n	8007108 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e8      	bne.n	80070d6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	781b      	ldrb	r3, [r3, #0]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	460a      	mov	r2, r1
 800711a:	71fb      	strb	r3, [r7, #7]
 800711c:	4613      	mov	r3, r2
 800711e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	b29a      	uxth	r2, r3
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <ssd1306_SetCursor+0x2c>)
 8007126:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007128:	79bb      	ldrb	r3, [r7, #6]
 800712a:	b29a      	uxth	r2, r3
 800712c:	4b03      	ldr	r3, [pc, #12]	; (800713c <ssd1306_SetCursor+0x2c>)
 800712e:	805a      	strh	r2, [r3, #2]
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	24000374 	.word	0x24000374

08007140 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b089      	sub	sp, #36	; 0x24
 8007144:	af00      	add	r7, sp, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	461a      	mov	r2, r3
 800714e:	4623      	mov	r3, r4
 8007150:	71fb      	strb	r3, [r7, #7]
 8007152:	4603      	mov	r3, r0
 8007154:	71bb      	strb	r3, [r7, #6]
 8007156:	460b      	mov	r3, r1
 8007158:	717b      	strb	r3, [r7, #5]
 800715a:	4613      	mov	r3, r2
 800715c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800715e:	797a      	ldrb	r2, [r7, #5]
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfb8      	it	lt
 8007168:	425b      	neglt	r3, r3
 800716a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800716c:	793a      	ldrb	r2, [r7, #4]
 800716e:	79bb      	ldrb	r3, [r7, #6]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfb8      	it	lt
 8007176:	425b      	neglt	r3, r3
 8007178:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800717a:	79fa      	ldrb	r2, [r7, #7]
 800717c:	797b      	ldrb	r3, [r7, #5]
 800717e:	429a      	cmp	r2, r3
 8007180:	d201      	bcs.n	8007186 <ssd1306_Line+0x46>
 8007182:	2301      	movs	r3, #1
 8007184:	e001      	b.n	800718a <ssd1306_Line+0x4a>
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800718c:	79ba      	ldrb	r2, [r7, #6]
 800718e:	793b      	ldrb	r3, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d201      	bcs.n	8007198 <ssd1306_Line+0x58>
 8007194:	2301      	movs	r3, #1
 8007196:	e001      	b.n	800719c <ssd1306_Line+0x5c>
 8007198:	f04f 33ff 	mov.w	r3, #4294967295
 800719c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80071a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80071aa:	7939      	ldrb	r1, [r7, #4]
 80071ac:	797b      	ldrb	r3, [r7, #5]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff fea0 	bl	8006ef4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80071b4:	e024      	b.n	8007200 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80071b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80071ba:	79b9      	ldrb	r1, [r7, #6]
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fe98 	bl	8006ef4 <ssd1306_DrawPixel>
    error2 = error * 2;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	425b      	negs	r3, r3
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	dd08      	ble.n	80071e6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	4413      	add	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	da08      	bge.n	8007200 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	4413      	add	r3, r2
 80071f4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	79bb      	ldrb	r3, [r7, #6]
 80071fc:	4413      	add	r3, r2
 80071fe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	797b      	ldrb	r3, [r7, #5]
 8007204:	429a      	cmp	r2, r3
 8007206:	d1d6      	bne.n	80071b6 <ssd1306_Line+0x76>
 8007208:	79ba      	ldrb	r2, [r7, #6]
 800720a:	793b      	ldrb	r3, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d1d2      	bne.n	80071b6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8007210:	bf00      	nop
}
 8007212:	3724      	adds	r7, #36	; 0x24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd90      	pop	{r4, r7, pc}

08007218 <ssd1306_Polyline>:
//Draw polyline
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b087      	sub	sp, #28
 800721c:	af02      	add	r7, sp, #8
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	807b      	strh	r3, [r7, #2]
 8007224:	4613      	mov	r3, r2
 8007226:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02a      	beq.n	8007284 <ssd1306_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 800722e:	2301      	movs	r3, #1
 8007230:	81fb      	strh	r3, [r7, #14]
 8007232:	e022      	b.n	800727a <ssd1306_Polyline+0x62>
      ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8007234:	89fa      	ldrh	r2, [r7, #14]
 8007236:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800723a:	4413      	add	r3, r2
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	7818      	ldrb	r0, [r3, #0]
 8007244:	89fa      	ldrh	r2, [r7, #14]
 8007246:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800724a:	4413      	add	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	7859      	ldrb	r1, [r3, #1]
 8007254:	89fb      	ldrh	r3, [r7, #14]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	781c      	ldrb	r4, [r3, #0]
 800725e:	89fb      	ldrh	r3, [r7, #14]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	785a      	ldrb	r2, [r3, #1]
 8007268:	787b      	ldrb	r3, [r7, #1]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	4622      	mov	r2, r4
 8007270:	f7ff ff66 	bl	8007140 <ssd1306_Line>
    for(i = 1; i < par_size; i++){
 8007274:	89fb      	ldrh	r3, [r7, #14]
 8007276:	3301      	adds	r3, #1
 8007278:	81fb      	strh	r3, [r7, #14]
 800727a:	89fa      	ldrh	r2, [r7, #14]
 800727c:	887b      	ldrh	r3, [r7, #2]
 800727e:	429a      	cmp	r2, r3
 8007280:	d3d8      	bcc.n	8007234 <ssd1306_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 8007282:	bf00      	nop
 8007284:	bf00      	nop
}
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bd90      	pop	{r4, r7, pc}
 800728c:	0000      	movs	r0, r0
	...

08007290 <ssd1306_DegToRad>:
/*Convert Degrees to Radians*/
static float ssd1306_DegToRad(float par_deg) {
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 800729a:	edd7 7a01 	vldr	s15, [r7, #4]
 800729e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80072a2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80072c8 <ssd1306_DegToRad+0x38>
 80072a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80072aa:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80072d0 <ssd1306_DegToRad+0x40>
 80072ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80072b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80072b6:	eeb0 0a67 	vmov.f32	s0, s15
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	f3af 8000 	nop.w
 80072c8:	51eb851f 	.word	0x51eb851f
 80072cc:	40091eb8 	.word	0x40091eb8
 80072d0:	00000000 	.word	0x00000000
 80072d4:	40668000 	.word	0x40668000

080072d8 <ssd1306_NormalizeTo0_360>:
/*Normalize degree to [0;360]*/
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80072e8:	d802      	bhi.n	80072f0 <ssd1306_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	81fb      	strh	r3, [r7, #14]
 80072ee:	e013      	b.n	8007318 <ssd1306_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	08da      	lsrs	r2, r3, #3
 80072f4:	490c      	ldr	r1, [pc, #48]	; (8007328 <ssd1306_NormalizeTo0_360+0x50>)
 80072f6:	fba1 1202 	umull	r1, r2, r1, r2
 80072fa:	0892      	lsrs	r2, r2, #2
 80072fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8007300:	fb01 f202 	mul.w	r2, r1, r2
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <ssd1306_NormalizeTo0_360+0x3a>
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	e001      	b.n	8007316 <ssd1306_NormalizeTo0_360+0x3e>
 8007312:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8007316:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 8007318:	89fb      	ldrh	r3, [r7, #14]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	16c16c17 	.word	0x16c16c17

0800732c <ssd1306_DrawArc>:
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b08d      	sub	sp, #52	; 0x34
 8007330:	af02      	add	r7, sp, #8
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4623      	mov	r3, r4
 800733c:	73fb      	strb	r3, [r7, #15]
 800733e:	4603      	mov	r3, r0
 8007340:	73bb      	strb	r3, [r7, #14]
 8007342:	460b      	mov	r3, r1
 8007344:	737b      	strb	r3, [r7, #13]
 8007346:	4613      	mov	r3, r2
 8007348:	817b      	strh	r3, [r7, #10]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t loc_sweep = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8007352:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff ffbf 	bl	80072d8 <ssd1306_NormalizeTo0_360>
 800735a:	4603      	mov	r3, r0
 800735c:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800735e:	897b      	ldrh	r3, [r7, #10]
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff ffb9 	bl	80072d8 <ssd1306_NormalizeTo0_360>
 8007366:	4603      	mov	r3, r0
 8007368:	4a68      	ldr	r2, [pc, #416]	; (800750c <ssd1306_DrawArc+0x1e0>)
 800736a:	fb82 1203 	smull	r1, r2, r2, r3
 800736e:	1092      	asrs	r2, r2, #2
 8007370:	17db      	asrs	r3, r3, #31
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	08db      	lsrs	r3, r3, #3
 8007382:	4a63      	ldr	r2, [pc, #396]	; (8007510 <ssd1306_DrawArc+0x1e4>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	089b      	lsrs	r3, r3, #2
 800738a:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a4:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 80073a8:	e0a6      	b.n	80074f8 <ssd1306_DrawArc+0x1cc>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80073b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073bc:	eeb0 0a67 	vmov.f32	s0, s15
 80073c0:	f7ff ff66 	bl	8007290 <ssd1306_DegToRad>
 80073c4:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sin(rad)*radius);
 80073c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80073cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073d0:	eeb0 0b47 	vmov.f64	d0, d7
 80073d4:	f001 f850 	bl	8008478 <sin>
 80073d8:	eeb0 6b40 	vmov.f64	d6, d0
 80073dc:	7b7b      	ldrb	r3, [r7, #13]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80073ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80073f2:	793b      	ldrb	r3, [r7, #4]
 80073f4:	b25b      	sxtb	r3, r3
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	4413      	add	r3, r2
 80073fc:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 80073fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8007402:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007406:	eeb0 0b47 	vmov.f64	d0, d7
 800740a:	f000 ffed 	bl	80083e8 <cos>
 800740e:	eeb0 6b40 	vmov.f64	d6, d0
 8007412:	7b7b      	ldrb	r3, [r7, #13]
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800741c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007420:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007424:	edc7 7a01 	vstr	s15, [r7, #4]
 8007428:	793b      	ldrb	r3, [r7, #4]
 800742a:	b25b      	sxtb	r3, r3
 800742c:	b2da      	uxtb	r2, r3
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	4413      	add	r3, r2
 8007432:	74bb      	strb	r3, [r7, #18]
        count++;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	3301      	adds	r3, #1
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
        if(count != approx_segments)
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	429a      	cmp	r2, r3
 8007440:	d00f      	beq.n	8007462 <ssd1306_DrawArc+0x136>
        {
            rad = ssd1306_DegToRad(count*approx_degree);
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800744c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007454:	eeb0 0a67 	vmov.f32	s0, s15
 8007458:	f7ff ff1a 	bl	8007290 <ssd1306_DegToRad>
 800745c:	ed87 0a08 	vstr	s0, [r7, #32]
 8007460:	e00a      	b.n	8007478 <ssd1306_DrawArc+0x14c>
        }
        else
        {            
            rad = ssd1306_DegToRad(loc_sweep);
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746c:	eeb0 0a67 	vmov.f32	s0, s15
 8007470:	f7ff ff0e 	bl	8007290 <ssd1306_DegToRad>
 8007474:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8007478:	edd7 7a08 	vldr	s15, [r7, #32]
 800747c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007480:	eeb0 0b47 	vmov.f64	d0, d7
 8007484:	f000 fff8 	bl	8008478 <sin>
 8007488:	eeb0 6b40 	vmov.f64	d6, d0
 800748c:	7b7b      	ldrb	r3, [r7, #13]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007496:	ee26 7b07 	vmul.f64	d7, d6, d7
 800749a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800749e:	edc7 7a01 	vstr	s15, [r7, #4]
 80074a2:	793b      	ldrb	r3, [r7, #4]
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4413      	add	r3, r2
 80074ac:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 80074ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80074b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80074b6:	eeb0 0b47 	vmov.f64	d0, d7
 80074ba:	f000 ff95 	bl	80083e8 <cos>
 80074be:	eeb0 6b40 	vmov.f64	d6, d0
 80074c2:	7b7b      	ldrb	r3, [r7, #13]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80074d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80074d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80074d8:	793b      	ldrb	r3, [r7, #4]
 80074da:	b25b      	sxtb	r3, r3
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	4413      	add	r3, r2
 80074e2:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80074e4:	7c3c      	ldrb	r4, [r7, #16]
 80074e6:	7c7a      	ldrb	r2, [r7, #17]
 80074e8:	7cb9      	ldrb	r1, [r7, #18]
 80074ea:	7cf8      	ldrb	r0, [r7, #19]
 80074ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	4623      	mov	r3, r4
 80074f4:	f7ff fe24 	bl	8007140 <ssd1306_Line>
    while(count < approx_segments)
 80074f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	f4ff af54 	bcc.w	80073aa <ssd1306_DrawArc+0x7e>
    }
    
    return;
 8007502:	bf00      	nop
}
 8007504:	372c      	adds	r7, #44	; 0x2c
 8007506:	46bd      	mov	sp, r7
 8007508:	bd90      	pop	{r4, r7, pc}
 800750a:	bf00      	nop
 800750c:	66666667 	.word	0x66666667
 8007510:	16c16c17 	.word	0x16c16c17

08007514 <ssd1306_DrawCircle>:
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	4623      	mov	r3, r4
 8007524:	71fb      	strb	r3, [r7, #7]
 8007526:	4603      	mov	r3, r0
 8007528:	71bb      	strb	r3, [r7, #6]
 800752a:	460b      	mov	r3, r1
 800752c:	717b      	strb	r3, [r7, #5]
 800752e:	4613      	mov	r3, r2
 8007530:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8007532:	797b      	ldrb	r3, [r7, #5]
 8007534:	425b      	negs	r3, r3
 8007536:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 800753c:	797b      	ldrb	r3, [r7, #5]
 800753e:	f1c3 0301 	rsb	r3, r3, #1
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8007546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754a:	2b00      	cmp	r3, #0
 800754c:	db65      	blt.n	800761a <ssd1306_DrawCircle+0x106>
 800754e:	79bb      	ldrb	r3, [r7, #6]
 8007550:	2b1f      	cmp	r3, #31
 8007552:	d862      	bhi.n	800761a <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	79fa      	ldrb	r2, [r7, #7]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	b2d8      	uxtb	r0, r3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	79bb      	ldrb	r3, [r7, #6]
 8007564:	4413      	add	r3, r2
 8007566:	b2db      	uxtb	r3, r3
 8007568:	793a      	ldrb	r2, [r7, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	f7ff fcc2 	bl	8006ef4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	b2da      	uxtb	r2, r3
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	4413      	add	r3, r2
 8007578:	b2d8      	uxtb	r0, r3
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	79bb      	ldrb	r3, [r7, #6]
 8007580:	4413      	add	r3, r2
 8007582:	b2db      	uxtb	r3, r3
 8007584:	793a      	ldrb	r2, [r7, #4]
 8007586:	4619      	mov	r1, r3
 8007588:	f7ff fcb4 	bl	8006ef4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	b2da      	uxtb	r2, r3
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	4413      	add	r3, r2
 8007594:	b2d8      	uxtb	r0, r3
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	79ba      	ldrb	r2, [r7, #6]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	793a      	ldrb	r2, [r7, #4]
 80075a2:	4619      	mov	r1, r3
 80075a4:	f7ff fca6 	bl	8006ef4 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	b2d8      	uxtb	r0, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	79ba      	ldrb	r2, [r7, #6]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	793a      	ldrb	r2, [r7, #4]
 80075be:	4619      	mov	r1, r3
 80075c0:	f7ff fc98 	bl	8006ef4 <ssd1306_DrawPixel>
        e2 = err;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	dc13      	bgt.n	80075f8 <ssd1306_DrawCircle+0xe4>
            y++;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	3301      	adds	r3, #1
 80075d4:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	3301      	adds	r3, #1
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	425b      	negs	r3, r3
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d105      	bne.n	80075f8 <ssd1306_DrawCircle+0xe4>
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dc01      	bgt.n	80075f8 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	dd08      	ble.n	8007612 <ssd1306_DrawCircle+0xfe>
          x++;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	3301      	adds	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	3301      	adds	r3, #1
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd9d      	ble.n	8007554 <ssd1306_DrawCircle+0x40>

    return;
 8007618:	e000      	b.n	800761c <ssd1306_DrawCircle+0x108>
    return;
 800761a:	bf00      	nop
}
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd90      	pop	{r4, r7, pc}

08007622 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007622:	b590      	push	{r4, r7, lr}
 8007624:	b085      	sub	sp, #20
 8007626:	af02      	add	r7, sp, #8
 8007628:	4604      	mov	r4, r0
 800762a:	4608      	mov	r0, r1
 800762c:	4611      	mov	r1, r2
 800762e:	461a      	mov	r2, r3
 8007630:	4623      	mov	r3, r4
 8007632:	71fb      	strb	r3, [r7, #7]
 8007634:	4603      	mov	r3, r0
 8007636:	71bb      	strb	r3, [r7, #6]
 8007638:	460b      	mov	r3, r1
 800763a:	717b      	strb	r3, [r7, #5]
 800763c:	4613      	mov	r3, r2
 800763e:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8007640:	79bc      	ldrb	r4, [r7, #6]
 8007642:	797a      	ldrb	r2, [r7, #5]
 8007644:	79b9      	ldrb	r1, [r7, #6]
 8007646:	79f8      	ldrb	r0, [r7, #7]
 8007648:	7e3b      	ldrb	r3, [r7, #24]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4623      	mov	r3, r4
 800764e:	f7ff fd77 	bl	8007140 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8007652:	793c      	ldrb	r4, [r7, #4]
 8007654:	797a      	ldrb	r2, [r7, #5]
 8007656:	79b9      	ldrb	r1, [r7, #6]
 8007658:	7978      	ldrb	r0, [r7, #5]
 800765a:	7e3b      	ldrb	r3, [r7, #24]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4623      	mov	r3, r4
 8007660:	f7ff fd6e 	bl	8007140 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8007664:	793c      	ldrb	r4, [r7, #4]
 8007666:	79fa      	ldrb	r2, [r7, #7]
 8007668:	7939      	ldrb	r1, [r7, #4]
 800766a:	7978      	ldrb	r0, [r7, #5]
 800766c:	7e3b      	ldrb	r3, [r7, #24]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4623      	mov	r3, r4
 8007672:	f7ff fd65 	bl	8007140 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8007676:	79bc      	ldrb	r4, [r7, #6]
 8007678:	79fa      	ldrb	r2, [r7, #7]
 800767a:	7939      	ldrb	r1, [r7, #4]
 800767c:	79f8      	ldrb	r0, [r7, #7]
 800767e:	7e3b      	ldrb	r3, [r7, #24]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4623      	mov	r3, r4
 8007684:	f7ff fd5c 	bl	8007140 <ssd1306_Line>

  return;
 8007688:	bf00      	nop
}
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	bd90      	pop	{r4, r7, pc}

08007690 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800769a:	2381      	movs	r3, #129	; 0x81
 800769c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fb3f 	bl	8006d24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fb3b 	bl	8006d24 <ssd1306_WriteCommand>
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80076c8:	23af      	movs	r3, #175	; 0xaf
 80076ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <ssd1306_SetDisplayOn+0x38>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	719a      	strb	r2, [r3, #6]
 80076d2:	e004      	b.n	80076de <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80076d4:	23ae      	movs	r3, #174	; 0xae
 80076d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <ssd1306_SetDisplayOn+0x38>)
 80076da:	2200      	movs	r2, #0
 80076dc:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fb1f 	bl	8006d24 <ssd1306_WriteCommand>
}
 80076e6:	bf00      	nop
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	24000374 	.word	0x24000374

080076f4 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7ff fbae 	bl	8006e5c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8007700:	f7f9 feea 	bl	80014d8 <HAL_GetTick>
 8007704:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8007712:	7bb9      	ldrb	r1, [r7, #14]
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2200      	movs	r2, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fbeb 	bl	8006ef4 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <ssd1306_TestBorder+0x3e>
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b7e      	cmp	r3, #126	; 0x7e
 8007728:	d803      	bhi.n	8007732 <ssd1306_TestBorder+0x3e>
            x++;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	3301      	adds	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	e016      	b.n	8007760 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b7f      	cmp	r3, #127	; 0x7f
 8007736:	d106      	bne.n	8007746 <ssd1306_TestBorder+0x52>
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	2b1e      	cmp	r3, #30
 800773c:	d803      	bhi.n	8007746 <ssd1306_TestBorder+0x52>
            y++;
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	3301      	adds	r3, #1
 8007742:	73bb      	strb	r3, [r7, #14]
 8007744:	e00c      	b.n	8007760 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b1f      	cmp	r3, #31
 800774a:	d106      	bne.n	800775a <ssd1306_TestBorder+0x66>
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <ssd1306_TestBorder+0x66>
            x--;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	3b01      	subs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e002      	b.n	8007760 <ssd1306_TestBorder+0x6c>
        else
            y--;
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	3b01      	subs	r3, #1
 800775e:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8007760:	7bb9      	ldrb	r1, [r7, #14]
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2201      	movs	r2, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fbc4 	bl	8006ef4 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800776c:	f7ff fb9a 	bl	8006ea4 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8007770:	2005      	movs	r0, #5
 8007772:	f7f9 febd 	bl	80014f0 <HAL_Delay>
        end = HAL_GetTick();
 8007776:	f7f9 feaf 	bl	80014d8 <HAL_GetTick>
 800777a:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8007786:	d3c4      	bcc.n	8007712 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8007788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800778c:	f7f9 feb0 	bl	80014f0 <HAL_Delay>
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 80077a2:	2000      	movs	r0, #0
 80077a4:	f7ff fb5a 	bl	8006e5c <ssd1306_Fill>

	#ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	4619      	mov	r1, r3
 80077ac:	2002      	movs	r0, #2
 80077ae:	f7ff fcaf 	bl	8007110 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80077b2:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <ssd1306_TestFonts+0x88>)
 80077b4:	2301      	movs	r3, #1
 80077b6:	ca06      	ldmia	r2, {r1, r2}
 80077b8:	481a      	ldr	r0, [pc, #104]	; (8007824 <ssd1306_TestFonts+0x8c>)
 80077ba:	f7ff fc83 	bl	80070c4 <ssd1306_WriteString>
    y += 26;
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	331a      	adds	r3, #26
 80077c2:	71fb      	strb	r3, [r7, #7]
	#endif

	#ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	4619      	mov	r1, r3
 80077c8:	2002      	movs	r0, #2
 80077ca:	f7ff fca1 	bl	8007110 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80077ce:	4a16      	ldr	r2, [pc, #88]	; (8007828 <ssd1306_TestFonts+0x90>)
 80077d0:	2301      	movs	r3, #1
 80077d2:	ca06      	ldmia	r2, {r1, r2}
 80077d4:	4815      	ldr	r0, [pc, #84]	; (800782c <ssd1306_TestFonts+0x94>)
 80077d6:	f7ff fc75 	bl	80070c4 <ssd1306_WriteString>
    y += 18;
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	3312      	adds	r3, #18
 80077de:	71fb      	strb	r3, [r7, #7]
	#endif

	#ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	4619      	mov	r1, r3
 80077e4:	2002      	movs	r0, #2
 80077e6:	f7ff fc93 	bl	8007110 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80077ea:	4a11      	ldr	r2, [pc, #68]	; (8007830 <ssd1306_TestFonts+0x98>)
 80077ec:	2301      	movs	r3, #1
 80077ee:	ca06      	ldmia	r2, {r1, r2}
 80077f0:	4810      	ldr	r0, [pc, #64]	; (8007834 <ssd1306_TestFonts+0x9c>)
 80077f2:	f7ff fc67 	bl	80070c4 <ssd1306_WriteString>
    y += 10;
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	330a      	adds	r3, #10
 80077fa:	71fb      	strb	r3, [r7, #7]
	#endif

	#ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	4619      	mov	r1, r3
 8007800:	2002      	movs	r0, #2
 8007802:	f7ff fc85 	bl	8007110 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8007806:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <ssd1306_TestFonts+0xa0>)
 8007808:	2301      	movs	r3, #1
 800780a:	ca06      	ldmia	r2, {r1, r2}
 800780c:	480b      	ldr	r0, [pc, #44]	; (800783c <ssd1306_TestFonts+0xa4>)
 800780e:	f7ff fc59 	bl	80070c4 <ssd1306_WriteString>
	#endif

    ssd1306_UpdateScreen();
 8007812:	f7ff fb47 	bl	8006ea4 <ssd1306_UpdateScreen>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	24000028 	.word	0x24000028
 8007824:	08009050 	.word	0x08009050
 8007828:	24000020 	.word	0x24000020
 800782c:	0800905c 	.word	0x0800905c
 8007830:	24000018 	.word	0x24000018
 8007834:	08009068 	.word	0x08009068
 8007838:	24000010 	.word	0x24000010
 800783c:	08009074 	.word	0x08009074

08007840 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8007840:	b580      	push	{r7, lr}
 8007842:	b098      	sub	sp, #96	; 0x60
 8007844:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8007846:	2001      	movs	r0, #1
 8007848:	f7ff fb08 	bl	8006e5c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 800784c:	f7f9 fe44 	bl	80014d8 <HAL_GetTick>
 8007850:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8007852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007854:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 800785a:	4a3b      	ldr	r2, [pc, #236]	; (8007948 <ssd1306_TestFPS+0x108>)
 800785c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007860:	ca07      	ldmia	r2, {r0, r1, r2}
 8007862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8007866:	2100      	movs	r1, #0
 8007868:	2002      	movs	r0, #2
 800786a:	f7ff fc51 	bl	8007110 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 800786e:	4a37      	ldr	r2, [pc, #220]	; (800794c <ssd1306_TestFPS+0x10c>)
 8007870:	2300      	movs	r3, #0
 8007872:	ca06      	ldmia	r2, {r1, r2}
 8007874:	4836      	ldr	r0, [pc, #216]	; (8007950 <ssd1306_TestFPS+0x110>)
 8007876:	f7ff fc25 	bl	80070c4 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 800787a:	2112      	movs	r1, #18
 800787c:	2002      	movs	r0, #2
 800787e:	f7ff fc47 	bl	8007110 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8007882:	4a32      	ldr	r2, [pc, #200]	; (800794c <ssd1306_TestFPS+0x10c>)
 8007884:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8007888:	2300      	movs	r3, #0
 800788a:	ca06      	ldmia	r2, {r1, r2}
 800788c:	f7ff fc1a 	bl	80070c4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8007890:	f7ff fb08 	bl	8006ea4 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8007894:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007898:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 800789c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078a0:	3301      	adds	r3, #1
 80078a2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80078a6:	220a      	movs	r2, #10
 80078a8:	4619      	mov	r1, r3
 80078aa:	f000 f961 	bl	8007b70 <memmove>
        message[sizeof(message)-2] = ch;
 80078ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80078b2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 80078b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b8:	3301      	adds	r3, #1
 80078ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 80078bc:	f7f9 fe0c 	bl	80014d8 <HAL_GetTick>
 80078c0:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 80078c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3287 	movw	r2, #4999	; 0x1387
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d9d4      	bls.n	800787a <ssd1306_TestFPS+0x3a>
   
    HAL_Delay(1000);
 80078d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078d4:	f7f9 fe0c 	bl	80014f0 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80078d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078e2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80078e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80078f4:	ed9f 4b12 	vldr	d4, [pc, #72]	; 8007940 <ssd1306_TestFPS+0x100>
 80078f8:	ee87 6b04 	vdiv.f64	d6, d7, d4
 80078fc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007900:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007904:	ee17 3a90 	vmov	r3, s15
 8007908:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 800790a:	1d38      	adds	r0, r7, #4
 800790c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800790e:	4a11      	ldr	r2, [pc, #68]	; (8007954 <ssd1306_TestFPS+0x114>)
 8007910:	2140      	movs	r1, #64	; 0x40
 8007912:	f000 fa09 	bl	8007d28 <sniprintf>
   
    ssd1306_Fill(White);
 8007916:	2001      	movs	r0, #1
 8007918:	f7ff faa0 	bl	8006e5c <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 800791c:	2102      	movs	r1, #2
 800791e:	2002      	movs	r0, #2
 8007920:	f7ff fbf6 	bl	8007110 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8007924:	4a09      	ldr	r2, [pc, #36]	; (800794c <ssd1306_TestFPS+0x10c>)
 8007926:	1d38      	adds	r0, r7, #4
 8007928:	2300      	movs	r3, #0
 800792a:	ca06      	ldmia	r2, {r1, r2}
 800792c:	f7ff fbca 	bl	80070c4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8007930:	f7ff fab8 	bl	8006ea4 <ssd1306_UpdateScreen>
}
 8007934:	bf00      	nop
 8007936:	3760      	adds	r7, #96	; 0x60
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	f3af 8000 	nop.w
 8007940:	00000000 	.word	0x00000000
 8007944:	408f4000 	.word	0x408f4000
 8007948:	08009094 	.word	0x08009094
 800794c:	24000020 	.word	0x24000020
 8007950:	08009080 	.word	0x08009080
 8007954:	0800908c 	.word	0x0800908c

08007958 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 800795e:	2301      	movs	r3, #1
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	231f      	movs	r3, #31
 8007964:	227f      	movs	r2, #127	; 0x7f
 8007966:	2101      	movs	r1, #1
 8007968:	2001      	movs	r0, #1
 800796a:	f7ff fbe9 	bl	8007140 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 800796e:	2301      	movs	r3, #1
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	231f      	movs	r3, #31
 8007974:	2201      	movs	r2, #1
 8007976:	2101      	movs	r1, #1
 8007978:	207f      	movs	r0, #127	; 0x7f
 800797a:	f7ff fbe1 	bl	8007140 <ssd1306_Line>
  ssd1306_UpdateScreen();
 800797e:	f7ff fa91 	bl	8006ea4 <ssd1306_UpdateScreen>
  return;
 8007982:	bf00      	nop
}
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b085      	sub	sp, #20
 800798c:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	e028      	b.n	80079e6 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	0092      	lsls	r2, r2, #2
 800799c:	4413      	add	r3, r2
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	3301      	adds	r3, #1
 80079a2:	b2d8      	uxtb	r0, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	0092      	lsls	r2, r2, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	3301      	adds	r3, #1
 80079b2:	b2d9      	uxtb	r1, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	4413      	add	r3, r2
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	461c      	mov	r4, r3
 80079cc:	00a4      	lsls	r4, r4, #2
 80079ce:	4423      	add	r3, r4
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f1c3 031f 	rsb	r3, r3, #31
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2401      	movs	r4, #1
 80079da:	9400      	str	r4, [sp, #0]
 80079dc:	f7ff fe21 	bl	8007622 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3301      	adds	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d9d3      	bls.n	8007994 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 80079ec:	f7ff fa5a 	bl	8006ea4 <ssd1306_UpdateScreen>
  return;
 80079f0:	bf00      	nop
}
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd90      	pop	{r4, r7, pc}

080079f8 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	e010      	b.n	8007a26 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20* delta+30, 15, 10, White);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	0092      	lsls	r2, r2, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	331e      	adds	r3, #30
 8007a14:	b2d8      	uxtb	r0, r3
 8007a16:	2301      	movs	r3, #1
 8007a18:	220a      	movs	r2, #10
 8007a1a:	210f      	movs	r1, #15
 8007a1c:	f7ff fd7a 	bl	8007514 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3301      	adds	r3, #1
 8007a24:	607b      	str	r3, [r7, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d9eb      	bls.n	8007a04 <ssd1306_TestCircle+0xc>
  }
  ssd1306_UpdateScreen();
 8007a2c:	f7ff fa3a 	bl	8006ea4 <ssd1306_UpdateScreen>
  return;
 8007a30:	bf00      	nop
}
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8007a3e:	2301      	movs	r3, #1
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2314      	movs	r3, #20
 8007a4a:	221e      	movs	r2, #30
 8007a4c:	211e      	movs	r1, #30
 8007a4e:	201e      	movs	r0, #30
 8007a50:	f7ff fc6c 	bl	800732c <ssd1306_DrawArc>
  ssd1306_UpdateScreen();
 8007a54:	f7ff fa26 	bl	8006ea4 <ssd1306_UpdateScreen>
  return;
 8007a58:	bf00      	nop
}
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8007a60:	b590      	push	{r4, r7, lr}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8007a66:	4b08      	ldr	r3, [pc, #32]	; (8007a88 <ssd1306_TestPolyline+0x28>)
 8007a68:	463c      	mov	r4, r7
 8007a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a6c:	c407      	stmia	r4!, {r0, r1, r2}
 8007a6e:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8007a70:	463b      	mov	r3, r7
 8007a72:	2201      	movs	r2, #1
 8007a74:	2107      	movs	r1, #7
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fbce 	bl	8007218 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8007a7c:	f7ff fa12 	bl	8006ea4 <ssd1306_UpdateScreen>
  return;
 8007a80:	bf00      	nop
}
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd90      	pop	{r4, r7, pc}
 8007a88:	080090a0 	.word	0x080090a0

08007a8c <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8007a90:	f7ff f97a 	bl	8006d88 <ssd1306_Init>
    ssd1306_TestFPS();
 8007a94:	f7ff fed4 	bl	8007840 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8007a98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007a9c:	f7f9 fd28 	bl	80014f0 <HAL_Delay>
    ssd1306_TestBorder();
 8007aa0:	f7ff fe28 	bl	80076f4 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 8007aa4:	f7ff fe78 	bl	8007798 <ssd1306_TestFonts>
    HAL_Delay(3000);
 8007aa8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007aac:	f7f9 fd20 	bl	80014f0 <HAL_Delay>
    ssd1306_Fill(Black);
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7ff f9d3 	bl	8006e5c <ssd1306_Fill>
    ssd1306_TestRectangle();
 8007ab6:	f7ff ff67 	bl	8007988 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8007aba:	f7ff ff4d 	bl	8007958 <ssd1306_TestLine>
    HAL_Delay(3000);
 8007abe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007ac2:	f7f9 fd15 	bl	80014f0 <HAL_Delay>
    ssd1306_Fill(Black);
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f7ff f9c8 	bl	8006e5c <ssd1306_Fill>
    ssd1306_TestPolyline();
 8007acc:	f7ff ffc8 	bl	8007a60 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8007ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007ad4:	f7f9 fd0c 	bl	80014f0 <HAL_Delay>
    ssd1306_Fill(Black);
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7ff f9bf 	bl	8006e5c <ssd1306_Fill>
    ssd1306_TestArc();
 8007ade:	f7ff ffab 	bl	8007a38 <ssd1306_TestArc>
    HAL_Delay(3000);
 8007ae2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007ae6:	f7f9 fd03 	bl	80014f0 <HAL_Delay>
    ssd1306_Fill(Black);
 8007aea:	2000      	movs	r0, #0
 8007aec:	f7ff f9b6 	bl	8006e5c <ssd1306_Fill>
    ssd1306_TestCircle();
 8007af0:	f7ff ff82 	bl	80079f8 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8007af4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007af8:	f7f9 fcfa 	bl	80014f0 <HAL_Delay>
}
 8007afc:	bf00      	nop
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <__errno>:
 8007b00:	4b01      	ldr	r3, [pc, #4]	; (8007b08 <__errno+0x8>)
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	24000030 	.word	0x24000030

08007b0c <__libc_init_array>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4d0d      	ldr	r5, [pc, #52]	; (8007b44 <__libc_init_array+0x38>)
 8007b10:	4c0d      	ldr	r4, [pc, #52]	; (8007b48 <__libc_init_array+0x3c>)
 8007b12:	1b64      	subs	r4, r4, r5
 8007b14:	10a4      	asrs	r4, r4, #2
 8007b16:	2600      	movs	r6, #0
 8007b18:	42a6      	cmp	r6, r4
 8007b1a:	d109      	bne.n	8007b30 <__libc_init_array+0x24>
 8007b1c:	4d0b      	ldr	r5, [pc, #44]	; (8007b4c <__libc_init_array+0x40>)
 8007b1e:	4c0c      	ldr	r4, [pc, #48]	; (8007b50 <__libc_init_array+0x44>)
 8007b20:	f001 fa88 	bl	8009034 <_init>
 8007b24:	1b64      	subs	r4, r4, r5
 8007b26:	10a4      	asrs	r4, r4, #2
 8007b28:	2600      	movs	r6, #0
 8007b2a:	42a6      	cmp	r6, r4
 8007b2c:	d105      	bne.n	8007b3a <__libc_init_array+0x2e>
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b34:	4798      	blx	r3
 8007b36:	3601      	adds	r6, #1
 8007b38:	e7ee      	b.n	8007b18 <__libc_init_array+0xc>
 8007b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3e:	4798      	blx	r3
 8007b40:	3601      	adds	r6, #1
 8007b42:	e7f2      	b.n	8007b2a <__libc_init_array+0x1e>
 8007b44:	0800c160 	.word	0x0800c160
 8007b48:	0800c160 	.word	0x0800c160
 8007b4c:	0800c160 	.word	0x0800c160
 8007b50:	0800c164 	.word	0x0800c164

08007b54 <memcpy>:
 8007b54:	440a      	add	r2, r1
 8007b56:	4291      	cmp	r1, r2
 8007b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b5c:	d100      	bne.n	8007b60 <memcpy+0xc>
 8007b5e:	4770      	bx	lr
 8007b60:	b510      	push	{r4, lr}
 8007b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	d1f9      	bne.n	8007b62 <memcpy+0xe>
 8007b6e:	bd10      	pop	{r4, pc}

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0402 	add.w	r4, r1, r2
 8007b78:	d902      	bls.n	8007b80 <memmove+0x10>
 8007b7a:	4284      	cmp	r4, r0
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	d807      	bhi.n	8007b90 <memmove+0x20>
 8007b80:	1e43      	subs	r3, r0, #1
 8007b82:	42a1      	cmp	r1, r4
 8007b84:	d008      	beq.n	8007b98 <memmove+0x28>
 8007b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b8e:	e7f8      	b.n	8007b82 <memmove+0x12>
 8007b90:	4402      	add	r2, r0
 8007b92:	4601      	mov	r1, r0
 8007b94:	428a      	cmp	r2, r1
 8007b96:	d100      	bne.n	8007b9a <memmove+0x2a>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba2:	e7f7      	b.n	8007b94 <memmove+0x24>

08007ba4 <memset>:
 8007ba4:	4402      	add	r2, r0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d100      	bne.n	8007bae <memset+0xa>
 8007bac:	4770      	bx	lr
 8007bae:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb2:	e7f9      	b.n	8007ba8 <memset+0x4>

08007bb4 <_free_r>:
 8007bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	d048      	beq.n	8007c4c <_free_r+0x98>
 8007bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbe:	9001      	str	r0, [sp, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bc6:	bfb8      	it	lt
 8007bc8:	18e4      	addlt	r4, r4, r3
 8007bca:	f000 f8e3 	bl	8007d94 <__malloc_lock>
 8007bce:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <_free_r+0x9c>)
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	4615      	mov	r5, r2
 8007bd6:	b933      	cbnz	r3, 8007be6 <_free_r+0x32>
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6014      	str	r4, [r2, #0]
 8007bdc:	b003      	add	sp, #12
 8007bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be2:	f000 b8dd 	b.w	8007da0 <__malloc_unlock>
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	d90b      	bls.n	8007c02 <_free_r+0x4e>
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	1862      	adds	r2, r4, r1
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	bf04      	itt	eq
 8007bf2:	681a      	ldreq	r2, [r3, #0]
 8007bf4:	685b      	ldreq	r3, [r3, #4]
 8007bf6:	6063      	str	r3, [r4, #4]
 8007bf8:	bf04      	itt	eq
 8007bfa:	1852      	addeq	r2, r2, r1
 8007bfc:	6022      	streq	r2, [r4, #0]
 8007bfe:	602c      	str	r4, [r5, #0]
 8007c00:	e7ec      	b.n	8007bdc <_free_r+0x28>
 8007c02:	461a      	mov	r2, r3
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	b10b      	cbz	r3, 8007c0c <_free_r+0x58>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d9fa      	bls.n	8007c02 <_free_r+0x4e>
 8007c0c:	6811      	ldr	r1, [r2, #0]
 8007c0e:	1855      	adds	r5, r2, r1
 8007c10:	42a5      	cmp	r5, r4
 8007c12:	d10b      	bne.n	8007c2c <_free_r+0x78>
 8007c14:	6824      	ldr	r4, [r4, #0]
 8007c16:	4421      	add	r1, r4
 8007c18:	1854      	adds	r4, r2, r1
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	6011      	str	r1, [r2, #0]
 8007c1e:	d1dd      	bne.n	8007bdc <_free_r+0x28>
 8007c20:	681c      	ldr	r4, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	6053      	str	r3, [r2, #4]
 8007c26:	4421      	add	r1, r4
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	e7d7      	b.n	8007bdc <_free_r+0x28>
 8007c2c:	d902      	bls.n	8007c34 <_free_r+0x80>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	6003      	str	r3, [r0, #0]
 8007c32:	e7d3      	b.n	8007bdc <_free_r+0x28>
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	1961      	adds	r1, r4, r5
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf04      	itt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	bf04      	itt	eq
 8007c44:	1949      	addeq	r1, r1, r5
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	6054      	str	r4, [r2, #4]
 8007c4a:	e7c7      	b.n	8007bdc <_free_r+0x28>
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bd30      	pop	{r4, r5, pc}
 8007c50:	2400037c 	.word	0x2400037c

08007c54 <_malloc_r>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	1ccd      	adds	r5, r1, #3
 8007c58:	f025 0503 	bic.w	r5, r5, #3
 8007c5c:	3508      	adds	r5, #8
 8007c5e:	2d0c      	cmp	r5, #12
 8007c60:	bf38      	it	cc
 8007c62:	250c      	movcc	r5, #12
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	4606      	mov	r6, r0
 8007c68:	db01      	blt.n	8007c6e <_malloc_r+0x1a>
 8007c6a:	42a9      	cmp	r1, r5
 8007c6c:	d903      	bls.n	8007c76 <_malloc_r+0x22>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	2000      	movs	r0, #0
 8007c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c76:	f000 f88d 	bl	8007d94 <__malloc_lock>
 8007c7a:	4921      	ldr	r1, [pc, #132]	; (8007d00 <_malloc_r+0xac>)
 8007c7c:	680a      	ldr	r2, [r1, #0]
 8007c7e:	4614      	mov	r4, r2
 8007c80:	b99c      	cbnz	r4, 8007caa <_malloc_r+0x56>
 8007c82:	4f20      	ldr	r7, [pc, #128]	; (8007d04 <_malloc_r+0xb0>)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	b923      	cbnz	r3, 8007c92 <_malloc_r+0x3e>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f000 f83c 	bl	8007d08 <_sbrk_r>
 8007c90:	6038      	str	r0, [r7, #0]
 8007c92:	4629      	mov	r1, r5
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 f837 	bl	8007d08 <_sbrk_r>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d123      	bne.n	8007ce6 <_malloc_r+0x92>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f000 f87c 	bl	8007da0 <__malloc_unlock>
 8007ca8:	e7e3      	b.n	8007c72 <_malloc_r+0x1e>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	1b5b      	subs	r3, r3, r5
 8007cae:	d417      	bmi.n	8007ce0 <_malloc_r+0x8c>
 8007cb0:	2b0b      	cmp	r3, #11
 8007cb2:	d903      	bls.n	8007cbc <_malloc_r+0x68>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	441c      	add	r4, r3
 8007cb8:	6025      	str	r5, [r4, #0]
 8007cba:	e004      	b.n	8007cc6 <_malloc_r+0x72>
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	42a2      	cmp	r2, r4
 8007cc0:	bf0c      	ite	eq
 8007cc2:	600b      	streq	r3, [r1, #0]
 8007cc4:	6053      	strne	r3, [r2, #4]
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f000 f86a 	bl	8007da0 <__malloc_unlock>
 8007ccc:	f104 000b 	add.w	r0, r4, #11
 8007cd0:	1d23      	adds	r3, r4, #4
 8007cd2:	f020 0007 	bic.w	r0, r0, #7
 8007cd6:	1ac2      	subs	r2, r0, r3
 8007cd8:	d0cc      	beq.n	8007c74 <_malloc_r+0x20>
 8007cda:	1a1b      	subs	r3, r3, r0
 8007cdc:	50a3      	str	r3, [r4, r2]
 8007cde:	e7c9      	b.n	8007c74 <_malloc_r+0x20>
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	6864      	ldr	r4, [r4, #4]
 8007ce4:	e7cc      	b.n	8007c80 <_malloc_r+0x2c>
 8007ce6:	1cc4      	adds	r4, r0, #3
 8007ce8:	f024 0403 	bic.w	r4, r4, #3
 8007cec:	42a0      	cmp	r0, r4
 8007cee:	d0e3      	beq.n	8007cb8 <_malloc_r+0x64>
 8007cf0:	1a21      	subs	r1, r4, r0
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f808 	bl	8007d08 <_sbrk_r>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d1dd      	bne.n	8007cb8 <_malloc_r+0x64>
 8007cfc:	e7cf      	b.n	8007c9e <_malloc_r+0x4a>
 8007cfe:	bf00      	nop
 8007d00:	2400037c 	.word	0x2400037c
 8007d04:	24000380 	.word	0x24000380

08007d08 <_sbrk_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d06      	ldr	r5, [pc, #24]	; (8007d24 <_sbrk_r+0x1c>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	f7f9 f98c 	bl	8001030 <_sbrk>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_sbrk_r+0x1a>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_sbrk_r+0x1a>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	240009bc 	.word	0x240009bc

08007d28 <sniprintf>:
 8007d28:	b40c      	push	{r2, r3}
 8007d2a:	b530      	push	{r4, r5, lr}
 8007d2c:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <sniprintf+0x64>)
 8007d2e:	1e0c      	subs	r4, r1, #0
 8007d30:	681d      	ldr	r5, [r3, #0]
 8007d32:	b09d      	sub	sp, #116	; 0x74
 8007d34:	da08      	bge.n	8007d48 <sniprintf+0x20>
 8007d36:	238b      	movs	r3, #139	; 0x8b
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3e:	b01d      	add	sp, #116	; 0x74
 8007d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d44:	b002      	add	sp, #8
 8007d46:	4770      	bx	lr
 8007d48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d50:	bf14      	ite	ne
 8007d52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d56:	4623      	moveq	r3, r4
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d60:	9002      	str	r0, [sp, #8]
 8007d62:	9006      	str	r0, [sp, #24]
 8007d64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d6a:	ab21      	add	r3, sp, #132	; 0x84
 8007d6c:	a902      	add	r1, sp, #8
 8007d6e:	4628      	mov	r0, r5
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	f000 f877 	bl	8007e64 <_svfiprintf_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	bfbc      	itt	lt
 8007d7a:	238b      	movlt	r3, #139	; 0x8b
 8007d7c:	602b      	strlt	r3, [r5, #0]
 8007d7e:	2c00      	cmp	r4, #0
 8007d80:	d0dd      	beq.n	8007d3e <sniprintf+0x16>
 8007d82:	9b02      	ldr	r3, [sp, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	e7d9      	b.n	8007d3e <sniprintf+0x16>
 8007d8a:	bf00      	nop
 8007d8c:	24000030 	.word	0x24000030

08007d90 <__retarget_lock_acquire_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <__retarget_lock_release_recursive>:
 8007d92:	4770      	bx	lr

08007d94 <__malloc_lock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__malloc_lock+0x8>)
 8007d96:	f7ff bffb 	b.w	8007d90 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	240009b4 	.word	0x240009b4

08007da0 <__malloc_unlock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__malloc_unlock+0x8>)
 8007da2:	f7ff bff6 	b.w	8007d92 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	240009b4 	.word	0x240009b4

08007dac <__ssputs_r>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	688e      	ldr	r6, [r1, #8]
 8007db2:	429e      	cmp	r6, r3
 8007db4:	4682      	mov	sl, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	4690      	mov	r8, r2
 8007dba:	461f      	mov	r7, r3
 8007dbc:	d838      	bhi.n	8007e30 <__ssputs_r+0x84>
 8007dbe:	898a      	ldrh	r2, [r1, #12]
 8007dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dc4:	d032      	beq.n	8007e2c <__ssputs_r+0x80>
 8007dc6:	6825      	ldr	r5, [r4, #0]
 8007dc8:	6909      	ldr	r1, [r1, #16]
 8007dca:	eba5 0901 	sub.w	r9, r5, r1
 8007dce:	6965      	ldr	r5, [r4, #20]
 8007dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dd8:	3301      	adds	r3, #1
 8007dda:	444b      	add	r3, r9
 8007ddc:	106d      	asrs	r5, r5, #1
 8007dde:	429d      	cmp	r5, r3
 8007de0:	bf38      	it	cc
 8007de2:	461d      	movcc	r5, r3
 8007de4:	0553      	lsls	r3, r2, #21
 8007de6:	d531      	bpl.n	8007e4c <__ssputs_r+0xa0>
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7ff ff33 	bl	8007c54 <_malloc_r>
 8007dee:	4606      	mov	r6, r0
 8007df0:	b950      	cbnz	r0, 8007e08 <__ssputs_r+0x5c>
 8007df2:	230c      	movs	r3, #12
 8007df4:	f8ca 3000 	str.w	r3, [sl]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e08:	6921      	ldr	r1, [r4, #16]
 8007e0a:	464a      	mov	r2, r9
 8007e0c:	f7ff fea2 	bl	8007b54 <memcpy>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	6126      	str	r6, [r4, #16]
 8007e1e:	6165      	str	r5, [r4, #20]
 8007e20:	444e      	add	r6, r9
 8007e22:	eba5 0509 	sub.w	r5, r5, r9
 8007e26:	6026      	str	r6, [r4, #0]
 8007e28:	60a5      	str	r5, [r4, #8]
 8007e2a:	463e      	mov	r6, r7
 8007e2c:	42be      	cmp	r6, r7
 8007e2e:	d900      	bls.n	8007e32 <__ssputs_r+0x86>
 8007e30:	463e      	mov	r6, r7
 8007e32:	4632      	mov	r2, r6
 8007e34:	6820      	ldr	r0, [r4, #0]
 8007e36:	4641      	mov	r1, r8
 8007e38:	f7ff fe9a 	bl	8007b70 <memmove>
 8007e3c:	68a3      	ldr	r3, [r4, #8]
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	1b9b      	subs	r3, r3, r6
 8007e42:	4432      	add	r2, r6
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e7db      	b.n	8007e04 <__ssputs_r+0x58>
 8007e4c:	462a      	mov	r2, r5
 8007e4e:	f000 fa9d 	bl	800838c <_realloc_r>
 8007e52:	4606      	mov	r6, r0
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d1e1      	bne.n	8007e1c <__ssputs_r+0x70>
 8007e58:	6921      	ldr	r1, [r4, #16]
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f7ff feaa 	bl	8007bb4 <_free_r>
 8007e60:	e7c7      	b.n	8007df2 <__ssputs_r+0x46>
	...

08007e64 <_svfiprintf_r>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	4698      	mov	r8, r3
 8007e6a:	898b      	ldrh	r3, [r1, #12]
 8007e6c:	061b      	lsls	r3, r3, #24
 8007e6e:	b09d      	sub	sp, #116	; 0x74
 8007e70:	4607      	mov	r7, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	4614      	mov	r4, r2
 8007e76:	d50e      	bpl.n	8007e96 <_svfiprintf_r+0x32>
 8007e78:	690b      	ldr	r3, [r1, #16]
 8007e7a:	b963      	cbnz	r3, 8007e96 <_svfiprintf_r+0x32>
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	f7ff fee9 	bl	8007c54 <_malloc_r>
 8007e82:	6028      	str	r0, [r5, #0]
 8007e84:	6128      	str	r0, [r5, #16]
 8007e86:	b920      	cbnz	r0, 8007e92 <_svfiprintf_r+0x2e>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	e0d1      	b.n	8008036 <_svfiprintf_r+0x1d2>
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	616b      	str	r3, [r5, #20]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	2320      	movs	r3, #32
 8007e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea4:	2330      	movs	r3, #48	; 0x30
 8007ea6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008050 <_svfiprintf_r+0x1ec>
 8007eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eae:	f04f 0901 	mov.w	r9, #1
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eba:	b10a      	cbz	r2, 8007ec0 <_svfiprintf_r+0x5c>
 8007ebc:	2a25      	cmp	r2, #37	; 0x25
 8007ebe:	d1f9      	bne.n	8007eb4 <_svfiprintf_r+0x50>
 8007ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec4:	d00b      	beq.n	8007ede <_svfiprintf_r+0x7a>
 8007ec6:	465b      	mov	r3, fp
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ff6d 	bl	8007dac <__ssputs_r>
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f000 80aa 	beq.w	800802c <_svfiprintf_r+0x1c8>
 8007ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eda:	445a      	add	r2, fp
 8007edc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ede:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80a2 	beq.w	800802c <_svfiprintf_r+0x1c8>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef2:	f10a 0a01 	add.w	sl, sl, #1
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007efe:	931a      	str	r3, [sp, #104]	; 0x68
 8007f00:	4654      	mov	r4, sl
 8007f02:	2205      	movs	r2, #5
 8007f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f08:	4851      	ldr	r0, [pc, #324]	; (8008050 <_svfiprintf_r+0x1ec>)
 8007f0a:	f7f8 f9e9 	bl	80002e0 <memchr>
 8007f0e:	9a04      	ldr	r2, [sp, #16]
 8007f10:	b9d8      	cbnz	r0, 8007f4a <_svfiprintf_r+0xe6>
 8007f12:	06d0      	lsls	r0, r2, #27
 8007f14:	bf44      	itt	mi
 8007f16:	2320      	movmi	r3, #32
 8007f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f1c:	0711      	lsls	r1, r2, #28
 8007f1e:	bf44      	itt	mi
 8007f20:	232b      	movmi	r3, #43	; 0x2b
 8007f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f26:	f89a 3000 	ldrb.w	r3, [sl]
 8007f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2c:	d015      	beq.n	8007f5a <_svfiprintf_r+0xf6>
 8007f2e:	9a07      	ldr	r2, [sp, #28]
 8007f30:	4654      	mov	r4, sl
 8007f32:	2000      	movs	r0, #0
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3e:	3b30      	subs	r3, #48	; 0x30
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d94e      	bls.n	8007fe2 <_svfiprintf_r+0x17e>
 8007f44:	b1b0      	cbz	r0, 8007f74 <_svfiprintf_r+0x110>
 8007f46:	9207      	str	r2, [sp, #28]
 8007f48:	e014      	b.n	8007f74 <_svfiprintf_r+0x110>
 8007f4a:	eba0 0308 	sub.w	r3, r0, r8
 8007f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f52:	4313      	orrs	r3, r2
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	46a2      	mov	sl, r4
 8007f58:	e7d2      	b.n	8007f00 <_svfiprintf_r+0x9c>
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	1d19      	adds	r1, r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	9103      	str	r1, [sp, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfbb      	ittet	lt
 8007f66:	425b      	neglt	r3, r3
 8007f68:	f042 0202 	orrlt.w	r2, r2, #2
 8007f6c:	9307      	strge	r3, [sp, #28]
 8007f6e:	9307      	strlt	r3, [sp, #28]
 8007f70:	bfb8      	it	lt
 8007f72:	9204      	strlt	r2, [sp, #16]
 8007f74:	7823      	ldrb	r3, [r4, #0]
 8007f76:	2b2e      	cmp	r3, #46	; 0x2e
 8007f78:	d10c      	bne.n	8007f94 <_svfiprintf_r+0x130>
 8007f7a:	7863      	ldrb	r3, [r4, #1]
 8007f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7e:	d135      	bne.n	8007fec <_svfiprintf_r+0x188>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9203      	str	r2, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfb8      	it	lt
 8007f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f90:	3402      	adds	r4, #2
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008060 <_svfiprintf_r+0x1fc>
 8007f98:	7821      	ldrb	r1, [r4, #0]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	f7f8 f99f 	bl	80002e0 <memchr>
 8007fa2:	b140      	cbz	r0, 8007fb6 <_svfiprintf_r+0x152>
 8007fa4:	2340      	movs	r3, #64	; 0x40
 8007fa6:	eba0 000a 	sub.w	r0, r0, sl
 8007faa:	fa03 f000 	lsl.w	r0, r3, r0
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	4303      	orrs	r3, r0
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fba:	4826      	ldr	r0, [pc, #152]	; (8008054 <_svfiprintf_r+0x1f0>)
 8007fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	f7f8 f98d 	bl	80002e0 <memchr>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d038      	beq.n	800803c <_svfiprintf_r+0x1d8>
 8007fca:	4b23      	ldr	r3, [pc, #140]	; (8008058 <_svfiprintf_r+0x1f4>)
 8007fcc:	bb1b      	cbnz	r3, 8008016 <_svfiprintf_r+0x1b2>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	3307      	adds	r3, #7
 8007fd2:	f023 0307 	bic.w	r3, r3, #7
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fdc:	4433      	add	r3, r6
 8007fde:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe0:	e767      	b.n	8007eb2 <_svfiprintf_r+0x4e>
 8007fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	2001      	movs	r0, #1
 8007fea:	e7a5      	b.n	8007f38 <_svfiprintf_r+0xd4>
 8007fec:	2300      	movs	r3, #0
 8007fee:	3401      	adds	r4, #1
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f04f 0c0a 	mov.w	ip, #10
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffe:	3a30      	subs	r2, #48	; 0x30
 8008000:	2a09      	cmp	r2, #9
 8008002:	d903      	bls.n	800800c <_svfiprintf_r+0x1a8>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0c5      	beq.n	8007f94 <_svfiprintf_r+0x130>
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	e7c3      	b.n	8007f94 <_svfiprintf_r+0x130>
 800800c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008010:	4604      	mov	r4, r0
 8008012:	2301      	movs	r3, #1
 8008014:	e7f0      	b.n	8007ff8 <_svfiprintf_r+0x194>
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <_svfiprintf_r+0x1f8>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	4638      	mov	r0, r7
 8008022:	f3af 8000 	nop.w
 8008026:	1c42      	adds	r2, r0, #1
 8008028:	4606      	mov	r6, r0
 800802a:	d1d6      	bne.n	8007fda <_svfiprintf_r+0x176>
 800802c:	89ab      	ldrh	r3, [r5, #12]
 800802e:	065b      	lsls	r3, r3, #25
 8008030:	f53f af2c 	bmi.w	8007e8c <_svfiprintf_r+0x28>
 8008034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008036:	b01d      	add	sp, #116	; 0x74
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	ab03      	add	r3, sp, #12
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	462a      	mov	r2, r5
 8008042:	4b06      	ldr	r3, [pc, #24]	; (800805c <_svfiprintf_r+0x1f8>)
 8008044:	a904      	add	r1, sp, #16
 8008046:	4638      	mov	r0, r7
 8008048:	f000 f87a 	bl	8008140 <_printf_i>
 800804c:	e7eb      	b.n	8008026 <_svfiprintf_r+0x1c2>
 800804e:	bf00      	nop
 8008050:	0800bf4c 	.word	0x0800bf4c
 8008054:	0800bf56 	.word	0x0800bf56
 8008058:	00000000 	.word	0x00000000
 800805c:	08007dad 	.word	0x08007dad
 8008060:	0800bf52 	.word	0x0800bf52

08008064 <_printf_common>:
 8008064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	4616      	mov	r6, r2
 800806a:	4699      	mov	r9, r3
 800806c:	688a      	ldr	r2, [r1, #8]
 800806e:	690b      	ldr	r3, [r1, #16]
 8008070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008074:	4293      	cmp	r3, r2
 8008076:	bfb8      	it	lt
 8008078:	4613      	movlt	r3, r2
 800807a:	6033      	str	r3, [r6, #0]
 800807c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008080:	4607      	mov	r7, r0
 8008082:	460c      	mov	r4, r1
 8008084:	b10a      	cbz	r2, 800808a <_printf_common+0x26>
 8008086:	3301      	adds	r3, #1
 8008088:	6033      	str	r3, [r6, #0]
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	0699      	lsls	r1, r3, #26
 800808e:	bf42      	ittt	mi
 8008090:	6833      	ldrmi	r3, [r6, #0]
 8008092:	3302      	addmi	r3, #2
 8008094:	6033      	strmi	r3, [r6, #0]
 8008096:	6825      	ldr	r5, [r4, #0]
 8008098:	f015 0506 	ands.w	r5, r5, #6
 800809c:	d106      	bne.n	80080ac <_printf_common+0x48>
 800809e:	f104 0a19 	add.w	sl, r4, #25
 80080a2:	68e3      	ldr	r3, [r4, #12]
 80080a4:	6832      	ldr	r2, [r6, #0]
 80080a6:	1a9b      	subs	r3, r3, r2
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	dc26      	bgt.n	80080fa <_printf_common+0x96>
 80080ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080b0:	1e13      	subs	r3, r2, #0
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	bf18      	it	ne
 80080b6:	2301      	movne	r3, #1
 80080b8:	0692      	lsls	r2, r2, #26
 80080ba:	d42b      	bmi.n	8008114 <_printf_common+0xb0>
 80080bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080c0:	4649      	mov	r1, r9
 80080c2:	4638      	mov	r0, r7
 80080c4:	47c0      	blx	r8
 80080c6:	3001      	adds	r0, #1
 80080c8:	d01e      	beq.n	8008108 <_printf_common+0xa4>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	68e5      	ldr	r5, [r4, #12]
 80080ce:	6832      	ldr	r2, [r6, #0]
 80080d0:	f003 0306 	and.w	r3, r3, #6
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	bf08      	it	eq
 80080d8:	1aad      	subeq	r5, r5, r2
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	bf0c      	ite	eq
 80080e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e4:	2500      	movne	r5, #0
 80080e6:	4293      	cmp	r3, r2
 80080e8:	bfc4      	itt	gt
 80080ea:	1a9b      	subgt	r3, r3, r2
 80080ec:	18ed      	addgt	r5, r5, r3
 80080ee:	2600      	movs	r6, #0
 80080f0:	341a      	adds	r4, #26
 80080f2:	42b5      	cmp	r5, r6
 80080f4:	d11a      	bne.n	800812c <_printf_common+0xc8>
 80080f6:	2000      	movs	r0, #0
 80080f8:	e008      	b.n	800810c <_printf_common+0xa8>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4652      	mov	r2, sl
 80080fe:	4649      	mov	r1, r9
 8008100:	4638      	mov	r0, r7
 8008102:	47c0      	blx	r8
 8008104:	3001      	adds	r0, #1
 8008106:	d103      	bne.n	8008110 <_printf_common+0xac>
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008110:	3501      	adds	r5, #1
 8008112:	e7c6      	b.n	80080a2 <_printf_common+0x3e>
 8008114:	18e1      	adds	r1, r4, r3
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	2030      	movs	r0, #48	; 0x30
 800811a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800811e:	4422      	add	r2, r4
 8008120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008128:	3302      	adds	r3, #2
 800812a:	e7c7      	b.n	80080bc <_printf_common+0x58>
 800812c:	2301      	movs	r3, #1
 800812e:	4622      	mov	r2, r4
 8008130:	4649      	mov	r1, r9
 8008132:	4638      	mov	r0, r7
 8008134:	47c0      	blx	r8
 8008136:	3001      	adds	r0, #1
 8008138:	d0e6      	beq.n	8008108 <_printf_common+0xa4>
 800813a:	3601      	adds	r6, #1
 800813c:	e7d9      	b.n	80080f2 <_printf_common+0x8e>
	...

08008140 <_printf_i>:
 8008140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	460c      	mov	r4, r1
 8008146:	4691      	mov	r9, r2
 8008148:	7e27      	ldrb	r7, [r4, #24]
 800814a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800814c:	2f78      	cmp	r7, #120	; 0x78
 800814e:	4680      	mov	r8, r0
 8008150:	469a      	mov	sl, r3
 8008152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008156:	d807      	bhi.n	8008168 <_printf_i+0x28>
 8008158:	2f62      	cmp	r7, #98	; 0x62
 800815a:	d80a      	bhi.n	8008172 <_printf_i+0x32>
 800815c:	2f00      	cmp	r7, #0
 800815e:	f000 80d8 	beq.w	8008312 <_printf_i+0x1d2>
 8008162:	2f58      	cmp	r7, #88	; 0x58
 8008164:	f000 80a3 	beq.w	80082ae <_printf_i+0x16e>
 8008168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800816c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008170:	e03a      	b.n	80081e8 <_printf_i+0xa8>
 8008172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008176:	2b15      	cmp	r3, #21
 8008178:	d8f6      	bhi.n	8008168 <_printf_i+0x28>
 800817a:	a001      	add	r0, pc, #4	; (adr r0, 8008180 <_printf_i+0x40>)
 800817c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008180:	080081d9 	.word	0x080081d9
 8008184:	080081ed 	.word	0x080081ed
 8008188:	08008169 	.word	0x08008169
 800818c:	08008169 	.word	0x08008169
 8008190:	08008169 	.word	0x08008169
 8008194:	08008169 	.word	0x08008169
 8008198:	080081ed 	.word	0x080081ed
 800819c:	08008169 	.word	0x08008169
 80081a0:	08008169 	.word	0x08008169
 80081a4:	08008169 	.word	0x08008169
 80081a8:	08008169 	.word	0x08008169
 80081ac:	080082f9 	.word	0x080082f9
 80081b0:	0800821d 	.word	0x0800821d
 80081b4:	080082db 	.word	0x080082db
 80081b8:	08008169 	.word	0x08008169
 80081bc:	08008169 	.word	0x08008169
 80081c0:	0800831b 	.word	0x0800831b
 80081c4:	08008169 	.word	0x08008169
 80081c8:	0800821d 	.word	0x0800821d
 80081cc:	08008169 	.word	0x08008169
 80081d0:	08008169 	.word	0x08008169
 80081d4:	080082e3 	.word	0x080082e3
 80081d8:	680b      	ldr	r3, [r1, #0]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	600a      	str	r2, [r1, #0]
 80081e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0a3      	b.n	8008334 <_printf_i+0x1f4>
 80081ec:	6825      	ldr	r5, [r4, #0]
 80081ee:	6808      	ldr	r0, [r1, #0]
 80081f0:	062e      	lsls	r6, r5, #24
 80081f2:	f100 0304 	add.w	r3, r0, #4
 80081f6:	d50a      	bpl.n	800820e <_printf_i+0xce>
 80081f8:	6805      	ldr	r5, [r0, #0]
 80081fa:	600b      	str	r3, [r1, #0]
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	da03      	bge.n	8008208 <_printf_i+0xc8>
 8008200:	232d      	movs	r3, #45	; 0x2d
 8008202:	426d      	negs	r5, r5
 8008204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008208:	485e      	ldr	r0, [pc, #376]	; (8008384 <_printf_i+0x244>)
 800820a:	230a      	movs	r3, #10
 800820c:	e019      	b.n	8008242 <_printf_i+0x102>
 800820e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008212:	6805      	ldr	r5, [r0, #0]
 8008214:	600b      	str	r3, [r1, #0]
 8008216:	bf18      	it	ne
 8008218:	b22d      	sxthne	r5, r5
 800821a:	e7ef      	b.n	80081fc <_printf_i+0xbc>
 800821c:	680b      	ldr	r3, [r1, #0]
 800821e:	6825      	ldr	r5, [r4, #0]
 8008220:	1d18      	adds	r0, r3, #4
 8008222:	6008      	str	r0, [r1, #0]
 8008224:	0628      	lsls	r0, r5, #24
 8008226:	d501      	bpl.n	800822c <_printf_i+0xec>
 8008228:	681d      	ldr	r5, [r3, #0]
 800822a:	e002      	b.n	8008232 <_printf_i+0xf2>
 800822c:	0669      	lsls	r1, r5, #25
 800822e:	d5fb      	bpl.n	8008228 <_printf_i+0xe8>
 8008230:	881d      	ldrh	r5, [r3, #0]
 8008232:	4854      	ldr	r0, [pc, #336]	; (8008384 <_printf_i+0x244>)
 8008234:	2f6f      	cmp	r7, #111	; 0x6f
 8008236:	bf0c      	ite	eq
 8008238:	2308      	moveq	r3, #8
 800823a:	230a      	movne	r3, #10
 800823c:	2100      	movs	r1, #0
 800823e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008242:	6866      	ldr	r6, [r4, #4]
 8008244:	60a6      	str	r6, [r4, #8]
 8008246:	2e00      	cmp	r6, #0
 8008248:	bfa2      	ittt	ge
 800824a:	6821      	ldrge	r1, [r4, #0]
 800824c:	f021 0104 	bicge.w	r1, r1, #4
 8008250:	6021      	strge	r1, [r4, #0]
 8008252:	b90d      	cbnz	r5, 8008258 <_printf_i+0x118>
 8008254:	2e00      	cmp	r6, #0
 8008256:	d04d      	beq.n	80082f4 <_printf_i+0x1b4>
 8008258:	4616      	mov	r6, r2
 800825a:	fbb5 f1f3 	udiv	r1, r5, r3
 800825e:	fb03 5711 	mls	r7, r3, r1, r5
 8008262:	5dc7      	ldrb	r7, [r0, r7]
 8008264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008268:	462f      	mov	r7, r5
 800826a:	42bb      	cmp	r3, r7
 800826c:	460d      	mov	r5, r1
 800826e:	d9f4      	bls.n	800825a <_printf_i+0x11a>
 8008270:	2b08      	cmp	r3, #8
 8008272:	d10b      	bne.n	800828c <_printf_i+0x14c>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	07df      	lsls	r7, r3, #31
 8008278:	d508      	bpl.n	800828c <_printf_i+0x14c>
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	6861      	ldr	r1, [r4, #4]
 800827e:	4299      	cmp	r1, r3
 8008280:	bfde      	ittt	le
 8008282:	2330      	movle	r3, #48	; 0x30
 8008284:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800828c:	1b92      	subs	r2, r2, r6
 800828e:	6122      	str	r2, [r4, #16]
 8008290:	f8cd a000 	str.w	sl, [sp]
 8008294:	464b      	mov	r3, r9
 8008296:	aa03      	add	r2, sp, #12
 8008298:	4621      	mov	r1, r4
 800829a:	4640      	mov	r0, r8
 800829c:	f7ff fee2 	bl	8008064 <_printf_common>
 80082a0:	3001      	adds	r0, #1
 80082a2:	d14c      	bne.n	800833e <_printf_i+0x1fe>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	b004      	add	sp, #16
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	4835      	ldr	r0, [pc, #212]	; (8008384 <_printf_i+0x244>)
 80082b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	680e      	ldr	r6, [r1, #0]
 80082b8:	061f      	lsls	r7, r3, #24
 80082ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80082be:	600e      	str	r6, [r1, #0]
 80082c0:	d514      	bpl.n	80082ec <_printf_i+0x1ac>
 80082c2:	07d9      	lsls	r1, r3, #31
 80082c4:	bf44      	itt	mi
 80082c6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ca:	6023      	strmi	r3, [r4, #0]
 80082cc:	b91d      	cbnz	r5, 80082d6 <_printf_i+0x196>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	f023 0320 	bic.w	r3, r3, #32
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	2310      	movs	r3, #16
 80082d8:	e7b0      	b.n	800823c <_printf_i+0xfc>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f043 0320 	orr.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	2378      	movs	r3, #120	; 0x78
 80082e4:	4828      	ldr	r0, [pc, #160]	; (8008388 <_printf_i+0x248>)
 80082e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082ea:	e7e3      	b.n	80082b4 <_printf_i+0x174>
 80082ec:	065e      	lsls	r6, r3, #25
 80082ee:	bf48      	it	mi
 80082f0:	b2ad      	uxthmi	r5, r5
 80082f2:	e7e6      	b.n	80082c2 <_printf_i+0x182>
 80082f4:	4616      	mov	r6, r2
 80082f6:	e7bb      	b.n	8008270 <_printf_i+0x130>
 80082f8:	680b      	ldr	r3, [r1, #0]
 80082fa:	6826      	ldr	r6, [r4, #0]
 80082fc:	6960      	ldr	r0, [r4, #20]
 80082fe:	1d1d      	adds	r5, r3, #4
 8008300:	600d      	str	r5, [r1, #0]
 8008302:	0635      	lsls	r5, r6, #24
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	d501      	bpl.n	800830c <_printf_i+0x1cc>
 8008308:	6018      	str	r0, [r3, #0]
 800830a:	e002      	b.n	8008312 <_printf_i+0x1d2>
 800830c:	0671      	lsls	r1, r6, #25
 800830e:	d5fb      	bpl.n	8008308 <_printf_i+0x1c8>
 8008310:	8018      	strh	r0, [r3, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	4616      	mov	r6, r2
 8008318:	e7ba      	b.n	8008290 <_printf_i+0x150>
 800831a:	680b      	ldr	r3, [r1, #0]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	600a      	str	r2, [r1, #0]
 8008320:	681e      	ldr	r6, [r3, #0]
 8008322:	6862      	ldr	r2, [r4, #4]
 8008324:	2100      	movs	r1, #0
 8008326:	4630      	mov	r0, r6
 8008328:	f7f7 ffda 	bl	80002e0 <memchr>
 800832c:	b108      	cbz	r0, 8008332 <_printf_i+0x1f2>
 800832e:	1b80      	subs	r0, r0, r6
 8008330:	6060      	str	r0, [r4, #4]
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	6123      	str	r3, [r4, #16]
 8008336:	2300      	movs	r3, #0
 8008338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800833c:	e7a8      	b.n	8008290 <_printf_i+0x150>
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	4632      	mov	r2, r6
 8008342:	4649      	mov	r1, r9
 8008344:	4640      	mov	r0, r8
 8008346:	47d0      	blx	sl
 8008348:	3001      	adds	r0, #1
 800834a:	d0ab      	beq.n	80082a4 <_printf_i+0x164>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	079b      	lsls	r3, r3, #30
 8008350:	d413      	bmi.n	800837a <_printf_i+0x23a>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	4298      	cmp	r0, r3
 8008358:	bfb8      	it	lt
 800835a:	4618      	movlt	r0, r3
 800835c:	e7a4      	b.n	80082a8 <_printf_i+0x168>
 800835e:	2301      	movs	r3, #1
 8008360:	4632      	mov	r2, r6
 8008362:	4649      	mov	r1, r9
 8008364:	4640      	mov	r0, r8
 8008366:	47d0      	blx	sl
 8008368:	3001      	adds	r0, #1
 800836a:	d09b      	beq.n	80082a4 <_printf_i+0x164>
 800836c:	3501      	adds	r5, #1
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	9903      	ldr	r1, [sp, #12]
 8008372:	1a5b      	subs	r3, r3, r1
 8008374:	42ab      	cmp	r3, r5
 8008376:	dcf2      	bgt.n	800835e <_printf_i+0x21e>
 8008378:	e7eb      	b.n	8008352 <_printf_i+0x212>
 800837a:	2500      	movs	r5, #0
 800837c:	f104 0619 	add.w	r6, r4, #25
 8008380:	e7f5      	b.n	800836e <_printf_i+0x22e>
 8008382:	bf00      	nop
 8008384:	0800bf5d 	.word	0x0800bf5d
 8008388:	0800bf6e 	.word	0x0800bf6e

0800838c <_realloc_r>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	4607      	mov	r7, r0
 8008390:	4614      	mov	r4, r2
 8008392:	460e      	mov	r6, r1
 8008394:	b921      	cbnz	r1, 80083a0 <_realloc_r+0x14>
 8008396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800839a:	4611      	mov	r1, r2
 800839c:	f7ff bc5a 	b.w	8007c54 <_malloc_r>
 80083a0:	b922      	cbnz	r2, 80083ac <_realloc_r+0x20>
 80083a2:	f7ff fc07 	bl	8007bb4 <_free_r>
 80083a6:	4625      	mov	r5, r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ac:	f000 f814 	bl	80083d8 <_malloc_usable_size_r>
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d20f      	bcs.n	80083d4 <_realloc_r+0x48>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4638      	mov	r0, r7
 80083b8:	f7ff fc4c 	bl	8007c54 <_malloc_r>
 80083bc:	4605      	mov	r5, r0
 80083be:	2800      	cmp	r0, #0
 80083c0:	d0f2      	beq.n	80083a8 <_realloc_r+0x1c>
 80083c2:	4631      	mov	r1, r6
 80083c4:	4622      	mov	r2, r4
 80083c6:	f7ff fbc5 	bl	8007b54 <memcpy>
 80083ca:	4631      	mov	r1, r6
 80083cc:	4638      	mov	r0, r7
 80083ce:	f7ff fbf1 	bl	8007bb4 <_free_r>
 80083d2:	e7e9      	b.n	80083a8 <_realloc_r+0x1c>
 80083d4:	4635      	mov	r5, r6
 80083d6:	e7e7      	b.n	80083a8 <_realloc_r+0x1c>

080083d8 <_malloc_usable_size_r>:
 80083d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083dc:	1f18      	subs	r0, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfbc      	itt	lt
 80083e2:	580b      	ldrlt	r3, [r1, r0]
 80083e4:	18c0      	addlt	r0, r0, r3
 80083e6:	4770      	bx	lr

080083e8 <cos>:
 80083e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ea:	eeb0 7b40 	vmov.f64	d7, d0
 80083ee:	ee17 3a90 	vmov	r3, s15
 80083f2:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <cos+0x88>)
 80083f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083f8:	4293      	cmp	r3, r2
 80083fa:	dc04      	bgt.n	8008406 <cos+0x1e>
 80083fc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8008468 <cos+0x80>
 8008400:	f000 f9c2 	bl	8008788 <__kernel_cos>
 8008404:	e004      	b.n	8008410 <cos+0x28>
 8008406:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <cos+0x8c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	dd04      	ble.n	8008416 <cos+0x2e>
 800840c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008410:	b005      	add	sp, #20
 8008412:	f85d fb04 	ldr.w	pc, [sp], #4
 8008416:	4668      	mov	r0, sp
 8008418:	f000 f876 	bl	8008508 <__ieee754_rem_pio2>
 800841c:	f000 0003 	and.w	r0, r0, #3
 8008420:	2801      	cmp	r0, #1
 8008422:	d007      	beq.n	8008434 <cos+0x4c>
 8008424:	2802      	cmp	r0, #2
 8008426:	d00e      	beq.n	8008446 <cos+0x5e>
 8008428:	b9a0      	cbnz	r0, 8008454 <cos+0x6c>
 800842a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800842e:	ed9d 0b00 	vldr	d0, [sp]
 8008432:	e7e5      	b.n	8008400 <cos+0x18>
 8008434:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008438:	ed9d 0b00 	vldr	d0, [sp]
 800843c:	f000 fc90 	bl	8008d60 <__kernel_sin>
 8008440:	eeb1 0b40 	vneg.f64	d0, d0
 8008444:	e7e4      	b.n	8008410 <cos+0x28>
 8008446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800844a:	ed9d 0b00 	vldr	d0, [sp]
 800844e:	f000 f99b 	bl	8008788 <__kernel_cos>
 8008452:	e7f5      	b.n	8008440 <cos+0x58>
 8008454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008458:	ed9d 0b00 	vldr	d0, [sp]
 800845c:	2001      	movs	r0, #1
 800845e:	f000 fc7f 	bl	8008d60 <__kernel_sin>
 8008462:	e7d5      	b.n	8008410 <cos+0x28>
 8008464:	f3af 8000 	nop.w
	...
 8008470:	3fe921fb 	.word	0x3fe921fb
 8008474:	7fefffff 	.word	0x7fefffff

08008478 <sin>:
 8008478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800847a:	eeb0 7b40 	vmov.f64	d7, d0
 800847e:	ee17 3a90 	vmov	r3, s15
 8008482:	4a1f      	ldr	r2, [pc, #124]	; (8008500 <sin+0x88>)
 8008484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008488:	4293      	cmp	r3, r2
 800848a:	dc05      	bgt.n	8008498 <sin+0x20>
 800848c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80084f8 <sin+0x80>
 8008490:	2000      	movs	r0, #0
 8008492:	f000 fc65 	bl	8008d60 <__kernel_sin>
 8008496:	e004      	b.n	80084a2 <sin+0x2a>
 8008498:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <sin+0x8c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	dd04      	ble.n	80084a8 <sin+0x30>
 800849e:	ee30 0b40 	vsub.f64	d0, d0, d0
 80084a2:	b005      	add	sp, #20
 80084a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80084a8:	4668      	mov	r0, sp
 80084aa:	f000 f82d 	bl	8008508 <__ieee754_rem_pio2>
 80084ae:	f000 0003 	and.w	r0, r0, #3
 80084b2:	2801      	cmp	r0, #1
 80084b4:	d008      	beq.n	80084c8 <sin+0x50>
 80084b6:	2802      	cmp	r0, #2
 80084b8:	d00d      	beq.n	80084d6 <sin+0x5e>
 80084ba:	b9b0      	cbnz	r0, 80084ea <sin+0x72>
 80084bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084c0:	ed9d 0b00 	vldr	d0, [sp]
 80084c4:	2001      	movs	r0, #1
 80084c6:	e7e4      	b.n	8008492 <sin+0x1a>
 80084c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084cc:	ed9d 0b00 	vldr	d0, [sp]
 80084d0:	f000 f95a 	bl	8008788 <__kernel_cos>
 80084d4:	e7e5      	b.n	80084a2 <sin+0x2a>
 80084d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084da:	ed9d 0b00 	vldr	d0, [sp]
 80084de:	2001      	movs	r0, #1
 80084e0:	f000 fc3e 	bl	8008d60 <__kernel_sin>
 80084e4:	eeb1 0b40 	vneg.f64	d0, d0
 80084e8:	e7db      	b.n	80084a2 <sin+0x2a>
 80084ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084ee:	ed9d 0b00 	vldr	d0, [sp]
 80084f2:	f000 f949 	bl	8008788 <__kernel_cos>
 80084f6:	e7f5      	b.n	80084e4 <sin+0x6c>
	...
 8008500:	3fe921fb 	.word	0x3fe921fb
 8008504:	7fefffff 	.word	0x7fefffff

08008508 <__ieee754_rem_pio2>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	eeb0 7b40 	vmov.f64	d7, d0
 800850e:	ee17 5a90 	vmov	r5, s15
 8008512:	4b97      	ldr	r3, [pc, #604]	; (8008770 <__ieee754_rem_pio2+0x268>)
 8008514:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008518:	429e      	cmp	r6, r3
 800851a:	b088      	sub	sp, #32
 800851c:	4604      	mov	r4, r0
 800851e:	dc07      	bgt.n	8008530 <__ieee754_rem_pio2+0x28>
 8008520:	2200      	movs	r2, #0
 8008522:	2300      	movs	r3, #0
 8008524:	ed84 0b00 	vstr	d0, [r4]
 8008528:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800852c:	2000      	movs	r0, #0
 800852e:	e01b      	b.n	8008568 <__ieee754_rem_pio2+0x60>
 8008530:	4b90      	ldr	r3, [pc, #576]	; (8008774 <__ieee754_rem_pio2+0x26c>)
 8008532:	429e      	cmp	r6, r3
 8008534:	dc3b      	bgt.n	80085ae <__ieee754_rem_pio2+0xa6>
 8008536:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800853a:	2d00      	cmp	r5, #0
 800853c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008730 <__ieee754_rem_pio2+0x228>
 8008540:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008544:	dd19      	ble.n	800857a <__ieee754_rem_pio2+0x72>
 8008546:	ee30 7b46 	vsub.f64	d7, d0, d6
 800854a:	429e      	cmp	r6, r3
 800854c:	d00e      	beq.n	800856c <__ieee754_rem_pio2+0x64>
 800854e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8008738 <__ieee754_rem_pio2+0x230>
 8008552:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008556:	ee37 7b45 	vsub.f64	d7, d7, d5
 800855a:	ed84 5b00 	vstr	d5, [r4]
 800855e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008562:	ed84 7b02 	vstr	d7, [r4, #8]
 8008566:	2001      	movs	r0, #1
 8008568:	b008      	add	sp, #32
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008740 <__ieee754_rem_pio2+0x238>
 8008570:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008574:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008748 <__ieee754_rem_pio2+0x240>
 8008578:	e7eb      	b.n	8008552 <__ieee754_rem_pio2+0x4a>
 800857a:	429e      	cmp	r6, r3
 800857c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008580:	d00e      	beq.n	80085a0 <__ieee754_rem_pio2+0x98>
 8008582:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8008738 <__ieee754_rem_pio2+0x230>
 8008586:	ee37 5b06 	vadd.f64	d5, d7, d6
 800858a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800858e:	ed84 5b00 	vstr	d5, [r4]
 8008592:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	ed84 7b02 	vstr	d7, [r4, #8]
 800859e:	e7e3      	b.n	8008568 <__ieee754_rem_pio2+0x60>
 80085a0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008740 <__ieee754_rem_pio2+0x238>
 80085a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80085a8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008748 <__ieee754_rem_pio2+0x240>
 80085ac:	e7eb      	b.n	8008586 <__ieee754_rem_pio2+0x7e>
 80085ae:	4b72      	ldr	r3, [pc, #456]	; (8008778 <__ieee754_rem_pio2+0x270>)
 80085b0:	429e      	cmp	r6, r3
 80085b2:	dc6e      	bgt.n	8008692 <__ieee754_rem_pio2+0x18a>
 80085b4:	f000 fc2c 	bl	8008e10 <fabs>
 80085b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80085bc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008750 <__ieee754_rem_pio2+0x248>
 80085c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80085c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80085c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80085cc:	ee17 0a90 	vmov	r0, s15
 80085d0:	eeb1 4b45 	vneg.f64	d4, d5
 80085d4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008730 <__ieee754_rem_pio2+0x228>
 80085d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80085dc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008738 <__ieee754_rem_pio2+0x230>
 80085e0:	281f      	cmp	r0, #31
 80085e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80085e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80085ea:	dc08      	bgt.n	80085fe <__ieee754_rem_pio2+0xf6>
 80085ec:	4b63      	ldr	r3, [pc, #396]	; (800877c <__ieee754_rem_pio2+0x274>)
 80085ee:	1e42      	subs	r2, r0, #1
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	42b3      	cmp	r3, r6
 80085f6:	d002      	beq.n	80085fe <__ieee754_rem_pio2+0xf6>
 80085f8:	ed84 6b00 	vstr	d6, [r4]
 80085fc:	e024      	b.n	8008648 <__ieee754_rem_pio2+0x140>
 80085fe:	ee16 3a90 	vmov	r3, s13
 8008602:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008606:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800860a:	2b10      	cmp	r3, #16
 800860c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008610:	ddf2      	ble.n	80085f8 <__ieee754_rem_pio2+0xf0>
 8008612:	eeb0 6b40 	vmov.f64	d6, d0
 8008616:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8008740 <__ieee754_rem_pio2+0x238>
 800861a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800861e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008622:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008626:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8008748 <__ieee754_rem_pio2+0x240>
 800862a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800862e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008632:	ee13 3a90 	vmov	r3, s7
 8008636:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b31      	cmp	r3, #49	; 0x31
 800863e:	dc17      	bgt.n	8008670 <__ieee754_rem_pio2+0x168>
 8008640:	eeb0 0b46 	vmov.f64	d0, d6
 8008644:	ed84 3b00 	vstr	d3, [r4]
 8008648:	ed94 6b00 	vldr	d6, [r4]
 800864c:	2d00      	cmp	r5, #0
 800864e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008652:	ee30 7b47 	vsub.f64	d7, d0, d7
 8008656:	ed84 7b02 	vstr	d7, [r4, #8]
 800865a:	da85      	bge.n	8008568 <__ieee754_rem_pio2+0x60>
 800865c:	eeb1 6b46 	vneg.f64	d6, d6
 8008660:	ed84 6b00 	vstr	d6, [r4]
 8008664:	eeb1 7b47 	vneg.f64	d7, d7
 8008668:	4240      	negs	r0, r0
 800866a:	ed84 7b02 	vstr	d7, [r4, #8]
 800866e:	e77b      	b.n	8008568 <__ieee754_rem_pio2+0x60>
 8008670:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8008758 <__ieee754_rem_pio2+0x250>
 8008674:	eeb0 0b46 	vmov.f64	d0, d6
 8008678:	eea4 0b03 	vfma.f64	d0, d4, d3
 800867c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008680:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8008760 <__ieee754_rem_pio2+0x258>
 8008684:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008688:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800868c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008690:	e7b2      	b.n	80085f8 <__ieee754_rem_pio2+0xf0>
 8008692:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <__ieee754_rem_pio2+0x278>)
 8008694:	429e      	cmp	r6, r3
 8008696:	dd06      	ble.n	80086a6 <__ieee754_rem_pio2+0x19e>
 8008698:	ee30 7b40 	vsub.f64	d7, d0, d0
 800869c:	ed80 7b02 	vstr	d7, [r0, #8]
 80086a0:	ed80 7b00 	vstr	d7, [r0]
 80086a4:	e742      	b.n	800852c <__ieee754_rem_pio2+0x24>
 80086a6:	1532      	asrs	r2, r6, #20
 80086a8:	ee10 0a10 	vmov	r0, s0
 80086ac:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80086b0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80086b4:	ec41 0b17 	vmov	d7, r0, r1
 80086b8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80086bc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8008768 <__ieee754_rem_pio2+0x260>
 80086c0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80086c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80086c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80086cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80086d0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80086d4:	a902      	add	r1, sp, #8
 80086d6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80086da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80086de:	ed8d 6b04 	vstr	d6, [sp, #16]
 80086e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80086e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086ea:	2603      	movs	r6, #3
 80086ec:	4608      	mov	r0, r1
 80086ee:	ed91 7b04 	vldr	d7, [r1, #16]
 80086f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fa:	4633      	mov	r3, r6
 80086fc:	f1a1 0108 	sub.w	r1, r1, #8
 8008700:	f106 36ff 	add.w	r6, r6, #4294967295
 8008704:	d0f3      	beq.n	80086ee <__ieee754_rem_pio2+0x1e6>
 8008706:	491f      	ldr	r1, [pc, #124]	; (8008784 <__ieee754_rem_pio2+0x27c>)
 8008708:	9101      	str	r1, [sp, #4]
 800870a:	2102      	movs	r1, #2
 800870c:	9100      	str	r1, [sp, #0]
 800870e:	4621      	mov	r1, r4
 8008710:	f000 f8a6 	bl	8008860 <__kernel_rem_pio2>
 8008714:	2d00      	cmp	r5, #0
 8008716:	f6bf af27 	bge.w	8008568 <__ieee754_rem_pio2+0x60>
 800871a:	ed94 7b00 	vldr	d7, [r4]
 800871e:	eeb1 7b47 	vneg.f64	d7, d7
 8008722:	ed84 7b00 	vstr	d7, [r4]
 8008726:	ed94 7b02 	vldr	d7, [r4, #8]
 800872a:	e79b      	b.n	8008664 <__ieee754_rem_pio2+0x15c>
 800872c:	f3af 8000 	nop.w
 8008730:	54400000 	.word	0x54400000
 8008734:	3ff921fb 	.word	0x3ff921fb
 8008738:	1a626331 	.word	0x1a626331
 800873c:	3dd0b461 	.word	0x3dd0b461
 8008740:	1a600000 	.word	0x1a600000
 8008744:	3dd0b461 	.word	0x3dd0b461
 8008748:	2e037073 	.word	0x2e037073
 800874c:	3ba3198a 	.word	0x3ba3198a
 8008750:	6dc9c883 	.word	0x6dc9c883
 8008754:	3fe45f30 	.word	0x3fe45f30
 8008758:	2e000000 	.word	0x2e000000
 800875c:	3ba3198a 	.word	0x3ba3198a
 8008760:	252049c1 	.word	0x252049c1
 8008764:	397b839a 	.word	0x397b839a
 8008768:	00000000 	.word	0x00000000
 800876c:	41700000 	.word	0x41700000
 8008770:	3fe921fb 	.word	0x3fe921fb
 8008774:	4002d97b 	.word	0x4002d97b
 8008778:	413921fb 	.word	0x413921fb
 800877c:	0800bf80 	.word	0x0800bf80
 8008780:	7fefffff 	.word	0x7fefffff
 8008784:	0800c000 	.word	0x0800c000

08008788 <__kernel_cos>:
 8008788:	ee10 1a90 	vmov	r1, s1
 800878c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008794:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008798:	da05      	bge.n	80087a6 <__kernel_cos+0x1e>
 800879a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800879e:	ee17 3a90 	vmov	r3, s15
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d03d      	beq.n	8008822 <__kernel_cos+0x9a>
 80087a6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80087aa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008828 <__kernel_cos+0xa0>
 80087ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008830 <__kernel_cos+0xa8>
 80087b2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80087b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008838 <__kernel_cos+0xb0>
 80087ba:	eea6 7b03 	vfma.f64	d7, d6, d3
 80087be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008840 <__kernel_cos+0xb8>
 80087c2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80087c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008848 <__kernel_cos+0xc0>
 80087ca:	4b23      	ldr	r3, [pc, #140]	; (8008858 <__kernel_cos+0xd0>)
 80087cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80087d0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008850 <__kernel_cos+0xc8>
 80087d4:	4299      	cmp	r1, r3
 80087d6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80087da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80087de:	ee26 5b03 	vmul.f64	d5, d6, d3
 80087e2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80087e6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80087ea:	eea3 6b05 	vfma.f64	d6, d3, d5
 80087ee:	dc04      	bgt.n	80087fa <__kernel_cos+0x72>
 80087f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80087f4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80087f8:	4770      	bx	lr
 80087fa:	4b18      	ldr	r3, [pc, #96]	; (800885c <__kernel_cos+0xd4>)
 80087fc:	4299      	cmp	r1, r3
 80087fe:	dc0d      	bgt.n	800881c <__kernel_cos+0x94>
 8008800:	2200      	movs	r2, #0
 8008802:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008806:	ec43 2b15 	vmov	d5, r2, r3
 800880a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800880e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008812:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008816:	ee30 0b47 	vsub.f64	d0, d0, d7
 800881a:	4770      	bx	lr
 800881c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008820:	e7f3      	b.n	800880a <__kernel_cos+0x82>
 8008822:	eeb0 0b44 	vmov.f64	d0, d4
 8008826:	4770      	bx	lr
 8008828:	be8838d4 	.word	0xbe8838d4
 800882c:	bda8fae9 	.word	0xbda8fae9
 8008830:	bdb4b1c4 	.word	0xbdb4b1c4
 8008834:	3e21ee9e 	.word	0x3e21ee9e
 8008838:	809c52ad 	.word	0x809c52ad
 800883c:	be927e4f 	.word	0xbe927e4f
 8008840:	19cb1590 	.word	0x19cb1590
 8008844:	3efa01a0 	.word	0x3efa01a0
 8008848:	16c15177 	.word	0x16c15177
 800884c:	bf56c16c 	.word	0xbf56c16c
 8008850:	5555554c 	.word	0x5555554c
 8008854:	3fa55555 	.word	0x3fa55555
 8008858:	3fd33332 	.word	0x3fd33332
 800885c:	3fe90000 	.word	0x3fe90000

08008860 <__kernel_rem_pio2>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	ed2d 8b06 	vpush	{d8-d10}
 8008868:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800886c:	469b      	mov	fp, r3
 800886e:	460f      	mov	r7, r1
 8008870:	4bcf      	ldr	r3, [pc, #828]	; (8008bb0 <__kernel_rem_pio2+0x350>)
 8008872:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8008874:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8008878:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800887c:	9000      	str	r0, [sp, #0]
 800887e:	f112 0f14 	cmn.w	r2, #20
 8008882:	bfa8      	it	ge
 8008884:	2318      	movge	r3, #24
 8008886:	f10b 31ff 	add.w	r1, fp, #4294967295
 800888a:	bfb8      	it	lt
 800888c:	2300      	movlt	r3, #0
 800888e:	f06f 0417 	mvn.w	r4, #23
 8008892:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8008b98 <__kernel_rem_pio2+0x338>
 8008896:	bfa4      	itt	ge
 8008898:	f1a2 0a03 	subge.w	sl, r2, #3
 800889c:	fb9a f3f3 	sdivge	r3, sl, r3
 80088a0:	fb03 4404 	mla	r4, r3, r4, r4
 80088a4:	1a5d      	subs	r5, r3, r1
 80088a6:	4414      	add	r4, r2
 80088a8:	eb09 0601 	add.w	r6, r9, r1
 80088ac:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80088b0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80088b4:	2200      	movs	r2, #0
 80088b6:	42b2      	cmp	r2, r6
 80088b8:	dd12      	ble.n	80088e0 <__kernel_rem_pio2+0x80>
 80088ba:	aa18      	add	r2, sp, #96	; 0x60
 80088bc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80088c0:	460e      	mov	r6, r1
 80088c2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80088c6:	f1cb 0a01 	rsb	sl, fp, #1
 80088ca:	eb0a 0006 	add.w	r0, sl, r6
 80088ce:	4581      	cmp	r9, r0
 80088d0:	db25      	blt.n	800891e <__kernel_rem_pio2+0xbe>
 80088d2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8008b98 <__kernel_rem_pio2+0x338>
 80088d6:	f8dd e000 	ldr.w	lr, [sp]
 80088da:	4615      	mov	r5, r2
 80088dc:	2000      	movs	r0, #0
 80088de:	e015      	b.n	800890c <__kernel_rem_pio2+0xac>
 80088e0:	42d5      	cmn	r5, r2
 80088e2:	d409      	bmi.n	80088f8 <__kernel_rem_pio2+0x98>
 80088e4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80088e8:	ee07 0a90 	vmov	s15, r0
 80088ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088f0:	eca8 7b02 	vstmia	r8!, {d7}
 80088f4:	3201      	adds	r2, #1
 80088f6:	e7de      	b.n	80088b6 <__kernel_rem_pio2+0x56>
 80088f8:	eeb0 7b46 	vmov.f64	d7, d6
 80088fc:	e7f8      	b.n	80088f0 <__kernel_rem_pio2+0x90>
 80088fe:	ecbe 5b02 	vldmia	lr!, {d5}
 8008902:	ed95 6b00 	vldr	d6, [r5]
 8008906:	3001      	adds	r0, #1
 8008908:	eea5 7b06 	vfma.f64	d7, d5, d6
 800890c:	4288      	cmp	r0, r1
 800890e:	f1a5 0508 	sub.w	r5, r5, #8
 8008912:	ddf4      	ble.n	80088fe <__kernel_rem_pio2+0x9e>
 8008914:	eca8 7b02 	vstmia	r8!, {d7}
 8008918:	3208      	adds	r2, #8
 800891a:	3601      	adds	r6, #1
 800891c:	e7d5      	b.n	80088ca <__kernel_rem_pio2+0x6a>
 800891e:	aa04      	add	r2, sp, #16
 8008920:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8008ba0 <__kernel_rem_pio2+0x340>
 8008924:	ed9f aba0 	vldr	d10, [pc, #640]	; 8008ba8 <__kernel_rem_pio2+0x348>
 8008928:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800892c:	9201      	str	r2, [sp, #4]
 800892e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8008932:	464e      	mov	r6, r9
 8008934:	ab90      	add	r3, sp, #576	; 0x240
 8008936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800893a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800893e:	ab04      	add	r3, sp, #16
 8008940:	4618      	mov	r0, r3
 8008942:	4632      	mov	r2, r6
 8008944:	2a00      	cmp	r2, #0
 8008946:	dc4e      	bgt.n	80089e6 <__kernel_rem_pio2+0x186>
 8008948:	4620      	mov	r0, r4
 800894a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800894e:	f000 fadf 	bl	8008f10 <scalbn>
 8008952:	eeb0 8b40 	vmov.f64	d8, d0
 8008956:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800895a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800895e:	f000 fa63 	bl	8008e28 <floor>
 8008962:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008966:	eea0 8b47 	vfms.f64	d8, d0, d7
 800896a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800896e:	2c00      	cmp	r4, #0
 8008970:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008974:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8008978:	ee38 8b40 	vsub.f64	d8, d8, d0
 800897c:	ee17 8a90 	vmov	r8, s15
 8008980:	dd46      	ble.n	8008a10 <__kernel_rem_pio2+0x1b0>
 8008982:	1e70      	subs	r0, r6, #1
 8008984:	aa04      	add	r2, sp, #16
 8008986:	f1c4 0c18 	rsb	ip, r4, #24
 800898a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800898e:	fa45 f20c 	asr.w	r2, r5, ip
 8008992:	4490      	add	r8, r2
 8008994:	fa02 f20c 	lsl.w	r2, r2, ip
 8008998:	1aad      	subs	r5, r5, r2
 800899a:	aa04      	add	r2, sp, #16
 800899c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80089a0:	f1c4 0217 	rsb	r2, r4, #23
 80089a4:	4115      	asrs	r5, r2
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	dd41      	ble.n	8008a2e <__kernel_rem_pio2+0x1ce>
 80089aa:	f04f 0c00 	mov.w	ip, #0
 80089ae:	f108 0801 	add.w	r8, r8, #1
 80089b2:	4660      	mov	r0, ip
 80089b4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80089b8:	4566      	cmp	r6, ip
 80089ba:	dc69      	bgt.n	8008a90 <__kernel_rem_pio2+0x230>
 80089bc:	2c00      	cmp	r4, #0
 80089be:	dd03      	ble.n	80089c8 <__kernel_rem_pio2+0x168>
 80089c0:	2c01      	cmp	r4, #1
 80089c2:	d076      	beq.n	8008ab2 <__kernel_rem_pio2+0x252>
 80089c4:	2c02      	cmp	r4, #2
 80089c6:	d07f      	beq.n	8008ac8 <__kernel_rem_pio2+0x268>
 80089c8:	2d02      	cmp	r5, #2
 80089ca:	d130      	bne.n	8008a2e <__kernel_rem_pio2+0x1ce>
 80089cc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80089d0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80089d4:	b358      	cbz	r0, 8008a2e <__kernel_rem_pio2+0x1ce>
 80089d6:	4620      	mov	r0, r4
 80089d8:	9102      	str	r1, [sp, #8]
 80089da:	f000 fa99 	bl	8008f10 <scalbn>
 80089de:	9902      	ldr	r1, [sp, #8]
 80089e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80089e4:	e023      	b.n	8008a2e <__kernel_rem_pio2+0x1ce>
 80089e6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80089ea:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80089ee:	3a01      	subs	r2, #1
 80089f0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80089f4:	ad68      	add	r5, sp, #416	; 0x1a0
 80089f6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80089fa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80089fe:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8008a02:	eca0 0a01 	vstmia	r0!, {s0}
 8008a06:	ed95 0b00 	vldr	d0, [r5]
 8008a0a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008a0e:	e799      	b.n	8008944 <__kernel_rem_pio2+0xe4>
 8008a10:	d105      	bne.n	8008a1e <__kernel_rem_pio2+0x1be>
 8008a12:	1e72      	subs	r2, r6, #1
 8008a14:	a804      	add	r0, sp, #16
 8008a16:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8008a1a:	15ed      	asrs	r5, r5, #23
 8008a1c:	e7c3      	b.n	80089a6 <__kernel_rem_pio2+0x146>
 8008a1e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008a22:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2a:	da2f      	bge.n	8008a8c <__kernel_rem_pio2+0x22c>
 8008a2c:	2500      	movs	r5, #0
 8008a2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a36:	f040 8087 	bne.w	8008b48 <__kernel_rem_pio2+0x2e8>
 8008a3a:	1e73      	subs	r3, r6, #1
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f04f 0c00 	mov.w	ip, #0
 8008a42:	4548      	cmp	r0, r9
 8008a44:	da47      	bge.n	8008ad6 <__kernel_rem_pio2+0x276>
 8008a46:	f1bc 0f00 	cmp.w	ip, #0
 8008a4a:	d070      	beq.n	8008b2e <__kernel_rem_pio2+0x2ce>
 8008a4c:	aa04      	add	r2, sp, #16
 8008a4e:	3c18      	subs	r4, #24
 8008a50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	d075      	beq.n	8008b44 <__kernel_rem_pio2+0x2e4>
 8008a58:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	f000 fa56 	bl	8008f10 <scalbn>
 8008a64:	9b00      	ldr	r3, [sp, #0]
 8008a66:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8008ba0 <__kernel_rem_pio2+0x340>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f280 80ac 	bge.w	8008bca <__kernel_rem_pio2+0x36a>
 8008a72:	4619      	mov	r1, r3
 8008a74:	2000      	movs	r0, #0
 8008a76:	2900      	cmp	r1, #0
 8008a78:	f2c0 80cd 	blt.w	8008c16 <__kernel_rem_pio2+0x3b6>
 8008a7c:	aa68      	add	r2, sp, #416	; 0x1a0
 8008a7e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8008a82:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8008b98 <__kernel_rem_pio2+0x338>
 8008a86:	4e4b      	ldr	r6, [pc, #300]	; (8008bb4 <__kernel_rem_pio2+0x354>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	e0b8      	b.n	8008bfe <__kernel_rem_pio2+0x39e>
 8008a8c:	2502      	movs	r5, #2
 8008a8e:	e78c      	b.n	80089aa <__kernel_rem_pio2+0x14a>
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	b948      	cbnz	r0, 8008aa8 <__kernel_rem_pio2+0x248>
 8008a94:	b11a      	cbz	r2, 8008a9e <__kernel_rem_pio2+0x23e>
 8008a96:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f10c 0c01 	add.w	ip, ip, #1
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	e787      	b.n	80089b8 <__kernel_rem_pio2+0x158>
 8008aa8:	ebae 0202 	sub.w	r2, lr, r2
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	4602      	mov	r2, r0
 8008ab0:	e7f5      	b.n	8008a9e <__kernel_rem_pio2+0x23e>
 8008ab2:	1e72      	subs	r2, r6, #1
 8008ab4:	ab04      	add	r3, sp, #16
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008abe:	f10d 0c10 	add.w	ip, sp, #16
 8008ac2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8008ac6:	e77f      	b.n	80089c8 <__kernel_rem_pio2+0x168>
 8008ac8:	1e72      	subs	r2, r6, #1
 8008aca:	ab04      	add	r3, sp, #16
 8008acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ad4:	e7f3      	b.n	8008abe <__kernel_rem_pio2+0x25e>
 8008ad6:	aa04      	add	r2, sp, #16
 8008ad8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008adc:	3801      	subs	r0, #1
 8008ade:	ea4c 0c02 	orr.w	ip, ip, r2
 8008ae2:	e7ae      	b.n	8008a42 <__kernel_rem_pio2+0x1e2>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	d0fa      	beq.n	8008ae4 <__kernel_rem_pio2+0x284>
 8008aee:	eb06 020b 	add.w	r2, r6, fp
 8008af2:	ad18      	add	r5, sp, #96	; 0x60
 8008af4:	1c73      	adds	r3, r6, #1
 8008af6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008afa:	4406      	add	r6, r0
 8008afc:	429e      	cmp	r6, r3
 8008afe:	f6ff af19 	blt.w	8008934 <__kernel_rem_pio2+0xd4>
 8008b02:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8008b06:	9d00      	ldr	r5, [sp, #0]
 8008b08:	ee07 0a90 	vmov	s15, r0
 8008b0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b10:	2000      	movs	r0, #0
 8008b12:	eca2 7b02 	vstmia	r2!, {d7}
 8008b16:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008b98 <__kernel_rem_pio2+0x338>
 8008b1a:	4694      	mov	ip, r2
 8008b1c:	4288      	cmp	r0, r1
 8008b1e:	dd09      	ble.n	8008b34 <__kernel_rem_pio2+0x2d4>
 8008b20:	a868      	add	r0, sp, #416	; 0x1a0
 8008b22:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8008b26:	ed80 7b00 	vstr	d7, [r0]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	e7e6      	b.n	8008afc <__kernel_rem_pio2+0x29c>
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	2001      	movs	r0, #1
 8008b32:	e7d8      	b.n	8008ae6 <__kernel_rem_pio2+0x286>
 8008b34:	ecb5 5b02 	vldmia	r5!, {d5}
 8008b38:	ed3c 6b02 	vldmdb	ip!, {d6}
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008b42:	e7eb      	b.n	8008b1c <__kernel_rem_pio2+0x2bc>
 8008b44:	3b01      	subs	r3, #1
 8008b46:	e781      	b.n	8008a4c <__kernel_rem_pio2+0x1ec>
 8008b48:	4260      	negs	r0, r4
 8008b4a:	eeb0 0b48 	vmov.f64	d0, d8
 8008b4e:	f000 f9df 	bl	8008f10 <scalbn>
 8008b52:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8008ba8 <__kernel_rem_pio2+0x348>
 8008b56:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5e:	db2b      	blt.n	8008bb8 <__kernel_rem_pio2+0x358>
 8008b60:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8008ba0 <__kernel_rem_pio2+0x340>
 8008b64:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008b68:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008b6c:	aa04      	add	r2, sp, #16
 8008b6e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008b72:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008b76:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	ee10 3a10 	vmov	r3, s0
 8008b80:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008b84:	ee17 2a10 	vmov	r2, s14
 8008b88:	1c73      	adds	r3, r6, #1
 8008b8a:	3418      	adds	r4, #24
 8008b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008b90:	e762      	b.n	8008a58 <__kernel_rem_pio2+0x1f8>
 8008b92:	bf00      	nop
 8008b94:	f3af 8000 	nop.w
	...
 8008ba4:	3e700000 	.word	0x3e700000
 8008ba8:	00000000 	.word	0x00000000
 8008bac:	41700000 	.word	0x41700000
 8008bb0:	0800c148 	.word	0x0800c148
 8008bb4:	0800c108 	.word	0x0800c108
 8008bb8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008bbc:	aa04      	add	r2, sp, #16
 8008bbe:	ee10 3a10 	vmov	r3, s0
 8008bc2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008bc6:	4633      	mov	r3, r6
 8008bc8:	e746      	b.n	8008a58 <__kernel_rem_pio2+0x1f8>
 8008bca:	a804      	add	r0, sp, #16
 8008bcc:	a968      	add	r1, sp, #416	; 0x1a0
 8008bce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008bd2:	9000      	str	r0, [sp, #0]
 8008bd4:	ee07 0a90 	vmov	s15, r0
 8008bd8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008bdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008be0:	3a01      	subs	r2, #1
 8008be2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008be6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008bea:	ed81 7b00 	vstr	d7, [r1]
 8008bee:	e73d      	b.n	8008a6c <__kernel_rem_pio2+0x20c>
 8008bf0:	ecb6 5b02 	vldmia	r6!, {d5}
 8008bf4:	ecb4 6b02 	vldmia	r4!, {d6}
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008bfe:	454a      	cmp	r2, r9
 8008c00:	dc01      	bgt.n	8008c06 <__kernel_rem_pio2+0x3a6>
 8008c02:	4290      	cmp	r0, r2
 8008c04:	daf4      	bge.n	8008bf0 <__kernel_rem_pio2+0x390>
 8008c06:	aa40      	add	r2, sp, #256	; 0x100
 8008c08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008c0c:	ed82 7b00 	vstr	d7, [r2]
 8008c10:	3901      	subs	r1, #1
 8008c12:	3001      	adds	r0, #1
 8008c14:	e72f      	b.n	8008a76 <__kernel_rem_pio2+0x216>
 8008c16:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8008c18:	2a02      	cmp	r2, #2
 8008c1a:	dc0a      	bgt.n	8008c32 <__kernel_rem_pio2+0x3d2>
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	dc5a      	bgt.n	8008cd6 <__kernel_rem_pio2+0x476>
 8008c20:	d039      	beq.n	8008c96 <__kernel_rem_pio2+0x436>
 8008c22:	f008 0007 	and.w	r0, r8, #7
 8008c26:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8008c2a:	ecbd 8b06 	vpop	{d8-d10}
 8008c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c32:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8008c34:	2a03      	cmp	r2, #3
 8008c36:	d1f4      	bne.n	8008c22 <__kernel_rem_pio2+0x3c2>
 8008c38:	aa40      	add	r2, sp, #256	; 0x100
 8008c3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f1a1 0108 	sub.w	r1, r1, #8
 8008c48:	dc52      	bgt.n	8008cf0 <__kernel_rem_pio2+0x490>
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	2901      	cmp	r1, #1
 8008c4e:	f1a2 0208 	sub.w	r2, r2, #8
 8008c52:	dc5d      	bgt.n	8008d10 <__kernel_rem_pio2+0x4b0>
 8008c54:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8008d58 <__kernel_rem_pio2+0x4f8>
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	dc69      	bgt.n	8008d30 <__kernel_rem_pio2+0x4d0>
 8008c5c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8008c60:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	d16c      	bne.n	8008d42 <__kernel_rem_pio2+0x4e2>
 8008c68:	ed87 5b00 	vstr	d5, [r7]
 8008c6c:	ed87 6b02 	vstr	d6, [r7, #8]
 8008c70:	ed87 7b04 	vstr	d7, [r7, #16]
 8008c74:	e7d5      	b.n	8008c22 <__kernel_rem_pio2+0x3c2>
 8008c76:	aa40      	add	r2, sp, #256	; 0x100
 8008c78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008c7c:	ed92 6b00 	vldr	d6, [r2]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	daf5      	bge.n	8008c76 <__kernel_rem_pio2+0x416>
 8008c8a:	b10d      	cbz	r5, 8008c90 <__kernel_rem_pio2+0x430>
 8008c8c:	eeb1 7b47 	vneg.f64	d7, d7
 8008c90:	ed87 7b00 	vstr	d7, [r7]
 8008c94:	e7c5      	b.n	8008c22 <__kernel_rem_pio2+0x3c2>
 8008c96:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008d58 <__kernel_rem_pio2+0x4f8>
 8008c9a:	e7f4      	b.n	8008c86 <__kernel_rem_pio2+0x426>
 8008c9c:	a940      	add	r1, sp, #256	; 0x100
 8008c9e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008ca2:	ed91 7b00 	vldr	d7, [r1]
 8008ca6:	3a01      	subs	r2, #1
 8008ca8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	daf5      	bge.n	8008c9c <__kernel_rem_pio2+0x43c>
 8008cb0:	b1ad      	cbz	r5, 8008cde <__kernel_rem_pio2+0x47e>
 8008cb2:	eeb1 7b46 	vneg.f64	d7, d6
 8008cb6:	ed87 7b00 	vstr	d7, [r7]
 8008cba:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8008cbe:	a942      	add	r1, sp, #264	; 0x108
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	da0c      	bge.n	8008ce4 <__kernel_rem_pio2+0x484>
 8008cca:	b10d      	cbz	r5, 8008cd0 <__kernel_rem_pio2+0x470>
 8008ccc:	eeb1 7b47 	vneg.f64	d7, d7
 8008cd0:	ed87 7b02 	vstr	d7, [r7, #8]
 8008cd4:	e7a5      	b.n	8008c22 <__kernel_rem_pio2+0x3c2>
 8008cd6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008d58 <__kernel_rem_pio2+0x4f8>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	e7e6      	b.n	8008cac <__kernel_rem_pio2+0x44c>
 8008cde:	eeb0 7b46 	vmov.f64	d7, d6
 8008ce2:	e7e8      	b.n	8008cb6 <__kernel_rem_pio2+0x456>
 8008ce4:	ecb1 6b02 	vldmia	r1!, {d6}
 8008ce8:	3201      	adds	r2, #1
 8008cea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008cee:	e7ea      	b.n	8008cc6 <__kernel_rem_pio2+0x466>
 8008cf0:	ed91 7b00 	vldr	d7, [r1]
 8008cf4:	ed91 5b02 	vldr	d5, [r1, #8]
 8008cf8:	3801      	subs	r0, #1
 8008cfa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008cfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d02:	ed81 6b00 	vstr	d6, [r1]
 8008d06:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008d0a:	ed81 7b02 	vstr	d7, [r1, #8]
 8008d0e:	e798      	b.n	8008c42 <__kernel_rem_pio2+0x3e2>
 8008d10:	ed92 7b00 	vldr	d7, [r2]
 8008d14:	ed92 5b02 	vldr	d5, [r2, #8]
 8008d18:	3901      	subs	r1, #1
 8008d1a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008d1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d22:	ed82 6b00 	vstr	d6, [r2]
 8008d26:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008d2a:	ed82 7b02 	vstr	d7, [r2, #8]
 8008d2e:	e78d      	b.n	8008c4c <__kernel_rem_pio2+0x3ec>
 8008d30:	aa40      	add	r2, sp, #256	; 0x100
 8008d32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008d36:	ed92 6b00 	vldr	d6, [r2]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008d40:	e78a      	b.n	8008c58 <__kernel_rem_pio2+0x3f8>
 8008d42:	eeb1 5b45 	vneg.f64	d5, d5
 8008d46:	eeb1 6b46 	vneg.f64	d6, d6
 8008d4a:	ed87 5b00 	vstr	d5, [r7]
 8008d4e:	eeb1 7b47 	vneg.f64	d7, d7
 8008d52:	ed87 6b02 	vstr	d6, [r7, #8]
 8008d56:	e78b      	b.n	8008c70 <__kernel_rem_pio2+0x410>
	...

08008d60 <__kernel_sin>:
 8008d60:	ee10 3a90 	vmov	r3, s1
 8008d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008d6c:	da04      	bge.n	8008d78 <__kernel_sin+0x18>
 8008d6e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008d72:	ee17 3a90 	vmov	r3, s15
 8008d76:	b35b      	cbz	r3, 8008dd0 <__kernel_sin+0x70>
 8008d78:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008d7c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008d80:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008dd8 <__kernel_sin+0x78>
 8008d84:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008de0 <__kernel_sin+0x80>
 8008d88:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008d8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008de8 <__kernel_sin+0x88>
 8008d90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008d94:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008df0 <__kernel_sin+0x90>
 8008d98:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008d9c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008df8 <__kernel_sin+0x98>
 8008da0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008da4:	b930      	cbnz	r0, 8008db4 <__kernel_sin+0x54>
 8008da6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008e00 <__kernel_sin+0xa0>
 8008daa:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008dae:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008db2:	4770      	bx	lr
 8008db4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008db8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008dbc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008dc0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008dc4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008e08 <__kernel_sin+0xa8>
 8008dc8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008dcc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	5acfd57c 	.word	0x5acfd57c
 8008ddc:	3de5d93a 	.word	0x3de5d93a
 8008de0:	8a2b9ceb 	.word	0x8a2b9ceb
 8008de4:	be5ae5e6 	.word	0xbe5ae5e6
 8008de8:	57b1fe7d 	.word	0x57b1fe7d
 8008dec:	3ec71de3 	.word	0x3ec71de3
 8008df0:	19c161d5 	.word	0x19c161d5
 8008df4:	bf2a01a0 	.word	0xbf2a01a0
 8008df8:	1110f8a6 	.word	0x1110f8a6
 8008dfc:	3f811111 	.word	0x3f811111
 8008e00:	55555549 	.word	0x55555549
 8008e04:	bfc55555 	.word	0xbfc55555
 8008e08:	55555549 	.word	0x55555549
 8008e0c:	3fc55555 	.word	0x3fc55555

08008e10 <fabs>:
 8008e10:	ec51 0b10 	vmov	r0, r1, d0
 8008e14:	ee10 2a10 	vmov	r2, s0
 8008e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e1c:	ec43 2b10 	vmov	d0, r2, r3
 8008e20:	4770      	bx	lr
 8008e22:	0000      	movs	r0, r0
 8008e24:	0000      	movs	r0, r0
	...

08008e28 <floor>:
 8008e28:	ee10 1a90 	vmov	r1, s1
 8008e2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e30:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008e34:	2b13      	cmp	r3, #19
 8008e36:	b530      	push	{r4, r5, lr}
 8008e38:	ee10 0a10 	vmov	r0, s0
 8008e3c:	ee10 5a10 	vmov	r5, s0
 8008e40:	dc31      	bgt.n	8008ea6 <floor+0x7e>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da15      	bge.n	8008e72 <floor+0x4a>
 8008e46:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008f00 <floor+0xd8>
 8008e4a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e4e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	dd07      	ble.n	8008e68 <floor+0x40>
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	da4e      	bge.n	8008efa <floor+0xd2>
 8008e5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e60:	4318      	orrs	r0, r3
 8008e62:	d001      	beq.n	8008e68 <floor+0x40>
 8008e64:	4928      	ldr	r1, [pc, #160]	; (8008f08 <floor+0xe0>)
 8008e66:	2000      	movs	r0, #0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	ec43 2b10 	vmov	d0, r2, r3
 8008e70:	e020      	b.n	8008eb4 <floor+0x8c>
 8008e72:	4a26      	ldr	r2, [pc, #152]	; (8008f0c <floor+0xe4>)
 8008e74:	411a      	asrs	r2, r3
 8008e76:	ea01 0402 	and.w	r4, r1, r2
 8008e7a:	4304      	orrs	r4, r0
 8008e7c:	d01a      	beq.n	8008eb4 <floor+0x8c>
 8008e7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008f00 <floor+0xd8>
 8008e82:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8e:	ddeb      	ble.n	8008e68 <floor+0x40>
 8008e90:	2900      	cmp	r1, #0
 8008e92:	bfbe      	ittt	lt
 8008e94:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008e98:	fa40 f303 	asrlt.w	r3, r0, r3
 8008e9c:	18c9      	addlt	r1, r1, r3
 8008e9e:	ea21 0102 	bic.w	r1, r1, r2
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	e7e0      	b.n	8008e68 <floor+0x40>
 8008ea6:	2b33      	cmp	r3, #51	; 0x33
 8008ea8:	dd05      	ble.n	8008eb6 <floor+0x8e>
 8008eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eae:	d101      	bne.n	8008eb4 <floor+0x8c>
 8008eb0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008eb4:	bd30      	pop	{r4, r5, pc}
 8008eb6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	40e2      	lsrs	r2, r4
 8008ec0:	4202      	tst	r2, r0
 8008ec2:	d0f7      	beq.n	8008eb4 <floor+0x8c>
 8008ec4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008f00 <floor+0xd8>
 8008ec8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008ecc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed4:	ddc8      	ble.n	8008e68 <floor+0x40>
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	da02      	bge.n	8008ee0 <floor+0xb8>
 8008eda:	2b14      	cmp	r3, #20
 8008edc:	d103      	bne.n	8008ee6 <floor+0xbe>
 8008ede:	3101      	adds	r1, #1
 8008ee0:	ea20 0002 	bic.w	r0, r0, r2
 8008ee4:	e7c0      	b.n	8008e68 <floor+0x40>
 8008ee6:	2401      	movs	r4, #1
 8008ee8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008eec:	fa04 f303 	lsl.w	r3, r4, r3
 8008ef0:	4418      	add	r0, r3
 8008ef2:	42a8      	cmp	r0, r5
 8008ef4:	bf38      	it	cc
 8008ef6:	1909      	addcc	r1, r1, r4
 8008ef8:	e7f2      	b.n	8008ee0 <floor+0xb8>
 8008efa:	2000      	movs	r0, #0
 8008efc:	4601      	mov	r1, r0
 8008efe:	e7b3      	b.n	8008e68 <floor+0x40>
 8008f00:	8800759c 	.word	0x8800759c
 8008f04:	7e37e43c 	.word	0x7e37e43c
 8008f08:	bff00000 	.word	0xbff00000
 8008f0c:	000fffff 	.word	0x000fffff

08008f10 <scalbn>:
 8008f10:	b082      	sub	sp, #8
 8008f12:	ed8d 0b00 	vstr	d0, [sp]
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f1c:	b9a2      	cbnz	r2, 8008f48 <scalbn+0x38>
 8008f1e:	9a00      	ldr	r2, [sp, #0]
 8008f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f24:	4313      	orrs	r3, r2
 8008f26:	d03a      	beq.n	8008f9e <scalbn+0x8e>
 8008f28:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8009000 <scalbn+0xf0>
 8008f2c:	4b40      	ldr	r3, [pc, #256]	; (8009030 <scalbn+0x120>)
 8008f2e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008f32:	4298      	cmp	r0, r3
 8008f34:	ed8d 7b00 	vstr	d7, [sp]
 8008f38:	da11      	bge.n	8008f5e <scalbn+0x4e>
 8008f3a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8009008 <scalbn+0xf8>
 8008f3e:	ed9d 6b00 	vldr	d6, [sp]
 8008f42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f46:	e007      	b.n	8008f58 <scalbn+0x48>
 8008f48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f4c:	428a      	cmp	r2, r1
 8008f4e:	d10a      	bne.n	8008f66 <scalbn+0x56>
 8008f50:	ed9d 7b00 	vldr	d7, [sp]
 8008f54:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008f58:	ed8d 7b00 	vstr	d7, [sp]
 8008f5c:	e01f      	b.n	8008f9e <scalbn+0x8e>
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f64:	3a36      	subs	r2, #54	; 0x36
 8008f66:	4402      	add	r2, r0
 8008f68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f6c:	428a      	cmp	r2, r1
 8008f6e:	dd0a      	ble.n	8008f86 <scalbn+0x76>
 8008f70:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009010 <scalbn+0x100>
 8008f74:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009018 <scalbn+0x108>
 8008f78:	eeb0 6b47 	vmov.f64	d6, d7
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	fe27 7b05 	vselge.f64	d7, d7, d5
 8008f84:	e7dd      	b.n	8008f42 <scalbn+0x32>
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	dd0d      	ble.n	8008fa6 <scalbn+0x96>
 8008f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f96:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f9e:	ed9d 0b00 	vldr	d0, [sp]
 8008fa2:	b002      	add	sp, #8
 8008fa4:	4770      	bx	lr
 8008fa6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008faa:	da18      	bge.n	8008fde <scalbn+0xce>
 8008fac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fb0:	4298      	cmp	r0, r3
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fb8:	dd09      	ble.n	8008fce <scalbn+0xbe>
 8008fba:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009010 <scalbn+0x100>
 8008fbe:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8009018 <scalbn+0x108>
 8008fc2:	eeb0 6b47 	vmov.f64	d6, d7
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8008fcc:	e7b9      	b.n	8008f42 <scalbn+0x32>
 8008fce:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009008 <scalbn+0xf8>
 8008fd2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8009020 <scalbn+0x110>
 8008fd6:	eeb0 6b47 	vmov.f64	d6, d7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	e7f4      	b.n	8008fc8 <scalbn+0xb8>
 8008fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fe6:	3236      	adds	r2, #54	; 0x36
 8008fe8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ff0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8009028 <scalbn+0x118>
 8008ff4:	ec41 0b17 	vmov	d7, r0, r1
 8008ff8:	e7a3      	b.n	8008f42 <scalbn+0x32>
 8008ffa:	bf00      	nop
 8008ffc:	f3af 8000 	nop.w
 8009000:	00000000 	.word	0x00000000
 8009004:	43500000 	.word	0x43500000
 8009008:	c2f8f359 	.word	0xc2f8f359
 800900c:	01a56e1f 	.word	0x01a56e1f
 8009010:	8800759c 	.word	0x8800759c
 8009014:	7e37e43c 	.word	0x7e37e43c
 8009018:	8800759c 	.word	0x8800759c
 800901c:	fe37e43c 	.word	0xfe37e43c
 8009020:	c2f8f359 	.word	0xc2f8f359
 8009024:	81a56e1f 	.word	0x81a56e1f
 8009028:	00000000 	.word	0x00000000
 800902c:	3c900000 	.word	0x3c900000
 8009030:	ffff3cb0 	.word	0xffff3cb0

08009034 <_init>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr

08009040 <_fini>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	bf00      	nop
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr
