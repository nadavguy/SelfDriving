
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000091fc  08014758  08014758  00024758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d954  0801d954  0003a37c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d954  0801d954  0002d954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d95c  0801d95c  0003a37c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d95c  0801d95c  0002d95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d960  0801d960  0002d960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2bc  24000000  0801d964  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2bc  08027c20  0003a2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a31c  08027c80  0003a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005324  2400a37c  08027ce0  0003a37c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400f6a0  08027ce0  0003f6a0  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  08027ce0  00040000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0003a37c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006ef86  00000000  00000000  0003a3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a0c9  00000000  00000000  000a9330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002608  00000000  00000000  000b3400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002280  00000000  00000000  000b5a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004a223  00000000  00000000  000b7c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00043505  00000000  00000000  00101eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019a126  00000000  00000000  001453b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  002df4d6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b128  00000000  00000000  002df52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a37c 	.word	0x2400a37c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014740 	.word	0x08014740

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a380 	.word	0x2400a380
 80002dc:	08014740 	.word	0x08014740

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400a560 	.word	0x2400a560
 8000acc:	2400a398 	.word	0x2400a398
 8000ad0:	2400a5a8 	.word	0x2400a5a8

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f00c fafd 	bl	800d0d8 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400a5a8 	.word	0x2400a5a8
 8000b00:	2400a564 	.word	0x2400a564
 8000b04:	2400a560 	.word	0x2400a560

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400a564 	.word	0x2400a564

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f00c faac 	bl	800d09c <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400a568 	.word	0x2400a568
 8000b60:	2400a564 	.word	0x2400a564

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00f f989 	bl	800fe98 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400a55c 	.word	0x2400a55c
 8000b94:	2400a398 	.word	0x2400a398

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_ETH_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ETH_Init+0x90>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	22e1      	movs	r2, #225	; 0xe1
 8000cf0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_ETH_Init+0x98>)
 8000d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_ETH_Init+0x9c>)
 8000d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d2c:	f001 fb66 	bl	80023fc <HAL_ETH_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fc54 	bl	80015e2 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3a:	2234      	movs	r2, #52	; 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d40:	f00f f8d2 	bl	800fee8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2400a454 	.word	0x2400a454
 8000d60:	40028000 	.word	0x40028000
 8000d64:	2400a31c 	.word	0x2400a31c
 8000d68:	2400a2bc 	.word	0x2400a2bc
 8000d6c:	2400a4dc 	.word	0x2400a4dc

08000d70 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <HAL_ETH_MspInit+0x184>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 80ab 	bne.w	8000eea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9a:	4a57      	ldr	r2, [pc, #348]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd6:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a40      	ldr	r2, [pc, #256]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_ETH_MspInit+0x18c>)
 8000e82:	f001 fed1 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e86:	2386      	movs	r3, #134	; 0x86
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e96:	230b      	movs	r3, #11
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_ETH_MspInit+0x190>)
 8000ea2:	f001 fec1 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <HAL_ETH_MspInit+0x194>)
 8000ec4:	f001 feb0 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000ee6:	f001 fe9f 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	; 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40028000 	.word	0x40028000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020800 	.word	0x58020800
 8000f00:	58020000 	.word	0x58020000
 8000f04:	58020400 	.word	0x58020400
 8000f08:	58021800 	.word	0x58021800

08000f0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b47      	ldr	r3, [pc, #284]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a42      	ldr	r2, [pc, #264]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a33      	ldr	r2, [pc, #204]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0x164>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <MX_GPIO_Init+0x168>)
 800101a:	f001 ffb5 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001026:	f001 ffaf 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x168>)
 8001044:	f001 fdf0 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001048:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001062:	f001 fde1 	bl	8002c28 <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58021400 	.word	0x58021400
 8001078:	58021800 	.word	0x58021800

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_I2C1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x7c>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001094:	2201      	movs	r2, #1
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b8:	f001 ffda 	bl	8003070 <HAL_I2C_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010c2:	f000 fa8e 	bl	80015e2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ca:	f002 f87b 	bl	80031c4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d4:	f000 fa85 	bl	80015e2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d8:	2100      	movs	r1, #0
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010dc:	f002 f8bd 	bl	800325a <HAL_I2CEx_ConfigDigitalFilter>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 fa7c 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400a510 	.word	0x2400a510
 80010f4:	40005400 	.word	0x40005400
 80010f8:	00301242 	.word	0x00301242

080010fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b8      	sub	sp, #224	; 0xe0
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22bc      	movs	r2, #188	; 0xbc
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00e fee3 	bl	800fee8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d149      	bne.n	80011c0 <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800112c:	2308      	movs	r3, #8
 800112e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fa28 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001146:	f000 fa4c 	bl	80015e2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL___ChassisMPU_Pin|I2C1_SDA___ChassisMPU_Pin;
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001180:	2304      	movs	r3, #4
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <HAL_I2C_MspInit+0xd4>)
 800118e:	f001 fd4b 	bl	8002c28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 80011a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	201f      	movs	r0, #31
 80011b6:	f001 f870 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ba:	201f      	movs	r0, #31
 80011bc:	f001 f887 	bl	80022ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37e0      	adds	r7, #224	; 0xe0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020400 	.word	0x58020400

080011d4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d101      	bne.n	80011ee <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <rpmsg_send+0x3c>)
 80011ec:	e00c      	b.n	8001208 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f6:	2301      	movs	r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f009 fcc7 	bl	800ab94 <rpmsg_send_offchannel_raw>
 8001206:	4603      	mov	r3, r0
					 len, true);
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	fffff829 	.word	0xfffff829

08001214 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2220      	movs	r2, #32
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f00f ffb9 	bl	80111a0 <strncpy>
	ept->addr = src;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 8001256:	f000 f99d 	bl	8001594 <MPU_Config>
	CPU_CACHE_Enable();
 800125a:	f000 f92d 	bl	80014b8 <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800125e:	e000      	b.n	8001262 <main+0x12>
	{
		asm("nop");
 8001260:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <main+0x140>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f8      	bne.n	8001260 <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fe63 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f89b 	bl	80013ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <main+0x140>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a44      	ldr	r2, [pc, #272]	; (8001390 <main+0x140>)
 800127e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <main+0x140>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 fe91 	bl	8002fbc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f001 fea7 	bl	8002ff0 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f7ff fe33 	bl	8000f0c <MX_GPIO_Init>
  MX_ETH_Init();
 80012a6:	f7ff fd11 	bl	8000ccc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012aa:	f000 fcad 	bl	8001c08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012ae:	f000 fd5d 	bl	8001d6c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012b2:	f7ff fee3 	bl	800107c <MX_I2C1_Init>
  MX_SPI3_Init();
 80012b6:	f000 f999 	bl	80015ec <MX_SPI3_Init>
  MX_TIM1_Init();
 80012ba:	f000 fbb7 	bl	8001a2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	MAILBOX_Init();
 80012be:	f00b fd35 	bl	800cd2c <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295
 80012d2:	4930      	ldr	r1, [pc, #192]	; (8001394 <main+0x144>)
 80012d4:	4830      	ldr	r0, [pc, #192]	; (8001398 <main+0x148>)
 80012d6:	f7ff ff9d 	bl	8001214 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80012da:	4930      	ldr	r1, [pc, #192]	; (800139c <main+0x14c>)
 80012dc:	2000      	movs	r0, #0
 80012de:	f00b fe47 	bl	800cf70 <MX_OPENAMP_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <main+0x9c>
	{
		Error_Handler();
 80012e8:	f000 f97b 	bl	80015e2 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 80012ec:	482a      	ldr	r0, [pc, #168]	; (8001398 <main+0x148>)
 80012ee:	f00b feff 	bl	800d0f0 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80012f2:	2204      	movs	r2, #4
 80012f4:	492a      	ldr	r1, [pc, #168]	; (80013a0 <main+0x150>)
 80012f6:	4828      	ldr	r0, [pc, #160]	; (8001398 <main+0x148>)
 80012f8:	f7ff ff6c 	bl	80011d4 <rpmsg_send>
 80012fc:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (status < 0)
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	da01      	bge.n	8001308 <main+0xb8>
	{
		Error_Handler();
 8001304:	f000 f96d 	bl	80015e2 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (message < 100)
 800130e:	e025      	b.n	800135c <main+0x10c>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 8001310:	f7ff fbe0 	bl	8000ad4 <receive_message>
 8001314:	4603      	mov	r3, r0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		char localT[32] = "";
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%d",message);
 8001334:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001338:	1d38      	adds	r0, r7, #4
 800133a:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <main+0x154>)
 800133c:	2120      	movs	r1, #32
 800133e:	f00f fec9 	bl	80110d4 <sniprintf>
//		ssd1306_SetCursor(0, 0);
//		ssd1306_WriteString(localT, Font_7x10, White);
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001342:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	4813      	ldr	r0, [pc, #76]	; (8001398 <main+0x148>)
 800134c:	f7ff ff42 	bl	80011d4 <rpmsg_send>
 8001350:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status < 0)
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	da01      	bge.n	800135c <main+0x10c>
		{
			Error_Handler();
 8001358:	f000 f943 	bl	80015e2 <Error_Handler>
	while (message < 100)
 800135c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001360:	2b63      	cmp	r3, #99	; 0x63
 8001362:	d9d5      	bls.n	8001310 <main+0xc0>
		}
	}

//	isPortrait = true;
	  screenInit();
 8001364:	f00a fe20 	bl	800bfa8 <screenInit>
	  screenClear();
 8001368:	f00a feec 	bl	800c144 <screenClear>
	renderCompleteFrame = true;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <main+0x158>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 8001372:	f7ff fbaf 	bl	8000ad4 <receive_message>
 8001376:	4603      	mov	r3, r0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		screenUpdate(true);
 800137e:	2001      	movs	r0, #1
 8001380:	f00b f864 	bl	800c44c <screenUpdate>
		displayNextFrame();
 8001384:	f00b ff58 	bl	800d238 <displayNextFrame>
		message = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		message = receive_message();
 800138e:	e7f0      	b.n	8001372 <main+0x122>
 8001390:	58024400 	.word	0x58024400
 8001394:	08014758 	.word	0x08014758
 8001398:	2400a568 	.word	0x2400a568
 800139c:	08000b29 	.word	0x08000b29
 80013a0:	2400a39c 	.word	0x2400a39c
 80013a4:	08014770 	.word	0x08014770
 80013a8:	2400a3ab 	.word	0x2400a3ab

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b09c      	sub	sp, #112	; 0x70
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	224c      	movs	r2, #76	; 0x4c
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00e fd94 	bl	800fee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2220      	movs	r2, #32
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00e fd8e 	bl	800fee8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013cc:	2004      	movs	r0, #4
 80013ce:	f002 f8d9 	bl	8003584 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <SystemClock_Config+0x100>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	4a34      	ldr	r2, [pc, #208]	; (80014ac <SystemClock_Config+0x100>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <SystemClock_Config+0x100>)
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <SystemClock_Config+0x104>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013f4:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <SystemClock_Config+0x104>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <SystemClock_Config+0x104>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001408:	bf00      	nop
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <SystemClock_Config+0x104>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001416:	d1f8      	bne.n	800140a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <SystemClock_Config+0x108>)
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	f023 0303 	bic.w	r3, r3, #3
 8001420:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <SystemClock_Config+0x108>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800142c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	2302      	movs	r3, #2
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800143e:	2312      	movs	r3, #18
 8001440:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800144e:	230c      	movs	r3, #12
 8001450:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001452:	2302      	movs	r3, #2
 8001454:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001456:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800145a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4618      	mov	r0, r3
 8001462:	f002 f8f9 	bl	8003658 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800146c:	f000 f8b9 	bl	80015e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	233f      	movs	r3, #63	; 0x3f
 8001472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2303      	movs	r3, #3
 8001476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001484:	2340      	movs	r3, #64	; 0x40
 8001486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2101      	movs	r1, #1
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fcef 	bl	8003e78 <HAL_RCC_ClockConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80014a0:	f000 f89f 	bl	80015e2 <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3770      	adds	r7, #112	; 0x70
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58000400 	.word	0x58000400
 80014b0:	58024800 	.word	0x58024800
 80014b4:	58024400 	.word	0x58024400

080014b8 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d11b      	bne.n	8001502 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014ca:	f3bf 8f4f 	dsb	sy
}
 80014ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014d0:	f3bf 8f6f 	isb	sy
}
 80014d4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014de:	f3bf 8f4f 	dsb	sy
}
 80014e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e4:	f3bf 8f6f 	isb	sy
}
 80014e8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a28      	ldr	r2, [pc, #160]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f6:	f3bf 8f4f 	dsb	sy
}
 80014fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fc:	f3bf 8f6f 	isb	sy
}
 8001500:	e000      	b.n	8001504 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001502:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d138      	bne.n	8001582 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 8001512:	2200      	movs	r2, #0
 8001514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001518:	f3bf 8f4f 	dsb	sy
}
 800151c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 8001520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001524:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	0b5b      	lsrs	r3, r3, #13
 800152a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800152e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001538:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001542:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001548:	4911      	ldr	r1, [pc, #68]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 800154a:	4313      	orrs	r3, r2
 800154c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ef      	bne.n	800153a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <CPU_CACHE_Enable+0xd8>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001576:	f3bf 8f4f 	dsb	sy
}
 800157a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157c:	f3bf 8f6f 	isb	sy
}
 8001580:	e000      	b.n	8001584 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001582:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 800159a:	f000 feb3 	bl	8002304 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800159e:	2301      	movs	r3, #1
 80015a0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 80015a2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80015a6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80015a8:	230f      	movs	r3, #15
 80015aa:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80015ac:	2303      	movs	r3, #3
 80015ae:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015bc:	2300      	movs	r3, #0
 80015be:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015cc:	463b      	mov	r3, r7
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fed0 	bl	8002374 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015d4:	2004      	movs	r0, #4
 80015d6:	f000 fead 	bl	8002334 <HAL_MPU_Enable>
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015e6:	b672      	cpsid	i
}
 80015e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015ea:	e7fe      	b.n	80015ea <Error_Handler+0x8>

080015ec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_SPI3_Init+0xa4>)
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <MX_SPI3_Init+0xa8>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_SPI3_Init+0xa4>)
 80015f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001606:	2207      	movs	r2, #7
 8001608:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_SPI3_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001618:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800161c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001620:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001624:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_SPI3_Init+0xa4>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_SPI3_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_SPI3_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <MX_SPI3_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI3_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI3_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_SPI3_Init+0xa4>)
 800167e:	f004 fae9 	bl	8005c54 <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001688:	f7ff ffab 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2400a5bc 	.word	0x2400a5bc
 8001694:	40003c00 	.word	0x40003c00

08001698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0ba      	sub	sp, #232	; 0xe8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	22bc      	movs	r2, #188	; 0xbc
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00e fc15 	bl	800fee8 <memset>
  if(spiHandle->Instance==SPI3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <HAL_SPI_MspInit+0x108>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d166      	bne.n	8001796 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 ff5a 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016e2:	f7ff ff7e 	bl	80015e2 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 80016f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_SPI_MspInit+0x10c>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001740:	2304      	movs	r3, #4
 8001742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001758:	2307      	movs	r3, #7
 800175a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001762:	4619      	mov	r1, r3
 8001764:	4810      	ldr	r0, [pc, #64]	; (80017a8 <HAL_SPI_MspInit+0x110>)
 8001766:	f001 fa5f 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800176a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001784:	2306      	movs	r3, #6
 8001786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800178e:	4619      	mov	r1, r3
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <HAL_SPI_MspInit+0x114>)
 8001792:	f001 fa49 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001796:	bf00      	nop
 8001798:	37e8      	adds	r7, #232	; 0xe8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40003c00 	.word	0x40003c00
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58020400 	.word	0x58020400
 80017ac:	58020800 	.word	0x58020800

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_MspInit+0x5c>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_MspInit+0x5c>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_MspInit+0x5c>)
 80017c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2104      	movs	r1, #4
 80017d8:	2041      	movs	r0, #65	; 0x41
 80017da:	f000 fd5e 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80017de:	2041      	movs	r0, #65	; 0x41
 80017e0:	f000 fd75 	bl	80022ce <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2104      	movs	r1, #4
 80017e8:	207d      	movs	r0, #125	; 0x7d
 80017ea:	f000 fd56 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80017ee:	207d      	movs	r0, #125	; 0x7d
 80017f0:	f000 fd6d 	bl	80022ce <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2104      	movs	r1, #4
 80017f8:	2094      	movs	r0, #148	; 0x94
 80017fa:	f000 fd4e 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 80017fe:	2094      	movs	r0, #148	; 0x94
 8001800:	f000 fd65 	bl	80022ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	58024400 	.word	0x58024400

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 fbde 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <I2C1_EV_IRQHandler+0x10>)
 800186a:	f001 fc91 	bl	8003190 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2400a510 	.word	0x2400a510

08001878 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800188a:	f001 fbd7 	bl	800303c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}

08001892 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_kill>:

int _kill(int pid, int sig)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ba:	f00e faa1 	bl	800fe00 <__errno>
 80018be:	4603      	mov	r3, r0
 80018c0:	2216      	movs	r2, #22
 80018c2:	601a      	str	r2, [r3, #0]
	return -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_exit>:

void _exit (int status)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffe7 	bl	80018b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018e2:	e7fe      	b.n	80018e2 <_exit+0x12>

080018e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e00a      	b.n	800190c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018f6:	f3af 8000 	nop.w
 80018fa:	4601      	mov	r1, r0
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60ba      	str	r2, [r7, #8]
 8001902:	b2ca      	uxtb	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf0      	blt.n	80018f6 <_read+0x12>
	}

return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e009      	b.n	8001944 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf1      	blt.n	8001930 <_write+0x12>
	}
	return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_close>:

int _close(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	return -1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197e:	605a      	str	r2, [r3, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_isatty>:

int _isatty(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f00e fa06 	bl	800fe00 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24040000 	.word	0x24040000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	2400a3a0 	.word	0x2400a3a0
 8001a28:	2400f6a0 	.word	0x2400f6a0

08001a2c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b096      	sub	sp, #88	; 0x58
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	222c      	movs	r2, #44	; 0x2c
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00e fa45 	bl	800fee8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a60:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <MX_TIM1_Init+0x11c>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a66:	224b      	movs	r2, #75	; 0x4b
 8001a68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a8a:	482e      	ldr	r0, [pc, #184]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001a8c:	f004 fcbf 	bl	800640e <HAL_TIM_PWM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f7ff fda4 	bl	80015e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4825      	ldr	r0, [pc, #148]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001aae:	f005 faab 	bl	8007008 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ab8:	f7ff fd93 	bl	80015e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abc:	2360      	movs	r3, #96	; 0x60
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001ae4:	f004 fdf2 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001aee:	f7ff fd78 	bl	80015e2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001b28:	f005 faf6 	bl	8007118 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001b32:	f7ff fd56 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM1_Init+0x118>)
 8001b38:	f000 f82a 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 8001b3c:	bf00      	nop
 8001b3e:	3758      	adds	r7, #88	; 0x58
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	2400a644 	.word	0x2400a644
 8001b48:	40010000 	.word	0x40010000

08001b4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10e      	bne.n	8001b7c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_TIM_PWM_MspInit+0x40>)
 8001b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_TIM_PWM_MspInit+0x40>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_TIM_PWM_MspInit+0x40>)
 8001b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	58024400 	.word	0x58024400

08001b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_TIM_MspPostInit+0x6c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d11f      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_TIM_MspPostInit+0x70>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_TIM_MspPostInit+0x70>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_TIM_MspPostInit+0x70>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_CH1___LCD_Brightness_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <HAL_TIM_MspPostInit+0x74>)
 8001bee:	f001 f81b 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58021000 	.word	0x58021000

08001c08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_USART3_UART_Init+0x94>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c52:	f005 fadf 	bl	8007214 <HAL_UART_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c5c:	f7ff fcc1 	bl	80015e2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c64:	f006 fa2c 	bl	80080c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c6e:	f7ff fcb8 	bl	80015e2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c76:	f006 fa61 	bl	800813c <HAL_UARTEx_SetRxFifoThreshold>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c80:	f7ff fcaf 	bl	80015e2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c86:	f006 f9e2 	bl	800804e <HAL_UARTEx_DisableFifoMode>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c90:	f7ff fca7 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2400a690 	.word	0x2400a690
 8001c9c:	40004800 	.word	0x40004800

08001ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0b8      	sub	sp, #224	; 0xe0
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	22bc      	movs	r2, #188	; 0xbc
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00e f911 	bl	800fee8 <memset>
  if(uartHandle->Instance==USART3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_UART_MspInit+0xc0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d142      	bne.n	8001d56 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 fc56 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cea:	f7ff fc7a 	bl	80015e2 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_UART_MspInit+0xc4>)
 8001cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_UART_MspInit+0xc4>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_UART_MspInit+0xc4>)
 8001d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0xc4>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_UART_MspInit+0xc4>)
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0xc4>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d44:	2307      	movs	r3, #7
 8001d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_UART_MspInit+0xc8>)
 8001d52:	f000 ff69 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d56:	bf00      	nop
 8001d58:	37e0      	adds	r7, #224	; 0xe0
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40004800 	.word	0x40004800
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58020c00 	.word	0x58020c00

08001d6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d72:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001d74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d78:	2209      	movs	r2, #9
 8001d7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d7e:	2202      	movs	r2, #2
 8001d80:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001db4:	f001 fa9d 	bl	80032f2 <HAL_PCD_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001dbe:	f7ff fc10 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2400a720 	.word	0x2400a720
 8001dcc:	40080000 	.word	0x40080000

08001dd0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0b8      	sub	sp, #224	; 0xe0
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	22bc      	movs	r2, #188	; 0xbc
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00e f879 	bl	800fee8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <HAL_PCD_MspInit+0x108>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d166      	bne.n	8001ece <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001e0a:	2312      	movs	r3, #18
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001e12:	2303      	movs	r3, #3
 8001e14:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e1e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001e20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e24:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001e26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fbac 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001e3e:	f7ff fbd0 	bl	80015e2 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e42:	f001 fbf9 	bl	8003638 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_PCD_MspInit+0x10c>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_PCD_MspInit+0x10c>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_PCD_MspInit+0x10c>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e64:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e7e:	230a      	movs	r3, #10
 8001e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <HAL_PCD_MspInit+0x110>)
 8001e8c:	f000 fecc 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <HAL_PCD_MspInit+0x110>)
 8001eac:	f000 febc 	bl	8002c28 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_PCD_MspInit+0x10c>)
 8001eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_PCD_MspInit+0x10c>)
 8001eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ebc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_PCD_MspInit+0x10c>)
 8001ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ece:	bf00      	nop
 8001ed0:	37e0      	adds	r7, #224	; 0xe0
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40080000 	.word	0x40080000
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	58020000 	.word	0x58020000

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee8:	f7fe fe56 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	; (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f00d ff8d 	bl	800fe30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff f99b 	bl	8001250 <main>
  bx  lr
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001f20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f24:	2400a2bc 	.word	0x2400a2bc
  ldr r2, =_sidata
 8001f28:	0801d964 	.word	0x0801d964
  ldr r2, =_sbss
 8001f2c:	2400a37c 	.word	0x2400a37c
  ldr r4, =_ebss
 8001f30:	2400f6a0 	.word	0x2400f6a0

08001f34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC3_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f000 f9a0 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f44:	f002 f94e 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_Init+0x68>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	4913      	ldr	r1, [pc, #76]	; (8001fa4 <HAL_Init+0x6c>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_Init+0x68>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_Init+0x6c>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_Init+0x70>)
 8001f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_Init+0x74>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f814 	bl	8001fb0 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e002      	b.n	8001f98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f92:	f7ff fc0d 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	08014c9c 	.word	0x08014c9c
 8001fa8:	24000004 	.word	0x24000004
 8001fac:	24000000 	.word	0x24000000

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_InitTick+0x60>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e021      	b.n	8002008 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_InitTick+0x64>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_InitTick+0x60>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f985 	bl	80022ea <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 f94f 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x68>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2400000c 	.word	0x2400000c
 8002014:	24000000 	.word	0x24000000
 8002018:	24000008 	.word	0x24000008

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2400000c 	.word	0x2400000c
 8002040:	2400ab28 	.word	0x2400ab28

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2400ab28 	.word	0x2400ab28

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2400000c 	.word	0x2400000c

080020a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_GetREVID+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0c1b      	lsrs	r3, r3, #16
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	5c001000 	.word	0x5c001000

080020bc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	58000400 	.word	0x58000400

080020e4 <__NVIC_SetPriorityGrouping>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <__NVIC_SetPriorityGrouping+0x40>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	4313      	orrs	r3, r2
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x40>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	05fa0000 	.word	0x05fa0000

0800212c <__NVIC_GetPriorityGrouping>:
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff29 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a8:	f7ff ff40 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff ff90 	bl	80021d8 <NVIC_EncodePriority>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff5f 	bl	8002184 <__NVIC_SetPriority>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff33 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ffa4 	bl	8002240 <SysTick_Config>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002308:	f3bf 8f5f 	dmb	sy
}
 800230c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_MPU_Disable+0x28>)
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_MPU_Disable+0x28>)
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_MPU_Disable+0x2c>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	e000ed90 	.word	0xe000ed90

08002334 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_MPU_Enable+0x38>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_MPU_Enable+0x3c>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_MPU_Enable+0x3c>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002352:	f3bf 8f4f 	dsb	sy
}
 8002356:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002358:	f3bf 8f6f 	isb	sy
}
 800235c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed90 	.word	0xe000ed90
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	785a      	ldrb	r2, [r3, #1]
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_MPU_ConfigRegion+0x84>)
 8002382:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d029      	beq.n	80023e0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800238c:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <HAL_MPU_ConfigRegion+0x84>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7b1b      	ldrb	r3, [r3, #12]
 8002398:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7adb      	ldrb	r3, [r3, #11]
 800239e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7a9b      	ldrb	r3, [r3, #10]
 80023a6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7b5b      	ldrb	r3, [r3, #13]
 80023ae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7b9b      	ldrb	r3, [r3, #14]
 80023b6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7bdb      	ldrb	r3, [r3, #15]
 80023be:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7a5b      	ldrb	r3, [r3, #9]
 80023c6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7a1b      	ldrb	r3, [r3, #8]
 80023ce:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023d0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023da:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023dc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80023de:	e005      	b.n	80023ec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_MPU_ConfigRegion+0x84>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_MPU_ConfigRegion+0x84>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed90 	.word	0xe000ed90

080023fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0c6      	b.n	800259c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fcaa 	bl	8000d70 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2223      	movs	r2, #35	; 0x23
 8002420:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_ETH_Init+0x1a8>)
 8002424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002428:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_ETH_Init+0x1a8>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_ETH_Init+0x1a8>)
 8002434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7a1b      	ldrb	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff fe37 	bl	80020bc <HAL_SYSCFG_ETHInterfaceSelect>
 800244e:	e003      	b.n	8002458 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002450:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002454:	f7ff fe32 	bl	80020bc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002470:	f7ff fde8 	bl	8002044 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002476:	e00f      	b.n	8002498 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002478:	f7ff fde4 	bl	8002044 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002486:	d907      	bls.n	8002498 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	22e0      	movs	r2, #224	; 0xe0
 8002492:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e081      	b.n	800259c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1e6      	bne.n	8002478 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fac0 	bl	8002a30 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024b0:	f002 f812 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a3c      	ldr	r2, [pc, #240]	; (80025a8 <HAL_ETH_Init+0x1ac>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9a      	lsrs	r2, r3, #18
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3a01      	subs	r2, #1
 80024c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fa13 	bl	80028f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024e4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80024e8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	22e0      	movs	r2, #224	; 0xe0
 8002500:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e04a      	b.n	800259c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f241 1308 	movw	r3, #4360	; 0x1108
 800250e:	4413      	add	r3, r2
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_ETH_Init+0x1b0>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6952      	ldr	r2, [r2, #20]
 800251a:	0052      	lsls	r2, r2, #1
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	6809      	ldr	r1, [r1, #0]
 8002520:	431a      	orrs	r2, r3
 8002522:	f241 1308 	movw	r3, #4360	; 0x1108
 8002526:	440b      	add	r3, r1
 8002528:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fad8 	bl	8002ae0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fb1c 	bl	8002b6e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	3305      	adds	r3, #5
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	3303      	adds	r3, #3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	061a      	lsls	r2, r3, #24
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	3302      	adds	r3, #2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	3301      	adds	r3, #1
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002574:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002582:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002584:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2210      	movs	r2, #16
 8002592:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2210      	movs	r2, #16
 8002598:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	ffff8001 	.word	0xffff8001

080025b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80025c2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	791b      	ldrb	r3, [r3, #4]
 80025c8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80025ca:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7b1b      	ldrb	r3, [r3, #12]
 80025d0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80025d2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7b5b      	ldrb	r3, [r3, #13]
 80025d8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025da:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	7b9b      	ldrb	r3, [r3, #14]
 80025e0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80025e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	7bdb      	ldrb	r3, [r3, #15]
 80025e8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025ea:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	7c12      	ldrb	r2, [r2, #16]
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d102      	bne.n	80025fa <ETH_SetMACConfig+0x4a>
 80025f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x4c>
 80025fa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025fc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	7c52      	ldrb	r2, [r2, #17]
 8002602:	2a00      	cmp	r2, #0
 8002604:	d102      	bne.n	800260c <ETH_SetMACConfig+0x5c>
 8002606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800260a:	e000      	b.n	800260e <ETH_SetMACConfig+0x5e>
 800260c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800260e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7c9b      	ldrb	r3, [r3, #18]
 8002614:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002616:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800261c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002622:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	7f1b      	ldrb	r3, [r3, #28]
 8002628:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800262a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	7f5b      	ldrb	r3, [r3, #29]
 8002630:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002632:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	7f92      	ldrb	r2, [r2, #30]
 8002638:	2a00      	cmp	r2, #0
 800263a:	d102      	bne.n	8002642 <ETH_SetMACConfig+0x92>
 800263c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002640:	e000      	b.n	8002644 <ETH_SetMACConfig+0x94>
 8002642:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002644:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7fdb      	ldrb	r3, [r3, #31]
 800264a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800264c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002654:	2a00      	cmp	r2, #0
 8002656:	d102      	bne.n	800265e <ETH_SetMACConfig+0xae>
 8002658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265c:	e000      	b.n	8002660 <ETH_SetMACConfig+0xb0>
 800265e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002660:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002666:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800266e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002670:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b56      	ldr	r3, [pc, #344]	; (80027dc <ETH_SetMACConfig+0x22c>)
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	430b      	orrs	r3, r1
 800268c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800269a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800269c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80026a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026ae:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80026b0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d102      	bne.n	80026c2 <ETH_SetMACConfig+0x112>
 80026bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026c0:	e000      	b.n	80026c4 <ETH_SetMACConfig+0x114>
 80026c2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80026c4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <ETH_SetMACConfig+0x230>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	430b      	orrs	r3, r1
 80026e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <ETH_SetMACConfig+0x234>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	430b      	orrs	r3, r1
 8002704:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800270c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002712:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800271a:	2a00      	cmp	r2, #0
 800271c:	d101      	bne.n	8002722 <ETH_SetMACConfig+0x172>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	e000      	b.n	8002724 <ETH_SetMACConfig+0x174>
 8002722:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002724:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002736:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	68f9      	ldr	r1, [r7, #12]
 8002742:	430b      	orrs	r3, r1
 8002744:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800274c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002754:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f023 0103 	bic.w	r1, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	430a      	orrs	r2, r1
 800276e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800277a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002796:	2a00      	cmp	r2, #0
 8002798:	d101      	bne.n	800279e <ETH_SetMACConfig+0x1ee>
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	e000      	b.n	80027a0 <ETH_SetMACConfig+0x1f0>
 800279e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80027a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80027a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80027b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027c0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	00048083 	.word	0x00048083
 80027e0:	c0f88000 	.word	0xc0f88000
 80027e4:	fffffef0 	.word	0xfffffef0

080027e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <ETH_SetDMAConfig+0xf8>)
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	6809      	ldr	r1, [r1, #0]
 8002808:	431a      	orrs	r2, r3
 800280a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800280e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800281a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
 8002820:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	f241 0304 	movw	r3, #4100	; 0x1004
 800282e:	4413      	add	r3, r2
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <ETH_SetDMAConfig+0xfc>)
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6811      	ldr	r1, [r2, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	431a      	orrs	r2, r3
 800283e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002842:	440b      	add	r3, r1
 8002844:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7b5b      	ldrb	r3, [r3, #13]
 800284a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <ETH_SetDMAConfig+0x100>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6811      	ldr	r1, [r2, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	431a      	orrs	r2, r3
 800286a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800286e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7d1b      	ldrb	r3, [r3, #20]
 8002878:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800287a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7f5b      	ldrb	r3, [r3, #29]
 8002880:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f241 1304 	movw	r3, #4356	; 0x1104
 800288e:	4413      	add	r3, r2
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <ETH_SetDMAConfig+0x104>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6811      	ldr	r1, [r2, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	431a      	orrs	r2, r3
 800289e:	f241 1304 	movw	r3, #4356	; 0x1104
 80028a2:	440b      	add	r3, r1
 80028a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	7f1b      	ldrb	r3, [r3, #28]
 80028aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80028bc:	4413      	add	r3, r2
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <ETH_SetDMAConfig+0x108>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6811      	ldr	r1, [r2, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80028d0:	440b      	add	r3, r1
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	ffff87fd 	.word	0xffff87fd
 80028e4:	ffff2ffe 	.word	0xffff2ffe
 80028e8:	fffec000 	.word	0xfffec000
 80028ec:	ffc0efef 	.word	0xffc0efef
 80028f0:	7fc0ffff 	.word	0x7fc0ffff

080028f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0a4      	sub	sp, #144	; 0x90
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002902:	2300      	movs	r3, #0
 8002904:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800293c:	2300      	movs	r3, #0
 800293e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800294c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002950:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002958:	2300      	movs	r3, #0
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800296e:	2300      	movs	r3, #0
 8002970:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002972:	2300      	movs	r3, #0
 8002974:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002976:	2300      	movs	r3, #0
 8002978:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800298c:	2320      	movs	r3, #32
 800298e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800299e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029b0:	2302      	movs	r3, #2
 80029b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80029ce:	2300      	movs	r3, #0
 80029d0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fde6 	bl	80025b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029e8:	2301      	movs	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002a14:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fee1 	bl	80027e8 <ETH_SetDMAConfig>
}
 8002a26:	bf00      	nop
 8002a28:	3790      	adds	r7, #144	; 0x90
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a4a:	f001 fd45 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8002a4e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d908      	bls.n	8002a6a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d804      	bhi.n	8002a6a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e027      	b.n	8002aba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d908      	bls.n	8002a84 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d204      	bcs.n	8002a84 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e01a      	b.n	8002aba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d303      	bcc.n	8002a94 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d911      	bls.n	8002ab8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d908      	bls.n	8002aae <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d804      	bhi.n	8002aae <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e005      	b.n	8002aba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e000      	b.n	8002aba <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ab8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	01312cff 	.word	0x01312cff
 8002ad0:	02160ebf 	.word	0x02160ebf
 8002ad4:	03938700 	.word	0x03938700
 8002ad8:	05f5e0ff 	.word	0x05f5e0ff
 8002adc:	08f0d17f 	.word	0x08f0d17f

08002ae0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e01d      	b.n	8002b2a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68d9      	ldr	r1, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	3206      	adds	r2, #6
 8002b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d9de      	bls.n	8002aee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	f241 132c 	movw	r3, #4396	; 0x112c
 8002b3e:	4413      	add	r3, r2
 8002b40:	2203      	movs	r2, #3
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68d9      	ldr	r1, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002b50:	4413      	add	r3, r2
 8002b52:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e024      	b.n	8002bc6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6919      	ldr	r1, [r3, #16]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3310      	adds	r3, #16
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d9d7      	bls.n	8002b7c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f241 1330 	movw	r3, #4400	; 0x1130
 8002bf2:	4413      	add	r3, r2
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6919      	ldr	r1, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	f241 131c 	movw	r3, #4380	; 0x111c
 8002c04:	4413      	add	r3, r2
 8002c06:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f241 1328 	movw	r3, #4392	; 0x1128
 8002c18:	4413      	add	r3, r2
 8002c1a:	6019      	str	r1, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_GPIO_Init+0x234>)
 8002c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c3a:	e194      	b.n	8002f66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8186 	beq.w	8002f60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d00b      	beq.n	8002c74 <HAL_GPIO_Init+0x4c>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d007      	beq.n	8002c74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c68:	2b11      	cmp	r3, #17
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	d130      	bne.n	8002cd6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002caa:	2201      	movs	r2, #1
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0201 	and.w	r2, r3, #1
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0xee>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b12      	cmp	r3, #18
 8002d14:	d123      	bne.n	8002d5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0203 	and.w	r2, r3, #3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80e0 	beq.w	8002f60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_GPIO_Init+0x238>)
 8002da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_GPIO_Init+0x238>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_GPIO_Init+0x238>)
 8002db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <HAL_GPIO_Init+0x23c>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <HAL_GPIO_Init+0x240>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d052      	beq.n	8002e90 <HAL_GPIO_Init+0x268>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_GPIO_Init+0x244>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d031      	beq.n	8002e56 <HAL_GPIO_Init+0x22e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_GPIO_Init+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02b      	beq.n	8002e52 <HAL_GPIO_Init+0x22a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x24c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d025      	beq.n	8002e4e <HAL_GPIO_Init+0x226>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_GPIO_Init+0x250>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <HAL_GPIO_Init+0x222>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_GPIO_Init+0x254>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x21e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_GPIO_Init+0x258>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x21a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_GPIO_Init+0x25c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x216>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_GPIO_Init+0x260>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_GPIO_Init+0x264>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x20e>
 8002e32:	2309      	movs	r3, #9
 8002e34:	e02d      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e36:	230a      	movs	r3, #10
 8002e38:	e02b      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	e029      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e027      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e025      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e023      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e021      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e01f      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e01d      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e01b      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e5a:	bf00      	nop
 8002e5c:	58000080 	.word	0x58000080
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58000400 	.word	0x58000400
 8002e68:	58020000 	.word	0x58020000
 8002e6c:	58020400 	.word	0x58020400
 8002e70:	58020800 	.word	0x58020800
 8002e74:	58020c00 	.word	0x58020c00
 8002e78:	58021000 	.word	0x58021000
 8002e7c:	58021400 	.word	0x58021400
 8002e80:	58021800 	.word	0x58021800
 8002e84:	58021c00 	.word	0x58021c00
 8002e88:	58022000 	.word	0x58022000
 8002e8c:	58022400 	.word	0x58022400
 8002e90:	2300      	movs	r3, #0
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea2:	4938      	ldr	r1, [pc, #224]	; (8002f84 <HAL_GPIO_Init+0x35c>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3301      	adds	r3, #1
 8002f64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f47f ae63 	bne.w	8002c3c <HAL_GPIO_Init+0x14>
  }
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	3724      	adds	r7, #36	; 0x24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	58000400 	.word	0x58000400

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002fa4:	e003      	b.n	8002fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_HSEM_FastTake+0x2c>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3320      	adds	r3, #32
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_HSEM_FastTake+0x30>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	58026400 	.word	0x58026400
 8002fec:	80000300 	.word	0x80000300

08002ff0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002ffa:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_HSEM_Release+0x24>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	58026400 	.word	0x58026400

08003018 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_HSEM_ActivateNotification+0x20>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4904      	ldr	r1, [pc, #16]	; (8003038 <HAL_HSEM_ActivateNotification+0x20>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
#endif
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	58026500 	.word	0x58026500

0800303c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_HSEM_IRQHandler+0x30>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_HSEM_IRQHandler+0x30>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	43db      	mvns	r3, r3
 8003050:	4906      	ldr	r1, [pc, #24]	; (800306c <HAL_HSEM_IRQHandler+0x30>)
 8003052:	4013      	ands	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <HAL_HSEM_IRQHandler+0x30>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f009 fe55 	bl	800cd0c <HAL_HSEM_FreeCallback>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	58026500 	.word	0x58026500

08003070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe f830 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e006      	b.n	80030f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d104      	bne.n	800310a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_I2C_Init+0x11c>)
 8003116:	430b      	orrs	r3, r1
 8003118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69d9      	ldr	r1, [r3, #28]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	02008000 	.word	0x02008000

08003190 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
  }
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d138      	bne.n	800324c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e032      	b.n	800324e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	; 0x24
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003216:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	d139      	bne.n	80032e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800327a:	2302      	movs	r3, #2
 800327c:	e033      	b.n	80032e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2224      	movs	r2, #36	; 0x24
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f4:	b08f      	sub	sp, #60	; 0x3c
 80032f6:	af0a      	add	r7, sp, #40	; 0x28
 80032f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e116      	b.n	8003532 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fd56 	bl	8001dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 fff4 	bl	8008330 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	687e      	ldr	r6, [r7, #4]
 8003350:	466d      	mov	r5, sp
 8003352:	f106 0410 	add.w	r4, r6, #16
 8003356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003362:	e885 0003 	stmia.w	r5, {r0, r1}
 8003366:	1d33      	adds	r3, r6, #4
 8003368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336a:	6838      	ldr	r0, [r7, #0]
 800336c:	f004 ff72 	bl	8008254 <USB_CoreInit>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0d7      	b.n	8003532 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f004 ffe2 	bl	8008352 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
 8003392:	e04a      	b.n	800342a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	333d      	adds	r3, #61	; 0x3d
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	333c      	adds	r3, #60	; 0x3c
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	b298      	uxth	r0, r3
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3342      	adds	r3, #66	; 0x42
 80033d0:	4602      	mov	r2, r0
 80033d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	333f      	adds	r3, #63	; 0x3f
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3344      	adds	r3, #68	; 0x44
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3348      	adds	r3, #72	; 0x48
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3350      	adds	r3, #80	; 0x50
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	3301      	adds	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	d3af      	bcc.n	8003394 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e044      	b.n	80034c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	3301      	adds	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3b5      	bcc.n	800343a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	687e      	ldr	r6, [r7, #4]
 80034d6:	466d      	mov	r5, sp
 80034d8:	f106 0410 	add.w	r4, r6, #16
 80034dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ec:	1d33      	adds	r3, r6, #4
 80034ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f0:	6838      	ldr	r0, [r7, #0]
 80034f2:	f004 ff59 	bl	80083a8 <USB_DevInit>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e014      	b.n	8003532 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f80b 	bl	800353c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f005 f8fb 	bl	8008726 <USB_DevDisconnect>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800353c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_PCDEx_ActivateLPM+0x44>)
 800356c:	4313      	orrs	r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	10000003 	.word	0x10000003

08003584 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_PWREx_ConfigSupply+0xb0>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	2b06      	cmp	r3, #6
 8003596:	d00a      	beq.n	80035ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003598:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_PWREx_ConfigSupply+0xb0>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e03e      	b.n	800362c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_PWREx_ConfigSupply+0xb0>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80035b6:	491f      	ldr	r1, [pc, #124]	; (8003634 <HAL_PWREx_ConfigSupply+0xb0>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035be:	f7fe fd41 	bl	8002044 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035c4:	e009      	b.n	80035da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035c6:	f7fe fd3d 	bl	8002044 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d4:	d901      	bls.n	80035da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e028      	b.n	800362c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_PWREx_ConfigSupply+0xb0>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e6:	d1ee      	bne.n	80035c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b1e      	cmp	r3, #30
 80035ec:	d008      	beq.n	8003600 <HAL_PWREx_ConfigSupply+0x7c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b2e      	cmp	r3, #46	; 0x2e
 80035f2:	d005      	beq.n	8003600 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b1d      	cmp	r3, #29
 80035f8:	d002      	beq.n	8003600 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b2d      	cmp	r3, #45	; 0x2d
 80035fe:	d114      	bne.n	800362a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003600:	f7fe fd20 	bl	8002044 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003606:	e009      	b.n	800361c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003608:	f7fe fd1c 	bl	8002044 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003616:	d901      	bls.n	800361c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_PWREx_ConfigSupply+0xb0>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d1ee      	bne.n	8003608 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58024800 	.word	0x58024800

08003638 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	60d3      	str	r3, [r2, #12]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	58024800 	.word	0x58024800

08003658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e3ff      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8087 	beq.w	8003786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003678:	4b99      	ldr	r3, [pc, #612]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003682:	4b97      	ldr	r3, [pc, #604]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2b10      	cmp	r3, #16
 800368c:	d007      	beq.n	800369e <HAL_RCC_OscConfig+0x46>
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	2b18      	cmp	r3, #24
 8003692:	d110      	bne.n	80036b6 <HAL_RCC_OscConfig+0x5e>
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d10b      	bne.n	80036b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369e:	4b90      	ldr	r3, [pc, #576]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d06c      	beq.n	8003784 <HAL_RCC_OscConfig+0x12c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d168      	bne.n	8003784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e3d9      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x76>
 80036c0:	4b87      	ldr	r3, [pc, #540]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a86      	ldr	r2, [pc, #536]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e02e      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x98>
 80036d6:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a81      	ldr	r2, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7e      	ldr	r2, [pc, #504]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0xbc>
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a78      	ldr	r2, [pc, #480]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a75      	ldr	r2, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xd4>
 8003714:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a71      	ldr	r2, [pc, #452]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b6f      	ldr	r3, [pc, #444]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6e      	ldr	r2, [pc, #440]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fc86 	bl	8002044 <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe fc82 	bl	8002044 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e38d      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374e:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xe4>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe fc72 	bl	8002044 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fc6e 	bl	8002044 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e379      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003776:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x10c>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80ae 	beq.w	80038f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003794:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800379e:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_RCC_OscConfig+0x162>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	2b18      	cmp	r3, #24
 80037ae:	d13a      	bne.n	8003826 <HAL_RCC_OscConfig+0x1ce>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d135      	bne.n	8003826 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e34b      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	f7fe fc67 	bl	80020a4 <HAL_GetREVID>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80037dc:	4293      	cmp	r3, r2
 80037de:	d817      	bhi.n	8003810 <HAL_RCC_OscConfig+0x1b8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d108      	bne.n	80037fa <HAL_RCC_OscConfig+0x1a2>
 80037e8:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037f0:	4a3b      	ldr	r2, [pc, #236]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80037f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f8:	e07a      	b.n	80038f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	4935      	ldr	r1, [pc, #212]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800380e:	e06f      	b.n	80038f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	4930      	ldr	r1, [pc, #192]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	e064      	b.n	80038f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d045      	beq.n	80038ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800382e:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0219 	bic.w	r2, r3, #25
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	4929      	ldr	r1, [pc, #164]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe fc00 	bl	8002044 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003848:	f7fe fbfc 	bl	8002044 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e307      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003866:	f7fe fc1d 	bl	80020a4 <HAL_GetREVID>
 800386a:	4603      	mov	r3, r0
 800386c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003870:	4293      	cmp	r3, r2
 8003872:	d817      	bhi.n	80038a4 <HAL_RCC_OscConfig+0x24c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d108      	bne.n	800388e <HAL_RCC_OscConfig+0x236>
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003884:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388a:	6053      	str	r3, [r2, #4]
 800388c:	e030      	b.n	80038f0 <HAL_RCC_OscConfig+0x298>
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	031b      	lsls	r3, r3, #12
 800389c:	4910      	ldr	r1, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e025      	b.n	80038f0 <HAL_RCC_OscConfig+0x298>
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	490b      	ldr	r1, [pc, #44]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	e01a      	b.n	80038f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <HAL_RCC_OscConfig+0x288>)
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fe fbbd 	bl	8002044 <HAL_GetTick>
 80038ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ce:	f7fe fbb9 	bl	8002044 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d903      	bls.n	80038e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e2c4      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
 80038e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e4:	4ba4      	ldr	r3, [pc, #656]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ee      	bne.n	80038ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a9 	beq.w	8003a50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fe:	4b9e      	ldr	r3, [pc, #632]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003906:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003908:	4b9b      	ldr	r3, [pc, #620]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d007      	beq.n	8003924 <HAL_RCC_OscConfig+0x2cc>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b18      	cmp	r3, #24
 8003918:	d13a      	bne.n	8003990 <HAL_RCC_OscConfig+0x338>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d135      	bne.n	8003990 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003924:	4b94      	ldr	r3, [pc, #592]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x2e4>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e296      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800393c:	f7fe fbb2 	bl	80020a4 <HAL_GetREVID>
 8003940:	4603      	mov	r3, r0
 8003942:	f241 0203 	movw	r2, #4099	; 0x1003
 8003946:	4293      	cmp	r3, r2
 8003948:	d817      	bhi.n	800397a <HAL_RCC_OscConfig+0x322>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	2b20      	cmp	r3, #32
 8003950:	d108      	bne.n	8003964 <HAL_RCC_OscConfig+0x30c>
 8003952:	4b89      	ldr	r3, [pc, #548]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800395a:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 800395c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003960:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003962:	e075      	b.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003964:	4b84      	ldr	r3, [pc, #528]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	069b      	lsls	r3, r3, #26
 8003972:	4981      	ldr	r1, [pc, #516]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003978:	e06a      	b.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800397a:	4b7f      	ldr	r3, [pc, #508]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	497b      	ldr	r1, [pc, #492]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 800398a:	4313      	orrs	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398e:	e05f      	b.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d042      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003998:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a76      	ldr	r2, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 800399e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fe fb4e 	bl	8002044 <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039ac:	f7fe fb4a 	bl	8002044 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e255      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039be:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ca:	f7fe fb6b 	bl	80020a4 <HAL_GetREVID>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d817      	bhi.n	8003a08 <HAL_RCC_OscConfig+0x3b0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d108      	bne.n	80039f2 <HAL_RCC_OscConfig+0x39a>
 80039e0:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039e8:	4a63      	ldr	r2, [pc, #396]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 80039ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039ee:	6053      	str	r3, [r2, #4]
 80039f0:	e02e      	b.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
 80039f2:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	069b      	lsls	r3, r3, #26
 8003a00:	495d      	ldr	r1, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
 8003a06:	e023      	b.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
 8003a08:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	4958      	ldr	r1, [pc, #352]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
 8003a1c:	e018      	b.n	8003a50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a55      	ldr	r2, [pc, #340]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fb0b 	bl	8002044 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a32:	f7fe fb07 	bl	8002044 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e212      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a44:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d036      	beq.n	8003aca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d019      	beq.n	8003a98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a64:	4b44      	ldr	r3, [pc, #272]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	4a43      	ldr	r2, [pc, #268]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fe fae8 	bl	8002044 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fe fae4 	bl	8002044 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1ef      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x420>
 8003a96:	e018      	b.n	8003aca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9c:	4a36      	ldr	r2, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fe face 	bl	8002044 <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fe faca 	bl	8002044 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1d5      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d019      	beq.n	8003b12 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aea:	f7fe faab 	bl	8002044 <HAL_GetTick>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003af2:	f7fe faa7 	bl	8002044 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1b2      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x49a>
 8003b10:	e018      	b.n	8003b44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fa91 	bl	8002044 <HAL_GetTick>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b26:	f7fe fa8d 	bl	8002044 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e198      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_OscConfig+0x520>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8085 	beq.w	8003c5c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCC_OscConfig+0x524>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_OscConfig+0x524>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5e:	f7fe fa71 	bl	8002044 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b64:	e00c      	b.n	8003b80 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fe fa6d 	bl	8002044 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d905      	bls.n	8003b80 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e178      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <HAL_RCC_OscConfig+0x784>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ec      	beq.n	8003b66 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x54a>
 8003b94:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a91      	ldr	r2, [pc, #580]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	e02d      	b.n	8003bfe <HAL_RCC_OscConfig+0x5a6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x56c>
 8003baa:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a8c      	ldr	r2, [pc, #560]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a89      	ldr	r2, [pc, #548]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCC_OscConfig+0x5a6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCC_OscConfig+0x58e>
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a83      	ldr	r2, [pc, #524]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e00b      	b.n	8003bfe <HAL_RCC_OscConfig+0x5a6>
 8003be6:	4b7e      	ldr	r3, [pc, #504]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a7a      	ldr	r2, [pc, #488]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d015      	beq.n	8003c32 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fe fa1d 	bl	8002044 <HAL_GetTick>
 8003c0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fa19 	bl	8002044 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e122      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c24:	4b6e      	ldr	r3, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCC_OscConfig+0x5b6>
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fe fa07 	bl	8002044 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fa03 	bl	8002044 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e10c      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c50:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ee      	bne.n	8003c3a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8101 	beq.w	8003e68 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c66:	4b5e      	ldr	r3, [pc, #376]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c6e:	2b18      	cmp	r3, #24
 8003c70:	f000 80bc 	beq.w	8003dec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	f040 8095 	bne.w	8003da8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b58      	ldr	r3, [pc, #352]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a57      	ldr	r2, [pc, #348]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fe f9db 	bl	8002044 <HAL_GetTick>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c92:	f7fe f9d7 	bl	8002044 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0e2      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca4:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb0:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCC_OscConfig+0x78c>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	4946      	ldr	r1, [pc, #280]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	628b      	str	r3, [r1, #40]	; 0x28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	025b      	lsls	r3, r3, #9
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cfa:	4939      	ldr	r1, [pc, #228]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d00:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4a36      	ldr	r2, [pc, #216]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d0c:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCC_OscConfig+0x790>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d18:	00d2      	lsls	r2, r2, #3
 8003d1a:	4931      	ldr	r1, [pc, #196]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d20:	4b2f      	ldr	r3, [pc, #188]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f023 020c 	bic.w	r2, r3, #12
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	492c      	ldr	r1, [pc, #176]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d32:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	f023 0202 	bic.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4928      	ldr	r1, [pc, #160]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d44:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe f960 	bl	8002044 <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fe f95c 	bl	8002044 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e067      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x730>
 8003da6:	e05f      	b.n	8003e68 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe f946 	bl	8002044 <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe f942 	bl	8002044 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e04d      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_RCC_OscConfig+0x788>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x764>
 8003dda:	e045      	b.n	8003e68 <HAL_RCC_OscConfig+0x810>
 8003ddc:	58024800 	.word	0x58024800
 8003de0:	58024400 	.word	0x58024400
 8003de4:	fffffc0c 	.word	0xfffffc0c
 8003de8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_RCC_OscConfig+0x81c>)
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_RCC_OscConfig+0x81c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d031      	beq.n	8003e64 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0203 	and.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d12a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d122      	bne.n	8003e64 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d11a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0a5b      	lsrs	r3, r3, #9
 8003e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d111      	bne.n	8003e64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	0e1b      	lsrs	r3, r3, #24
 8003e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400

08003e78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e19c      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d910      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b87      	ldr	r3, [pc, #540]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 020f 	bic.w	r2, r3, #15
 8003ea2:	4985      	ldr	r1, [pc, #532]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b83      	ldr	r3, [pc, #524]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e184      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	4b7b      	ldr	r3, [pc, #492]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ed8:	4b78      	ldr	r3, [pc, #480]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4975      	ldr	r1, [pc, #468]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	4b70      	ldr	r3, [pc, #448]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f06:	4b6d      	ldr	r3, [pc, #436]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	496a      	ldr	r1, [pc, #424]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	4b64      	ldr	r3, [pc, #400]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f34:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	495e      	ldr	r1, [pc, #376]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d010      	beq.n	8003f74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d908      	bls.n	8003f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f62:	4b56      	ldr	r3, [pc, #344]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4953      	ldr	r1, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4b4d      	ldr	r3, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d908      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f023 020f 	bic.w	r2, r3, #15
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4947      	ldr	r1, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d055      	beq.n	800405a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4940      	ldr	r1, [pc, #256]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d121      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0f6      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe0:	4b36      	ldr	r3, [pc, #216]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0ea      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ff8:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0de      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0d6      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4925      	ldr	r1, [pc, #148]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8004026:	4313      	orrs	r3, r2
 8004028:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe f80b 	bl	8002044 <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004030:	e00a      	b.n	8004048 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004032:	f7fe f807 	bl	8002044 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e0be      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004048:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	429a      	cmp	r2, r3
 8004058:	d1eb      	bne.n	8004032 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	429a      	cmp	r2, r3
 8004074:	d208      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x244>)
 8004084:	4313      	orrs	r3, r2
 8004086:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d214      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	4906      	ldr	r1, [pc, #24]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <HAL_RCC_ClockConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e086      	b.n	80041c6 <HAL_RCC_ClockConfig+0x34e>
 80040b8:	52002000 	.word	0x52002000
 80040bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040dc:	4b3c      	ldr	r3, [pc, #240]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4939      	ldr	r1, [pc, #228]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	492e      	ldr	r1, [pc, #184]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004118:	4313      	orrs	r3, r2
 800411a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004134:	429a      	cmp	r2, r3
 8004136:	d208      	bcs.n	800414a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4922      	ldr	r1, [pc, #136]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004146:	4313      	orrs	r3, r2
 8004148:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004162:	429a      	cmp	r2, r3
 8004164:	d208      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004166:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	4917      	ldr	r1, [pc, #92]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004174:	4313      	orrs	r3, r2
 8004176:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004178:	f000 f834 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	4912      	ldr	r1, [pc, #72]	; (80041d4 <HAL_RCC_ClockConfig+0x35c>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
 8004194:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004196:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x358>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <HAL_RCC_ClockConfig+0x35c>)
 80041a0:	5cd3      	ldrb	r3, [r2, r3]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <HAL_RCC_ClockConfig+0x360>)
 80041ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041b0:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <HAL_RCC_ClockConfig+0x364>)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x368>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fef8 	bl	8001fb0 <HAL_InitTick>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	08014c9c 	.word	0x08014c9c
 80041d8:	24000004 	.word	0x24000004
 80041dc:	24000000 	.word	0x24000000
 80041e0:	24000008 	.word	0x24000008

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ea:	4bb3      	ldr	r3, [pc, #716]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f2:	2b18      	cmp	r3, #24
 80041f4:	f200 8155 	bhi.w	80044a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004265 	.word	0x08004265
 8004204:	080044a3 	.word	0x080044a3
 8004208:	080044a3 	.word	0x080044a3
 800420c:	080044a3 	.word	0x080044a3
 8004210:	080044a3 	.word	0x080044a3
 8004214:	080044a3 	.word	0x080044a3
 8004218:	080044a3 	.word	0x080044a3
 800421c:	080044a3 	.word	0x080044a3
 8004220:	0800428b 	.word	0x0800428b
 8004224:	080044a3 	.word	0x080044a3
 8004228:	080044a3 	.word	0x080044a3
 800422c:	080044a3 	.word	0x080044a3
 8004230:	080044a3 	.word	0x080044a3
 8004234:	080044a3 	.word	0x080044a3
 8004238:	080044a3 	.word	0x080044a3
 800423c:	080044a3 	.word	0x080044a3
 8004240:	08004291 	.word	0x08004291
 8004244:	080044a3 	.word	0x080044a3
 8004248:	080044a3 	.word	0x080044a3
 800424c:	080044a3 	.word	0x080044a3
 8004250:	080044a3 	.word	0x080044a3
 8004254:	080044a3 	.word	0x080044a3
 8004258:	080044a3 	.word	0x080044a3
 800425c:	080044a3 	.word	0x080044a3
 8004260:	08004297 	.word	0x08004297
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004264:	4b94      	ldr	r3, [pc, #592]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d009      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004270:	4b91      	ldr	r3, [pc, #580]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	4a90      	ldr	r2, [pc, #576]	; (80044bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
 8004280:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004282:	e111      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004284:	4b8d      	ldr	r3, [pc, #564]	; (80044bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004286:	61bb      	str	r3, [r7, #24]
    break;
 8004288:	e10e      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800428a:	4b8d      	ldr	r3, [pc, #564]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800428c:	61bb      	str	r3, [r7, #24]
    break;
 800428e:	e10b      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004290:	4b8c      	ldr	r3, [pc, #560]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004292:	61bb      	str	r3, [r7, #24]
    break;
 8004294:	e108      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004296:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042ac:	4b82      	ldr	r3, [pc, #520]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042b6:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	08db      	lsrs	r3, r3, #3
 80042bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80e1 	beq.w	800449c <HAL_RCC_GetSysClockFreq+0x2b8>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f000 8083 	beq.w	80043e8 <HAL_RCC_GetSysClockFreq+0x204>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f200 80a1 	bhi.w	800442c <HAL_RCC_GetSysClockFreq+0x248>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x114>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d056      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042f6:	e099      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042f8:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02d      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004304:	4b6c      	ldr	r3, [pc, #432]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	4a6b      	ldr	r2, [pc, #428]	; (80044bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004342:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800435e:	e087      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b51      	ldr	r3, [pc, #324]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a02 	vldr	s12, [r7, #8]
 8004386:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043a2:	e065      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043e6:	e043      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a02 	vldr	s12, [r7, #8]
 800440e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800442a:	e021      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004452:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800446e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	0a5b      	lsrs	r3, r3, #9
 8004476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800447a:	3301      	adds	r3, #1
 800447c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004488:	edd7 6a07 	vldr	s13, [r7, #28]
 800448c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004494:	ee17 3a90 	vmov	r3, s15
 8004498:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800449a:	e005      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
    break;
 80044a0:	e002      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a4:	61bb      	str	r3, [r7, #24]
    break;
 80044a6:	bf00      	nop
  }

  return sysclockfreq;
 80044a8:	69bb      	ldr	r3, [r7, #24]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400
 80044bc:	03d09000 	.word	0x03d09000
 80044c0:	003d0900 	.word	0x003d0900
 80044c4:	007a1200 	.word	0x007a1200
 80044c8:	46000000 	.word	0x46000000
 80044cc:	4c742400 	.word	0x4c742400
 80044d0:	4a742400 	.word	0x4a742400
 80044d4:	4af42400 	.word	0x4af42400

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044de:	f7ff fe81 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_GetHCLKFreq+0x50>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	490f      	ldr	r1, [pc, #60]	; (800452c <HAL_RCC_GetHCLKFreq+0x54>)
 80044f0:	5ccb      	ldrb	r3, [r1, r3]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_RCC_GetHCLKFreq+0x50>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	4a09      	ldr	r2, [pc, #36]	; (800452c <HAL_RCC_GetHCLKFreq+0x54>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_RCC_GetHCLKFreq+0x58>)
 8004514:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_RCC_GetHCLKFreq+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	58024400 	.word	0x58024400
 800452c:	08014c9c 	.word	0x08014c9c
 8004530:	24000004 	.word	0x24000004
 8004534:	24000000 	.word	0x24000000

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800453c:	f7ff ffcc 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	58024400 	.word	0x58024400
 8004560:	08014c9c 	.word	0x08014c9c

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004568:	f7ff ffb6 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCC_GetPCLK2Freq+0x28>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	58024400 	.word	0x58024400
 800458c:	08014c9c 	.word	0x08014c9c

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800459c:	2300      	movs	r3, #0
 800459e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d03f      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045b4:	d02a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045ba:	d824      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c0:	d018      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c6:	d81e      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d0:	d007      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045d2:	e018      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d4:	4bab      	ldr	r3, [pc, #684]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4aaa      	ldr	r2, [pc, #680]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045e0:	e015      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 f9cf 	bl	800598c <RCCEx_PLL2_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045f2:	e00c      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fa78 	bl	8005af0 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
      break;
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800460c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004614:	4b9b      	ldr	r3, [pc, #620]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004620:	4998      	ldr	r1, [pc, #608]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	650b      	str	r3, [r1, #80]	; 0x50
 8004626:	e001      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d03d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	2b04      	cmp	r3, #4
 800463e:	d826      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800465d 	.word	0x0800465d
 800464c:	0800466b 	.word	0x0800466b
 8004650:	0800467d 	.word	0x0800467d
 8004654:	08004695 	.word	0x08004695
 8004658:	08004695 	.word	0x08004695
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b89      	ldr	r3, [pc, #548]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a88      	ldr	r2, [pc, #544]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004668:	e015      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f98b 	bl	800598c <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800467a:	e00c      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3324      	adds	r3, #36	; 0x24
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f001 fa34 	bl	8005af0 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800468c:	e003      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	75fb      	strb	r3, [r7, #23]
      break;
 8004692:	e000      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800469c:	4b79      	ldr	r3, [pc, #484]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	f023 0207 	bic.w	r2, r3, #7
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	4976      	ldr	r1, [pc, #472]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	650b      	str	r3, [r1, #80]	; 0x50
 80046ae:	e001      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d042      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c8:	d02b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ce:	d825      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046d0:	2bc0      	cmp	r3, #192	; 0xc0
 80046d2:	d028      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046d4:	2bc0      	cmp	r3, #192	; 0xc0
 80046d6:	d821      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046d8:	2b80      	cmp	r3, #128	; 0x80
 80046da:	d016      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d81d      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d007      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80046e8:	e018      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ea:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046f6:	e017      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f944 	bl	800598c <RCCEx_PLL2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004708:	e00e      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3324      	adds	r3, #36	; 0x24
 800470e:	2100      	movs	r1, #0
 8004710:	4618      	mov	r0, r3
 8004712:	f001 f9ed 	bl	8005af0 <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800471a:	e005      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
      break;
 8004720:	e002      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800472e:	4b55      	ldr	r3, [pc, #340]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004732:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4952      	ldr	r1, [pc, #328]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	650b      	str	r3, [r1, #80]	; 0x50
 8004740:	e001      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	2b00      	cmp	r3, #0
 8004750:	d049      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800475c:	d030      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800475e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004762:	d82a      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004764:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004768:	d02c      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800476a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800476e:	d824      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004774:	d018      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477a:	d81e      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004784:	d007      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004786:	e018      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004788:	4b3e      	ldr	r3, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a3d      	ldr	r2, [pc, #244]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800478e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004794:	e017      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f001 f8f5 	bl	800598c <RCCEx_PLL2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047a6:	e00e      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3324      	adds	r3, #36	; 0x24
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f99e 	bl	8005af0 <RCCEx_PLL3_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b8:	e005      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047da:	492a      	ldr	r1, [pc, #168]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	658b      	str	r3, [r1, #88]	; 0x58
 80047e0:	e001      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
 80047e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04c      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047fc:	d030      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80047fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004802:	d82a      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004808:	d02c      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800480a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800480e:	d824      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004814:	d018      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481a:	d81e      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004824:	d007      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004826:	e018      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800482e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004834:	e017      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f001 f8a5 	bl	800598c <RCCEx_PLL2_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004846:	e00e      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f94e 	bl	8005af0 <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004858:	e005      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10d      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800487a:	4902      	ldr	r1, [pc, #8]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	658b      	str	r3, [r1, #88]	; 0x58
 8004880:	e004      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d032      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489c:	2b30      	cmp	r3, #48	; 0x30
 800489e:	d01c      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048a0:	2b30      	cmp	r3, #48	; 0x30
 80048a2:	d817      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d00c      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d813      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d016      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d10f      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b4:	4baf      	ldr	r3, [pc, #700]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4aae      	ldr	r2, [pc, #696]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048c0:	e00e      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 f85f 	bl	800598c <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048d2:	e005      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048e6:	4ba3      	ldr	r3, [pc, #652]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f2:	49a0      	ldr	r1, [pc, #640]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048f8:	e001      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d047      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d030      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004918:	d82a      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800491a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800491e:	d02c      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004924:	d824      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492a:	d018      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	d81e      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	d007      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800493c:	e018      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4b8d      	ldr	r3, [pc, #564]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a8c      	ldr	r2, [pc, #560]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800494a:	e017      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f81a 	bl	800598c <RCCEx_PLL2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800495c:	e00e      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3324      	adds	r3, #36	; 0x24
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f001 f8c3 	bl	8005af0 <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800496e:	e005      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	75fb      	strb	r3, [r7, #23]
      break;
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800497a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004982:	4b7c      	ldr	r3, [pc, #496]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	4979      	ldr	r1, [pc, #484]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	650b      	str	r3, [r1, #80]	; 0x50
 8004994:	e001      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d049      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ae:	d02e      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d828      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ba:	d02a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80049bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049c0:	d822      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049c6:	d026      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80049c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049cc:	d81c      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d2:	d010      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80049d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d8:	d816      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01d      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d111      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ffce 	bl	800598c <RCCEx_PLL2_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049f4:	e012      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3324      	adds	r3, #36	; 0x24
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 f877 	bl	8005af0 <RCCEx_PLL3_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a06:	e009      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e004      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a12:	bf00      	nop
 8004a14:	e002      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a22:	4b54      	ldr	r3, [pc, #336]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2e:	4951      	ldr	r1, [pc, #324]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	650b      	str	r3, [r1, #80]	; 0x50
 8004a34:	e001      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d04b      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a50:	d02e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a56:	d828      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d822      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a68:	d026      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a6e:	d81c      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a74:	d010      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7a:	d816      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a84:	d111      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff7d 	bl	800598c <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a96:	e012      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f826 	bl	8005af0 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004aa8:	e009      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	e006      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ab8:	bf00      	nop
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ad2:	4928      	ldr	r1, [pc, #160]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad8:	e001      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d02f      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af2:	d00e      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af8:	d814      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d015      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b02:	d10f      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2101      	movs	r1, #1
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 ff37 	bl	800598c <RCCEx_PLL2_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b3e:	490d      	ldr	r1, [pc, #52]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	650b      	str	r3, [r1, #80]	; 0x50
 8004b44:	e001      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d033      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d81c      	bhi.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b9f 	.word	0x08004b9f
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b87 	.word	0x08004b87
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4bb8      	ldr	r3, [pc, #736]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4ab7      	ldr	r2, [pc, #732]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b84:	e00c      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fefd 	bl	800598c <RCCEx_PLL2_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b96:	e003      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ba6:	4bad      	ldr	r3, [pc, #692]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	49aa      	ldr	r1, [pc, #680]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bb8:	e001      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8086 	beq.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bcc:	4ba4      	ldr	r3, [pc, #656]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4aa3      	ldr	r2, [pc, #652]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fa34 	bl	8002044 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bde:	e009      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be0:	f7fd fa30 	bl	8002044 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d902      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	75fb      	strb	r3, [r7, #23]
        break;
 8004bf2:	e005      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf4:	4b9a      	ldr	r3, [pc, #616]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d166      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c06:	4b95      	ldr	r3, [pc, #596]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c10:	4053      	eors	r3, r2
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d013      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c1a:	4b90      	ldr	r3, [pc, #576]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c24:	4b8d      	ldr	r3, [pc, #564]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a8c      	ldr	r2, [pc, #560]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c30:	4b8a      	ldr	r3, [pc, #552]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	4a89      	ldr	r2, [pc, #548]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c3c:	4a87      	ldr	r2, [pc, #540]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4c:	d115      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fd f9f9 	bl	8002044 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c54:	e00b      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fd f9f5 	bl	8002044 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d902      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c6c:	e005      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c6e:	4b7b      	ldr	r3, [pc, #492]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ed      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d126      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8e:	d10d      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004c90:	4b72      	ldr	r3, [pc, #456]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c9e:	0919      	lsrs	r1, r3, #4
 8004ca0:	4b70      	ldr	r3, [pc, #448]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	496d      	ldr	r1, [pc, #436]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	610b      	str	r3, [r1, #16]
 8004caa:	e005      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004cac:	4b6b      	ldr	r3, [pc, #428]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	4a6a      	ldr	r2, [pc, #424]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cb6:	6113      	str	r3, [r2, #16]
 8004cb8:	4b68      	ldr	r3, [pc, #416]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc6:	4965      	ldr	r1, [pc, #404]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	670b      	str	r3, [r1, #112]	; 0x70
 8004ccc:	e004      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	75bb      	strb	r3, [r7, #22]
 8004cd2:	e001      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d07e      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce8:	2b28      	cmp	r3, #40	; 0x28
 8004cea:	d867      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004dc3 	.word	0x08004dc3
 8004cf8:	08004dbd 	.word	0x08004dbd
 8004cfc:	08004dbd 	.word	0x08004dbd
 8004d00:	08004dbd 	.word	0x08004dbd
 8004d04:	08004dbd 	.word	0x08004dbd
 8004d08:	08004dbd 	.word	0x08004dbd
 8004d0c:	08004dbd 	.word	0x08004dbd
 8004d10:	08004dbd 	.word	0x08004dbd
 8004d14:	08004d99 	.word	0x08004d99
 8004d18:	08004dbd 	.word	0x08004dbd
 8004d1c:	08004dbd 	.word	0x08004dbd
 8004d20:	08004dbd 	.word	0x08004dbd
 8004d24:	08004dbd 	.word	0x08004dbd
 8004d28:	08004dbd 	.word	0x08004dbd
 8004d2c:	08004dbd 	.word	0x08004dbd
 8004d30:	08004dbd 	.word	0x08004dbd
 8004d34:	08004dab 	.word	0x08004dab
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004dbd 	.word	0x08004dbd
 8004d40:	08004dbd 	.word	0x08004dbd
 8004d44:	08004dbd 	.word	0x08004dbd
 8004d48:	08004dbd 	.word	0x08004dbd
 8004d4c:	08004dbd 	.word	0x08004dbd
 8004d50:	08004dbd 	.word	0x08004dbd
 8004d54:	08004dc3 	.word	0x08004dc3
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004dbd 	.word	0x08004dbd
 8004d60:	08004dbd 	.word	0x08004dbd
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004dbd 	.word	0x08004dbd
 8004d74:	08004dc3 	.word	0x08004dc3
 8004d78:	08004dbd 	.word	0x08004dbd
 8004d7c:	08004dbd 	.word	0x08004dbd
 8004d80:	08004dbd 	.word	0x08004dbd
 8004d84:	08004dbd 	.word	0x08004dbd
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004dbd 	.word	0x08004dbd
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	08004dc3 	.word	0x08004dc3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fdf4 	bl	800598c <RCCEx_PLL2_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004da8:	e00c      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3324      	adds	r3, #36	; 0x24
 8004dae:	2101      	movs	r1, #1
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe9d 	bl	8005af0 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dba:	e003      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd6:	4921      	ldr	r1, [pc, #132]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	654b      	str	r3, [r1, #84]	; 0x54
 8004ddc:	e001      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d03e      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d820      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e3f 	.word	0x08004e3f
 8004e00:	08004e15 	.word	0x08004e15
 8004e04:	08004e27 	.word	0x08004e27
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fdb6 	bl	800598c <RCCEx_PLL2_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e24:	e00c      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3324      	adds	r3, #36	; 0x24
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fe5f 	bl	8005af0 <RCCEx_PLL3_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d110      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f023 0207 	bic.w	r2, r3, #7
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	4902      	ldr	r1, [pc, #8]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	654b      	str	r3, [r1, #84]	; 0x54
 8004e58:	e008      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	58024800 	.word	0x58024800
 8004e64:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d039      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d820      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004ecb 	.word	0x08004ecb
 8004e8c:	08004ea1 	.word	0x08004ea1
 8004e90:	08004eb3 	.word	0x08004eb3
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ecb 	.word	0x08004ecb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fd70 	bl	800598c <RCCEx_PLL2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004eb0:	e00c      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3324      	adds	r3, #36	; 0x24
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fe19 	bl	8005af0 <RCCEx_PLL3_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ed2:	4bb7      	ldr	r3, [pc, #732]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f023 0207 	bic.w	r2, r3, #7
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	49b3      	ldr	r1, [pc, #716]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ee6:	e001      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d04b      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f02:	d02e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f08:	d828      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d02a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d822      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f1a:	d026      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f20:	d81c      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f26:	d010      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2c:	d816      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01d      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f36:	d111      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd24 	bl	800598c <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f48:	e012      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3324      	adds	r3, #36	; 0x24
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fdcd 	bl	8005af0 <RCCEx_PLL3_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f5a:	e009      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f62:	bf00      	nop
 8004f64:	e004      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f66:	bf00      	nop
 8004f68:	e002      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f76:	4b8e      	ldr	r3, [pc, #568]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f84:	498a      	ldr	r1, [pc, #552]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	654b      	str	r3, [r1, #84]	; 0x54
 8004f8a:	e001      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d04b      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fa2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fa6:	d02e      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004fa8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fac:	d828      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb2:	d02a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	d822      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fbe:	d026      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc4:	d81c      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d010      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd0:	d816      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01d      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d111      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fcd2 	bl	800598c <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fec:	e012      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3324      	adds	r3, #36	; 0x24
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fd7b 	bl	8005af0 <RCCEx_PLL3_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ffe:	e009      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	75fb      	strb	r3, [r7, #23]
      break;
 8005004:	e006      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005006:	bf00      	nop
 8005008:	e004      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800501a:	4b65      	ldr	r3, [pc, #404]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005028:	4961      	ldr	r1, [pc, #388]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800502a:	4313      	orrs	r3, r2
 800502c:	658b      	str	r3, [r1, #88]	; 0x58
 800502e:	e001      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d04b      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005046:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800504a:	d02e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800504c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005050:	d828      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005056:	d02a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505c:	d822      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800505e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005062:	d026      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005064:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005068:	d81c      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800506a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800506e:	d010      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d816      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01d      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800507a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507e:	d111      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fc80 	bl	800598c <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005090:	e012      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3324      	adds	r3, #36	; 0x24
 8005096:	2102      	movs	r1, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fd29 	bl	8005af0 <RCCEx_PLL3_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050a2:	e009      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	75fb      	strb	r3, [r7, #23]
      break;
 80050a8:	e006      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050aa:	bf00      	nop
 80050ac:	e004      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050be:	4b3c      	ldr	r3, [pc, #240]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050cc:	4938      	ldr	r1, [pc, #224]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	658b      	str	r3, [r1, #88]	; 0x58
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d10a      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3324      	adds	r3, #36	; 0x24
 80050f4:	2102      	movs	r1, #2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fcfa 	bl	8005af0 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005106:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005114:	4926      	ldr	r1, [pc, #152]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005116:	4313      	orrs	r3, r2
 8005118:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005130:	d10a      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3324      	adds	r3, #36	; 0x24
 8005136:	2102      	movs	r1, #2
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fcd9 	bl	8005af0 <RCCEx_PLL3_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005158:	4313      	orrs	r3, r2
 800515a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d036      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800516e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005172:	d01f      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005178:	d817      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005182:	d009      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005184:	e011      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fbfd 	bl	800598c <RCCEx_PLL2_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005196:	e00e      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3324      	adds	r3, #36	; 0x24
 800519c:	2102      	movs	r1, #2
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fca6 	bl	8005af0 <RCCEx_PLL3_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051a8:	e005      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
      break;
 80051ae:	e002      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80051b0:	58024400 	.word	0x58024400
      break;
 80051b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051ca:	4990      	ldr	r1, [pc, #576]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	658b      	str	r3, [r1, #88]	; 0x58
 80051d0:	e001      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d033      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051ec:	d01c      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80051ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051f2:	d816      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80051f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f8:	d003      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80051fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fe:	d007      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005200:	e00f      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005202:	4b82      	ldr	r3, [pc, #520]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	4a81      	ldr	r2, [pc, #516]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800520c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800520e:	e00c      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3324      	adds	r3, #36	; 0x24
 8005214:	2101      	movs	r1, #1
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fc6a 	bl	8005af0 <RCCEx_PLL3_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005230:	4b76      	ldr	r3, [pc, #472]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523e:	4973      	ldr	r1, [pc, #460]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	654b      	str	r3, [r1, #84]	; 0x54
 8005244:	e001      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d029      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d007      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005264:	e00f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005266:	4b69      	ldr	r3, [pc, #420]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	4a68      	ldr	r2, [pc, #416]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800526c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005272:	e00b      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb86 	bl	800598c <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005284:	e002      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005292:	4b5e      	ldr	r3, [pc, #376]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	495b      	ldr	r1, [pc, #364]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052a4:	e001      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	2102      	movs	r1, #2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fc17 	bl	8005af0 <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d030      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e0:	d017      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80052e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e6:	d811      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ec:	d013      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80052ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f2:	d80b      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fe:	4b43      	ldr	r3, [pc, #268]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	4a42      	ldr	r2, [pc, #264]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005308:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800530a:	e007      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800531a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005322:	4b3a      	ldr	r3, [pc, #232]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800532e:	4937      	ldr	r1, [pc, #220]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	654b      	str	r3, [r1, #84]	; 0x54
 8005334:	e001      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005346:	4b31      	ldr	r3, [pc, #196]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	492e      	ldr	r1, [pc, #184]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005364:	4b29      	ldr	r3, [pc, #164]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005372:	4926      	ldr	r1, [pc, #152]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005388:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005390:	491e      	ldr	r1, [pc, #120]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053a2:	4b1a      	ldr	r3, [pc, #104]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4a19      	ldr	r2, [pc, #100]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ac:	6113      	str	r3, [r2, #16]
 80053ae:	4b17      	ldr	r3, [pc, #92]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053b8:	4914      	ldr	r1, [pc, #80]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da08      	bge.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053c6:	4b11      	ldr	r3, [pc, #68]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	490e      	ldr	r1, [pc, #56]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	4906      	ldr	r1, [pc, #24]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80053f8:	7dbb      	ldrb	r3, [r7, #22]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	58024400 	.word	0x58024400

08005410 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005414:	f7ff f860 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4904      	ldr	r1, [pc, #16]	; (8005438 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	58024400 	.word	0x58024400
 8005438:	08014c9c 	.word	0x08014c9c

0800543c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005444:	4ba1      	ldr	r3, [pc, #644]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800544e:	4b9f      	ldr	r3, [pc, #636]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	0b1b      	lsrs	r3, r3, #12
 8005454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005458:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800545a:	4b9c      	ldr	r3, [pc, #624]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005466:	4b99      	ldr	r3, [pc, #612]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8111 	beq.w	80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b02      	cmp	r3, #2
 800548e:	f000 8083 	beq.w	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f200 80a1 	bhi.w	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d056      	beq.n	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054a6:	e099      	b.n	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d02d      	beq.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054b4:	4b85      	ldr	r3, [pc, #532]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a84      	ldr	r2, [pc, #528]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b7b      	ldr	r3, [pc, #492]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800550e:	e087      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b6a      	ldr	r3, [pc, #424]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a03 	vldr	s12, [r7, #12]
 8005536:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005552:	e065      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b59      	ldr	r3, [pc, #356]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a03 	vldr	s12, [r7, #12]
 800557a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005596:	e043      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b48      	ldr	r3, [pc, #288]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80055be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055da:	e021      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b37      	ldr	r3, [pc, #220]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005602:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800561e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	0a5b      	lsrs	r3, r3, #9
 8005626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563a:	edd7 6a07 	vldr	s13, [r7, #28]
 800563e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005646:	ee17 2a90 	vmov	r2, s15
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005668:	edd7 6a07 	vldr	s13, [r7, #28]
 800566c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005674:	ee17 2a90 	vmov	r2, s15
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005696:	edd7 6a07 	vldr	s13, [r7, #28]
 800569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a2:	ee17 2a90 	vmov	r2, s15
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056aa:	e008      	b.n	80056be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
}
 80056be:	bf00      	nop
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
 80056d0:	03d09000 	.word	0x03d09000
 80056d4:	46000000 	.word	0x46000000
 80056d8:	4c742400 	.word	0x4c742400
 80056dc:	4a742400 	.word	0x4a742400
 80056e0:	4af42400 	.word	0x4af42400

080056e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	; 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ec:	4ba1      	ldr	r3, [pc, #644]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80056f6:	4b9f      	ldr	r3, [pc, #636]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	0d1b      	lsrs	r3, r3, #20
 80056fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005700:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005702:	4b9c      	ldr	r3, [pc, #624]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800570e:	4b99      	ldr	r3, [pc, #612]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8111 	beq.w	8005954 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b02      	cmp	r3, #2
 8005736:	f000 8083 	beq.w	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b02      	cmp	r3, #2
 800573e:	f200 80a1 	bhi.w	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d056      	beq.n	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800574e:	e099      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005750:	4b88      	ldr	r3, [pc, #544]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02d      	beq.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800575c:	4b85      	ldr	r3, [pc, #532]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	4a84      	ldr	r2, [pc, #528]	; (8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b7b      	ldr	r3, [pc, #492]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057b6:	e087      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005980 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b6a      	ldr	r3, [pc, #424]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a03 	vldr	s12, [r7, #12]
 80057de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057fa:	e065      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b59      	ldr	r3, [pc, #356]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a56 	vldr	s11, [pc, #344]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800583e:	e043      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b48      	ldr	r3, [pc, #288]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a03 	vldr	s12, [r7, #12]
 8005866:	eddf 5a45 	vldr	s11, [pc, #276]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005882:	e021      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058c8:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	0a5b      	lsrs	r3, r3, #9
 80058ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ee:	ee17 2a90 	vmov	r2, s15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80058f6:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800590c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005910:	edd7 6a07 	vldr	s13, [r7, #28]
 8005914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	ee17 2a90 	vmov	r2, s15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	0e1b      	lsrs	r3, r3, #24
 800592a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800593a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800593e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800594a:	ee17 2a90 	vmov	r2, s15
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	609a      	str	r2, [r3, #8]
}
 8005966:	bf00      	nop
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
 8005978:	03d09000 	.word	0x03d09000
 800597c:	46000000 	.word	0x46000000
 8005980:	4c742400 	.word	0x4c742400
 8005984:	4a742400 	.word	0x4a742400
 8005988:	4af42400 	.word	0x4af42400

0800598c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800599a:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d101      	bne.n	80059aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e099      	b.n	8005ade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059aa:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4e      	ldr	r2, [pc, #312]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fc fb45 	bl	8002044 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059be:	f7fc fb41 	bl	8002044 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e086      	b.n	8005ade <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059d0:	4b45      	ldr	r3, [pc, #276]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059dc:	4b42      	ldr	r3, [pc, #264]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	493f      	ldr	r1, [pc, #252]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	628b      	str	r3, [r1, #40]	; 0x28
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a20:	4931      	ldr	r1, [pc, #196]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	492d      	ldr	r1, [pc, #180]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a38:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f023 0220 	bic.w	r2, r3, #32
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4928      	ldr	r1, [pc, #160]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a50:	f023 0310 	bic.w	r3, r3, #16
 8005a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a56:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a5a:	4b24      	ldr	r3, [pc, #144]	; (8005aec <RCCEx_PLL2_Config+0x160>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	69d2      	ldr	r2, [r2, #28]
 8005a62:	00d2      	lsls	r2, r2, #3
 8005a64:	4920      	ldr	r1, [pc, #128]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	f043 0310 	orr.w	r3, r3, #16
 8005a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a88:	e00f      	b.n	8005aaa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a90:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a9c:	e005      	b.n	8005aaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab6:	f7fc fac5 	bl	8002044 <HAL_GetTick>
 8005aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005abc:	e008      	b.n	8005ad0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005abe:	f7fc fac1 	bl	8002044 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	ffff0007 	.word	0xffff0007

08005af0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005afe:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d101      	bne.n	8005b0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e099      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b0e:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4e      	ldr	r2, [pc, #312]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fc fa93 	bl	8002044 <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b22:	f7fc fa8f 	bl	8002044 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e086      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b34:	4b45      	ldr	r3, [pc, #276]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b40:	4b42      	ldr	r3, [pc, #264]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	493f      	ldr	r1, [pc, #252]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	628b      	str	r3, [r1, #40]	; 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	025b      	lsls	r3, r3, #9
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	061b      	lsls	r3, r3, #24
 8005b80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b84:	4931      	ldr	r1, [pc, #196]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b8a:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	492d      	ldr	r1, [pc, #180]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	4928      	ldr	r1, [pc, #160]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bae:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bbe:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <RCCEx_PLL3_Config+0x160>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	69d2      	ldr	r2, [r2, #28]
 8005bc6:	00d2      	lsls	r2, r2, #3
 8005bc8:	4920      	ldr	r1, [pc, #128]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bce:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bec:	e00f      	b.n	8005c0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c00:	e005      	b.n	8005c0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1a:	f7fc fa13 	bl	8002044 <HAL_GetTick>
 8005c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c20:	e008      	b.n	8005c34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c22:	f7fc fa0f 	bl	8002044 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e006      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	ffff0007 	.word	0xffff0007

08005c54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e0eb      	b.n	8005e42 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a75      	ldr	r2, [pc, #468]	; (8005e4c <HAL_SPI_Init+0x1f8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <HAL_SPI_Init+0x46>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a74      	ldr	r2, [pc, #464]	; (8005e50 <HAL_SPI_Init+0x1fc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00a      	beq.n	8005c9a <HAL_SPI_Init+0x46>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a72      	ldr	r2, [pc, #456]	; (8005e54 <HAL_SPI_Init+0x200>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d005      	beq.n	8005c9a <HAL_SPI_Init+0x46>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d901      	bls.n	8005c9a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0d3      	b.n	8005e42 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fb9c 	bl	80063d8 <SPI_GetPacketSize>
 8005ca0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a69      	ldr	r2, [pc, #420]	; (8005e4c <HAL_SPI_Init+0x1f8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00c      	beq.n	8005cc6 <HAL_SPI_Init+0x72>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a67      	ldr	r2, [pc, #412]	; (8005e50 <HAL_SPI_Init+0x1fc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <HAL_SPI_Init+0x72>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a66      	ldr	r2, [pc, #408]	; (8005e54 <HAL_SPI_Init+0x200>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Init+0x72>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d811      	bhi.n	8005cea <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cca:	4a60      	ldr	r2, [pc, #384]	; (8005e4c <HAL_SPI_Init+0x1f8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a5e      	ldr	r2, [pc, #376]	; (8005e50 <HAL_SPI_Init+0x1fc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_SPI_Init+0x90>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a5d      	ldr	r2, [pc, #372]	; (8005e54 <HAL_SPI_Init+0x200>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d104      	bne.n	8005cee <HAL_SPI_Init+0x9a>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d901      	bls.n	8005cee <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0a9      	b.n	8005e42 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb fcc8 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d28:	d119      	bne.n	8005d5e <HAL_SPI_Init+0x10a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d32:	d103      	bne.n	8005d3c <HAL_SPI_Init+0xe8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10c      	bne.n	8005d5e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d4c:	d107      	bne.n	8005d5e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	431a      	orrs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d70:	ea42 0103 	orr.w	r1, r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbe:	ea42 0103 	orr.w	r1, r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d113      	bne.n	8005dfe <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dfc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40013000 	.word	0x40013000
 8005e50:	40003800 	.word	0x40003800
 8005e54:	40003c00 	.word	0x40003c00

08005e58 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3320      	adds	r3, #32
 8005e6e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_SPI_Transmit+0x2a>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e1d7      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8a:	f7fc f8db 	bl	8002044 <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d007      	beq.n	8005eac <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ea8:	7efb      	ldrb	r3, [r7, #27]
 8005eaa:	e1c2      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_SPI_Transmit+0x60>
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ec4:	7efb      	ldrb	r3, [r7, #27]
 8005ec6:	e1b4      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2203      	movs	r2, #3
 8005ecc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88fa      	ldrh	r2, [r7, #6]
 8005eea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005f18:	d107      	bne.n	8005f2a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	4b96      	ldr	r3, [pc, #600]	; (800618c <HAL_SPI_Transmit+0x334>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	88f9      	ldrh	r1, [r7, #6]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f56:	d107      	bne.n	8005f68 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b0f      	cmp	r3, #15
 8005f6e:	d947      	bls.n	8006000 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f70:	e03f      	b.n	8005ff2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d114      	bne.n	8005faa <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f90:	1d1a      	adds	r2, r3, #4
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fa8:	e023      	b.n	8005ff2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005faa:	f7fc f84b 	bl	8002044 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d803      	bhi.n	8005fc2 <HAL_SPI_Transmit+0x16a>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d102      	bne.n	8005fc8 <HAL_SPI_Transmit+0x170>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d114      	bne.n	8005ff2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f937 	bl	800623c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e11f      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1b9      	bne.n	8005f72 <HAL_SPI_Transmit+0x11a>
 8005ffe:	e0f2      	b.n	80061e6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b07      	cmp	r3, #7
 8006006:	f240 80e7 	bls.w	80061d8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800600a:	e05d      	b.n	80060c8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d132      	bne.n	8006080 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d918      	bls.n	8006058 <HAL_SPI_Transmit+0x200>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d014      	beq.n	8006058 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6812      	ldr	r2, [r2, #0]
 8006038:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603e:	1d1a      	adds	r2, r3, #4
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b02      	subs	r3, #2
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006056:	e037      	b.n	80060c8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006066:	1c9a      	adds	r2, r3, #2
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800607e:	e023      	b.n	80060c8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006080:	f7fb ffe0 	bl	8002044 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d803      	bhi.n	8006098 <HAL_SPI_Transmit+0x240>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <HAL_SPI_Transmit+0x246>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f8cc 	bl	800623c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0b4      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d19b      	bne.n	800600c <HAL_SPI_Transmit+0x1b4>
 80060d4:	e087      	b.n	80061e6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d155      	bne.n	8006190 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d918      	bls.n	8006122 <HAL_SPI_Transmit+0x2ca>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	d914      	bls.n	8006122 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b04      	subs	r3, #4
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006120:	e05a      	b.n	80061d8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d917      	bls.n	800615e <HAL_SPI_Transmit+0x306>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d013      	beq.n	800615e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	1c9a      	adds	r2, r3, #2
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b02      	subs	r3, #2
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800615c:	e03c      	b.n	80061d8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3320      	adds	r3, #32
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006188:	e026      	b.n	80061d8 <HAL_SPI_Transmit+0x380>
 800618a:	bf00      	nop
 800618c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006190:	f7fb ff58 	bl	8002044 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d803      	bhi.n	80061a8 <HAL_SPI_Transmit+0x350>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d102      	bne.n	80061ae <HAL_SPI_Transmit+0x356>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d114      	bne.n	80061d8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f844 	bl	800623c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e02c      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f47f af78 	bne.w	80060d6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2108      	movs	r1, #8
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f8c3 	bl	800637c <SPI_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006202:	f043 0220 	orr.w	r2, r3, #32
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f815 	bl	800623c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006230:	7efb      	ldrb	r3, [r7, #27]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop

0800623c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0208 	orr.w	r2, r2, #8
 800625a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0210 	orr.w	r2, r2, #16
 800626a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6919      	ldr	r1, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b3c      	ldr	r3, [pc, #240]	; (8006378 <SPI_CloseTransfer+0x13c>)
 8006288:	400b      	ands	r3, r1
 800628a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800629a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d014      	beq.n	80062d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00f      	beq.n	80062d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699a      	ldr	r2, [r3, #24]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0220 	orr.w	r2, r2, #32
 80062d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d014      	beq.n	8006308 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ee:	f043 0204 	orr.w	r2, r3, #4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006306:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00f      	beq.n	8006332 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006318:	f043 0201 	orr.w	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006330:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00f      	beq.n	800635c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	fffffc90 	.word	0xfffffc90

0800637c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800638c:	e010      	b.n	80063b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800638e:	f7fb fe59 	bl	8002044 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	429a      	cmp	r2, r3
 800639c:	d803      	bhi.n	80063a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d102      	bne.n	80063ac <SPI_WaitOnFlagUntilTimeout+0x30>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e00f      	b.n	80063d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4013      	ands	r3, r2
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	429a      	cmp	r2, r3
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d0df      	beq.n	800638e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	3307      	adds	r3, #7
 80063f6:	08db      	lsrs	r3, r3, #3
 80063f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e049      	b.n	80064b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fb fb89 	bl	8001b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f000 fa4d 	bl	80068ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_TIM_PWM_Start+0x24>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e03c      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d109      	bne.n	80064fa <HAL_TIM_PWM_Start+0x3e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e02f      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start+0x58>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e022      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b0c      	cmp	r3, #12
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start+0x72>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e015      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start+0x8c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e09c      	b.n	800669c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0xb6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006570:	e023      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b04      	cmp	r3, #4
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0xc6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006580:	e01b      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Start+0xd6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006590:	e013      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Start+0xe6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a0:	e00b      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Start+0xf6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b0:	e003      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2201      	movs	r2, #1
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fcfa 	bl	8006fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a35      	ldr	r2, [pc, #212]	; (80066a4 <HAL_TIM_PWM_Start+0x1e8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <HAL_TIM_PWM_Start+0x1ec>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a32      	ldr	r2, [pc, #200]	; (80066ac <HAL_TIM_PWM_Start+0x1f0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a31      	ldr	r2, [pc, #196]	; (80066b0 <HAL_TIM_PWM_Start+0x1f4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <HAL_TIM_PWM_Start+0x1f8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_PWM_Start+0x142>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_TIM_PWM_Start+0x144>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <HAL_TIM_PWM_Start+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d018      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <HAL_TIM_PWM_Start+0x1fc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a21      	ldr	r2, [pc, #132]	; (80066bc <HAL_TIM_PWM_Start+0x200>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <HAL_TIM_PWM_Start+0x204>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_TIM_PWM_Start+0x1ec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HAL_TIM_PWM_Start+0x208>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d115      	bne.n	8006686 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <HAL_TIM_PWM_Start+0x20c>)
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d015      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006672:	d011      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	e008      	b.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e000      	b.n	800669a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40010400 	.word	0x40010400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40001800 	.word	0x40001800
 80066c8:	00010007 	.word	0x00010007

080066cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e0fd      	b.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b14      	cmp	r3, #20
 80066f2:	f200 80f0 	bhi.w	80068d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006751 	.word	0x08006751
 8006700:	080068d7 	.word	0x080068d7
 8006704:	080068d7 	.word	0x080068d7
 8006708:	080068d7 	.word	0x080068d7
 800670c:	08006791 	.word	0x08006791
 8006710:	080068d7 	.word	0x080068d7
 8006714:	080068d7 	.word	0x080068d7
 8006718:	080068d7 	.word	0x080068d7
 800671c:	080067d3 	.word	0x080067d3
 8006720:	080068d7 	.word	0x080068d7
 8006724:	080068d7 	.word	0x080068d7
 8006728:	080068d7 	.word	0x080068d7
 800672c:	08006813 	.word	0x08006813
 8006730:	080068d7 	.word	0x080068d7
 8006734:	080068d7 	.word	0x080068d7
 8006738:	080068d7 	.word	0x080068d7
 800673c:	08006855 	.word	0x08006855
 8006740:	080068d7 	.word	0x080068d7
 8006744:	080068d7 	.word	0x080068d7
 8006748:	080068d7 	.word	0x080068d7
 800674c:	08006895 	.word	0x08006895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f962 	bl	8006a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0204 	bic.w	r2, r2, #4
 800677a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6999      	ldr	r1, [r3, #24]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	619a      	str	r2, [r3, #24]
      break;
 800678e:	e0a3      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f9d2 	bl	8006b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6999      	ldr	r1, [r3, #24]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	021a      	lsls	r2, r3, #8
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	619a      	str	r2, [r3, #24]
      break;
 80067d0:	e082      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fa3b 	bl	8006c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0208 	orr.w	r2, r2, #8
 80067ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0204 	bic.w	r2, r2, #4
 80067fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69d9      	ldr	r1, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	61da      	str	r2, [r3, #28]
      break;
 8006810:	e062      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 faa1 	bl	8006d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69d9      	ldr	r1, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	021a      	lsls	r2, r3, #8
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	61da      	str	r2, [r3, #28]
      break;
 8006852:	e041      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fae8 	bl	8006e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006892:	e021      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb2a 	bl	8006ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068d4:	e000      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80068d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop

080068ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a40      	ldr	r2, [pc, #256]	; (8006a00 <TIM_Base_SetConfig+0x114>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d00f      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3d      	ldr	r2, [pc, #244]	; (8006a04 <TIM_Base_SetConfig+0x118>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3c      	ldr	r2, [pc, #240]	; (8006a08 <TIM_Base_SetConfig+0x11c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3b      	ldr	r2, [pc, #236]	; (8006a0c <TIM_Base_SetConfig+0x120>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3a      	ldr	r2, [pc, #232]	; (8006a10 <TIM_Base_SetConfig+0x124>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d108      	bne.n	800693e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2f      	ldr	r2, [pc, #188]	; (8006a00 <TIM_Base_SetConfig+0x114>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01f      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2c      	ldr	r2, [pc, #176]	; (8006a04 <TIM_Base_SetConfig+0x118>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2b      	ldr	r2, [pc, #172]	; (8006a08 <TIM_Base_SetConfig+0x11c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <TIM_Base_SetConfig+0x120>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a29      	ldr	r2, [pc, #164]	; (8006a10 <TIM_Base_SetConfig+0x124>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a28      	ldr	r2, [pc, #160]	; (8006a14 <TIM_Base_SetConfig+0x128>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a27      	ldr	r2, [pc, #156]	; (8006a18 <TIM_Base_SetConfig+0x12c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0x9a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <TIM_Base_SetConfig+0x130>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <TIM_Base_SetConfig+0x114>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00f      	beq.n	80069e4 <TIM_Base_SetConfig+0xf8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <TIM_Base_SetConfig+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00b      	beq.n	80069e4 <TIM_Base_SetConfig+0xf8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <TIM_Base_SetConfig+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_Base_SetConfig+0xf8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a10      	ldr	r2, [pc, #64]	; (8006a18 <TIM_Base_SetConfig+0x12c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_Base_SetConfig+0xf8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a0f      	ldr	r2, [pc, #60]	; (8006a1c <TIM_Base_SetConfig+0x130>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d103      	bne.n	80069ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	615a      	str	r2, [r3, #20]
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40010400 	.word	0x40010400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4b37      	ldr	r3, [pc, #220]	; (8006b28 <TIM_OC1_SetConfig+0x108>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0303 	bic.w	r3, r3, #3
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 0302 	bic.w	r3, r3, #2
 8006a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a2d      	ldr	r2, [pc, #180]	; (8006b2c <TIM_OC1_SetConfig+0x10c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00f      	beq.n	8006a9c <TIM_OC1_SetConfig+0x7c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a2c      	ldr	r2, [pc, #176]	; (8006b30 <TIM_OC1_SetConfig+0x110>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_OC1_SetConfig+0x7c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <TIM_OC1_SetConfig+0x114>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_OC1_SetConfig+0x7c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <TIM_OC1_SetConfig+0x118>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_OC1_SetConfig+0x7c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a29      	ldr	r2, [pc, #164]	; (8006b3c <TIM_OC1_SetConfig+0x11c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d10c      	bne.n	8006ab6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0308 	bic.w	r3, r3, #8
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 0304 	bic.w	r3, r3, #4
 8006ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <TIM_OC1_SetConfig+0x10c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00f      	beq.n	8006ade <TIM_OC1_SetConfig+0xbe>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <TIM_OC1_SetConfig+0x110>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00b      	beq.n	8006ade <TIM_OC1_SetConfig+0xbe>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a1a      	ldr	r2, [pc, #104]	; (8006b34 <TIM_OC1_SetConfig+0x114>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d007      	beq.n	8006ade <TIM_OC1_SetConfig+0xbe>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a19      	ldr	r2, [pc, #100]	; (8006b38 <TIM_OC1_SetConfig+0x118>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_OC1_SetConfig+0xbe>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <TIM_OC1_SetConfig+0x11c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d111      	bne.n	8006b02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	621a      	str	r2, [r3, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	fffeff8f 	.word	0xfffeff8f
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800

08006b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0210 	bic.w	r2, r3, #16
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <TIM_OC2_SetConfig+0xfc>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0320 	bic.w	r3, r3, #32
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <TIM_OC2_SetConfig+0x100>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_OC2_SetConfig+0x68>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a28      	ldr	r2, [pc, #160]	; (8006c44 <TIM_OC2_SetConfig+0x104>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d10d      	bne.n	8006bc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1e      	ldr	r2, [pc, #120]	; (8006c40 <TIM_OC2_SetConfig+0x100>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00f      	beq.n	8006bec <TIM_OC2_SetConfig+0xac>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <TIM_OC2_SetConfig+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00b      	beq.n	8006bec <TIM_OC2_SetConfig+0xac>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <TIM_OC2_SetConfig+0x108>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d007      	beq.n	8006bec <TIM_OC2_SetConfig+0xac>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <TIM_OC2_SetConfig+0x10c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_OC2_SetConfig+0xac>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <TIM_OC2_SetConfig+0x110>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d113      	bne.n	8006c14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	feff8fff 	.word	0xfeff8fff
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40010400 	.word	0x40010400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800

08006c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <TIM_OC3_SetConfig+0xf8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_OC3_SetConfig+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a26      	ldr	r2, [pc, #152]	; (8006d50 <TIM_OC3_SetConfig+0xfc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d10d      	bne.n	8006cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <TIM_OC3_SetConfig+0xf8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <TIM_OC3_SetConfig+0xaa>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <TIM_OC3_SetConfig+0xfc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_OC3_SetConfig+0xaa>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a1a      	ldr	r2, [pc, #104]	; (8006d54 <TIM_OC3_SetConfig+0x100>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_OC3_SetConfig+0xaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a19      	ldr	r2, [pc, #100]	; (8006d58 <TIM_OC3_SetConfig+0x104>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_OC3_SetConfig+0xaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a18      	ldr	r2, [pc, #96]	; (8006d5c <TIM_OC3_SetConfig+0x108>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d113      	bne.n	8006d26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	621a      	str	r2, [r3, #32]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40010400 	.word	0x40010400
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40014400 	.word	0x40014400
 8006d5c:	40014800 	.word	0x40014800

08006d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <TIM_OC4_SetConfig+0xbc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00f      	beq.n	8006de0 <TIM_OC4_SetConfig+0x80>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <TIM_OC4_SetConfig+0xc0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00b      	beq.n	8006de0 <TIM_OC4_SetConfig+0x80>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <TIM_OC4_SetConfig+0xc4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <TIM_OC4_SetConfig+0x80>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <TIM_OC4_SetConfig+0xc8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_OC4_SetConfig+0x80>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <TIM_OC4_SetConfig+0xcc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d109      	bne.n	8006df4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	019b      	lsls	r3, r3, #6
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <TIM_OC5_SetConfig+0xb0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x76>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <TIM_OC5_SetConfig+0xb4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x76>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <TIM_OC5_SetConfig+0xb8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x76>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a14      	ldr	r2, [pc, #80]	; (8006eec <TIM_OC5_SetConfig+0xbc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x76>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <TIM_OC5_SetConfig+0xc0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d109      	bne.n	8006eba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40010400 	.word	0x40010400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40014400 	.word	0x40014400
 8006ef0:	40014800 	.word	0x40014800

08006ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <TIM_OC6_SetConfig+0xb4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00f      	beq.n	8006f6c <TIM_OC6_SetConfig+0x78>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a17      	ldr	r2, [pc, #92]	; (8006fac <TIM_OC6_SetConfig+0xb8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <TIM_OC6_SetConfig+0x78>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <TIM_OC6_SetConfig+0xbc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_OC6_SetConfig+0x78>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <TIM_OC6_SetConfig+0xc0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC6_SetConfig+0x78>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <TIM_OC6_SetConfig+0xc4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d109      	bne.n	8006f80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40010000 	.word	0x40010000
 8006fac:	40010400 	.word	0x40010400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40014400 	.word	0x40014400
 8006fb8:	40014800 	.word	0x40014800

08006fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2201      	movs	r2, #1
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	401a      	ands	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800701c:	2302      	movs	r3, #2
 800701e:	e068      	b.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2e      	ldr	r2, [pc, #184]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d108      	bne.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800705a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01d      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007092:	d018      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1a      	ldr	r2, [pc, #104]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d009      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10c      	bne.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000
 8007104:	40010400 	.word	0x40010400
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800
 8007110:	40000c00 	.word	0x40000c00
 8007114:	40001800 	.word	0x40001800

08007118 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007130:	2302      	movs	r3, #2
 8007132:	e065      	b.n	8007200 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a14      	ldr	r2, [pc, #80]	; (8007210 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d115      	bne.n	80071ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	051b      	lsls	r3, r3, #20
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400

08007214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e042      	b.n	80072ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7fa fd31 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2224      	movs	r2, #36	; 0x24
 8007242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f82c 	bl	80072b4 <UART_SetConfig>
 800725c:	4603      	mov	r3, r0
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e022      	b.n	80072ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fd80 	bl	8007d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fe07 	bl	8007eb8 <UART_CheckIdleState>
 80072aa:	4603      	mov	r3, r0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b4:	b5b0      	push	{r4, r5, r7, lr}
 80072b6:	b08e      	sub	sp, #56	; 0x38
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4bbf      	ldr	r3, [pc, #764]	; (80075e0 <UART_SetConfig+0x32c>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4ab5      	ldr	r2, [pc, #724]	; (80075e4 <UART_SetConfig+0x330>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800731a:	4313      	orrs	r3, r2
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	4bb0      	ldr	r3, [pc, #704]	; (80075e8 <UART_SetConfig+0x334>)
 8007326:	4013      	ands	r3, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800732e:	430b      	orrs	r3, r1
 8007330:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	f023 010f 	bic.w	r1, r3, #15
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4aa7      	ldr	r2, [pc, #668]	; (80075ec <UART_SetConfig+0x338>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d176      	bne.n	8007440 <UART_SetConfig+0x18c>
 8007352:	4ba7      	ldr	r3, [pc, #668]	; (80075f0 <UART_SetConfig+0x33c>)
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800735a:	2b28      	cmp	r3, #40	; 0x28
 800735c:	d86c      	bhi.n	8007438 <UART_SetConfig+0x184>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0xb0>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007409 	.word	0x08007409
 8007368:	08007439 	.word	0x08007439
 800736c:	08007439 	.word	0x08007439
 8007370:	08007439 	.word	0x08007439
 8007374:	08007439 	.word	0x08007439
 8007378:	08007439 	.word	0x08007439
 800737c:	08007439 	.word	0x08007439
 8007380:	08007439 	.word	0x08007439
 8007384:	08007411 	.word	0x08007411
 8007388:	08007439 	.word	0x08007439
 800738c:	08007439 	.word	0x08007439
 8007390:	08007439 	.word	0x08007439
 8007394:	08007439 	.word	0x08007439
 8007398:	08007439 	.word	0x08007439
 800739c:	08007439 	.word	0x08007439
 80073a0:	08007439 	.word	0x08007439
 80073a4:	08007419 	.word	0x08007419
 80073a8:	08007439 	.word	0x08007439
 80073ac:	08007439 	.word	0x08007439
 80073b0:	08007439 	.word	0x08007439
 80073b4:	08007439 	.word	0x08007439
 80073b8:	08007439 	.word	0x08007439
 80073bc:	08007439 	.word	0x08007439
 80073c0:	08007439 	.word	0x08007439
 80073c4:	08007421 	.word	0x08007421
 80073c8:	08007439 	.word	0x08007439
 80073cc:	08007439 	.word	0x08007439
 80073d0:	08007439 	.word	0x08007439
 80073d4:	08007439 	.word	0x08007439
 80073d8:	08007439 	.word	0x08007439
 80073dc:	08007439 	.word	0x08007439
 80073e0:	08007439 	.word	0x08007439
 80073e4:	08007429 	.word	0x08007429
 80073e8:	08007439 	.word	0x08007439
 80073ec:	08007439 	.word	0x08007439
 80073f0:	08007439 	.word	0x08007439
 80073f4:	08007439 	.word	0x08007439
 80073f8:	08007439 	.word	0x08007439
 80073fc:	08007439 	.word	0x08007439
 8007400:	08007439 	.word	0x08007439
 8007404:	08007431 	.word	0x08007431
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740e:	e222      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007416:	e21e      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741e:	e21a      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007426:	e216      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007428:	2320      	movs	r3, #32
 800742a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742e:	e212      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007436:	e20e      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007438:	2380      	movs	r3, #128	; 0x80
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743e:	e20a      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a6b      	ldr	r2, [pc, #428]	; (80075f4 <UART_SetConfig+0x340>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d130      	bne.n	80074ac <UART_SetConfig+0x1f8>
 800744a:	4b69      	ldr	r3, [pc, #420]	; (80075f0 <UART_SetConfig+0x33c>)
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	2b05      	cmp	r3, #5
 8007454:	d826      	bhi.n	80074a4 <UART_SetConfig+0x1f0>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0x1a8>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	08007475 	.word	0x08007475
 8007460:	0800747d 	.word	0x0800747d
 8007464:	08007485 	.word	0x08007485
 8007468:	0800748d 	.word	0x0800748d
 800746c:	08007495 	.word	0x08007495
 8007470:	0800749d 	.word	0x0800749d
 8007474:	2300      	movs	r3, #0
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747a:	e1ec      	b.n	8007856 <UART_SetConfig+0x5a2>
 800747c:	2304      	movs	r3, #4
 800747e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007482:	e1e8      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007484:	2308      	movs	r3, #8
 8007486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748a:	e1e4      	b.n	8007856 <UART_SetConfig+0x5a2>
 800748c:	2310      	movs	r3, #16
 800748e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007492:	e1e0      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007494:	2320      	movs	r3, #32
 8007496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749a:	e1dc      	b.n	8007856 <UART_SetConfig+0x5a2>
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a2:	e1d8      	b.n	8007856 <UART_SetConfig+0x5a2>
 80074a4:	2380      	movs	r3, #128	; 0x80
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074aa:	e1d4      	b.n	8007856 <UART_SetConfig+0x5a2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a51      	ldr	r2, [pc, #324]	; (80075f8 <UART_SetConfig+0x344>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d130      	bne.n	8007518 <UART_SetConfig+0x264>
 80074b6:	4b4e      	ldr	r3, [pc, #312]	; (80075f0 <UART_SetConfig+0x33c>)
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	2b05      	cmp	r3, #5
 80074c0:	d826      	bhi.n	8007510 <UART_SetConfig+0x25c>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <UART_SetConfig+0x214>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074e1 	.word	0x080074e1
 80074cc:	080074e9 	.word	0x080074e9
 80074d0:	080074f1 	.word	0x080074f1
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	08007501 	.word	0x08007501
 80074dc:	08007509 	.word	0x08007509
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e1b6      	b.n	8007856 <UART_SetConfig+0x5a2>
 80074e8:	2304      	movs	r3, #4
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e1b2      	b.n	8007856 <UART_SetConfig+0x5a2>
 80074f0:	2308      	movs	r3, #8
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e1ae      	b.n	8007856 <UART_SetConfig+0x5a2>
 80074f8:	2310      	movs	r3, #16
 80074fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fe:	e1aa      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007500:	2320      	movs	r3, #32
 8007502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007506:	e1a6      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750e:	e1a2      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007516:	e19e      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a37      	ldr	r2, [pc, #220]	; (80075fc <UART_SetConfig+0x348>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d130      	bne.n	8007584 <UART_SetConfig+0x2d0>
 8007522:	4b33      	ldr	r3, [pc, #204]	; (80075f0 <UART_SetConfig+0x33c>)
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	2b05      	cmp	r3, #5
 800752c:	d826      	bhi.n	800757c <UART_SetConfig+0x2c8>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <UART_SetConfig+0x280>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	0800754d 	.word	0x0800754d
 8007538:	08007555 	.word	0x08007555
 800753c:	0800755d 	.word	0x0800755d
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e180      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e17c      	b.n	8007856 <UART_SetConfig+0x5a2>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e178      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756a:	e174      	b.n	8007856 <UART_SetConfig+0x5a2>
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007572:	e170      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757a:	e16c      	b.n	8007856 <UART_SetConfig+0x5a2>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007582:	e168      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1d      	ldr	r2, [pc, #116]	; (8007600 <UART_SetConfig+0x34c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d142      	bne.n	8007614 <UART_SetConfig+0x360>
 800758e:	4b18      	ldr	r3, [pc, #96]	; (80075f0 <UART_SetConfig+0x33c>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b05      	cmp	r3, #5
 8007598:	d838      	bhi.n	800760c <UART_SetConfig+0x358>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0x2ec>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	08007605 	.word	0x08007605
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075be:	e14a      	b.n	8007856 <UART_SetConfig+0x5a2>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c6:	e146      	b.n	8007856 <UART_SetConfig+0x5a2>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ce:	e142      	b.n	8007856 <UART_SetConfig+0x5a2>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d6:	e13e      	b.n	8007856 <UART_SetConfig+0x5a2>
 80075d8:	2320      	movs	r3, #32
 80075da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075de:	e13a      	b.n	8007856 <UART_SetConfig+0x5a2>
 80075e0:	cfff69f3 	.word	0xcfff69f3
 80075e4:	58000c00 	.word	0x58000c00
 80075e8:	11fff4ff 	.word	0x11fff4ff
 80075ec:	40011000 	.word	0x40011000
 80075f0:	58024400 	.word	0x58024400
 80075f4:	40004400 	.word	0x40004400
 80075f8:	40004800 	.word	0x40004800
 80075fc:	40004c00 	.word	0x40004c00
 8007600:	40005000 	.word	0x40005000
 8007604:	2340      	movs	r3, #64	; 0x40
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760a:	e124      	b.n	8007856 <UART_SetConfig+0x5a2>
 800760c:	2380      	movs	r3, #128	; 0x80
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e120      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4acc      	ldr	r2, [pc, #816]	; (800794c <UART_SetConfig+0x698>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d176      	bne.n	800770c <UART_SetConfig+0x458>
 800761e:	4bcc      	ldr	r3, [pc, #816]	; (8007950 <UART_SetConfig+0x69c>)
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007626:	2b28      	cmp	r3, #40	; 0x28
 8007628:	d86c      	bhi.n	8007704 <UART_SetConfig+0x450>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <UART_SetConfig+0x37c>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076d5 	.word	0x080076d5
 8007634:	08007705 	.word	0x08007705
 8007638:	08007705 	.word	0x08007705
 800763c:	08007705 	.word	0x08007705
 8007640:	08007705 	.word	0x08007705
 8007644:	08007705 	.word	0x08007705
 8007648:	08007705 	.word	0x08007705
 800764c:	08007705 	.word	0x08007705
 8007650:	080076dd 	.word	0x080076dd
 8007654:	08007705 	.word	0x08007705
 8007658:	08007705 	.word	0x08007705
 800765c:	08007705 	.word	0x08007705
 8007660:	08007705 	.word	0x08007705
 8007664:	08007705 	.word	0x08007705
 8007668:	08007705 	.word	0x08007705
 800766c:	08007705 	.word	0x08007705
 8007670:	080076e5 	.word	0x080076e5
 8007674:	08007705 	.word	0x08007705
 8007678:	08007705 	.word	0x08007705
 800767c:	08007705 	.word	0x08007705
 8007680:	08007705 	.word	0x08007705
 8007684:	08007705 	.word	0x08007705
 8007688:	08007705 	.word	0x08007705
 800768c:	08007705 	.word	0x08007705
 8007690:	080076ed 	.word	0x080076ed
 8007694:	08007705 	.word	0x08007705
 8007698:	08007705 	.word	0x08007705
 800769c:	08007705 	.word	0x08007705
 80076a0:	08007705 	.word	0x08007705
 80076a4:	08007705 	.word	0x08007705
 80076a8:	08007705 	.word	0x08007705
 80076ac:	08007705 	.word	0x08007705
 80076b0:	080076f5 	.word	0x080076f5
 80076b4:	08007705 	.word	0x08007705
 80076b8:	08007705 	.word	0x08007705
 80076bc:	08007705 	.word	0x08007705
 80076c0:	08007705 	.word	0x08007705
 80076c4:	08007705 	.word	0x08007705
 80076c8:	08007705 	.word	0x08007705
 80076cc:	08007705 	.word	0x08007705
 80076d0:	080076fd 	.word	0x080076fd
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076da:	e0bc      	b.n	8007856 <UART_SetConfig+0x5a2>
 80076dc:	2304      	movs	r3, #4
 80076de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e2:	e0b8      	b.n	8007856 <UART_SetConfig+0x5a2>
 80076e4:	2308      	movs	r3, #8
 80076e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ea:	e0b4      	b.n	8007856 <UART_SetConfig+0x5a2>
 80076ec:	2310      	movs	r3, #16
 80076ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f2:	e0b0      	b.n	8007856 <UART_SetConfig+0x5a2>
 80076f4:	2320      	movs	r3, #32
 80076f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fa:	e0ac      	b.n	8007856 <UART_SetConfig+0x5a2>
 80076fc:	2340      	movs	r3, #64	; 0x40
 80076fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007702:	e0a8      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007704:	2380      	movs	r3, #128	; 0x80
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770a:	e0a4      	b.n	8007856 <UART_SetConfig+0x5a2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a90      	ldr	r2, [pc, #576]	; (8007954 <UART_SetConfig+0x6a0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d130      	bne.n	8007778 <UART_SetConfig+0x4c4>
 8007716:	4b8e      	ldr	r3, [pc, #568]	; (8007950 <UART_SetConfig+0x69c>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	2b05      	cmp	r3, #5
 8007720:	d826      	bhi.n	8007770 <UART_SetConfig+0x4bc>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <UART_SetConfig+0x474>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007741 	.word	0x08007741
 800772c:	08007749 	.word	0x08007749
 8007730:	08007751 	.word	0x08007751
 8007734:	08007759 	.word	0x08007759
 8007738:	08007761 	.word	0x08007761
 800773c:	08007769 	.word	0x08007769
 8007740:	2300      	movs	r3, #0
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e086      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e082      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007756:	e07e      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775e:	e07a      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007760:	2320      	movs	r3, #32
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007766:	e076      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776e:	e072      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007770:	2380      	movs	r3, #128	; 0x80
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e06e      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a76      	ldr	r2, [pc, #472]	; (8007958 <UART_SetConfig+0x6a4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d130      	bne.n	80077e4 <UART_SetConfig+0x530>
 8007782:	4b73      	ldr	r3, [pc, #460]	; (8007950 <UART_SetConfig+0x69c>)
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b05      	cmp	r3, #5
 800778c:	d826      	bhi.n	80077dc <UART_SetConfig+0x528>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x4e0>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077ad 	.word	0x080077ad
 8007798:	080077b5 	.word	0x080077b5
 800779c:	080077bd 	.word	0x080077bd
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e050      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e04c      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e048      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e044      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077cc:	2320      	movs	r3, #32
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e040      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e03c      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077dc:	2380      	movs	r3, #128	; 0x80
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e038      	b.n	8007856 <UART_SetConfig+0x5a2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5c      	ldr	r2, [pc, #368]	; (800795c <UART_SetConfig+0x6a8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d130      	bne.n	8007850 <UART_SetConfig+0x59c>
 80077ee:	4b58      	ldr	r3, [pc, #352]	; (8007950 <UART_SetConfig+0x69c>)
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d826      	bhi.n	8007848 <UART_SetConfig+0x594>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0x54c>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007819 	.word	0x08007819
 8007804:	08007821 	.word	0x08007821
 8007808:	08007829 	.word	0x08007829
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	2302      	movs	r3, #2
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e01a      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e016      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e012      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007836:	e00e      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783e:	e00a      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007846:	e006      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800784e:	e002      	b.n	8007856 <UART_SetConfig+0x5a2>
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a40      	ldr	r2, [pc, #256]	; (800795c <UART_SetConfig+0x6a8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	f040 80ef 	bne.w	8007a40 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007866:	2b20      	cmp	r3, #32
 8007868:	dc46      	bgt.n	80078f8 <UART_SetConfig+0x644>
 800786a:	2b02      	cmp	r3, #2
 800786c:	f2c0 8081 	blt.w	8007972 <UART_SetConfig+0x6be>
 8007870:	3b02      	subs	r3, #2
 8007872:	2b1e      	cmp	r3, #30
 8007874:	d87d      	bhi.n	8007972 <UART_SetConfig+0x6be>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <UART_SetConfig+0x5c8>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	080078ff 	.word	0x080078ff
 8007880:	08007973 	.word	0x08007973
 8007884:	08007907 	.word	0x08007907
 8007888:	08007973 	.word	0x08007973
 800788c:	08007973 	.word	0x08007973
 8007890:	08007973 	.word	0x08007973
 8007894:	08007917 	.word	0x08007917
 8007898:	08007973 	.word	0x08007973
 800789c:	08007973 	.word	0x08007973
 80078a0:	08007973 	.word	0x08007973
 80078a4:	08007973 	.word	0x08007973
 80078a8:	08007973 	.word	0x08007973
 80078ac:	08007973 	.word	0x08007973
 80078b0:	08007973 	.word	0x08007973
 80078b4:	08007927 	.word	0x08007927
 80078b8:	08007973 	.word	0x08007973
 80078bc:	08007973 	.word	0x08007973
 80078c0:	08007973 	.word	0x08007973
 80078c4:	08007973 	.word	0x08007973
 80078c8:	08007973 	.word	0x08007973
 80078cc:	08007973 	.word	0x08007973
 80078d0:	08007973 	.word	0x08007973
 80078d4:	08007973 	.word	0x08007973
 80078d8:	08007973 	.word	0x08007973
 80078dc:	08007973 	.word	0x08007973
 80078e0:	08007973 	.word	0x08007973
 80078e4:	08007973 	.word	0x08007973
 80078e8:	08007973 	.word	0x08007973
 80078ec:	08007973 	.word	0x08007973
 80078f0:	08007973 	.word	0x08007973
 80078f4:	08007965 	.word	0x08007965
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d036      	beq.n	800796a <UART_SetConfig+0x6b6>
 80078fc:	e039      	b.n	8007972 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078fe:	f7fd fd87 	bl	8005410 <HAL_RCCEx_GetD3PCLK1Freq>
 8007902:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007904:	e03b      	b.n	800797e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007906:	f107 0314 	add.w	r3, r7, #20
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd fd96 	bl	800543c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007914:	e033      	b.n	800797e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	4618      	mov	r0, r3
 800791c:	f7fd fee2 	bl	80056e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007924:	e02b      	b.n	800797e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <UART_SetConfig+0x69c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <UART_SetConfig+0x69c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	08db      	lsrs	r3, r3, #3
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	4a08      	ldr	r2, [pc, #32]	; (8007960 <UART_SetConfig+0x6ac>)
 800793e:	fa22 f303 	lsr.w	r3, r2, r3
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007944:	e01b      	b.n	800797e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <UART_SetConfig+0x6ac>)
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800794a:	e018      	b.n	800797e <UART_SetConfig+0x6ca>
 800794c:	40011400 	.word	0x40011400
 8007950:	58024400 	.word	0x58024400
 8007954:	40007800 	.word	0x40007800
 8007958:	40007c00 	.word	0x40007c00
 800795c:	58000c00 	.word	0x58000c00
 8007960:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007964:	4bc4      	ldr	r3, [pc, #784]	; (8007c78 <UART_SetConfig+0x9c4>)
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007968:	e009      	b.n	800797e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007970:	e005      	b.n	800797e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800797c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 81da 	beq.w	8007d3a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	4abc      	ldr	r2, [pc, #752]	; (8007c7c <UART_SetConfig+0x9c8>)
 800798c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007990:	461a      	mov	r2, r3
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	fbb3 f3f2 	udiv	r3, r3, r2
 8007998:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	4613      	mov	r3, r2
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	6a3a      	ldr	r2, [r7, #32]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d305      	bcc.n	80079b6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b0:	6a3a      	ldr	r2, [r7, #32]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d903      	bls.n	80079be <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80079bc:	e1bd      	b.n	8007d3a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	4618      	mov	r0, r3
 80079c2:	f04f 0100 	mov.w	r1, #0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	4aac      	ldr	r2, [pc, #688]	; (8007c7c <UART_SetConfig+0x9c8>)
 80079cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	f7f8 fea7 	bl	8000728 <__aeabi_uldivmod>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	020b      	lsls	r3, r1, #8
 80079ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079f0:	0202      	lsls	r2, r0, #8
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	6849      	ldr	r1, [r1, #4]
 80079f6:	0849      	lsrs	r1, r1, #1
 80079f8:	4608      	mov	r0, r1
 80079fa:	f04f 0100 	mov.w	r1, #0
 80079fe:	1814      	adds	r4, r2, r0
 8007a00:	eb43 0501 	adc.w	r5, r3, r1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f8 fe89 	bl	8000728 <__aeabi_uldivmod>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a24:	d308      	bcc.n	8007a38 <UART_SetConfig+0x784>
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2c:	d204      	bcs.n	8007a38 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a34:	60da      	str	r2, [r3, #12]
 8007a36:	e180      	b.n	8007d3a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a3e:	e17c      	b.n	8007d3a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a48:	f040 80bf 	bne.w	8007bca <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	dc49      	bgt.n	8007ae8 <UART_SetConfig+0x834>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	db7c      	blt.n	8007b52 <UART_SetConfig+0x89e>
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d87a      	bhi.n	8007b52 <UART_SetConfig+0x89e>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <UART_SetConfig+0x7b0>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007aef 	.word	0x08007aef
 8007a68:	08007af7 	.word	0x08007af7
 8007a6c:	08007b53 	.word	0x08007b53
 8007a70:	08007b53 	.word	0x08007b53
 8007a74:	08007aff 	.word	0x08007aff
 8007a78:	08007b53 	.word	0x08007b53
 8007a7c:	08007b53 	.word	0x08007b53
 8007a80:	08007b53 	.word	0x08007b53
 8007a84:	08007b0f 	.word	0x08007b0f
 8007a88:	08007b53 	.word	0x08007b53
 8007a8c:	08007b53 	.word	0x08007b53
 8007a90:	08007b53 	.word	0x08007b53
 8007a94:	08007b53 	.word	0x08007b53
 8007a98:	08007b53 	.word	0x08007b53
 8007a9c:	08007b53 	.word	0x08007b53
 8007aa0:	08007b53 	.word	0x08007b53
 8007aa4:	08007b1f 	.word	0x08007b1f
 8007aa8:	08007b53 	.word	0x08007b53
 8007aac:	08007b53 	.word	0x08007b53
 8007ab0:	08007b53 	.word	0x08007b53
 8007ab4:	08007b53 	.word	0x08007b53
 8007ab8:	08007b53 	.word	0x08007b53
 8007abc:	08007b53 	.word	0x08007b53
 8007ac0:	08007b53 	.word	0x08007b53
 8007ac4:	08007b53 	.word	0x08007b53
 8007ac8:	08007b53 	.word	0x08007b53
 8007acc:	08007b53 	.word	0x08007b53
 8007ad0:	08007b53 	.word	0x08007b53
 8007ad4:	08007b53 	.word	0x08007b53
 8007ad8:	08007b53 	.word	0x08007b53
 8007adc:	08007b53 	.word	0x08007b53
 8007ae0:	08007b53 	.word	0x08007b53
 8007ae4:	08007b45 	.word	0x08007b45
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d02e      	beq.n	8007b4a <UART_SetConfig+0x896>
 8007aec:	e031      	b.n	8007b52 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aee:	f7fc fd23 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8007af2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007af4:	e033      	b.n	8007b5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af6:	f7fc fd35 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8007afa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007afc:	e02f      	b.n	8007b5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007afe:	f107 0314 	add.w	r3, r7, #20
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd fc9a 	bl	800543c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b0c:	e027      	b.n	8007b5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0e:	f107 0308 	add.w	r3, r7, #8
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fd fde6 	bl	80056e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1c:	e01f      	b.n	8007b5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b1e:	4b58      	ldr	r3, [pc, #352]	; (8007c80 <UART_SetConfig+0x9cc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b2a:	4b55      	ldr	r3, [pc, #340]	; (8007c80 <UART_SetConfig+0x9cc>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	08db      	lsrs	r3, r3, #3
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	4a53      	ldr	r2, [pc, #332]	; (8007c84 <UART_SetConfig+0x9d0>)
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b3c:	e00f      	b.n	8007b5e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007b3e:	4b51      	ldr	r3, [pc, #324]	; (8007c84 <UART_SetConfig+0x9d0>)
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b42:	e00c      	b.n	8007b5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b44:	4b4c      	ldr	r3, [pc, #304]	; (8007c78 <UART_SetConfig+0x9c4>)
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b48:	e009      	b.n	8007b5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b50:	e005      	b.n	8007b5e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80ea 	beq.w	8007d3a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	4a44      	ldr	r2, [pc, #272]	; (8007c7c <UART_SetConfig+0x9c8>)
 8007b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b78:	005a      	lsls	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	2b0f      	cmp	r3, #15
 8007b92:	d916      	bls.n	8007bc2 <UART_SetConfig+0x90e>
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b9a:	d212      	bcs.n	8007bc2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	f023 030f 	bic.w	r3, r3, #15
 8007ba4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	e0bb      	b.n	8007d3a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007bc8:	e0b7      	b.n	8007d3a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	dc4a      	bgt.n	8007c68 <UART_SetConfig+0x9b4>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f2c0 8086 	blt.w	8007ce4 <UART_SetConfig+0xa30>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	f200 8083 	bhi.w	8007ce4 <UART_SetConfig+0xa30>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x930>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c6f 	.word	0x08007c6f
 8007be8:	08007c89 	.word	0x08007c89
 8007bec:	08007ce5 	.word	0x08007ce5
 8007bf0:	08007ce5 	.word	0x08007ce5
 8007bf4:	08007c91 	.word	0x08007c91
 8007bf8:	08007ce5 	.word	0x08007ce5
 8007bfc:	08007ce5 	.word	0x08007ce5
 8007c00:	08007ce5 	.word	0x08007ce5
 8007c04:	08007ca1 	.word	0x08007ca1
 8007c08:	08007ce5 	.word	0x08007ce5
 8007c0c:	08007ce5 	.word	0x08007ce5
 8007c10:	08007ce5 	.word	0x08007ce5
 8007c14:	08007ce5 	.word	0x08007ce5
 8007c18:	08007ce5 	.word	0x08007ce5
 8007c1c:	08007ce5 	.word	0x08007ce5
 8007c20:	08007ce5 	.word	0x08007ce5
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007ce5 	.word	0x08007ce5
 8007c2c:	08007ce5 	.word	0x08007ce5
 8007c30:	08007ce5 	.word	0x08007ce5
 8007c34:	08007ce5 	.word	0x08007ce5
 8007c38:	08007ce5 	.word	0x08007ce5
 8007c3c:	08007ce5 	.word	0x08007ce5
 8007c40:	08007ce5 	.word	0x08007ce5
 8007c44:	08007ce5 	.word	0x08007ce5
 8007c48:	08007ce5 	.word	0x08007ce5
 8007c4c:	08007ce5 	.word	0x08007ce5
 8007c50:	08007ce5 	.word	0x08007ce5
 8007c54:	08007ce5 	.word	0x08007ce5
 8007c58:	08007ce5 	.word	0x08007ce5
 8007c5c:	08007ce5 	.word	0x08007ce5
 8007c60:	08007ce5 	.word	0x08007ce5
 8007c64:	08007cd7 	.word	0x08007cd7
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	d037      	beq.n	8007cdc <UART_SetConfig+0xa28>
 8007c6c:	e03a      	b.n	8007ce4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c6e:	f7fc fc63 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8007c72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c74:	e03c      	b.n	8007cf0 <UART_SetConfig+0xa3c>
 8007c76:	bf00      	nop
 8007c78:	003d0900 	.word	0x003d0900
 8007c7c:	08014cac 	.word	0x08014cac
 8007c80:	58024400 	.word	0x58024400
 8007c84:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7fc fc6c 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8007c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c8e:	e02f      	b.n	8007cf0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c90:	f107 0314 	add.w	r3, r7, #20
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd fbd1 	bl	800543c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c9e:	e027      	b.n	8007cf0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca0:	f107 0308 	add.w	r3, r7, #8
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fd fd1d 	bl	80056e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cae:	e01f      	b.n	8007cf0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cb0:	4b2c      	ldr	r3, [pc, #176]	; (8007d64 <UART_SetConfig+0xab0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cbc:	4b29      	ldr	r3, [pc, #164]	; (8007d64 <UART_SetConfig+0xab0>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	08db      	lsrs	r3, r3, #3
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	4a28      	ldr	r2, [pc, #160]	; (8007d68 <UART_SetConfig+0xab4>)
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cce:	e00f      	b.n	8007cf0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007cd0:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <UART_SetConfig+0xab4>)
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cd4:	e00c      	b.n	8007cf0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cd6:	4b25      	ldr	r3, [pc, #148]	; (8007d6c <UART_SetConfig+0xab8>)
 8007cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cda:	e009      	b.n	8007cf0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ce2:	e005      	b.n	8007cf0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007cee:	bf00      	nop
    }

    if (pclk != 0U)
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d021      	beq.n	8007d3a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <UART_SetConfig+0xabc>)
 8007cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d00:	461a      	mov	r2, r3
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	441a      	add	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	2b0f      	cmp	r3, #15
 8007d20:	d908      	bls.n	8007d34 <UART_SetConfig+0xa80>
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d28:	d204      	bcs.n	8007d34 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	e002      	b.n	8007d3a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3738      	adds	r7, #56	; 0x38
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bdb0      	pop	{r4, r5, r7, pc}
 8007d62:	bf00      	nop
 8007d64:	58024400 	.word	0x58024400
 8007d68:	03d09000 	.word	0x03d09000
 8007d6c:	003d0900 	.word	0x003d0900
 8007d70:	08014cac 	.word	0x08014cac

08007d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00a      	beq.n	8007d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01a      	beq.n	8007e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e72:	d10a      	bne.n	8007e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	605a      	str	r2, [r3, #4]
  }
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ec8:	f7fa f8bc 	bl	8002044 <HAL_GetTick>
 8007ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d10e      	bne.n	8007efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f82f 	bl	8007f4e <UART_WaitOnFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e025      	b.n	8007f46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d10e      	bne.n	8007f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f819 	bl	8007f4e <UART_WaitOnFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e00f      	b.n	8007f46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	603b      	str	r3, [r7, #0]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f5e:	e062      	b.n	8008026 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d05e      	beq.n	8008026 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f68:	f7fa f86c 	bl	8002044 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d302      	bcc.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d11d      	bne.n	8007fba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e045      	b.n	8008046 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d02e      	beq.n	8008026 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd6:	d126      	bne.n	8008026 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ff0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0201 	bic.w	r2, r2, #1
 8008000:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e00f      	b.n	8008046 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4013      	ands	r3, r2
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	bf0c      	ite	eq
 8008036:	2301      	moveq	r3, #1
 8008038:	2300      	movne	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	461a      	mov	r2, r3
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	429a      	cmp	r2, r3
 8008042:	d08d      	beq.n	8007f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_UARTEx_DisableFifoMode+0x16>
 8008060:	2302      	movs	r3, #2
 8008062:	e027      	b.n	80080b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2224      	movs	r2, #36	; 0x24
 8008070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e02d      	b.n	8008134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2224      	movs	r2, #36	; 0x24
 80080e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f84f 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008150:	2302      	movs	r3, #2
 8008152:	e02d      	b.n	80081b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	; 0x24
 8008160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f811 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081d8:	e031      	b.n	800823e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081da:	2310      	movs	r3, #16
 80081dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081de:	2310      	movs	r3, #16
 80081e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f5b      	lsrs	r3, r3, #29
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	7b3a      	ldrb	r2, [r7, #12]
 8008206:	4911      	ldr	r1, [pc, #68]	; (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800820e:	7b3a      	ldrb	r2, [r7, #12]
 8008210:	490f      	ldr	r1, [pc, #60]	; (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	7b7a      	ldrb	r2, [r7, #13]
 8008224:	4909      	ldr	r1, [pc, #36]	; (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008226:	5c8a      	ldrb	r2, [r1, r2]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800822c:	7b7a      	ldrb	r2, [r7, #13]
 800822e:	4908      	ldr	r1, [pc, #32]	; (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008232:	fb93 f3f2 	sdiv	r3, r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	08014cc4 	.word	0x08014cc4
 8008250:	08014ccc 	.word	0x08014ccc

08008254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008254:	b084      	sub	sp, #16
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	f107 001c 	add.w	r0, r7, #28
 8008262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	2b01      	cmp	r3, #1
 800826a:	d120      	bne.n	80082ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	4b2a      	ldr	r3, [pc, #168]	; (8008328 <USB_CoreInit+0xd4>)
 800827e:	4013      	ands	r3, r2
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d105      	bne.n	80082a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa60 	bl	8008768 <USB_CoreReset>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
 80082ac:	e01a      	b.n	80082e4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa54 	bl	8008768 <USB_CoreReset>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
 80082d6:	e005      	b.n	80082e4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d116      	bne.n	8008318 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <USB_CoreInit+0xd8>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f043 0206 	orr.w	r2, r3, #6
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f043 0220 	orr.w	r2, r3, #32
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008324:	b004      	add	sp, #16
 8008326:	4770      	bx	lr
 8008328:	ffbdffbf 	.word	0xffbdffbf
 800832c:	03ee0000 	.word	0x03ee0000

08008330 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f023 0201 	bic.w	r2, r3, #1
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d106      	bne.n	800837e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60da      	str	r2, [r3, #12]
 800837c:	e00b      	b.n	8008396 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800837e:	78fb      	ldrb	r3, [r7, #3]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60da      	str	r2, [r3, #12]
 8008390:	e001      	b.n	8008396 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e003      	b.n	800839e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008396:	2032      	movs	r0, #50	; 0x32
 8008398:	f7f9 fe60 	bl	800205c <HAL_Delay>

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083a8:	b084      	sub	sp, #16
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b086      	sub	sp, #24
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80083b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	613b      	str	r3, [r7, #16]
 80083c6:	e009      	b.n	80083dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3340      	adds	r3, #64	; 0x40
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	3301      	adds	r3, #1
 80083da:	613b      	str	r3, [r7, #16]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b0e      	cmp	r3, #14
 80083e0:	d9f2      	bls.n	80083c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11c      	bne.n	8008422 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f6:	f043 0302 	orr.w	r3, r3, #2
 80083fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	e005      	b.n	800842e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008434:	461a      	mov	r2, r3
 8008436:	2300      	movs	r3, #0
 8008438:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008440:	4619      	mov	r1, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008448:	461a      	mov	r2, r3
 800844a:	680b      	ldr	r3, [r1, #0]
 800844c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	2b01      	cmp	r3, #1
 8008452:	d10c      	bne.n	800846e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800845a:	2100      	movs	r1, #0
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f949 	bl	80086f4 <USB_SetDevSpeed>
 8008462:	e008      	b.n	8008476 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008464:	2101      	movs	r1, #1
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f944 	bl	80086f4 <USB_SetDevSpeed>
 800846c:	e003      	b.n	8008476 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800846e:	2103      	movs	r1, #3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f93f 	bl	80086f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008476:	2110      	movs	r1, #16
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8f3 	bl	8008664 <USB_FlushTxFifo>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f911 	bl	80086b0 <USB_FlushRxFifo>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849e:	461a      	mov	r2, r3
 80084a0:	2300      	movs	r3, #0
 80084a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084aa:	461a      	mov	r2, r3
 80084ac:	2300      	movs	r3, #0
 80084ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	461a      	mov	r2, r3
 80084b8:	2300      	movs	r3, #0
 80084ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084bc:	2300      	movs	r3, #0
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	e043      	b.n	800854a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084d8:	d118      	bne.n	800850c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	461a      	mov	r2, r3
 80084ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	e013      	b.n	800851e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	461a      	mov	r2, r3
 8008504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e008      	b.n	800851e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008518:	461a      	mov	r2, r3
 800851a:	2300      	movs	r3, #0
 800851c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852a:	461a      	mov	r2, r3
 800852c:	2300      	movs	r3, #0
 800852e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853c:	461a      	mov	r2, r3
 800853e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	3301      	adds	r3, #1
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	429a      	cmp	r2, r3
 8008550:	d3b7      	bcc.n	80084c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	e043      	b.n	80085e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800856a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800856e:	d118      	bne.n	80085a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008582:	461a      	mov	r2, r3
 8008584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	e013      	b.n	80085b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008598:	461a      	mov	r2, r3
 800859a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e008      	b.n	80085b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ae:	461a      	mov	r2, r3
 80085b0:	2300      	movs	r3, #0
 80085b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c0:	461a      	mov	r2, r3
 80085c2:	2300      	movs	r3, #0
 80085c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d2:	461a      	mov	r2, r3
 80085d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	3301      	adds	r3, #1
 80085de:	613b      	str	r3, [r7, #16]
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d3b7      	bcc.n	8008558 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008608:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	2b00      	cmp	r3, #0
 800860e:	d105      	bne.n	800861c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f043 0210 	orr.w	r2, r3, #16
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	4b0e      	ldr	r3, [pc, #56]	; (800865c <USB_DevInit+0x2b4>)
 8008622:	4313      	orrs	r3, r2
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f043 0208 	orr.w	r2, r3, #8
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800863a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863c:	2b01      	cmp	r3, #1
 800863e:	d105      	bne.n	800864c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	4b06      	ldr	r3, [pc, #24]	; (8008660 <USB_DevInit+0x2b8>)
 8008646:	4313      	orrs	r3, r2
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008658:	b004      	add	sp, #16
 800865a:	4770      	bx	lr
 800865c:	803c3800 	.word	0x803c3800
 8008660:	40000004 	.word	0x40000004

08008664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	019b      	lsls	r3, r3, #6
 8008676:	f043 0220 	orr.w	r2, r3, #32
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4a09      	ldr	r2, [pc, #36]	; (80086ac <USB_FlushTxFifo+0x48>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d901      	bls.n	8008690 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e006      	b.n	800869e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b20      	cmp	r3, #32
 800869a:	d0f0      	beq.n	800867e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	00030d40 	.word	0x00030d40

080086b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2210      	movs	r2, #16
 80086c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <USB_FlushRxFifo+0x40>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d901      	bls.n	80086d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d0f0      	beq.n	80086c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	00030d40 	.word	0x00030d40

080086f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008714:	4313      	orrs	r3, r2
 8008716:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008740:	f023 0303 	bic.w	r3, r3, #3
 8008744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008754:	f043 0302 	orr.w	r3, r3, #2
 8008758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4a13      	ldr	r2, [pc, #76]	; (80087cc <USB_CoreReset+0x64>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d901      	bls.n	8008786 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e01b      	b.n	80087be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	daf2      	bge.n	8008774 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <USB_CoreReset+0x64>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d901      	bls.n	80087b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e006      	b.n	80087be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d0f0      	beq.n	800879e <USB_CoreReset+0x36>

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	00030d40 	.word	0x00030d40

080087d0 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 80087da:	1df9      	adds	r1, r7, #7
 80087dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80087e0:	2201      	movs	r2, #1
 80087e2:	4803      	ldr	r0, [pc, #12]	; (80087f0 <DEV_SPI_WRite+0x20>)
 80087e4:	f7fd fb38 	bl	8005e58 <HAL_SPI_Transmit>
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	2400a5bc 	.word	0x2400a5bc

080087f4 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80087f8:	2201      	movs	r2, #1
 80087fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087fe:	480a      	ldr	r0, [pc, #40]	; (8008828 <DEV_Module_Init+0x34>)
 8008800:	f7fa fbc2 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8008804:	2201      	movs	r2, #1
 8008806:	2140      	movs	r1, #64	; 0x40
 8008808:	4807      	ldr	r0, [pc, #28]	; (8008828 <DEV_Module_Init+0x34>)
 800880a:	f7fa fbbd 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800880e:	2201      	movs	r2, #1
 8008810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008814:	4805      	ldr	r0, [pc, #20]	; (800882c <DEV_Module_Init+0x38>)
 8008816:	f7fa fbb7 	bl	8002f88 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800881a:	2100      	movs	r1, #0
 800881c:	4804      	ldr	r0, [pc, #16]	; (8008830 <DEV_Module_Init+0x3c>)
 800881e:	f7fd fe4d 	bl	80064bc <HAL_TIM_PWM_Start>
		return 0;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	58021800 	.word	0x58021800
 800882c:	58021400 	.word	0x58021400
 8008830:	2400a644 	.word	0x2400a644

08008834 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8008834:	b590      	push	{r4, r7, lr}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	461a      	mov	r2, r3
 8008842:	4623      	mov	r3, r4
 8008844:	80fb      	strh	r3, [r7, #6]
 8008846:	4603      	mov	r3, r0
 8008848:	80bb      	strh	r3, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	807b      	strh	r3, [r7, #2]
 800884e:	4613      	mov	r3, r2
 8008850:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8008852:	4a1c      	ldr	r2, [pc, #112]	; (80088c4 <Paint_NewImage+0x90>)
 8008854:	88fb      	ldrh	r3, [r7, #6]
 8008856:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8008858:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <Paint_NewImage+0x90>)
 800885a:	88bb      	ldrh	r3, [r7, #4]
 800885c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800885e:	4a19      	ldr	r2, [pc, #100]	; (80088c4 <Paint_NewImage+0x90>)
 8008860:	883b      	ldrh	r3, [r7, #0]
 8008862:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8008864:	4a17      	ldr	r2, [pc, #92]	; (80088c4 <Paint_NewImage+0x90>)
 8008866:	88fb      	ldrh	r3, [r7, #6]
 8008868:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800886a:	4a16      	ldr	r2, [pc, #88]	; (80088c4 <Paint_NewImage+0x90>)
 800886c:	88bb      	ldrh	r3, [r7, #4]
 800886e:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8008870:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <Paint_NewImage+0x90>)
 8008872:	8a5b      	ldrh	r3, [r3, #18]
 8008874:	b29b      	uxth	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <Paint_NewImage+0x90>)
 800887a:	8a9b      	ldrh	r3, [r3, #20]
 800887c:	b29b      	uxth	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	4811      	ldr	r0, [pc, #68]	; (80088c8 <Paint_NewImage+0x94>)
 8008882:	f008 fb83 	bl	8010f8c <iprintf>
   
    Paint.Rotate = Rotate;
 8008886:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <Paint_NewImage+0x90>)
 8008888:	887b      	ldrh	r3, [r7, #2]
 800888a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800888c:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <Paint_NewImage+0x90>)
 800888e:	2200      	movs	r2, #0
 8008890:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8008892:	887b      	ldrh	r3, [r7, #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <Paint_NewImage+0x6a>
 8008898:	887b      	ldrh	r3, [r7, #2]
 800889a:	2bb4      	cmp	r3, #180	; 0xb4
 800889c:	d106      	bne.n	80088ac <Paint_NewImage+0x78>
        Paint.Width = Width;
 800889e:	4a09      	ldr	r2, [pc, #36]	; (80088c4 <Paint_NewImage+0x90>)
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80088a4:	4a07      	ldr	r2, [pc, #28]	; (80088c4 <Paint_NewImage+0x90>)
 80088a6:	88bb      	ldrh	r3, [r7, #4]
 80088a8:	80d3      	strh	r3, [r2, #6]
 80088aa:	e006      	b.n	80088ba <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80088ac:	4a05      	ldr	r2, [pc, #20]	; (80088c4 <Paint_NewImage+0x90>)
 80088ae:	88bb      	ldrh	r3, [r7, #4]
 80088b0:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80088b2:	4a04      	ldr	r2, [pc, #16]	; (80088c4 <Paint_NewImage+0x90>)
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	80d3      	strh	r3, [r2, #6]
    }
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd90      	pop	{r4, r7, pc}
 80088c2:	bf00      	nop
 80088c4:	2400ab30 	.word	0x2400ab30
 80088c8:	08014774 	.word	0x08014774

080088cc <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80088d4:	4a04      	ldr	r2, [pc, #16]	; (80088e8 <Paint_SetClearFuntion+0x1c>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6013      	str	r3, [r2, #0]
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	2400ab48 	.word	0x2400ab48

080088ec <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80088f4:	4a04      	ldr	r2, [pc, #16]	; (8008908 <Paint_SetDisplayFuntion+0x1c>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6013      	str	r3, [r2, #0]
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	2400ab2c 	.word	0x2400ab2c

0800890c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	80fb      	strh	r3, [r7, #6]
 8008916:	460b      	mov	r3, r1
 8008918:	80bb      	strh	r3, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800891e:	4b50      	ldr	r3, [pc, #320]	; (8008a60 <Paint_SetPixel+0x154>)
 8008920:	889b      	ldrh	r3, [r3, #4]
 8008922:	b29b      	uxth	r3, r3
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	429a      	cmp	r2, r3
 8008928:	d805      	bhi.n	8008936 <Paint_SetPixel+0x2a>
 800892a:	4b4d      	ldr	r3, [pc, #308]	; (8008a60 <Paint_SetPixel+0x154>)
 800892c:	88db      	ldrh	r3, [r3, #6]
 800892e:	b29b      	uxth	r3, r3
 8008930:	88ba      	ldrh	r2, [r7, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d903      	bls.n	800893e <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8008936:	484b      	ldr	r0, [pc, #300]	; (8008a64 <Paint_SetPixel+0x158>)
 8008938:	f008 fbae 	bl	8011098 <puts>
        return;
 800893c:	e08c      	b.n	8008a58 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800893e:	4b48      	ldr	r3, [pc, #288]	; (8008a60 <Paint_SetPixel+0x154>)
 8008940:	89db      	ldrh	r3, [r3, #14]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008948:	d02d      	beq.n	80089a6 <Paint_SetPixel+0x9a>
 800894a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800894e:	f300 8080 	bgt.w	8008a52 <Paint_SetPixel+0x146>
 8008952:	2bb4      	cmp	r3, #180	; 0xb4
 8008954:	d016      	beq.n	8008984 <Paint_SetPixel+0x78>
 8008956:	2bb4      	cmp	r3, #180	; 0xb4
 8008958:	dc7b      	bgt.n	8008a52 <Paint_SetPixel+0x146>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <Paint_SetPixel+0x58>
 800895e:	2b5a      	cmp	r3, #90	; 0x5a
 8008960:	d005      	beq.n	800896e <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8008962:	e076      	b.n	8008a52 <Paint_SetPixel+0x146>
        X = Xpoint;
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8008968:	88bb      	ldrh	r3, [r7, #4]
 800896a:	81bb      	strh	r3, [r7, #12]
        break;
 800896c:	e026      	b.n	80089bc <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800896e:	4b3c      	ldr	r3, [pc, #240]	; (8008a60 <Paint_SetPixel+0x154>)
 8008970:	891b      	ldrh	r3, [r3, #8]
 8008972:	b29a      	uxth	r2, r3
 8008974:	88bb      	ldrh	r3, [r7, #4]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	81bb      	strh	r3, [r7, #12]
        break;
 8008982:	e01b      	b.n	80089bc <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8008984:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <Paint_SetPixel+0x154>)
 8008986:	891b      	ldrh	r3, [r3, #8]
 8008988:	b29a      	uxth	r2, r3
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8008994:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <Paint_SetPixel+0x154>)
 8008996:	895b      	ldrh	r3, [r3, #10]
 8008998:	b29a      	uxth	r2, r3
 800899a:	88bb      	ldrh	r3, [r7, #4]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	81bb      	strh	r3, [r7, #12]
        break;
 80089a4:	e00a      	b.n	80089bc <Paint_SetPixel+0xb0>
        X = Ypoint;
 80089a6:	88bb      	ldrh	r3, [r7, #4]
 80089a8:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80089aa:	4b2d      	ldr	r3, [pc, #180]	; (8008a60 <Paint_SetPixel+0x154>)
 80089ac:	895b      	ldrh	r3, [r3, #10]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	81bb      	strh	r3, [r7, #12]
        break;
 80089ba:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80089bc:	4b28      	ldr	r3, [pc, #160]	; (8008a60 <Paint_SetPixel+0x154>)
 80089be:	8a1b      	ldrh	r3, [r3, #16]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d847      	bhi.n	8008a56 <Paint_SetPixel+0x14a>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <Paint_SetPixel+0xc0>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a23 	.word	0x08008a23
 80089d0:	080089dd 	.word	0x080089dd
 80089d4:	080089ef 	.word	0x080089ef
 80089d8:	08008a01 	.word	0x08008a01
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80089dc:	4b20      	ldr	r3, [pc, #128]	; (8008a60 <Paint_SetPixel+0x154>)
 80089de:	891b      	ldrh	r3, [r3, #8]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	89fb      	ldrh	r3, [r7, #14]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	81fb      	strh	r3, [r7, #14]
        break;
 80089ec:	e01a      	b.n	8008a24 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80089ee:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <Paint_SetPixel+0x154>)
 80089f0:	895b      	ldrh	r3, [r3, #10]
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	89bb      	ldrh	r3, [r7, #12]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	81bb      	strh	r3, [r7, #12]
        break;
 80089fe:	e011      	b.n	8008a24 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8008a00:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <Paint_SetPixel+0x154>)
 8008a02:	891b      	ldrh	r3, [r3, #8]
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	89fb      	ldrh	r3, [r7, #14]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <Paint_SetPixel+0x154>)
 8008a12:	895b      	ldrh	r3, [r3, #10]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	89bb      	ldrh	r3, [r7, #12]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	81bb      	strh	r3, [r7, #12]
        break;
 8008a20:	e000      	b.n	8008a24 <Paint_SetPixel+0x118>
        break;
 8008a22:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8008a24:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <Paint_SetPixel+0x154>)
 8008a26:	891b      	ldrh	r3, [r3, #8]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	89fa      	ldrh	r2, [r7, #14]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d805      	bhi.n	8008a3c <Paint_SetPixel+0x130>
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <Paint_SetPixel+0x154>)
 8008a32:	895b      	ldrh	r3, [r3, #10]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	89ba      	ldrh	r2, [r7, #12]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d903      	bls.n	8008a44 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8008a3c:	4809      	ldr	r0, [pc, #36]	; (8008a64 <Paint_SetPixel+0x158>)
 8008a3e:	f008 fb2b 	bl	8011098 <puts>
        return;
 8008a42:	e009      	b.n	8008a58 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8008a44:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <Paint_SetPixel+0x15c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	887a      	ldrh	r2, [r7, #2]
 8008a4a:	89b9      	ldrh	r1, [r7, #12]
 8008a4c:	89f8      	ldrh	r0, [r7, #14]
 8008a4e:	4798      	blx	r3
 8008a50:	e002      	b.n	8008a58 <Paint_SetPixel+0x14c>
        return;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <Paint_SetPixel+0x14c>
        return;
 8008a56:	bf00      	nop
}
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	2400ab30 	.word	0x2400ab30
 8008a64:	08014874 	.word	0x08014874
 8008a68:	2400ab2c 	.word	0x2400ab2c

08008a6c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8008a76:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <Paint_Clear+0x1c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	88fa      	ldrh	r2, [r7, #6]
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	2400ab48 	.word	0x2400ab48

08008a8c <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	80fb      	strh	r3, [r7, #6]
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	80bb      	strh	r3, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	807b      	strh	r3, [r7, #2]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 8008aaa:	88bb      	ldrh	r3, [r7, #4]
 8008aac:	81bb      	strh	r3, [r7, #12]
 8008aae:	e012      	b.n	8008ad6 <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 8008ab0:	88fb      	ldrh	r3, [r7, #6]
 8008ab2:	81fb      	strh	r3, [r7, #14]
 8008ab4:	e008      	b.n	8008ac8 <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 8008ab6:	8c3a      	ldrh	r2, [r7, #32]
 8008ab8:	89b9      	ldrh	r1, [r7, #12]
 8008aba:	89fb      	ldrh	r3, [r7, #14]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff ff25 	bl	800890c <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 8008ac2:	89fb      	ldrh	r3, [r7, #14]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	81fb      	strh	r3, [r7, #14]
 8008ac8:	89fa      	ldrh	r2, [r7, #14]
 8008aca:	887b      	ldrh	r3, [r7, #2]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d3f2      	bcc.n	8008ab6 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 8008ad0:	89bb      	ldrh	r3, [r7, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	81bb      	strh	r3, [r7, #12]
 8008ad6:	89ba      	ldrh	r2, [r7, #12]
 8008ad8:	883b      	ldrh	r3, [r7, #0]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d3e8      	bcc.n	8008ab0 <Paint_ClearWindows+0x24>
        }
    }
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd90      	pop	{r4, r7, pc}

08008ae8 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8008ae8:	b590      	push	{r4, r7, lr}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	461a      	mov	r2, r3
 8008af6:	4623      	mov	r3, r4
 8008af8:	80fb      	strh	r3, [r7, #6]
 8008afa:	4603      	mov	r3, r0
 8008afc:	80bb      	strh	r3, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	807b      	strh	r3, [r7, #2]
 8008b02:	4613      	mov	r3, r2
 8008b04:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 8008b06:	4b44      	ldr	r3, [pc, #272]	; (8008c18 <Paint_DrawPoint+0x130>)
 8008b08:	889b      	ldrh	r3, [r3, #4]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	88fa      	ldrh	r2, [r7, #6]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d805      	bhi.n	8008b1e <Paint_DrawPoint+0x36>
 8008b12:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <Paint_DrawPoint+0x130>)
 8008b14:	88db      	ldrh	r3, [r3, #6]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	88ba      	ldrh	r2, [r7, #4]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d903      	bls.n	8008b26 <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8008b1e:	483f      	ldr	r0, [pc, #252]	; (8008c1c <Paint_DrawPoint+0x134>)
 8008b20:	f008 faba 	bl	8011098 <puts>
        return;
 8008b24:	e074      	b.n	8008c10 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 8008b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d144      	bne.n	8008bb8 <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 8008b2e:	2300      	movs	r3, #0
 8008b30:	81fb      	strh	r3, [r7, #14]
 8008b32:	e039      	b.n	8008ba8 <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 8008b34:	2300      	movs	r3, #0
 8008b36:	81bb      	strh	r3, [r7, #12]
 8008b38:	e029      	b.n	8008b8e <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8008b3a:	88fa      	ldrh	r2, [r7, #6]
 8008b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b40:	441a      	add	r2, r3
 8008b42:	787b      	ldrb	r3, [r7, #1]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	db28      	blt.n	8008b9c <Paint_DrawPoint+0xb4>
 8008b4a:	88ba      	ldrh	r2, [r7, #4]
 8008b4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b50:	441a      	add	r2, r3
 8008b52:	787b      	ldrb	r3, [r7, #1]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	db20      	blt.n	8008b9c <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8008b5a:	89fa      	ldrh	r2, [r7, #14]
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	4413      	add	r3, r2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	787b      	ldrb	r3, [r7, #1]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	b298      	uxth	r0, r3
 8008b6a:	89ba      	ldrh	r2, [r7, #12]
 8008b6c:	88bb      	ldrh	r3, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	787b      	ldrb	r3, [r7, #1]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	887a      	ldrh	r2, [r7, #2]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f7ff fec5 	bl	800890c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 8008b82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3301      	adds	r3, #1
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	81bb      	strh	r3, [r7, #12]
 8008b8e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008b92:	787b      	ldrb	r3, [r7, #1]
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	3b01      	subs	r3, #1
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	dbce      	blt.n	8008b3a <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 8008b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	81fb      	strh	r3, [r7, #14]
 8008ba8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008bac:	787b      	ldrb	r3, [r7, #1]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	dbbe      	blt.n	8008b34 <Paint_DrawPoint+0x4c>
 8008bb6:	e02b      	b.n	8008c10 <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	81fb      	strh	r3, [r7, #14]
 8008bbc:	e023      	b.n	8008c06 <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	81bb      	strh	r3, [r7, #12]
 8008bc2:	e015      	b.n	8008bf0 <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8008bc4:	89fa      	ldrh	r2, [r7, #14]
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	4413      	add	r3, r2
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b298      	uxth	r0, r3
 8008bd0:	89ba      	ldrh	r2, [r7, #12]
 8008bd2:	88bb      	ldrh	r3, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	887a      	ldrh	r2, [r7, #2]
 8008bde:	4619      	mov	r1, r3
 8008be0:	f7ff fe94 	bl	800890c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 8008be4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3301      	adds	r3, #1
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	81bb      	strh	r3, [r7, #12]
 8008bf0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008bf4:	787b      	ldrb	r3, [r7, #1]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	dbe4      	blt.n	8008bc4 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 8008bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3301      	adds	r3, #1
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	81fb      	strh	r3, [r7, #14]
 8008c06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008c0a:	787b      	ldrb	r3, [r7, #1]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	dbd6      	blt.n	8008bbe <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd90      	pop	{r4, r7, pc}
 8008c16:	bf00      	nop
 8008c18:	2400ab30 	.word	0x2400ab30
 8008c1c:	0801489c 	.word	0x0801489c

08008c20 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b08d      	sub	sp, #52	; 0x34
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4623      	mov	r3, r4
 8008c30:	80fb      	strh	r3, [r7, #6]
 8008c32:	4603      	mov	r3, r0
 8008c34:	80bb      	strh	r3, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	807b      	strh	r3, [r7, #2]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008c3e:	4b4d      	ldr	r3, [pc, #308]	; (8008d74 <Paint_DrawLine+0x154>)
 8008c40:	889b      	ldrh	r3, [r3, #4]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	88fa      	ldrh	r2, [r7, #6]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d811      	bhi.n	8008c6e <Paint_DrawLine+0x4e>
 8008c4a:	4b4a      	ldr	r3, [pc, #296]	; (8008d74 <Paint_DrawLine+0x154>)
 8008c4c:	88db      	ldrh	r3, [r3, #6]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	88ba      	ldrh	r2, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d80b      	bhi.n	8008c6e <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008c56:	4b47      	ldr	r3, [pc, #284]	; (8008d74 <Paint_DrawLine+0x154>)
 8008c58:	889b      	ldrh	r3, [r3, #4]
 8008c5a:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008c5c:	887a      	ldrh	r2, [r7, #2]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d805      	bhi.n	8008c6e <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008c62:	4b44      	ldr	r3, [pc, #272]	; (8008d74 <Paint_DrawLine+0x154>)
 8008c64:	88db      	ldrh	r3, [r3, #6]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	883a      	ldrh	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d903      	bls.n	8008c76 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8008c6e:	4842      	ldr	r0, [pc, #264]	; (8008d78 <Paint_DrawLine+0x158>)
 8008c70:	f008 fa12 	bl	8011098 <puts>
        return;
 8008c74:	e07b      	b.n	8008d6e <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 8008c76:	88fb      	ldrh	r3, [r7, #6]
 8008c78:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8008c7a:	88bb      	ldrh	r3, [r7, #4]
 8008c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008c7e:	887a      	ldrh	r2, [r7, #2]
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfb8      	it	lt
 8008c88:	425b      	neglt	r3, r3
 8008c8a:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8008c8c:	883a      	ldrh	r2, [r7, #0]
 8008c8e:	88bb      	ldrh	r3, [r7, #4]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfb8      	it	lt
 8008c96:	425b      	neglt	r3, r3
 8008c98:	425b      	negs	r3, r3
 8008c9a:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8008c9c:	88fa      	ldrh	r2, [r7, #6]
 8008c9e:	887b      	ldrh	r3, [r7, #2]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d201      	bcs.n	8008ca8 <Paint_DrawLine+0x88>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e001      	b.n	8008cac <Paint_DrawLine+0x8c>
 8008ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cac:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8008cae:	88ba      	ldrh	r2, [r7, #4]
 8008cb0:	883b      	ldrh	r3, [r7, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d201      	bcs.n	8008cba <Paint_DrawLine+0x9a>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e001      	b.n	8008cbe <Paint_DrawLine+0x9e>
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbe:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 8008cd2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d118      	bne.n	8008d0c <Paint_DrawLine+0xec>
 8008cda:	7ffa      	ldrb	r2, [r7, #31]
 8008cdc:	4b27      	ldr	r3, [pc, #156]	; (8008d7c <Paint_DrawLine+0x15c>)
 8008cde:	fba3 1302 	umull	r1, r3, r3, r2
 8008ce2:	0859      	lsrs	r1, r3, #1
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	440b      	add	r3, r1
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10c      	bne.n	8008d0c <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8008cf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008cf6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008cf8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	9200      	str	r2, [sp, #0]
 8008cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d02:	f7ff fef1 	bl	8008ae8 <Paint_DrawPoint>
            Dotted_Len = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	77fb      	strb	r3, [r7, #31]
 8008d0a:	e008      	b.n	8008d1e <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8008d0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d10:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008d12:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008d14:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008d16:	2401      	movs	r4, #1
 8008d18:	9400      	str	r4, [sp, #0]
 8008d1a:	f7ff fee5 	bl	8008ae8 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	dc0c      	bgt.n	8008d42 <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 8008d28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d2a:	887b      	ldrh	r3, [r7, #2]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d01b      	beq.n	8008d68 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8008d30:	6a3a      	ldr	r2, [r7, #32]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	4413      	add	r3, r2
 8008d36:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d3e:	4413      	add	r3, r2
 8008d40:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	dbbf      	blt.n	8008ccc <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 8008d4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d4e:	883b      	ldrh	r3, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d00b      	beq.n	8008d6c <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8008d54:	6a3a      	ldr	r2, [r7, #32]
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	4413      	add	r3, r2
 8008d5a:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d62:	4413      	add	r3, r2
 8008d64:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8008d66:	e7b1      	b.n	8008ccc <Paint_DrawLine+0xac>
                break;
 8008d68:	bf00      	nop
 8008d6a:	e000      	b.n	8008d6e <Paint_DrawLine+0x14e>
                break;
 8008d6c:	bf00      	nop
        }
    }
}
 8008d6e:	372c      	adds	r7, #44	; 0x2c
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd90      	pop	{r4, r7, pc}
 8008d74:	2400ab30 	.word	0x2400ab30
 8008d78:	080148dc 	.word	0x080148dc
 8008d7c:	aaaaaaab 	.word	0xaaaaaaab

08008d80 <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4623      	mov	r3, r4
 8008d90:	80fb      	strh	r3, [r7, #6]
 8008d92:	4603      	mov	r3, r0
 8008d94:	80bb      	strh	r3, [r7, #4]
 8008d96:	460b      	mov	r3, r1
 8008d98:	807b      	strh	r3, [r7, #2]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008d9e:	4b3a      	ldr	r3, [pc, #232]	; (8008e88 <Paint_DrawRectangle+0x108>)
 8008da0:	889b      	ldrh	r3, [r3, #4]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	88fa      	ldrh	r2, [r7, #6]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d811      	bhi.n	8008dce <Paint_DrawRectangle+0x4e>
 8008daa:	4b37      	ldr	r3, [pc, #220]	; (8008e88 <Paint_DrawRectangle+0x108>)
 8008dac:	88db      	ldrh	r3, [r3, #6]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	88ba      	ldrh	r2, [r7, #4]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d80b      	bhi.n	8008dce <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008db6:	4b34      	ldr	r3, [pc, #208]	; (8008e88 <Paint_DrawRectangle+0x108>)
 8008db8:	889b      	ldrh	r3, [r3, #4]
 8008dba:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008dbc:	887a      	ldrh	r2, [r7, #2]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d805      	bhi.n	8008dce <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008dc2:	4b31      	ldr	r3, [pc, #196]	; (8008e88 <Paint_DrawRectangle+0x108>)
 8008dc4:	88db      	ldrh	r3, [r3, #6]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	883a      	ldrh	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d903      	bls.n	8008dd6 <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 8008dce:	482f      	ldr	r0, [pc, #188]	; (8008e8c <Paint_DrawRectangle+0x10c>)
 8008dd0:	f008 f962 	bl	8011098 <puts>
        return;
 8008dd4:	e054      	b.n	8008e80 <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 8008dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d018      	beq.n	8008e10 <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 8008dde:	88bb      	ldrh	r3, [r7, #4]
 8008de0:	81fb      	strh	r3, [r7, #14]
 8008de2:	e010      	b.n	8008e06 <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 8008de4:	89fc      	ldrh	r4, [r7, #14]
 8008de6:	887a      	ldrh	r2, [r7, #2]
 8008de8:	89f9      	ldrh	r1, [r7, #14]
 8008dea:	88f8      	ldrh	r0, [r7, #6]
 8008dec:	2300      	movs	r3, #0
 8008dee:	9302      	str	r3, [sp, #8]
 8008df0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	8c3b      	ldrh	r3, [r7, #32]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	f7ff ff10 	bl	8008c20 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 8008e00:	89fb      	ldrh	r3, [r7, #14]
 8008e02:	3301      	adds	r3, #1
 8008e04:	81fb      	strh	r3, [r7, #14]
 8008e06:	89fa      	ldrh	r2, [r7, #14]
 8008e08:	883b      	ldrh	r3, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d3ea      	bcc.n	8008de4 <Paint_DrawRectangle+0x64>
 8008e0e:	e037      	b.n	8008e80 <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8008e10:	88bc      	ldrh	r4, [r7, #4]
 8008e12:	887a      	ldrh	r2, [r7, #2]
 8008e14:	88b9      	ldrh	r1, [r7, #4]
 8008e16:	88f8      	ldrh	r0, [r7, #6]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	9302      	str	r3, [sp, #8]
 8008e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	8c3b      	ldrh	r3, [r7, #32]
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4623      	mov	r3, r4
 8008e28:	f7ff fefa 	bl	8008c20 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8008e2c:	883c      	ldrh	r4, [r7, #0]
 8008e2e:	88fa      	ldrh	r2, [r7, #6]
 8008e30:	88b9      	ldrh	r1, [r7, #4]
 8008e32:	88f8      	ldrh	r0, [r7, #6]
 8008e34:	2300      	movs	r3, #0
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	8c3b      	ldrh	r3, [r7, #32]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4623      	mov	r3, r4
 8008e44:	f7ff feec 	bl	8008c20 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8008e48:	88bc      	ldrh	r4, [r7, #4]
 8008e4a:	887a      	ldrh	r2, [r7, #2]
 8008e4c:	8839      	ldrh	r1, [r7, #0]
 8008e4e:	8878      	ldrh	r0, [r7, #2]
 8008e50:	2300      	movs	r3, #0
 8008e52:	9302      	str	r3, [sp, #8]
 8008e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	8c3b      	ldrh	r3, [r7, #32]
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	4623      	mov	r3, r4
 8008e60:	f7ff fede 	bl	8008c20 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8008e64:	883c      	ldrh	r4, [r7, #0]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	8839      	ldrh	r1, [r7, #0]
 8008e6a:	8878      	ldrh	r0, [r7, #2]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	8c3b      	ldrh	r3, [r7, #32]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	4623      	mov	r3, r4
 8008e7c:	f7ff fed0 	bl	8008c20 <Paint_DrawLine>
    }
}
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd90      	pop	{r4, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2400ab30 	.word	0x2400ab30
 8008e8c:	0801491c 	.word	0x0801491c

08008e90 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	607b      	str	r3, [r7, #4]
 8008e98:	4603      	mov	r3, r0
 8008e9a:	81fb      	strh	r3, [r7, #14]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	81bb      	strh	r3, [r7, #12]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 8008ea4:	4b3f      	ldr	r3, [pc, #252]	; (8008fa4 <Paint_DrawChar+0x114>)
 8008ea6:	889b      	ldrh	r3, [r3, #4]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	89fa      	ldrh	r2, [r7, #14]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d805      	bhi.n	8008ebc <Paint_DrawChar+0x2c>
 8008eb0:	4b3c      	ldr	r3, [pc, #240]	; (8008fa4 <Paint_DrawChar+0x114>)
 8008eb2:	88db      	ldrh	r3, [r3, #6]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	89ba      	ldrh	r2, [r7, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d903      	bls.n	8008ec4 <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8008ebc:	483a      	ldr	r0, [pc, #232]	; (8008fa8 <Paint_DrawChar+0x118>)
 8008ebe:	f008 f8eb 	bl	8011098 <puts>
        return;
 8008ec2:	e06b      	b.n	8008f9c <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8008ec4:	7afb      	ldrb	r3, [r7, #11]
 8008ec6:	3b20      	subs	r3, #32
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	88d2      	ldrh	r2, [r2, #6]
 8008ecc:	fb02 f303 	mul.w	r3, r2, r3
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	8892      	ldrh	r2, [r2, #4]
 8008ed4:	08d2      	lsrs	r2, r2, #3
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	4611      	mov	r1, r2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	8892      	ldrh	r2, [r2, #4]
 8008ede:	f002 0207 	and.w	r2, r2, #7
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	bf14      	ite	ne
 8008ee8:	2201      	movne	r2, #1
 8008eea:	2200      	moveq	r2, #0
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	440a      	add	r2, r1
 8008ef0:	fb02 f303 	mul.w	r3, r2, r3
 8008ef4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4413      	add	r3, r2
 8008efe:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 8008f00:	2300      	movs	r3, #0
 8008f02:	837b      	strh	r3, [r7, #26]
 8008f04:	e045      	b.n	8008f92 <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 8008f06:	2300      	movs	r3, #0
 8008f08:	833b      	strh	r3, [r7, #24]
 8008f0a:	e030      	b.n	8008f6e <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4619      	mov	r1, r3
 8008f12:	8b3b      	ldrh	r3, [r7, #24]
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	2280      	movs	r2, #128	; 0x80
 8008f1a:	fa42 f303 	asr.w	r3, r2, r3
 8008f1e:	400b      	ands	r3, r1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00c      	beq.n	8008f3e <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8008f24:	89fa      	ldrh	r2, [r7, #14]
 8008f26:	8b3b      	ldrh	r3, [r7, #24]
 8008f28:	4413      	add	r3, r2
 8008f2a:	b298      	uxth	r0, r3
 8008f2c:	89ba      	ldrh	r2, [r7, #12]
 8008f2e:	8b7b      	ldrh	r3, [r7, #26]
 8008f30:	4413      	add	r3, r2
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008f36:	4619      	mov	r1, r3
 8008f38:	f7ff fce8 	bl	800890c <Paint_SetPixel>
 8008f3c:	e00b      	b.n	8008f56 <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8008f3e:	89fa      	ldrh	r2, [r7, #14]
 8008f40:	8b3b      	ldrh	r3, [r7, #24]
 8008f42:	4413      	add	r3, r2
 8008f44:	b298      	uxth	r0, r3
 8008f46:	89ba      	ldrh	r2, [r7, #12]
 8008f48:	8b7b      	ldrh	r3, [r7, #26]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008f50:	4619      	mov	r1, r3
 8008f52:	f7ff fcdb 	bl	800890c <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8008f56:	8b3b      	ldrh	r3, [r7, #24]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b07      	cmp	r3, #7
 8008f60:	d102      	bne.n	8008f68 <Paint_DrawChar+0xd8>
            {
                ptr++;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	3301      	adds	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 8008f68:	8b3b      	ldrh	r3, [r7, #24]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	833b      	strh	r3, [r7, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	889b      	ldrh	r3, [r3, #4]
 8008f72:	8b3a      	ldrh	r2, [r7, #24]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d3c9      	bcc.n	8008f0c <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	889b      	ldrh	r3, [r3, #4]
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <Paint_DrawChar+0xfc>
        {
            ptr++;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 8008f8c:	8b7b      	ldrh	r3, [r7, #26]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	837b      	strh	r3, [r7, #26]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	88db      	ldrh	r3, [r3, #6]
 8008f96:	8b7a      	ldrh	r2, [r7, #26]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d3b4      	bcc.n	8008f06 <Paint_DrawChar+0x76>
        }
    }// Write all
}
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2400ab30 	.word	0x2400ab30
 8008fa8:	08014990 	.word	0x08014990

08008fac <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	60ba      	str	r2, [r7, #8]
 8008fb4:	607b      	str	r3, [r7, #4]
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	81fb      	strh	r3, [r7, #14]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8008fbe:	89fb      	ldrh	r3, [r7, #14]
 8008fc0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8008fc2:	89bb      	ldrh	r3, [r7, #12]
 8008fc4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8008fc6:	4b23      	ldr	r3, [pc, #140]	; (8009054 <Paint_DrawString_EN+0xa8>)
 8008fc8:	889b      	ldrh	r3, [r3, #4]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	89fa      	ldrh	r2, [r7, #14]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d805      	bhi.n	8008fde <Paint_DrawString_EN+0x32>
 8008fd2:	4b20      	ldr	r3, [pc, #128]	; (8009054 <Paint_DrawString_EN+0xa8>)
 8008fd4:	88db      	ldrh	r3, [r3, #6]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	89ba      	ldrh	r2, [r7, #12]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d933      	bls.n	8009046 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8008fde:	481e      	ldr	r0, [pc, #120]	; (8009058 <Paint_DrawString_EN+0xac>)
 8008fe0:	f008 f85a 	bl	8011098 <puts>
        return;
 8008fe4:	e033      	b.n	800904e <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 8008fe6:	8afb      	ldrh	r3, [r7, #22]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	8892      	ldrh	r2, [r2, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	4a19      	ldr	r2, [pc, #100]	; (8009054 <Paint_DrawString_EN+0xa8>)
 8008ff0:	8892      	ldrh	r2, [r2, #4]
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	dd06      	ble.n	8009006 <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 8008ff8:	89fb      	ldrh	r3, [r7, #14]
 8008ffa:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	88da      	ldrh	r2, [r3, #6]
 8009000:	8abb      	ldrh	r3, [r7, #20]
 8009002:	4413      	add	r3, r2
 8009004:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 8009006:	8abb      	ldrh	r3, [r7, #20]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	88d2      	ldrh	r2, [r2, #6]
 800900c:	4413      	add	r3, r2
 800900e:	4a11      	ldr	r2, [pc, #68]	; (8009054 <Paint_DrawString_EN+0xa8>)
 8009010:	88d2      	ldrh	r2, [r2, #6]
 8009012:	b292      	uxth	r2, r2
 8009014:	4293      	cmp	r3, r2
 8009016:	dd03      	ble.n	8009020 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 8009018:	89fb      	ldrh	r3, [r7, #14]
 800901a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800901c:	89bb      	ldrh	r3, [r7, #12]
 800901e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	8ab9      	ldrh	r1, [r7, #20]
 8009026:	8af8      	ldrh	r0, [r7, #22]
 8009028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	8c3b      	ldrh	r3, [r7, #32]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f7ff ff2d 	bl	8008e90 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	3301      	adds	r3, #1
 800903a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	889a      	ldrh	r2, [r3, #4]
 8009040:	8afb      	ldrh	r3, [r7, #22]
 8009042:	4413      	add	r3, r2
 8009044:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1cb      	bne.n	8008fe6 <Paint_DrawString_EN+0x3a>
    }
}
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	2400ab30 	.word	0x2400ab30
 8009058:	080149d0 	.word	0x080149d0

0800905c <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800905c:	b590      	push	{r4, r7, lr}
 800905e:	b0cb      	sub	sp, #300	; 0x12c
 8009060:	af02      	add	r7, sp, #8
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	f107 0108 	add.w	r1, r7, #8
 800906a:	ed81 0b00 	vstr	d0, [r1]
 800906e:	4611      	mov	r1, r2
 8009070:	1d3a      	adds	r2, r7, #4
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	f107 0316 	add.w	r3, r7, #22
 8009078:	4622      	mov	r2, r4
 800907a:	801a      	strh	r2, [r3, #0]
 800907c:	f107 0314 	add.w	r3, r7, #20
 8009080:	4602      	mov	r2, r0
 8009082:	801a      	strh	r2, [r3, #0]
 8009084:	f107 0313 	add.w	r3, r7, #19
 8009088:	460a      	mov	r2, r1
 800908a:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 800908c:	f107 031c 	add.w	r3, r7, #28
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	3304      	adds	r3, #4
 8009096:	22fb      	movs	r2, #251	; 0xfb
 8009098:	2100      	movs	r1, #0
 800909a:	4618      	mov	r0, r3
 800909c:	f006 ff24 	bl	800fee8 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 80090a0:	f107 0313 	add.w	r3, r7, #19
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	1c99      	adds	r1, r3, #2
 80090a8:	f107 001c 	add.w	r0, r7, #28
 80090ac:	f107 0308 	add.w	r3, r7, #8
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	e9cd 2300 	strd	r2, r3, [sp]
 80090b8:	460a      	mov	r2, r1
 80090ba:	4930      	ldr	r1, [pc, #192]	; (800917c <Paint_DrawFloatNum+0x120>)
 80090bc:	f008 f83e 	bl	801113c <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 80090c0:	f107 031c 	add.w	r3, r7, #28
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f7 f915 	bl	80002f4 <strlen>
 80090ca:	4603      	mov	r3, r0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f006 fed3 	bl	800fe78 <malloc>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 80090d8:	f107 031c 	add.w	r3, r7, #28
 80090dc:	4618      	mov	r0, r3
 80090de:	f7f7 f909 	bl	80002f4 <strlen>
 80090e2:	4603      	mov	r3, r0
 80090e4:	1e9a      	subs	r2, r3, #2
 80090e6:	f107 031c 	add.w	r3, r7, #28
 80090ea:	4619      	mov	r1, r3
 80090ec:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80090f0:	f006 fed2 	bl	800fe98 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 80090f4:	f107 031c 	add.w	r3, r7, #28
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 f8fb 	bl	80002f4 <strlen>
 80090fe:	4603      	mov	r3, r0
 8009100:	3b02      	subs	r3, #2
 8009102:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009106:	4413      	add	r3, r2
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800910c:	f107 031c 	add.w	r3, r7, #28
 8009110:	4618      	mov	r0, r3
 8009112:	f7f7 f8ef 	bl	80002f4 <strlen>
 8009116:	4603      	mov	r3, r0
 8009118:	3b03      	subs	r3, #3
 800911a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800911e:	4413      	add	r3, r2
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b2e      	cmp	r3, #46	; 0x2e
 8009124:	d10b      	bne.n	800913e <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 8009126:	f107 031c 	add.w	r3, r7, #28
 800912a:	4618      	mov	r0, r3
 800912c:	f7f7 f8e2 	bl	80002f4 <strlen>
 8009130:	4603      	mov	r3, r0
 8009132:	3b03      	subs	r3, #3
 8009134:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009138:	4413      	add	r3, r2
 800913a:	2200      	movs	r2, #0
 800913c:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 800913e:	1d3b      	adds	r3, r7, #4
 8009140:	f107 0214 	add.w	r2, r7, #20
 8009144:	8811      	ldrh	r1, [r2, #0]
 8009146:	f107 0216 	add.w	r2, r7, #22
 800914a:	8810      	ldrh	r0, [r2, #0]
 800914c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8009150:	9201      	str	r2, [sp, #4]
 8009152:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8009156:	9200      	str	r2, [sp, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800915e:	f7ff ff25 	bl	8008fac <Paint_DrawString_EN>
    free(pStr);
 8009162:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009166:	f006 fe8f 	bl	800fe88 <free>
    pStr=NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 8009170:	bf00      	nop
 8009172:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8009176:	46bd      	mov	sp, r7
 8009178:	bd90      	pop	{r4, r7, pc}
 800917a:	bf00      	nop
 800917c:	08014a54 	.word	0x08014a54

08009180 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8009180:	b590      	push	{r4, r7, lr}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	4608      	mov	r0, r1
 800918a:	4611      	mov	r1, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4603      	mov	r3, r0
 8009190:	817b      	strh	r3, [r7, #10]
 8009192:	460b      	mov	r3, r1
 8009194:	813b      	strh	r3, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 800919a:	2300      	movs	r3, #0
 800919c:	613b      	str	r3, [r7, #16]
 800919e:	e049      	b.n	8009234 <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 80091a0:	2300      	movs	r3, #0
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	e03f      	b.n	8009226 <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 80091a6:	897a      	ldrh	r2, [r7, #10]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	4413      	add	r3, r2
 80091ac:	4a26      	ldr	r2, [pc, #152]	; (8009248 <Paint_DrawImage+0xc8>)
 80091ae:	8912      	ldrh	r2, [r2, #8]
 80091b0:	b292      	uxth	r2, r2
 80091b2:	4293      	cmp	r3, r2
 80091b4:	da34      	bge.n	8009220 <Paint_DrawImage+0xa0>
 80091b6:	893a      	ldrh	r2, [r7, #8]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4413      	add	r3, r2
 80091bc:	4a22      	ldr	r2, [pc, #136]	; (8009248 <Paint_DrawImage+0xc8>)
 80091be:	8952      	ldrh	r2, [r2, #10]
 80091c0:	b292      	uxth	r2, r2
 80091c2:	4293      	cmp	r3, r2
 80091c4:	da2c      	bge.n	8009220 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	897b      	ldrh	r3, [r7, #10]
 80091cc:	4413      	add	r3, r2
 80091ce:	b298      	uxth	r0, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	893b      	ldrh	r3, [r7, #8]
 80091d6:	4413      	add	r3, r2
 80091d8:	b29c      	uxth	r4, r3
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	fb02 f303 	mul.w	r3, r2, r3
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	461a      	mov	r2, r3
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	3301      	adds	r3, #1
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	b21a      	sxth	r2, r3
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	6939      	ldr	r1, [r7, #16]
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	4619      	mov	r1, r3
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	440b      	add	r3, r1
 800920a:	68f9      	ldr	r1, [r7, #12]
 800920c:	440b      	add	r3, r1
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	b21b      	sxth	r3, r3
 8009212:	4313      	orrs	r3, r2
 8009214:	b21b      	sxth	r3, r3
 8009216:	b29b      	uxth	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	4621      	mov	r1, r4
 800921c:	f7ff fb76 	bl	800890c <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	3301      	adds	r3, #1
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	429a      	cmp	r2, r3
 800922c:	dbbb      	blt.n	80091a6 <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	3301      	adds	r3, #1
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	429a      	cmp	r2, r3
 800923a:	dbb1      	blt.n	80091a0 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	bd90      	pop	{r4, r7, pc}
 8009246:	bf00      	nop
 8009248:	2400ab30 	.word	0x2400ab30

0800924c <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 8009250:	2201      	movs	r2, #1
 8009252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009256:	480d      	ldr	r0, [pc, #52]	; (800928c <LCD_1IN8_Reset+0x40>)
 8009258:	f7f9 fe96 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800925c:	2064      	movs	r0, #100	; 0x64
 800925e:	f7f8 fefd 	bl	800205c <HAL_Delay>
    LCD_1IN8_RST_0;
 8009262:	2200      	movs	r2, #0
 8009264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009268:	4808      	ldr	r0, [pc, #32]	; (800928c <LCD_1IN8_Reset+0x40>)
 800926a:	f7f9 fe8d 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800926e:	2064      	movs	r0, #100	; 0x64
 8009270:	f7f8 fef4 	bl	800205c <HAL_Delay>
    LCD_1IN8_RST_1;
 8009274:	2201      	movs	r2, #1
 8009276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800927a:	4804      	ldr	r0, [pc, #16]	; (800928c <LCD_1IN8_Reset+0x40>)
 800927c:	f7f9 fe84 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8009280:	2064      	movs	r0, #100	; 0x64
 8009282:	f7f8 feeb 	bl	800205c <HAL_Delay>
}
 8009286:	bf00      	nop
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	58021400 	.word	0x58021400

08009290 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800929a:	2200      	movs	r2, #0
 800929c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092a0:	4807      	ldr	r0, [pc, #28]	; (80092c0 <LCD_1IN8_WriteReg+0x30>)
 80092a2:	f7f9 fe71 	bl	8002f88 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 80092a6:	2200      	movs	r2, #0
 80092a8:	2140      	movs	r1, #64	; 0x40
 80092aa:	4805      	ldr	r0, [pc, #20]	; (80092c0 <LCD_1IN8_WriteReg+0x30>)
 80092ac:	f7f9 fe6c 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff fa8c 	bl	80087d0 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	58021800 	.word	0x58021800

080092c4 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 80092ce:	2201      	movs	r2, #1
 80092d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092d4:	480a      	ldr	r0, [pc, #40]	; (8009300 <LCD_1IN8_WriteData_8Bit+0x3c>)
 80092d6:	f7f9 fe57 	bl	8002f88 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 80092da:	2200      	movs	r2, #0
 80092dc:	2140      	movs	r1, #64	; 0x40
 80092de:	4808      	ldr	r0, [pc, #32]	; (8009300 <LCD_1IN8_WriteData_8Bit+0x3c>)
 80092e0:	f7f9 fe52 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff fa72 	bl	80087d0 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 80092ec:	2201      	movs	r2, #1
 80092ee:	2140      	movs	r1, #64	; 0x40
 80092f0:	4803      	ldr	r0, [pc, #12]	; (8009300 <LCD_1IN8_WriteData_8Bit+0x3c>)
 80092f2:	f7f9 fe49 	bl	8002f88 <HAL_GPIO_WritePin>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	58021800 	.word	0x58021800

08009304 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 8009310:	2201      	movs	r2, #1
 8009312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009316:	480f      	ldr	r0, [pc, #60]	; (8009354 <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 8009318:	f7f9 fe36 	bl	8002f88 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e00e      	b.n	8009340 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	b29b      	uxth	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fa50 	bl	80087d0 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 8009330:	88fb      	ldrh	r3, [r7, #6]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fa4b 	bl	80087d0 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d3ec      	bcc.n	8009322 <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 8009348:	bf00      	nop
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	58021800 	.word	0x58021800

08009358 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800935c:	20b1      	movs	r0, #177	; 0xb1
 800935e:	f7ff ff97 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8009362:	2001      	movs	r0, #1
 8009364:	f7ff ffae 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009368:	202c      	movs	r0, #44	; 0x2c
 800936a:	f7ff ffab 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800936e:	202d      	movs	r0, #45	; 0x2d
 8009370:	f7ff ffa8 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 8009374:	20b2      	movs	r0, #178	; 0xb2
 8009376:	f7ff ff8b 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800937a:	2001      	movs	r0, #1
 800937c:	f7ff ffa2 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009380:	202c      	movs	r0, #44	; 0x2c
 8009382:	f7ff ff9f 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8009386:	202d      	movs	r0, #45	; 0x2d
 8009388:	f7ff ff9c 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800938c:	20b3      	movs	r0, #179	; 0xb3
 800938e:	f7ff ff7f 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8009392:	2001      	movs	r0, #1
 8009394:	f7ff ff96 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009398:	202c      	movs	r0, #44	; 0x2c
 800939a:	f7ff ff93 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800939e:	202d      	movs	r0, #45	; 0x2d
 80093a0:	f7ff ff90 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 80093a4:	2001      	movs	r0, #1
 80093a6:	f7ff ff8d 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80093aa:	202c      	movs	r0, #44	; 0x2c
 80093ac:	f7ff ff8a 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80093b0:	202d      	movs	r0, #45	; 0x2d
 80093b2:	f7ff ff87 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 80093b6:	20b4      	movs	r0, #180	; 0xb4
 80093b8:	f7ff ff6a 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 80093bc:	2007      	movs	r0, #7
 80093be:	f7ff ff81 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 80093c2:	20c0      	movs	r0, #192	; 0xc0
 80093c4:	f7ff ff64 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 80093c8:	20a2      	movs	r0, #162	; 0xa2
 80093ca:	f7ff ff7b 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80093ce:	2002      	movs	r0, #2
 80093d0:	f7ff ff78 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 80093d4:	2084      	movs	r0, #132	; 0x84
 80093d6:	f7ff ff75 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 80093da:	20c1      	movs	r0, #193	; 0xc1
 80093dc:	f7ff ff58 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 80093e0:	20c5      	movs	r0, #197	; 0xc5
 80093e2:	f7ff ff6f 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 80093e6:	20c2      	movs	r0, #194	; 0xc2
 80093e8:	f7ff ff52 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 80093ec:	200a      	movs	r0, #10
 80093ee:	f7ff ff69 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80093f2:	2000      	movs	r0, #0
 80093f4:	f7ff ff66 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 80093f8:	20c3      	movs	r0, #195	; 0xc3
 80093fa:	f7ff ff49 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80093fe:	208a      	movs	r0, #138	; 0x8a
 8009400:	f7ff ff60 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 8009404:	202a      	movs	r0, #42	; 0x2a
 8009406:	f7ff ff5d 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800940a:	20c4      	movs	r0, #196	; 0xc4
 800940c:	f7ff ff40 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8009410:	208a      	movs	r0, #138	; 0x8a
 8009412:	f7ff ff57 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 8009416:	20ee      	movs	r0, #238	; 0xee
 8009418:	f7ff ff54 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 800941c:	20c5      	movs	r0, #197	; 0xc5
 800941e:	f7ff ff37 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 8009422:	200e      	movs	r0, #14
 8009424:	f7ff ff4e 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8009428:	20e0      	movs	r0, #224	; 0xe0
 800942a:	f7ff ff31 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800942e:	200f      	movs	r0, #15
 8009430:	f7ff ff48 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 8009434:	201a      	movs	r0, #26
 8009436:	f7ff ff45 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800943a:	200f      	movs	r0, #15
 800943c:	f7ff ff42 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 8009440:	2018      	movs	r0, #24
 8009442:	f7ff ff3f 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 8009446:	202f      	movs	r0, #47	; 0x2f
 8009448:	f7ff ff3c 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 800944c:	2028      	movs	r0, #40	; 0x28
 800944e:	f7ff ff39 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 8009452:	2020      	movs	r0, #32
 8009454:	f7ff ff36 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 8009458:	2022      	movs	r0, #34	; 0x22
 800945a:	f7ff ff33 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800945e:	201f      	movs	r0, #31
 8009460:	f7ff ff30 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8009464:	201b      	movs	r0, #27
 8009466:	f7ff ff2d 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800946a:	2023      	movs	r0, #35	; 0x23
 800946c:	f7ff ff2a 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 8009470:	2037      	movs	r0, #55	; 0x37
 8009472:	f7ff ff27 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8009476:	2000      	movs	r0, #0
 8009478:	f7ff ff24 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800947c:	2007      	movs	r0, #7
 800947e:	f7ff ff21 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8009482:	2002      	movs	r0, #2
 8009484:	f7ff ff1e 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8009488:	2010      	movs	r0, #16
 800948a:	f7ff ff1b 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800948e:	20e1      	movs	r0, #225	; 0xe1
 8009490:	f7ff fefe 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009494:	200f      	movs	r0, #15
 8009496:	f7ff ff15 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800949a:	201b      	movs	r0, #27
 800949c:	f7ff ff12 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80094a0:	200f      	movs	r0, #15
 80094a2:	f7ff ff0f 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 80094a6:	2017      	movs	r0, #23
 80094a8:	f7ff ff0c 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 80094ac:	2033      	movs	r0, #51	; 0x33
 80094ae:	f7ff ff09 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 80094b2:	202c      	movs	r0, #44	; 0x2c
 80094b4:	f7ff ff06 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 80094b8:	2029      	movs	r0, #41	; 0x29
 80094ba:	f7ff ff03 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 80094be:	202e      	movs	r0, #46	; 0x2e
 80094c0:	f7ff ff00 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 80094c4:	2030      	movs	r0, #48	; 0x30
 80094c6:	f7ff fefd 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 80094ca:	2030      	movs	r0, #48	; 0x30
 80094cc:	f7ff fefa 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 80094d0:	2039      	movs	r0, #57	; 0x39
 80094d2:	f7ff fef7 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 80094d6:	203f      	movs	r0, #63	; 0x3f
 80094d8:	f7ff fef4 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80094dc:	2000      	movs	r0, #0
 80094de:	f7ff fef1 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 80094e2:	2007      	movs	r0, #7
 80094e4:	f7ff feee 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 80094e8:	2003      	movs	r0, #3
 80094ea:	f7ff feeb 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 80094ee:	2010      	movs	r0, #16
 80094f0:	f7ff fee8 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 80094f4:	20f0      	movs	r0, #240	; 0xf0
 80094f6:	f7ff fecb 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80094fa:	2001      	movs	r0, #1
 80094fc:	f7ff fee2 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 8009500:	20f6      	movs	r0, #246	; 0xf6
 8009502:	f7ff fec5 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 8009506:	2000      	movs	r0, #0
 8009508:	f7ff fedc 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 800950c:	203a      	movs	r0, #58	; 0x3a
 800950e:	f7ff febf 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 8009512:	2005      	movs	r0, #5
 8009514:	f7ff fed6 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

}
 8009518:	bf00      	nop
 800951a:	bd80      	pop	{r7, pc}

0800951c <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 8009526:	4a34      	ldr	r2, [pc, #208]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d008      	beq.n	8009544 <LCD_1IN8_SetGramScanWay+0x28>
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d005      	beq.n	8009544 <LCD_1IN8_SetGramScanWay+0x28>
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d002      	beq.n	8009544 <LCD_1IN8_SetGramScanWay+0x28>
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	2b03      	cmp	r3, #3
 8009542:	d10c      	bne.n	800955e <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 8009544:	4b2c      	ldr	r3, [pc, #176]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009546:	2280      	movs	r2, #128	; 0x80
 8009548:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 800954a:	4b2b      	ldr	r3, [pc, #172]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800954c:	22a0      	movs	r2, #160	; 0xa0
 800954e:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 8009550:	4b29      	ldr	r3, [pc, #164]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009552:	2202      	movs	r2, #2
 8009554:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 8009556:	4b28      	ldr	r3, [pc, #160]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009558:	2201      	movs	r2, #1
 800955a:	811a      	strh	r2, [r3, #8]
 800955c:	e00b      	b.n	8009576 <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800955e:	4b26      	ldr	r3, [pc, #152]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009560:	22a0      	movs	r2, #160	; 0xa0
 8009562:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 8009564:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009566:	2280      	movs	r2, #128	; 0x80
 8009568:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800956a:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800956c:	2201      	movs	r2, #1
 800956e:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 8009570:	4b21      	ldr	r3, [pc, #132]	; (80095f8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009572:	2202      	movs	r2, #2
 8009574:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 8009576:	2300      	movs	r3, #0
 8009578:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b07      	cmp	r3, #7
 800957e:	d82b      	bhi.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <LCD_1IN8_SetGramScanWay+0x6c>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095a9 	.word	0x080095a9
 800958c:	080095af 	.word	0x080095af
 8009590:	080095b5 	.word	0x080095b5
 8009594:	080095bb 	.word	0x080095bb
 8009598:	080095c1 	.word	0x080095c1
 800959c:	080095c7 	.word	0x080095c7
 80095a0:	080095cd 	.word	0x080095cd
 80095a4:	080095d3 	.word	0x080095d3
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 80095a8:	2300      	movs	r3, #0
 80095aa:	81fb      	strh	r3, [r7, #14]
        break;
 80095ac:	e014      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 80095ae:	2380      	movs	r3, #128	; 0x80
 80095b0:	81fb      	strh	r3, [r7, #14]
        break;
 80095b2:	e011      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	81fb      	strh	r3, [r7, #14]
        break;
 80095b8:	e00e      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 80095ba:	23c0      	movs	r3, #192	; 0xc0
 80095bc:	81fb      	strh	r3, [r7, #14]
        break;
 80095be:	e00b      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 80095c0:	2320      	movs	r3, #32
 80095c2:	81fb      	strh	r3, [r7, #14]
        break;
 80095c4:	e008      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 80095c6:	2360      	movs	r3, #96	; 0x60
 80095c8:	81fb      	strh	r3, [r7, #14]
        break;
 80095ca:	e005      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 80095cc:	23a0      	movs	r3, #160	; 0xa0
 80095ce:	81fb      	strh	r3, [r7, #14]
        break;
 80095d0:	e002      	b.n	80095d8 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 80095d2:	23e0      	movs	r3, #224	; 0xe0
 80095d4:	81fb      	strh	r3, [r7, #14]
        break;
 80095d6:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 80095d8:	2036      	movs	r0, #54	; 0x36
 80095da:	f7ff fe59 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 80095de:	89fb      	ldrh	r3, [r7, #14]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f023 0308 	bic.w	r3, r3, #8
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fe6b 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	2400ab4c 	.word	0x2400ab4c

080095fc <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 8009606:	f7ff fe21 	bl	800924c <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800960a:	f7ff fea5 	bl	8009358 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff ff83 	bl	800951c <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 8009616:	20c8      	movs	r0, #200	; 0xc8
 8009618:	f7f8 fd20 	bl	800205c <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 800961c:	2011      	movs	r0, #17
 800961e:	f7ff fe37 	bl	8009290 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 8009622:	2078      	movs	r0, #120	; 0x78
 8009624:	f7f8 fd1a 	bl	800205c <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8009628:	2029      	movs	r0, #41	; 0x29
 800962a:	f7ff fe31 	bl	8009290 <LCD_1IN8_WriteReg>
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 8009638:	b590      	push	{r4, r7, lr}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4604      	mov	r4, r0
 8009640:	4608      	mov	r0, r1
 8009642:	4611      	mov	r1, r2
 8009644:	461a      	mov	r2, r3
 8009646:	4623      	mov	r3, r4
 8009648:	80fb      	strh	r3, [r7, #6]
 800964a:	4603      	mov	r3, r0
 800964c:	80bb      	strh	r3, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	807b      	strh	r3, [r7, #2]
 8009652:	4613      	mov	r3, r2
 8009654:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 8009656:	202a      	movs	r0, #42	; 0x2a
 8009658:	f7ff fe1a 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800965c:	2000      	movs	r0, #0
 800965e:	f7ff fe31 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	4b1e      	ldr	r3, [pc, #120]	; (80096e0 <LCD_1IN8_SetWindows+0xa8>)
 8009668:	88db      	ldrh	r3, [r3, #6]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	4413      	add	r3, r2
 800966e:	b2db      	uxtb	r3, r3
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fe27 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8009676:	2000      	movs	r0, #0
 8009678:	f7ff fe24 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 800967c:	887b      	ldrh	r3, [r7, #2]
 800967e:	b2da      	uxtb	r2, r3
 8009680:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <LCD_1IN8_SetWindows+0xa8>)
 8009682:	88db      	ldrh	r3, [r3, #6]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	4413      	add	r3, r2
 8009688:	b2db      	uxtb	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b2db      	uxtb	r3, r3
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fe18 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 8009694:	202b      	movs	r0, #43	; 0x2b
 8009696:	f7ff fdfb 	bl	8009290 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800969a:	2000      	movs	r0, #0
 800969c:	f7ff fe12 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 80096a0:	88bb      	ldrh	r3, [r7, #4]
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	4b0e      	ldr	r3, [pc, #56]	; (80096e0 <LCD_1IN8_SetWindows+0xa8>)
 80096a6:	891b      	ldrh	r3, [r3, #8]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4413      	add	r3, r2
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fe08 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 80096b4:	2000      	movs	r0, #0
 80096b6:	f7ff fe05 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 80096ba:	883b      	ldrh	r3, [r7, #0]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <LCD_1IN8_SetWindows+0xa8>)
 80096c0:	891b      	ldrh	r3, [r3, #8]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	4413      	add	r3, r2
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff fdf9 	bl	80092c4 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 80096d2:	202c      	movs	r0, #44	; 0x2c
 80096d4:	f7ff fddc 	bl	8009290 <LCD_1IN8_WriteReg>

}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd90      	pop	{r4, r7, pc}
 80096e0:	2400ab4c 	.word	0x2400ab4c

080096e4 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	460a      	mov	r2, r1
 80096ee:	80fb      	strh	r3, [r7, #6]
 80096f0:	4613      	mov	r3, r2
 80096f2:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 80096f4:	88bb      	ldrh	r3, [r7, #4]
 80096f6:	88fa      	ldrh	r2, [r7, #6]
 80096f8:	88b9      	ldrh	r1, [r7, #4]
 80096fa:	88f8      	ldrh	r0, [r7, #6]
 80096fc:	f7ff ff9c 	bl	8009638 <LCD_1IN8_SetWindows>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	80fb      	strh	r3, [r7, #6]
 8009712:	460b      	mov	r3, r1
 8009714:	80bb      	strh	r3, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 800971a:	88bb      	ldrh	r3, [r7, #4]
 800971c:	887a      	ldrh	r2, [r7, #2]
 800971e:	fb02 f203 	mul.w	r2, r2, r3
 8009722:	88fb      	ldrh	r3, [r7, #6]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff fdec 	bl	8009304 <LCD_1IN8_WriteData_NLen16Bit>
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	80fb      	strh	r3, [r7, #6]
 800973e:	460b      	mov	r3, r1
 8009740:	80bb      	strh	r3, [r7, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 8009746:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <LCD_1IN8_DrawPaint+0x80>)
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	88fa      	ldrh	r2, [r7, #6]
 800974c:	429a      	cmp	r2, r3
 800974e:	d82d      	bhi.n	80097ac <LCD_1IN8_DrawPaint+0x78>
 8009750:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <LCD_1IN8_DrawPaint+0x80>)
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	88ba      	ldrh	r2, [r7, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d828      	bhi.n	80097ac <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 800975a:	4b17      	ldr	r3, [pc, #92]	; (80097b8 <LCD_1IN8_DrawPaint+0x84>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f083 0301 	eor.w	r3, r3, #1
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00c      	beq.n	8009782 <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 8009768:	88ba      	ldrh	r2, [r7, #4]
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff ffb8 	bl	80096e4 <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 8009774:	887b      	ldrh	r3, [r7, #2]
 8009776:	2201      	movs	r2, #1
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff ffc4 	bl	8009708 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 8009780:	e014      	b.n	80097ac <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 8009782:	887b      	ldrh	r3, [r7, #2]
 8009784:	0a1b      	lsrs	r3, r3, #8
 8009786:	b299      	uxth	r1, r3
 8009788:	88bb      	ldrh	r3, [r7, #4]
 800978a:	01da      	lsls	r2, r3, #7
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	4413      	add	r3, r2
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	b2c9      	uxtb	r1, r1
 8009794:	4a09      	ldr	r2, [pc, #36]	; (80097bc <LCD_1IN8_DrawPaint+0x88>)
 8009796:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 8009798:	88bb      	ldrh	r3, [r7, #4]
 800979a:	01da      	lsls	r2, r3, #7
 800979c:	88fb      	ldrh	r3, [r7, #6]
 800979e:	4413      	add	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	3301      	adds	r3, #1
 80097a4:	887a      	ldrh	r2, [r7, #2]
 80097a6:	b2d1      	uxtb	r1, r2
 80097a8:	4a04      	ldr	r2, [pc, #16]	; (80097bc <LCD_1IN8_DrawPaint+0x88>)
 80097aa:	54d1      	strb	r1, [r2, r3]
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2400ab4c 	.word	0x2400ab4c
 80097b8:	2400a3ab 	.word	0x2400a3ab
 80097bc:	24000050 	.word	0x24000050

080097c0 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 80097ca:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <LCD_1IN8_Clear+0x74>)
 80097cc:	881a      	ldrh	r2, [r3, #0]
 80097ce:	4b19      	ldr	r3, [pc, #100]	; (8009834 <LCD_1IN8_Clear+0x74>)
 80097d0:	885b      	ldrh	r3, [r3, #2]
 80097d2:	2100      	movs	r1, #0
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7ff ff2f 	bl	8009638 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 80097da:	2201      	movs	r2, #1
 80097dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097e0:	4815      	ldr	r0, [pc, #84]	; (8009838 <LCD_1IN8_Clear+0x78>)
 80097e2:	f7f9 fbd1 	bl	8002f88 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 80097e6:	2300      	movs	r3, #0
 80097e8:	81fb      	strh	r3, [r7, #14]
 80097ea:	e019      	b.n	8009820 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 80097ec:	2300      	movs	r3, #0
 80097ee:	81bb      	strh	r3, [r7, #12]
 80097f0:	e00e      	b.n	8009810 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe ffea 	bl	80087d0 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 80097fc:	88fb      	ldrh	r3, [r7, #6]
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	b29b      	uxth	r3, r3
 8009802:	b2db      	uxtb	r3, r3
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe ffe3 	bl	80087d0 <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800980a:	89bb      	ldrh	r3, [r7, #12]
 800980c:	3301      	adds	r3, #1
 800980e:	81bb      	strh	r3, [r7, #12]
 8009810:	4b08      	ldr	r3, [pc, #32]	; (8009834 <LCD_1IN8_Clear+0x74>)
 8009812:	885b      	ldrh	r3, [r3, #2]
 8009814:	89ba      	ldrh	r2, [r7, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d3eb      	bcc.n	80097f2 <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800981a:	89fb      	ldrh	r3, [r7, #14]
 800981c:	3301      	adds	r3, #1
 800981e:	81fb      	strh	r3, [r7, #14]
 8009820:	4b04      	ldr	r3, [pc, #16]	; (8009834 <LCD_1IN8_Clear+0x74>)
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	89fa      	ldrh	r2, [r7, #14]
 8009826:	429a      	cmp	r2, r3
 8009828:	d3e0      	bcc.n	80097ec <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	2400ab4c 	.word	0x2400ab4c
 8009838:	58021800 	.word	0x58021800

0800983c <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 8009846:	4a04      	ldr	r2, [pc, #16]	; (8009858 <LCD_1IN8_SetBackLight+0x1c>)
 8009848:	88fb      	ldrh	r3, [r7, #6]
 800984a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	40010000 	.word	0x40010000

0800985c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff ffdd 	bl	800987e <metal_list_add_before>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 ff89 	bl	800b7f0 <metal_machine_cache_flush>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 ff87 	bl	800b806 <metal_machine_cache_invalidate>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff ffdd 	bl	80098cc <__metal_cache_flush>
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff ffdd 	bl	80098e6 <__metal_cache_invalidate>
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <metal_bus_register+0x20>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d004      	beq.n	8009954 <metal_bus_register+0x20>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <metal_bus_register+0x26>
		return -EINVAL;
 8009954:	f06f 0315 	mvn.w	r3, #21
 8009958:	e026      	b.n	80099a8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2100      	movs	r1, #0
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f82b 	bl	80099bc <metal_bus_find>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <metal_bus_register+0x3e>
		return -EEXIST;
 800996c:	f06f 0310 	mvn.w	r3, #16
 8009970:	e01a      	b.n	80099a8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	331c      	adds	r3, #28
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff ff70 	bl	800985c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	4619      	mov	r1, r3
 8009982:	480b      	ldr	r0, [pc, #44]	; (80099b0 <metal_bus_register+0x7c>)
 8009984:	f7ff ff95 	bl	80098b2 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <metal_bus_register+0x80>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b06      	cmp	r3, #6
 800998e:	d90a      	bls.n	80099a6 <metal_bus_register+0x72>
 8009990:	4b08      	ldr	r3, [pc, #32]	; (80099b4 <metal_bus_register+0x80>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d006      	beq.n	80099a6 <metal_bus_register+0x72>
 8009998:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <metal_bus_register+0x80>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6812      	ldr	r2, [r2, #0]
 80099a0:	4905      	ldr	r1, [pc, #20]	; (80099b8 <metal_bus_register+0x84>)
 80099a2:	2007      	movs	r0, #7
 80099a4:	4798      	blx	r3
	return 0;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	2400ab60 	.word	0x2400ab60
 80099b4:	2400ab58 	.word	0x2400ab58
 80099b8:	08014a68 	.word	0x08014a68

080099bc <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 80099c6:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <metal_bus_find+0x58>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	e017      	b.n	80099fe <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3b24      	subs	r3, #36	; 0x24
 80099d2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f6 fc80 	bl	80002e0 <strcmp>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e007      	b.n	80099fe <metal_bus_find+0x42>
			continue;
		if (result)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <metal_bus_find+0x3e>
			*result = bus;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	601a      	str	r2, [r3, #0]
		return 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e005      	b.n	8009a0a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4a05      	ldr	r2, [pc, #20]	; (8009a18 <metal_bus_find+0x5c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d1e3      	bne.n	80099ce <metal_bus_find+0x12>
	}
	return -ENOENT;
 8009a06:	f06f 0301 	mvn.w	r3, #1
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	2400ab58 	.word	0x2400ab58
 8009a18:	2400ab60 	.word	0x2400ab60

08009a1c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00d      	beq.n	8009a4a <metal_device_open+0x2e>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d009      	beq.n	8009a4a <metal_device_open+0x2e>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d006      	beq.n	8009a4a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <metal_device_open+0x2e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d102      	bne.n	8009a50 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8009a4a:	f06f 0315 	mvn.w	r3, #21
 8009a4e:	e01f      	b.n	8009a90 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8009a50:	f107 0310 	add.w	r3, r7, #16
 8009a54:	4619      	mov	r1, r3
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff ffb0 	bl	80099bc <metal_bus_find>
 8009a5c:	6178      	str	r0, [r7, #20]
	if (error)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <metal_device_open+0x4c>
		return error;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	e013      	b.n	8009a90 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <metal_device_open+0x5a>
		return -ENODEV;
 8009a70:	f06f 0312 	mvn.w	r3, #18
 8009a74:	e00c      	b.n	8009a90 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	4798      	blx	r3
 8009a82:	6178      	str	r0, [r7, #20]
	if (error)
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <metal_device_open+0x72>
		return error;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	e000      	b.n	8009a90 <metal_device_open+0x74>

	return 0;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d008      	beq.n	8009aba <metal_register_generic_device+0x22>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d902      	bls.n	8009ac0 <metal_register_generic_device+0x28>
		return -EINVAL;
 8009aba:	f06f 0315 	mvn.w	r3, #21
 8009abe:	e009      	b.n	8009ad4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a06      	ldr	r2, [pc, #24]	; (8009adc <metal_register_generic_device+0x44>)
 8009ac4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	336c      	adds	r3, #108	; 0x6c
 8009aca:	4619      	mov	r1, r3
 8009acc:	4804      	ldr	r0, [pc, #16]	; (8009ae0 <metal_register_generic_device+0x48>)
 8009ace:	f7ff fef0 	bl	80098b2 <metal_list_add_tail>
			    &device->node);
	return 0;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	24000020 	.word	0x24000020
 8009ae0:	2400ab70 	.word	0x2400ab70

08009ae4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009af0:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <metal_generic_dev_open+0x58>)
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e017      	b.n	8009b28 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	3b6c      	subs	r3, #108	; 0x6c
 8009afc:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7f6 fbeb 	bl	80002e0 <strcmp>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	617b      	str	r3, [r7, #20]
 8009b16:	e007      	b.n	8009b28 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8009b1e:	6938      	ldr	r0, [r7, #16]
 8009b20:	f000 f88c 	bl	8009c3c <metal_generic_dev_sys_open>
 8009b24:	4603      	mov	r3, r0
 8009b26:	e005      	b.n	8009b34 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	4a05      	ldr	r2, [pc, #20]	; (8009b40 <metal_generic_dev_open+0x5c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d1e3      	bne.n	8009af8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8009b30:	f06f 0312 	mvn.w	r3, #18
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	2400ab58 	.word	0x2400ab58
 8009b40:	2400ab70 	.word	0x2400ab70

08009b44 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8009b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d009      	beq.n	8009b6e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8009b5a:	6a3a      	ldr	r2, [r7, #32]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	461a      	mov	r2, r3
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b6a:	f006 f995 	bl	800fe98 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	e02f      	b.n	8009bd4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d114      	bne.n	8009ba4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	461a      	mov	r2, r3
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	4413      	add	r3, r2
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	461a      	mov	r2, r3
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	4413      	add	r3, r2
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	f7ff feae 	bl	8009900 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	461a      	mov	r2, r3
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	4413      	add	r3, r2
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	4413      	add	r3, r2
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	f7ff fea6 	bl	800991a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	dbcb      	blt.n	8009b74 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b086      	sub	sp, #24
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
 8009bf2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	e017      	b.n	8009c2a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	461a      	mov	r2, r3
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	4413      	add	r3, r2
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	461a      	mov	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	f7ff fe7b 	bl	800991a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	3301      	adds	r3, #1
 8009c28:	617b      	str	r3, [r7, #20]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	dbe3      	blt.n	8009bfa <metal_generic_dev_dma_unmap+0x14>
	}
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e013      	b.n	8009c72 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	4413      	add	r3, r2
 8009c52:	011b      	lsls	r3, r3, #4
 8009c54:	3308      	adds	r3, #8
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00b      	beq.n	8009c7e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8009c66:	68b8      	ldr	r0, [r7, #8]
 8009c68:	f000 f81e 	bl	8009ca8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d3e6      	bcc.n	8009c4a <metal_generic_dev_sys_open+0xe>
 8009c7c:	e000      	b.n	8009c80 <metal_generic_dev_sys_open+0x44>
			break;
 8009c7e:	bf00      	nop
	}

	return 0;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8009c94:	4803      	ldr	r0, [pc, #12]	; (8009ca4 <metal_sys_init+0x18>)
 8009c96:	f7ff fe4d 	bl	8009934 <metal_bus_register>
	return 0;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	24000020 	.word	0x24000020

08009ca8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	613b      	str	r3, [r7, #16]
	if (psize) {
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d02c      	beq.n	8009d1c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cda:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	e013      	b.n	8009d0a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	6819      	ldr	r1, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f001 fd91 	bl	800b81c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3301      	adds	r3, #1
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689a      	ldr	r2, [r3, #8]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	fa22 f303 	lsr.w	r3, r2, r3
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d9e2      	bls.n	8009ce2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8009d1c:	bf00      	nop
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <metal_list_init>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	601a      	str	r2, [r3, #0]
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	int error = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8009d54:	2220      	movs	r2, #32
 8009d56:	2100      	movs	r1, #0
 8009d58:	4810      	ldr	r0, [pc, #64]	; (8009d9c <metal_init+0x54>)
 8009d5a:	f006 f8c5 	bl	800fee8 <memset>

	_metal.common.log_handler   = params->log_handler;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a0e      	ldr	r2, [pc, #56]	; (8009d9c <metal_init+0x54>)
 8009d64:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	791a      	ldrb	r2, [r3, #4]
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <metal_init+0x54>)
 8009d6c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8009d6e:	480c      	ldr	r0, [pc, #48]	; (8009da0 <metal_init+0x58>)
 8009d70:	f7ff ffd8 	bl	8009d24 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8009d74:	480b      	ldr	r0, [pc, #44]	; (8009da4 <metal_init+0x5c>)
 8009d76:	f7ff ffd5 	bl	8009d24 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8009d7a:	480b      	ldr	r0, [pc, #44]	; (8009da8 <metal_init+0x60>)
 8009d7c:	f7ff ffd2 	bl	8009d24 <metal_list_init>

	error = metal_sys_init(params);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff ff83 	bl	8009c8c <metal_sys_init>
 8009d86:	60f8      	str	r0, [r7, #12]
	if (error)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <metal_init+0x4a>
		return error;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	e000      	b.n	8009d94 <metal_init+0x4c>

	return error;
 8009d92:	68fb      	ldr	r3, [r7, #12]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	2400ab58 	.word	0x2400ab58
 8009da0:	2400ab60 	.word	0x2400ab60
 8009da4:	2400ab68 	.word	0x2400ab68
 8009da8:	2400ab70 	.word	0x2400ab70

08009dac <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d009      	beq.n	8009dd4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d804      	bhi.n	8009dd4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	e000      	b.n	8009dd6 <metal_io_virt+0x2a>
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8009de2:	b5b0      	push	{r4, r5, r7, lr}
 8009de4:	b08a      	sub	sp, #40	; 0x28
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8009df0:	f107 0310 	add.w	r3, r7, #16
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	60da      	str	r2, [r3, #12]
 8009dfe:	611a      	str	r2, [r3, #16]
 8009e00:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]
	io->size = size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e18:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1c:	2b1f      	cmp	r3, #31
 8009e1e:	d904      	bls.n	8009e2a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f04f 32ff 	mov.w	r2, #4294967295
 8009e26:	611a      	str	r2, [r3, #16]
 8009e28:	e006      	b.n	8009e38 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	1e5a      	subs	r2, r3, #1
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e3c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8009e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <metal_io_init+0x7a>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e48:	f103 0418 	add.w	r4, r3, #24
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e56:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e5a:	e00a      	b.n	8009e72 <metal_io_init+0x90>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f103 0418 	add.w	r4, r3, #24
 8009e62:	f107 0510 	add.w	r5, r7, #16
 8009e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e6e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff ff18 	bl	8009ca8 <metal_sys_io_mem_map>
}
 8009e78:	bf00      	nop
 8009e7a:	3728      	adds	r7, #40	; 0x28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bdb0      	pop	{r4, r5, r7, pc}

08009e80 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8009e80:	b590      	push	{r4, r7, lr}
 8009e82:	b08b      	sub	sp, #44	; 0x2c
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7ff ff8b 	bl	8009dac <metal_io_virt>
 8009e96:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d902      	bls.n	8009eac <metal_io_block_read+0x2c>
		return -ERANGE;
 8009ea6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8009eaa:	e05c      	b.n	8009f66 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	441a      	add	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d904      	bls.n	8009ec4 <metal_io_block_read+0x44>
		len = io->size - offset;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	603b      	str	r3, [r7, #0]
	retlen = len;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6a1c      	ldr	r4, [r3, #32]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2305      	movs	r3, #5
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	47a0      	blx	r4
 8009ee2:	6178      	str	r0, [r7, #20]
 8009ee4:	e03e      	b.n	8009f64 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8009ee6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8009eea:	e00c      	b.n	8009f06 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	701a      	strb	r2, [r3, #0]
			dest++;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	61bb      	str	r3, [r7, #24]
			ptr++;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	3301      	adds	r3, #1
 8009efe:	61fb      	str	r3, [r7, #28]
			len--;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	603b      	str	r3, [r7, #0]
		while ( len && (
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d017      	beq.n	8009f3c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1ea      	bne.n	8009eec <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e5      	bne.n	8009eec <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8009f20:	e00c      	b.n	8009f3c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	3304      	adds	r3, #4
 8009f34:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	3b04      	subs	r3, #4
 8009f3a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	dcef      	bgt.n	8009f22 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8009f42:	e00c      	b.n	8009f5e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	61bb      	str	r3, [r7, #24]
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	3301      	adds	r3, #1
 8009f56:	61fb      	str	r3, [r7, #28]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	603b      	str	r3, [r7, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1ef      	bne.n	8009f44 <metal_io_block_read+0xc4>
	}
	return retlen;
 8009f64:	697b      	ldr	r3, [r7, #20]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3724      	adds	r7, #36	; 0x24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd90      	pop	{r4, r7, pc}

08009f6e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8009f6e:	b590      	push	{r4, r7, lr}
 8009f70:	b08b      	sub	sp, #44	; 0x2c
 8009f72:	af02      	add	r7, sp, #8
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff ff14 	bl	8009dac <metal_io_virt>
 8009f84:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d902      	bls.n	8009f9a <metal_io_block_write+0x2c>
		return -ERANGE;
 8009f94:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8009f98:	e05b      	b.n	800a052 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d904      	bls.n	8009fb2 <metal_io_block_write+0x44>
		len = io->size - offset;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	603b      	str	r3, [r7, #0]
	retlen = len;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d017      	beq.n	8009fee <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	2305      	movs	r3, #5
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	47a0      	blx	r4
 8009fd0:	6178      	str	r0, [r7, #20]
 8009fd2:	e03d      	b.n	800a050 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	701a      	strb	r2, [r3, #0]
			ptr++;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	61fb      	str	r3, [r7, #28]
			source++;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	61bb      	str	r3, [r7, #24]
			len--;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	603b      	str	r3, [r7, #0]
		while ( len && (
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d017      	beq.n	800a024 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1ea      	bne.n	8009fd4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e5      	bne.n	8009fd4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a008:	e00c      	b.n	800a024 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	3304      	adds	r3, #4
 800a016:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	3304      	adds	r3, #4
 800a01c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	3b04      	subs	r3, #4
 800a022:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b03      	cmp	r3, #3
 800a028:	dcef      	bgt.n	800a00a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 800a02a:	e00c      	b.n	800a046 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	3301      	adds	r3, #1
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	3301      	adds	r3, #1
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	3b01      	subs	r3, #1
 800a044:	603b      	str	r3, [r7, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1ef      	bne.n	800a02c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800a04c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800a050:	697b      	ldr	r3, [r7, #20]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3724      	adds	r7, #36	; 0x24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd90      	pop	{r4, r7, pc}

0800a05a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800a05a:	b590      	push	{r4, r7, lr}
 800a05c:	b08b      	sub	sp, #44	; 0x2c
 800a05e:	af02      	add	r7, sp, #8
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	603b      	str	r3, [r7, #0]
 800a066:	4613      	mov	r3, r2
 800a068:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff fe9d 	bl	8009dac <metal_io_virt>
 800a072:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d902      	bls.n	800a088 <metal_io_block_set+0x2e>
		return -ERANGE;
 800a082:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a086:	e05d      	b.n	800a144 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	441a      	add	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d904      	bls.n	800a0a0 <metal_io_block_set+0x46>
		len = io->size - offset;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689a      	ldr	r2, [r3, #8]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d009      	beq.n	800a0c0 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800a0b0:	79fa      	ldrb	r2, [r7, #7]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2305      	movs	r3, #5
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	47a0      	blx	r4
 800a0be:	e040      	b.n	800a142 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
 800a0c8:	e00a      	b.n	800a0e0 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800a0ca:	79fa      	ldrb	r2, [r7, #7]
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d9f1      	bls.n	800a0ca <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800a0e6:	e008      	b.n	800a0fa <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	79fa      	ldrb	r2, [r7, #7]
 800a0ec:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	603b      	str	r3, [r7, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00e      	beq.n	800a11e <metal_io_block_set+0xc4>
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1ee      	bne.n	800a0e8 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a10a:	e008      	b.n	800a11e <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	69ba      	ldr	r2, [r7, #24]
 800a110:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3304      	adds	r3, #4
 800a116:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	3b04      	subs	r3, #4
 800a11c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b03      	cmp	r3, #3
 800a122:	dcf3      	bgt.n	800a10c <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 800a124:	e008      	b.n	800a138 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	79fa      	ldrb	r2, [r7, #7]
 800a12a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	3301      	adds	r3, #1
 800a130:	61fb      	str	r3, [r7, #28]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3b01      	subs	r3, #1
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1f3      	bne.n	800a126 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800a13e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800a142:	693b      	ldr	r3, [r7, #16]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3724      	adds	r7, #36	; 0x24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd90      	pop	{r4, r7, pc}

0800a14c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800a14c:	b40e      	push	{r1, r2, r3}
 800a14e:	b480      	push	{r7}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	4603      	mov	r3, r0
 800a156:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	b003      	add	sp, #12
 800a164:	4770      	bx	lr

0800a166 <metal_io_virt>:
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
		: NULL);
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a178:	d009      	beq.n	800a18e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d804      	bhi.n	800a18e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	4413      	add	r3, r2
 800a18c:	e000      	b.n	800a190 <metal_io_virt+0x2a>
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d201      	bcs.n	800a1be <metal_io_virt_to_offset+0x22>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	e001      	b.n	800a1c2 <metal_io_virt_to_offset+0x26>
 800a1be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b08d      	sub	sp, #52	; 0x34
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7ff ffbf 	bl	800a166 <metal_io_virt>
 800a1e8:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699c      	ldr	r4, [r3, #24]
 800a1f6:	79fa      	ldrb	r2, [r7, #7]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	47a0      	blx	r4
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e057      	b.n	800a2b6 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d011      	beq.n	800a230 <metal_io_read+0x60>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d10e      	bne.n	800a230 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	f3bf 8f5b 	dmb	ish
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	f3bf 8f5b 	dmb	ish
 800a222:	b2db      	uxtb	r3, r3
 800a224:	76fb      	strb	r3, [r7, #27]
 800a226:	7efb      	ldrb	r3, [r7, #27]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	e042      	b.n	800a2b6 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d011      	beq.n	800a25a <metal_io_read+0x8a>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d10e      	bne.n	800a25a <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	f3bf 8f5b 	dmb	ish
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	f3bf 8f5b 	dmb	ish
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	833b      	strh	r3, [r7, #24]
 800a250:	8b3b      	ldrh	r3, [r7, #24]
 800a252:	b29a      	uxth	r2, r3
 800a254:	f04f 0300 	mov.w	r3, #0
 800a258:	e02d      	b.n	800a2b6 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 800a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d010      	beq.n	800a282 <metal_io_read+0xb2>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b04      	cmp	r3, #4
 800a264:	d10d      	bne.n	800a282 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	623b      	str	r3, [r7, #32]
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	f3bf 8f5b 	dmb	ish
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f3bf 8f5b 	dmb	ish
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	461a      	mov	r2, r3
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	e019      	b.n	800a2b6 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d010      	beq.n	800a2aa <metal_io_read+0xda>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d10d      	bne.n	800a2aa <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	f3bf 8f5b 	dmb	ish
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f3bf 8f5b 	dmb	ish
 800a29e:	613b      	str	r3, [r7, #16]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	e005      	b.n	800a2b6 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <metal_io_read+0xf0>)
 800a2ac:	4a05      	ldr	r2, [pc, #20]	; (800a2c4 <metal_io_read+0xf4>)
 800a2ae:	21f0      	movs	r1, #240	; 0xf0
 800a2b0:	4805      	ldr	r0, [pc, #20]	; (800a2c8 <metal_io_read+0xf8>)
 800a2b2:	f005 fd87 	bl	800fdc4 <__assert_func>
	return 0; /* quiet compiler */
}
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	3734      	adds	r7, #52	; 0x34
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd90      	pop	{r4, r7, pc}
 800a2c0:	08014b24 	.word	0x08014b24
 800a2c4:	0801d484 	.word	0x0801d484
 800a2c8:	08014b28 	.word	0x08014b28

0800a2cc <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b08f      	sub	sp, #60	; 0x3c
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800a2da:	68b9      	ldr	r1, [r7, #8]
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff ff42 	bl	800a166 <metal_io_virt>
 800a2e2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00c      	beq.n	800a306 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	69dc      	ldr	r4, [r3, #28]
 800a2f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fe:	68b9      	ldr	r1, [r7, #8]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800a304:	e04e      	b.n	800a3a4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00e      	beq.n	800a32a <metal_io_write+0x5e>
 800a30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d10b      	bne.n	800a32a <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	62bb      	str	r3, [r7, #40]	; 0x28
 800a316:	783b      	ldrb	r3, [r7, #0]
 800a318:	76fb      	strb	r3, [r7, #27]
 800a31a:	7efa      	ldrb	r2, [r7, #27]
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	f3bf 8f5b 	dmb	ish
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	f3bf 8f5b 	dmb	ish
 800a328:	e03c      	b.n	800a3a4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00e      	beq.n	800a34e <metal_io_write+0x82>
 800a330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a332:	2b02      	cmp	r3, #2
 800a334:	d10b      	bne.n	800a34e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
 800a33a:	883b      	ldrh	r3, [r7, #0]
 800a33c:	833b      	strh	r3, [r7, #24]
 800a33e:	8b3a      	ldrh	r2, [r7, #24]
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	f3bf 8f5b 	dmb	ish
 800a346:	801a      	strh	r2, [r3, #0]
 800a348:	f3bf 8f5b 	dmb	ish
 800a34c:	e02a      	b.n	800a3a4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00e      	beq.n	800a372 <metal_io_write+0xa6>
 800a354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a356:	2b04      	cmp	r3, #4
 800a358:	d10b      	bne.n	800a372 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	623b      	str	r3, [r7, #32]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	f3bf 8f5b 	dmb	ish
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	f3bf 8f5b 	dmb	ish
 800a370:	e018      	b.n	800a3a4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00e      	beq.n	800a396 <metal_io_write+0xca>
 800a378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d10b      	bne.n	800a396 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a380:	61fb      	str	r3, [r7, #28]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	f3bf 8f5b 	dmb	ish
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	f3bf 8f5b 	dmb	ish
 800a394:	e006      	b.n	800a3a4 <metal_io_write+0xd8>
		metal_assert (0);
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <metal_io_write+0xe0>)
 800a398:	4a05      	ldr	r2, [pc, #20]	; (800a3b0 <metal_io_write+0xe4>)
 800a39a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800a39e:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <metal_io_write+0xe8>)
 800a3a0:	f005 fd10 	bl	800fdc4 <__assert_func>
}
 800a3a4:	bf00      	nop
 800a3a6:	3734      	adds	r7, #52	; 0x34
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd90      	pop	{r4, r7, pc}
 800a3ac:	08014b24 	.word	0x08014b24
 800a3b0:	0801d494 	.word	0x0801d494
 800a3b4:	08014b28 	.word	0x08014b28

0800a3b8 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f005 fd59 	bl	800fe78 <malloc>
 800a3c6:	4603      	mov	r3, r0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	free(ptr);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f005 fd55 	bl	800fe88 <free>
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3307      	adds	r3, #7
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff ffde 	bl	800a3b8 <metal_allocate_memory>
 800a3fc:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	2100      	movs	r1, #0
 800a408:	68b8      	ldr	r0, [r7, #8]
 800a40a:	f005 fd6d 	bl	800fee8 <memset>
	}

	return vqs;
 800a40e:	68bb      	ldr	r3, [r7, #8]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	891b      	ldrh	r3, [r3, #8]
 800a424:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	3b18      	subs	r3, #24
 800a430:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d905      	bls.n	800a448 <rproc_virtio_virtqueue_notify+0x30>
 800a43c:	4b0d      	ldr	r3, [pc, #52]	; (800a474 <rproc_virtio_virtqueue_notify+0x5c>)
 800a43e:	4a0e      	ldr	r2, [pc, #56]	; (800a478 <rproc_virtio_virtqueue_notify+0x60>)
 800a440:	2133      	movs	r1, #51	; 0x33
 800a442:	480e      	ldr	r0, [pc, #56]	; (800a47c <rproc_virtio_virtqueue_notify+0x64>)
 800a444:	f005 fcbe 	bl	800fdc4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4613      	mov	r3, r2
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4413      	add	r3, r2
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	440b      	add	r3, r1
 800a458:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	6810      	ldr	r0, [r2, #0]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	6912      	ldr	r2, [r2, #16]
 800a466:	4611      	mov	r1, r2
 800a468:	4798      	blx	r3
}
 800a46a:	bf00      	nop
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	08014b70 	.word	0x08014b70
 800a478:	0801d464 	.word	0x0801d464
 800a47c:	08014b8c 	.word	0x08014b8c

0800a480 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3b18      	subs	r3, #24
 800a48c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	3318      	adds	r3, #24
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fe7b 	bl	800a19c <metal_io_virt_to_offset>
 800a4a6:	4601      	mov	r1, r0
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	2205      	movs	r2, #5
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7ff fe8f 	bl	800a1d0 <metal_io_read>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	3b18      	subs	r3, #24
 800a4d4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3318      	adds	r3, #24
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fe57 	bl	800a19c <metal_io_virt_to_offset>
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	78fa      	ldrb	r2, [r7, #3]
 800a4f2:	f04f 0300 	mov.w	r3, #0
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	9001      	str	r0, [sp, #4]
 800a4fa:	2005      	movs	r0, #5
 800a4fc:	9000      	str	r0, [sp, #0]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fee4 	bl	800a2cc <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	6810      	ldr	r0, [r2, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	6812      	ldr	r2, [r2, #0]
 800a510:	4611      	mov	r1, r2
 800a512:	4798      	blx	r3
}
 800a514:	bf00      	nop
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3b18      	subs	r3, #24
 800a528:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	330c      	adds	r3, #12
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fe2d 	bl	800a19c <metal_io_virt_to_offset>
 800a542:	4601      	mov	r1, r0
 800a544:	2304      	movs	r3, #4
 800a546:	2205      	movs	r2, #5
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff fe41 	bl	800a1d0 <metal_io_read>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4613      	mov	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800a556:	68bb      	ldr	r3, [r7, #8]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af02      	add	r7, sp, #8
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3b18      	subs	r3, #24
 800a56e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	330c      	adds	r3, #12
 800a580:	4619      	mov	r1, r3
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff fe0a 	bl	800a19c <metal_io_virt_to_offset>
 800a588:	4601      	mov	r1, r0
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	f04f 0300 	mov.w	r3, #0
 800a592:	2004      	movs	r0, #4
 800a594:	9001      	str	r0, [sp, #4]
 800a596:	2005      	movs	r0, #5
 800a598:	9000      	str	r0, [sp, #0]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fe96 	bl	800a2cc <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	6810      	ldr	r0, [r2, #0]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6812      	ldr	r2, [r2, #0]
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4798      	blx	r3
}
 800a5b0:	bf00      	nop
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800a5de:	bf00      	nop
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b085      	sub	sp, #20
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
 800a5f6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800a5f8:	bf00      	nop
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800a614:	2140      	movs	r1, #64	; 0x40
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff ff54 	bl	800a4c4 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08e      	sub	sp, #56	; 0x38
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	7e5b      	ldrb	r3, [r3, #25]
 800a63a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 800a63c:	2050      	movs	r0, #80	; 0x50
 800a63e:	f7ff febb 	bl	800a3b8 <metal_allocate_memory>
 800a642:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e092      	b.n	800a774 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800a64e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a650:	4613      	mov	r3, r2
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	4413      	add	r3, r2
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fead 	bl	800a3b8 <metal_allocate_memory>
 800a65e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8081 	beq.w	800a76a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800a668:	2250      	movs	r2, #80	; 0x50
 800a66a:	2100      	movs	r1, #0
 800a66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a66e:	f005 fc3b 	bl	800fee8 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800a672:	2218      	movs	r2, #24
 800a674:	2100      	movs	r1, #0
 800a676:	6a38      	ldr	r0, [r7, #32]
 800a678:	f005 fc36 	bl	800fee8 <memset>
	vdev = &rpvdev->vdev;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	3318      	adds	r3, #24
 800a680:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800a682:	2300      	movs	r3, #0
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
 800a686:	e025      	b.n	800a6d4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800a68c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	3318      	adds	r3, #24
 800a698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a69a:	4413      	add	r3, r2
 800a69c:	3304      	adds	r3, #4
 800a69e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800a6ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ae:	f7ff fe9a 	bl	800a3e6 <virtqueue_allocate>
 800a6b2:	6178      	str	r0, [r7, #20]
		if (!vq)
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d031      	beq.n	800a71e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800a6ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6bc:	4613      	mov	r3, r2
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	4413      	add	r3, r2
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d3d5      	bcc.n	800a688 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6e0:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6e6:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	6a3a      	ldr	r2, [r7, #32]
 800a6ec:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6f2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a70a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a710:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4a19      	ldr	r2, [pc, #100]	; (800a77c <rproc_virtio_create_vdev+0x158>)
 800a716:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	3318      	adds	r3, #24
 800a71c:	e02a      	b.n	800a774 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800a71e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800a720:	2300      	movs	r3, #0
 800a722:	637b      	str	r3, [r7, #52]	; 0x34
 800a724:	e019      	b.n	800a75a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800a726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a728:	4613      	mov	r3, r2
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	4413      	add	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	461a      	mov	r2, r3
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	4413      	add	r3, r2
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 800a73c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a73e:	4613      	mov	r3, r2
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	4413      	add	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	461a      	mov	r2, r3
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	4413      	add	r3, r2
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fe3e 	bl	800a3d0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 800a754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a756:	3301      	adds	r3, #1
 800a758:	637b      	str	r3, [r7, #52]	; 0x34
 800a75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	429a      	cmp	r2, r3
 800a760:	d3e1      	bcc.n	800a726 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800a762:	6a38      	ldr	r0, [r7, #32]
 800a764:	f7ff fe34 	bl	800a3d0 <metal_free_memory>
 800a768:	e000      	b.n	800a76c <rproc_virtio_create_vdev+0x148>
		goto err0;
 800a76a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800a76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a76e:	f7ff fe2f 	bl	800a3d0 <metal_free_memory>
	return NULL;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3738      	adds	r7, #56	; 0x38
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	0801d440 	.word	0x0801d440

0800a780 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d302      	bcc.n	800a7a2 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800a79c:	f06f 0301 	mvn.w	r3, #1
 800a7a0:	e019      	b.n	800a7d6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	4413      	add	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	440b      	add	r3, r1
 800a7b2:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6a3a      	ldr	r2, [r7, #32]
 800a7b8:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d2:	609a      	str	r2, [r3, #8]

	return 0;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	371c      	adds	r7, #28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b086      	sub	sp, #24
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d102      	bne.n	800a7f8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800a7f2:	f06f 0315 	mvn.w	r3, #21
 800a7f6:	e02c      	b.n	800a852 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d101      	bne.n	800a806 <rproc_virtio_notified+0x24>
		return 0;
 800a802:	2300      	movs	r3, #0
 800a804:	e025      	b.n	800a852 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800a80c:	2300      	movs	r3, #0
 800a80e:	617b      	str	r3, [r7, #20]
 800a810:	e01a      	b.n	800a848 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	4613      	mov	r3, r2
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	440b      	add	r3, r1
 800a822:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d003      	beq.n	800a836 <rproc_virtio_notified+0x54>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a834:	d105      	bne.n	800a842 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 800a83c:	68b8      	ldr	r0, [r7, #8]
 800a83e:	f001 fb58 	bl	800bef2 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	3301      	adds	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d3e0      	bcc.n	800a812 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fe08 	bl	800a480 <rproc_virtio_get_status>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	f003 0304 	and.w	r3, r3, #4
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800a87e:	e7f4      	b.n	800a86a <rproc_virtio_wait_remote_ready+0x10>
		return;
 800a880:	bf00      	nop
 800a882:	e000      	b.n	800a886 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 800a884:	bf00      	nop
	}
}
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800a894:	bf00      	nop
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	4611      	mov	r1, r2
 800a89c:	f3bf 8f5b 	dmb	ish
 800a8a0:	e8d3 2f4f 	ldrexb	r2, [r3]
 800a8a4:	e8c3 1f40 	strexb	r0, r1, [r3]
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1f9      	bne.n	800a8a0 <__metal_mutex_acquire+0x14>
 800a8ac:	f3bf 8f5b 	dmb	ish
 800a8b0:	b2d3      	uxtb	r3, r2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1ef      	bne.n	800a896 <__metal_mutex_acquire+0xa>
		;
	}
}
 800a8b6:	bf00      	nop
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f3bf 8f5b 	dmb	ish
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	f3bf 8f5b 	dmb	ish
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff ffcc 	bl	800a88c <__metal_mutex_acquire>
}
 800a8f4:	bf00      	nop
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ffdd 	bl	800a8c4 <__metal_mutex_release>
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <metal_list_add_before>:
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	601a      	str	r2, [r3, #0]
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <metal_list_add_tail>:
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff ffdd 	bl	800a912 <metal_list_add_before>
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6852      	ldr	r2, [r2, #4]
 800a970:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	601a      	str	r2, [r3, #0]
}
 800a98a:	bf00      	nop
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800a996:	b480      	push	{r7}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	095b      	lsrs	r3, r3, #5
 800a9a4:	009a      	lsls	r2, r3, #2
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	440a      	add	r2, r1
 800a9aa:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	f002 021f 	and.w	r2, r2, #31
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4403      	add	r3, r0
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	601a      	str	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	095b      	lsrs	r3, r3, #5
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	f003 031f 	and.w	r3, r3, #31
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800a9f0:	4013      	ands	r3, r2
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	009a      	lsls	r2, r3, #2
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	440a      	add	r2, r1
 800aa12:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	f002 021f 	and.w	r2, r2, #31
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	fa00 f202 	lsl.w	r2, r0, r2
 800aa20:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	4403      	add	r3, r0
 800aa28:	400a      	ands	r2, r1
 800aa2a:	601a      	str	r2, [r3, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff ffc2 	bl	800a9ce <metal_bitmap_is_bit_set>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	617b      	str	r3, [r7, #20]
 800aa6e:	e002      	b.n	800aa76 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	3301      	adds	r3, #1
 800aa74:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d207      	bcs.n	800aa8e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	4619      	mov	r1, r3
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff ffd8 	bl	800aa38 <metal_bitmap_is_bit_clear>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f0      	beq.n	800aa70 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800aa8e:	697b      	ldr	r3, [r7, #20]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <rpmsg_init_ept>:
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f006 fb77 	bl	80111a0 <strncpy>
	ept->addr = src;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aaca:	bf00      	nop
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800aadc:	f04f 33ff 	mov.w	r3, #4294967295
 800aae0:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	461a      	mov	r2, r3
 800aae6:	2100      	movs	r1, #0
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff ffb8 	bl	800aa5e <metal_bitmap_next_clear_bit>
 800aaee:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d206      	bcs.n	800ab06 <rpmsg_get_address+0x34>
		addr = nextbit;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff ff48 	bl	800a996 <metal_bitmap_set_bit>
	}

	return addr;
 800ab06:	68fb      	ldr	r3, [r7, #12]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	da03      	bge.n	800ab2c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff ff69 	bl	800a9fe <metal_bitmap_clear_bit>
}
 800ab2c:	bf00      	nop
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	da05      	bge.n	800ab54 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f7ff ff3f 	bl	800a9ce <metal_bitmap_is_bit_set>
 800ab50:	4603      	mov	r3, r0
 800ab52:	e000      	b.n	800ab56 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <rpmsg_is_address_set+0x2c>)
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	fffff82d 	.word	0xfffff82d

0800ab64 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	da05      	bge.n	800ab84 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7ff ff0b 	bl	800a996 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800ab80:	2300      	movs	r3, #0
 800ab82:	e000      	b.n	800ab86 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 800ab84:	4b02      	ldr	r3, [pc, #8]	; (800ab90 <rpmsg_set_address+0x2c>)
	}
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	fffff82d 	.word	0xfffff82d

0800ab94 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 800ab94:	b590      	push	{r4, r7, lr}
 800ab96:	b089      	sub	sp, #36	; 0x24
 800ab98:	af02      	add	r7, sp, #8
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <rpmsg_send_offchannel_raw+0x2a>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d006      	beq.n	800abbe <rpmsg_send_offchannel_raw+0x2a>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <rpmsg_send_offchannel_raw+0x2a>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbc:	d101      	bne.n	800abc2 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800abbe:	4b0d      	ldr	r3, [pc, #52]	; (800abf4 <rpmsg_send_offchannel_raw+0x60>)
 800abc0:	e014      	b.n	800abec <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00c      	beq.n	800abea <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	47a0      	blx	r4
 800abe6:	4603      	mov	r3, r0
 800abe8:	e000      	b.n	800abec <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800abea:	4b02      	ldr	r3, [pc, #8]	; (800abf4 <rpmsg_send_offchannel_raw+0x60>)
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd90      	pop	{r4, r7, pc}
 800abf4:	fffff82d 	.word	0xfffff82d

0800abf8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b090      	sub	sp, #64	; 0x40
 800abfc:	af02      	add	r7, sp, #8
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	f107 030c 	add.w	r3, r7, #12
 800ac12:	2220      	movs	r2, #32
 800ac14:	4618      	mov	r0, r3
 800ac16:	f006 fac3 	bl	80111a0 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ac1e:	f107 030c 	add.w	r3, r7, #12
 800ac22:	2201      	movs	r2, #1
 800ac24:	9201      	str	r2, [sp, #4]
 800ac26:	2228      	movs	r2, #40	; 0x28
 800ac28:	9200      	str	r2, [sp, #0]
 800ac2a:	2235      	movs	r2, #53	; 0x35
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff ffb1 	bl	800ab94 <rpmsg_send_offchannel_raw>
 800ac32:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	da01      	bge.n	800ac3e <rpmsg_send_ns_message+0x46>
		return ret;
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	e000      	b.n	800ac40 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3738      	adds	r7, #56	; 0x38
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	61fb      	str	r3, [r7, #28]
 800ac5c:	e04b      	b.n	800acf6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	3b34      	subs	r3, #52	; 0x34
 800ac66:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d006      	beq.n	800ac7e <rpmsg_get_endpoint+0x36>
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d101      	bne.n	800ac7e <rpmsg_get_endpoint+0x36>
			return ept;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	e040      	b.n	800ad00 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d106      	bne.n	800ac96 <rpmsg_get_endpoint+0x4e>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d101      	bne.n	800ac96 <rpmsg_get_endpoint+0x4e>
			return ept;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	e034      	b.n	800ad00 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00c      	beq.n	800acb6 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	68b9      	ldr	r1, [r7, #8]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f006 fa6a 	bl	801117c <strncmp>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bf0c      	ite	eq
 800acae:	2301      	moveq	r3, #1
 800acb0:	2300      	movne	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d018      	beq.n	800acee <rpmsg_get_endpoint+0xa6>
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d015      	beq.n	800acee <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d006      	beq.n	800acd8 <rpmsg_get_endpoint+0x90>
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d101      	bne.n	800acd8 <rpmsg_get_endpoint+0x90>
			return ept;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	e013      	b.n	800ad00 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	d107      	bne.n	800acf0 <rpmsg_get_endpoint+0xa8>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d102      	bne.n	800acf0 <rpmsg_get_endpoint+0xa8>
			return ept;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	e008      	b.n	800ad00 <rpmsg_get_endpoint+0xb8>
			continue;
 800acee:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	61fb      	str	r3, [r7, #28]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	69fa      	ldr	r2, [r7, #28]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d1af      	bne.n	800ac5e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3720      	adds	r7, #32
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d016      	beq.n	800ad44 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d008      	beq.n	800ad38 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ad30:	461a      	mov	r2, r3
 800ad32:	2180      	movs	r1, #128	; 0x80
 800ad34:	f7ff feec 	bl	800ab10 <rpmsg_release_address>
	metal_list_del(&ept->node);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3334      	adds	r3, #52	; 0x34
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7ff fe0f 	bl	800a960 <metal_list_del>
 800ad42:	e000      	b.n	800ad46 <rpmsg_unregister_endpoint+0x3e>
		return;
 800ad44:	bf00      	nop
}
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	3334      	adds	r3, #52	; 0x34
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f7ff fdee 	bl	800a946 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	613b      	str	r3, [r7, #16]

	if (!ept)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 800ad8c:	4b37      	ldr	r3, [pc, #220]	; (800ae6c <rpmsg_create_ept+0xf8>)
 800ad8e:	e068      	b.n	800ae62 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	3358      	adds	r3, #88	; 0x58
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fda6 	bl	800a8e6 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada0:	d018      	beq.n	800add4 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	3348      	adds	r3, #72	; 0x48
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff fec2 	bl	800ab34 <rpmsg_is_address_set>
 800adb0:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d107      	bne.n	800adc8 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3348      	adds	r3, #72	; 0x48
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	2180      	movs	r1, #128	; 0x80
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fecf 	bl	800ab64 <rpmsg_set_address>
 800adc6:	e00c      	b.n	800ade2 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd40      	ble.n	800ae50 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
			goto ret_status;
 800add2:	e040      	b.n	800ae56 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	3348      	adds	r3, #72	; 0x48
 800add8:	2180      	movs	r1, #128	; 0x80
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff fe79 	bl	800aad2 <rpmsg_get_address>
 800ade0:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f7ff fe51 	bl	800aa98 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800adf6:	68f9      	ldr	r1, [r7, #12]
 800adf8:	68b8      	ldr	r0, [r7, #8]
 800adfa:	f7ff ffa7 	bl	800ad4c <rpmsg_register_endpoint>
 800adfe:	6178      	str	r0, [r7, #20]
	if (status < 0)
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da06      	bge.n	800ae14 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	3348      	adds	r3, #72	; 0x48
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	2180      	movs	r1, #128	; 0x80
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff fe7e 	bl	800ab10 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d11c      	bne.n	800ae54 <rpmsg_create_ept+0xe0>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae22:	d117      	bne.n	800ae54 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	3358      	adds	r3, #88	; 0x58
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff fd67 	bl	800a8fc <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 800ae2e:	2100      	movs	r1, #0
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fee1 	bl	800abf8 <rpmsg_send_ns_message>
 800ae36:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	3358      	adds	r3, #88	; 0x58
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fd52 	bl	800a8e6 <metal_mutex_acquire>
		if (status)
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7ff ff5d 	bl	800ad08 <rpmsg_unregister_endpoint>
 800ae4e:	e002      	b.n	800ae56 <rpmsg_create_ept+0xe2>
			goto ret_status;
 800ae50:	bf00      	nop
 800ae52:	e000      	b.n	800ae56 <rpmsg_create_ept+0xe2>
	}

ret_status:
 800ae54:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	3358      	adds	r3, #88	; 0x58
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff fd4e 	bl	800a8fc <metal_mutex_release>
	return status;
 800ae60:	697b      	ldr	r3, [r7, #20]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	fffff82d 	.word	0xfffff82d

0800ae70 <__metal_cache_invalidate>:
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fcc2 	bl	800b806 <metal_machine_cache_invalidate>
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <metal_cache_invalidate>:
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff ffea 	bl	800ae70 <__metal_cache_invalidate>
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff ffee 	bl	800aea4 <__metal_sleep_usec>
 800aec8:	4603      	mov	r3, r0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <metal_list_init>:
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	605a      	str	r2, [r3, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	601a      	str	r2, [r3, #0]
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <metal_io_virt_to_offset>:
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d201      	bcs.n	800af16 <metal_io_virt_to_offset+0x22>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	e001      	b.n	800af1a <metal_io_virt_to_offset+0x26>
 800af16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <__metal_mutex_init>:
{
 800af26:	b480      	push	{r7}
 800af28:	b085      	sub	sp, #20
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	2300      	movs	r3, #0
 800af34:	60bb      	str	r3, [r7, #8]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	461a      	mov	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f3bf 8f5b 	dmb	ish
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	f3bf 8f5b 	dmb	ish
}
 800af46:	bf00      	nop
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <__metal_mutex_acquire>:
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800af5a:	bf00      	nop
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	4611      	mov	r1, r2
 800af62:	f3bf 8f5b 	dmb	ish
 800af66:	e8d3 2f4f 	ldrexb	r2, [r3]
 800af6a:	e8c3 1f40 	strexb	r0, r1, [r3]
 800af6e:	2800      	cmp	r0, #0
 800af70:	d1f9      	bne.n	800af66 <__metal_mutex_acquire+0x14>
 800af72:	f3bf 8f5b 	dmb	ish
 800af76:	b2d3      	uxtb	r3, r2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1ef      	bne.n	800af5c <__metal_mutex_acquire+0xa>
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <__metal_mutex_release>:
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f3bf 8f5b 	dmb	ish
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	f3bf 8f5b 	dmb	ish
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <metal_mutex_init>:
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ffb6 	bl	800af26 <__metal_mutex_init>
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <metal_mutex_acquire>:
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff ffc1 	bl	800af52 <__metal_mutex_acquire>
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <metal_mutex_release>:
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff ffd2 	bl	800af8a <__metal_mutex_release>
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <rpmsg_init_ept>:
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
 800affa:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2220      	movs	r2, #32
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f006 f8cc 	bl	80111a0 <strncpy>
	ept->addr = src;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	69fa      	ldr	r2, [r7, #28]
 800b01e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b020:	bf00      	nop
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b034:	699b      	ldr	r3, [r3, #24]
}
 800b036:	4618      	mov	r0, r3
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	460b      	mov	r3, r1
 800b04c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b05a:	78f9      	ldrb	r1, [r7, #3]
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	4603      	mov	r3, r0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4798      	blx	r3
 800b0a2:	4603      	mov	r3, r0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	f000 fbf2 	bl	800b8b0 <virtio_create_virtqueues>
 800b0cc:	4603      	mov	r3, r0
					callbacks);
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800b0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff fdad 	bl	800ac48 <rpmsg_get_endpoint>
 800b0ee:	4603      	mov	r3, r0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d901      	bls.n	800b110 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 800b10c:	2300      	movs	r3, #0
 800b10e:	e00f      	b.n	800b130 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6899      	ldr	r1, [r3, #8]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	1acb      	subs	r3, r1, r3
 800b11e:	4413      	add	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	1ad2      	subs	r2, r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	605a      	str	r2, [r3, #4]

	return buffer;
 800b12e:	68fb      	ldr	r3, [r7, #12]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	if (!shpool)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01d      	beq.n	800b18a <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <rpmsg_virtio_init_shm_pool+0x2c>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f023 0303 	bic.w	r3, r3, #3
 800b164:	3304      	adds	r3, #4
 800b166:	e000      	b.n	800b16a <rpmsg_virtio_init_shm_pool+0x2e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f003 0303 	and.w	r3, r3, #3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d004      	beq.n	800b182 <rpmsg_virtio_init_shm_pool+0x46>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	3304      	adds	r3, #4
 800b180:	e000      	b.n	800b184 <rpmsg_virtio_init_shm_pool+0x48>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	6053      	str	r3, [r2, #4]
 800b188:	e000      	b.n	800b18c <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800b18a:	bf00      	nop
}
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b08a      	sub	sp, #40	; 0x28
 800b19a:	af02      	add	r7, sp, #8
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff ff3f 	bl	800b028 <rpmsg_virtio_get_role>
 800b1aa:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10d      	bne.n	800b1ce <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b1be:	f107 0114 	add.w	r1, r7, #20
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f000 fcc0 	bl	800bb4e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800b1ce:	bf00      	nop
 800b1d0:	3720      	adds	r7, #32
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b08a      	sub	sp, #40	; 0x28
 800b1da:	af02      	add	r7, sp, #8
 800b1dc:	60f8      	str	r0, [r7, #12]
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff ff1f 	bl	800b028 <rpmsg_virtio_get_role>
 800b1ea:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10f      	bne.n	800b212 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b1fe:	f107 0114 	add.w	r1, r7, #20
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	2301      	movs	r3, #1
 800b208:	2200      	movs	r2, #0
 800b20a:	f000 fca0 	bl	800bb4e <virtqueue_add_buffer>
 800b20e:	4603      	mov	r3, r0
 800b210:	e000      	b.n	800b214 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3720      	adds	r7, #32
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7ff fefd 	bl	800b028 <rpmsg_virtio_get_role>
 800b22e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d116      	bne.n	800b268 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fcc7 	bl	800bbd6 <virtqueue_get_buffer>
 800b248:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b254:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff ff4d 	bl	800b0f8 <rpmsg_virtio_shm_pool_get_buffer>
 800b25e:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b266:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800b268:	697b      	ldr	r3, [r7, #20]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b086      	sub	sp, #24
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7ff fed2 	bl	800b028 <rpmsg_virtio_get_role>
 800b284:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d107      	bne.n	800b2a0 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fc9c 	bl	800bbd6 <virtqueue_get_buffer>
 800b29e:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d005      	beq.n	800b2b2 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6978      	ldr	r0, [r7, #20]
 800b2ae:	f7ff fdec 	bl	800ae8a <metal_cache_invalidate>
	}

	return data;
 800b2b2:	697b      	ldr	r3, [r7, #20]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff feaf 	bl	800b028 <rpmsg_virtio_get_role>
 800b2ca:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800b2d6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800b2da:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b090      	sub	sp, #64	; 0x40
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800b302:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b304:	f7ff feb0 	bl	800b068 <rpmsg_virtio_get_status>
 800b308:	4603      	mov	r3, r0
 800b30a:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	f003 0304 	and.w	r3, r3, #4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800b316:	4b45      	ldr	r3, [pc, #276]	; (800b42c <rpmsg_virtio_send_offchannel_raw+0x144>)
 800b318:	e083      	b.n	800b422 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800b31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800b320:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b324:	63bb      	str	r3, [r7, #56]	; 0x38
 800b326:	e001      	b.n	800b32c <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3358      	adds	r3, #88	; 0x58
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff fe46 	bl	800afc2 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800b336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b338:	f7ff ffc0 	bl	800b2bc <_rpmsg_virtio_get_buffer_size>
 800b33c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800b33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	429a      	cmp	r2, r3
 800b344:	dc08      	bgt.n	800b358 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800b346:	f107 0216 	add.w	r2, r7, #22
 800b34a:	f107 0310 	add.w	r3, r7, #16
 800b34e:	4619      	mov	r1, r3
 800b350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b352:	f7ff ff63 	bl	800b21c <rpmsg_virtio_get_tx_buffer>
 800b356:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3358      	adds	r3, #88	; 0x58
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff fe3b 	bl	800afd8 <metal_mutex_release>
		if (buffer || !tick_count)
 800b362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10e      	bne.n	800b386 <rpmsg_virtio_send_offchannel_raw+0x9e>
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00b      	beq.n	800b386 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800b374:	4b2e      	ldr	r3, [pc, #184]	; (800b430 <rpmsg_virtio_send_offchannel_raw+0x148>)
 800b376:	e054      	b.n	800b422 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800b378:	200a      	movs	r0, #10
 800b37a:	f7ff fd9e 	bl	800aeba <metal_sleep_usec>
		tick_count--;
 800b37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b380:	3b01      	subs	r3, #1
 800b382:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800b384:	e7d2      	b.n	800b32c <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800b38c:	4b29      	ldr	r3, [pc, #164]	; (800b434 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800b38e:	e048      	b.n	800b422 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800b398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800b3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a6:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800b3a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ac:	f7ff fda2 	bl	800aef4 <metal_io_virt_to_offset>
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	f107 0218 	add.w	r2, r7, #24
 800b3b6:	2310      	movs	r3, #16
 800b3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ba:	f7fe fdd8 	bl	8009f6e <metal_io_block_write>
 800b3be:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	d000      	beq.n	800b3c8 <rpmsg_virtio_send_offchannel_raw+0xe0>
 800b3c6:	e7fe      	b.n	800b3c6 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800b3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ca:	3310      	adds	r3, #16
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d0:	f7ff fd90 	bl	800aef4 <metal_io_virt_to_offset>
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3dc:	f7fe fdc7 	bl	8009f6e <metal_io_block_write>
 800b3e0:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800b3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d000      	beq.n	800b3ec <rpmsg_virtio_send_offchannel_raw+0x104>
 800b3ea:	e7fe      	b.n	800b3ea <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3358      	adds	r3, #88	; 0x58
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff fde6 	bl	800afc2 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	8afb      	ldrh	r3, [r7, #22]
 800b3fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b3fe:	f7ff feea 	bl	800b1d6 <rpmsg_virtio_enqueue_buffer>
 800b402:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	2b00      	cmp	r3, #0
 800b408:	d000      	beq.n	800b40c <rpmsg_virtio_send_offchannel_raw+0x124>
 800b40a:	e7fe      	b.n	800b40a <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800b40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fc5a 	bl	800bcca <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3358      	adds	r3, #88	; 0x58
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff fddc 	bl	800afd8 <metal_mutex_release>

	return size;
 800b420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b422:	4618      	mov	r0, r3
 800b424:	3740      	adds	r7, #64	; 0x40
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	fffff82c 	.word	0xfffff82c
 800b430:	fffff82b 	.word	0xfffff82b
 800b434:	fffff82e 	.word	0xfffff82e

0800b438 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b08d      	sub	sp, #52	; 0x34
 800b450:	af02      	add	r7, sp, #8
 800b452:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	3358      	adds	r3, #88	; 0x58
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fdaa 	bl	800afc2 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800b46e:	f107 020a 	add.w	r2, r7, #10
 800b472:	f107 030c 	add.w	r3, r7, #12
 800b476:	4619      	mov	r1, r3
 800b478:	69f8      	ldr	r0, [r7, #28]
 800b47a:	f7ff fefa 	bl	800b272 <rpmsg_virtio_get_rx_buffer>
 800b47e:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	3358      	adds	r3, #88	; 0x58
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff fda7 	bl	800afd8 <metal_mutex_release>

	while (rp_hdr) {
 800b48a:	e04c      	b.n	800b526 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	3358      	adds	r3, #88	; 0x58
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fd96 	bl	800afc2 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4619      	mov	r1, r3
 800b49c:	69b8      	ldr	r0, [r7, #24]
 800b49e:	f7ff fe1a 	bl	800b0d6 <rpmsg_get_ept_from_addr>
 800b4a2:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	3358      	adds	r3, #88	; 0x58
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7ff fd95 	bl	800afd8 <metal_mutex_release>

		if (!ept)
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d03c      	beq.n	800b52e <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4bc:	d103      	bne.n	800b4c6 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	899b      	ldrh	r3, [r3, #12]
 800b4d4:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	6978      	ldr	r0, [r7, #20]
 800b4e8:	47a0      	blx	r4
 800b4ea:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d000      	beq.n	800b4f4 <rpmsg_virtio_rx_callback+0xa8>
 800b4f2:	e7fe      	b.n	800b4f2 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	3358      	adds	r3, #88	; 0x58
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff fd62 	bl	800afc2 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	897b      	ldrh	r3, [r7, #10]
 800b502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b504:	69f8      	ldr	r0, [r7, #28]
 800b506:	f7ff fe46 	bl	800b196 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800b50a:	f107 020a 	add.w	r2, r7, #10
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	4619      	mov	r1, r3
 800b514:	69f8      	ldr	r0, [r7, #28]
 800b516:	f7ff feac 	bl	800b272 <rpmsg_virtio_get_rx_buffer>
 800b51a:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	3358      	adds	r3, #88	; 0x58
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff fd59 	bl	800afd8 <metal_mutex_release>
	while (rp_hdr) {
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1af      	bne.n	800b48c <rpmsg_virtio_rx_callback+0x40>
 800b52c:	e000      	b.n	800b530 <rpmsg_virtio_rx_callback+0xe4>
			return;
 800b52e:	bf00      	nop
	}
}
 800b530:	372c      	adds	r7, #44	; 0x2c
 800b532:	46bd      	mov	sp, r7
 800b534:	bd90      	pop	{r4, r7, pc}

0800b536 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b092      	sub	sp, #72	; 0x48
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800b54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54c:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800b54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b28      	cmp	r3, #40	; 0x28
 800b55c:	d001      	beq.n	800b562 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800b55e:	2300      	movs	r3, #0
 800b560:	e057      	b.n	800b612 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800b564:	4619      	mov	r1, r3
 800b566:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b568:	f7ff fcc4 	bl	800aef4 <metal_io_virt_to_offset>
 800b56c:	4601      	mov	r1, r0
 800b56e:	f107 0210 	add.w	r2, r7, #16
 800b572:	2320      	movs	r3, #32
 800b574:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b576:	f7fe fc83 	bl	8009e80 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800b580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b582:	3358      	adds	r3, #88	; 0x58
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fd1c 	bl	800afc2 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800b58a:	f107 0110 	add.w	r1, r7, #16
 800b58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b590:	f04f 32ff 	mov.w	r2, #4294967295
 800b594:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b596:	f7ff fb57 	bl	800ac48 <rpmsg_get_endpoint>
 800b59a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d017      	beq.n	800b5d8 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b4:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800b5b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5b8:	3358      	adds	r3, #88	; 0x58
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff fd0c 	bl	800afd8 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d024      	beq.n	800b610 <rpmsg_virtio_ns_callback+0xda>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d020      	beq.n	800b610 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	4798      	blx	r3
 800b5d6:	e01b      	b.n	800b610 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d110      	bne.n	800b600 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800b5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5e0:	3358      	adds	r3, #88	; 0x58
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff fcf8 	bl	800afd8 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800b5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00f      	beq.n	800b610 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800b5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5f4:	f107 0110 	add.w	r1, r7, #16
 800b5f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b5fc:	4798      	blx	r3
 800b5fe:	e007      	b.n	800b610 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b604:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800b606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b608:	3358      	adds	r3, #88	; 0x58
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff fce4 	bl	800afd8 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3748      	adds	r7, #72	; 0x48
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b094      	sub	sp, #80	; 0x50
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800b62e:	2264      	movs	r2, #100	; 0x64
 800b630:	2100      	movs	r1, #0
 800b632:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b634:	f004 fc58 	bl	800fee8 <memset>
	metal_mutex_init(&rdev->lock);
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	3358      	adds	r3, #88	; 0x58
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fcb5 	bl	800afac <metal_mutex_init>
	rvdev->vdev = vdev;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	4a5d      	ldr	r2, [pc, #372]	; (800b7cc <rpmsg_init_vdev+0x1b0>)
 800b658:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fce4 	bl	800b028 <rpmsg_virtio_get_role>
 800b660:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b664:	2b00      	cmp	r3, #0
 800b666:	d120      	bne.n	800b6aa <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800b668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800b66e:	4b58      	ldr	r3, [pc, #352]	; (800b7d0 <rpmsg_init_vdev+0x1b4>)
 800b670:	e0a7      	b.n	800b7c2 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800b67a:	4b56      	ldr	r3, [pc, #344]	; (800b7d4 <rpmsg_init_vdev+0x1b8>)
 800b67c:	e0a1      	b.n	800b7c2 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b682:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800b684:	4b54      	ldr	r3, [pc, #336]	; (800b7d8 <rpmsg_init_vdev+0x1bc>)
 800b686:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800b688:	4b54      	ldr	r3, [pc, #336]	; (800b7dc <rpmsg_init_vdev+0x1c0>)
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800b68c:	4b54      	ldr	r3, [pc, #336]	; (800b7e0 <rpmsg_init_vdev+0x1c4>)
 800b68e:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800b690:	4b54      	ldr	r3, [pc, #336]	; (800b7e4 <rpmsg_init_vdev+0x1c8>)
 800b692:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a2:	3318      	adds	r3, #24
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800b6b0:	f107 0220 	add.w	r2, r7, #32
 800b6b4:	f107 0318 	add.w	r3, r7, #24
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	2202      	movs	r2, #2
 800b6be:	2100      	movs	r1, #0
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff fcf3 	bl	800b0ac <rpmsg_virtio_create_virtqueues>
 800b6c6:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800b6c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <rpmsg_init_vdev+0xb6>
		return status;
 800b6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6d0:	e077      	b.n	800b7c2 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	643b      	str	r3, [r7, #64]	; 0x40
 800b6d6:	e00f      	b.n	800b6f8 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6de:	4613      	mov	r3, r2
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	440b      	add	r3, r1
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800b6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	643b      	str	r3, [r7, #64]	; 0x40
 800b6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d9ec      	bls.n	800b6d8 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b700:	2b00      	cmp	r3, #0
 800b702:	d137      	bne.n	800b774 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800b704:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b708:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800b70a:	2300      	movs	r3, #0
 800b70c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b70e:	e02a      	b.n	800b766 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800b710:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b714:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b716:	f7ff fcef 	bl	800b0f8 <rpmsg_virtio_shm_pool_get_buffer>
 800b71a:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800b722:	4b2c      	ldr	r3, [pc, #176]	; (800b7d4 <rpmsg_init_vdev+0x1b8>)
 800b724:	e04d      	b.n	800b7c2 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800b72a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b72c:	6838      	ldr	r0, [r7, #0]
 800b72e:	f7ff fbe1 	bl	800aef4 <metal_io_virt_to_offset>
 800b732:	4601      	mov	r1, r0
 800b734:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b738:	2200      	movs	r2, #0
 800b73a:	6838      	ldr	r0, [r7, #0]
 800b73c:	f7fe fc8d 	bl	800a05a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b744:	f107 0110 	add.w	r1, r7, #16
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	2301      	movs	r3, #1
 800b74e:	2200      	movs	r2, #0
 800b750:	f000 f9fd 	bl	800bb4e <virtqueue_add_buffer>
 800b754:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800b756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <rpmsg_init_vdev+0x144>
				return status;
 800b75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75e:	e030      	b.n	800b7c2 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800b760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b762:	3301      	adds	r3, #1
 800b764:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b76a:	895b      	ldrh	r3, [r3, #10]
 800b76c:	461a      	mov	r2, r3
 800b76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b770:	4293      	cmp	r3, r2
 800b772:	d3cd      	bcc.n	800b710 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fbab 	bl	800aed2 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f7ff fc84 	bl	800b08a <rpmsg_virtio_get_features>
 800b782:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d011      	beq.n	800b7b2 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	f103 0008 	add.w	r0, r3, #8
 800b794:	2300      	movs	r3, #0
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	4b13      	ldr	r3, [pc, #76]	; (800b7e8 <rpmsg_init_vdev+0x1cc>)
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	2335      	movs	r3, #53	; 0x35
 800b79e:	2235      	movs	r2, #53	; 0x35
 800b7a0:	4912      	ldr	r1, [pc, #72]	; (800b7ec <rpmsg_init_vdev+0x1d0>)
 800b7a2:	f7ff fc24 	bl	800afee <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7ae:	f7ff facd 	bl	800ad4c <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800b7b8:	2104      	movs	r1, #4
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7ff fc41 	bl	800b042 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800b7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3748      	adds	r7, #72	; 0x48
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0800b2e9 	.word	0x0800b2e9
 800b7d0:	fffff82d 	.word	0xfffff82d
 800b7d4:	fffff82e 	.word	0xfffff82e
 800b7d8:	08014c10 	.word	0x08014c10
 800b7dc:	08014c18 	.word	0x08014c18
 800b7e0:	0800b44d 	.word	0x0800b44d
 800b7e4:	0800b439 	.word	0x0800b439
 800b7e8:	0800b537 	.word	0x0800b537
 800b7ec:	08014c20 	.word	0x08014c20

0800b7f0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800b7fa:	bf00      	nop
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800b82a:	68fb      	ldr	r3, [r7, #12]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3303      	adds	r3, #3
 800b84c:	005a      	lsls	r2, r3, #1
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	4413      	add	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	4413      	add	r3, r2
 800b85a:	1e5a      	subs	r2, r3, #1
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	425b      	negs	r3, r3
 800b860:	4013      	ands	r3, r2
 800b862:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4413      	add	r3, r2
 800b86c:	3306      	adds	r3, #6
 800b86e:	60fb      	str	r3, [r7, #12]

	return size;
 800b870:	68fb      	ldr	r3, [r7, #12]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <metal_io_virt_to_offset>:
{
 800b87e:	b480      	push	{r7}
 800b880:	b085      	sub	sp, #20
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	683a      	ldr	r2, [r7, #0]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d201      	bcs.n	800b8a0 <metal_io_virt_to_offset+0x22>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	e001      	b.n	800b8a4 <metal_io_virt_to_offset+0x26>
 800b8a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b091      	sub	sp, #68	; 0x44
 800b8b4:	af04      	add	r7, sp, #16
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d902      	bls.n	800b8d2 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800b8cc:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800b8d0:	e053      	b.n	800b97a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d6:	e04b      	b.n	800b970 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8de:	4613      	mov	r3, r2
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	4413      	add	r3, r2
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	440b      	add	r3, r1
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d118      	bne.n	800b92a <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4619      	mov	r1, r3
 800b904:	69f8      	ldr	r0, [r7, #28]
 800b906:	f7ff ffba 	bl	800b87e <metal_io_virt_to_offset>
 800b90a:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800b910:	461a      	mov	r2, r3
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7ff ff8d 	bl	800b838 <vring_size>
 800b91e:	4603      	mov	r3, r0
 800b920:	2200      	movs	r2, #0
 800b922:	69b9      	ldr	r1, [r7, #24]
 800b924:	69f8      	ldr	r0, [r7, #28]
 800b926:	f7fe fb98 	bl	800a05a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800b92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92c:	b298      	uxth	r0, r3
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	4413      	add	r3, r2
 800b936:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b93e:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800b940:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800b946:	6a12      	ldr	r2, [r2, #32]
 800b948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b94a:	6809      	ldr	r1, [r1, #0]
 800b94c:	9102      	str	r1, [sp, #8]
 800b94e:	9201      	str	r2, [sp, #4]
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	4622      	mov	r2, r4
 800b956:	4601      	mov	r1, r0
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 f8c4 	bl	800bae6 <virtqueue_create>
 800b95e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <virtio_create_virtqueues+0xba>
			return ret;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	e007      	b.n	800b97a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	3301      	adds	r3, #1
 800b96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d3af      	bcc.n	800b8d8 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3734      	adds	r7, #52	; 0x34
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd90      	pop	{r4, r7, pc}

0800b982 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800b982:	b480      	push	{r7}
 800b984:	b085      	sub	sp, #20
 800b986:	af00      	add	r7, sp, #0
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	441a      	add	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	689a      	ldr	r2, [r3, #8]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	005b      	lsls	r3, r3, #1
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	425b      	negs	r3, r3
 800b9c0:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	60da      	str	r2, [r3, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	80fb      	strh	r3, [r7, #6]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	80bb      	strh	r3, [r7, #4]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800b9e6:	88ba      	ldrh	r2, [r7, #4]
 800b9e8:	88fb      	ldrh	r3, [r7, #6]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800b9f2:	88b9      	ldrh	r1, [r7, #4]
 800b9f4:	887b      	ldrh	r3, [r7, #2]
 800b9f6:	1acb      	subs	r3, r1, r3
 800b9f8:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	bf34      	ite	cc
 800b9fe:	2301      	movcc	r3, #1
 800ba00:	2300      	movcs	r3, #0
 800ba02:	b2db      	uxtb	r3, r3
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <metal_io_virt_to_offset>:
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d201      	bcs.n	800ba32 <metal_io_virt_to_offset+0x22>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	e001      	b.n	800ba36 <metal_io_virt_to_offset+0x26>
 800ba32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <metal_io_phys>:
{
 800ba42:	b480      	push	{r7}
 800ba44:	b085      	sub	sp, #20
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800ba50:	2b1f      	cmp	r3, #31
 800ba52:	d805      	bhi.n	800ba60 <metal_io_phys+0x1e>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5e:	e000      	b.n	800ba62 <metal_io_phys+0x20>
 800ba60:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800ba62:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d010      	beq.n	800ba8e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d80b      	bhi.n	800ba8e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6919      	ldr	r1, [r3, #16]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800ba8a:	4413      	add	r3, r2
 800ba8c:	e001      	b.n	800ba92 <metal_io_phys+0x50>
 800ba8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <metal_io_virt_to_phys>:
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b082      	sub	sp, #8
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff ffb0 	bl	800ba10 <metal_io_virt_to_offset>
 800bab0:	4603      	mov	r3, r0
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ffc4 	bl	800ba42 <metal_io_phys>
 800baba:	4603      	mov	r3, r0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad2:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7ff ffe1 	bl	800ba9e <metal_io_virt_to_phys>
 800badc:	4603      	mov	r3, r0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b086      	sub	sp, #24
 800baea:	af00      	add	r7, sp, #0
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
 800baf2:	460b      	mov	r3, r1
 800baf4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d121      	bne.n	800bb44 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	897a      	ldrh	r2, [r7, #10]
 800bb10:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	891a      	ldrh	r2, [r3, #8]
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	895a      	ldrh	r2, [r3, #10]
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	6a3a      	ldr	r2, [r7, #32]
 800bb26:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2c:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	6819      	ldr	r1, [r3, #0]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	461a      	mov	r2, r3
 800bb38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb3a:	f000 f97a 	bl	800be32 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800bb3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb40:	f000 f899 	bl	800bc76 <virtqueue_disable_cb>
	}

	return (status);
 800bb44:	697b      	ldr	r3, [r7, #20]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b08a      	sub	sp, #40	; 0x28
 800bb52:	af02      	add	r7, sp, #8
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	607a      	str	r2, [r7, #4]
 800bb5a:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800bb60:	2300      	movs	r3, #0
 800bb62:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	4413      	add	r3, r2
 800bb6a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d12c      	bne.n	800bbcc <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bb76:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800bb78:	8a7b      	ldrh	r3, [r7, #18]
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	4413      	add	r3, r2
 800bb82:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb88:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	69d9      	ldr	r1, [r3, #28]
 800bb96:	8a7a      	ldrh	r2, [r7, #18]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 f8a7 	bl	800bcf6 <vq_ring_add_buffer>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8a3a      	ldrh	r2, [r7, #16]
 800bbb0:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800bbc2:	8a7b      	ldrh	r3, [r7, #18]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 f966 	bl	800be98 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3720      	adds	r7, #32
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b088      	sub	sp, #32
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d006      	beq.n	800bbf6 <virtqueue_get_buffer+0x20>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	885b      	ldrh	r3, [r3, #2]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d101      	bne.n	800bbfa <virtqueue_get_buffer+0x24>
		return (NULL);
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e039      	b.n	800bc6e <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	b291      	uxth	r1, r2
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	8651      	strh	r1, [r2, #50]	; 0x32
 800bc06:	b21a      	sxth	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	895b      	ldrh	r3, [r3, #10]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	b21b      	sxth	r3, r3
 800bc12:	4013      	ands	r3, r2
 800bc14:	b21b      	sxth	r3, r3
 800bc16:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc1c:	8bfb      	ldrh	r3, [r7, #30]
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800bc26:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	82fb      	strh	r3, [r7, #22]
	if (len)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800bc3e:	8afb      	ldrh	r3, [r7, #22]
 800bc40:	4619      	mov	r1, r3
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 f8ae 	bl	800bda4 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800bc48:	8afa      	ldrh	r2, [r7, #22]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3207      	adds	r2, #7
 800bc4e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800bc52:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800bc54:	8afa      	ldrh	r2, [r7, #22]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3207      	adds	r2, #7
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	8bfa      	ldrh	r2, [r7, #30]
 800bc6a:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800bc6c:	693b      	ldr	r3, [r7, #16]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f003 0302 	and.w	r3, r3, #2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d010      	beq.n	800bcac <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	895b      	ldrh	r3, [r3, #10]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800bc9e:	3901      	subs	r1, #1
 800bca0:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	4413      	add	r3, r2
 800bca6:	460a      	mov	r2, r1
 800bca8:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800bcaa:	e008      	b.n	800bcbe <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1b      	ldr	r3, [r3, #32]
 800bcb0:	881a      	ldrh	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	f042 0201 	orr.w	r2, r2, #1
 800bcba:	b292      	uxth	r2, r2
 800bcbc:	801a      	strh	r2, [r3, #0]
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800bcd2:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f91d 	bl	800bf16 <vq_ring_must_notify_host>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f94d 	bl	800bf82 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b088      	sub	sp, #32
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	603b      	str	r3, [r7, #0]
 800bd02:	4613      	mov	r3, r2
 800bd04:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800bd06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	4413      	add	r3, r2
 800bd0c:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	88fb      	ldrh	r3, [r7, #6]
 800bd14:	837b      	strh	r3, [r7, #26]
 800bd16:	e03c      	b.n	800bd92 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800bd18:	8b7b      	ldrh	r3, [r7, #26]
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	4413      	add	r3, r2
 800bd20:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	4413      	add	r3, r2
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff fec8 	bl	800bac4 <virtqueue_virt_to_phys>
 800bd34:	4603      	mov	r3, r0
 800bd36:	461a      	mov	r2, r3
 800bd38:	f04f 0300 	mov.w	r3, #0
 800bd3c:	6939      	ldr	r1, [r7, #16]
 800bd3e:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	00db      	lsls	r3, r3, #3
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	4413      	add	r3, r2
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	2200      	movs	r2, #0
 800bd56:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	69fa      	ldr	r2, [r7, #28]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	da06      	bge.n	800bd70 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	899b      	ldrh	r3, [r3, #12]
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	429a      	cmp	r2, r3
 800bd76:	db06      	blt.n	800bd86 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	899b      	ldrh	r3, [r3, #12]
 800bd7c:	f043 0302 	orr.w	r3, r3, #2
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	61fb      	str	r3, [r7, #28]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	89db      	ldrh	r3, [r3, #14]
 800bd90:	837b      	strh	r3, [r7, #26]
 800bd92:	69fa      	ldr	r2, [r7, #28]
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	dbbe      	blt.n	800bd18 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800bd9a:	8b7b      	ldrh	r3, [r7, #26]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3720      	adds	r7, #32
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	69da      	ldr	r2, [r3, #28]
 800bdb4:	887b      	ldrh	r3, [r7, #2]
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	4413      	add	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800bdbc:	887b      	ldrh	r3, [r7, #2]
 800bdbe:	3307      	adds	r3, #7
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	889b      	ldrh	r3, [r3, #4]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	889b      	ldrh	r3, [r3, #4]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	899b      	ldrh	r3, [r3, #12]
 800bde8:	f003 0304 	and.w	r3, r3, #4
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d113      	bne.n	800be18 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800bdf0:	e00c      	b.n	800be0c <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	69da      	ldr	r2, [r3, #28]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	89db      	ldrh	r3, [r3, #14]
 800bdfa:	011b      	lsls	r3, r3, #4
 800bdfc:	4413      	add	r3, r2
 800bdfe:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	889b      	ldrh	r3, [r3, #4]
 800be04:	3b01      	subs	r3, #1
 800be06:	b29a      	uxth	r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	899b      	ldrh	r3, [r3, #12]
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1ec      	bne.n	800bdf2 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800be26:	bf00      	nop
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800be32:	b580      	push	{r7, lr}
 800be34:	b088      	sub	sp, #32
 800be36:	af00      	add	r7, sp, #0
 800be38:	60f8      	str	r0, [r7, #12]
 800be3a:	60b9      	str	r1, [r7, #8]
 800be3c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	895b      	ldrh	r3, [r3, #10]
 800be42:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	3318      	adds	r3, #24
 800be48:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800be4a:	69b9      	ldr	r1, [r7, #24]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	6978      	ldr	r0, [r7, #20]
 800be52:	f7ff fd96 	bl	800b982 <vring_init>

	for (i = 0; i < size - 1; i++)
 800be56:	2300      	movs	r3, #0
 800be58:	61fb      	str	r3, [r7, #28]
 800be5a:	e00c      	b.n	800be76 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	b29a      	uxth	r2, r3
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	6859      	ldr	r1, [r3, #4]
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	440b      	add	r3, r1
 800be6a:	3201      	adds	r2, #1
 800be6c:	b292      	uxth	r2, r2
 800be6e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	3301      	adds	r3, #1
 800be74:	61fb      	str	r3, [r7, #28]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	3b01      	subs	r3, #1
 800be7a:	69fa      	ldr	r2, [r7, #28]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	dbed      	blt.n	800be5c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	4413      	add	r3, r2
 800be8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800be8e:	81da      	strh	r2, [r3, #14]
}
 800be90:	bf00      	nop
 800be92:	3720      	adds	r7, #32
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a1b      	ldr	r3, [r3, #32]
 800bea8:	885b      	ldrh	r3, [r3, #2]
 800beaa:	b21a      	sxth	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	895b      	ldrh	r3, [r3, #10]
 800beb0:	3b01      	subs	r3, #1
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	b21b      	sxth	r3, r3
 800beb6:	4013      	ands	r3, r2
 800beb8:	b21b      	sxth	r3, r3
 800beba:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a1a      	ldr	r2, [r3, #32]
 800bec0:	89fb      	ldrh	r3, [r7, #14]
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	4413      	add	r3, r2
 800bec6:	887a      	ldrh	r2, [r7, #2]
 800bec8:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800beca:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	885a      	ldrh	r2, [r3, #2]
 800bed4:	3201      	adds	r2, #1
 800bed6:	b292      	uxth	r2, r2
 800bed8:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bede:	3301      	adds	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bee6:	bf00      	nop
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b082      	sub	sp, #8
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800befa:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <virtqueue_notification+0x1c>
		vq->callback(vq);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
}
 800bf0e:	bf00      	nop
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d01d      	beq.n	800bf66 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	885b      	ldrh	r3, [r3, #2]
 800bf30:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf36:	89fa      	ldrh	r2, [r7, #14]
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800bf4c:	89ba      	ldrh	r2, [r7, #12]
 800bf4e:	89f9      	ldrh	r1, [r7, #14]
 800bf50:	897b      	ldrh	r3, [r7, #10]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff fd3e 	bl	800b9d4 <vring_need_event>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bf14      	ite	ne
 800bf5e:	2301      	movne	r3, #1
 800bf60:	2300      	moveq	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	e009      	b.n	800bf7a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bf0c      	ite	eq
 800bf74:	2301      	moveq	r3, #1
 800bf76:	2300      	movne	r3, #0
 800bf78:	b2db      	uxtb	r3, r3
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
}
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	0000      	movs	r0, r0
 800bfa4:	0000      	movs	r0, r0
	...

0800bfa8 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af02      	add	r7, sp, #8
	isPortrait = true;
 800bfae:	4b5e      	ldr	r3, [pc, #376]	; (800c128 <screenInit+0x180>)
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 800bfb4:	f7fc fc1e 	bl	80087f4 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 800bfb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bfbc:	f7fd fc3e 	bl	800983c <LCD_1IN8_SetBackLight>

	if (isPortrait)
 800bfc0:	4b59      	ldr	r3, [pc, #356]	; (800c128 <screenInit+0x180>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00d      	beq.n	800bfe4 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 800bfc8:	2000      	movs	r0, #0
 800bfca:	f7fd fb17 	bl	80095fc <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800bfce:	2000      	movs	r0, #0
 800bfd0:	f7fd fbf6 	bl	80097c0 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800bfd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfd8:	2200      	movs	r2, #0
 800bfda:	21a0      	movs	r1, #160	; 0xa0
 800bfdc:	2080      	movs	r0, #128	; 0x80
 800bfde:	f7fc fc29 	bl	8008834 <Paint_NewImage>
 800bfe2:	e00c      	b.n	800bffe <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 800bfe4:	2005      	movs	r0, #5
 800bfe6:	f7fd fb09 	bl	80095fc <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800bfea:	2000      	movs	r0, #0
 800bfec:	f7fd fbe8 	bl	80097c0 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800bff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff4:	2200      	movs	r2, #0
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	20a0      	movs	r0, #160	; 0xa0
 800bffa:	f7fc fc1b 	bl	8008834 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 800bffe:	484b      	ldr	r0, [pc, #300]	; (800c12c <screenInit+0x184>)
 800c000:	f7fc fc64 	bl	80088cc <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 800c004:	484a      	ldr	r0, [pc, #296]	; (800c130 <screenInit+0x188>)
 800c006:	f7fc fc71 	bl	80088ec <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 800c00a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c00e:	f7fc fd2d 	bl	8008a6c <Paint_Clear>
	DEV_Delay_ms(1000);
 800c012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c016:	f7f6 f821 	bl	800205c <HAL_Delay>

	if (isPortrait)
 800c01a:	4b43      	ldr	r3, [pc, #268]	; (800c128 <screenInit+0x180>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d038      	beq.n	800c094 <screenInit+0xec>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 800c022:	2380      	movs	r3, #128	; 0x80
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	2380      	movs	r3, #128	; 0x80
 800c028:	2200      	movs	r2, #0
 800c02a:	2100      	movs	r1, #0
 800c02c:	4841      	ldr	r0, [pc, #260]	; (800c134 <screenInit+0x18c>)
 800c02e:	f7fd f8a7 	bl	8009180 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 800c032:	2300      	movs	r3, #0
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	4b3e      	ldr	r3, [pc, #248]	; (800c138 <screenInit+0x190>)
 800c03e:	4a3f      	ldr	r2, [pc, #252]	; (800c13c <screenInit+0x194>)
 800c040:	2182      	movs	r1, #130	; 0x82
 800c042:	2001      	movs	r0, #1
 800c044:	f7fc ffb2 	bl	8008fac <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 ,1.000, 2,  &Font12, BLACK, WHITE);
 800c048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	2300      	movs	r3, #0
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	4b39      	ldr	r3, [pc, #228]	; (800c138 <screenInit+0x190>)
 800c054:	2202      	movs	r2, #2
 800c056:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c05a:	218e      	movs	r1, #142	; 0x8e
 800c05c:	2001      	movs	r0, #1
 800c05e:	f7fc fffd 	bl	800905c <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 800c062:	2300      	movs	r3, #0
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	4b32      	ldr	r3, [pc, #200]	; (800c138 <screenInit+0x190>)
 800c06e:	4a34      	ldr	r2, [pc, #208]	; (800c140 <screenInit+0x198>)
 800c070:	2182      	movs	r1, #130	; 0x82
 800c072:	2046      	movs	r0, #70	; 0x46
 800c074:	f7fc ff9a 	bl	8008fac <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 ,1.100, 2,  &Font12, BLACK, WHITE);
 800c078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	2300      	movs	r3, #0
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <screenInit+0x190>)
 800c084:	2202      	movs	r2, #2
 800c086:	ed9f 0b24 	vldr	d0, [pc, #144]	; 800c118 <screenInit+0x170>
 800c08a:	218e      	movs	r1, #142	; 0x8e
 800c08c:	2046      	movs	r0, #70	; 0x46
 800c08e:	f7fc ffe5 	bl	800905c <Paint_DrawFloatNum>
 800c092:	e037      	b.n	800c104 <screenInit+0x15c>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 800c094:	2380      	movs	r3, #128	; 0x80
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	2380      	movs	r3, #128	; 0x80
 800c09a:	2200      	movs	r2, #0
 800c09c:	2110      	movs	r1, #16
 800c09e:	4825      	ldr	r0, [pc, #148]	; (800c134 <screenInit+0x18c>)
 800c0a0:	f7fd f86e 	bl	8009180 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	4b22      	ldr	r3, [pc, #136]	; (800c138 <screenInit+0x190>)
 800c0b0:	4a22      	ldr	r2, [pc, #136]	; (800c13c <screenInit+0x194>)
 800c0b2:	2162      	movs	r1, #98	; 0x62
 800c0b4:	2001      	movs	r0, #1
 800c0b6:	f7fc ff79 	bl	8008fac <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 ,1.000, 2,  &Font12, BLACK, WHITE);
 800c0ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0be:	9301      	str	r3, [sp, #4]
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	4b1c      	ldr	r3, [pc, #112]	; (800c138 <screenInit+0x190>)
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c0cc:	216e      	movs	r1, #110	; 0x6e
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	f7fc ffc4 	bl	800905c <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	4b16      	ldr	r3, [pc, #88]	; (800c138 <screenInit+0x190>)
 800c0e0:	4a17      	ldr	r2, [pc, #92]	; (800c140 <screenInit+0x198>)
 800c0e2:	2162      	movs	r1, #98	; 0x62
 800c0e4:	2068      	movs	r0, #104	; 0x68
 800c0e6:	f7fc ff61 	bl	8008fac <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 ,1.200, 2,  &Font12, BLACK, WHITE);
 800c0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	4b10      	ldr	r3, [pc, #64]	; (800c138 <screenInit+0x190>)
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c120 <screenInit+0x178>
 800c0fc:	216e      	movs	r1, #110	; 0x6e
 800c0fe:	207c      	movs	r0, #124	; 0x7c
 800c100:	f7fc ffac 	bl	800905c <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 800c104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c108:	f7f5 ffa8 	bl	800205c <HAL_Delay>
}
 800c10c:	bf00      	nop
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	f3af 8000 	nop.w
 800c118:	9999999a 	.word	0x9999999a
 800c11c:	3ff19999 	.word	0x3ff19999
 800c120:	33333333 	.word	0x33333333
 800c124:	3ff33333 	.word	0x3ff33333
 800c128:	2400004c 	.word	0x2400004c
 800c12c:	080097c1 	.word	0x080097c1
 800c130:	08009735 	.word	0x08009735
 800c134:	08015440 	.word	0x08015440
 800c138:	24000010 	.word	0x24000010
 800c13c:	08014c24 	.word	0x08014c24
 800c140:	08014c2c 	.word	0x08014c2c

0800c144 <screenClear>:

void screenClear(void)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	af00      	add	r7, sp, #0
	if (isPortrait)
 800c148:	4b0e      	ldr	r3, [pc, #56]	; (800c184 <screenClear+0x40>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d007      	beq.n	800c160 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800c150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c154:	2200      	movs	r2, #0
 800c156:	21a0      	movs	r1, #160	; 0xa0
 800c158:	2080      	movs	r0, #128	; 0x80
 800c15a:	f7fc fb6b 	bl	8008834 <Paint_NewImage>
 800c15e:	e006      	b.n	800c16e <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800c160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c164:	2200      	movs	r2, #0
 800c166:	2180      	movs	r1, #128	; 0x80
 800c168:	20a0      	movs	r0, #160	; 0xa0
 800c16a:	f7fc fb63 	bl	8008834 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 800c16e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c172:	f7fc fc7b 	bl	8008a6c <Paint_Clear>
	DEV_Delay_ms(1000);
 800c176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c17a:	f7f5 ff6f 	bl	800205c <HAL_Delay>
}
 800c17e:	bf00      	nop
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	2400004c 	.word	0x2400004c

0800c188 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 800c188:	b590      	push	{r4, r7, lr}
 800c18a:	b089      	sub	sp, #36	; 0x24
 800c18c:	af02      	add	r7, sp, #8
 800c18e:	60ba      	str	r2, [r7, #8]
 800c190:	461a      	mov	r2, r3
 800c192:	4603      	mov	r3, r0
 800c194:	81fb      	strh	r3, [r7, #14]
 800c196:	460b      	mov	r3, r1
 800c198:	81bb      	strh	r3, [r7, #12]
 800c19a:	4613      	mov	r3, r2
 800c19c:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 800c1a2:	89fa      	ldrh	r2, [r7, #14]
 800c1a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1a8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800c1aa:	fb01 f303 	mul.w	r3, r1, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	da00      	bge.n	800c1b4 <centeredString+0x2c>
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	105b      	asrs	r3, r3, #1
 800c1b6:	425b      	negs	r3, r3
 800c1b8:	4413      	add	r3, r2
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1c2:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800c320 <centeredString+0x198>
 800c1c6:	eeb0 0b47 	vmov.f64	d0, d7
 800c1ca:	f008 fa59 	bl	8014680 <fmax>
 800c1ce:	eeb0 7b40 	vmov.f64	d7, d0
 800c1d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c1d6:	edc7 7a00 	vstr	s15, [r7]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 800c1de:	4b52      	ldr	r3, [pc, #328]	; (800c328 <centeredString+0x1a0>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	f083 0301 	eor.w	r3, r3, #1
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d018      	beq.n	800c21e <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
 800c1ee:	b298      	uxth	r0, r3
 800c1f0:	7dfb      	ldrb	r3, [r7, #23]
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1f8:	b299      	uxth	r1, r3
 800c1fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c1fc:	fb11 f303 	smulbb	r3, r1, r3
 800c200:	b29b      	uxth	r3, r3
 800c202:	4413      	add	r3, r2
 800c204:	b29c      	uxth	r4, r3
 800c206:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c208:	89bb      	ldrh	r3, [r7, #12]
 800c20a:	4413      	add	r3, r2
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	89b9      	ldrh	r1, [r7, #12]
 800c210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c214:	9200      	str	r2, [sp, #0]
 800c216:	4622      	mov	r2, r4
 800c218:	f7fc fc38 	bl	8008a8c <Paint_ClearWindows>
 800c21c:	e04e      	b.n	800c2bc <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 800c21e:	4b42      	ldr	r3, [pc, #264]	; (800c328 <centeredString+0x1a0>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d026      	beq.n	800c274 <centeredString+0xec>
 800c226:	4b41      	ldr	r3, [pc, #260]	; (800c32c <centeredString+0x1a4>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	f083 0301 	eor.w	r3, r3, #1
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01f      	beq.n	800c274 <centeredString+0xec>
 800c234:	4b3e      	ldr	r3, [pc, #248]	; (800c330 <centeredString+0x1a8>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	f083 0301 	eor.w	r3, r3, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d018      	beq.n	800c274 <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	b298      	uxth	r0, r3
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	b29a      	uxth	r2, r3
 800c24a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c24e:	b299      	uxth	r1, r3
 800c250:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c252:	fb11 f303 	smulbb	r3, r1, r3
 800c256:	b29b      	uxth	r3, r3
 800c258:	4413      	add	r3, r2
 800c25a:	b29c      	uxth	r4, r3
 800c25c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c25e:	89bb      	ldrh	r3, [r7, #12]
 800c260:	4413      	add	r3, r2
 800c262:	b29a      	uxth	r2, r3
 800c264:	89b9      	ldrh	r1, [r7, #12]
 800c266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	4613      	mov	r3, r2
 800c26c:	4622      	mov	r2, r4
 800c26e:	f7fc fc0d 	bl	8008a8c <Paint_ClearWindows>
 800c272:	e023      	b.n	800c2bc <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 800c274:	4b2c      	ldr	r3, [pc, #176]	; (800c328 <centeredString+0x1a0>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01f      	beq.n	800c2bc <centeredString+0x134>
 800c27c:	4b2b      	ldr	r3, [pc, #172]	; (800c32c <centeredString+0x1a4>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d103      	bne.n	800c28c <centeredString+0x104>
 800c284:	4b2a      	ldr	r3, [pc, #168]	; (800c330 <centeredString+0x1a8>)
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d017      	beq.n	800c2bc <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	b298      	uxth	r0, r3
 800c290:	7dfb      	ldrb	r3, [r7, #23]
 800c292:	b29a      	uxth	r2, r3
 800c294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c298:	b299      	uxth	r1, r3
 800c29a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c29c:	fb11 f303 	smulbb	r3, r1, r3
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	4413      	add	r3, r2
 800c2a4:	b29c      	uxth	r4, r3
 800c2a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c2a8:	89bb      	ldrh	r3, [r7, #12]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	89b9      	ldrh	r1, [r7, #12]
 800c2b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2b4:	9200      	str	r2, [sp, #0]
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	f7fc fbe8 	bl	8008a8c <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 800c2bc:	68b8      	ldr	r0, [r7, #8]
 800c2be:	f7f4 f819 	bl	80002f4 <strlen>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 800c2c6:	89fc      	ldrh	r4, [r7, #14]
 800c2c8:	68b8      	ldr	r0, [r7, #8]
 800c2ca:	f7f4 f813 	bl	80002f4 <strlen>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	085b      	lsrs	r3, r3, #1
 800c2d8:	1ae3      	subs	r3, r4, r3
 800c2da:	ee07 3a90 	vmov	s15, r3
 800c2de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c2e2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800c320 <centeredString+0x198>
 800c2e6:	eeb0 0b47 	vmov.f64	d0, d7
 800c2ea:	f008 f9c9 	bl	8014680 <fmax>
 800c2ee:	eeb0 7b40 	vmov.f64	d7, d0
 800c2f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c2f6:	edc7 7a00 	vstr	s15, [r7]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	b298      	uxth	r0, r3
 800c302:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c306:	89b9      	ldrh	r1, [r7, #12]
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	9301      	str	r3, [sp, #4]
 800c30c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	4613      	mov	r3, r2
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	f7fc fe4a 	bl	8008fac <Paint_DrawString_EN>
}
 800c318:	bf00      	nop
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd90      	pop	{r4, r7, pc}
	...
 800c328:	2400a3ab 	.word	0x2400a3ab
 800c32c:	2400a3a5 	.word	0x2400a3a5
 800c330:	2400a3aa 	.word	0x2400a3aa

0800c334 <showAngles>:

void showAngles(void)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08c      	sub	sp, #48	; 0x30
 800c338:	af04      	add	r7, sp, #16
	char localT[32] = "";
 800c33a:	2300      	movs	r3, #0
 800c33c:	603b      	str	r3, [r7, #0]
 800c33e:	1d3b      	adds	r3, r7, #4
 800c340:	2200      	movs	r2, #0
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	605a      	str	r2, [r3, #4]
 800c346:	609a      	str	r2, [r3, #8]
 800c348:	60da      	str	r2, [r3, #12]
 800c34a:	611a      	str	r2, [r3, #16]
 800c34c:	615a      	str	r2, [r3, #20]
 800c34e:	619a      	str	r2, [r3, #24]
//		snprintf(localT,sizeof(localT),"%03d",message);
	createEmptyFrame(false);
 800c350:	2000      	movs	r0, #0
 800c352:	f000 ff2f 	bl	800d1b4 <createEmptyFrame>
//		centeredString(64, 50, (char *)localT, BLACK, WHITE, 32, Font12);
	snprintf(localT,sizeof(localT),"R: %3.3f", receivedAnglesData->bodyAngles.Roll);
 800c356:	4b38      	ldr	r3, [pc, #224]	; (800c438 <showAngles+0x104>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c35e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c362:	463b      	mov	r3, r7
 800c364:	ed8d 7b00 	vstr	d7, [sp]
 800c368:	4a34      	ldr	r2, [pc, #208]	; (800c43c <showAngles+0x108>)
 800c36a:	2120      	movs	r1, #32
 800c36c:	4618      	mov	r0, r3
 800c36e:	f004 feb1 	bl	80110d4 <sniprintf>
	//			createEmptyFrame(false);
	centeredString(64, 50, (char *)localT, BLACK, WHITE, 16, Font8);
 800c372:	463a      	mov	r2, r7
 800c374:	4932      	ldr	r1, [pc, #200]	; (800c440 <showAngles+0x10c>)
 800c376:	ab02      	add	r3, sp, #8
 800c378:	c903      	ldmia	r1, {r0, r1}
 800c37a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c37e:	2310      	movs	r3, #16
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	2132      	movs	r1, #50	; 0x32
 800c38c:	2040      	movs	r0, #64	; 0x40
 800c38e:	f7ff fefb 	bl	800c188 <centeredString>
	//			createEmptyFrame(false);
	memset(localT,0,32);
 800c392:	463b      	mov	r3, r7
 800c394:	2220      	movs	r2, #32
 800c396:	2100      	movs	r1, #0
 800c398:	4618      	mov	r0, r3
 800c39a:	f003 fda5 	bl	800fee8 <memset>
	snprintf(localT,sizeof(localT),"P: %3.3f", receivedAnglesData->bodyAngles.Pitch);
 800c39e:	4b26      	ldr	r3, [pc, #152]	; (800c438 <showAngles+0x104>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	edd3 7a02 	vldr	s15, [r3, #8]
 800c3a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3aa:	463b      	mov	r3, r7
 800c3ac:	ed8d 7b00 	vstr	d7, [sp]
 800c3b0:	4a24      	ldr	r2, [pc, #144]	; (800c444 <showAngles+0x110>)
 800c3b2:	2120      	movs	r1, #32
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f004 fe8d 	bl	80110d4 <sniprintf>
	centeredString(64, 64, (char *)localT, BLACK, WHITE, 16, Font8);
 800c3ba:	463a      	mov	r2, r7
 800c3bc:	4920      	ldr	r1, [pc, #128]	; (800c440 <showAngles+0x10c>)
 800c3be:	ab02      	add	r3, sp, #8
 800c3c0:	c903      	ldmia	r1, {r0, r1}
 800c3c2:	e883 0003 	stmia.w	r3, {r0, r1}
 800c3c6:	2310      	movs	r3, #16
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	2140      	movs	r1, #64	; 0x40
 800c3d4:	2040      	movs	r0, #64	; 0x40
 800c3d6:	f7ff fed7 	bl	800c188 <centeredString>
	//			createEmptyFrame(false);
	memset(localT,0,32);
 800c3da:	463b      	mov	r3, r7
 800c3dc:	2220      	movs	r2, #32
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f003 fd81 	bl	800fee8 <memset>
	snprintf(localT,sizeof(localT),"Y: %3.3f", receivedAnglesData->bodyAngles.Yaw);
 800c3e6:	4b14      	ldr	r3, [pc, #80]	; (800c438 <showAngles+0x104>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	edd3 7a03 	vldr	s15, [r3, #12]
 800c3ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3f2:	463b      	mov	r3, r7
 800c3f4:	ed8d 7b00 	vstr	d7, [sp]
 800c3f8:	4a13      	ldr	r2, [pc, #76]	; (800c448 <showAngles+0x114>)
 800c3fa:	2120      	movs	r1, #32
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f004 fe69 	bl	80110d4 <sniprintf>
	centeredString(64, 76, (char *)localT, BLACK, WHITE, 16, Font8);
 800c402:	463a      	mov	r2, r7
 800c404:	490e      	ldr	r1, [pc, #56]	; (800c440 <showAngles+0x10c>)
 800c406:	ab02      	add	r3, sp, #8
 800c408:	c903      	ldmia	r1, {r0, r1}
 800c40a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c40e:	2310      	movs	r3, #16
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	2300      	movs	r3, #0
 800c41a:	214c      	movs	r1, #76	; 0x4c
 800c41c:	2040      	movs	r0, #64	; 0x40
 800c41e:	f7ff feb3 	bl	800c188 <centeredString>
	memset(localT,0,32);
 800c422:	463b      	mov	r3, r7
 800c424:	2220      	movs	r2, #32
 800c426:	2100      	movs	r1, #0
 800c428:	4618      	mov	r0, r3
 800c42a:	f003 fd5d 	bl	800fee8 <memset>
}
 800c42e:	bf00      	nop
 800c430:	3720      	adds	r7, #32
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	2400a55c 	.word	0x2400a55c
 800c43c:	08014c34 	.word	0x08014c34
 800c440:	24000018 	.word	0x24000018
 800c444:	08014c40 	.word	0x08014c40
 800c448:	08014c4c 	.word	0x08014c4c

0800c44c <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 800c456:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <screenUpdate+0x88>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	f083 0301 	eor.w	r3, r3, #1
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b00      	cmp	r3, #0
 800c462:	d009      	beq.n	800c478 <screenUpdate+0x2c>
 800c464:	4b1c      	ldr	r3, [pc, #112]	; (800c4d8 <screenUpdate+0x8c>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	f083 0301 	eor.w	r3, r3, #1
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <screenUpdate+0x2c>
	{
		showAngles();
 800c472:	f7ff ff5f 	bl	800c334 <showAngles>
 800c476:	e01f      	b.n	800c4b8 <screenUpdate+0x6c>
	}
	else if (isMenuDisplayed)
 800c478:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <screenUpdate+0x88>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d01b      	beq.n	800c4b8 <screenUpdate+0x6c>
	{
		if (shouldRenderMenu)
 800c480:	4b16      	ldr	r3, [pc, #88]	; (800c4dc <screenUpdate+0x90>)
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00a      	beq.n	800c49e <screenUpdate+0x52>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 800c488:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <screenUpdate+0x94>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	4a15      	ldr	r2, [pc, #84]	; (800c4e4 <screenUpdate+0x98>)
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f000 f82e 	bl	800c4f4 <drawMenu>
			shouldRenderMenu = false;
 800c498:	4b10      	ldr	r3, [pc, #64]	; (800c4dc <screenUpdate+0x90>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 800c49e:	4b12      	ldr	r3, [pc, #72]	; (800c4e8 <screenUpdate+0x9c>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d008      	beq.n	800c4b8 <screenUpdate+0x6c>
		{
			drawItem(false, itemDrawDirection);
 800c4a6:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <screenUpdate+0xa0>)
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	f000 f9cf 	bl	800c850 <drawItem>
			shouldRenderItem = false;
 800c4b2:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <screenUpdate+0x9c>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <screenUpdate+0xa4>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <screenUpdate+0x7e>
	{
		drawPopup();
 800c4c0:	f000 fa86 	bl	800c9d0 <drawPopup>
		shouldRenderPopup = false;
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <screenUpdate+0xa4>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	701a      	strb	r2, [r3, #0]
	}
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	2400a3a5 	.word	0x2400a3a5
 800c4d8:	2400a3aa 	.word	0x2400a3aa
 800c4dc:	2400a3a4 	.word	0x2400a3a4
 800c4e0:	2400a3a6 	.word	0x2400a3a6
 800c4e4:	2400004d 	.word	0x2400004d
 800c4e8:	2400a3a7 	.word	0x2400a3a7
 800c4ec:	2400004e 	.word	0x2400004e
 800c4f0:	2400a3a9 	.word	0x2400a3a9

0800c4f4 <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 800c4f4:	b5b0      	push	{r4, r5, r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af04      	add	r7, sp, #16
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	71fb      	strb	r3, [r7, #7]
 800c500:	4613      	mov	r3, r2
 800c502:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d006      	beq.n	800c518 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 800c50a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c50e:	f7fc faad 	bl	8008a6c <Paint_Clear>
		createEmptyFrame(true);
 800c512:	2001      	movs	r0, #1
 800c514:	f000 fe4e 	bl	800d1b4 <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 800c52c:	4b8e      	ldr	r3, [pc, #568]	; (800c768 <drawMenu+0x274>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00a      	beq.n	800c54a <drawMenu+0x56>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800c534:	2302      	movs	r3, #2
 800c536:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800c538:	230c      	movs	r3, #12
 800c53a:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800c53c:	230e      	movs	r3, #14
 800c53e:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800c540:	237c      	movs	r3, #124	; 0x7c
 800c542:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800c544:	2340      	movs	r3, #64	; 0x40
 800c546:	74fb      	strb	r3, [r7, #19]
 800c548:	e009      	b.n	800c55e <drawMenu+0x6a>
	}
	else
	{
		MenuRectangleStartX = HorizontalMenuRectangleStartX;
 800c54a:	2318      	movs	r3, #24
 800c54c:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = HorizontalMenuRectangleStartY;
 800c54e:	230c      	movs	r3, #12
 800c550:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = HorizontalMenuRectangleHeight;
 800c552:	230e      	movs	r3, #14
 800c554:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = HorizontalMenuRectangleWidth;
 800c556:	2372      	movs	r3, #114	; 0x72
 800c558:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = HorizontalDisplayCenterWidth;
 800c55a:	2350      	movs	r3, #80	; 0x50
 800c55c:	74fb      	strb	r3, [r7, #19]
	}

	if (howToDraw == FULL)
 800c55e:	79bb      	ldrb	r3, [r7, #6]
 800c560:	2b02      	cmp	r3, #2
 800c562:	f040 809f 	bne.w	800c6a4 <drawMenu+0x1b0>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 800c566:	2300      	movs	r3, #0
 800c568:	60fb      	str	r3, [r7, #12]
 800c56a:	e08a      	b.n	800c682 <drawMenu+0x18e>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	b298      	uxth	r0, r3
 800c570:	7dbb      	ldrb	r3, [r7, #22]
 800c572:	b29a      	uxth	r2, r3
 800c574:	7d7b      	ldrb	r3, [r7, #21]
 800c576:	b299      	uxth	r1, r3
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	fb11 f303 	smulbb	r3, r1, r3
 800c580:	b29b      	uxth	r3, r3
 800c582:	4413      	add	r3, r2
 800c584:	b29c      	uxth	r4, r3
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	b29a      	uxth	r2, r3
 800c58a:	7d3b      	ldrb	r3, [r7, #20]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4413      	add	r3, r2
 800c590:	b29d      	uxth	r5, r3
 800c592:	7dbb      	ldrb	r3, [r7, #22]
 800c594:	b29a      	uxth	r2, r3
 800c596:	7d7b      	ldrb	r3, [r7, #21]
 800c598:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	fb11 f303 	smulbb	r3, r1, r3
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4413      	add	r3, r2
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	9202      	str	r2, [sp, #8]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	9201      	str	r2, [sp, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	9200      	str	r2, [sp, #0]
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	f7fc fbe1 	bl	8008d80 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 800c5be:	4b6b      	ldr	r3, [pc, #428]	; (800c76c <drawMenu+0x278>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d12c      	bne.n	800c624 <drawMenu+0x130>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800c5ca:	7cfb      	ldrb	r3, [r7, #19]
 800c5cc:	b29c      	uxth	r4, r3
 800c5ce:	7dbb      	ldrb	r3, [r7, #22]
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	7d7b      	ldrb	r3, [r7, #21]
 800c5d4:	b299      	uxth	r1, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	fb11 f303 	smulbb	r3, r1, r3
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	4413      	add	r3, r2
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 800c5e8:	4b60      	ldr	r3, [pc, #384]	; (800c76c <drawMenu+0x278>)
 800c5ea:	785b      	ldrb	r3, [r3, #1]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	330a      	adds	r3, #10
 800c5f2:	011a      	lsls	r2, r3, #4
 800c5f4:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c5f8:	fb03 f301 	mul.w	r3, r3, r1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	4a5c      	ldr	r2, [pc, #368]	; (800c770 <drawMenu+0x27c>)
 800c600:	4413      	add	r3, r2
 800c602:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800c604:	495b      	ldr	r1, [pc, #364]	; (800c774 <drawMenu+0x280>)
 800c606:	ab02      	add	r3, sp, #8
 800c608:	c903      	ldmia	r1, {r0, r1}
 800c60a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c60e:	2310      	movs	r3, #16
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	f24c 6318 	movw	r3, #50712	; 0xc618
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	2300      	movs	r3, #0
 800c61a:	4629      	mov	r1, r5
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7ff fdb3 	bl	800c188 <centeredString>
 800c622:	e02b      	b.n	800c67c <drawMenu+0x188>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800c624:	7cfb      	ldrb	r3, [r7, #19]
 800c626:	b29c      	uxth	r4, r3
 800c628:	7dbb      	ldrb	r3, [r7, #22]
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	7d7b      	ldrb	r3, [r7, #21]
 800c62e:	b299      	uxth	r1, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	b29b      	uxth	r3, r3
 800c634:	fb11 f303 	smulbb	r3, r1, r3
 800c638:	b29b      	uxth	r3, r3
 800c63a:	4413      	add	r3, r2
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	3301      	adds	r3, #1
 800c640:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 800c642:	4b4a      	ldr	r3, [pc, #296]	; (800c76c <drawMenu+0x278>)
 800c644:	785b      	ldrb	r3, [r3, #1]
 800c646:	4619      	mov	r1, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	330a      	adds	r3, #10
 800c64c:	011a      	lsls	r2, r3, #4
 800c64e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c652:	fb03 f301 	mul.w	r3, r3, r1
 800c656:	4413      	add	r3, r2
 800c658:	4a45      	ldr	r2, [pc, #276]	; (800c770 <drawMenu+0x27c>)
 800c65a:	4413      	add	r3, r2
 800c65c:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800c65e:	4945      	ldr	r1, [pc, #276]	; (800c774 <drawMenu+0x280>)
 800c660:	ab02      	add	r3, sp, #8
 800c662:	c903      	ldmia	r1, {r0, r1}
 800c664:	e883 0003 	stmia.w	r3, {r0, r1}
 800c668:	2310      	movs	r3, #16
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	2300      	movs	r3, #0
 800c674:	4629      	mov	r1, r5
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff fd86 	bl	800c188 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	3301      	adds	r3, #1
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	4b3a      	ldr	r3, [pc, #232]	; (800c76c <drawMenu+0x278>)
 800c684:	785b      	ldrb	r3, [r3, #1]
 800c686:	4619      	mov	r1, r3
 800c688:	4a39      	ldr	r2, [pc, #228]	; (800c770 <drawMenu+0x27c>)
 800c68a:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c68e:	fb03 f301 	mul.w	r3, r3, r1
 800c692:	4413      	add	r3, r2
 800c694:	33a1      	adds	r3, #161	; 0xa1
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	461a      	mov	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4293      	cmp	r3, r2
 800c69e:	f6ff af65 	blt.w	800c56c <drawMenu+0x78>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 800c6a2:	e0ca      	b.n	800c83a <drawMenu+0x346>
	else if (howToDraw == UP)
 800c6a4:	79bb      	ldrb	r3, [r7, #6]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d166      	bne.n	800c778 <drawMenu+0x284>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 800c6aa:	7cfb      	ldrb	r3, [r7, #19]
 800c6ac:	b29c      	uxth	r4, r3
 800c6ae:	7dbb      	ldrb	r3, [r7, #22]
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	7d7b      	ldrb	r3, [r7, #21]
 800c6b4:	b299      	uxth	r1, r3
 800c6b6:	4b2d      	ldr	r3, [pc, #180]	; (800c76c <drawMenu+0x278>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	fb11 f303 	smulbb	r3, r1, r3
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	4413      	add	r3, r2
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 800c6cc:	4b27      	ldr	r3, [pc, #156]	; (800c76c <drawMenu+0x278>)
 800c6ce:	785b      	ldrb	r3, [r3, #1]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4b26      	ldr	r3, [pc, #152]	; (800c76c <drawMenu+0x278>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	330a      	adds	r3, #10
 800c6da:	011a      	lsls	r2, r3, #4
 800c6dc:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c6e0:	fb03 f301 	mul.w	r3, r3, r1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	4a22      	ldr	r2, [pc, #136]	; (800c770 <drawMenu+0x27c>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 800c6ec:	4921      	ldr	r1, [pc, #132]	; (800c774 <drawMenu+0x280>)
 800c6ee:	ab02      	add	r3, sp, #8
 800c6f0:	c903      	ldmia	r1, {r0, r1}
 800c6f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6f6:	2310      	movs	r3, #16
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	2300      	movs	r3, #0
 800c702:	4629      	mov	r1, r5
 800c704:	4620      	mov	r0, r4
 800c706:	f7ff fd3f 	bl	800c188 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800c70a:	7cfb      	ldrb	r3, [r7, #19]
 800c70c:	b29c      	uxth	r4, r3
 800c70e:	7dbb      	ldrb	r3, [r7, #22]
 800c710:	b29a      	uxth	r2, r3
 800c712:	7d7b      	ldrb	r3, [r7, #21]
 800c714:	b299      	uxth	r1, r3
 800c716:	4b15      	ldr	r3, [pc, #84]	; (800c76c <drawMenu+0x278>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	fb11 f303 	smulbb	r3, r1, r3
 800c720:	b29b      	uxth	r3, r3
 800c722:	4413      	add	r3, r2
 800c724:	b29b      	uxth	r3, r3
 800c726:	3301      	adds	r3, #1
 800c728:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <drawMenu+0x278>)
 800c72c:	785b      	ldrb	r3, [r3, #1]
 800c72e:	4619      	mov	r1, r3
 800c730:	4b0e      	ldr	r3, [pc, #56]	; (800c76c <drawMenu+0x278>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	330a      	adds	r3, #10
 800c736:	011a      	lsls	r2, r3, #4
 800c738:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c73c:	fb03 f301 	mul.w	r3, r3, r1
 800c740:	4413      	add	r3, r2
 800c742:	4a0b      	ldr	r2, [pc, #44]	; (800c770 <drawMenu+0x27c>)
 800c744:	4413      	add	r3, r2
 800c746:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800c748:	490a      	ldr	r1, [pc, #40]	; (800c774 <drawMenu+0x280>)
 800c74a:	ab02      	add	r3, sp, #8
 800c74c:	c903      	ldmia	r1, {r0, r1}
 800c74e:	e883 0003 	stmia.w	r3, {r0, r1}
 800c752:	2310      	movs	r3, #16
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	f24c 6318 	movw	r3, #50712	; 0xc618
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	2300      	movs	r3, #0
 800c75e:	4629      	mov	r1, r5
 800c760:	4620      	mov	r0, r4
 800c762:	f7ff fd11 	bl	800c188 <centeredString>
}
 800c766:	e068      	b.n	800c83a <drawMenu+0x346>
 800c768:	2400004c 	.word	0x2400004c
 800c76c:	2400a5ac 	.word	0x2400a5ac
 800c770:	2400e210 	.word	0x2400e210
 800c774:	24000010 	.word	0x24000010
	else if (howToDraw == DOWN)
 800c778:	79bb      	ldrb	r3, [r7, #6]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d15d      	bne.n	800c83a <drawMenu+0x346>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 800c77e:	7cfb      	ldrb	r3, [r7, #19]
 800c780:	b29c      	uxth	r4, r3
 800c782:	7dbb      	ldrb	r3, [r7, #22]
 800c784:	b29a      	uxth	r2, r3
 800c786:	7d7b      	ldrb	r3, [r7, #21]
 800c788:	b299      	uxth	r1, r3
 800c78a:	4b2e      	ldr	r3, [pc, #184]	; (800c844 <drawMenu+0x350>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29b      	uxth	r3, r3
 800c792:	fb11 f303 	smulbb	r3, r1, r3
 800c796:	b29b      	uxth	r3, r3
 800c798:	4413      	add	r3, r2
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	3301      	adds	r3, #1
 800c79e:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 800c7a0:	4b28      	ldr	r3, [pc, #160]	; (800c844 <drawMenu+0x350>)
 800c7a2:	785b      	ldrb	r3, [r3, #1]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4b27      	ldr	r3, [pc, #156]	; (800c844 <drawMenu+0x350>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	330a      	adds	r3, #10
 800c7ae:	011a      	lsls	r2, r3, #4
 800c7b0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c7b4:	fb03 f301 	mul.w	r3, r3, r1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	4a23      	ldr	r2, [pc, #140]	; (800c848 <drawMenu+0x354>)
 800c7bc:	4413      	add	r3, r2
 800c7be:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 800c7c0:	4922      	ldr	r1, [pc, #136]	; (800c84c <drawMenu+0x358>)
 800c7c2:	ab02      	add	r3, sp, #8
 800c7c4:	c903      	ldmia	r1, {r0, r1}
 800c7c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7ca:	2310      	movs	r3, #16
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7ff fcd5 	bl	800c188 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800c7de:	7cfb      	ldrb	r3, [r7, #19]
 800c7e0:	b29c      	uxth	r4, r3
 800c7e2:	7dbb      	ldrb	r3, [r7, #22]
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	7d7b      	ldrb	r3, [r7, #21]
 800c7e8:	b299      	uxth	r1, r3
 800c7ea:	4b16      	ldr	r3, [pc, #88]	; (800c844 <drawMenu+0x350>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	fb11 f303 	smulbb	r3, r1, r3
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	4413      	add	r3, r2
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 800c7fe:	4b11      	ldr	r3, [pc, #68]	; (800c844 <drawMenu+0x350>)
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	4619      	mov	r1, r3
 800c804:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <drawMenu+0x350>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	330a      	adds	r3, #10
 800c80a:	011a      	lsls	r2, r3, #4
 800c80c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c810:	fb03 f301 	mul.w	r3, r3, r1
 800c814:	4413      	add	r3, r2
 800c816:	4a0c      	ldr	r2, [pc, #48]	; (800c848 <drawMenu+0x354>)
 800c818:	4413      	add	r3, r2
 800c81a:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800c81c:	490b      	ldr	r1, [pc, #44]	; (800c84c <drawMenu+0x358>)
 800c81e:	ab02      	add	r3, sp, #8
 800c820:	c903      	ldmia	r1, {r0, r1}
 800c822:	e883 0003 	stmia.w	r3, {r0, r1}
 800c826:	2310      	movs	r3, #16
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	2300      	movs	r3, #0
 800c832:	4629      	mov	r1, r5
 800c834:	4620      	mov	r0, r4
 800c836:	f7ff fca7 	bl	800c188 <centeredString>
}
 800c83a:	bf00      	nop
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bdb0      	pop	{r4, r5, r7, pc}
 800c842:	bf00      	nop
 800c844:	2400a5ac 	.word	0x2400a5ac
 800c848:	2400e210 	.word	0x2400e210
 800c84c:	24000010 	.word	0x24000010

0800c850 <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	460a      	mov	r2, r1
 800c85a:	71fb      	strb	r3, [r7, #7]
 800c85c:	4613      	mov	r3, r2
 800c85e:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <drawItem+0x24>
 800c866:	4b53      	ldr	r3, [pc, #332]	; (800c9b4 <drawItem+0x164>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f083 0301 	eor.w	r3, r3, #1
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d006      	beq.n	800c882 <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 800c874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c878:	f7fc f8f8 	bl	8008a6c <Paint_Clear>
		createEmptyFrame(true);
 800c87c:	2001      	movs	r0, #1
 800c87e:	f000 fc99 	bl	800d1b4 <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800c882:	4b4d      	ldr	r3, [pc, #308]	; (800c9b8 <drawItem+0x168>)
 800c884:	7b1b      	ldrb	r3, [r3, #12]
 800c886:	3b01      	subs	r3, #1
 800c888:	4a4b      	ldr	r2, [pc, #300]	; (800c9b8 <drawItem+0x168>)
 800c88a:	4413      	add	r3, r2
 800c88c:	789b      	ldrb	r3, [r3, #2]
 800c88e:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 800c890:	4b49      	ldr	r3, [pc, #292]	; (800c9b8 <drawItem+0x168>)
 800c892:	7b1b      	ldrb	r3, [r3, #12]
 800c894:	3b01      	subs	r3, #1
 800c896:	4a48      	ldr	r2, [pc, #288]	; (800c9b8 <drawItem+0x168>)
 800c898:	4413      	add	r3, r2
 800c89a:	79db      	ldrb	r3, [r3, #7]
 800c89c:	4619      	mov	r1, r3
 800c89e:	4a47      	ldr	r2, [pc, #284]	; (800c9bc <drawItem+0x16c>)
 800c8a0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c8a4:	fb03 f300 	mul.w	r3, r3, r0
 800c8a8:	4413      	add	r3, r2
 800c8aa:	440b      	add	r3, r1
 800c8ac:	3380      	adds	r3, #128	; 0x80
 800c8ae:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d130      	bne.n	800c916 <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 800c8b4:	4b3f      	ldr	r3, [pc, #252]	; (800c9b4 <drawItem+0x164>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f083 0301 	eor.w	r3, r3, #1
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d022      	beq.n	800c908 <drawItem+0xb8>
		{
			multiplierIndex = 0;
 800c8c2:	4b3f      	ldr	r3, [pc, #252]	; (800c9c0 <drawItem+0x170>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800c8c8:	4b3b      	ldr	r3, [pc, #236]	; (800c9b8 <drawItem+0x168>)
 800c8ca:	7b1b      	ldrb	r3, [r3, #12]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	4a3a      	ldr	r2, [pc, #232]	; (800c9b8 <drawItem+0x168>)
 800c8d0:	4413      	add	r3, r2
 800c8d2:	789b      	ldrb	r3, [r3, #2]
 800c8d4:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 800c8d6:	4b38      	ldr	r3, [pc, #224]	; (800c9b8 <drawItem+0x168>)
 800c8d8:	7b1b      	ldrb	r3, [r3, #12]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	4a36      	ldr	r2, [pc, #216]	; (800c9b8 <drawItem+0x168>)
 800c8de:	4413      	add	r3, r2
 800c8e0:	79db      	ldrb	r3, [r3, #7]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4a35      	ldr	r2, [pc, #212]	; (800c9bc <drawItem+0x16c>)
 800c8e6:	23a9      	movs	r3, #169	; 0xa9
 800c8e8:	fb03 f300 	mul.w	r3, r3, r0
 800c8ec:	440b      	add	r3, r1
 800c8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800c8f2:	f44f 7204 	mov.w	r2, #528	; 0x210
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	4832      	ldr	r0, [pc, #200]	; (800c9c4 <drawItem+0x174>)
 800c8fa:	f003 facd 	bl	800fe98 <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 800c8fe:	4b31      	ldr	r3, [pc, #196]	; (800c9c4 <drawItem+0x174>)
 800c900:	7b9b      	ldrb	r3, [r3, #14]
 800c902:	461a      	mov	r2, r3
 800c904:	4b30      	ldr	r3, [pc, #192]	; (800c9c8 <drawItem+0x178>)
 800c906:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 800c908:	4b2a      	ldr	r3, [pc, #168]	; (800c9b4 <drawItem+0x164>)
 800c90a:	2201      	movs	r2, #1
 800c90c:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 800c90e:	79bb      	ldrb	r3, [r7, #6]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fcb5 	bl	800d280 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800c916:	4b28      	ldr	r3, [pc, #160]	; (800c9b8 <drawItem+0x168>)
 800c918:	7b1b      	ldrb	r3, [r3, #12]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	4a26      	ldr	r2, [pc, #152]	; (800c9b8 <drawItem+0x168>)
 800c91e:	4413      	add	r3, r2
 800c920:	789b      	ldrb	r3, [r3, #2]
 800c922:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 800c924:	4b24      	ldr	r3, [pc, #144]	; (800c9b8 <drawItem+0x168>)
 800c926:	7b1b      	ldrb	r3, [r3, #12]
 800c928:	3b01      	subs	r3, #1
 800c92a:	4a23      	ldr	r2, [pc, #140]	; (800c9b8 <drawItem+0x168>)
 800c92c:	4413      	add	r3, r2
 800c92e:	79db      	ldrb	r3, [r3, #7]
 800c930:	4619      	mov	r1, r3
 800c932:	4a22      	ldr	r2, [pc, #136]	; (800c9bc <drawItem+0x16c>)
 800c934:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800c938:	fb03 f300 	mul.w	r3, r3, r0
 800c93c:	4413      	add	r3, r2
 800c93e:	440b      	add	r3, r1
 800c940:	3380      	adds	r3, #128	; 0x80
 800c942:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800c944:	2b08      	cmp	r3, #8
 800c946:	d131      	bne.n	800c9ac <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 800c948:	4b1a      	ldr	r3, [pc, #104]	; (800c9b4 <drawItem+0x164>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	f083 0301 	eor.w	r3, r3, #1
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d023      	beq.n	800c99e <drawItem+0x14e>
		{
			multiplierIndex = 0;
 800c956:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <drawItem+0x170>)
 800c958:	2200      	movs	r2, #0
 800c95a:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800c95c:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <drawItem+0x168>)
 800c95e:	7b1b      	ldrb	r3, [r3, #12]
 800c960:	3b01      	subs	r3, #1
 800c962:	4a15      	ldr	r2, [pc, #84]	; (800c9b8 <drawItem+0x168>)
 800c964:	4413      	add	r3, r2
 800c966:	789b      	ldrb	r3, [r3, #2]
 800c968:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 800c96a:	4b13      	ldr	r3, [pc, #76]	; (800c9b8 <drawItem+0x168>)
 800c96c:	7b1b      	ldrb	r3, [r3, #12]
 800c96e:	3b01      	subs	r3, #1
 800c970:	4a11      	ldr	r2, [pc, #68]	; (800c9b8 <drawItem+0x168>)
 800c972:	4413      	add	r3, r2
 800c974:	79db      	ldrb	r3, [r3, #7]
 800c976:	4619      	mov	r1, r3
 800c978:	4a10      	ldr	r2, [pc, #64]	; (800c9bc <drawItem+0x16c>)
 800c97a:	23a9      	movs	r3, #169	; 0xa9
 800c97c:	fb03 f300 	mul.w	r3, r3, r0
 800c980:	440b      	add	r3, r1
 800c982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800c986:	f240 420c 	movw	r2, #1036	; 0x40c
 800c98a:	4619      	mov	r1, r3
 800c98c:	480f      	ldr	r0, [pc, #60]	; (800c9cc <drawItem+0x17c>)
 800c98e:	f003 fa83 	bl	800fe98 <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 800c992:	4b0e      	ldr	r3, [pc, #56]	; (800c9cc <drawItem+0x17c>)
 800c994:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 800c998:	461a      	mov	r2, r3
 800c99a:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <drawItem+0x178>)
 800c99c:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <drawItem+0x164>)
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 800c9a4:	79bb      	ldrb	r3, [r7, #6]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f001 ffaa 	bl	800e900 <updateStringItem>
	}
}
 800c9ac:	bf00      	nop
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	2400a3a8 	.word	0x2400a3a8
 800c9b8:	2400a5ac 	.word	0x2400a5ac
 800c9bc:	2400e210 	.word	0x2400e210
 800c9c0:	2400a0d0 	.word	0x2400a0d0
 800c9c4:	2400ae0c 	.word	0x2400ae0c
 800c9c8:	2400a448 	.word	0x2400a448
 800c9cc:	2400b020 	.word	0x2400b020

0800c9d0 <drawPopup>:

void drawPopup(void)
{
 800c9d0:	b5b0      	push	{r4, r5, r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 800c9f2:	4b8a      	ldr	r3, [pc, #552]	; (800cc1c <drawPopup+0x24c>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00e      	beq.n	800ca18 <drawPopup+0x48>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800c9fe:	230c      	movs	r3, #12
 800ca00:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800ca02:	230e      	movs	r3, #14
 800ca04:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800ca06:	237c      	movs	r3, #124	; 0x7c
 800ca08:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800ca0a:	2340      	movs	r3, #64	; 0x40
 800ca0c:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 800ca0e:	2364      	movs	r3, #100	; 0x64
 800ca10:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 800ca12:	2356      	movs	r3, #86	; 0x56
 800ca14:	727b      	strb	r3, [r7, #9]
 800ca16:	e00d      	b.n	800ca34 <drawPopup+0x64>
	}
	else
	{
		MenuRectangleStartX = HorizontalMenuRectangleStartX;
 800ca18:	2318      	movs	r3, #24
 800ca1a:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = HorizontalMenuRectangleStartY;
 800ca1c:	230c      	movs	r3, #12
 800ca1e:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = HorizontalMenuRectangleHeight;
 800ca20:	230e      	movs	r3, #14
 800ca22:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = HorizontalMenuRectangleWidth;
 800ca24:	2372      	movs	r3, #114	; 0x72
 800ca26:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = HorizontalDisplayCenterWidth;
 800ca28:	2350      	movs	r3, #80	; 0x50
 800ca2a:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = HorizontalPopupRectangleHeight;
 800ca2c:	2364      	movs	r3, #100	; 0x64
 800ca2e:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
 800ca30:	2356      	movs	r3, #86	; 0x56
 800ca32:	727b      	strb	r3, [r7, #9]
	}

	isPopupDisplayed = true;
 800ca34:	4b7a      	ldr	r3, [pc, #488]	; (800cc20 <drawPopup+0x250>)
 800ca36:	2201      	movs	r2, #1
 800ca38:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 800ca3a:	4b7a      	ldr	r3, [pc, #488]	; (800cc24 <drawPopup+0x254>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 800ca40:	4b79      	ldr	r3, [pc, #484]	; (800cc28 <drawPopup+0x258>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 800ca46:	4b79      	ldr	r3, [pc, #484]	; (800cc2c <drawPopup+0x25c>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	f040 8097 	bne.w	800cb7e <drawPopup+0x1ae>
	{
		Paint_Clear(WHITE);
 800ca50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ca54:	f7fc f80a 	bl	8008a6c <Paint_Clear>
		createEmptyFrame(true);
 800ca58:	2001      	movs	r0, #1
 800ca5a:	f000 fbab 	bl	800d1b4 <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	b298      	uxth	r0, r3
 800ca62:	7bbb      	ldrb	r3, [r7, #14]
 800ca64:	b299      	uxth	r1, r3
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	7b3b      	ldrb	r3, [r7, #12]
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	4413      	add	r3, r2
 800ca70:	b29c      	uxth	r4, r3
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	7abb      	ldrb	r3, [r7, #10]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4413      	add	r3, r2
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	2200      	movs	r2, #0
 800ca80:	9202      	str	r2, [sp, #8]
 800ca82:	2201      	movs	r2, #1
 800ca84:	9201      	str	r2, [sp, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	9200      	str	r2, [sp, #0]
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	f7fc f978 	bl	8008d80 <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 800ca90:	4b67      	ldr	r3, [pc, #412]	; (800cc30 <drawPopup+0x260>)
 800ca92:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d020      	beq.n	800cadc <drawPopup+0x10c>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	b298      	uxth	r0, r3
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	7a7b      	ldrb	r3, [r7, #9]
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	4413      	add	r3, r2
 800caa8:	b299      	uxth	r1, r3
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	b29a      	uxth	r2, r3
 800caae:	7b3b      	ldrb	r3, [r7, #12]
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	4413      	add	r3, r2
 800cab4:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	b29a      	uxth	r2, r3
 800caba:	7a7b      	ldrb	r3, [r7, #9]
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	4413      	add	r3, r2
 800cac0:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 800cac2:	7b7b      	ldrb	r3, [r7, #13]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4413      	add	r3, r2
 800cac8:	b29b      	uxth	r3, r3
 800caca:	2200      	movs	r2, #0
 800cacc:	9202      	str	r2, [sp, #8]
 800cace:	2201      	movs	r2, #1
 800cad0:	9201      	str	r2, [sp, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	9200      	str	r2, [sp, #0]
 800cad6:	4622      	mov	r2, r4
 800cad8:	f7fc f952 	bl	8008d80 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	b298      	uxth	r0, r3
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	7abb      	ldrb	r3, [r7, #10]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	4413      	add	r3, r2
 800caea:	b299      	uxth	r1, r3
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	b29a      	uxth	r2, r3
 800caf0:	7b3b      	ldrb	r3, [r7, #12]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	4413      	add	r3, r2
 800caf6:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	7abb      	ldrb	r3, [r7, #10]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	4413      	add	r3, r2
 800cb02:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 800cb04:	7b7b      	ldrb	r3, [r7, #13]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	4413      	add	r3, r2
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	9202      	str	r2, [sp, #8]
 800cb10:	2201      	movs	r2, #1
 800cb12:	9201      	str	r2, [sp, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	9200      	str	r2, [sp, #0]
 800cb18:	4622      	mov	r2, r4
 800cb1a:	f7fc f931 	bl	8008d80 <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 800cb1e:	2300      	movs	r3, #0
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	e026      	b.n	800cb72 <drawPopup+0x1a2>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 800cb24:	7afb      	ldrb	r3, [r7, #11]
 800cb26:	b29c      	uxth	r4, r3
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	7b7b      	ldrb	r3, [r7, #13]
 800cb2e:	b299      	uxth	r1, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3301      	adds	r3, #1
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	fb11 f303 	smulbb	r3, r1, r3
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	4413      	add	r3, r2
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	3301      	adds	r3, #1
 800cb42:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	011b      	lsls	r3, r3, #4
 800cb48:	4a39      	ldr	r2, [pc, #228]	; (800cc30 <drawPopup+0x260>)
 800cb4a:	4413      	add	r3, r2
 800cb4c:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 800cb4e:	4939      	ldr	r1, [pc, #228]	; (800cc34 <drawPopup+0x264>)
 800cb50:	ab02      	add	r3, sp, #8
 800cb52:	c903      	ldmia	r1, {r0, r1}
 800cb54:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb58:	2310      	movs	r3, #16
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	2300      	movs	r3, #0
 800cb64:	4629      	mov	r1, r5
 800cb66:	4620      	mov	r0, r4
 800cb68:	f7ff fb0e 	bl	800c188 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	607b      	str	r3, [r7, #4]
 800cb72:	4b2f      	ldr	r3, [pc, #188]	; (800cc30 <drawPopup+0x260>)
 800cb74:	785b      	ldrb	r3, [r3, #1]
 800cb76:	3b02      	subs	r3, #2
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	dbd2      	blt.n	800cb24 <drawPopup+0x154>
		}
	}

	if (popupToShow.isQuestion)
 800cb7e:	4b2c      	ldr	r3, [pc, #176]	; (800cc30 <drawPopup+0x260>)
 800cb80:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 8098 	beq.w	800ccba <drawPopup+0x2ea>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 800cb8a:	4b28      	ldr	r3, [pc, #160]	; (800cc2c <drawPopup+0x25c>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d003      	beq.n	800cb9a <drawPopup+0x1ca>
 800cb92:	4b26      	ldr	r3, [pc, #152]	; (800cc2c <drawPopup+0x25c>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d14e      	bne.n	800cc38 <drawPopup+0x268>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800cb9a:	7afb      	ldrb	r3, [r7, #11]
 800cb9c:	b29c      	uxth	r4, r3
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	7a7b      	ldrb	r3, [r7, #9]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 800cbae:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <drawPopup+0x260>)
 800cbb0:	785b      	ldrb	r3, [r3, #1]
 800cbb2:	3b02      	subs	r3, #2
 800cbb4:	011b      	lsls	r3, r3, #4
 800cbb6:	4a1e      	ldr	r2, [pc, #120]	; (800cc30 <drawPopup+0x260>)
 800cbb8:	4413      	add	r3, r2
 800cbba:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800cbbc:	491d      	ldr	r1, [pc, #116]	; (800cc34 <drawPopup+0x264>)
 800cbbe:	ab02      	add	r3, sp, #8
 800cbc0:	c903      	ldmia	r1, {r0, r1}
 800cbc2:	e883 0003 	stmia.w	r3, {r0, r1}
 800cbc6:	2310      	movs	r3, #16
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	f24c 6318 	movw	r3, #50712	; 0xc618
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7ff fad7 	bl	800c188 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800cbda:	7afb      	ldrb	r3, [r7, #11]
 800cbdc:	b29c      	uxth	r4, r3
 800cbde:	7bbb      	ldrb	r3, [r7, #14]
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	7abb      	ldrb	r3, [r7, #10]
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	4413      	add	r3, r2
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3301      	adds	r3, #1
 800cbec:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 800cbee:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <drawPopup+0x260>)
 800cbf0:	785b      	ldrb	r3, [r3, #1]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	011b      	lsls	r3, r3, #4
 800cbf6:	4a0e      	ldr	r2, [pc, #56]	; (800cc30 <drawPopup+0x260>)
 800cbf8:	4413      	add	r3, r2
 800cbfa:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800cbfc:	490d      	ldr	r1, [pc, #52]	; (800cc34 <drawPopup+0x264>)
 800cbfe:	ab02      	add	r3, sp, #8
 800cc00:	c903      	ldmia	r1, {r0, r1}
 800cc02:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc06:	2310      	movs	r3, #16
 800cc08:	9301      	str	r3, [sp, #4]
 800cc0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	4629      	mov	r1, r5
 800cc14:	4620      	mov	r0, r4
 800cc16:	f7ff fab7 	bl	800c188 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 800cc1a:	e06e      	b.n	800ccfa <drawPopup+0x32a>
 800cc1c:	2400004c 	.word	0x2400004c
 800cc20:	2400a3aa 	.word	0x2400a3aa
 800cc24:	2400a3a8 	.word	0x2400a3a8
 800cc28:	2400a3a5 	.word	0x2400a3a5
 800cc2c:	2400004f 	.word	0x2400004f
 800cc30:	2400b650 	.word	0x2400b650
 800cc34:	24000010 	.word	0x24000010
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800cc38:	7afb      	ldrb	r3, [r7, #11]
 800cc3a:	b29c      	uxth	r4, r3
 800cc3c:	7bbb      	ldrb	r3, [r7, #14]
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	7a7b      	ldrb	r3, [r7, #9]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	4413      	add	r3, r2
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	3301      	adds	r3, #1
 800cc4a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 800cc4c:	4b2d      	ldr	r3, [pc, #180]	; (800cd04 <drawPopup+0x334>)
 800cc4e:	785b      	ldrb	r3, [r3, #1]
 800cc50:	3b02      	subs	r3, #2
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	4a2b      	ldr	r2, [pc, #172]	; (800cd04 <drawPopup+0x334>)
 800cc56:	4413      	add	r3, r2
 800cc58:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800cc5a:	492b      	ldr	r1, [pc, #172]	; (800cd08 <drawPopup+0x338>)
 800cc5c:	ab02      	add	r3, sp, #8
 800cc5e:	c903      	ldmia	r1, {r0, r1}
 800cc60:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc64:	2310      	movs	r3, #16
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	4629      	mov	r1, r5
 800cc72:	4620      	mov	r0, r4
 800cc74:	f7ff fa88 	bl	800c188 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800cc78:	7afb      	ldrb	r3, [r7, #11]
 800cc7a:	b29c      	uxth	r4, r3
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	7abb      	ldrb	r3, [r7, #10]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	4413      	add	r3, r2
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	3301      	adds	r3, #1
 800cc8a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 800cc8c:	4b1d      	ldr	r3, [pc, #116]	; (800cd04 <drawPopup+0x334>)
 800cc8e:	785b      	ldrb	r3, [r3, #1]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	4a1b      	ldr	r2, [pc, #108]	; (800cd04 <drawPopup+0x334>)
 800cc96:	4413      	add	r3, r2
 800cc98:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800cc9a:	491b      	ldr	r1, [pc, #108]	; (800cd08 <drawPopup+0x338>)
 800cc9c:	ab02      	add	r3, sp, #8
 800cc9e:	c903      	ldmia	r1, {r0, r1}
 800cca0:	e883 0003 	stmia.w	r3, {r0, r1}
 800cca4:	2310      	movs	r3, #16
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f7ff fa68 	bl	800c188 <centeredString>
}
 800ccb8:	e01f      	b.n	800ccfa <drawPopup+0x32a>
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	b29c      	uxth	r4, r3
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	7abb      	ldrb	r3, [r7, #10]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	4413      	add	r3, r2
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	3301      	adds	r3, #1
 800cccc:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 800ccce:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <drawPopup+0x334>)
 800ccd0:	785b      	ldrb	r3, [r3, #1]
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	011b      	lsls	r3, r3, #4
 800ccd6:	4a0b      	ldr	r2, [pc, #44]	; (800cd04 <drawPopup+0x334>)
 800ccd8:	4413      	add	r3, r2
 800ccda:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800ccdc:	490a      	ldr	r1, [pc, #40]	; (800cd08 <drawPopup+0x338>)
 800ccde:	ab02      	add	r3, sp, #8
 800cce0:	c903      	ldmia	r1, {r0, r1}
 800cce2:	e883 0003 	stmia.w	r3, {r0, r1}
 800cce6:	2310      	movs	r3, #16
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f7ff fa47 	bl	800c188 <centeredString>
}
 800ccfa:	bf00      	nop
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bdb0      	pop	{r4, r5, r7, pc}
 800cd02:	bf00      	nop
 800cd04:	2400b650 	.word	0x2400b650
 800cd08:	24000010 	.word	0x24000010

0800cd0c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <HAL_HSEM_FreeCallback+0x1c>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800cd1a:	2002      	movs	r0, #2
 800cd1c:	f7f6 f97c 	bl	8003018 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800cd20:	bf00      	nop
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	2400a3b0 	.word	0x2400a3b0

0800cd2c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800cd32:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <MAILBOX_Init+0x44>)
 800cd34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd38:	4a0d      	ldr	r2, [pc, #52]	; (800cd70 <MAILBOX_Init+0x44>)
 800cd3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cd3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cd42:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <MAILBOX_Init+0x44>)
 800cd44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd4c:	607b      	str	r3, [r7, #4]
 800cd4e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800cd50:	2201      	movs	r2, #1
 800cd52:	2100      	movs	r1, #0
 800cd54:	207d      	movs	r0, #125	; 0x7d
 800cd56:	f7f5 faa0 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800cd5a:	207d      	movs	r0, #125	; 0x7d
 800cd5c:	f7f5 fab7 	bl	80022ce <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800cd60:	2002      	movs	r0, #2
 800cd62:	f7f6 f959 	bl	8003018 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	58024400 	.word	0x58024400

0800cd74 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800cd7c:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <MAILBOX_Poll+0x30>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d108      	bne.n	800cd96 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800cd84:	2100      	movs	r1, #0
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7fd fd2b 	bl	800a7e2 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800cd8c:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <MAILBOX_Poll+0x30>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
    return 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e001      	b.n	800cd9a <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800cd96:	f06f 030a 	mvn.w	r3, #10
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2400a3b0 	.word	0x2400a3b0

0800cda8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	f7f6 f902 	bl	8002fbc <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800cdb8:	2100      	movs	r1, #0
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f7f6 f918 	bl	8002ff0 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdda:	d006      	beq.n	800cdea <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde4:	d001      	beq.n	800cdea <is_rpmsg_ept_ready+0x20>
 800cde6:	2301      	movs	r3, #1
 800cde8:	e000      	b.n	800cdec <is_rpmsg_ept_ready+0x22>
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d209      	bcs.n	800ce20 <metal_device_io_region+0x28>
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	4413      	add	r3, r2
 800ce14:	011b      	lsls	r3, r3, #4
 800ce16:	3308      	adds	r3, #8
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	e000      	b.n	800ce22 <metal_device_io_region+0x2a>
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
	...

0800ce30 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800ce30:	b590      	push	{r4, r7, lr}
 800ce32:	b08d      	sub	sp, #52	; 0x34
 800ce34:	af04      	add	r7, sp, #16
 800ce36:	6078      	str	r0, [r7, #4]
  int status = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800ce40:	4a41      	ldr	r2, [pc, #260]	; (800cf48 <OPENAMP_shmem_init+0x118>)
 800ce42:	f107 0310 	add.w	r3, r7, #16
 800ce46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce4a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800ce56:	f107 0310 	add.w	r3, r7, #16
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fc ff74 	bl	8009d48 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800ce60:	483a      	ldr	r0, [pc, #232]	; (800cf4c <OPENAMP_shmem_init+0x11c>)
 800ce62:	f7fc fe19 	bl	8009a98 <metal_register_generic_device>
 800ce66:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <OPENAMP_shmem_init+0x42>
    return status;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	e066      	b.n	800cf40 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800ce72:	f107 0318 	add.w	r3, r7, #24
 800ce76:	461a      	mov	r2, r3
 800ce78:	4935      	ldr	r1, [pc, #212]	; (800cf50 <OPENAMP_shmem_init+0x120>)
 800ce7a:	4836      	ldr	r0, [pc, #216]	; (800cf54 <OPENAMP_shmem_init+0x124>)
 800ce7c:	f7fc fdce 	bl	8009a1c <metal_device_open>
 800ce80:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <OPENAMP_shmem_init+0x5c>
    return status;
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	e059      	b.n	800cf40 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800ce8c:	4a32      	ldr	r2, [pc, #200]	; (800cf58 <OPENAMP_shmem_init+0x128>)
 800ce8e:	4b33      	ldr	r3, [pc, #204]	; (800cf5c <OPENAMP_shmem_init+0x12c>)
 800ce90:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800ce98:	4a31      	ldr	r2, [pc, #196]	; (800cf60 <OPENAMP_shmem_init+0x130>)
 800ce9a:	4b2f      	ldr	r3, [pc, #188]	; (800cf58 <OPENAMP_shmem_init+0x128>)
 800ce9c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800ce9e:	461a      	mov	r2, r3
 800cea0:	2300      	movs	r3, #0
 800cea2:	9302      	str	r3, [sp, #8]
 800cea4:	2300      	movs	r3, #0
 800cea6:	9301      	str	r3, [sp, #4]
 800cea8:	f04f 33ff 	mov.w	r3, #4294967295
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	4a2a      	ldr	r2, [pc, #168]	; (800cf5c <OPENAMP_shmem_init+0x12c>)
 800ceb2:	4929      	ldr	r1, [pc, #164]	; (800cf58 <OPENAMP_shmem_init+0x128>)
 800ceb4:	f7fc ff95 	bl	8009de2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7ff ff9b 	bl	800cdf8 <metal_device_io_region>
 800cec2:	4603      	mov	r3, r0
 800cec4:	4a27      	ldr	r2, [pc, #156]	; (800cf64 <OPENAMP_shmem_init+0x134>)
 800cec6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800cec8:	4b26      	ldr	r3, [pc, #152]	; (800cf64 <OPENAMP_shmem_init+0x134>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <OPENAMP_shmem_init+0xa6>
    return -1;
 800ced0:	f04f 33ff 	mov.w	r3, #4294967295
 800ced4:	e034      	b.n	800cf40 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800ced6:	f107 0208 	add.w	r2, r7, #8
 800ceda:	f107 030c 	add.w	r3, r7, #12
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f91d 	bl	800d120 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4a1f      	ldr	r2, [pc, #124]	; (800cf68 <OPENAMP_shmem_init+0x138>)
 800ceea:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800ceec:	4b1e      	ldr	r3, [pc, #120]	; (800cf68 <OPENAMP_shmem_init+0x138>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800cef4:	f04f 33ff 	mov.w	r3, #4294967295
 800cef8:	e022      	b.n	800cf40 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cf00:	4b19      	ldr	r3, [pc, #100]	; (800cf68 <OPENAMP_shmem_init+0x138>)
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	4b18      	ldr	r3, [pc, #96]	; (800cf68 <OPENAMP_shmem_init+0x138>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	461c      	mov	r4, r3
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	9302      	str	r3, [sp, #8]
 800cf10:	2300      	movs	r3, #0
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	f04f 33ff 	mov.w	r3, #4294967295
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	4623      	mov	r3, r4
 800cf1c:	f7fc ff61 	bl	8009de2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2101      	movs	r1, #1
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff ff67 	bl	800cdf8 <metal_device_io_region>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4a0f      	ldr	r2, [pc, #60]	; (800cf6c <OPENAMP_shmem_init+0x13c>)
 800cf2e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800cf30:	4b0e      	ldr	r3, [pc, #56]	; (800cf6c <OPENAMP_shmem_init+0x13c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d102      	bne.n	800cf3e <OPENAMP_shmem_init+0x10e>
    return -1;
 800cf38:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3c:	e000      	b.n	800cf40 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3724      	adds	r7, #36	; 0x24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd90      	pop	{r4, r7, pc}
 800cf48:	08014c6c 	.word	0x08014c6c
 800cf4c:	2400a050 	.word	0x2400a050
 800cf50:	08014c58 	.word	0x08014c58
 800cf54:	08014c64 	.word	0x08014c64
 800cf58:	38000400 	.word	0x38000400
 800cf5c:	2400a444 	.word	0x2400a444
 800cf60:	38010000 	.word	0x38010000
 800cf64:	2400a3b4 	.word	0x2400a3b4
 800cf68:	2400a3bc 	.word	0x2400a3bc
 800cf6c:	2400a3b8 	.word	0x2400a3b8

0800cf70 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800cf70:	b590      	push	{r4, r7, lr}
 800cf72:	b08b      	sub	sp, #44	; 0x2c
 800cf74:	af04      	add	r7, sp, #16
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
  int status = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800cf86:	f7ff fed1 	bl	800cd2c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff ff50 	bl	800ce30 <OPENAMP_shmem_init>
 800cf90:	60f8      	str	r0, [r7, #12]
  if(status)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	e06a      	b.n	800d072 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	4b37      	ldr	r3, [pc, #220]	; (800d07c <MX_OPENAMP_Init+0x10c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f103 0218 	add.w	r2, r3, #24
 800cfa6:	4b36      	ldr	r3, [pc, #216]	; (800d080 <MX_OPENAMP_Init+0x110>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2100      	movs	r1, #0
 800cfac:	9102      	str	r1, [sp, #8]
 800cfae:	4935      	ldr	r1, [pc, #212]	; (800d084 <MX_OPENAMP_Init+0x114>)
 800cfb0:	9101      	str	r1, [sp, #4]
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	9100      	str	r1, [sp, #0]
 800cfb6:	21ff      	movs	r1, #255	; 0xff
 800cfb8:	f7fd fb34 	bl	800a624 <rproc_virtio_create_vdev>
 800cfbc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800cfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc8:	e053      	b.n	800d072 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800cfca:	6938      	ldr	r0, [r7, #16]
 800cfcc:	f7fd fc45 	bl	800a85a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800cfd0:	4b2a      	ldr	r3, [pc, #168]	; (800d07c <MX_OPENAMP_Init+0x10c>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	3334      	adds	r3, #52	; 0x34
 800cfd6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800cfe0:	461c      	mov	r4, r3
 800cfe2:	4b29      	ldr	r3, [pc, #164]	; (800d088 <MX_OPENAMP_Init+0x118>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	6892      	ldr	r2, [r2, #8]
 800cfea:	6979      	ldr	r1, [r7, #20]
 800cfec:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800cfee:	9102      	str	r1, [sp, #8]
 800cff0:	9201      	str	r2, [sp, #4]
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	4623      	mov	r3, r4
 800cff6:	4602      	mov	r2, r0
 800cff8:	2100      	movs	r1, #0
 800cffa:	6938      	ldr	r0, [r7, #16]
 800cffc:	f7fd fbc0 	bl	800a780 <rproc_virtio_init_vring>
 800d000:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	e032      	b.n	800d072 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800d00c:	4b1b      	ldr	r3, [pc, #108]	; (800d07c <MX_OPENAMP_Init+0x10c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	3348      	adds	r3, #72	; 0x48
 800d012:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d01c:	461c      	mov	r4, r3
 800d01e:	4b1a      	ldr	r3, [pc, #104]	; (800d088 <MX_OPENAMP_Init+0x118>)
 800d020:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	6892      	ldr	r2, [r2, #8]
 800d026:	6979      	ldr	r1, [r7, #20]
 800d028:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d02a:	9102      	str	r1, [sp, #8]
 800d02c:	9201      	str	r2, [sp, #4]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	4623      	mov	r3, r4
 800d032:	4602      	mov	r2, r0
 800d034:	2101      	movs	r1, #1
 800d036:	6938      	ldr	r0, [r7, #16]
 800d038:	f7fd fba2 	bl	800a780 <rproc_virtio_init_vring>
 800d03c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	e014      	b.n	800d072 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800d048:	4b10      	ldr	r3, [pc, #64]	; (800d08c <MX_OPENAMP_Init+0x11c>)
 800d04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d04e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800d050:	4a0f      	ldr	r2, [pc, #60]	; (800d090 <MX_OPENAMP_Init+0x120>)
 800d052:	4b0e      	ldr	r3, [pc, #56]	; (800d08c <MX_OPENAMP_Init+0x11c>)
 800d054:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800d056:	461a      	mov	r2, r3
 800d058:	480e      	ldr	r0, [pc, #56]	; (800d094 <MX_OPENAMP_Init+0x124>)
 800d05a:	f7fe f86f 	bl	800b13c <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800d05e:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <MX_OPENAMP_Init+0x118>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a0c      	ldr	r2, [pc, #48]	; (800d094 <MX_OPENAMP_Init+0x124>)
 800d064:	9200      	str	r2, [sp, #0]
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	6939      	ldr	r1, [r7, #16]
 800d06a:	480b      	ldr	r0, [pc, #44]	; (800d098 <MX_OPENAMP_Init+0x128>)
 800d06c:	f7fe fad6 	bl	800b61c <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	bd90      	pop	{r4, r7, pc}
 800d07a:	bf00      	nop
 800d07c:	2400a3bc 	.word	0x2400a3bc
 800d080:	2400a3b8 	.word	0x2400a3b8
 800d084:	0800cda9 	.word	0x0800cda9
 800d088:	2400a3b4 	.word	0x2400a3b4
 800d08c:	38000400 	.word	0x38000400
 800d090:	38010000 	.word	0x38010000
 800d094:	2400a3c0 	.word	0x2400a3c0
 800d098:	2400a3cc 	.word	0x2400a3cc

0800d09c <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b08a      	sub	sp, #40	; 0x28
 800d0a0:	af04      	add	r7, sp, #16
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
 800d0a8:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	9302      	str	r3, [sp, #8]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	4904      	ldr	r1, [pc, #16]	; (800d0d4 <OPENAMP_create_endpoint+0x38>)
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7fd fe56 	bl	800ad74 <rpmsg_create_ept>
 800d0c8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800d0ca:	697b      	ldr	r3, [r7, #20]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	2400a3cc 	.word	0x2400a3cc

0800d0d8 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800d0dc:	4b03      	ldr	r3, [pc, #12]	; (800d0ec <OPENAMP_check_for_message+0x14>)
 800d0de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7ff fe47 	bl	800cd74 <MAILBOX_Poll>
}
 800d0e6:	bf00      	nop
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	2400a3cc 	.word	0x2400a3cc

0800d0f0 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800d0f8:	e004      	b.n	800d104 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800d0fa:	4b08      	ldr	r3, [pc, #32]	; (800d11c <OPENAMP_Wait_EndPointready+0x2c>)
 800d0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fe38 	bl	800cd74 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7ff fe60 	bl	800cdca <is_rpmsg_ept_ready>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d0f4      	beq.n	800d0fa <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800d110:	bf00      	nop
 800d112:	bf00      	nop
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	2400a3cc 	.word	0x2400a3cc

0800d120 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800d12c:	228c      	movs	r2, #140	; 0x8c
 800d12e:	2100      	movs	r1, #0
 800d130:	481e      	ldr	r0, [pc, #120]	; (800d1ac <resource_table_init+0x8c>)
 800d132:	f002 fed9 	bl	800fee8 <memset>
	resource_table.num = 1;
 800d136:	4b1d      	ldr	r3, [pc, #116]	; (800d1ac <resource_table_init+0x8c>)
 800d138:	2201      	movs	r2, #1
 800d13a:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800d13c:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <resource_table_init+0x8c>)
 800d13e:	2201      	movs	r2, #1
 800d140:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800d142:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <resource_table_init+0x8c>)
 800d144:	2218      	movs	r2, #24
 800d146:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800d148:	4b19      	ldr	r3, [pc, #100]	; (800d1b0 <resource_table_init+0x90>)
 800d14a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d14e:	4a17      	ldr	r2, [pc, #92]	; (800d1ac <resource_table_init+0x8c>)
 800d150:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800d152:	4b16      	ldr	r3, [pc, #88]	; (800d1ac <resource_table_init+0x8c>)
 800d154:	2204      	movs	r2, #4
 800d156:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800d158:	4b14      	ldr	r3, [pc, #80]	; (800d1ac <resource_table_init+0x8c>)
 800d15a:	2204      	movs	r2, #4
 800d15c:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <resource_table_init+0x8c>)
 800d160:	2200      	movs	r2, #0
 800d162:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800d164:	4a12      	ldr	r2, [pc, #72]	; (800d1b0 <resource_table_init+0x90>)
 800d166:	4b11      	ldr	r3, [pc, #68]	; (800d1ac <resource_table_init+0x8c>)
 800d168:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800d16a:	4b10      	ldr	r3, [pc, #64]	; (800d1ac <resource_table_init+0x8c>)
 800d16c:	2204      	movs	r2, #4
 800d16e:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800d170:	4b0e      	ldr	r3, [pc, #56]	; (800d1ac <resource_table_init+0x8c>)
 800d172:	2204      	movs	r2, #4
 800d174:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800d176:	4b0d      	ldr	r3, [pc, #52]	; (800d1ac <resource_table_init+0x8c>)
 800d178:	2201      	movs	r2, #1
 800d17a:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800d17c:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <resource_table_init+0x8c>)
 800d17e:	2203      	movs	r2, #3
 800d180:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800d182:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <resource_table_init+0x8c>)
 800d184:	2207      	movs	r2, #7
 800d186:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800d188:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <resource_table_init+0x8c>)
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800d190:	4b06      	ldr	r3, [pc, #24]	; (800d1ac <resource_table_init+0x8c>)
 800d192:	2201      	movs	r2, #1
 800d194:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	228c      	movs	r2, #140	; 0x8c
 800d19a:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	4a03      	ldr	r2, [pc, #12]	; (800d1ac <resource_table_init+0x8c>)
 800d1a0:	601a      	str	r2, [r3, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	38000000 	.word	0x38000000
 800d1b0:	38000400 	.word	0x38000400

0800d1b4 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	f083 0301 	eor.w	r3, r3, #1
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d024      	beq.n	800d214 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 800d1ca:	4b19      	ldr	r3, [pc, #100]	; (800d230 <createEmptyFrame+0x7c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	4818      	ldr	r0, [pc, #96]	; (800d234 <createEmptyFrame+0x80>)
 800d1d4:	f002 fe88 	bl	800fee8 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	e011      	b.n	800d202 <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	4a13      	ldr	r2, [pc, #76]	; (800d234 <createEmptyFrame+0x80>)
 800d1e8:	21ff      	movs	r1, #255	; 0xff
 800d1ea:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	4a0f      	ldr	r2, [pc, #60]	; (800d234 <createEmptyFrame+0x80>)
 800d1f8:	21ff      	movs	r1, #255	; 0xff
 800d1fa:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	3301      	adds	r3, #1
 800d200:	60fb      	str	r3, [r7, #12]
 800d202:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <createEmptyFrame+0x7c>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 800d20a:	085a      	lsrs	r2, r3, #1
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d8e5      	bhi.n	800d1de <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 800d212:	e009      	b.n	800d228 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d006      	beq.n	800d228 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <createEmptyFrame+0x7c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	21ff      	movs	r1, #255	; 0xff
 800d222:	4804      	ldr	r0, [pc, #16]	; (800d234 <createEmptyFrame+0x80>)
 800d224:	f002 fe60 	bl	800fee8 <memset>
}
 800d228:	bf00      	nop
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	2400a0cc 	.word	0x2400a0cc
 800d234:	24000050 	.word	0x24000050

0800d238 <displayNextFrame>:

void displayNextFrame(void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 800d23c:	f7f4 ff02 	bl	8002044 <HAL_GetTick>
 800d240:	4602      	mov	r2, r0
 800d242:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <displayNextFrame+0x34>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	2b1e      	cmp	r3, #30
 800d24a:	d90d      	bls.n	800d268 <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 800d24c:	4b08      	ldr	r3, [pc, #32]	; (800d270 <displayNextFrame+0x38>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	b29a      	uxth	r2, r3
 800d252:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d256:	4907      	ldr	r1, [pc, #28]	; (800d274 <displayNextFrame+0x3c>)
 800d258:	4807      	ldr	r0, [pc, #28]	; (800d278 <displayNextFrame+0x40>)
 800d25a:	f7f8 fdfd 	bl	8005e58 <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 800d25e:	f7f4 fef1 	bl	8002044 <HAL_GetTick>
 800d262:	4603      	mov	r3, r0
 800d264:	4a01      	ldr	r2, [pc, #4]	; (800d26c <displayNextFrame+0x34>)
 800d266:	6013      	str	r3, [r2, #0]
	}
}
 800d268:	bf00      	nop
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	2400a3ac 	.word	0x2400a3ac
 800d270:	2400a0cc 	.word	0x2400a0cc
 800d274:	24000050 	.word	0x24000050
 800d278:	2400a5bc 	.word	0x2400a5bc
 800d27c:	00000000 	.word	0x00000000

0800d280 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 800d280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d282:	b08f      	sub	sp, #60	; 0x3c
 800d284:	af04      	add	r7, sp, #16
 800d286:	4603      	mov	r3, r0
 800d288:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 800d290:	2300      	movs	r3, #0
 800d292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 800d2a8:	4b13      	ldr	r3, [pc, #76]	; (800d2f8 <updateUint16Item+0x78>)
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00f      	beq.n	800d2d0 <updateUint16Item+0x50>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800d2b6:	230c      	movs	r3, #12
 800d2b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800d2bc:	230e      	movs	r3, #14
 800d2be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800d2c2:	237c      	movs	r3, #124	; 0x7c
 800d2c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2ce:	e00e      	b.n	800d2ee <updateUint16Item+0x6e>
	}
	else
	{
		MenuRectangleStartX = HorizontalMenuRectangleStartX;
 800d2d0:	2318      	movs	r3, #24
 800d2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = HorizontalMenuRectangleStartY;
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = HorizontalMenuRectangleHeight;
 800d2dc:	230e      	movs	r3, #14
 800d2de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = HorizontalMenuRectangleWidth;
 800d2e2:	2372      	movs	r3, #114	; 0x72
 800d2e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = HorizontalDisplayCenterWidth;
 800d2e8:	2350      	movs	r3, #80	; 0x50
 800d2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	61fb      	str	r3, [r7, #28]
 800d2f2:	f001 baf3 	b.w	800e8dc <updateUint16Item+0x165c>
 800d2f6:	bf00      	nop
 800d2f8:	2400004c 	.word	0x2400004c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	dc58      	bgt.n	800d3b4 <updateUint16Item+0x134>
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d155      	bne.n	800d3b4 <updateUint16Item+0x134>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d30c:	b298      	uxth	r0, r3
 800d30e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d312:	b29a      	uxth	r2, r3
 800d314:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d318:	b299      	uxth	r1, r3
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	fb11 f303 	smulbb	r3, r1, r3
 800d322:	b29b      	uxth	r3, r3
 800d324:	4413      	add	r3, r2
 800d326:	b29c      	uxth	r4, r3
 800d328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d332:	b29b      	uxth	r3, r3
 800d334:	4413      	add	r3, r2
 800d336:	b29d      	uxth	r5, r3
 800d338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d342:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d348:	b29b      	uxth	r3, r3
 800d34a:	fb11 f303 	smulbb	r3, r1, r3
 800d34e:	b29b      	uxth	r3, r3
 800d350:	4413      	add	r3, r2
 800d352:	b29b      	uxth	r3, r3
 800d354:	2200      	movs	r2, #0
 800d356:	9202      	str	r2, [sp, #8]
 800d358:	2201      	movs	r2, #1
 800d35a:	9201      	str	r2, [sp, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	9200      	str	r2, [sp, #0]
 800d360:	462a      	mov	r2, r5
 800d362:	4621      	mov	r1, r4
 800d364:	f7fb fd0c 	bl	8008d80 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800d368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d36c:	b29c      	uxth	r4, r3
 800d36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d372:	b29a      	uxth	r2, r3
 800d374:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d378:	b299      	uxth	r1, r3
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	fb11 f303 	smulbb	r3, r1, r3
 800d382:	b29b      	uxth	r3, r3
 800d384:	4413      	add	r3, r2
 800d386:	b29b      	uxth	r3, r3
 800d388:	3301      	adds	r3, #1
 800d38a:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	3301      	adds	r3, #1
 800d390:	011b      	lsls	r3, r3, #4
 800d392:	4a9f      	ldr	r2, [pc, #636]	; (800d610 <updateUint16Item+0x390>)
 800d394:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800d396:	499f      	ldr	r1, [pc, #636]	; (800d614 <updateUint16Item+0x394>)
 800d398:	ab02      	add	r3, sp, #8
 800d39a:	c903      	ldmia	r1, {r0, r1}
 800d39c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f7fe feea 	bl	800c188 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	f340 87ed 	ble.w	800e396 <updateUint16Item+0x1116>
 800d3bc:	4b94      	ldr	r3, [pc, #592]	; (800d610 <updateUint16Item+0x390>)
 800d3be:	7bdb      	ldrb	r3, [r3, #15]
 800d3c0:	3b02      	subs	r3, #2
 800d3c2:	69fa      	ldr	r2, [r7, #28]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	f280 87e6 	bge.w	800e396 <updateUint16Item+0x1116>
		{
			if (howToDraw == FULL)
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d168      	bne.n	800d4a2 <updateUint16Item+0x222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3d4:	b298      	uxth	r0, r3
 800d3d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d3e0:	b299      	uxth	r1, r3
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	fb11 f303 	smulbb	r3, r1, r3
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	4413      	add	r3, r2
 800d3ee:	b29c      	uxth	r4, r3
 800d3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3fa:	085b      	lsrs	r3, r3, #1
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	4413      	add	r3, r2
 800d402:	b29d      	uxth	r5, r3
 800d404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d408:	b29a      	uxth	r2, r3
 800d40a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d40e:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d414:	b29b      	uxth	r3, r3
 800d416:	fb11 f303 	smulbb	r3, r1, r3
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	4413      	add	r3, r2
 800d41e:	b29b      	uxth	r3, r3
 800d420:	2200      	movs	r2, #0
 800d422:	9202      	str	r2, [sp, #8]
 800d424:	2201      	movs	r2, #1
 800d426:	9201      	str	r2, [sp, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	9200      	str	r2, [sp, #0]
 800d42c:	462a      	mov	r2, r5
 800d42e:	4621      	mov	r1, r4
 800d430:	f7fb fca6 	bl	8008d80 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800d434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d438:	b29a      	uxth	r2, r3
 800d43a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d43e:	085b      	lsrs	r3, r3, #1
 800d440:	b2db      	uxtb	r3, r3
 800d442:	b29b      	uxth	r3, r3
 800d444:	4413      	add	r3, r2
 800d446:	b298      	uxth	r0, r3
 800d448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d452:	b299      	uxth	r1, r3
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	b29b      	uxth	r3, r3
 800d458:	fb11 f303 	smulbb	r3, r1, r3
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	4413      	add	r3, r2
 800d460:	b29c      	uxth	r4, r3
 800d462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d466:	b29a      	uxth	r2, r3
 800d468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	4413      	add	r3, r2
 800d470:	b29d      	uxth	r5, r3
 800d472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d476:	b29a      	uxth	r2, r3
 800d478:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d47c:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800d482:	b29b      	uxth	r3, r3
 800d484:	fb11 f303 	smulbb	r3, r1, r3
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4413      	add	r3, r2
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	2200      	movs	r2, #0
 800d490:	9202      	str	r2, [sp, #8]
 800d492:	2201      	movs	r2, #1
 800d494:	9201      	str	r2, [sp, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	9200      	str	r2, [sp, #0]
 800d49a:	462a      	mov	r2, r5
 800d49c:	4621      	mov	r1, r4
 800d49e:	f7fb fc6f 	bl	8008d80 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	f040 83b6 	bne.w	800dc16 <updateUint16Item+0x996>
			{
				char localString[8] = "";
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 800d4b2:	4b57      	ldr	r3, [pc, #348]	; (800d610 <updateUint16Item+0x390>)
 800d4b4:	891b      	ldrh	r3, [r3, #8]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f107 0314 	add.w	r3, r7, #20
 800d4bc:	4956      	ldr	r1, [pc, #344]	; (800d618 <updateUint16Item+0x398>)
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f003 fe3c 	bl	801113c <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 800d4c4:	4b55      	ldr	r3, [pc, #340]	; (800d61c <updateUint16Item+0x39c>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	f040 81cd 	bne.w	800d868 <updateUint16Item+0x5e8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800d4ce:	79fb      	ldrb	r3, [r7, #7]
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d003      	beq.n	800d4dc <updateUint16Item+0x25c>
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	f040 80a2 	bne.w	800d620 <updateUint16Item+0x3a0>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	b298      	uxth	r0, r3
 800d4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d4f0:	b299      	uxth	r1, r3
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	fb11 f303 	smulbb	r3, r1, r3
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	4413      	add	r3, r2
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	3301      	adds	r3, #1
 800d502:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	3301      	adds	r3, #1
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	4a41      	ldr	r2, [pc, #260]	; (800d610 <updateUint16Item+0x390>)
 800d50c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d50e:	2300      	movs	r3, #0
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	4b3e      	ldr	r3, [pc, #248]	; (800d614 <updateUint16Item+0x394>)
 800d51a:	f7fb fd47 	bl	8008fac <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d51e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d522:	b29a      	uxth	r2, r3
 800d524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d528:	085b      	lsrs	r3, r3, #1
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	4413      	add	r3, r2
 800d530:	b29b      	uxth	r3, r3
 800d532:	3301      	adds	r3, #1
 800d534:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d540:	b299      	uxth	r1, r3
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	b29b      	uxth	r3, r3
 800d546:	fb11 f303 	smulbb	r3, r1, r3
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4413      	add	r3, r2
 800d54e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d550:	3301      	adds	r3, #1
 800d552:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800d554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d558:	b29a      	uxth	r2, r3
 800d55a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d55e:	085b      	lsrs	r3, r3, #1
 800d560:	b2db      	uxtb	r3, r3
 800d562:	b29b      	uxth	r3, r3
 800d564:	4413      	add	r3, r2
 800d566:	b29c      	uxth	r4, r3
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	3301      	adds	r3, #1
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	4a28      	ldr	r2, [pc, #160]	; (800d610 <updateUint16Item+0x390>)
 800d570:	4413      	add	r3, r2
 800d572:	4618      	mov	r0, r3
 800d574:	f7f2 febe 	bl	80002f4 <strlen>
 800d578:	4603      	mov	r3, r0
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	4b25      	ldr	r3, [pc, #148]	; (800d614 <updateUint16Item+0x394>)
 800d57e:	889b      	ldrh	r3, [r3, #4]
 800d580:	fb12 f303 	smulbb	r3, r2, r3
 800d584:	b29b      	uxth	r3, r3
 800d586:	4423      	add	r3, r4
 800d588:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d58a:	3301      	adds	r3, #1
 800d58c:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800d58e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d592:	b29a      	uxth	r2, r3
 800d594:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d598:	b299      	uxth	r1, r3
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	fb11 f303 	smulbb	r3, r1, r3
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4413      	add	r3, r2
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <updateUint16Item+0x394>)
 800d5aa:	88db      	ldrh	r3, [r3, #6]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5b8:	9200      	str	r2, [sp, #0]
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	4631      	mov	r1, r6
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f7fb fa64 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d5ce:	085b      	lsrs	r3, r3, #1
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	4413      	add	r3, r2
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	3301      	adds	r3, #1
 800d5da:	b298      	uxth	r0, r3
 800d5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d5e6:	b299      	uxth	r1, r3
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	fb11 f303 	smulbb	r3, r1, r3
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4413      	add	r3, r2
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	b299      	uxth	r1, r3
 800d5fa:	f107 0214 	add.w	r2, r7, #20
 800d5fe:	2300      	movs	r3, #0
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	4b02      	ldr	r3, [pc, #8]	; (800d614 <updateUint16Item+0x394>)
 800d60a:	f7fb fccf 	bl	8008fac <Paint_DrawString_EN>
 800d60e:	e302      	b.n	800dc16 <updateUint16Item+0x996>
 800d610:	2400ae0c 	.word	0x2400ae0c
 800d614:	24000010 	.word	0x24000010
 800d618:	08014c80 	.word	0x08014c80
 800d61c:	2400a5ac 	.word	0x2400a5ac
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	2b01      	cmp	r3, #1
 800d624:	f040 808c 	bne.w	800d740 <updateUint16Item+0x4c0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	3301      	adds	r3, #1
 800d630:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d636:	b29a      	uxth	r2, r3
 800d638:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d63c:	b299      	uxth	r1, r3
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	b29b      	uxth	r3, r3
 800d642:	fb11 f303 	smulbb	r3, r1, r3
 800d646:	b29b      	uxth	r3, r3
 800d648:	4413      	add	r3, r2
 800d64a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d64c:	3301      	adds	r3, #1
 800d64e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800d650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d654:	b29c      	uxth	r4, r3
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	3301      	adds	r3, #1
 800d65a:	011b      	lsls	r3, r3, #4
 800d65c:	4a80      	ldr	r2, [pc, #512]	; (800d860 <updateUint16Item+0x5e0>)
 800d65e:	4413      	add	r3, r2
 800d660:	4618      	mov	r0, r3
 800d662:	f7f2 fe47 	bl	80002f4 <strlen>
 800d666:	4603      	mov	r3, r0
 800d668:	b29a      	uxth	r2, r3
 800d66a:	4b7e      	ldr	r3, [pc, #504]	; (800d864 <updateUint16Item+0x5e4>)
 800d66c:	889b      	ldrh	r3, [r3, #4]
 800d66e:	fb12 f303 	smulbb	r3, r2, r3
 800d672:	b29b      	uxth	r3, r3
 800d674:	4423      	add	r3, r4
 800d676:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d678:	3301      	adds	r3, #1
 800d67a:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800d67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d680:	b29a      	uxth	r2, r3
 800d682:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d686:	b299      	uxth	r1, r3
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	fb11 f303 	smulbb	r3, r1, r3
 800d690:	b29b      	uxth	r3, r3
 800d692:	4413      	add	r3, r2
 800d694:	b29a      	uxth	r2, r3
 800d696:	4b73      	ldr	r3, [pc, #460]	; (800d864 <updateUint16Item+0x5e4>)
 800d698:	88db      	ldrh	r3, [r3, #6]
 800d69a:	4413      	add	r3, r2
 800d69c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d69e:	3301      	adds	r3, #1
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6a6:	9200      	str	r2, [sp, #0]
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	f7fb f9ed 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d6b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	b298      	uxth	r0, r3
 800d6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d6c6:	b299      	uxth	r1, r3
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	fb11 f303 	smulbb	r3, r1, r3
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	4413      	add	r3, r2
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	011b      	lsls	r3, r3, #4
 800d6e0:	4a5f      	ldr	r2, [pc, #380]	; (800d860 <updateUint16Item+0x5e0>)
 800d6e2:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9301      	str	r3, [sp, #4]
 800d6e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	4b5d      	ldr	r3, [pc, #372]	; (800d864 <updateUint16Item+0x5e4>)
 800d6f0:	f7fb fc5c 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6fe:	085b      	lsrs	r3, r3, #1
 800d700:	b2db      	uxtb	r3, r3
 800d702:	b29b      	uxth	r3, r3
 800d704:	4413      	add	r3, r2
 800d706:	b29b      	uxth	r3, r3
 800d708:	3301      	adds	r3, #1
 800d70a:	b298      	uxth	r0, r3
 800d70c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d710:	b29a      	uxth	r2, r3
 800d712:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d716:	b299      	uxth	r1, r3
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	fb11 f303 	smulbb	r3, r1, r3
 800d720:	b29b      	uxth	r3, r3
 800d722:	4413      	add	r3, r2
 800d724:	b29b      	uxth	r3, r3
 800d726:	3301      	adds	r3, #1
 800d728:	b299      	uxth	r1, r3
 800d72a:	f107 0214 	add.w	r2, r7, #20
 800d72e:	2300      	movs	r3, #0
 800d730:	9301      	str	r3, [sp, #4]
 800d732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	4b4a      	ldr	r3, [pc, #296]	; (800d864 <updateUint16Item+0x5e4>)
 800d73a:	f7fb fc37 	bl	8008fac <Paint_DrawString_EN>
 800d73e:	e26a      	b.n	800dc16 <updateUint16Item+0x996>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800d740:	79fb      	ldrb	r3, [r7, #7]
 800d742:	2b00      	cmp	r3, #0
 800d744:	f040 8267 	bne.w	800dc16 <updateUint16Item+0x996>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	3301      	adds	r3, #1
 800d750:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d752:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d756:	b29a      	uxth	r2, r3
 800d758:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d75c:	b299      	uxth	r1, r3
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	b29b      	uxth	r3, r3
 800d762:	fb11 f303 	smulbb	r3, r1, r3
 800d766:	b29b      	uxth	r3, r3
 800d768:	4413      	add	r3, r2
 800d76a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d76c:	3301      	adds	r3, #1
 800d76e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800d770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d774:	b29c      	uxth	r4, r3
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	3301      	adds	r3, #1
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	4a38      	ldr	r2, [pc, #224]	; (800d860 <updateUint16Item+0x5e0>)
 800d77e:	4413      	add	r3, r2
 800d780:	4618      	mov	r0, r3
 800d782:	f7f2 fdb7 	bl	80002f4 <strlen>
 800d786:	4603      	mov	r3, r0
 800d788:	b29a      	uxth	r2, r3
 800d78a:	4b36      	ldr	r3, [pc, #216]	; (800d864 <updateUint16Item+0x5e4>)
 800d78c:	889b      	ldrh	r3, [r3, #4]
 800d78e:	fb12 f303 	smulbb	r3, r2, r3
 800d792:	b29b      	uxth	r3, r3
 800d794:	4423      	add	r3, r4
 800d796:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d798:	3301      	adds	r3, #1
 800d79a:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800d79c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d7a6:	b299      	uxth	r1, r3
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	fb11 f303 	smulbb	r3, r1, r3
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	4b2b      	ldr	r3, [pc, #172]	; (800d864 <updateUint16Item+0x5e4>)
 800d7b8:	88db      	ldrh	r3, [r3, #6]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d7be:	3301      	adds	r3, #1
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7c6:	9200      	str	r2, [sp, #0]
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f7fb f95d 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	3301      	adds	r3, #1
 800d7da:	b298      	uxth	r0, r3
 800d7dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d7e6:	b299      	uxth	r1, r3
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	fb11 f303 	smulbb	r3, r1, r3
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	4413      	add	r3, r2
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	4a17      	ldr	r2, [pc, #92]	; (800d860 <updateUint16Item+0x5e0>)
 800d802:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d804:	2300      	movs	r3, #0
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	4b15      	ldr	r3, [pc, #84]	; (800d864 <updateUint16Item+0x5e4>)
 800d810:	f7fb fbcc 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d818:	b29a      	uxth	r2, r3
 800d81a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d81e:	085b      	lsrs	r3, r3, #1
 800d820:	b2db      	uxtb	r3, r3
 800d822:	b29b      	uxth	r3, r3
 800d824:	4413      	add	r3, r2
 800d826:	b29b      	uxth	r3, r3
 800d828:	3301      	adds	r3, #1
 800d82a:	b298      	uxth	r0, r3
 800d82c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d830:	b29a      	uxth	r2, r3
 800d832:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d836:	b299      	uxth	r1, r3
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	fb11 f303 	smulbb	r3, r1, r3
 800d840:	b29b      	uxth	r3, r3
 800d842:	4413      	add	r3, r2
 800d844:	b29b      	uxth	r3, r3
 800d846:	3301      	adds	r3, #1
 800d848:	b299      	uxth	r1, r3
 800d84a:	f107 0214 	add.w	r2, r7, #20
 800d84e:	2300      	movs	r3, #0
 800d850:	9301      	str	r3, [sp, #4]
 800d852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	4b02      	ldr	r3, [pc, #8]	; (800d864 <updateUint16Item+0x5e4>)
 800d85a:	f7fb fba7 	bl	8008fac <Paint_DrawString_EN>
 800d85e:	e1da      	b.n	800dc16 <updateUint16Item+0x996>
 800d860:	2400ae0c 	.word	0x2400ae0c
 800d864:	24000010 	.word	0x24000010
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 800d868:	4ba1      	ldr	r3, [pc, #644]	; (800daf0 <updateUint16Item+0x870>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	2b0b      	cmp	r3, #11
 800d86e:	f040 8147 	bne.w	800db00 <updateUint16Item+0x880>
				{
					if (howToDraw == RIGHT)
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	2b04      	cmp	r3, #4
 800d876:	f040 808c 	bne.w	800d992 <updateUint16Item+0x712>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d87a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d87e:	b29b      	uxth	r3, r3
 800d880:	3301      	adds	r3, #1
 800d882:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d888:	b29a      	uxth	r2, r3
 800d88a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d88e:	b299      	uxth	r1, r3
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	b29b      	uxth	r3, r3
 800d894:	fb11 f303 	smulbb	r3, r1, r3
 800d898:	b29b      	uxth	r3, r3
 800d89a:	4413      	add	r3, r2
 800d89c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d89e:	3301      	adds	r3, #1
 800d8a0:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800d8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8a6:	b29c      	uxth	r4, r3
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	011b      	lsls	r3, r3, #4
 800d8ae:	4a91      	ldr	r2, [pc, #580]	; (800daf4 <updateUint16Item+0x874>)
 800d8b0:	4413      	add	r3, r2
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7f2 fd1e 	bl	80002f4 <strlen>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	4b8e      	ldr	r3, [pc, #568]	; (800daf8 <updateUint16Item+0x878>)
 800d8be:	889b      	ldrh	r3, [r3, #4]
 800d8c0:	fb12 f303 	smulbb	r3, r2, r3
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	4423      	add	r3, r4
 800d8c8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800d8ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d8d8:	b299      	uxth	r1, r3
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	fb11 f303 	smulbb	r3, r1, r3
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4413      	add	r3, r2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	4b83      	ldr	r3, [pc, #524]	; (800daf8 <updateUint16Item+0x878>)
 800d8ea:	88db      	ldrh	r3, [r3, #6]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8f8:	9200      	str	r2, [sp, #0]
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4628      	mov	r0, r5
 800d900:	f7fb f8c4 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d908:	b29b      	uxth	r3, r3
 800d90a:	3301      	adds	r3, #1
 800d90c:	b298      	uxth	r0, r3
 800d90e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d912:	b29a      	uxth	r2, r3
 800d914:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d918:	b299      	uxth	r1, r3
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	fb11 f303 	smulbb	r3, r1, r3
 800d922:	b29b      	uxth	r3, r3
 800d924:	4413      	add	r3, r2
 800d926:	b29b      	uxth	r3, r3
 800d928:	3301      	adds	r3, #1
 800d92a:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	3301      	adds	r3, #1
 800d930:	011b      	lsls	r3, r3, #4
 800d932:	4a70      	ldr	r2, [pc, #448]	; (800daf4 <updateUint16Item+0x874>)
 800d934:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d936:	2300      	movs	r3, #0
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	4b6d      	ldr	r3, [pc, #436]	; (800daf8 <updateUint16Item+0x878>)
 800d942:	f7fb fb33 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d950:	085b      	lsrs	r3, r3, #1
 800d952:	b2db      	uxtb	r3, r3
 800d954:	b29b      	uxth	r3, r3
 800d956:	4413      	add	r3, r2
 800d958:	b29b      	uxth	r3, r3
 800d95a:	3301      	adds	r3, #1
 800d95c:	b298      	uxth	r0, r3
 800d95e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d962:	b29a      	uxth	r2, r3
 800d964:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d968:	b299      	uxth	r1, r3
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	fb11 f303 	smulbb	r3, r1, r3
 800d972:	b29b      	uxth	r3, r3
 800d974:	4413      	add	r3, r2
 800d976:	b29b      	uxth	r3, r3
 800d978:	3301      	adds	r3, #1
 800d97a:	b299      	uxth	r1, r3
 800d97c:	f107 0214 	add.w	r2, r7, #20
 800d980:	2300      	movs	r3, #0
 800d982:	9301      	str	r3, [sp, #4]
 800d984:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	4b5b      	ldr	r3, [pc, #364]	; (800daf8 <updateUint16Item+0x878>)
 800d98c:	f7fb fb0e 	bl	8008fac <Paint_DrawString_EN>
 800d990:	e141      	b.n	800dc16 <updateUint16Item+0x996>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d158      	bne.n	800da4a <updateUint16Item+0x7ca>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 800d998:	4b56      	ldr	r3, [pc, #344]	; (800daf4 <updateUint16Item+0x874>)
 800d99a:	899a      	ldrh	r2, [r3, #12]
 800d99c:	4b55      	ldr	r3, [pc, #340]	; (800daf4 <updateUint16Item+0x874>)
 800d99e:	891b      	ldrh	r3, [r3, #8]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d21f      	bcs.n	800d9e4 <updateUint16Item+0x764>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 800d9a4:	4b53      	ldr	r3, [pc, #332]	; (800daf4 <updateUint16Item+0x874>)
 800d9a6:	891b      	ldrh	r3, [r3, #8]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	4b52      	ldr	r3, [pc, #328]	; (800daf4 <updateUint16Item+0x874>)
 800d9ac:	899b      	ldrh	r3, [r3, #12]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	ee07 3a90 	vmov	s15, r3
 800d9b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9b8:	4b4e      	ldr	r3, [pc, #312]	; (800daf4 <updateUint16Item+0x874>)
 800d9ba:	889b      	ldrh	r3, [r3, #4]
 800d9bc:	ee06 3a90 	vmov	s13, r3
 800d9c0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d9c4:	eeb0 1b46 	vmov.f64	d1, d6
 800d9c8:	eeb0 0b47 	vmov.f64	d0, d7
 800d9cc:	f006 fe58 	bl	8014680 <fmax>
 800d9d0:	eeb0 7b40 	vmov.f64	d7, d0
 800d9d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d9d8:	ee17 3a90 	vmov	r3, s15
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	4b45      	ldr	r3, [pc, #276]	; (800daf4 <updateUint16Item+0x874>)
 800d9e0:	811a      	strh	r2, [r3, #8]
 800d9e2:	e003      	b.n	800d9ec <updateUint16Item+0x76c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 800d9e4:	4b43      	ldr	r3, [pc, #268]	; (800daf4 <updateUint16Item+0x874>)
 800d9e6:	889a      	ldrh	r2, [r3, #4]
 800d9e8:	4b42      	ldr	r3, [pc, #264]	; (800daf4 <updateUint16Item+0x874>)
 800d9ea:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 800d9ec:	4b41      	ldr	r3, [pc, #260]	; (800daf4 <updateUint16Item+0x874>)
 800d9ee:	891b      	ldrh	r3, [r3, #8]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	f107 0314 	add.w	r3, r7, #20
 800d9f6:	4941      	ldr	r1, [pc, #260]	; (800dafc <updateUint16Item+0x87c>)
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f003 fb9f 	bl	801113c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d9fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da02:	b29a      	uxth	r2, r3
 800da04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da08:	085b      	lsrs	r3, r3, #1
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	4413      	add	r3, r2
 800da10:	b29b      	uxth	r3, r3
 800da12:	3301      	adds	r3, #1
 800da14:	b298      	uxth	r0, r3
 800da16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800da20:	b299      	uxth	r1, r3
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	b29b      	uxth	r3, r3
 800da26:	fb11 f303 	smulbb	r3, r1, r3
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	4413      	add	r3, r2
 800da2e:	b29b      	uxth	r3, r3
 800da30:	3301      	adds	r3, #1
 800da32:	b299      	uxth	r1, r3
 800da34:	f107 0214 	add.w	r2, r7, #20
 800da38:	2300      	movs	r3, #0
 800da3a:	9301      	str	r3, [sp, #4]
 800da3c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	4b2d      	ldr	r3, [pc, #180]	; (800daf8 <updateUint16Item+0x878>)
 800da44:	f7fb fab2 	bl	8008fac <Paint_DrawString_EN>
 800da48:	e0e5      	b.n	800dc16 <updateUint16Item+0x996>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f040 80e2 	bne.w	800dc16 <updateUint16Item+0x996>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 800da52:	4b28      	ldr	r3, [pc, #160]	; (800daf4 <updateUint16Item+0x874>)
 800da54:	891b      	ldrh	r3, [r3, #8]
 800da56:	461a      	mov	r2, r3
 800da58:	4b26      	ldr	r3, [pc, #152]	; (800daf4 <updateUint16Item+0x874>)
 800da5a:	899b      	ldrh	r3, [r3, #12]
 800da5c:	4413      	add	r3, r2
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da66:	4b23      	ldr	r3, [pc, #140]	; (800daf4 <updateUint16Item+0x874>)
 800da68:	88db      	ldrh	r3, [r3, #6]
 800da6a:	ee06 3a90 	vmov	s13, r3
 800da6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800da72:	eeb0 1b46 	vmov.f64	d1, d6
 800da76:	eeb0 0b47 	vmov.f64	d0, d7
 800da7a:	f006 fe1c 	bl	80146b6 <fmin>
 800da7e:	eeb0 7b40 	vmov.f64	d7, d0
 800da82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800da86:	ee17 3a90 	vmov	r3, s15
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	4b19      	ldr	r3, [pc, #100]	; (800daf4 <updateUint16Item+0x874>)
 800da8e:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 800da90:	4b18      	ldr	r3, [pc, #96]	; (800daf4 <updateUint16Item+0x874>)
 800da92:	891b      	ldrh	r3, [r3, #8]
 800da94:	461a      	mov	r2, r3
 800da96:	f107 0314 	add.w	r3, r7, #20
 800da9a:	4918      	ldr	r1, [pc, #96]	; (800dafc <updateUint16Item+0x87c>)
 800da9c:	4618      	mov	r0, r3
 800da9e:	f003 fb4d 	bl	801113c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800daa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800daac:	085b      	lsrs	r3, r3, #1
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4413      	add	r3, r2
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	3301      	adds	r3, #1
 800dab8:	b298      	uxth	r0, r3
 800daba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dac4:	b299      	uxth	r1, r3
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	fb11 f303 	smulbb	r3, r1, r3
 800dace:	b29b      	uxth	r3, r3
 800dad0:	4413      	add	r3, r2
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	3301      	adds	r3, #1
 800dad6:	b299      	uxth	r1, r3
 800dad8:	f107 0214 	add.w	r2, r7, #20
 800dadc:	2300      	movs	r3, #0
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	f24c 6318 	movw	r3, #50712	; 0xc618
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <updateUint16Item+0x878>)
 800dae8:	f7fb fa60 	bl	8008fac <Paint_DrawString_EN>
 800daec:	e093      	b.n	800dc16 <updateUint16Item+0x996>
 800daee:	bf00      	nop
 800daf0:	2400a5ac 	.word	0x2400a5ac
 800daf4:	2400ae0c 	.word	0x2400ae0c
 800daf8:	24000010 	.word	0x24000010
 800dafc:	08014c80 	.word	0x08014c80
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800db00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db04:	b29b      	uxth	r3, r3
 800db06:	3301      	adds	r3, #1
 800db08:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800db0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db0e:	b29a      	uxth	r2, r3
 800db10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db14:	b299      	uxth	r1, r3
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	b29b      	uxth	r3, r3
 800db1a:	fb11 f303 	smulbb	r3, r1, r3
 800db1e:	b29b      	uxth	r3, r3
 800db20:	4413      	add	r3, r2
 800db22:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800db24:	3301      	adds	r3, #1
 800db26:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800db28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db2c:	b29c      	uxth	r4, r3
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	3301      	adds	r3, #1
 800db32:	011b      	lsls	r3, r3, #4
 800db34:	4a93      	ldr	r2, [pc, #588]	; (800dd84 <updateUint16Item+0xb04>)
 800db36:	4413      	add	r3, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f7f2 fbdb 	bl	80002f4 <strlen>
 800db3e:	4603      	mov	r3, r0
 800db40:	b29a      	uxth	r2, r3
 800db42:	4b91      	ldr	r3, [pc, #580]	; (800dd88 <updateUint16Item+0xb08>)
 800db44:	889b      	ldrh	r3, [r3, #4]
 800db46:	fb12 f303 	smulbb	r3, r2, r3
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	4423      	add	r3, r4
 800db4e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800db50:	3301      	adds	r3, #1
 800db52:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800db54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db58:	b29a      	uxth	r2, r3
 800db5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db5e:	b299      	uxth	r1, r3
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	b29b      	uxth	r3, r3
 800db64:	fb11 f303 	smulbb	r3, r1, r3
 800db68:	b29b      	uxth	r3, r3
 800db6a:	4413      	add	r3, r2
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	4b86      	ldr	r3, [pc, #536]	; (800dd88 <updateUint16Item+0xb08>)
 800db70:	88db      	ldrh	r3, [r3, #6]
 800db72:	4413      	add	r3, r2
 800db74:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800db76:	3301      	adds	r3, #1
 800db78:	b29b      	uxth	r3, r3
 800db7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db7e:	9200      	str	r2, [sp, #0]
 800db80:	4602      	mov	r2, r0
 800db82:	4631      	mov	r1, r6
 800db84:	4628      	mov	r0, r5
 800db86:	f7fa ff81 	bl	8008a8c <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800db8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db8e:	b29b      	uxth	r3, r3
 800db90:	3301      	adds	r3, #1
 800db92:	b298      	uxth	r0, r3
 800db94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db98:	b29a      	uxth	r2, r3
 800db9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db9e:	b299      	uxth	r1, r3
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	fb11 f303 	smulbb	r3, r1, r3
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	4413      	add	r3, r2
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	3301      	adds	r3, #1
 800dbb0:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	011b      	lsls	r3, r3, #4
 800dbb8:	4a72      	ldr	r2, [pc, #456]	; (800dd84 <updateUint16Item+0xb04>)
 800dbba:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9301      	str	r3, [sp, #4]
 800dbc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	4b70      	ldr	r3, [pc, #448]	; (800dd88 <updateUint16Item+0xb08>)
 800dbc8:	f7fb f9f0 	bl	8008fac <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dbd6:	085b      	lsrs	r3, r3, #1
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	4413      	add	r3, r2
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	b298      	uxth	r0, r3
 800dbe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dbee:	b299      	uxth	r1, r3
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	fb11 f303 	smulbb	r3, r1, r3
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	4413      	add	r3, r2
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	3301      	adds	r3, #1
 800dc00:	b299      	uxth	r1, r3
 800dc02:	f107 0214 	add.w	r2, r7, #20
 800dc06:	2300      	movs	r3, #0
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	4b5d      	ldr	r3, [pc, #372]	; (800dd88 <updateUint16Item+0xb08>)
 800dc12:	f7fb f9cb 	bl	8008fac <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	f040 83bc 	bne.w	800e396 <updateUint16Item+0x1116>
			{
				char localString[8] = "";
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60fb      	str	r3, [r7, #12]
 800dc22:	2300      	movs	r3, #0
 800dc24:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800dc26:	4b57      	ldr	r3, [pc, #348]	; (800dd84 <updateUint16Item+0xb04>)
 800dc28:	899b      	ldrh	r3, [r3, #12]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f107 030c 	add.w	r3, r7, #12
 800dc30:	4956      	ldr	r1, [pc, #344]	; (800dd8c <updateUint16Item+0xb0c>)
 800dc32:	4618      	mov	r0, r3
 800dc34:	f003 fa82 	bl	801113c <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 800dc38:	4b55      	ldr	r3, [pc, #340]	; (800dd90 <updateUint16Item+0xb10>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	f040 81cd 	bne.w	800dfdc <updateUint16Item+0xd5c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	2b03      	cmp	r3, #3
 800dc46:	d003      	beq.n	800dc50 <updateUint16Item+0x9d0>
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	f040 80a2 	bne.w	800dd94 <updateUint16Item+0xb14>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	3301      	adds	r3, #1
 800dc58:	b298      	uxth	r0, r3
 800dc5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dc64:	b299      	uxth	r1, r3
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	fb11 f303 	smulbb	r3, r1, r3
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	4413      	add	r3, r2
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	3301      	adds	r3, #1
 800dc76:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	011b      	lsls	r3, r3, #4
 800dc7e:	4a41      	ldr	r2, [pc, #260]	; (800dd84 <updateUint16Item+0xb04>)
 800dc80:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dc82:	2300      	movs	r3, #0
 800dc84:	9301      	str	r3, [sp, #4]
 800dc86:	f24c 6318 	movw	r3, #50712	; 0xc618
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	4b3e      	ldr	r3, [pc, #248]	; (800dd88 <updateUint16Item+0xb08>)
 800dc8e:	f7fb f98d 	bl	8008fac <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800dc92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc9c:	085b      	lsrs	r3, r3, #1
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	4413      	add	r3, r2
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	3301      	adds	r3, #1
 800dca8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dcaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dcb4:	b299      	uxth	r1, r3
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	fb11 f303 	smulbb	r3, r1, r3
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	4413      	add	r3, r2
 800dcc2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dcc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcd2:	085b      	lsrs	r3, r3, #1
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4413      	add	r3, r2
 800dcda:	b29c      	uxth	r4, r3
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	3301      	adds	r3, #1
 800dce0:	011b      	lsls	r3, r3, #4
 800dce2:	4a28      	ldr	r2, [pc, #160]	; (800dd84 <updateUint16Item+0xb04>)
 800dce4:	4413      	add	r3, r2
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f2 fb04 	bl	80002f4 <strlen>
 800dcec:	4603      	mov	r3, r0
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	4b25      	ldr	r3, [pc, #148]	; (800dd88 <updateUint16Item+0xb08>)
 800dcf2:	889b      	ldrh	r3, [r3, #4]
 800dcf4:	fb12 f303 	smulbb	r3, r2, r3
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	4423      	add	r3, r4
 800dcfc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800dcfe:	3301      	adds	r3, #1
 800dd00:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800dd02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd0c:	b299      	uxth	r1, r3
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	fb11 f303 	smulbb	r3, r1, r3
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	4413      	add	r3, r2
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	4b1a      	ldr	r3, [pc, #104]	; (800dd88 <updateUint16Item+0xb08>)
 800dd1e:	88db      	ldrh	r3, [r3, #6]
 800dd20:	4413      	add	r3, r2
 800dd22:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800dd24:	3301      	adds	r3, #1
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd2c:	9200      	str	r2, [sp, #0]
 800dd2e:	4602      	mov	r2, r0
 800dd30:	4631      	mov	r1, r6
 800dd32:	4628      	mov	r0, r5
 800dd34:	f7fa feaa 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd42:	085b      	lsrs	r3, r3, #1
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	4413      	add	r3, r2
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	b298      	uxth	r0, r3
 800dd50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd5a:	b299      	uxth	r1, r3
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	fb11 f303 	smulbb	r3, r1, r3
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	4413      	add	r3, r2
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	b299      	uxth	r1, r3
 800dd6e:	f107 020c 	add.w	r2, r7, #12
 800dd72:	2300      	movs	r3, #0
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <updateUint16Item+0xb08>)
 800dd7e:	f7fb f915 	bl	8008fac <Paint_DrawString_EN>
 800dd82:	e308      	b.n	800e396 <updateUint16Item+0x1116>
 800dd84:	2400ae0c 	.word	0x2400ae0c
 800dd88:	24000010 	.word	0x24000010
 800dd8c:	08014c80 	.word	0x08014c80
 800dd90:	2400a5ac 	.word	0x2400a5ac
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800dd94:	79fb      	ldrb	r3, [r7, #7]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	f040 808c 	bne.w	800deb4 <updateUint16Item+0xc34>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dd9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	3301      	adds	r3, #1
 800dda4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dda6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ddb0:	b299      	uxth	r1, r3
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	fb11 f303 	smulbb	r3, r1, r3
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	4413      	add	r3, r2
 800ddbe:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800ddc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddc8:	b29c      	uxth	r4, r3
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	011b      	lsls	r3, r3, #4
 800ddd0:	4a80      	ldr	r2, [pc, #512]	; (800dfd4 <updateUint16Item+0xd54>)
 800ddd2:	4413      	add	r3, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f2 fa8d 	bl	80002f4 <strlen>
 800ddda:	4603      	mov	r3, r0
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	4b7e      	ldr	r3, [pc, #504]	; (800dfd8 <updateUint16Item+0xd58>)
 800dde0:	889b      	ldrh	r3, [r3, #4]
 800dde2:	fb12 f303 	smulbb	r3, r2, r3
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	4423      	add	r3, r4
 800ddea:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ddec:	3301      	adds	r3, #1
 800ddee:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ddf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ddfa:	b299      	uxth	r1, r3
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	fb11 f303 	smulbb	r3, r1, r3
 800de04:	b29b      	uxth	r3, r3
 800de06:	4413      	add	r3, r2
 800de08:	b29a      	uxth	r2, r3
 800de0a:	4b73      	ldr	r3, [pc, #460]	; (800dfd8 <updateUint16Item+0xd58>)
 800de0c:	88db      	ldrh	r3, [r3, #6]
 800de0e:	4413      	add	r3, r2
 800de10:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800de12:	3301      	adds	r3, #1
 800de14:	b29b      	uxth	r3, r3
 800de16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de1a:	9200      	str	r2, [sp, #0]
 800de1c:	4602      	mov	r2, r0
 800de1e:	4631      	mov	r1, r6
 800de20:	4628      	mov	r0, r5
 800de22:	f7fa fe33 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800de26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	3301      	adds	r3, #1
 800de2e:	b298      	uxth	r0, r3
 800de30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de34:	b29a      	uxth	r2, r3
 800de36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800de3a:	b299      	uxth	r1, r3
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	fb11 f303 	smulbb	r3, r1, r3
 800de44:	b29b      	uxth	r3, r3
 800de46:	4413      	add	r3, r2
 800de48:	b29b      	uxth	r3, r3
 800de4a:	3301      	adds	r3, #1
 800de4c:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	3301      	adds	r3, #1
 800de52:	011b      	lsls	r3, r3, #4
 800de54:	4a5f      	ldr	r2, [pc, #380]	; (800dfd4 <updateUint16Item+0xd54>)
 800de56:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800de58:	2300      	movs	r3, #0
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	4b5d      	ldr	r3, [pc, #372]	; (800dfd8 <updateUint16Item+0xd58>)
 800de64:	f7fb f8a2 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800de68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de72:	085b      	lsrs	r3, r3, #1
 800de74:	b2db      	uxtb	r3, r3
 800de76:	b29b      	uxth	r3, r3
 800de78:	4413      	add	r3, r2
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	3301      	adds	r3, #1
 800de7e:	b298      	uxth	r0, r3
 800de80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de84:	b29a      	uxth	r2, r3
 800de86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800de8a:	b299      	uxth	r1, r3
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	fb11 f303 	smulbb	r3, r1, r3
 800de94:	b29b      	uxth	r3, r3
 800de96:	4413      	add	r3, r2
 800de98:	b29b      	uxth	r3, r3
 800de9a:	3301      	adds	r3, #1
 800de9c:	b299      	uxth	r1, r3
 800de9e:	f107 020c 	add.w	r2, r7, #12
 800dea2:	2300      	movs	r3, #0
 800dea4:	9301      	str	r3, [sp, #4]
 800dea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	4b4a      	ldr	r3, [pc, #296]	; (800dfd8 <updateUint16Item+0xd58>)
 800deae:	f7fb f87d 	bl	8008fac <Paint_DrawString_EN>
 800deb2:	e270      	b.n	800e396 <updateUint16Item+0x1116>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f040 826d 	bne.w	800e396 <updateUint16Item+0x1116>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800debc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	3301      	adds	r3, #1
 800dec4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deca:	b29a      	uxth	r2, r3
 800decc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ded0:	b299      	uxth	r1, r3
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	fb11 f303 	smulbb	r3, r1, r3
 800deda:	b29b      	uxth	r3, r3
 800dedc:	4413      	add	r3, r2
 800dede:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dee0:	3301      	adds	r3, #1
 800dee2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dee8:	b29c      	uxth	r4, r3
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	3301      	adds	r3, #1
 800deee:	011b      	lsls	r3, r3, #4
 800def0:	4a38      	ldr	r2, [pc, #224]	; (800dfd4 <updateUint16Item+0xd54>)
 800def2:	4413      	add	r3, r2
 800def4:	4618      	mov	r0, r3
 800def6:	f7f2 f9fd 	bl	80002f4 <strlen>
 800defa:	4603      	mov	r3, r0
 800defc:	b29a      	uxth	r2, r3
 800defe:	4b36      	ldr	r3, [pc, #216]	; (800dfd8 <updateUint16Item+0xd58>)
 800df00:	889b      	ldrh	r3, [r3, #4]
 800df02:	fb12 f303 	smulbb	r3, r2, r3
 800df06:	b29b      	uxth	r3, r3
 800df08:	4423      	add	r3, r4
 800df0a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800df0c:	3301      	adds	r3, #1
 800df0e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800df10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df14:	b29a      	uxth	r2, r3
 800df16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800df1a:	b299      	uxth	r1, r3
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	b29b      	uxth	r3, r3
 800df20:	fb11 f303 	smulbb	r3, r1, r3
 800df24:	b29b      	uxth	r3, r3
 800df26:	4413      	add	r3, r2
 800df28:	b29a      	uxth	r2, r3
 800df2a:	4b2b      	ldr	r3, [pc, #172]	; (800dfd8 <updateUint16Item+0xd58>)
 800df2c:	88db      	ldrh	r3, [r3, #6]
 800df2e:	4413      	add	r3, r2
 800df30:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800df32:	3301      	adds	r3, #1
 800df34:	b29b      	uxth	r3, r3
 800df36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df3a:	9200      	str	r2, [sp, #0]
 800df3c:	4602      	mov	r2, r0
 800df3e:	4631      	mov	r1, r6
 800df40:	4628      	mov	r0, r5
 800df42:	f7fa fda3 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800df46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	3301      	adds	r3, #1
 800df4e:	b298      	uxth	r0, r3
 800df50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df54:	b29a      	uxth	r2, r3
 800df56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800df5a:	b299      	uxth	r1, r3
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	b29b      	uxth	r3, r3
 800df60:	fb11 f303 	smulbb	r3, r1, r3
 800df64:	b29b      	uxth	r3, r3
 800df66:	4413      	add	r3, r2
 800df68:	b29b      	uxth	r3, r3
 800df6a:	3301      	adds	r3, #1
 800df6c:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	3301      	adds	r3, #1
 800df72:	011b      	lsls	r3, r3, #4
 800df74:	4a17      	ldr	r2, [pc, #92]	; (800dfd4 <updateUint16Item+0xd54>)
 800df76:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800df78:	2300      	movs	r3, #0
 800df7a:	9301      	str	r3, [sp, #4]
 800df7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	4b15      	ldr	r3, [pc, #84]	; (800dfd8 <updateUint16Item+0xd58>)
 800df84:	f7fb f812 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df92:	085b      	lsrs	r3, r3, #1
 800df94:	b2db      	uxtb	r3, r3
 800df96:	b29b      	uxth	r3, r3
 800df98:	4413      	add	r3, r2
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	3301      	adds	r3, #1
 800df9e:	b298      	uxth	r0, r3
 800dfa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dfaa:	b299      	uxth	r1, r3
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	fb11 f303 	smulbb	r3, r1, r3
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	4413      	add	r3, r2
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	3301      	adds	r3, #1
 800dfbc:	b299      	uxth	r1, r3
 800dfbe:	f107 020c 	add.w	r2, r7, #12
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	4b02      	ldr	r3, [pc, #8]	; (800dfd8 <updateUint16Item+0xd58>)
 800dfce:	f7fa ffed 	bl	8008fac <Paint_DrawString_EN>
 800dfd2:	e1e0      	b.n	800e396 <updateUint16Item+0x1116>
 800dfd4:	2400ae0c 	.word	0x2400ae0c
 800dfd8:	24000010 	.word	0x24000010
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 800dfdc:	4ba2      	ldr	r3, [pc, #648]	; (800e268 <updateUint16Item+0xfe8>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b0c      	cmp	r3, #12
 800dfe2:	f040 814d 	bne.w	800e280 <updateUint16Item+0x1000>
				{
					if (howToDraw == RIGHT)
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	2b04      	cmp	r3, #4
 800dfea:	f040 808c 	bne.w	800e106 <updateUint16Item+0xe86>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dfee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	3301      	adds	r3, #1
 800dff6:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e002:	b299      	uxth	r1, r3
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	b29b      	uxth	r3, r3
 800e008:	fb11 f303 	smulbb	r3, r1, r3
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4413      	add	r3, r2
 800e010:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e012:	3301      	adds	r3, #1
 800e014:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e01a:	b29c      	uxth	r4, r3
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	3301      	adds	r3, #1
 800e020:	011b      	lsls	r3, r3, #4
 800e022:	4a92      	ldr	r2, [pc, #584]	; (800e26c <updateUint16Item+0xfec>)
 800e024:	4413      	add	r3, r2
 800e026:	4618      	mov	r0, r3
 800e028:	f7f2 f964 	bl	80002f4 <strlen>
 800e02c:	4603      	mov	r3, r0
 800e02e:	b29a      	uxth	r2, r3
 800e030:	4b8f      	ldr	r3, [pc, #572]	; (800e270 <updateUint16Item+0xff0>)
 800e032:	889b      	ldrh	r3, [r3, #4]
 800e034:	fb12 f303 	smulbb	r3, r2, r3
 800e038:	b29b      	uxth	r3, r3
 800e03a:	4423      	add	r3, r4
 800e03c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e03e:	3301      	adds	r3, #1
 800e040:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e046:	b29a      	uxth	r2, r3
 800e048:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e04c:	b299      	uxth	r1, r3
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	b29b      	uxth	r3, r3
 800e052:	fb11 f303 	smulbb	r3, r1, r3
 800e056:	b29b      	uxth	r3, r3
 800e058:	4413      	add	r3, r2
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	4b84      	ldr	r3, [pc, #528]	; (800e270 <updateUint16Item+0xff0>)
 800e05e:	88db      	ldrh	r3, [r3, #6]
 800e060:	4413      	add	r3, r2
 800e062:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e064:	3301      	adds	r3, #1
 800e066:	b29b      	uxth	r3, r3
 800e068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e06c:	9200      	str	r2, [sp, #0]
 800e06e:	4602      	mov	r2, r0
 800e070:	4631      	mov	r1, r6
 800e072:	4628      	mov	r0, r5
 800e074:	f7fa fd0a 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	3301      	adds	r3, #1
 800e080:	b298      	uxth	r0, r3
 800e082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e086:	b29a      	uxth	r2, r3
 800e088:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e08c:	b299      	uxth	r1, r3
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	b29b      	uxth	r3, r3
 800e092:	fb11 f303 	smulbb	r3, r1, r3
 800e096:	b29b      	uxth	r3, r3
 800e098:	4413      	add	r3, r2
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	3301      	adds	r3, #1
 800e09e:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	011b      	lsls	r3, r3, #4
 800e0a6:	4a71      	ldr	r2, [pc, #452]	; (800e26c <updateUint16Item+0xfec>)
 800e0a8:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	4b6e      	ldr	r3, [pc, #440]	; (800e270 <updateUint16Item+0xff0>)
 800e0b6:	f7fa ff79 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e0ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0c4:	085b      	lsrs	r3, r3, #1
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	4413      	add	r3, r2
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	b298      	uxth	r0, r3
 800e0d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e0dc:	b299      	uxth	r1, r3
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	fb11 f303 	smulbb	r3, r1, r3
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	4413      	add	r3, r2
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	b299      	uxth	r1, r3
 800e0f0:	f107 020c 	add.w	r2, r7, #12
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	9301      	str	r3, [sp, #4]
 800e0f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	4b5c      	ldr	r3, [pc, #368]	; (800e270 <updateUint16Item+0xff0>)
 800e100:	f7fa ff54 	bl	8008fac <Paint_DrawString_EN>
 800e104:	e147      	b.n	800e396 <updateUint16Item+0x1116>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800e106:	79fb      	ldrb	r3, [r7, #7]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d155      	bne.n	800e1b8 <updateUint16Item+0xf38>
					{
						if (multiplierIndex >= 1)
 800e10c:	4b59      	ldr	r3, [pc, #356]	; (800e274 <updateUint16Item+0xff4>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d017      	beq.n	800e144 <updateUint16Item+0xec4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 800e114:	4b57      	ldr	r3, [pc, #348]	; (800e274 <updateUint16Item+0xff4>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	3b01      	subs	r3, #1
 800e11a:	ee07 3a90 	vmov	s15, r3
 800e11e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e122:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 800e260 <updateUint16Item+0xfe0>
 800e126:	eeb0 0b47 	vmov.f64	d0, d7
 800e12a:	f006 faa9 	bl	8014680 <fmax>
 800e12e:	eeb0 7b40 	vmov.f64	d7, d0
 800e132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e136:	edc7 7a00 	vstr	s15, [r7]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	4b4d      	ldr	r3, [pc, #308]	; (800e274 <updateUint16Item+0xff4>)
 800e140:	701a      	strb	r2, [r3, #0]
 800e142:	e002      	b.n	800e14a <updateUint16Item+0xeca>
						}
						else
						{
							multiplierIndex = 0;
 800e144:	4b4b      	ldr	r3, [pc, #300]	; (800e274 <updateUint16Item+0xff4>)
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 800e14a:	4b4a      	ldr	r3, [pc, #296]	; (800e274 <updateUint16Item+0xff4>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	4b49      	ldr	r3, [pc, #292]	; (800e278 <updateUint16Item+0xff8>)
 800e152:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e156:	4b45      	ldr	r3, [pc, #276]	; (800e26c <updateUint16Item+0xfec>)
 800e158:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e15a:	4b44      	ldr	r3, [pc, #272]	; (800e26c <updateUint16Item+0xfec>)
 800e15c:	899b      	ldrh	r3, [r3, #12]
 800e15e:	461a      	mov	r2, r3
 800e160:	f107 030c 	add.w	r3, r7, #12
 800e164:	4945      	ldr	r1, [pc, #276]	; (800e27c <updateUint16Item+0xffc>)
 800e166:	4618      	mov	r0, r3
 800e168:	f002 ffe8 	bl	801113c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e170:	b29a      	uxth	r2, r3
 800e172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e176:	085b      	lsrs	r3, r3, #1
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	4413      	add	r3, r2
 800e17e:	b29b      	uxth	r3, r3
 800e180:	3301      	adds	r3, #1
 800e182:	b298      	uxth	r0, r3
 800e184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e188:	b29a      	uxth	r2, r3
 800e18a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e18e:	b299      	uxth	r1, r3
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	b29b      	uxth	r3, r3
 800e194:	fb11 f303 	smulbb	r3, r1, r3
 800e198:	b29b      	uxth	r3, r3
 800e19a:	4413      	add	r3, r2
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	3301      	adds	r3, #1
 800e1a0:	b299      	uxth	r1, r3
 800e1a2:	f107 020c 	add.w	r2, r7, #12
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	4b2f      	ldr	r3, [pc, #188]	; (800e270 <updateUint16Item+0xff0>)
 800e1b2:	f7fa fefb 	bl	8008fac <Paint_DrawString_EN>
 800e1b6:	e0ee      	b.n	800e396 <updateUint16Item+0x1116>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800e1b8:	79fb      	ldrb	r3, [r7, #7]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f040 80eb 	bne.w	800e396 <updateUint16Item+0x1116>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 800e1c0:	4b2c      	ldr	r3, [pc, #176]	; (800e274 <updateUint16Item+0xff4>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	ee07 3a90 	vmov	s15, r3
 800e1ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1ce:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800e1d2:	eeb0 0b47 	vmov.f64	d0, d7
 800e1d6:	f006 fa6e 	bl	80146b6 <fmin>
 800e1da:	eeb0 7b40 	vmov.f64	d7, d0
 800e1de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e1e2:	edc7 7a00 	vstr	s15, [r7]
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	4b22      	ldr	r3, [pc, #136]	; (800e274 <updateUint16Item+0xff4>)
 800e1ec:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 800e1ee:	4b21      	ldr	r3, [pc, #132]	; (800e274 <updateUint16Item+0xff4>)
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	4b20      	ldr	r3, [pc, #128]	; (800e278 <updateUint16Item+0xff8>)
 800e1f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e1fa:	4b1c      	ldr	r3, [pc, #112]	; (800e26c <updateUint16Item+0xfec>)
 800e1fc:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e1fe:	4b1b      	ldr	r3, [pc, #108]	; (800e26c <updateUint16Item+0xfec>)
 800e200:	899b      	ldrh	r3, [r3, #12]
 800e202:	461a      	mov	r2, r3
 800e204:	f107 030c 	add.w	r3, r7, #12
 800e208:	491c      	ldr	r1, [pc, #112]	; (800e27c <updateUint16Item+0xffc>)
 800e20a:	4618      	mov	r0, r3
 800e20c:	f002 ff96 	bl	801113c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e214:	b29a      	uxth	r2, r3
 800e216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e21a:	085b      	lsrs	r3, r3, #1
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	b29b      	uxth	r3, r3
 800e220:	4413      	add	r3, r2
 800e222:	b29b      	uxth	r3, r3
 800e224:	3301      	adds	r3, #1
 800e226:	b298      	uxth	r0, r3
 800e228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e232:	b299      	uxth	r1, r3
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	b29b      	uxth	r3, r3
 800e238:	fb11 f303 	smulbb	r3, r1, r3
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	4413      	add	r3, r2
 800e240:	b29b      	uxth	r3, r3
 800e242:	3301      	adds	r3, #1
 800e244:	b299      	uxth	r1, r3
 800e246:	f107 020c 	add.w	r2, r7, #12
 800e24a:	2300      	movs	r3, #0
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	4b06      	ldr	r3, [pc, #24]	; (800e270 <updateUint16Item+0xff0>)
 800e256:	f7fa fea9 	bl	8008fac <Paint_DrawString_EN>
 800e25a:	e09c      	b.n	800e396 <updateUint16Item+0x1116>
 800e25c:	f3af 8000 	nop.w
	...
 800e268:	2400a5ac 	.word	0x2400a5ac
 800e26c:	2400ae0c 	.word	0x2400ae0c
 800e270:	24000010 	.word	0x24000010
 800e274:	2400a0d0 	.word	0x2400a0d0
 800e278:	2400a0d4 	.word	0x2400a0d4
 800e27c:	08014c80 	.word	0x08014c80
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	b29b      	uxth	r3, r3
 800e286:	3301      	adds	r3, #1
 800e288:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e28a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e28e:	b29a      	uxth	r2, r3
 800e290:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e294:	b299      	uxth	r1, r3
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	fb11 f303 	smulbb	r3, r1, r3
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	4413      	add	r3, r2
 800e2a2:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ac:	b29c      	uxth	r4, r3
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	011b      	lsls	r3, r3, #4
 800e2b4:	4a9c      	ldr	r2, [pc, #624]	; (800e528 <updateUint16Item+0x12a8>)
 800e2b6:	4413      	add	r3, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7f2 f81b 	bl	80002f4 <strlen>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	4b9a      	ldr	r3, [pc, #616]	; (800e52c <updateUint16Item+0x12ac>)
 800e2c4:	889b      	ldrh	r3, [r3, #4]
 800e2c6:	fb12 f303 	smulbb	r3, r2, r3
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	4423      	add	r3, r4
 800e2ce:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e2d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e2de:	b299      	uxth	r1, r3
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	fb11 f303 	smulbb	r3, r1, r3
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	4413      	add	r3, r2
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	4b8f      	ldr	r3, [pc, #572]	; (800e52c <updateUint16Item+0x12ac>)
 800e2f0:	88db      	ldrh	r3, [r3, #6]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2fe:	9200      	str	r2, [sp, #0]
 800e300:	4602      	mov	r2, r0
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	f7fa fbc1 	bl	8008a8c <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e30e:	b29b      	uxth	r3, r3
 800e310:	3301      	adds	r3, #1
 800e312:	b298      	uxth	r0, r3
 800e314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e318:	b29a      	uxth	r2, r3
 800e31a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e31e:	b299      	uxth	r1, r3
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	b29b      	uxth	r3, r3
 800e324:	fb11 f303 	smulbb	r3, r1, r3
 800e328:	b29b      	uxth	r3, r3
 800e32a:	4413      	add	r3, r2
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	3301      	adds	r3, #1
 800e330:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	3301      	adds	r3, #1
 800e336:	011b      	lsls	r3, r3, #4
 800e338:	4a7b      	ldr	r2, [pc, #492]	; (800e528 <updateUint16Item+0x12a8>)
 800e33a:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e33c:	2300      	movs	r3, #0
 800e33e:	9301      	str	r3, [sp, #4]
 800e340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	4b79      	ldr	r3, [pc, #484]	; (800e52c <updateUint16Item+0x12ac>)
 800e348:	f7fa fe30 	bl	8008fac <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e350:	b29a      	uxth	r2, r3
 800e352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e356:	085b      	lsrs	r3, r3, #1
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	4413      	add	r3, r2
 800e35e:	b29b      	uxth	r3, r3
 800e360:	3301      	adds	r3, #1
 800e362:	b298      	uxth	r0, r3
 800e364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e368:	b29a      	uxth	r2, r3
 800e36a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e36e:	b299      	uxth	r1, r3
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	b29b      	uxth	r3, r3
 800e374:	fb11 f303 	smulbb	r3, r1, r3
 800e378:	b29b      	uxth	r3, r3
 800e37a:	4413      	add	r3, r2
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3301      	adds	r3, #1
 800e380:	b299      	uxth	r1, r3
 800e382:	f107 020c 	add.w	r2, r7, #12
 800e386:	2300      	movs	r3, #0
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	4b66      	ldr	r3, [pc, #408]	; (800e52c <updateUint16Item+0x12ac>)
 800e392:	f7fa fe0b 	bl	8008fac <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 800e396:	4b64      	ldr	r3, [pc, #400]	; (800e528 <updateUint16Item+0x12a8>)
 800e398:	7bdb      	ldrb	r3, [r3, #15]
 800e39a:	3b02      	subs	r3, #2
 800e39c:	69fa      	ldr	r2, [r7, #28]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	f2c0 8299 	blt.w	800e8d6 <updateUint16Item+0x1656>
 800e3a4:	4b60      	ldr	r3, [pc, #384]	; (800e528 <updateUint16Item+0x12a8>)
 800e3a6:	7bdb      	ldrb	r3, [r3, #15]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	f280 8292 	bge.w	800e8d6 <updateUint16Item+0x1656>
		{
			if (howToDraw == FULL)
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	f040 8084 	bne.w	800e4c2 <updateUint16Item+0x1242>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3be:	b298      	uxth	r0, r3
 800e3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e3ca:	b299      	uxth	r1, r3
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	fb11 f303 	smulbb	r3, r1, r3
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	4413      	add	r3, r2
 800e3d8:	b29c      	uxth	r4, r3
 800e3da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	4413      	add	r3, r2
 800e3e8:	b29d      	uxth	r5, r3
 800e3ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e3f4:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	fb11 f303 	smulbb	r3, r1, r3
 800e400:	b29b      	uxth	r3, r3
 800e402:	4413      	add	r3, r2
 800e404:	b29b      	uxth	r3, r3
 800e406:	2200      	movs	r2, #0
 800e408:	9202      	str	r2, [sp, #8]
 800e40a:	2201      	movs	r2, #1
 800e40c:	9201      	str	r2, [sp, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	9200      	str	r2, [sp, #0]
 800e412:	462a      	mov	r2, r5
 800e414:	4621      	mov	r1, r4
 800e416:	f7fa fcb3 	bl	8008d80 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 800e41a:	4b45      	ldr	r3, [pc, #276]	; (800e530 <updateUint16Item+0x12b0>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	461a      	mov	r2, r3
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	4293      	cmp	r3, r2
 800e424:	d126      	bne.n	800e474 <updateUint16Item+0x11f4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e42a:	b29c      	uxth	r4, r3
 800e42c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e430:	b29a      	uxth	r2, r3
 800e432:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e436:	b299      	uxth	r1, r3
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	fb11 f303 	smulbb	r3, r1, r3
 800e440:	b29b      	uxth	r3, r3
 800e442:	4413      	add	r3, r2
 800e444:	b29b      	uxth	r3, r3
 800e446:	3301      	adds	r3, #1
 800e448:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	3301      	adds	r3, #1
 800e44e:	011b      	lsls	r3, r3, #4
 800e450:	4a35      	ldr	r2, [pc, #212]	; (800e528 <updateUint16Item+0x12a8>)
 800e452:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e454:	4935      	ldr	r1, [pc, #212]	; (800e52c <updateUint16Item+0x12ac>)
 800e456:	ab02      	add	r3, sp, #8
 800e458:	c903      	ldmia	r1, {r0, r1}
 800e45a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e45e:	2310      	movs	r3, #16
 800e460:	9301      	str	r3, [sp, #4]
 800e462:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	2300      	movs	r3, #0
 800e46a:	4629      	mov	r1, r5
 800e46c:	4620      	mov	r0, r4
 800e46e:	f7fd fe8b 	bl	800c188 <centeredString>
 800e472:	e230      	b.n	800e8d6 <updateUint16Item+0x1656>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e478:	b29c      	uxth	r4, r3
 800e47a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e47e:	b29a      	uxth	r2, r3
 800e480:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e484:	b299      	uxth	r1, r3
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	b29b      	uxth	r3, r3
 800e48a:	fb11 f303 	smulbb	r3, r1, r3
 800e48e:	b29b      	uxth	r3, r3
 800e490:	4413      	add	r3, r2
 800e492:	b29b      	uxth	r3, r3
 800e494:	3301      	adds	r3, #1
 800e496:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	3301      	adds	r3, #1
 800e49c:	011b      	lsls	r3, r3, #4
 800e49e:	4a22      	ldr	r2, [pc, #136]	; (800e528 <updateUint16Item+0x12a8>)
 800e4a0:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e4a2:	4922      	ldr	r1, [pc, #136]	; (800e52c <updateUint16Item+0x12ac>)
 800e4a4:	ab02      	add	r3, sp, #8
 800e4a6:	c903      	ldmia	r1, {r0, r1}
 800e4a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e4ac:	2310      	movs	r3, #16
 800e4ae:	9301      	str	r3, [sp, #4]
 800e4b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f7fd fe64 	bl	800c188 <centeredString>
 800e4c0:	e209      	b.n	800e8d6 <updateUint16Item+0x1656>
				}
			}
			else if (howToDraw == DOWN)
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	f040 80d1 	bne.w	800e66c <updateUint16Item+0x13ec>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 800e4ca:	4b19      	ldr	r3, [pc, #100]	; (800e530 <updateUint16Item+0x12b0>)
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b04      	cmp	r3, #4
 800e4d0:	d130      	bne.n	800e534 <updateUint16Item+0x12b4>
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	2b04      	cmp	r3, #4
 800e4d6:	d12d      	bne.n	800e534 <updateUint16Item+0x12b4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e4d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4dc:	b29c      	uxth	r4, r3
 800e4de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e4e8:	b299      	uxth	r1, r3
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	fb11 f303 	smulbb	r3, r1, r3
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	4413      	add	r3, r2
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	3301      	adds	r3, #1
 800e500:	011b      	lsls	r3, r3, #4
 800e502:	4a09      	ldr	r2, [pc, #36]	; (800e528 <updateUint16Item+0x12a8>)
 800e504:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e506:	4909      	ldr	r1, [pc, #36]	; (800e52c <updateUint16Item+0x12ac>)
 800e508:	ab02      	add	r3, sp, #8
 800e50a:	c903      	ldmia	r1, {r0, r1}
 800e50c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e510:	2310      	movs	r3, #16
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	4629      	mov	r1, r5
 800e51e:	4620      	mov	r0, r4
 800e520:	f7fd fe32 	bl	800c188 <centeredString>
 800e524:	e1d7      	b.n	800e8d6 <updateUint16Item+0x1656>
 800e526:	bf00      	nop
 800e528:	2400ae0c 	.word	0x2400ae0c
 800e52c:	24000010 	.word	0x24000010
 800e530:	2400a5ac 	.word	0x2400a5ac
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 800e534:	4b90      	ldr	r3, [pc, #576]	; (800e778 <updateUint16Item+0x14f8>)
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b05      	cmp	r3, #5
 800e53a:	f040 81cc 	bne.w	800e8d6 <updateUint16Item+0x1656>
 800e53e:	69fb      	ldr	r3, [r7, #28]
 800e540:	2b05      	cmp	r3, #5
 800e542:	f040 81c8 	bne.w	800e8d6 <updateUint16Item+0x1656>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 800e546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e54a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e54c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e550:	b29a      	uxth	r2, r3
 800e552:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e556:	b299      	uxth	r1, r3
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	fb11 f303 	smulbb	r3, r1, r3
 800e562:	b29b      	uxth	r3, r3
 800e564:	4413      	add	r3, r2
 800e566:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800e568:	3301      	adds	r3, #1
 800e56a:	b29e      	uxth	r6, r3
 800e56c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e570:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	3b01      	subs	r3, #1
 800e576:	3301      	adds	r3, #1
 800e578:	011b      	lsls	r3, r3, #4
 800e57a:	4a80      	ldr	r2, [pc, #512]	; (800e77c <updateUint16Item+0x14fc>)
 800e57c:	4413      	add	r3, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f1 feb8 	bl	80002f4 <strlen>
 800e584:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 800e586:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 800e588:	4b7d      	ldr	r3, [pc, #500]	; (800e780 <updateUint16Item+0x1500>)
 800e58a:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 800e58c:	fb12 f303 	smulbb	r3, r2, r3
 800e590:	b29b      	uxth	r3, r3
 800e592:	4423      	add	r3, r4
 800e594:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 800e596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e5a0:	b299      	uxth	r1, r3
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	fb11 f303 	smulbb	r3, r1, r3
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	4413      	add	r3, r2
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	4b73      	ldr	r3, [pc, #460]	; (800e780 <updateUint16Item+0x1500>)
 800e5b4:	88db      	ldrh	r3, [r3, #6]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5c2:	9200      	str	r2, [sp, #0]
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	f7fa fa5f 	bl	8008a8c <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e5ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5d2:	b29c      	uxth	r4, r3
 800e5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e5de:	b299      	uxth	r1, r3
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	fb11 f303 	smulbb	r3, r1, r3
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	4413      	add	r3, r2
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	011b      	lsls	r3, r3, #4
 800e5fc:	4a5f      	ldr	r2, [pc, #380]	; (800e77c <updateUint16Item+0x14fc>)
 800e5fe:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e600:	495f      	ldr	r1, [pc, #380]	; (800e780 <updateUint16Item+0x1500>)
 800e602:	ab02      	add	r3, sp, #8
 800e604:	c903      	ldmia	r1, {r0, r1}
 800e606:	e883 0003 	stmia.w	r3, {r0, r1}
 800e60a:	2310      	movs	r3, #16
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2300      	movs	r3, #0
 800e616:	4629      	mov	r1, r5
 800e618:	4620      	mov	r0, r4
 800e61a:	f7fd fdb5 	bl	800c188 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e61e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e622:	b29c      	uxth	r4, r3
 800e624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e628:	b29a      	uxth	r2, r3
 800e62a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e62e:	b299      	uxth	r1, r3
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	b29b      	uxth	r3, r3
 800e634:	fb11 f303 	smulbb	r3, r1, r3
 800e638:	b29b      	uxth	r3, r3
 800e63a:	4413      	add	r3, r2
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	3301      	adds	r3, #1
 800e640:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	3301      	adds	r3, #1
 800e646:	011b      	lsls	r3, r3, #4
 800e648:	4a4c      	ldr	r2, [pc, #304]	; (800e77c <updateUint16Item+0x14fc>)
 800e64a:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e64c:	494c      	ldr	r1, [pc, #304]	; (800e780 <updateUint16Item+0x1500>)
 800e64e:	ab02      	add	r3, sp, #8
 800e650:	c903      	ldmia	r1, {r0, r1}
 800e652:	e883 0003 	stmia.w	r3, {r0, r1}
 800e656:	2310      	movs	r3, #16
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	2300      	movs	r3, #0
 800e662:	4629      	mov	r1, r5
 800e664:	4620      	mov	r0, r4
 800e666:	f7fd fd8f 	bl	800c188 <centeredString>
 800e66a:	e134      	b.n	800e8d6 <updateUint16Item+0x1656>
				}
			}
			else if (howToDraw == UP)
 800e66c:	79fb      	ldrb	r3, [r7, #7]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f040 8131 	bne.w	800e8d6 <updateUint16Item+0x1656>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 800e674:	4b40      	ldr	r3, [pc, #256]	; (800e778 <updateUint16Item+0x14f8>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2b03      	cmp	r3, #3
 800e67a:	f040 8083 	bne.w	800e784 <updateUint16Item+0x1504>
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	2b04      	cmp	r3, #4
 800e682:	d17f      	bne.n	800e784 <updateUint16Item+0x1504>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e688:	b29c      	uxth	r4, r3
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	3301      	adds	r3, #1
 800e68e:	011b      	lsls	r3, r3, #4
 800e690:	4a3a      	ldr	r2, [pc, #232]	; (800e77c <updateUint16Item+0x14fc>)
 800e692:	4413      	add	r3, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7f1 fe2d 	bl	80002f4 <strlen>
 800e69a:	4603      	mov	r3, r0
 800e69c:	4a38      	ldr	r2, [pc, #224]	; (800e780 <updateUint16Item+0x1500>)
 800e69e:	8892      	ldrh	r2, [r2, #4]
 800e6a0:	fb02 f303 	mul.w	r3, r2, r3
 800e6a4:	085b      	lsrs	r3, r3, #1
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	1ae3      	subs	r3, r4, r3
 800e6aa:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e6ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e6b6:	b299      	uxth	r1, r3
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	fb11 f303 	smulbb	r3, r1, r3
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	4413      	add	r3, r2
 800e6c4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	b29e      	uxth	r6, r3
 800e6ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6ce:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	011b      	lsls	r3, r3, #4
 800e6d6:	4a29      	ldr	r2, [pc, #164]	; (800e77c <updateUint16Item+0x14fc>)
 800e6d8:	4413      	add	r3, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7f1 fe0a 	bl	80002f4 <strlen>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	4a27      	ldr	r2, [pc, #156]	; (800e780 <updateUint16Item+0x1500>)
 800e6e4:	8892      	ldrh	r2, [r2, #4]
 800e6e6:	fb02 f303 	mul.w	r3, r2, r3
 800e6ea:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	4423      	add	r3, r4
 800e6f0:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e6f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e6fc:	b299      	uxth	r1, r3
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	b29b      	uxth	r3, r3
 800e702:	fb11 f303 	smulbb	r3, r1, r3
 800e706:	b29b      	uxth	r3, r3
 800e708:	4413      	add	r3, r2
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	4b1c      	ldr	r3, [pc, #112]	; (800e780 <updateUint16Item+0x1500>)
 800e70e:	88db      	ldrh	r3, [r3, #6]
 800e710:	4413      	add	r3, r2
 800e712:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e714:	3301      	adds	r3, #1
 800e716:	b29b      	uxth	r3, r3
 800e718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e71c:	9200      	str	r2, [sp, #0]
 800e71e:	4602      	mov	r2, r0
 800e720:	4631      	mov	r1, r6
 800e722:	4628      	mov	r0, r5
 800e724:	f7fa f9b2 	bl	8008a8c <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e72c:	b29c      	uxth	r4, r3
 800e72e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e732:	b29a      	uxth	r2, r3
 800e734:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e738:	b299      	uxth	r1, r3
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	fb11 f303 	smulbb	r3, r1, r3
 800e742:	b29b      	uxth	r3, r3
 800e744:	4413      	add	r3, r2
 800e746:	b29b      	uxth	r3, r3
 800e748:	3301      	adds	r3, #1
 800e74a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	3301      	adds	r3, #1
 800e750:	011b      	lsls	r3, r3, #4
 800e752:	4a0a      	ldr	r2, [pc, #40]	; (800e77c <updateUint16Item+0x14fc>)
 800e754:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e756:	490a      	ldr	r1, [pc, #40]	; (800e780 <updateUint16Item+0x1500>)
 800e758:	ab02      	add	r3, sp, #8
 800e75a:	c903      	ldmia	r1, {r0, r1}
 800e75c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e760:	2310      	movs	r3, #16
 800e762:	9301      	str	r3, [sp, #4]
 800e764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	2300      	movs	r3, #0
 800e76c:	4629      	mov	r1, r5
 800e76e:	4620      	mov	r0, r4
 800e770:	f7fd fd0a 	bl	800c188 <centeredString>
 800e774:	e0af      	b.n	800e8d6 <updateUint16Item+0x1656>
 800e776:	bf00      	nop
 800e778:	2400a5ac 	.word	0x2400a5ac
 800e77c:	2400ae0c 	.word	0x2400ae0c
 800e780:	24000010 	.word	0x24000010
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 800e784:	4b5b      	ldr	r3, [pc, #364]	; (800e8f4 <updateUint16Item+0x1674>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	2b04      	cmp	r3, #4
 800e78a:	f040 80a4 	bne.w	800e8d6 <updateUint16Item+0x1656>
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	2b05      	cmp	r3, #5
 800e792:	f040 80a0 	bne.w	800e8d6 <updateUint16Item+0x1656>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e79a:	b29c      	uxth	r4, r3
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	011b      	lsls	r3, r3, #4
 800e7a2:	4a55      	ldr	r2, [pc, #340]	; (800e8f8 <updateUint16Item+0x1678>)
 800e7a4:	4413      	add	r3, r2
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7f1 fda4 	bl	80002f4 <strlen>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	4a53      	ldr	r2, [pc, #332]	; (800e8fc <updateUint16Item+0x167c>)
 800e7b0:	8892      	ldrh	r2, [r2, #4]
 800e7b2:	fb02 f303 	mul.w	r3, r2, r3
 800e7b6:	085b      	lsrs	r3, r3, #1
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	1ae3      	subs	r3, r4, r3
 800e7bc:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e7be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e7c8:	b299      	uxth	r1, r3
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	fb11 f303 	smulbb	r3, r1, r3
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	4413      	add	r3, r2
 800e7d6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e7d8:	3301      	adds	r3, #1
 800e7da:	b29e      	uxth	r6, r3
 800e7dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7e0:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	4a43      	ldr	r2, [pc, #268]	; (800e8f8 <updateUint16Item+0x1678>)
 800e7ea:	4413      	add	r3, r2
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7f1 fd81 	bl	80002f4 <strlen>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	4a41      	ldr	r2, [pc, #260]	; (800e8fc <updateUint16Item+0x167c>)
 800e7f6:	8892      	ldrh	r2, [r2, #4]
 800e7f8:	fb02 f303 	mul.w	r3, r2, r3
 800e7fc:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	4423      	add	r3, r4
 800e802:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e808:	b29a      	uxth	r2, r3
 800e80a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e80e:	b299      	uxth	r1, r3
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	b29b      	uxth	r3, r3
 800e814:	fb11 f303 	smulbb	r3, r1, r3
 800e818:	b29b      	uxth	r3, r3
 800e81a:	4413      	add	r3, r2
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	4b37      	ldr	r3, [pc, #220]	; (800e8fc <updateUint16Item+0x167c>)
 800e820:	88db      	ldrh	r3, [r3, #6]
 800e822:	4413      	add	r3, r2
 800e824:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800e826:	3301      	adds	r3, #1
 800e828:	b29b      	uxth	r3, r3
 800e82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e82e:	9200      	str	r2, [sp, #0]
 800e830:	4602      	mov	r2, r0
 800e832:	4631      	mov	r1, r6
 800e834:	4628      	mov	r0, r5
 800e836:	f7fa f929 	bl	8008a8c <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e83a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e83e:	b29c      	uxth	r4, r3
 800e840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e844:	b29a      	uxth	r2, r3
 800e846:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e84a:	b299      	uxth	r1, r3
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	fb11 f303 	smulbb	r3, r1, r3
 800e854:	b29b      	uxth	r3, r3
 800e856:	4413      	add	r3, r2
 800e858:	b29b      	uxth	r3, r3
 800e85a:	3301      	adds	r3, #1
 800e85c:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	3301      	adds	r3, #1
 800e862:	011b      	lsls	r3, r3, #4
 800e864:	4a24      	ldr	r2, [pc, #144]	; (800e8f8 <updateUint16Item+0x1678>)
 800e866:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e868:	4924      	ldr	r1, [pc, #144]	; (800e8fc <updateUint16Item+0x167c>)
 800e86a:	ab02      	add	r3, sp, #8
 800e86c:	c903      	ldmia	r1, {r0, r1}
 800e86e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e872:	2310      	movs	r3, #16
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	2300      	movs	r3, #0
 800e87e:	4629      	mov	r1, r5
 800e880:	4620      	mov	r0, r4
 800e882:	f7fd fc81 	bl	800c188 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e88a:	b29c      	uxth	r4, r3
 800e88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e890:	b29a      	uxth	r2, r3
 800e892:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e896:	b299      	uxth	r1, r3
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	3b01      	subs	r3, #1
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	fb11 f303 	smulbb	r3, r1, r3
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	4a10      	ldr	r2, [pc, #64]	; (800e8f8 <updateUint16Item+0x1678>)
 800e8b6:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e8b8:	4910      	ldr	r1, [pc, #64]	; (800e8fc <updateUint16Item+0x167c>)
 800e8ba:	ab02      	add	r3, sp, #8
 800e8bc:	c903      	ldmia	r1, {r0, r1}
 800e8be:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8c2:	2310      	movs	r3, #16
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f7fd fc59 	bl	800c188 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	4b06      	ldr	r3, [pc, #24]	; (800e8f8 <updateUint16Item+0x1678>)
 800e8de:	7bdb      	ldrb	r3, [r3, #15]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	f6fe ad09 	blt.w	800d2fc <updateUint16Item+0x7c>
				}
			}
		}
	}
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	372c      	adds	r7, #44	; 0x2c
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f4:	2400a5ac 	.word	0x2400a5ac
 800e8f8:	2400ae0c 	.word	0x2400ae0c
 800e8fc:	24000010 	.word	0x24000010

0800e900 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 800e900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e902:	b08d      	sub	sp, #52	; 0x34
 800e904:	af04      	add	r7, sp, #16
 800e906:	4603      	mov	r3, r0
 800e908:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 800e912:	2300      	movs	r3, #0
 800e914:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 800e916:	2300      	movs	r3, #0
 800e918:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 800e91e:	4b0e      	ldr	r3, [pc, #56]	; (800e958 <updateStringItem+0x58>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00a      	beq.n	800e93c <updateStringItem+0x3c>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800e926:	2302      	movs	r3, #2
 800e928:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800e92a:	230c      	movs	r3, #12
 800e92c:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800e92e:	230e      	movs	r3, #14
 800e930:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800e932:	237c      	movs	r3, #124	; 0x7c
 800e934:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800e936:	2340      	movs	r3, #64	; 0x40
 800e938:	76fb      	strb	r3, [r7, #27]
 800e93a:	e009      	b.n	800e950 <updateStringItem+0x50>
	}
	else
	{
		MenuRectangleStartX = HorizontalMenuRectangleStartX;
 800e93c:	2318      	movs	r3, #24
 800e93e:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = HorizontalMenuRectangleStartY;
 800e940:	230c      	movs	r3, #12
 800e942:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = HorizontalMenuRectangleHeight;
 800e944:	230e      	movs	r3, #14
 800e946:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = HorizontalMenuRectangleWidth;
 800e948:	2372      	movs	r3, #114	; 0x72
 800e94a:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = HorizontalDisplayCenterWidth;
 800e94c:	2350      	movs	r3, #80	; 0x50
 800e94e:	76fb      	strb	r3, [r7, #27]
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 800e950:	2300      	movs	r3, #0
 800e952:	617b      	str	r3, [r7, #20]
 800e954:	f001 ba22 	b.w	800fd9c <updateStringItem+0x149c>
 800e958:	2400004c 	.word	0x2400004c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2b01      	cmp	r3, #1
 800e960:	dc50      	bgt.n	800ea04 <updateStringItem+0x104>
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	2b02      	cmp	r3, #2
 800e966:	d14d      	bne.n	800ea04 <updateStringItem+0x104>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e968:	7ffb      	ldrb	r3, [r7, #31]
 800e96a:	b298      	uxth	r0, r3
 800e96c:	7fbb      	ldrb	r3, [r7, #30]
 800e96e:	b29a      	uxth	r2, r3
 800e970:	7f7b      	ldrb	r3, [r7, #29]
 800e972:	b299      	uxth	r1, r3
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	b29b      	uxth	r3, r3
 800e978:	fb11 f303 	smulbb	r3, r1, r3
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	4413      	add	r3, r2
 800e980:	b29c      	uxth	r4, r3
 800e982:	7ffb      	ldrb	r3, [r7, #31]
 800e984:	b29a      	uxth	r2, r3
 800e986:	7f3b      	ldrb	r3, [r7, #28]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	4413      	add	r3, r2
 800e98c:	b29d      	uxth	r5, r3
 800e98e:	7fbb      	ldrb	r3, [r7, #30]
 800e990:	b29a      	uxth	r2, r3
 800e992:	7f7b      	ldrb	r3, [r7, #29]
 800e994:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	fb11 f303 	smulbb	r3, r1, r3
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	4413      	add	r3, r2
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	9202      	str	r2, [sp, #8]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	9201      	str	r2, [sp, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	9200      	str	r2, [sp, #0]
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	f7fa f9e3 	bl	8008d80 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e9ba:	7efb      	ldrb	r3, [r7, #27]
 800e9bc:	b29c      	uxth	r4, r3
 800e9be:	7fbb      	ldrb	r3, [r7, #30]
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	7f7b      	ldrb	r3, [r7, #29]
 800e9c4:	b299      	uxth	r1, r3
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	fb11 f303 	smulbb	r3, r1, r3
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	4413      	add	r3, r2
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	011b      	lsls	r3, r3, #4
 800e9dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e9e0:	4a8e      	ldr	r2, [pc, #568]	; (800ec1c <updateStringItem+0x31c>)
 800e9e2:	4413      	add	r3, r2
 800e9e4:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e9e6:	498e      	ldr	r1, [pc, #568]	; (800ec20 <updateStringItem+0x320>)
 800e9e8:	ab02      	add	r3, sp, #8
 800e9ea:	c903      	ldmia	r1, {r0, r1}
 800e9ec:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9f0:	2310      	movs	r3, #16
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7fd fbc2 	bl	800c188 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	f340 873c 	ble.w	800f884 <updateStringItem+0xf84>
 800ea0c:	4b83      	ldr	r3, [pc, #524]	; (800ec1c <updateStringItem+0x31c>)
 800ea0e:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800ea12:	3b02      	subs	r3, #2
 800ea14:	697a      	ldr	r2, [r7, #20]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	f280 8734 	bge.w	800f884 <updateStringItem+0xf84>
		{
			if (howToDraw == FULL)
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d159      	bne.n	800ead6 <updateStringItem+0x1d6>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ea22:	7ffb      	ldrb	r3, [r7, #31]
 800ea24:	b298      	uxth	r0, r3
 800ea26:	7fbb      	ldrb	r3, [r7, #30]
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	7f7b      	ldrb	r3, [r7, #29]
 800ea2c:	b299      	uxth	r1, r3
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	fb11 f303 	smulbb	r3, r1, r3
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	4413      	add	r3, r2
 800ea3a:	b29c      	uxth	r4, r3
 800ea3c:	7ffb      	ldrb	r3, [r7, #31]
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	7f3b      	ldrb	r3, [r7, #28]
 800ea42:	085b      	lsrs	r3, r3, #1
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	4413      	add	r3, r2
 800ea4a:	b29d      	uxth	r5, r3
 800ea4c:	7fbb      	ldrb	r3, [r7, #30]
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	7f7b      	ldrb	r3, [r7, #29]
 800ea52:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	fb11 f303 	smulbb	r3, r1, r3
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	4413      	add	r3, r2
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	2200      	movs	r2, #0
 800ea66:	9202      	str	r2, [sp, #8]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	9201      	str	r2, [sp, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	9200      	str	r2, [sp, #0]
 800ea70:	462a      	mov	r2, r5
 800ea72:	4621      	mov	r1, r4
 800ea74:	f7fa f984 	bl	8008d80 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800ea78:	7ffb      	ldrb	r3, [r7, #31]
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	7f3b      	ldrb	r3, [r7, #28]
 800ea7e:	085b      	lsrs	r3, r3, #1
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	4413      	add	r3, r2
 800ea86:	b298      	uxth	r0, r3
 800ea88:	7fbb      	ldrb	r3, [r7, #30]
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	7f7b      	ldrb	r3, [r7, #29]
 800ea8e:	b299      	uxth	r1, r3
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	fb11 f303 	smulbb	r3, r1, r3
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	4413      	add	r3, r2
 800ea9c:	b29c      	uxth	r4, r3
 800ea9e:	7ffb      	ldrb	r3, [r7, #31]
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	7f3b      	ldrb	r3, [r7, #28]
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	4413      	add	r3, r2
 800eaa8:	b29d      	uxth	r5, r3
 800eaaa:	7fbb      	ldrb	r3, [r7, #30]
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	7f7b      	ldrb	r3, [r7, #29]
 800eab0:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	fb11 f303 	smulbb	r3, r1, r3
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	4413      	add	r3, r2
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	2200      	movs	r2, #0
 800eac4:	9202      	str	r2, [sp, #8]
 800eac6:	2201      	movs	r2, #1
 800eac8:	9201      	str	r2, [sp, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	9200      	str	r2, [sp, #0]
 800eace:	462a      	mov	r2, r5
 800ead0:	4621      	mov	r1, r4
 800ead2:	f7fa f955 	bl	8008d80 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b02      	cmp	r3, #2
 800eada:	f040 8371 	bne.w	800f1c0 <updateStringItem+0x8c0>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 800eade:	4b51      	ldr	r3, [pc, #324]	; (800ec24 <updateStringItem+0x324>)
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	f040 81ba 	bne.w	800ee5c <updateStringItem+0x55c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800eae8:	79fb      	ldrb	r3, [r7, #7]
 800eaea:	2b03      	cmp	r3, #3
 800eaec:	d003      	beq.n	800eaf6 <updateStringItem+0x1f6>
 800eaee:	79fb      	ldrb	r3, [r7, #7]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	f040 8099 	bne.w	800ec28 <updateStringItem+0x328>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eaf6:	7ffb      	ldrb	r3, [r7, #31]
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	3301      	adds	r3, #1
 800eafc:	b298      	uxth	r0, r3
 800eafe:	7fbb      	ldrb	r3, [r7, #30]
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	7f7b      	ldrb	r3, [r7, #29]
 800eb04:	b299      	uxth	r1, r3
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	fb11 f303 	smulbb	r3, r1, r3
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	4413      	add	r3, r2
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	3301      	adds	r3, #1
 800eb16:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	011b      	lsls	r3, r3, #4
 800eb1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800eb20:	4a3e      	ldr	r2, [pc, #248]	; (800ec1c <updateStringItem+0x31c>)
 800eb22:	4413      	add	r3, r2
 800eb24:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eb26:	2300      	movs	r3, #0
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	4b3b      	ldr	r3, [pc, #236]	; (800ec20 <updateStringItem+0x320>)
 800eb32:	f7fa fa3b 	bl	8008fac <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800eb36:	7ffb      	ldrb	r3, [r7, #31]
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	7f3b      	ldrb	r3, [r7, #28]
 800eb3c:	085b      	lsrs	r3, r3, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4413      	add	r3, r2
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	3301      	adds	r3, #1
 800eb48:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eb4a:	7fbb      	ldrb	r3, [r7, #30]
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	7f7b      	ldrb	r3, [r7, #29]
 800eb50:	b299      	uxth	r1, r3
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	fb11 f303 	smulbb	r3, r1, r3
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4413      	add	r3, r2
 800eb5e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800eb60:	3301      	adds	r3, #1
 800eb62:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 800eb64:	7ffb      	ldrb	r3, [r7, #31]
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	7f3b      	ldrb	r3, [r7, #28]
 800eb6a:	085b      	lsrs	r3, r3, #1
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	4413      	add	r3, r2
 800eb72:	b29c      	uxth	r4, r3
 800eb74:	4b29      	ldr	r3, [pc, #164]	; (800ec1c <updateStringItem+0x31c>)
 800eb76:	799b      	ldrb	r3, [r3, #6]
 800eb78:	011b      	lsls	r3, r3, #4
 800eb7a:	3308      	adds	r3, #8
 800eb7c:	4a27      	ldr	r2, [pc, #156]	; (800ec1c <updateStringItem+0x31c>)
 800eb7e:	4413      	add	r3, r2
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7f1 fbb7 	bl	80002f4 <strlen>
 800eb86:	4603      	mov	r3, r0
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	4b25      	ldr	r3, [pc, #148]	; (800ec20 <updateStringItem+0x320>)
 800eb8c:	889b      	ldrh	r3, [r3, #4]
 800eb8e:	fb12 f303 	smulbb	r3, r2, r3
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	4423      	add	r3, r4
 800eb96:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800eb98:	3301      	adds	r3, #1
 800eb9a:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800eb9c:	7fbb      	ldrb	r3, [r7, #30]
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	7f7b      	ldrb	r3, [r7, #29]
 800eba2:	b299      	uxth	r1, r3
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	fb11 f303 	smulbb	r3, r1, r3
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	4413      	add	r3, r2
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	4b1b      	ldr	r3, [pc, #108]	; (800ec20 <updateStringItem+0x320>)
 800ebb4:	88db      	ldrh	r3, [r3, #6]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800ebba:	3301      	adds	r3, #1
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebc2:	9200      	str	r2, [sp, #0]
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f7f9 ff5f 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ebce:	7ffb      	ldrb	r3, [r7, #31]
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	7f3b      	ldrb	r3, [r7, #28]
 800ebd4:	085b      	lsrs	r3, r3, #1
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	4413      	add	r3, r2
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	3301      	adds	r3, #1
 800ebe0:	b298      	uxth	r0, r3
 800ebe2:	7fbb      	ldrb	r3, [r7, #30]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	7f7b      	ldrb	r3, [r7, #29]
 800ebe8:	b299      	uxth	r1, r3
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	fb11 f303 	smulbb	r3, r1, r3
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	4413      	add	r3, r2
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800ebfc:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <updateStringItem+0x31c>)
 800ebfe:	799b      	ldrb	r3, [r3, #6]
 800ec00:	011b      	lsls	r3, r3, #4
 800ec02:	3308      	adds	r3, #8
 800ec04:	4a05      	ldr	r2, [pc, #20]	; (800ec1c <updateStringItem+0x31c>)
 800ec06:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ec08:	2300      	movs	r3, #0
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	4b03      	ldr	r3, [pc, #12]	; (800ec20 <updateStringItem+0x320>)
 800ec14:	f7fa f9ca 	bl	8008fac <Paint_DrawString_EN>
 800ec18:	e2d2      	b.n	800f1c0 <updateStringItem+0x8c0>
 800ec1a:	bf00      	nop
 800ec1c:	2400b020 	.word	0x2400b020
 800ec20:	24000010 	.word	0x24000010
 800ec24:	2400a5ac 	.word	0x2400a5ac
					}
					else if (howToDraw == DOWN)
 800ec28:	79fb      	ldrb	r3, [r7, #7]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	f040 8087 	bne.w	800ed3e <updateStringItem+0x43e>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ec30:	7ffb      	ldrb	r3, [r7, #31]
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	3301      	adds	r3, #1
 800ec36:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ec38:	7fbb      	ldrb	r3, [r7, #30]
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	7f7b      	ldrb	r3, [r7, #29]
 800ec3e:	b299      	uxth	r1, r3
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	fb11 f303 	smulbb	r3, r1, r3
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	4413      	add	r3, r2
 800ec4c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ec4e:	3301      	adds	r3, #1
 800ec50:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800ec52:	7ffb      	ldrb	r3, [r7, #31]
 800ec54:	b29c      	uxth	r4, r3
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	011b      	lsls	r3, r3, #4
 800ec5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ec5e:	4a7d      	ldr	r2, [pc, #500]	; (800ee54 <updateStringItem+0x554>)
 800ec60:	4413      	add	r3, r2
 800ec62:	3304      	adds	r3, #4
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7f1 fb45 	bl	80002f4 <strlen>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	4b7a      	ldr	r3, [pc, #488]	; (800ee58 <updateStringItem+0x558>)
 800ec70:	889b      	ldrh	r3, [r3, #4]
 800ec72:	fb12 f303 	smulbb	r3, r2, r3
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	4423      	add	r3, r4
 800ec7a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ec80:	7fbb      	ldrb	r3, [r7, #30]
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	7f7b      	ldrb	r3, [r7, #29]
 800ec86:	b299      	uxth	r1, r3
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	fb11 f303 	smulbb	r3, r1, r3
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	4413      	add	r3, r2
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	4b70      	ldr	r3, [pc, #448]	; (800ee58 <updateStringItem+0x558>)
 800ec98:	88db      	ldrh	r3, [r3, #6]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ec9e:	3301      	adds	r3, #1
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eca6:	9200      	str	r2, [sp, #0]
 800eca8:	4602      	mov	r2, r0
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4628      	mov	r0, r5
 800ecae:	f7f9 feed 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ecb2:	7ffb      	ldrb	r3, [r7, #31]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	b298      	uxth	r0, r3
 800ecba:	7fbb      	ldrb	r3, [r7, #30]
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	7f7b      	ldrb	r3, [r7, #29]
 800ecc0:	b299      	uxth	r1, r3
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	fb11 f303 	smulbb	r3, r1, r3
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	4413      	add	r3, r2
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	011b      	lsls	r3, r3, #4
 800ecd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ecdc:	4a5d      	ldr	r2, [pc, #372]	; (800ee54 <updateStringItem+0x554>)
 800ecde:	4413      	add	r3, r2
 800ece0:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ece2:	2300      	movs	r3, #0
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	4b5a      	ldr	r3, [pc, #360]	; (800ee58 <updateStringItem+0x558>)
 800ecee:	f7fa f95d 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ecf2:	7ffb      	ldrb	r3, [r7, #31]
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	7f3b      	ldrb	r3, [r7, #28]
 800ecf8:	085b      	lsrs	r3, r3, #1
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	4413      	add	r3, r2
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	3301      	adds	r3, #1
 800ed04:	b298      	uxth	r0, r3
 800ed06:	7fbb      	ldrb	r3, [r7, #30]
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	7f7b      	ldrb	r3, [r7, #29]
 800ed0c:	b299      	uxth	r1, r3
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	fb11 f303 	smulbb	r3, r1, r3
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	4413      	add	r3, r2
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800ed20:	4b4c      	ldr	r3, [pc, #304]	; (800ee54 <updateStringItem+0x554>)
 800ed22:	799b      	ldrb	r3, [r3, #6]
 800ed24:	011b      	lsls	r3, r3, #4
 800ed26:	3308      	adds	r3, #8
 800ed28:	4a4a      	ldr	r2, [pc, #296]	; (800ee54 <updateStringItem+0x554>)
 800ed2a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	4b48      	ldr	r3, [pc, #288]	; (800ee58 <updateStringItem+0x558>)
 800ed38:	f7fa f938 	bl	8008fac <Paint_DrawString_EN>
 800ed3c:	e240      	b.n	800f1c0 <updateStringItem+0x8c0>
					}
					else if (howToDraw == UP)
 800ed3e:	79fb      	ldrb	r3, [r7, #7]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f040 823d 	bne.w	800f1c0 <updateStringItem+0x8c0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ed46:	7ffb      	ldrb	r3, [r7, #31]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ed4e:	7fbb      	ldrb	r3, [r7, #30]
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	7f7b      	ldrb	r3, [r7, #29]
 800ed54:	b299      	uxth	r1, r3
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	fb11 f303 	smulbb	r3, r1, r3
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	4413      	add	r3, r2
 800ed62:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ed64:	3301      	adds	r3, #1
 800ed66:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800ed68:	7ffb      	ldrb	r3, [r7, #31]
 800ed6a:	b29c      	uxth	r4, r3
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	011b      	lsls	r3, r3, #4
 800ed70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ed74:	4a37      	ldr	r2, [pc, #220]	; (800ee54 <updateStringItem+0x554>)
 800ed76:	4413      	add	r3, r2
 800ed78:	3304      	adds	r3, #4
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f1 faba 	bl	80002f4 <strlen>
 800ed80:	4603      	mov	r3, r0
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	4b34      	ldr	r3, [pc, #208]	; (800ee58 <updateStringItem+0x558>)
 800ed86:	889b      	ldrh	r3, [r3, #4]
 800ed88:	fb12 f303 	smulbb	r3, r2, r3
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	4423      	add	r3, r4
 800ed90:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ed92:	3301      	adds	r3, #1
 800ed94:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ed96:	7fbb      	ldrb	r3, [r7, #30]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	7f7b      	ldrb	r3, [r7, #29]
 800ed9c:	b299      	uxth	r1, r3
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	fb11 f303 	smulbb	r3, r1, r3
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	4413      	add	r3, r2
 800edaa:	b29a      	uxth	r2, r3
 800edac:	4b2a      	ldr	r3, [pc, #168]	; (800ee58 <updateStringItem+0x558>)
 800edae:	88db      	ldrh	r3, [r3, #6]
 800edb0:	4413      	add	r3, r2
 800edb2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800edb4:	3301      	adds	r3, #1
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edbc:	9200      	str	r2, [sp, #0]
 800edbe:	4602      	mov	r2, r0
 800edc0:	4631      	mov	r1, r6
 800edc2:	4628      	mov	r0, r5
 800edc4:	f7f9 fe62 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800edc8:	7ffb      	ldrb	r3, [r7, #31]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	3301      	adds	r3, #1
 800edce:	b298      	uxth	r0, r3
 800edd0:	7fbb      	ldrb	r3, [r7, #30]
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	7f7b      	ldrb	r3, [r7, #29]
 800edd6:	b299      	uxth	r1, r3
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	fb11 f303 	smulbb	r3, r1, r3
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	4413      	add	r3, r2
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	3301      	adds	r3, #1
 800ede8:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	011b      	lsls	r3, r3, #4
 800edee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800edf2:	4a18      	ldr	r2, [pc, #96]	; (800ee54 <updateStringItem+0x554>)
 800edf4:	4413      	add	r3, r2
 800edf6:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800edf8:	2300      	movs	r3, #0
 800edfa:	9301      	str	r3, [sp, #4]
 800edfc:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	4b15      	ldr	r3, [pc, #84]	; (800ee58 <updateStringItem+0x558>)
 800ee04:	f7fa f8d2 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ee08:	7ffb      	ldrb	r3, [r7, #31]
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	7f3b      	ldrb	r3, [r7, #28]
 800ee0e:	085b      	lsrs	r3, r3, #1
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	4413      	add	r3, r2
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	3301      	adds	r3, #1
 800ee1a:	b298      	uxth	r0, r3
 800ee1c:	7fbb      	ldrb	r3, [r7, #30]
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	7f7b      	ldrb	r3, [r7, #29]
 800ee22:	b299      	uxth	r1, r3
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	fb11 f303 	smulbb	r3, r1, r3
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	4413      	add	r3, r2
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	3301      	adds	r3, #1
 800ee34:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800ee36:	4b07      	ldr	r3, [pc, #28]	; (800ee54 <updateStringItem+0x554>)
 800ee38:	799b      	ldrb	r3, [r3, #6]
 800ee3a:	011b      	lsls	r3, r3, #4
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	4a05      	ldr	r2, [pc, #20]	; (800ee54 <updateStringItem+0x554>)
 800ee40:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ee42:	2300      	movs	r3, #0
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	4b02      	ldr	r3, [pc, #8]	; (800ee58 <updateStringItem+0x558>)
 800ee4e:	f7fa f8ad 	bl	8008fac <Paint_DrawString_EN>
 800ee52:	e1b5      	b.n	800f1c0 <updateStringItem+0x8c0>
 800ee54:	2400b020 	.word	0x2400b020
 800ee58:	24000010 	.word	0x24000010
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 800ee5c:	4b92      	ldr	r3, [pc, #584]	; (800f0a8 <updateStringItem+0x7a8>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	2b0b      	cmp	r3, #11
 800ee62:	f040 8127 	bne.w	800f0b4 <updateStringItem+0x7b4>
				{
					if (howToDraw == RIGHT)
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	2b04      	cmp	r3, #4
 800ee6a:	f040 8087 	bne.w	800ef7c <updateStringItem+0x67c>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ee6e:	7ffb      	ldrb	r3, [r7, #31]
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	3301      	adds	r3, #1
 800ee74:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ee76:	7fbb      	ldrb	r3, [r7, #30]
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	7f7b      	ldrb	r3, [r7, #29]
 800ee7c:	b299      	uxth	r1, r3
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	fb11 f303 	smulbb	r3, r1, r3
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	4413      	add	r3, r2
 800ee8a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800ee90:	7ffb      	ldrb	r3, [r7, #31]
 800ee92:	b29c      	uxth	r4, r3
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ee9c:	4a83      	ldr	r2, [pc, #524]	; (800f0ac <updateStringItem+0x7ac>)
 800ee9e:	4413      	add	r3, r2
 800eea0:	3304      	adds	r3, #4
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7f1 fa26 	bl	80002f4 <strlen>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	4b80      	ldr	r3, [pc, #512]	; (800f0b0 <updateStringItem+0x7b0>)
 800eeae:	889b      	ldrh	r3, [r3, #4]
 800eeb0:	fb12 f303 	smulbb	r3, r2, r3
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	4423      	add	r3, r4
 800eeb8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800eeba:	3301      	adds	r3, #1
 800eebc:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800eebe:	7fbb      	ldrb	r3, [r7, #30]
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	7f7b      	ldrb	r3, [r7, #29]
 800eec4:	b299      	uxth	r1, r3
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	fb11 f303 	smulbb	r3, r1, r3
 800eece:	b29b      	uxth	r3, r3
 800eed0:	4413      	add	r3, r2
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	4b76      	ldr	r3, [pc, #472]	; (800f0b0 <updateStringItem+0x7b0>)
 800eed6:	88db      	ldrh	r3, [r3, #6]
 800eed8:	4413      	add	r3, r2
 800eeda:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800eedc:	3301      	adds	r3, #1
 800eede:	b29b      	uxth	r3, r3
 800eee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eee4:	9200      	str	r2, [sp, #0]
 800eee6:	4602      	mov	r2, r0
 800eee8:	4631      	mov	r1, r6
 800eeea:	4628      	mov	r0, r5
 800eeec:	f7f9 fdce 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eef0:	7ffb      	ldrb	r3, [r7, #31]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	3301      	adds	r3, #1
 800eef6:	b298      	uxth	r0, r3
 800eef8:	7fbb      	ldrb	r3, [r7, #30]
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	7f7b      	ldrb	r3, [r7, #29]
 800eefe:	b299      	uxth	r1, r3
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	fb11 f303 	smulbb	r3, r1, r3
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	4413      	add	r3, r2
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	3301      	adds	r3, #1
 800ef10:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	011b      	lsls	r3, r3, #4
 800ef16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ef1a:	4a64      	ldr	r2, [pc, #400]	; (800f0ac <updateStringItem+0x7ac>)
 800ef1c:	4413      	add	r3, r2
 800ef1e:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ef20:	2300      	movs	r3, #0
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4b61      	ldr	r3, [pc, #388]	; (800f0b0 <updateStringItem+0x7b0>)
 800ef2c:	f7fa f83e 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ef30:	7ffb      	ldrb	r3, [r7, #31]
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	7f3b      	ldrb	r3, [r7, #28]
 800ef36:	085b      	lsrs	r3, r3, #1
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	4413      	add	r3, r2
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3301      	adds	r3, #1
 800ef42:	b298      	uxth	r0, r3
 800ef44:	7fbb      	ldrb	r3, [r7, #30]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	7f7b      	ldrb	r3, [r7, #29]
 800ef4a:	b299      	uxth	r1, r3
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	fb11 f303 	smulbb	r3, r1, r3
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	4413      	add	r3, r2
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800ef5e:	4b53      	ldr	r3, [pc, #332]	; (800f0ac <updateStringItem+0x7ac>)
 800ef60:	799b      	ldrb	r3, [r3, #6]
 800ef62:	011b      	lsls	r3, r3, #4
 800ef64:	3308      	adds	r3, #8
 800ef66:	4a51      	ldr	r2, [pc, #324]	; (800f0ac <updateStringItem+0x7ac>)
 800ef68:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	9301      	str	r3, [sp, #4]
 800ef6e:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	4b4e      	ldr	r3, [pc, #312]	; (800f0b0 <updateStringItem+0x7b0>)
 800ef76:	f7fa f819 	bl	8008fac <Paint_DrawString_EN>
 800ef7a:	e121      	b.n	800f1c0 <updateStringItem+0x8c0>
					}
					else if (howToDraw == DOWN)
 800ef7c:	79fb      	ldrb	r3, [r7, #7]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d146      	bne.n	800f010 <updateStringItem+0x710>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 800ef82:	4b4a      	ldr	r3, [pc, #296]	; (800f0ac <updateStringItem+0x7ac>)
 800ef84:	799b      	ldrb	r3, [r3, #6]
 800ef86:	461a      	mov	r2, r3
 800ef88:	4b48      	ldr	r3, [pc, #288]	; (800f0ac <updateStringItem+0x7ac>)
 800ef8a:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	ee07 3a90 	vmov	s15, r3
 800ef94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef98:	4b44      	ldr	r3, [pc, #272]	; (800f0ac <updateStringItem+0x7ac>)
 800ef9a:	791b      	ldrb	r3, [r3, #4]
 800ef9c:	ee06 3a90 	vmov	s13, r3
 800efa0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800efa4:	eeb0 1b46 	vmov.f64	d1, d6
 800efa8:	eeb0 0b47 	vmov.f64	d0, d7
 800efac:	f005 fb68 	bl	8014680 <fmax>
 800efb0:	eeb0 7b40 	vmov.f64	d7, d0
 800efb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800efb8:	edc7 7a00 	vstr	s15, [r7]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	4b3a      	ldr	r3, [pc, #232]	; (800f0ac <updateStringItem+0x7ac>)
 800efc2:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800efc4:	7ffb      	ldrb	r3, [r7, #31]
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	7f3b      	ldrb	r3, [r7, #28]
 800efca:	085b      	lsrs	r3, r3, #1
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	b29b      	uxth	r3, r3
 800efd0:	4413      	add	r3, r2
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	3301      	adds	r3, #1
 800efd6:	b298      	uxth	r0, r3
 800efd8:	7fbb      	ldrb	r3, [r7, #30]
 800efda:	b29a      	uxth	r2, r3
 800efdc:	7f7b      	ldrb	r3, [r7, #29]
 800efde:	b299      	uxth	r1, r3
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	fb11 f303 	smulbb	r3, r1, r3
 800efe8:	b29b      	uxth	r3, r3
 800efea:	4413      	add	r3, r2
 800efec:	b29b      	uxth	r3, r3
 800efee:	3301      	adds	r3, #1
 800eff0:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800eff2:	4b2e      	ldr	r3, [pc, #184]	; (800f0ac <updateStringItem+0x7ac>)
 800eff4:	799b      	ldrb	r3, [r3, #6]
 800eff6:	011b      	lsls	r3, r3, #4
 800eff8:	3308      	adds	r3, #8
 800effa:	4a2c      	ldr	r2, [pc, #176]	; (800f0ac <updateStringItem+0x7ac>)
 800effc:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800effe:	2300      	movs	r3, #0
 800f000:	9301      	str	r3, [sp, #4]
 800f002:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	4b29      	ldr	r3, [pc, #164]	; (800f0b0 <updateStringItem+0x7b0>)
 800f00a:	f7f9 ffcf 	bl	8008fac <Paint_DrawString_EN>
 800f00e:	e0d7      	b.n	800f1c0 <updateStringItem+0x8c0>
					}
					else if (howToDraw == UP)
 800f010:	79fb      	ldrb	r3, [r7, #7]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f040 80d4 	bne.w	800f1c0 <updateStringItem+0x8c0>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 800f018:	4b24      	ldr	r3, [pc, #144]	; (800f0ac <updateStringItem+0x7ac>)
 800f01a:	799b      	ldrb	r3, [r3, #6]
 800f01c:	461a      	mov	r2, r3
 800f01e:	4b23      	ldr	r3, [pc, #140]	; (800f0ac <updateStringItem+0x7ac>)
 800f020:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f024:	4413      	add	r3, r2
 800f026:	ee07 3a90 	vmov	s15, r3
 800f02a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f02e:	4b1f      	ldr	r3, [pc, #124]	; (800f0ac <updateStringItem+0x7ac>)
 800f030:	795b      	ldrb	r3, [r3, #5]
 800f032:	ee06 3a90 	vmov	s13, r3
 800f036:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f03a:	eeb0 1b46 	vmov.f64	d1, d6
 800f03e:	eeb0 0b47 	vmov.f64	d0, d7
 800f042:	f005 fb38 	bl	80146b6 <fmin>
 800f046:	eeb0 7b40 	vmov.f64	d7, d0
 800f04a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f04e:	edc7 7a00 	vstr	s15, [r7]
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	b2da      	uxtb	r2, r3
 800f056:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <updateStringItem+0x7ac>)
 800f058:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f05a:	7ffb      	ldrb	r3, [r7, #31]
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	7f3b      	ldrb	r3, [r7, #28]
 800f060:	085b      	lsrs	r3, r3, #1
 800f062:	b2db      	uxtb	r3, r3
 800f064:	b29b      	uxth	r3, r3
 800f066:	4413      	add	r3, r2
 800f068:	b29b      	uxth	r3, r3
 800f06a:	3301      	adds	r3, #1
 800f06c:	b298      	uxth	r0, r3
 800f06e:	7fbb      	ldrb	r3, [r7, #30]
 800f070:	b29a      	uxth	r2, r3
 800f072:	7f7b      	ldrb	r3, [r7, #29]
 800f074:	b299      	uxth	r1, r3
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	fb11 f303 	smulbb	r3, r1, r3
 800f07e:	b29b      	uxth	r3, r3
 800f080:	4413      	add	r3, r2
 800f082:	b29b      	uxth	r3, r3
 800f084:	3301      	adds	r3, #1
 800f086:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f088:	4b08      	ldr	r3, [pc, #32]	; (800f0ac <updateStringItem+0x7ac>)
 800f08a:	799b      	ldrb	r3, [r3, #6]
 800f08c:	011b      	lsls	r3, r3, #4
 800f08e:	3308      	adds	r3, #8
 800f090:	4a06      	ldr	r2, [pc, #24]	; (800f0ac <updateStringItem+0x7ac>)
 800f092:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f094:	2300      	movs	r3, #0
 800f096:	9301      	str	r3, [sp, #4]
 800f098:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	4b04      	ldr	r3, [pc, #16]	; (800f0b0 <updateStringItem+0x7b0>)
 800f0a0:	f7f9 ff84 	bl	8008fac <Paint_DrawString_EN>
 800f0a4:	e08c      	b.n	800f1c0 <updateStringItem+0x8c0>
 800f0a6:	bf00      	nop
 800f0a8:	2400a5ac 	.word	0x2400a5ac
 800f0ac:	2400b020 	.word	0x2400b020
 800f0b0:	24000010 	.word	0x24000010
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f0b4:	7ffb      	ldrb	r3, [r7, #31]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f0bc:	7fbb      	ldrb	r3, [r7, #30]
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	7f7b      	ldrb	r3, [r7, #29]
 800f0c2:	b299      	uxth	r1, r3
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	fb11 f303 	smulbb	r3, r1, r3
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	4413      	add	r3, r2
 800f0d0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f0d6:	7ffb      	ldrb	r3, [r7, #31]
 800f0d8:	b29c      	uxth	r4, r3
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	011b      	lsls	r3, r3, #4
 800f0de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f0e2:	4a8e      	ldr	r2, [pc, #568]	; (800f31c <updateStringItem+0xa1c>)
 800f0e4:	4413      	add	r3, r2
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7f1 f903 	bl	80002f4 <strlen>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	4b8b      	ldr	r3, [pc, #556]	; (800f320 <updateStringItem+0xa20>)
 800f0f4:	889b      	ldrh	r3, [r3, #4]
 800f0f6:	fb12 f303 	smulbb	r3, r2, r3
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	4423      	add	r3, r4
 800f0fe:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f100:	3301      	adds	r3, #1
 800f102:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f104:	7fbb      	ldrb	r3, [r7, #30]
 800f106:	b29a      	uxth	r2, r3
 800f108:	7f7b      	ldrb	r3, [r7, #29]
 800f10a:	b299      	uxth	r1, r3
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	fb11 f303 	smulbb	r3, r1, r3
 800f114:	b29b      	uxth	r3, r3
 800f116:	4413      	add	r3, r2
 800f118:	b29a      	uxth	r2, r3
 800f11a:	4b81      	ldr	r3, [pc, #516]	; (800f320 <updateStringItem+0xa20>)
 800f11c:	88db      	ldrh	r3, [r3, #6]
 800f11e:	4413      	add	r3, r2
 800f120:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f122:	3301      	adds	r3, #1
 800f124:	b29b      	uxth	r3, r3
 800f126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f12a:	9200      	str	r2, [sp, #0]
 800f12c:	4602      	mov	r2, r0
 800f12e:	4631      	mov	r1, r6
 800f130:	4628      	mov	r0, r5
 800f132:	f7f9 fcab 	bl	8008a8c <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f136:	7ffb      	ldrb	r3, [r7, #31]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	3301      	adds	r3, #1
 800f13c:	b298      	uxth	r0, r3
 800f13e:	7fbb      	ldrb	r3, [r7, #30]
 800f140:	b29a      	uxth	r2, r3
 800f142:	7f7b      	ldrb	r3, [r7, #29]
 800f144:	b299      	uxth	r1, r3
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	b29b      	uxth	r3, r3
 800f14a:	fb11 f303 	smulbb	r3, r1, r3
 800f14e:	b29b      	uxth	r3, r3
 800f150:	4413      	add	r3, r2
 800f152:	b29b      	uxth	r3, r3
 800f154:	3301      	adds	r3, #1
 800f156:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	011b      	lsls	r3, r3, #4
 800f15c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f160:	4a6e      	ldr	r2, [pc, #440]	; (800f31c <updateStringItem+0xa1c>)
 800f162:	4413      	add	r3, r2
 800f164:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f166:	2300      	movs	r3, #0
 800f168:	9301      	str	r3, [sp, #4]
 800f16a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	4b6b      	ldr	r3, [pc, #428]	; (800f320 <updateStringItem+0xa20>)
 800f172:	f7f9 ff1b 	bl	8008fac <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f176:	7ffb      	ldrb	r3, [r7, #31]
 800f178:	b29a      	uxth	r2, r3
 800f17a:	7f3b      	ldrb	r3, [r7, #28]
 800f17c:	085b      	lsrs	r3, r3, #1
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	b29b      	uxth	r3, r3
 800f182:	4413      	add	r3, r2
 800f184:	b29b      	uxth	r3, r3
 800f186:	3301      	adds	r3, #1
 800f188:	b298      	uxth	r0, r3
 800f18a:	7fbb      	ldrb	r3, [r7, #30]
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	7f7b      	ldrb	r3, [r7, #29]
 800f190:	b299      	uxth	r1, r3
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	b29b      	uxth	r3, r3
 800f196:	fb11 f303 	smulbb	r3, r1, r3
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	4413      	add	r3, r2
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f1a4:	4b5d      	ldr	r3, [pc, #372]	; (800f31c <updateStringItem+0xa1c>)
 800f1a6:	799b      	ldrb	r3, [r3, #6]
 800f1a8:	011b      	lsls	r3, r3, #4
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	4a5b      	ldr	r2, [pc, #364]	; (800f31c <updateStringItem+0xa1c>)
 800f1ae:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9301      	str	r3, [sp, #4]
 800f1b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	4b59      	ldr	r3, [pc, #356]	; (800f320 <updateStringItem+0xa20>)
 800f1bc:	f7f9 fef6 	bl	8008fac <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	f040 835e 	bne.w	800f884 <updateStringItem+0xf84>
			{
				char localString[8] = "";
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	60fb      	str	r3, [r7, #12]
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 800f1d0:	4b52      	ldr	r3, [pc, #328]	; (800f31c <updateStringItem+0xa1c>)
 800f1d2:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f107 030c 	add.w	r3, r7, #12
 800f1dc:	4951      	ldr	r1, [pc, #324]	; (800f324 <updateStringItem+0xa24>)
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f001 ffac 	bl	801113c <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 800f1e4:	4b50      	ldr	r3, [pc, #320]	; (800f328 <updateStringItem+0xa28>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	2b03      	cmp	r3, #3
 800f1ea:	f040 81b1 	bne.w	800f550 <updateStringItem+0xc50>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	2b03      	cmp	r3, #3
 800f1f2:	d003      	beq.n	800f1fc <updateStringItem+0x8fc>
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	2b02      	cmp	r3, #2
 800f1f8:	f040 8098 	bne.w	800f32c <updateStringItem+0xa2c>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f1fc:	7ffb      	ldrb	r3, [r7, #31]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	3301      	adds	r3, #1
 800f202:	b298      	uxth	r0, r3
 800f204:	7fbb      	ldrb	r3, [r7, #30]
 800f206:	b29a      	uxth	r2, r3
 800f208:	7f7b      	ldrb	r3, [r7, #29]
 800f20a:	b299      	uxth	r1, r3
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	b29b      	uxth	r3, r3
 800f210:	fb11 f303 	smulbb	r3, r1, r3
 800f214:	b29b      	uxth	r3, r3
 800f216:	4413      	add	r3, r2
 800f218:	b29b      	uxth	r3, r3
 800f21a:	3301      	adds	r3, #1
 800f21c:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	011b      	lsls	r3, r3, #4
 800f222:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f226:	4a3d      	ldr	r2, [pc, #244]	; (800f31c <updateStringItem+0xa1c>)
 800f228:	4413      	add	r3, r2
 800f22a:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f22c:	2300      	movs	r3, #0
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	4b3a      	ldr	r3, [pc, #232]	; (800f320 <updateStringItem+0xa20>)
 800f238:	f7f9 feb8 	bl	8008fac <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f23c:	7ffb      	ldrb	r3, [r7, #31]
 800f23e:	b29a      	uxth	r2, r3
 800f240:	7f3b      	ldrb	r3, [r7, #28]
 800f242:	085b      	lsrs	r3, r3, #1
 800f244:	b2db      	uxtb	r3, r3
 800f246:	b29b      	uxth	r3, r3
 800f248:	4413      	add	r3, r2
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	3301      	adds	r3, #1
 800f24e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f250:	7fbb      	ldrb	r3, [r7, #30]
 800f252:	b29a      	uxth	r2, r3
 800f254:	7f7b      	ldrb	r3, [r7, #29]
 800f256:	b299      	uxth	r1, r3
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	fb11 f303 	smulbb	r3, r1, r3
 800f260:	b29b      	uxth	r3, r3
 800f262:	4413      	add	r3, r2
 800f264:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f266:	3301      	adds	r3, #1
 800f268:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f26a:	7ffb      	ldrb	r3, [r7, #31]
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	7f3b      	ldrb	r3, [r7, #28]
 800f270:	085b      	lsrs	r3, r3, #1
 800f272:	b2db      	uxtb	r3, r3
 800f274:	b29b      	uxth	r3, r3
 800f276:	4413      	add	r3, r2
 800f278:	b29c      	uxth	r4, r3
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	011b      	lsls	r3, r3, #4
 800f27e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f282:	4a26      	ldr	r2, [pc, #152]	; (800f31c <updateStringItem+0xa1c>)
 800f284:	4413      	add	r3, r2
 800f286:	3304      	adds	r3, #4
 800f288:	4618      	mov	r0, r3
 800f28a:	f7f1 f833 	bl	80002f4 <strlen>
 800f28e:	4603      	mov	r3, r0
 800f290:	b29a      	uxth	r2, r3
 800f292:	4b23      	ldr	r3, [pc, #140]	; (800f320 <updateStringItem+0xa20>)
 800f294:	889b      	ldrh	r3, [r3, #4]
 800f296:	fb12 f303 	smulbb	r3, r2, r3
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	4423      	add	r3, r4
 800f29e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f2a4:	7fbb      	ldrb	r3, [r7, #30]
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	7f7b      	ldrb	r3, [r7, #29]
 800f2aa:	b299      	uxth	r1, r3
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	fb11 f303 	smulbb	r3, r1, r3
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	4413      	add	r3, r2
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	4b19      	ldr	r3, [pc, #100]	; (800f320 <updateStringItem+0xa20>)
 800f2bc:	88db      	ldrh	r3, [r3, #6]
 800f2be:	4413      	add	r3, r2
 800f2c0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ca:	9200      	str	r2, [sp, #0]
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	4631      	mov	r1, r6
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f7f9 fbdb 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f2d6:	7ffb      	ldrb	r3, [r7, #31]
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	7f3b      	ldrb	r3, [r7, #28]
 800f2dc:	085b      	lsrs	r3, r3, #1
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	4413      	add	r3, r2
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	b298      	uxth	r0, r3
 800f2ea:	7fbb      	ldrb	r3, [r7, #30]
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	7f7b      	ldrb	r3, [r7, #29]
 800f2f0:	b299      	uxth	r1, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	fb11 f303 	smulbb	r3, r1, r3
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	3301      	adds	r3, #1
 800f302:	b299      	uxth	r1, r3
 800f304:	f107 020c 	add.w	r2, r7, #12
 800f308:	2300      	movs	r3, #0
 800f30a:	9301      	str	r3, [sp, #4]
 800f30c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	4b03      	ldr	r3, [pc, #12]	; (800f320 <updateStringItem+0xa20>)
 800f314:	f7f9 fe4a 	bl	8008fac <Paint_DrawString_EN>
 800f318:	e2b4      	b.n	800f884 <updateStringItem+0xf84>
 800f31a:	bf00      	nop
 800f31c:	2400b020 	.word	0x2400b020
 800f320:	24000010 	.word	0x24000010
 800f324:	08014c98 	.word	0x08014c98
 800f328:	2400a5ac 	.word	0x2400a5ac
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	f040 8083 	bne.w	800f43a <updateStringItem+0xb3a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f334:	7ffb      	ldrb	r3, [r7, #31]
 800f336:	b29b      	uxth	r3, r3
 800f338:	3301      	adds	r3, #1
 800f33a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f33c:	7fbb      	ldrb	r3, [r7, #30]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	7f7b      	ldrb	r3, [r7, #29]
 800f342:	b299      	uxth	r1, r3
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	b29b      	uxth	r3, r3
 800f348:	fb11 f303 	smulbb	r3, r1, r3
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	4413      	add	r3, r2
 800f350:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f352:	3301      	adds	r3, #1
 800f354:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f356:	7ffb      	ldrb	r3, [r7, #31]
 800f358:	b29c      	uxth	r4, r3
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	011b      	lsls	r3, r3, #4
 800f35e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f362:	4a79      	ldr	r2, [pc, #484]	; (800f548 <updateStringItem+0xc48>)
 800f364:	4413      	add	r3, r2
 800f366:	3304      	adds	r3, #4
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f0 ffc3 	bl	80002f4 <strlen>
 800f36e:	4603      	mov	r3, r0
 800f370:	b29a      	uxth	r2, r3
 800f372:	4b76      	ldr	r3, [pc, #472]	; (800f54c <updateStringItem+0xc4c>)
 800f374:	889b      	ldrh	r3, [r3, #4]
 800f376:	fb12 f303 	smulbb	r3, r2, r3
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	4423      	add	r3, r4
 800f37e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f380:	3301      	adds	r3, #1
 800f382:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f384:	7fbb      	ldrb	r3, [r7, #30]
 800f386:	b29a      	uxth	r2, r3
 800f388:	7f7b      	ldrb	r3, [r7, #29]
 800f38a:	b299      	uxth	r1, r3
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	fb11 f303 	smulbb	r3, r1, r3
 800f394:	b29b      	uxth	r3, r3
 800f396:	4413      	add	r3, r2
 800f398:	b29a      	uxth	r2, r3
 800f39a:	4b6c      	ldr	r3, [pc, #432]	; (800f54c <updateStringItem+0xc4c>)
 800f39c:	88db      	ldrh	r3, [r3, #6]
 800f39e:	4413      	add	r3, r2
 800f3a0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3aa:	9200      	str	r2, [sp, #0]
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f7f9 fb6b 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f3b6:	7ffb      	ldrb	r3, [r7, #31]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	b298      	uxth	r0, r3
 800f3be:	7fbb      	ldrb	r3, [r7, #30]
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	7f7b      	ldrb	r3, [r7, #29]
 800f3c4:	b299      	uxth	r1, r3
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	fb11 f303 	smulbb	r3, r1, r3
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	4413      	add	r3, r2
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	011b      	lsls	r3, r3, #4
 800f3dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f3e0:	4a59      	ldr	r2, [pc, #356]	; (800f548 <updateStringItem+0xc48>)
 800f3e2:	4413      	add	r3, r2
 800f3e4:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	4b56      	ldr	r3, [pc, #344]	; (800f54c <updateStringItem+0xc4c>)
 800f3f2:	f7f9 fddb 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f3f6:	7ffb      	ldrb	r3, [r7, #31]
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	7f3b      	ldrb	r3, [r7, #28]
 800f3fc:	085b      	lsrs	r3, r3, #1
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	b29b      	uxth	r3, r3
 800f402:	4413      	add	r3, r2
 800f404:	b29b      	uxth	r3, r3
 800f406:	3301      	adds	r3, #1
 800f408:	b298      	uxth	r0, r3
 800f40a:	7fbb      	ldrb	r3, [r7, #30]
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	7f7b      	ldrb	r3, [r7, #29]
 800f410:	b299      	uxth	r1, r3
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	b29b      	uxth	r3, r3
 800f416:	fb11 f303 	smulbb	r3, r1, r3
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	4413      	add	r3, r2
 800f41e:	b29b      	uxth	r3, r3
 800f420:	3301      	adds	r3, #1
 800f422:	b299      	uxth	r1, r3
 800f424:	f107 020c 	add.w	r2, r7, #12
 800f428:	2300      	movs	r3, #0
 800f42a:	9301      	str	r3, [sp, #4]
 800f42c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	4b46      	ldr	r3, [pc, #280]	; (800f54c <updateStringItem+0xc4c>)
 800f434:	f7f9 fdba 	bl	8008fac <Paint_DrawString_EN>
 800f438:	e224      	b.n	800f884 <updateStringItem+0xf84>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 8221 	bne.w	800f884 <updateStringItem+0xf84>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f442:	7ffb      	ldrb	r3, [r7, #31]
 800f444:	b29b      	uxth	r3, r3
 800f446:	3301      	adds	r3, #1
 800f448:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f44a:	7fbb      	ldrb	r3, [r7, #30]
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	7f7b      	ldrb	r3, [r7, #29]
 800f450:	b299      	uxth	r1, r3
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	b29b      	uxth	r3, r3
 800f456:	fb11 f303 	smulbb	r3, r1, r3
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	4413      	add	r3, r2
 800f45e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f460:	3301      	adds	r3, #1
 800f462:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f464:	7ffb      	ldrb	r3, [r7, #31]
 800f466:	b29c      	uxth	r4, r3
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	011b      	lsls	r3, r3, #4
 800f46c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f470:	4a35      	ldr	r2, [pc, #212]	; (800f548 <updateStringItem+0xc48>)
 800f472:	4413      	add	r3, r2
 800f474:	3304      	adds	r3, #4
 800f476:	4618      	mov	r0, r3
 800f478:	f7f0 ff3c 	bl	80002f4 <strlen>
 800f47c:	4603      	mov	r3, r0
 800f47e:	b29a      	uxth	r2, r3
 800f480:	4b32      	ldr	r3, [pc, #200]	; (800f54c <updateStringItem+0xc4c>)
 800f482:	889b      	ldrh	r3, [r3, #4]
 800f484:	fb12 f303 	smulbb	r3, r2, r3
 800f488:	b29b      	uxth	r3, r3
 800f48a:	4423      	add	r3, r4
 800f48c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f48e:	3301      	adds	r3, #1
 800f490:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f492:	7fbb      	ldrb	r3, [r7, #30]
 800f494:	b29a      	uxth	r2, r3
 800f496:	7f7b      	ldrb	r3, [r7, #29]
 800f498:	b299      	uxth	r1, r3
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	fb11 f303 	smulbb	r3, r1, r3
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	4413      	add	r3, r2
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	4b28      	ldr	r3, [pc, #160]	; (800f54c <updateStringItem+0xc4c>)
 800f4aa:	88db      	ldrh	r3, [r3, #6]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4b8:	9200      	str	r2, [sp, #0]
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	4631      	mov	r1, r6
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f7f9 fae4 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f4c4:	7ffb      	ldrb	r3, [r7, #31]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	b298      	uxth	r0, r3
 800f4cc:	7fbb      	ldrb	r3, [r7, #30]
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	7f7b      	ldrb	r3, [r7, #29]
 800f4d2:	b299      	uxth	r1, r3
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	fb11 f303 	smulbb	r3, r1, r3
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	4413      	add	r3, r2
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	011b      	lsls	r3, r3, #4
 800f4ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f4ee:	4a16      	ldr	r2, [pc, #88]	; (800f548 <updateStringItem+0xc48>)
 800f4f0:	4413      	add	r3, r2
 800f4f2:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	9301      	str	r3, [sp, #4]
 800f4f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4b13      	ldr	r3, [pc, #76]	; (800f54c <updateStringItem+0xc4c>)
 800f500:	f7f9 fd54 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f504:	7ffb      	ldrb	r3, [r7, #31]
 800f506:	b29a      	uxth	r2, r3
 800f508:	7f3b      	ldrb	r3, [r7, #28]
 800f50a:	085b      	lsrs	r3, r3, #1
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	b29b      	uxth	r3, r3
 800f510:	4413      	add	r3, r2
 800f512:	b29b      	uxth	r3, r3
 800f514:	3301      	adds	r3, #1
 800f516:	b298      	uxth	r0, r3
 800f518:	7fbb      	ldrb	r3, [r7, #30]
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	7f7b      	ldrb	r3, [r7, #29]
 800f51e:	b299      	uxth	r1, r3
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	b29b      	uxth	r3, r3
 800f524:	fb11 f303 	smulbb	r3, r1, r3
 800f528:	b29b      	uxth	r3, r3
 800f52a:	4413      	add	r3, r2
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	3301      	adds	r3, #1
 800f530:	b299      	uxth	r1, r3
 800f532:	f107 020c 	add.w	r2, r7, #12
 800f536:	2300      	movs	r3, #0
 800f538:	9301      	str	r3, [sp, #4]
 800f53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	4b02      	ldr	r3, [pc, #8]	; (800f54c <updateStringItem+0xc4c>)
 800f542:	f7f9 fd33 	bl	8008fac <Paint_DrawString_EN>
 800f546:	e19d      	b.n	800f884 <updateStringItem+0xf84>
 800f548:	2400b020 	.word	0x2400b020
 800f54c:	24000010 	.word	0x24000010
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 800f550:	4b85      	ldr	r3, [pc, #532]	; (800f768 <updateStringItem+0xe68>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	2b0c      	cmp	r3, #12
 800f556:	f040 8113 	bne.w	800f780 <updateStringItem+0xe80>
				{
					if (howToDraw == RIGHT)
 800f55a:	79fb      	ldrb	r3, [r7, #7]
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	f040 8083 	bne.w	800f668 <updateStringItem+0xd68>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f562:	7ffb      	ldrb	r3, [r7, #31]
 800f564:	b29b      	uxth	r3, r3
 800f566:	3301      	adds	r3, #1
 800f568:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f56a:	7fbb      	ldrb	r3, [r7, #30]
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	7f7b      	ldrb	r3, [r7, #29]
 800f570:	b299      	uxth	r1, r3
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	b29b      	uxth	r3, r3
 800f576:	fb11 f303 	smulbb	r3, r1, r3
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	4413      	add	r3, r2
 800f57e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f580:	3301      	adds	r3, #1
 800f582:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f584:	7ffb      	ldrb	r3, [r7, #31]
 800f586:	b29c      	uxth	r4, r3
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	011b      	lsls	r3, r3, #4
 800f58c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f590:	4a76      	ldr	r2, [pc, #472]	; (800f76c <updateStringItem+0xe6c>)
 800f592:	4413      	add	r3, r2
 800f594:	3304      	adds	r3, #4
 800f596:	4618      	mov	r0, r3
 800f598:	f7f0 feac 	bl	80002f4 <strlen>
 800f59c:	4603      	mov	r3, r0
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	4b73      	ldr	r3, [pc, #460]	; (800f770 <updateStringItem+0xe70>)
 800f5a2:	889b      	ldrh	r3, [r3, #4]
 800f5a4:	fb12 f303 	smulbb	r3, r2, r3
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	4423      	add	r3, r4
 800f5ac:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f5b2:	7fbb      	ldrb	r3, [r7, #30]
 800f5b4:	b29a      	uxth	r2, r3
 800f5b6:	7f7b      	ldrb	r3, [r7, #29]
 800f5b8:	b299      	uxth	r1, r3
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	fb11 f303 	smulbb	r3, r1, r3
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	4413      	add	r3, r2
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	4b69      	ldr	r3, [pc, #420]	; (800f770 <updateStringItem+0xe70>)
 800f5ca:	88db      	ldrh	r3, [r3, #6]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5d8:	9200      	str	r2, [sp, #0]
 800f5da:	4602      	mov	r2, r0
 800f5dc:	4631      	mov	r1, r6
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7f9 fa54 	bl	8008a8c <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f5e4:	7ffb      	ldrb	r3, [r7, #31]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	b298      	uxth	r0, r3
 800f5ec:	7fbb      	ldrb	r3, [r7, #30]
 800f5ee:	b29a      	uxth	r2, r3
 800f5f0:	7f7b      	ldrb	r3, [r7, #29]
 800f5f2:	b299      	uxth	r1, r3
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	fb11 f303 	smulbb	r3, r1, r3
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	4413      	add	r3, r2
 800f600:	b29b      	uxth	r3, r3
 800f602:	3301      	adds	r3, #1
 800f604:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	011b      	lsls	r3, r3, #4
 800f60a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f60e:	4a57      	ldr	r2, [pc, #348]	; (800f76c <updateStringItem+0xe6c>)
 800f610:	4413      	add	r3, r2
 800f612:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f614:	2300      	movs	r3, #0
 800f616:	9301      	str	r3, [sp, #4]
 800f618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	4b54      	ldr	r3, [pc, #336]	; (800f770 <updateStringItem+0xe70>)
 800f620:	f7f9 fcc4 	bl	8008fac <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f624:	7ffb      	ldrb	r3, [r7, #31]
 800f626:	b29a      	uxth	r2, r3
 800f628:	7f3b      	ldrb	r3, [r7, #28]
 800f62a:	085b      	lsrs	r3, r3, #1
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	b29b      	uxth	r3, r3
 800f630:	4413      	add	r3, r2
 800f632:	b29b      	uxth	r3, r3
 800f634:	3301      	adds	r3, #1
 800f636:	b298      	uxth	r0, r3
 800f638:	7fbb      	ldrb	r3, [r7, #30]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	7f7b      	ldrb	r3, [r7, #29]
 800f63e:	b299      	uxth	r1, r3
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	b29b      	uxth	r3, r3
 800f644:	fb11 f303 	smulbb	r3, r1, r3
 800f648:	b29b      	uxth	r3, r3
 800f64a:	4413      	add	r3, r2
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	3301      	adds	r3, #1
 800f650:	b299      	uxth	r1, r3
 800f652:	f107 020c 	add.w	r2, r7, #12
 800f656:	2300      	movs	r3, #0
 800f658:	9301      	str	r3, [sp, #4]
 800f65a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	4b43      	ldr	r3, [pc, #268]	; (800f770 <updateStringItem+0xe70>)
 800f662:	f7f9 fca3 	bl	8008fac <Paint_DrawString_EN>
 800f666:	e10d      	b.n	800f884 <updateStringItem+0xf84>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d136      	bne.n	800f6dc <updateStringItem+0xddc>
					{

						multiplierIndex = 0;
 800f66e:	4b41      	ldr	r3, [pc, #260]	; (800f774 <updateStringItem+0xe74>)
 800f670:	2200      	movs	r2, #0
 800f672:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 800f674:	4b3f      	ldr	r3, [pc, #252]	; (800f774 <updateStringItem+0xe74>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	461a      	mov	r2, r3
 800f67a:	4b3f      	ldr	r3, [pc, #252]	; (800f778 <updateStringItem+0xe78>)
 800f67c:	5c9a      	ldrb	r2, [r3, r2]
 800f67e:	4b3b      	ldr	r3, [pc, #236]	; (800f76c <updateStringItem+0xe6c>)
 800f680:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 800f684:	4b39      	ldr	r3, [pc, #228]	; (800f76c <updateStringItem+0xe6c>)
 800f686:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f68a:	461a      	mov	r2, r3
 800f68c:	f107 030c 	add.w	r3, r7, #12
 800f690:	493a      	ldr	r1, [pc, #232]	; (800f77c <updateStringItem+0xe7c>)
 800f692:	4618      	mov	r0, r3
 800f694:	f001 fd52 	bl	801113c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f698:	7ffb      	ldrb	r3, [r7, #31]
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	7f3b      	ldrb	r3, [r7, #28]
 800f69e:	085b      	lsrs	r3, r3, #1
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	4413      	add	r3, r2
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b298      	uxth	r0, r3
 800f6ac:	7fbb      	ldrb	r3, [r7, #30]
 800f6ae:	b29a      	uxth	r2, r3
 800f6b0:	7f7b      	ldrb	r3, [r7, #29]
 800f6b2:	b299      	uxth	r1, r3
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	fb11 f303 	smulbb	r3, r1, r3
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	4413      	add	r3, r2
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	b299      	uxth	r1, r3
 800f6c6:	f107 020c 	add.w	r2, r7, #12
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	9301      	str	r3, [sp, #4]
 800f6ce:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	4b26      	ldr	r3, [pc, #152]	; (800f770 <updateStringItem+0xe70>)
 800f6d6:	f7f9 fc69 	bl	8008fac <Paint_DrawString_EN>
 800f6da:	e0d3      	b.n	800f884 <updateStringItem+0xf84>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800f6dc:	79fb      	ldrb	r3, [r7, #7]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f040 80d0 	bne.w	800f884 <updateStringItem+0xf84>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 800f6e4:	4b23      	ldr	r3, [pc, #140]	; (800f774 <updateStringItem+0xe74>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	ee07 3a90 	vmov	s15, r3
 800f6ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6f2:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800f6f6:	eeb0 0b47 	vmov.f64	d0, d7
 800f6fa:	f004 ffdc 	bl	80146b6 <fmin>
 800f6fe:	eeb0 7b40 	vmov.f64	d7, d0
 800f702:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f706:	edc7 7a00 	vstr	s15, [r7]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	4b19      	ldr	r3, [pc, #100]	; (800f774 <updateStringItem+0xe74>)
 800f710:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 800f712:	4b18      	ldr	r3, [pc, #96]	; (800f774 <updateStringItem+0xe74>)
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	461a      	mov	r2, r3
 800f718:	4b17      	ldr	r3, [pc, #92]	; (800f778 <updateStringItem+0xe78>)
 800f71a:	5c9a      	ldrb	r2, [r3, r2]
 800f71c:	4b13      	ldr	r3, [pc, #76]	; (800f76c <updateStringItem+0xe6c>)
 800f71e:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f722:	7ffb      	ldrb	r3, [r7, #31]
 800f724:	b29a      	uxth	r2, r3
 800f726:	7f3b      	ldrb	r3, [r7, #28]
 800f728:	085b      	lsrs	r3, r3, #1
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	4413      	add	r3, r2
 800f730:	b29b      	uxth	r3, r3
 800f732:	3301      	adds	r3, #1
 800f734:	b298      	uxth	r0, r3
 800f736:	7fbb      	ldrb	r3, [r7, #30]
 800f738:	b29a      	uxth	r2, r3
 800f73a:	7f7b      	ldrb	r3, [r7, #29]
 800f73c:	b299      	uxth	r1, r3
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	b29b      	uxth	r3, r3
 800f742:	fb11 f303 	smulbb	r3, r1, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	4413      	add	r3, r2
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	3301      	adds	r3, #1
 800f74e:	b299      	uxth	r1, r3
 800f750:	f107 020c 	add.w	r2, r7, #12
 800f754:	2300      	movs	r3, #0
 800f756:	9301      	str	r3, [sp, #4]
 800f758:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4b04      	ldr	r3, [pc, #16]	; (800f770 <updateStringItem+0xe70>)
 800f760:	f7f9 fc24 	bl	8008fac <Paint_DrawString_EN>
 800f764:	e08e      	b.n	800f884 <updateStringItem+0xf84>
 800f766:	bf00      	nop
 800f768:	2400a5ac 	.word	0x2400a5ac
 800f76c:	2400b020 	.word	0x2400b020
 800f770:	24000010 	.word	0x24000010
 800f774:	2400a0d0 	.word	0x2400a0d0
 800f778:	2400a0e4 	.word	0x2400a0e4
 800f77c:	08014c98 	.word	0x08014c98
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f780:	7ffb      	ldrb	r3, [r7, #31]
 800f782:	b29b      	uxth	r3, r3
 800f784:	3301      	adds	r3, #1
 800f786:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f788:	7fbb      	ldrb	r3, [r7, #30]
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	7f7b      	ldrb	r3, [r7, #29]
 800f78e:	b299      	uxth	r1, r3
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	b29b      	uxth	r3, r3
 800f794:	fb11 f303 	smulbb	r3, r1, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	4413      	add	r3, r2
 800f79c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f79e:	3301      	adds	r3, #1
 800f7a0:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f7a2:	7ffb      	ldrb	r3, [r7, #31]
 800f7a4:	b29c      	uxth	r4, r3
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	011b      	lsls	r3, r3, #4
 800f7aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f7ae:	4a95      	ldr	r2, [pc, #596]	; (800fa04 <updateStringItem+0x1104>)
 800f7b0:	4413      	add	r3, r2
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f0 fd9d 	bl	80002f4 <strlen>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	4b92      	ldr	r3, [pc, #584]	; (800fa08 <updateStringItem+0x1108>)
 800f7c0:	889b      	ldrh	r3, [r3, #4]
 800f7c2:	fb12 f303 	smulbb	r3, r2, r3
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4423      	add	r3, r4
 800f7ca:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f7d0:	7fbb      	ldrb	r3, [r7, #30]
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	7f7b      	ldrb	r3, [r7, #29]
 800f7d6:	b299      	uxth	r1, r3
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	fb11 f303 	smulbb	r3, r1, r3
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	4413      	add	r3, r2
 800f7e4:	b29a      	uxth	r2, r3
 800f7e6:	4b88      	ldr	r3, [pc, #544]	; (800fa08 <updateStringItem+0x1108>)
 800f7e8:	88db      	ldrh	r3, [r3, #6]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7f6:	9200      	str	r2, [sp, #0]
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f7f9 f945 	bl	8008a8c <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f802:	7ffb      	ldrb	r3, [r7, #31]
 800f804:	b29b      	uxth	r3, r3
 800f806:	3301      	adds	r3, #1
 800f808:	b298      	uxth	r0, r3
 800f80a:	7fbb      	ldrb	r3, [r7, #30]
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	7f7b      	ldrb	r3, [r7, #29]
 800f810:	b299      	uxth	r1, r3
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	b29b      	uxth	r3, r3
 800f816:	fb11 f303 	smulbb	r3, r1, r3
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	4413      	add	r3, r2
 800f81e:	b29b      	uxth	r3, r3
 800f820:	3301      	adds	r3, #1
 800f822:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	011b      	lsls	r3, r3, #4
 800f828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f82c:	4a75      	ldr	r2, [pc, #468]	; (800fa04 <updateStringItem+0x1104>)
 800f82e:	4413      	add	r3, r2
 800f830:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f832:	2300      	movs	r3, #0
 800f834:	9301      	str	r3, [sp, #4]
 800f836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	4b72      	ldr	r3, [pc, #456]	; (800fa08 <updateStringItem+0x1108>)
 800f83e:	f7f9 fbb5 	bl	8008fac <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f842:	7ffb      	ldrb	r3, [r7, #31]
 800f844:	b29a      	uxth	r2, r3
 800f846:	7f3b      	ldrb	r3, [r7, #28]
 800f848:	085b      	lsrs	r3, r3, #1
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	4413      	add	r3, r2
 800f850:	b29b      	uxth	r3, r3
 800f852:	3301      	adds	r3, #1
 800f854:	b298      	uxth	r0, r3
 800f856:	7fbb      	ldrb	r3, [r7, #30]
 800f858:	b29a      	uxth	r2, r3
 800f85a:	7f7b      	ldrb	r3, [r7, #29]
 800f85c:	b299      	uxth	r1, r3
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	b29b      	uxth	r3, r3
 800f862:	fb11 f303 	smulbb	r3, r1, r3
 800f866:	b29b      	uxth	r3, r3
 800f868:	4413      	add	r3, r2
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	3301      	adds	r3, #1
 800f86e:	b299      	uxth	r1, r3
 800f870:	f107 020c 	add.w	r2, r7, #12
 800f874:	2300      	movs	r3, #0
 800f876:	9301      	str	r3, [sp, #4]
 800f878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f87c:	9300      	str	r3, [sp, #0]
 800f87e:	4b62      	ldr	r3, [pc, #392]	; (800fa08 <updateStringItem+0x1108>)
 800f880:	f7f9 fb94 	bl	8008fac <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 800f884:	4b5f      	ldr	r3, [pc, #380]	; (800fa04 <updateStringItem+0x1104>)
 800f886:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800f88a:	3b02      	subs	r3, #2
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	429a      	cmp	r2, r3
 800f890:	f2c0 8281 	blt.w	800fd96 <updateStringItem+0x1496>
 800f894:	4b5b      	ldr	r3, [pc, #364]	; (800fa04 <updateStringItem+0x1104>)
 800f896:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800f89a:	461a      	mov	r2, r3
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	f280 8279 	bge.w	800fd96 <updateStringItem+0x1496>
		{
			if (howToDraw == FULL)
 800f8a4:	79fb      	ldrb	r3, [r7, #7]
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d17a      	bne.n	800f9a0 <updateStringItem+0x10a0>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800f8aa:	7ffb      	ldrb	r3, [r7, #31]
 800f8ac:	b298      	uxth	r0, r3
 800f8ae:	7fbb      	ldrb	r3, [r7, #30]
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	7f7b      	ldrb	r3, [r7, #29]
 800f8b4:	b299      	uxth	r1, r3
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	fb11 f303 	smulbb	r3, r1, r3
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	4413      	add	r3, r2
 800f8c2:	b29c      	uxth	r4, r3
 800f8c4:	7ffb      	ldrb	r3, [r7, #31]
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	7f3b      	ldrb	r3, [r7, #28]
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4413      	add	r3, r2
 800f8ce:	b29d      	uxth	r5, r3
 800f8d0:	7fbb      	ldrb	r3, [r7, #30]
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	7f7b      	ldrb	r3, [r7, #29]
 800f8d6:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	fb11 f303 	smulbb	r3, r1, r3
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	4413      	add	r3, r2
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	9202      	str	r2, [sp, #8]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	9201      	str	r2, [sp, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	9200      	str	r2, [sp, #0]
 800f8f4:	462a      	mov	r2, r5
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	f7f9 fa42 	bl	8008d80 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 800f8fc:	4b43      	ldr	r3, [pc, #268]	; (800fa0c <updateStringItem+0x110c>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	461a      	mov	r2, r3
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	4293      	cmp	r3, r2
 800f906:	d125      	bne.n	800f954 <updateStringItem+0x1054>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800f908:	7efb      	ldrb	r3, [r7, #27]
 800f90a:	b29c      	uxth	r4, r3
 800f90c:	7fbb      	ldrb	r3, [r7, #30]
 800f90e:	b29a      	uxth	r2, r3
 800f910:	7f7b      	ldrb	r3, [r7, #29]
 800f912:	b299      	uxth	r1, r3
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	b29b      	uxth	r3, r3
 800f918:	fb11 f303 	smulbb	r3, r1, r3
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	4413      	add	r3, r2
 800f920:	b29b      	uxth	r3, r3
 800f922:	3301      	adds	r3, #1
 800f924:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	011b      	lsls	r3, r3, #4
 800f92a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f92e:	4a35      	ldr	r2, [pc, #212]	; (800fa04 <updateStringItem+0x1104>)
 800f930:	4413      	add	r3, r2
 800f932:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800f934:	4934      	ldr	r1, [pc, #208]	; (800fa08 <updateStringItem+0x1108>)
 800f936:	ab02      	add	r3, sp, #8
 800f938:	c903      	ldmia	r1, {r0, r1}
 800f93a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f93e:	2310      	movs	r3, #16
 800f940:	9301      	str	r3, [sp, #4]
 800f942:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	2300      	movs	r3, #0
 800f94a:	4629      	mov	r1, r5
 800f94c:	4620      	mov	r0, r4
 800f94e:	f7fc fc1b 	bl	800c188 <centeredString>
 800f952:	e220      	b.n	800fd96 <updateStringItem+0x1496>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800f954:	7efb      	ldrb	r3, [r7, #27]
 800f956:	b29c      	uxth	r4, r3
 800f958:	7fbb      	ldrb	r3, [r7, #30]
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	7f7b      	ldrb	r3, [r7, #29]
 800f95e:	b299      	uxth	r1, r3
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	b29b      	uxth	r3, r3
 800f964:	fb11 f303 	smulbb	r3, r1, r3
 800f968:	b29b      	uxth	r3, r3
 800f96a:	4413      	add	r3, r2
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	3301      	adds	r3, #1
 800f970:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	011b      	lsls	r3, r3, #4
 800f976:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f97a:	4a22      	ldr	r2, [pc, #136]	; (800fa04 <updateStringItem+0x1104>)
 800f97c:	4413      	add	r3, r2
 800f97e:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800f980:	4921      	ldr	r1, [pc, #132]	; (800fa08 <updateStringItem+0x1108>)
 800f982:	ab02      	add	r3, sp, #8
 800f984:	c903      	ldmia	r1, {r0, r1}
 800f986:	e883 0003 	stmia.w	r3, {r0, r1}
 800f98a:	2310      	movs	r3, #16
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	2300      	movs	r3, #0
 800f996:	4629      	mov	r1, r5
 800f998:	4620      	mov	r0, r4
 800f99a:	f7fc fbf5 	bl	800c188 <centeredString>
 800f99e:	e1fa      	b.n	800fd96 <updateStringItem+0x1496>
				}
			}
			else if (howToDraw == DOWN)
 800f9a0:	79fb      	ldrb	r3, [r7, #7]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	f040 80ca 	bne.w	800fb3c <updateStringItem+0x123c>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 800f9a8:	4b18      	ldr	r3, [pc, #96]	; (800fa0c <updateStringItem+0x110c>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2b04      	cmp	r3, #4
 800f9ae:	d12f      	bne.n	800fa10 <updateStringItem+0x1110>
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	2b04      	cmp	r3, #4
 800f9b4:	d12c      	bne.n	800fa10 <updateStringItem+0x1110>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800f9b6:	7efb      	ldrb	r3, [r7, #27]
 800f9b8:	b29c      	uxth	r4, r3
 800f9ba:	7fbb      	ldrb	r3, [r7, #30]
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	7f7b      	ldrb	r3, [r7, #29]
 800f9c0:	b299      	uxth	r1, r3
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	fb11 f303 	smulbb	r3, r1, r3
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4413      	add	r3, r2
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	011b      	lsls	r3, r3, #4
 800f9d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f9dc:	4a09      	ldr	r2, [pc, #36]	; (800fa04 <updateStringItem+0x1104>)
 800f9de:	4413      	add	r3, r2
 800f9e0:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800f9e2:	4909      	ldr	r1, [pc, #36]	; (800fa08 <updateStringItem+0x1108>)
 800f9e4:	ab02      	add	r3, sp, #8
 800f9e6:	c903      	ldmia	r1, {r0, r1}
 800f9e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9ec:	2310      	movs	r3, #16
 800f9ee:	9301      	str	r3, [sp, #4]
 800f9f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7fc fbc4 	bl	800c188 <centeredString>
 800fa00:	e1c9      	b.n	800fd96 <updateStringItem+0x1496>
 800fa02:	bf00      	nop
 800fa04:	2400b020 	.word	0x2400b020
 800fa08:	24000010 	.word	0x24000010
 800fa0c:	2400a5ac 	.word	0x2400a5ac
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 800fa10:	4b8b      	ldr	r3, [pc, #556]	; (800fc40 <updateStringItem+0x1340>)
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	2b05      	cmp	r3, #5
 800fa16:	f040 81be 	bne.w	800fd96 <updateStringItem+0x1496>
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	2b05      	cmp	r3, #5
 800fa1e:	f040 81ba 	bne.w	800fd96 <updateStringItem+0x1496>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 800fa22:	7efb      	ldrb	r3, [r7, #27]
 800fa24:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fa26:	7fbb      	ldrb	r3, [r7, #30]
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	7f7b      	ldrb	r3, [r7, #29]
 800fa2c:	b299      	uxth	r1, r3
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	3b01      	subs	r3, #1
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	fb11 f303 	smulbb	r3, r1, r3
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	4413      	add	r3, r2
 800fa3c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800fa3e:	3301      	adds	r3, #1
 800fa40:	b29e      	uxth	r6, r3
 800fa42:	7efb      	ldrb	r3, [r7, #27]
 800fa44:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	011b      	lsls	r3, r3, #4
 800fa4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fa50:	4a7c      	ldr	r2, [pc, #496]	; (800fc44 <updateStringItem+0x1344>)
 800fa52:	4413      	add	r3, r2
 800fa54:	3304      	adds	r3, #4
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7f0 fc4c 	bl	80002f4 <strlen>
 800fa5c:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 800fa5e:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 800fa60:	4b79      	ldr	r3, [pc, #484]	; (800fc48 <updateStringItem+0x1348>)
 800fa62:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 800fa64:	fb12 f303 	smulbb	r3, r2, r3
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4423      	add	r3, r4
 800fa6c:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 800fa6e:	7fbb      	ldrb	r3, [r7, #30]
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	7f7b      	ldrb	r3, [r7, #29]
 800fa74:	b299      	uxth	r1, r3
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	fb11 f303 	smulbb	r3, r1, r3
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	4413      	add	r3, r2
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	4b70      	ldr	r3, [pc, #448]	; (800fc48 <updateStringItem+0x1348>)
 800fa88:	88db      	ldrh	r3, [r3, #6]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800fa8e:	3301      	adds	r3, #1
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa96:	9200      	str	r2, [sp, #0]
 800fa98:	4602      	mov	r2, r0
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f7f8 fff5 	bl	8008a8c <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800faa2:	7efb      	ldrb	r3, [r7, #27]
 800faa4:	b29c      	uxth	r4, r3
 800faa6:	7fbb      	ldrb	r3, [r7, #30]
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	7f7b      	ldrb	r3, [r7, #29]
 800faac:	b299      	uxth	r1, r3
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	3b01      	subs	r3, #1
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	fb11 f303 	smulbb	r3, r1, r3
 800fab8:	b29b      	uxth	r3, r3
 800faba:	4413      	add	r3, r2
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	3301      	adds	r3, #1
 800fac0:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	3b01      	subs	r3, #1
 800fac6:	011b      	lsls	r3, r3, #4
 800fac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800facc:	4a5d      	ldr	r2, [pc, #372]	; (800fc44 <updateStringItem+0x1344>)
 800face:	4413      	add	r3, r2
 800fad0:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fad2:	495d      	ldr	r1, [pc, #372]	; (800fc48 <updateStringItem+0x1348>)
 800fad4:	ab02      	add	r3, sp, #8
 800fad6:	c903      	ldmia	r1, {r0, r1}
 800fad8:	e883 0003 	stmia.w	r3, {r0, r1}
 800fadc:	2310      	movs	r3, #16
 800fade:	9301      	str	r3, [sp, #4]
 800fae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	2300      	movs	r3, #0
 800fae8:	4629      	mov	r1, r5
 800faea:	4620      	mov	r0, r4
 800faec:	f7fc fb4c 	bl	800c188 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800faf0:	7efb      	ldrb	r3, [r7, #27]
 800faf2:	b29c      	uxth	r4, r3
 800faf4:	7fbb      	ldrb	r3, [r7, #30]
 800faf6:	b29a      	uxth	r2, r3
 800faf8:	7f7b      	ldrb	r3, [r7, #29]
 800fafa:	b299      	uxth	r1, r3
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	fb11 f303 	smulbb	r3, r1, r3
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	4413      	add	r3, r2
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	011b      	lsls	r3, r3, #4
 800fb12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fb16:	4a4b      	ldr	r2, [pc, #300]	; (800fc44 <updateStringItem+0x1344>)
 800fb18:	4413      	add	r3, r2
 800fb1a:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fb1c:	494a      	ldr	r1, [pc, #296]	; (800fc48 <updateStringItem+0x1348>)
 800fb1e:	ab02      	add	r3, sp, #8
 800fb20:	c903      	ldmia	r1, {r0, r1}
 800fb22:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb26:	2310      	movs	r3, #16
 800fb28:	9301      	str	r3, [sp, #4]
 800fb2a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	2300      	movs	r3, #0
 800fb32:	4629      	mov	r1, r5
 800fb34:	4620      	mov	r0, r4
 800fb36:	f7fc fb27 	bl	800c188 <centeredString>
 800fb3a:	e12c      	b.n	800fd96 <updateStringItem+0x1496>
				}
			}
			else if (howToDraw == UP)
 800fb3c:	79fb      	ldrb	r3, [r7, #7]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f040 8129 	bne.w	800fd96 <updateStringItem+0x1496>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 800fb44:	4b3e      	ldr	r3, [pc, #248]	; (800fc40 <updateStringItem+0x1340>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	2b03      	cmp	r3, #3
 800fb4a:	d17f      	bne.n	800fc4c <updateStringItem+0x134c>
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2b04      	cmp	r3, #4
 800fb50:	d17c      	bne.n	800fc4c <updateStringItem+0x134c>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fb52:	7efb      	ldrb	r3, [r7, #27]
 800fb54:	b29c      	uxth	r4, r3
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	011b      	lsls	r3, r3, #4
 800fb5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fb5e:	4a39      	ldr	r2, [pc, #228]	; (800fc44 <updateStringItem+0x1344>)
 800fb60:	4413      	add	r3, r2
 800fb62:	3304      	adds	r3, #4
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f0 fbc5 	bl	80002f4 <strlen>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	4a36      	ldr	r2, [pc, #216]	; (800fc48 <updateStringItem+0x1348>)
 800fb6e:	8892      	ldrh	r2, [r2, #4]
 800fb70:	fb02 f303 	mul.w	r3, r2, r3
 800fb74:	085b      	lsrs	r3, r3, #1
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	1ae3      	subs	r3, r4, r3
 800fb7a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fb7c:	7fbb      	ldrb	r3, [r7, #30]
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	7f7b      	ldrb	r3, [r7, #29]
 800fb82:	b299      	uxth	r1, r3
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	fb11 f303 	smulbb	r3, r1, r3
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	4413      	add	r3, r2
 800fb90:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fb92:	3301      	adds	r3, #1
 800fb94:	b29e      	uxth	r6, r3
 800fb96:	7efb      	ldrb	r3, [r7, #27]
 800fb98:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	011b      	lsls	r3, r3, #4
 800fb9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fba2:	4a28      	ldr	r2, [pc, #160]	; (800fc44 <updateStringItem+0x1344>)
 800fba4:	4413      	add	r3, r2
 800fba6:	3304      	adds	r3, #4
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f0 fba3 	bl	80002f4 <strlen>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	4a25      	ldr	r2, [pc, #148]	; (800fc48 <updateStringItem+0x1348>)
 800fbb2:	8892      	ldrh	r2, [r2, #4]
 800fbb4:	fb02 f303 	mul.w	r3, r2, r3
 800fbb8:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	4423      	add	r3, r4
 800fbbe:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800fbc0:	7fbb      	ldrb	r3, [r7, #30]
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	7f7b      	ldrb	r3, [r7, #29]
 800fbc6:	b299      	uxth	r1, r3
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	fb11 f303 	smulbb	r3, r1, r3
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4413      	add	r3, r2
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	4b1c      	ldr	r3, [pc, #112]	; (800fc48 <updateStringItem+0x1348>)
 800fbd8:	88db      	ldrh	r3, [r3, #6]
 800fbda:	4413      	add	r3, r2
 800fbdc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fbde:	3301      	adds	r3, #1
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe6:	9200      	str	r2, [sp, #0]
 800fbe8:	4602      	mov	r2, r0
 800fbea:	4631      	mov	r1, r6
 800fbec:	4628      	mov	r0, r5
 800fbee:	f7f8 ff4d 	bl	8008a8c <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fbf2:	7efb      	ldrb	r3, [r7, #27]
 800fbf4:	b29c      	uxth	r4, r3
 800fbf6:	7fbb      	ldrb	r3, [r7, #30]
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	7f7b      	ldrb	r3, [r7, #29]
 800fbfc:	b299      	uxth	r1, r3
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	fb11 f303 	smulbb	r3, r1, r3
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	4413      	add	r3, r2
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc18:	4a0a      	ldr	r2, [pc, #40]	; (800fc44 <updateStringItem+0x1344>)
 800fc1a:	4413      	add	r3, r2
 800fc1c:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fc1e:	490a      	ldr	r1, [pc, #40]	; (800fc48 <updateStringItem+0x1348>)
 800fc20:	ab02      	add	r3, sp, #8
 800fc22:	c903      	ldmia	r1, {r0, r1}
 800fc24:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc28:	2310      	movs	r3, #16
 800fc2a:	9301      	str	r3, [sp, #4]
 800fc2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	2300      	movs	r3, #0
 800fc34:	4629      	mov	r1, r5
 800fc36:	4620      	mov	r0, r4
 800fc38:	f7fc faa6 	bl	800c188 <centeredString>
 800fc3c:	e0ab      	b.n	800fd96 <updateStringItem+0x1496>
 800fc3e:	bf00      	nop
 800fc40:	2400a5ac 	.word	0x2400a5ac
 800fc44:	2400b020 	.word	0x2400b020
 800fc48:	24000010 	.word	0x24000010
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 800fc4c:	4b5a      	ldr	r3, [pc, #360]	; (800fdb8 <updateStringItem+0x14b8>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b04      	cmp	r3, #4
 800fc52:	f040 80a0 	bne.w	800fd96 <updateStringItem+0x1496>
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	2b05      	cmp	r3, #5
 800fc5a:	f040 809c 	bne.w	800fd96 <updateStringItem+0x1496>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fc5e:	7efb      	ldrb	r3, [r7, #27]
 800fc60:	b29c      	uxth	r4, r3
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	011b      	lsls	r3, r3, #4
 800fc66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc6a:	4a54      	ldr	r2, [pc, #336]	; (800fdbc <updateStringItem+0x14bc>)
 800fc6c:	4413      	add	r3, r2
 800fc6e:	3304      	adds	r3, #4
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7f0 fb3f 	bl	80002f4 <strlen>
 800fc76:	4603      	mov	r3, r0
 800fc78:	4a51      	ldr	r2, [pc, #324]	; (800fdc0 <updateStringItem+0x14c0>)
 800fc7a:	8892      	ldrh	r2, [r2, #4]
 800fc7c:	fb02 f303 	mul.w	r3, r2, r3
 800fc80:	085b      	lsrs	r3, r3, #1
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	1ae3      	subs	r3, r4, r3
 800fc86:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fc88:	7fbb      	ldrb	r3, [r7, #30]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	7f7b      	ldrb	r3, [r7, #29]
 800fc8e:	b299      	uxth	r1, r3
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	fb11 f303 	smulbb	r3, r1, r3
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	4413      	add	r3, r2
 800fc9c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fc9e:	3301      	adds	r3, #1
 800fca0:	b29e      	uxth	r6, r3
 800fca2:	7efb      	ldrb	r3, [r7, #27]
 800fca4:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	011b      	lsls	r3, r3, #4
 800fcaa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fcae:	4a43      	ldr	r2, [pc, #268]	; (800fdbc <updateStringItem+0x14bc>)
 800fcb0:	4413      	add	r3, r2
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f0 fb1d 	bl	80002f4 <strlen>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4a40      	ldr	r2, [pc, #256]	; (800fdc0 <updateStringItem+0x14c0>)
 800fcbe:	8892      	ldrh	r2, [r2, #4]
 800fcc0:	fb02 f303 	mul.w	r3, r2, r3
 800fcc4:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4423      	add	r3, r4
 800fcca:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800fccc:	7fbb      	ldrb	r3, [r7, #30]
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	7f7b      	ldrb	r3, [r7, #29]
 800fcd2:	b299      	uxth	r1, r3
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	fb11 f303 	smulbb	r3, r1, r3
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	4413      	add	r3, r2
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	4b37      	ldr	r3, [pc, #220]	; (800fdc0 <updateStringItem+0x14c0>)
 800fce4:	88db      	ldrh	r3, [r3, #6]
 800fce6:	4413      	add	r3, r2
 800fce8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fcea:	3301      	adds	r3, #1
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcf2:	9200      	str	r2, [sp, #0]
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	4631      	mov	r1, r6
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f7f8 fec7 	bl	8008a8c <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fcfe:	7efb      	ldrb	r3, [r7, #27]
 800fd00:	b29c      	uxth	r4, r3
 800fd02:	7fbb      	ldrb	r3, [r7, #30]
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	7f7b      	ldrb	r3, [r7, #29]
 800fd08:	b299      	uxth	r1, r3
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	fb11 f303 	smulbb	r3, r1, r3
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	4413      	add	r3, r2
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	3301      	adds	r3, #1
 800fd1a:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	011b      	lsls	r3, r3, #4
 800fd20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd24:	4a25      	ldr	r2, [pc, #148]	; (800fdbc <updateStringItem+0x14bc>)
 800fd26:	4413      	add	r3, r2
 800fd28:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fd2a:	4925      	ldr	r1, [pc, #148]	; (800fdc0 <updateStringItem+0x14c0>)
 800fd2c:	ab02      	add	r3, sp, #8
 800fd2e:	c903      	ldmia	r1, {r0, r1}
 800fd30:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd34:	2310      	movs	r3, #16
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4629      	mov	r1, r5
 800fd42:	4620      	mov	r0, r4
 800fd44:	f7fc fa20 	bl	800c188 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fd48:	7efb      	ldrb	r3, [r7, #27]
 800fd4a:	b29c      	uxth	r4, r3
 800fd4c:	7fbb      	ldrb	r3, [r7, #30]
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	7f7b      	ldrb	r3, [r7, #29]
 800fd52:	b299      	uxth	r1, r3
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	3b01      	subs	r3, #1
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	fb11 f303 	smulbb	r3, r1, r3
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	4413      	add	r3, r2
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	3301      	adds	r3, #1
 800fd66:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	011b      	lsls	r3, r3, #4
 800fd6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd72:	4a12      	ldr	r2, [pc, #72]	; (800fdbc <updateStringItem+0x14bc>)
 800fd74:	4413      	add	r3, r2
 800fd76:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fd78:	4911      	ldr	r1, [pc, #68]	; (800fdc0 <updateStringItem+0x14c0>)
 800fd7a:	ab02      	add	r3, sp, #8
 800fd7c:	c903      	ldmia	r1, {r0, r1}
 800fd7e:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd82:	2310      	movs	r3, #16
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	4629      	mov	r1, r5
 800fd90:	4620      	mov	r0, r4
 800fd92:	f7fc f9f9 	bl	800c188 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	617b      	str	r3, [r7, #20]
 800fd9c:	4b07      	ldr	r3, [pc, #28]	; (800fdbc <updateStringItem+0x14bc>)
 800fd9e:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800fda2:	461a      	mov	r2, r3
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	4293      	cmp	r3, r2
 800fda8:	f6fe add8 	blt.w	800e95c <updateStringItem+0x5c>
				}
			}
		}
	}
}
 800fdac:	bf00      	nop
 800fdae:	bf00      	nop
 800fdb0:	3724      	adds	r7, #36	; 0x24
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	2400a5ac 	.word	0x2400a5ac
 800fdbc:	2400b020 	.word	0x2400b020
 800fdc0:	24000010 	.word	0x24000010

0800fdc4 <__assert_func>:
 800fdc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdc6:	4614      	mov	r4, r2
 800fdc8:	461a      	mov	r2, r3
 800fdca:	4b09      	ldr	r3, [pc, #36]	; (800fdf0 <__assert_func+0x2c>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4605      	mov	r5, r0
 800fdd0:	68d8      	ldr	r0, [r3, #12]
 800fdd2:	b14c      	cbz	r4, 800fde8 <__assert_func+0x24>
 800fdd4:	4b07      	ldr	r3, [pc, #28]	; (800fdf4 <__assert_func+0x30>)
 800fdd6:	9100      	str	r1, [sp, #0]
 800fdd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fddc:	4906      	ldr	r1, [pc, #24]	; (800fdf8 <__assert_func+0x34>)
 800fdde:	462b      	mov	r3, r5
 800fde0:	f000 f814 	bl	800fe0c <fiprintf>
 800fde4:	f002 f92e 	bl	8012044 <abort>
 800fde8:	4b04      	ldr	r3, [pc, #16]	; (800fdfc <__assert_func+0x38>)
 800fdea:	461c      	mov	r4, r3
 800fdec:	e7f3      	b.n	800fdd6 <__assert_func+0x12>
 800fdee:	bf00      	nop
 800fdf0:	2400a0e8 	.word	0x2400a0e8
 800fdf4:	0801d4a3 	.word	0x0801d4a3
 800fdf8:	0801d4b0 	.word	0x0801d4b0
 800fdfc:	0801d4de 	.word	0x0801d4de

0800fe00 <__errno>:
 800fe00:	4b01      	ldr	r3, [pc, #4]	; (800fe08 <__errno+0x8>)
 800fe02:	6818      	ldr	r0, [r3, #0]
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	2400a0e8 	.word	0x2400a0e8

0800fe0c <fiprintf>:
 800fe0c:	b40e      	push	{r1, r2, r3}
 800fe0e:	b503      	push	{r0, r1, lr}
 800fe10:	4601      	mov	r1, r0
 800fe12:	ab03      	add	r3, sp, #12
 800fe14:	4805      	ldr	r0, [pc, #20]	; (800fe2c <fiprintf+0x20>)
 800fe16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe1a:	6800      	ldr	r0, [r0, #0]
 800fe1c:	9301      	str	r3, [sp, #4]
 800fe1e:	f000 f93f 	bl	80100a0 <_vfiprintf_r>
 800fe22:	b002      	add	sp, #8
 800fe24:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe28:	b003      	add	sp, #12
 800fe2a:	4770      	bx	lr
 800fe2c:	2400a0e8 	.word	0x2400a0e8

0800fe30 <__libc_init_array>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	4d0d      	ldr	r5, [pc, #52]	; (800fe68 <__libc_init_array+0x38>)
 800fe34:	4c0d      	ldr	r4, [pc, #52]	; (800fe6c <__libc_init_array+0x3c>)
 800fe36:	1b64      	subs	r4, r4, r5
 800fe38:	10a4      	asrs	r4, r4, #2
 800fe3a:	2600      	movs	r6, #0
 800fe3c:	42a6      	cmp	r6, r4
 800fe3e:	d109      	bne.n	800fe54 <__libc_init_array+0x24>
 800fe40:	4d0b      	ldr	r5, [pc, #44]	; (800fe70 <__libc_init_array+0x40>)
 800fe42:	4c0c      	ldr	r4, [pc, #48]	; (800fe74 <__libc_init_array+0x44>)
 800fe44:	f004 fc7c 	bl	8014740 <_init>
 800fe48:	1b64      	subs	r4, r4, r5
 800fe4a:	10a4      	asrs	r4, r4, #2
 800fe4c:	2600      	movs	r6, #0
 800fe4e:	42a6      	cmp	r6, r4
 800fe50:	d105      	bne.n	800fe5e <__libc_init_array+0x2e>
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
 800fe54:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe58:	4798      	blx	r3
 800fe5a:	3601      	adds	r6, #1
 800fe5c:	e7ee      	b.n	800fe3c <__libc_init_array+0xc>
 800fe5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe62:	4798      	blx	r3
 800fe64:	3601      	adds	r6, #1
 800fe66:	e7f2      	b.n	800fe4e <__libc_init_array+0x1e>
 800fe68:	0801d95c 	.word	0x0801d95c
 800fe6c:	0801d95c 	.word	0x0801d95c
 800fe70:	0801d95c 	.word	0x0801d95c
 800fe74:	0801d960 	.word	0x0801d960

0800fe78 <malloc>:
 800fe78:	4b02      	ldr	r3, [pc, #8]	; (800fe84 <malloc+0xc>)
 800fe7a:	4601      	mov	r1, r0
 800fe7c:	6818      	ldr	r0, [r3, #0]
 800fe7e:	f000 b88b 	b.w	800ff98 <_malloc_r>
 800fe82:	bf00      	nop
 800fe84:	2400a0e8 	.word	0x2400a0e8

0800fe88 <free>:
 800fe88:	4b02      	ldr	r3, [pc, #8]	; (800fe94 <free+0xc>)
 800fe8a:	4601      	mov	r1, r0
 800fe8c:	6818      	ldr	r0, [r3, #0]
 800fe8e:	f000 b833 	b.w	800fef8 <_free_r>
 800fe92:	bf00      	nop
 800fe94:	2400a0e8 	.word	0x2400a0e8

0800fe98 <memcpy>:
 800fe98:	440a      	add	r2, r1
 800fe9a:	4291      	cmp	r1, r2
 800fe9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fea0:	d100      	bne.n	800fea4 <memcpy+0xc>
 800fea2:	4770      	bx	lr
 800fea4:	b510      	push	{r4, lr}
 800fea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800feaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feae:	4291      	cmp	r1, r2
 800feb0:	d1f9      	bne.n	800fea6 <memcpy+0xe>
 800feb2:	bd10      	pop	{r4, pc}

0800feb4 <memmove>:
 800feb4:	4288      	cmp	r0, r1
 800feb6:	b510      	push	{r4, lr}
 800feb8:	eb01 0402 	add.w	r4, r1, r2
 800febc:	d902      	bls.n	800fec4 <memmove+0x10>
 800febe:	4284      	cmp	r4, r0
 800fec0:	4623      	mov	r3, r4
 800fec2:	d807      	bhi.n	800fed4 <memmove+0x20>
 800fec4:	1e43      	subs	r3, r0, #1
 800fec6:	42a1      	cmp	r1, r4
 800fec8:	d008      	beq.n	800fedc <memmove+0x28>
 800feca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fece:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fed2:	e7f8      	b.n	800fec6 <memmove+0x12>
 800fed4:	4402      	add	r2, r0
 800fed6:	4601      	mov	r1, r0
 800fed8:	428a      	cmp	r2, r1
 800feda:	d100      	bne.n	800fede <memmove+0x2a>
 800fedc:	bd10      	pop	{r4, pc}
 800fede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fee6:	e7f7      	b.n	800fed8 <memmove+0x24>

0800fee8 <memset>:
 800fee8:	4402      	add	r2, r0
 800feea:	4603      	mov	r3, r0
 800feec:	4293      	cmp	r3, r2
 800feee:	d100      	bne.n	800fef2 <memset+0xa>
 800fef0:	4770      	bx	lr
 800fef2:	f803 1b01 	strb.w	r1, [r3], #1
 800fef6:	e7f9      	b.n	800feec <memset+0x4>

0800fef8 <_free_r>:
 800fef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fefa:	2900      	cmp	r1, #0
 800fefc:	d048      	beq.n	800ff90 <_free_r+0x98>
 800fefe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff02:	9001      	str	r0, [sp, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f1a1 0404 	sub.w	r4, r1, #4
 800ff0a:	bfb8      	it	lt
 800ff0c:	18e4      	addlt	r4, r4, r3
 800ff0e:	f003 fc51 	bl	80137b4 <__malloc_lock>
 800ff12:	4a20      	ldr	r2, [pc, #128]	; (800ff94 <_free_r+0x9c>)
 800ff14:	9801      	ldr	r0, [sp, #4]
 800ff16:	6813      	ldr	r3, [r2, #0]
 800ff18:	4615      	mov	r5, r2
 800ff1a:	b933      	cbnz	r3, 800ff2a <_free_r+0x32>
 800ff1c:	6063      	str	r3, [r4, #4]
 800ff1e:	6014      	str	r4, [r2, #0]
 800ff20:	b003      	add	sp, #12
 800ff22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff26:	f003 bc4b 	b.w	80137c0 <__malloc_unlock>
 800ff2a:	42a3      	cmp	r3, r4
 800ff2c:	d90b      	bls.n	800ff46 <_free_r+0x4e>
 800ff2e:	6821      	ldr	r1, [r4, #0]
 800ff30:	1862      	adds	r2, r4, r1
 800ff32:	4293      	cmp	r3, r2
 800ff34:	bf04      	itt	eq
 800ff36:	681a      	ldreq	r2, [r3, #0]
 800ff38:	685b      	ldreq	r3, [r3, #4]
 800ff3a:	6063      	str	r3, [r4, #4]
 800ff3c:	bf04      	itt	eq
 800ff3e:	1852      	addeq	r2, r2, r1
 800ff40:	6022      	streq	r2, [r4, #0]
 800ff42:	602c      	str	r4, [r5, #0]
 800ff44:	e7ec      	b.n	800ff20 <_free_r+0x28>
 800ff46:	461a      	mov	r2, r3
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	b10b      	cbz	r3, 800ff50 <_free_r+0x58>
 800ff4c:	42a3      	cmp	r3, r4
 800ff4e:	d9fa      	bls.n	800ff46 <_free_r+0x4e>
 800ff50:	6811      	ldr	r1, [r2, #0]
 800ff52:	1855      	adds	r5, r2, r1
 800ff54:	42a5      	cmp	r5, r4
 800ff56:	d10b      	bne.n	800ff70 <_free_r+0x78>
 800ff58:	6824      	ldr	r4, [r4, #0]
 800ff5a:	4421      	add	r1, r4
 800ff5c:	1854      	adds	r4, r2, r1
 800ff5e:	42a3      	cmp	r3, r4
 800ff60:	6011      	str	r1, [r2, #0]
 800ff62:	d1dd      	bne.n	800ff20 <_free_r+0x28>
 800ff64:	681c      	ldr	r4, [r3, #0]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	6053      	str	r3, [r2, #4]
 800ff6a:	4421      	add	r1, r4
 800ff6c:	6011      	str	r1, [r2, #0]
 800ff6e:	e7d7      	b.n	800ff20 <_free_r+0x28>
 800ff70:	d902      	bls.n	800ff78 <_free_r+0x80>
 800ff72:	230c      	movs	r3, #12
 800ff74:	6003      	str	r3, [r0, #0]
 800ff76:	e7d3      	b.n	800ff20 <_free_r+0x28>
 800ff78:	6825      	ldr	r5, [r4, #0]
 800ff7a:	1961      	adds	r1, r4, r5
 800ff7c:	428b      	cmp	r3, r1
 800ff7e:	bf04      	itt	eq
 800ff80:	6819      	ldreq	r1, [r3, #0]
 800ff82:	685b      	ldreq	r3, [r3, #4]
 800ff84:	6063      	str	r3, [r4, #4]
 800ff86:	bf04      	itt	eq
 800ff88:	1949      	addeq	r1, r1, r5
 800ff8a:	6021      	streq	r1, [r4, #0]
 800ff8c:	6054      	str	r4, [r2, #4]
 800ff8e:	e7c7      	b.n	800ff20 <_free_r+0x28>
 800ff90:	b003      	add	sp, #12
 800ff92:	bd30      	pop	{r4, r5, pc}
 800ff94:	2400a44c 	.word	0x2400a44c

0800ff98 <_malloc_r>:
 800ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9a:	1ccd      	adds	r5, r1, #3
 800ff9c:	f025 0503 	bic.w	r5, r5, #3
 800ffa0:	3508      	adds	r5, #8
 800ffa2:	2d0c      	cmp	r5, #12
 800ffa4:	bf38      	it	cc
 800ffa6:	250c      	movcc	r5, #12
 800ffa8:	2d00      	cmp	r5, #0
 800ffaa:	4606      	mov	r6, r0
 800ffac:	db01      	blt.n	800ffb2 <_malloc_r+0x1a>
 800ffae:	42a9      	cmp	r1, r5
 800ffb0:	d903      	bls.n	800ffba <_malloc_r+0x22>
 800ffb2:	230c      	movs	r3, #12
 800ffb4:	6033      	str	r3, [r6, #0]
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffba:	f003 fbfb 	bl	80137b4 <__malloc_lock>
 800ffbe:	4921      	ldr	r1, [pc, #132]	; (8010044 <_malloc_r+0xac>)
 800ffc0:	680a      	ldr	r2, [r1, #0]
 800ffc2:	4614      	mov	r4, r2
 800ffc4:	b99c      	cbnz	r4, 800ffee <_malloc_r+0x56>
 800ffc6:	4f20      	ldr	r7, [pc, #128]	; (8010048 <_malloc_r+0xb0>)
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	b923      	cbnz	r3, 800ffd6 <_malloc_r+0x3e>
 800ffcc:	4621      	mov	r1, r4
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f001 f86a 	bl	80110a8 <_sbrk_r>
 800ffd4:	6038      	str	r0, [r7, #0]
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f001 f865 	bl	80110a8 <_sbrk_r>
 800ffde:	1c43      	adds	r3, r0, #1
 800ffe0:	d123      	bne.n	801002a <_malloc_r+0x92>
 800ffe2:	230c      	movs	r3, #12
 800ffe4:	6033      	str	r3, [r6, #0]
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f003 fbea 	bl	80137c0 <__malloc_unlock>
 800ffec:	e7e3      	b.n	800ffb6 <_malloc_r+0x1e>
 800ffee:	6823      	ldr	r3, [r4, #0]
 800fff0:	1b5b      	subs	r3, r3, r5
 800fff2:	d417      	bmi.n	8010024 <_malloc_r+0x8c>
 800fff4:	2b0b      	cmp	r3, #11
 800fff6:	d903      	bls.n	8010000 <_malloc_r+0x68>
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	441c      	add	r4, r3
 800fffc:	6025      	str	r5, [r4, #0]
 800fffe:	e004      	b.n	801000a <_malloc_r+0x72>
 8010000:	6863      	ldr	r3, [r4, #4]
 8010002:	42a2      	cmp	r2, r4
 8010004:	bf0c      	ite	eq
 8010006:	600b      	streq	r3, [r1, #0]
 8010008:	6053      	strne	r3, [r2, #4]
 801000a:	4630      	mov	r0, r6
 801000c:	f003 fbd8 	bl	80137c0 <__malloc_unlock>
 8010010:	f104 000b 	add.w	r0, r4, #11
 8010014:	1d23      	adds	r3, r4, #4
 8010016:	f020 0007 	bic.w	r0, r0, #7
 801001a:	1ac2      	subs	r2, r0, r3
 801001c:	d0cc      	beq.n	800ffb8 <_malloc_r+0x20>
 801001e:	1a1b      	subs	r3, r3, r0
 8010020:	50a3      	str	r3, [r4, r2]
 8010022:	e7c9      	b.n	800ffb8 <_malloc_r+0x20>
 8010024:	4622      	mov	r2, r4
 8010026:	6864      	ldr	r4, [r4, #4]
 8010028:	e7cc      	b.n	800ffc4 <_malloc_r+0x2c>
 801002a:	1cc4      	adds	r4, r0, #3
 801002c:	f024 0403 	bic.w	r4, r4, #3
 8010030:	42a0      	cmp	r0, r4
 8010032:	d0e3      	beq.n	800fffc <_malloc_r+0x64>
 8010034:	1a21      	subs	r1, r4, r0
 8010036:	4630      	mov	r0, r6
 8010038:	f001 f836 	bl	80110a8 <_sbrk_r>
 801003c:	3001      	adds	r0, #1
 801003e:	d1dd      	bne.n	800fffc <_malloc_r+0x64>
 8010040:	e7cf      	b.n	800ffe2 <_malloc_r+0x4a>
 8010042:	bf00      	nop
 8010044:	2400a44c 	.word	0x2400a44c
 8010048:	2400a450 	.word	0x2400a450

0801004c <__sfputc_r>:
 801004c:	6893      	ldr	r3, [r2, #8]
 801004e:	3b01      	subs	r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	b410      	push	{r4}
 8010054:	6093      	str	r3, [r2, #8]
 8010056:	da08      	bge.n	801006a <__sfputc_r+0x1e>
 8010058:	6994      	ldr	r4, [r2, #24]
 801005a:	42a3      	cmp	r3, r4
 801005c:	db01      	blt.n	8010062 <__sfputc_r+0x16>
 801005e:	290a      	cmp	r1, #10
 8010060:	d103      	bne.n	801006a <__sfputc_r+0x1e>
 8010062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010066:	f001 bf2d 	b.w	8011ec4 <__swbuf_r>
 801006a:	6813      	ldr	r3, [r2, #0]
 801006c:	1c58      	adds	r0, r3, #1
 801006e:	6010      	str	r0, [r2, #0]
 8010070:	7019      	strb	r1, [r3, #0]
 8010072:	4608      	mov	r0, r1
 8010074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010078:	4770      	bx	lr

0801007a <__sfputs_r>:
 801007a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007c:	4606      	mov	r6, r0
 801007e:	460f      	mov	r7, r1
 8010080:	4614      	mov	r4, r2
 8010082:	18d5      	adds	r5, r2, r3
 8010084:	42ac      	cmp	r4, r5
 8010086:	d101      	bne.n	801008c <__sfputs_r+0x12>
 8010088:	2000      	movs	r0, #0
 801008a:	e007      	b.n	801009c <__sfputs_r+0x22>
 801008c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010090:	463a      	mov	r2, r7
 8010092:	4630      	mov	r0, r6
 8010094:	f7ff ffda 	bl	801004c <__sfputc_r>
 8010098:	1c43      	adds	r3, r0, #1
 801009a:	d1f3      	bne.n	8010084 <__sfputs_r+0xa>
 801009c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100a0 <_vfiprintf_r>:
 80100a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100a4:	460d      	mov	r5, r1
 80100a6:	b09d      	sub	sp, #116	; 0x74
 80100a8:	4614      	mov	r4, r2
 80100aa:	4698      	mov	r8, r3
 80100ac:	4606      	mov	r6, r0
 80100ae:	b118      	cbz	r0, 80100b8 <_vfiprintf_r+0x18>
 80100b0:	6983      	ldr	r3, [r0, #24]
 80100b2:	b90b      	cbnz	r3, 80100b8 <_vfiprintf_r+0x18>
 80100b4:	f002 fef4 	bl	8012ea0 <__sinit>
 80100b8:	4b89      	ldr	r3, [pc, #548]	; (80102e0 <_vfiprintf_r+0x240>)
 80100ba:	429d      	cmp	r5, r3
 80100bc:	d11b      	bne.n	80100f6 <_vfiprintf_r+0x56>
 80100be:	6875      	ldr	r5, [r6, #4]
 80100c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100c2:	07d9      	lsls	r1, r3, #31
 80100c4:	d405      	bmi.n	80100d2 <_vfiprintf_r+0x32>
 80100c6:	89ab      	ldrh	r3, [r5, #12]
 80100c8:	059a      	lsls	r2, r3, #22
 80100ca:	d402      	bmi.n	80100d2 <_vfiprintf_r+0x32>
 80100cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ce:	f003 faf8 	bl	80136c2 <__retarget_lock_acquire_recursive>
 80100d2:	89ab      	ldrh	r3, [r5, #12]
 80100d4:	071b      	lsls	r3, r3, #28
 80100d6:	d501      	bpl.n	80100dc <_vfiprintf_r+0x3c>
 80100d8:	692b      	ldr	r3, [r5, #16]
 80100da:	b9eb      	cbnz	r3, 8010118 <_vfiprintf_r+0x78>
 80100dc:	4629      	mov	r1, r5
 80100de:	4630      	mov	r0, r6
 80100e0:	f001 ff42 	bl	8011f68 <__swsetup_r>
 80100e4:	b1c0      	cbz	r0, 8010118 <_vfiprintf_r+0x78>
 80100e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100e8:	07dc      	lsls	r4, r3, #31
 80100ea:	d50e      	bpl.n	801010a <_vfiprintf_r+0x6a>
 80100ec:	f04f 30ff 	mov.w	r0, #4294967295
 80100f0:	b01d      	add	sp, #116	; 0x74
 80100f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f6:	4b7b      	ldr	r3, [pc, #492]	; (80102e4 <_vfiprintf_r+0x244>)
 80100f8:	429d      	cmp	r5, r3
 80100fa:	d101      	bne.n	8010100 <_vfiprintf_r+0x60>
 80100fc:	68b5      	ldr	r5, [r6, #8]
 80100fe:	e7df      	b.n	80100c0 <_vfiprintf_r+0x20>
 8010100:	4b79      	ldr	r3, [pc, #484]	; (80102e8 <_vfiprintf_r+0x248>)
 8010102:	429d      	cmp	r5, r3
 8010104:	bf08      	it	eq
 8010106:	68f5      	ldreq	r5, [r6, #12]
 8010108:	e7da      	b.n	80100c0 <_vfiprintf_r+0x20>
 801010a:	89ab      	ldrh	r3, [r5, #12]
 801010c:	0598      	lsls	r0, r3, #22
 801010e:	d4ed      	bmi.n	80100ec <_vfiprintf_r+0x4c>
 8010110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010112:	f003 fad7 	bl	80136c4 <__retarget_lock_release_recursive>
 8010116:	e7e9      	b.n	80100ec <_vfiprintf_r+0x4c>
 8010118:	2300      	movs	r3, #0
 801011a:	9309      	str	r3, [sp, #36]	; 0x24
 801011c:	2320      	movs	r3, #32
 801011e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010122:	f8cd 800c 	str.w	r8, [sp, #12]
 8010126:	2330      	movs	r3, #48	; 0x30
 8010128:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102ec <_vfiprintf_r+0x24c>
 801012c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010130:	f04f 0901 	mov.w	r9, #1
 8010134:	4623      	mov	r3, r4
 8010136:	469a      	mov	sl, r3
 8010138:	f813 2b01 	ldrb.w	r2, [r3], #1
 801013c:	b10a      	cbz	r2, 8010142 <_vfiprintf_r+0xa2>
 801013e:	2a25      	cmp	r2, #37	; 0x25
 8010140:	d1f9      	bne.n	8010136 <_vfiprintf_r+0x96>
 8010142:	ebba 0b04 	subs.w	fp, sl, r4
 8010146:	d00b      	beq.n	8010160 <_vfiprintf_r+0xc0>
 8010148:	465b      	mov	r3, fp
 801014a:	4622      	mov	r2, r4
 801014c:	4629      	mov	r1, r5
 801014e:	4630      	mov	r0, r6
 8010150:	f7ff ff93 	bl	801007a <__sfputs_r>
 8010154:	3001      	adds	r0, #1
 8010156:	f000 80aa 	beq.w	80102ae <_vfiprintf_r+0x20e>
 801015a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801015c:	445a      	add	r2, fp
 801015e:	9209      	str	r2, [sp, #36]	; 0x24
 8010160:	f89a 3000 	ldrb.w	r3, [sl]
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 80a2 	beq.w	80102ae <_vfiprintf_r+0x20e>
 801016a:	2300      	movs	r3, #0
 801016c:	f04f 32ff 	mov.w	r2, #4294967295
 8010170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010174:	f10a 0a01 	add.w	sl, sl, #1
 8010178:	9304      	str	r3, [sp, #16]
 801017a:	9307      	str	r3, [sp, #28]
 801017c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010180:	931a      	str	r3, [sp, #104]	; 0x68
 8010182:	4654      	mov	r4, sl
 8010184:	2205      	movs	r2, #5
 8010186:	f814 1b01 	ldrb.w	r1, [r4], #1
 801018a:	4858      	ldr	r0, [pc, #352]	; (80102ec <_vfiprintf_r+0x24c>)
 801018c:	f7f0 f8c0 	bl	8000310 <memchr>
 8010190:	9a04      	ldr	r2, [sp, #16]
 8010192:	b9d8      	cbnz	r0, 80101cc <_vfiprintf_r+0x12c>
 8010194:	06d1      	lsls	r1, r2, #27
 8010196:	bf44      	itt	mi
 8010198:	2320      	movmi	r3, #32
 801019a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801019e:	0713      	lsls	r3, r2, #28
 80101a0:	bf44      	itt	mi
 80101a2:	232b      	movmi	r3, #43	; 0x2b
 80101a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101a8:	f89a 3000 	ldrb.w	r3, [sl]
 80101ac:	2b2a      	cmp	r3, #42	; 0x2a
 80101ae:	d015      	beq.n	80101dc <_vfiprintf_r+0x13c>
 80101b0:	9a07      	ldr	r2, [sp, #28]
 80101b2:	4654      	mov	r4, sl
 80101b4:	2000      	movs	r0, #0
 80101b6:	f04f 0c0a 	mov.w	ip, #10
 80101ba:	4621      	mov	r1, r4
 80101bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101c0:	3b30      	subs	r3, #48	; 0x30
 80101c2:	2b09      	cmp	r3, #9
 80101c4:	d94e      	bls.n	8010264 <_vfiprintf_r+0x1c4>
 80101c6:	b1b0      	cbz	r0, 80101f6 <_vfiprintf_r+0x156>
 80101c8:	9207      	str	r2, [sp, #28]
 80101ca:	e014      	b.n	80101f6 <_vfiprintf_r+0x156>
 80101cc:	eba0 0308 	sub.w	r3, r0, r8
 80101d0:	fa09 f303 	lsl.w	r3, r9, r3
 80101d4:	4313      	orrs	r3, r2
 80101d6:	9304      	str	r3, [sp, #16]
 80101d8:	46a2      	mov	sl, r4
 80101da:	e7d2      	b.n	8010182 <_vfiprintf_r+0xe2>
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	1d19      	adds	r1, r3, #4
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	9103      	str	r1, [sp, #12]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	bfbb      	ittet	lt
 80101e8:	425b      	neglt	r3, r3
 80101ea:	f042 0202 	orrlt.w	r2, r2, #2
 80101ee:	9307      	strge	r3, [sp, #28]
 80101f0:	9307      	strlt	r3, [sp, #28]
 80101f2:	bfb8      	it	lt
 80101f4:	9204      	strlt	r2, [sp, #16]
 80101f6:	7823      	ldrb	r3, [r4, #0]
 80101f8:	2b2e      	cmp	r3, #46	; 0x2e
 80101fa:	d10c      	bne.n	8010216 <_vfiprintf_r+0x176>
 80101fc:	7863      	ldrb	r3, [r4, #1]
 80101fe:	2b2a      	cmp	r3, #42	; 0x2a
 8010200:	d135      	bne.n	801026e <_vfiprintf_r+0x1ce>
 8010202:	9b03      	ldr	r3, [sp, #12]
 8010204:	1d1a      	adds	r2, r3, #4
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	9203      	str	r2, [sp, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	bfb8      	it	lt
 801020e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010212:	3402      	adds	r4, #2
 8010214:	9305      	str	r3, [sp, #20]
 8010216:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102fc <_vfiprintf_r+0x25c>
 801021a:	7821      	ldrb	r1, [r4, #0]
 801021c:	2203      	movs	r2, #3
 801021e:	4650      	mov	r0, sl
 8010220:	f7f0 f876 	bl	8000310 <memchr>
 8010224:	b140      	cbz	r0, 8010238 <_vfiprintf_r+0x198>
 8010226:	2340      	movs	r3, #64	; 0x40
 8010228:	eba0 000a 	sub.w	r0, r0, sl
 801022c:	fa03 f000 	lsl.w	r0, r3, r0
 8010230:	9b04      	ldr	r3, [sp, #16]
 8010232:	4303      	orrs	r3, r0
 8010234:	3401      	adds	r4, #1
 8010236:	9304      	str	r3, [sp, #16]
 8010238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801023c:	482c      	ldr	r0, [pc, #176]	; (80102f0 <_vfiprintf_r+0x250>)
 801023e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010242:	2206      	movs	r2, #6
 8010244:	f7f0 f864 	bl	8000310 <memchr>
 8010248:	2800      	cmp	r0, #0
 801024a:	d03f      	beq.n	80102cc <_vfiprintf_r+0x22c>
 801024c:	4b29      	ldr	r3, [pc, #164]	; (80102f4 <_vfiprintf_r+0x254>)
 801024e:	bb1b      	cbnz	r3, 8010298 <_vfiprintf_r+0x1f8>
 8010250:	9b03      	ldr	r3, [sp, #12]
 8010252:	3307      	adds	r3, #7
 8010254:	f023 0307 	bic.w	r3, r3, #7
 8010258:	3308      	adds	r3, #8
 801025a:	9303      	str	r3, [sp, #12]
 801025c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801025e:	443b      	add	r3, r7
 8010260:	9309      	str	r3, [sp, #36]	; 0x24
 8010262:	e767      	b.n	8010134 <_vfiprintf_r+0x94>
 8010264:	fb0c 3202 	mla	r2, ip, r2, r3
 8010268:	460c      	mov	r4, r1
 801026a:	2001      	movs	r0, #1
 801026c:	e7a5      	b.n	80101ba <_vfiprintf_r+0x11a>
 801026e:	2300      	movs	r3, #0
 8010270:	3401      	adds	r4, #1
 8010272:	9305      	str	r3, [sp, #20]
 8010274:	4619      	mov	r1, r3
 8010276:	f04f 0c0a 	mov.w	ip, #10
 801027a:	4620      	mov	r0, r4
 801027c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010280:	3a30      	subs	r2, #48	; 0x30
 8010282:	2a09      	cmp	r2, #9
 8010284:	d903      	bls.n	801028e <_vfiprintf_r+0x1ee>
 8010286:	2b00      	cmp	r3, #0
 8010288:	d0c5      	beq.n	8010216 <_vfiprintf_r+0x176>
 801028a:	9105      	str	r1, [sp, #20]
 801028c:	e7c3      	b.n	8010216 <_vfiprintf_r+0x176>
 801028e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010292:	4604      	mov	r4, r0
 8010294:	2301      	movs	r3, #1
 8010296:	e7f0      	b.n	801027a <_vfiprintf_r+0x1da>
 8010298:	ab03      	add	r3, sp, #12
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	462a      	mov	r2, r5
 801029e:	4b16      	ldr	r3, [pc, #88]	; (80102f8 <_vfiprintf_r+0x258>)
 80102a0:	a904      	add	r1, sp, #16
 80102a2:	4630      	mov	r0, r6
 80102a4:	f000 f8bc 	bl	8010420 <_printf_float>
 80102a8:	4607      	mov	r7, r0
 80102aa:	1c78      	adds	r0, r7, #1
 80102ac:	d1d6      	bne.n	801025c <_vfiprintf_r+0x1bc>
 80102ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102b0:	07d9      	lsls	r1, r3, #31
 80102b2:	d405      	bmi.n	80102c0 <_vfiprintf_r+0x220>
 80102b4:	89ab      	ldrh	r3, [r5, #12]
 80102b6:	059a      	lsls	r2, r3, #22
 80102b8:	d402      	bmi.n	80102c0 <_vfiprintf_r+0x220>
 80102ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102bc:	f003 fa02 	bl	80136c4 <__retarget_lock_release_recursive>
 80102c0:	89ab      	ldrh	r3, [r5, #12]
 80102c2:	065b      	lsls	r3, r3, #25
 80102c4:	f53f af12 	bmi.w	80100ec <_vfiprintf_r+0x4c>
 80102c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102ca:	e711      	b.n	80100f0 <_vfiprintf_r+0x50>
 80102cc:	ab03      	add	r3, sp, #12
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	462a      	mov	r2, r5
 80102d2:	4b09      	ldr	r3, [pc, #36]	; (80102f8 <_vfiprintf_r+0x258>)
 80102d4:	a904      	add	r1, sp, #16
 80102d6:	4630      	mov	r0, r6
 80102d8:	f000 fb2e 	bl	8010938 <_printf_i>
 80102dc:	e7e4      	b.n	80102a8 <_vfiprintf_r+0x208>
 80102de:	bf00      	nop
 80102e0:	0801d738 	.word	0x0801d738
 80102e4:	0801d758 	.word	0x0801d758
 80102e8:	0801d718 	.word	0x0801d718
 80102ec:	0801d4e4 	.word	0x0801d4e4
 80102f0:	0801d4ee 	.word	0x0801d4ee
 80102f4:	08010421 	.word	0x08010421
 80102f8:	0801007b 	.word	0x0801007b
 80102fc:	0801d4ea 	.word	0x0801d4ea

08010300 <__cvt>:
 8010300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010302:	ed2d 8b02 	vpush	{d8}
 8010306:	eeb0 8b40 	vmov.f64	d8, d0
 801030a:	b085      	sub	sp, #20
 801030c:	4617      	mov	r7, r2
 801030e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010310:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010312:	ee18 2a90 	vmov	r2, s17
 8010316:	f025 0520 	bic.w	r5, r5, #32
 801031a:	2a00      	cmp	r2, #0
 801031c:	bfb6      	itet	lt
 801031e:	222d      	movlt	r2, #45	; 0x2d
 8010320:	2200      	movge	r2, #0
 8010322:	eeb1 8b40 	vneglt.f64	d8, d0
 8010326:	2d46      	cmp	r5, #70	; 0x46
 8010328:	460c      	mov	r4, r1
 801032a:	701a      	strb	r2, [r3, #0]
 801032c:	d004      	beq.n	8010338 <__cvt+0x38>
 801032e:	2d45      	cmp	r5, #69	; 0x45
 8010330:	d100      	bne.n	8010334 <__cvt+0x34>
 8010332:	3401      	adds	r4, #1
 8010334:	2102      	movs	r1, #2
 8010336:	e000      	b.n	801033a <__cvt+0x3a>
 8010338:	2103      	movs	r1, #3
 801033a:	ab03      	add	r3, sp, #12
 801033c:	9301      	str	r3, [sp, #4]
 801033e:	ab02      	add	r3, sp, #8
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	4622      	mov	r2, r4
 8010344:	4633      	mov	r3, r6
 8010346:	eeb0 0b48 	vmov.f64	d0, d8
 801034a:	f001 ff0d 	bl	8012168 <_dtoa_r>
 801034e:	2d47      	cmp	r5, #71	; 0x47
 8010350:	d109      	bne.n	8010366 <__cvt+0x66>
 8010352:	07fb      	lsls	r3, r7, #31
 8010354:	d407      	bmi.n	8010366 <__cvt+0x66>
 8010356:	9b03      	ldr	r3, [sp, #12]
 8010358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801035a:	1a1b      	subs	r3, r3, r0
 801035c:	6013      	str	r3, [r2, #0]
 801035e:	b005      	add	sp, #20
 8010360:	ecbd 8b02 	vpop	{d8}
 8010364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010366:	2d46      	cmp	r5, #70	; 0x46
 8010368:	eb00 0204 	add.w	r2, r0, r4
 801036c:	d10c      	bne.n	8010388 <__cvt+0x88>
 801036e:	7803      	ldrb	r3, [r0, #0]
 8010370:	2b30      	cmp	r3, #48	; 0x30
 8010372:	d107      	bne.n	8010384 <__cvt+0x84>
 8010374:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037c:	bf1c      	itt	ne
 801037e:	f1c4 0401 	rsbne	r4, r4, #1
 8010382:	6034      	strne	r4, [r6, #0]
 8010384:	6833      	ldr	r3, [r6, #0]
 8010386:	441a      	add	r2, r3
 8010388:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010390:	bf08      	it	eq
 8010392:	9203      	streq	r2, [sp, #12]
 8010394:	2130      	movs	r1, #48	; 0x30
 8010396:	9b03      	ldr	r3, [sp, #12]
 8010398:	4293      	cmp	r3, r2
 801039a:	d2dc      	bcs.n	8010356 <__cvt+0x56>
 801039c:	1c5c      	adds	r4, r3, #1
 801039e:	9403      	str	r4, [sp, #12]
 80103a0:	7019      	strb	r1, [r3, #0]
 80103a2:	e7f8      	b.n	8010396 <__cvt+0x96>

080103a4 <__exponent>:
 80103a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103a6:	4603      	mov	r3, r0
 80103a8:	2900      	cmp	r1, #0
 80103aa:	bfb8      	it	lt
 80103ac:	4249      	neglt	r1, r1
 80103ae:	f803 2b02 	strb.w	r2, [r3], #2
 80103b2:	bfb4      	ite	lt
 80103b4:	222d      	movlt	r2, #45	; 0x2d
 80103b6:	222b      	movge	r2, #43	; 0x2b
 80103b8:	2909      	cmp	r1, #9
 80103ba:	7042      	strb	r2, [r0, #1]
 80103bc:	dd2a      	ble.n	8010414 <__exponent+0x70>
 80103be:	f10d 0407 	add.w	r4, sp, #7
 80103c2:	46a4      	mov	ip, r4
 80103c4:	270a      	movs	r7, #10
 80103c6:	46a6      	mov	lr, r4
 80103c8:	460a      	mov	r2, r1
 80103ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80103ce:	fb07 1516 	mls	r5, r7, r6, r1
 80103d2:	3530      	adds	r5, #48	; 0x30
 80103d4:	2a63      	cmp	r2, #99	; 0x63
 80103d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80103da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80103de:	4631      	mov	r1, r6
 80103e0:	dcf1      	bgt.n	80103c6 <__exponent+0x22>
 80103e2:	3130      	adds	r1, #48	; 0x30
 80103e4:	f1ae 0502 	sub.w	r5, lr, #2
 80103e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80103ec:	1c44      	adds	r4, r0, #1
 80103ee:	4629      	mov	r1, r5
 80103f0:	4561      	cmp	r1, ip
 80103f2:	d30a      	bcc.n	801040a <__exponent+0x66>
 80103f4:	f10d 0209 	add.w	r2, sp, #9
 80103f8:	eba2 020e 	sub.w	r2, r2, lr
 80103fc:	4565      	cmp	r5, ip
 80103fe:	bf88      	it	hi
 8010400:	2200      	movhi	r2, #0
 8010402:	4413      	add	r3, r2
 8010404:	1a18      	subs	r0, r3, r0
 8010406:	b003      	add	sp, #12
 8010408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801040a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801040e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010412:	e7ed      	b.n	80103f0 <__exponent+0x4c>
 8010414:	2330      	movs	r3, #48	; 0x30
 8010416:	3130      	adds	r1, #48	; 0x30
 8010418:	7083      	strb	r3, [r0, #2]
 801041a:	70c1      	strb	r1, [r0, #3]
 801041c:	1d03      	adds	r3, r0, #4
 801041e:	e7f1      	b.n	8010404 <__exponent+0x60>

08010420 <_printf_float>:
 8010420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010424:	b08b      	sub	sp, #44	; 0x2c
 8010426:	460c      	mov	r4, r1
 8010428:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801042c:	4616      	mov	r6, r2
 801042e:	461f      	mov	r7, r3
 8010430:	4605      	mov	r5, r0
 8010432:	f003 f941 	bl	80136b8 <_localeconv_r>
 8010436:	f8d0 b000 	ldr.w	fp, [r0]
 801043a:	4658      	mov	r0, fp
 801043c:	f7ef ff5a 	bl	80002f4 <strlen>
 8010440:	2300      	movs	r3, #0
 8010442:	9308      	str	r3, [sp, #32]
 8010444:	f8d8 3000 	ldr.w	r3, [r8]
 8010448:	f894 9018 	ldrb.w	r9, [r4, #24]
 801044c:	6822      	ldr	r2, [r4, #0]
 801044e:	3307      	adds	r3, #7
 8010450:	f023 0307 	bic.w	r3, r3, #7
 8010454:	f103 0108 	add.w	r1, r3, #8
 8010458:	f8c8 1000 	str.w	r1, [r8]
 801045c:	4682      	mov	sl, r0
 801045e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010462:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010466:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80106c8 <_printf_float+0x2a8>
 801046a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801046e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010472:	eeb4 6b47 	vcmp.f64	d6, d7
 8010476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047a:	dd24      	ble.n	80104c6 <_printf_float+0xa6>
 801047c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010484:	d502      	bpl.n	801048c <_printf_float+0x6c>
 8010486:	232d      	movs	r3, #45	; 0x2d
 8010488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801048c:	4b90      	ldr	r3, [pc, #576]	; (80106d0 <_printf_float+0x2b0>)
 801048e:	4891      	ldr	r0, [pc, #580]	; (80106d4 <_printf_float+0x2b4>)
 8010490:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010494:	bf94      	ite	ls
 8010496:	4698      	movls	r8, r3
 8010498:	4680      	movhi	r8, r0
 801049a:	2303      	movs	r3, #3
 801049c:	6123      	str	r3, [r4, #16]
 801049e:	f022 0204 	bic.w	r2, r2, #4
 80104a2:	2300      	movs	r3, #0
 80104a4:	6022      	str	r2, [r4, #0]
 80104a6:	9304      	str	r3, [sp, #16]
 80104a8:	9700      	str	r7, [sp, #0]
 80104aa:	4633      	mov	r3, r6
 80104ac:	aa09      	add	r2, sp, #36	; 0x24
 80104ae:	4621      	mov	r1, r4
 80104b0:	4628      	mov	r0, r5
 80104b2:	f000 f9d3 	bl	801085c <_printf_common>
 80104b6:	3001      	adds	r0, #1
 80104b8:	f040 808a 	bne.w	80105d0 <_printf_float+0x1b0>
 80104bc:	f04f 30ff 	mov.w	r0, #4294967295
 80104c0:	b00b      	add	sp, #44	; 0x2c
 80104c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80104ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ce:	d709      	bvc.n	80104e4 <_printf_float+0xc4>
 80104d0:	ee10 3a90 	vmov	r3, s1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	bfbc      	itt	lt
 80104d8:	232d      	movlt	r3, #45	; 0x2d
 80104da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80104de:	487e      	ldr	r0, [pc, #504]	; (80106d8 <_printf_float+0x2b8>)
 80104e0:	4b7e      	ldr	r3, [pc, #504]	; (80106dc <_printf_float+0x2bc>)
 80104e2:	e7d5      	b.n	8010490 <_printf_float+0x70>
 80104e4:	6863      	ldr	r3, [r4, #4]
 80104e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80104ea:	9104      	str	r1, [sp, #16]
 80104ec:	1c59      	adds	r1, r3, #1
 80104ee:	d13c      	bne.n	801056a <_printf_float+0x14a>
 80104f0:	2306      	movs	r3, #6
 80104f2:	6063      	str	r3, [r4, #4]
 80104f4:	2300      	movs	r3, #0
 80104f6:	9303      	str	r3, [sp, #12]
 80104f8:	ab08      	add	r3, sp, #32
 80104fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80104fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010502:	ab07      	add	r3, sp, #28
 8010504:	6861      	ldr	r1, [r4, #4]
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	6022      	str	r2, [r4, #0]
 801050a:	f10d 031b 	add.w	r3, sp, #27
 801050e:	4628      	mov	r0, r5
 8010510:	f7ff fef6 	bl	8010300 <__cvt>
 8010514:	9b04      	ldr	r3, [sp, #16]
 8010516:	9907      	ldr	r1, [sp, #28]
 8010518:	2b47      	cmp	r3, #71	; 0x47
 801051a:	4680      	mov	r8, r0
 801051c:	d108      	bne.n	8010530 <_printf_float+0x110>
 801051e:	1cc8      	adds	r0, r1, #3
 8010520:	db02      	blt.n	8010528 <_printf_float+0x108>
 8010522:	6863      	ldr	r3, [r4, #4]
 8010524:	4299      	cmp	r1, r3
 8010526:	dd41      	ble.n	80105ac <_printf_float+0x18c>
 8010528:	f1a9 0902 	sub.w	r9, r9, #2
 801052c:	fa5f f989 	uxtb.w	r9, r9
 8010530:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010534:	d820      	bhi.n	8010578 <_printf_float+0x158>
 8010536:	3901      	subs	r1, #1
 8010538:	464a      	mov	r2, r9
 801053a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801053e:	9107      	str	r1, [sp, #28]
 8010540:	f7ff ff30 	bl	80103a4 <__exponent>
 8010544:	9a08      	ldr	r2, [sp, #32]
 8010546:	9004      	str	r0, [sp, #16]
 8010548:	1813      	adds	r3, r2, r0
 801054a:	2a01      	cmp	r2, #1
 801054c:	6123      	str	r3, [r4, #16]
 801054e:	dc02      	bgt.n	8010556 <_printf_float+0x136>
 8010550:	6822      	ldr	r2, [r4, #0]
 8010552:	07d2      	lsls	r2, r2, #31
 8010554:	d501      	bpl.n	801055a <_printf_float+0x13a>
 8010556:	3301      	adds	r3, #1
 8010558:	6123      	str	r3, [r4, #16]
 801055a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d0a2      	beq.n	80104a8 <_printf_float+0x88>
 8010562:	232d      	movs	r3, #45	; 0x2d
 8010564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010568:	e79e      	b.n	80104a8 <_printf_float+0x88>
 801056a:	9904      	ldr	r1, [sp, #16]
 801056c:	2947      	cmp	r1, #71	; 0x47
 801056e:	d1c1      	bne.n	80104f4 <_printf_float+0xd4>
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1bf      	bne.n	80104f4 <_printf_float+0xd4>
 8010574:	2301      	movs	r3, #1
 8010576:	e7bc      	b.n	80104f2 <_printf_float+0xd2>
 8010578:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801057c:	d118      	bne.n	80105b0 <_printf_float+0x190>
 801057e:	2900      	cmp	r1, #0
 8010580:	6863      	ldr	r3, [r4, #4]
 8010582:	dd0b      	ble.n	801059c <_printf_float+0x17c>
 8010584:	6121      	str	r1, [r4, #16]
 8010586:	b913      	cbnz	r3, 801058e <_printf_float+0x16e>
 8010588:	6822      	ldr	r2, [r4, #0]
 801058a:	07d0      	lsls	r0, r2, #31
 801058c:	d502      	bpl.n	8010594 <_printf_float+0x174>
 801058e:	3301      	adds	r3, #1
 8010590:	440b      	add	r3, r1
 8010592:	6123      	str	r3, [r4, #16]
 8010594:	2300      	movs	r3, #0
 8010596:	65a1      	str	r1, [r4, #88]	; 0x58
 8010598:	9304      	str	r3, [sp, #16]
 801059a:	e7de      	b.n	801055a <_printf_float+0x13a>
 801059c:	b913      	cbnz	r3, 80105a4 <_printf_float+0x184>
 801059e:	6822      	ldr	r2, [r4, #0]
 80105a0:	07d2      	lsls	r2, r2, #31
 80105a2:	d501      	bpl.n	80105a8 <_printf_float+0x188>
 80105a4:	3302      	adds	r3, #2
 80105a6:	e7f4      	b.n	8010592 <_printf_float+0x172>
 80105a8:	2301      	movs	r3, #1
 80105aa:	e7f2      	b.n	8010592 <_printf_float+0x172>
 80105ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80105b0:	9b08      	ldr	r3, [sp, #32]
 80105b2:	4299      	cmp	r1, r3
 80105b4:	db05      	blt.n	80105c2 <_printf_float+0x1a2>
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	6121      	str	r1, [r4, #16]
 80105ba:	07d8      	lsls	r0, r3, #31
 80105bc:	d5ea      	bpl.n	8010594 <_printf_float+0x174>
 80105be:	1c4b      	adds	r3, r1, #1
 80105c0:	e7e7      	b.n	8010592 <_printf_float+0x172>
 80105c2:	2900      	cmp	r1, #0
 80105c4:	bfd4      	ite	le
 80105c6:	f1c1 0202 	rsble	r2, r1, #2
 80105ca:	2201      	movgt	r2, #1
 80105cc:	4413      	add	r3, r2
 80105ce:	e7e0      	b.n	8010592 <_printf_float+0x172>
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	055a      	lsls	r2, r3, #21
 80105d4:	d407      	bmi.n	80105e6 <_printf_float+0x1c6>
 80105d6:	6923      	ldr	r3, [r4, #16]
 80105d8:	4642      	mov	r2, r8
 80105da:	4631      	mov	r1, r6
 80105dc:	4628      	mov	r0, r5
 80105de:	47b8      	blx	r7
 80105e0:	3001      	adds	r0, #1
 80105e2:	d12a      	bne.n	801063a <_printf_float+0x21a>
 80105e4:	e76a      	b.n	80104bc <_printf_float+0x9c>
 80105e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80105ea:	f240 80e2 	bls.w	80107b2 <_printf_float+0x392>
 80105ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80105f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80105f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fa:	d133      	bne.n	8010664 <_printf_float+0x244>
 80105fc:	4a38      	ldr	r2, [pc, #224]	; (80106e0 <_printf_float+0x2c0>)
 80105fe:	2301      	movs	r3, #1
 8010600:	4631      	mov	r1, r6
 8010602:	4628      	mov	r0, r5
 8010604:	47b8      	blx	r7
 8010606:	3001      	adds	r0, #1
 8010608:	f43f af58 	beq.w	80104bc <_printf_float+0x9c>
 801060c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010610:	429a      	cmp	r2, r3
 8010612:	db02      	blt.n	801061a <_printf_float+0x1fa>
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	07d8      	lsls	r0, r3, #31
 8010618:	d50f      	bpl.n	801063a <_printf_float+0x21a>
 801061a:	4653      	mov	r3, sl
 801061c:	465a      	mov	r2, fp
 801061e:	4631      	mov	r1, r6
 8010620:	4628      	mov	r0, r5
 8010622:	47b8      	blx	r7
 8010624:	3001      	adds	r0, #1
 8010626:	f43f af49 	beq.w	80104bc <_printf_float+0x9c>
 801062a:	f04f 0800 	mov.w	r8, #0
 801062e:	f104 091a 	add.w	r9, r4, #26
 8010632:	9b08      	ldr	r3, [sp, #32]
 8010634:	3b01      	subs	r3, #1
 8010636:	4543      	cmp	r3, r8
 8010638:	dc09      	bgt.n	801064e <_printf_float+0x22e>
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	079b      	lsls	r3, r3, #30
 801063e:	f100 8108 	bmi.w	8010852 <_printf_float+0x432>
 8010642:	68e0      	ldr	r0, [r4, #12]
 8010644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010646:	4298      	cmp	r0, r3
 8010648:	bfb8      	it	lt
 801064a:	4618      	movlt	r0, r3
 801064c:	e738      	b.n	80104c0 <_printf_float+0xa0>
 801064e:	2301      	movs	r3, #1
 8010650:	464a      	mov	r2, r9
 8010652:	4631      	mov	r1, r6
 8010654:	4628      	mov	r0, r5
 8010656:	47b8      	blx	r7
 8010658:	3001      	adds	r0, #1
 801065a:	f43f af2f 	beq.w	80104bc <_printf_float+0x9c>
 801065e:	f108 0801 	add.w	r8, r8, #1
 8010662:	e7e6      	b.n	8010632 <_printf_float+0x212>
 8010664:	9b07      	ldr	r3, [sp, #28]
 8010666:	2b00      	cmp	r3, #0
 8010668:	dc3c      	bgt.n	80106e4 <_printf_float+0x2c4>
 801066a:	4a1d      	ldr	r2, [pc, #116]	; (80106e0 <_printf_float+0x2c0>)
 801066c:	2301      	movs	r3, #1
 801066e:	4631      	mov	r1, r6
 8010670:	4628      	mov	r0, r5
 8010672:	47b8      	blx	r7
 8010674:	3001      	adds	r0, #1
 8010676:	f43f af21 	beq.w	80104bc <_printf_float+0x9c>
 801067a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801067e:	4313      	orrs	r3, r2
 8010680:	d102      	bne.n	8010688 <_printf_float+0x268>
 8010682:	6823      	ldr	r3, [r4, #0]
 8010684:	07d9      	lsls	r1, r3, #31
 8010686:	d5d8      	bpl.n	801063a <_printf_float+0x21a>
 8010688:	4653      	mov	r3, sl
 801068a:	465a      	mov	r2, fp
 801068c:	4631      	mov	r1, r6
 801068e:	4628      	mov	r0, r5
 8010690:	47b8      	blx	r7
 8010692:	3001      	adds	r0, #1
 8010694:	f43f af12 	beq.w	80104bc <_printf_float+0x9c>
 8010698:	f04f 0900 	mov.w	r9, #0
 801069c:	f104 0a1a 	add.w	sl, r4, #26
 80106a0:	9b07      	ldr	r3, [sp, #28]
 80106a2:	425b      	negs	r3, r3
 80106a4:	454b      	cmp	r3, r9
 80106a6:	dc01      	bgt.n	80106ac <_printf_float+0x28c>
 80106a8:	9b08      	ldr	r3, [sp, #32]
 80106aa:	e795      	b.n	80105d8 <_printf_float+0x1b8>
 80106ac:	2301      	movs	r3, #1
 80106ae:	4652      	mov	r2, sl
 80106b0:	4631      	mov	r1, r6
 80106b2:	4628      	mov	r0, r5
 80106b4:	47b8      	blx	r7
 80106b6:	3001      	adds	r0, #1
 80106b8:	f43f af00 	beq.w	80104bc <_printf_float+0x9c>
 80106bc:	f109 0901 	add.w	r9, r9, #1
 80106c0:	e7ee      	b.n	80106a0 <_printf_float+0x280>
 80106c2:	bf00      	nop
 80106c4:	f3af 8000 	nop.w
 80106c8:	ffffffff 	.word	0xffffffff
 80106cc:	7fefffff 	.word	0x7fefffff
 80106d0:	0801d4f5 	.word	0x0801d4f5
 80106d4:	0801d4f9 	.word	0x0801d4f9
 80106d8:	0801d501 	.word	0x0801d501
 80106dc:	0801d4fd 	.word	0x0801d4fd
 80106e0:	0801d505 	.word	0x0801d505
 80106e4:	9a08      	ldr	r2, [sp, #32]
 80106e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106e8:	429a      	cmp	r2, r3
 80106ea:	bfa8      	it	ge
 80106ec:	461a      	movge	r2, r3
 80106ee:	2a00      	cmp	r2, #0
 80106f0:	4691      	mov	r9, r2
 80106f2:	dc38      	bgt.n	8010766 <_printf_float+0x346>
 80106f4:	2300      	movs	r3, #0
 80106f6:	9305      	str	r3, [sp, #20]
 80106f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106fc:	f104 021a 	add.w	r2, r4, #26
 8010700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010702:	9905      	ldr	r1, [sp, #20]
 8010704:	9304      	str	r3, [sp, #16]
 8010706:	eba3 0309 	sub.w	r3, r3, r9
 801070a:	428b      	cmp	r3, r1
 801070c:	dc33      	bgt.n	8010776 <_printf_float+0x356>
 801070e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010712:	429a      	cmp	r2, r3
 8010714:	db3c      	blt.n	8010790 <_printf_float+0x370>
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	07da      	lsls	r2, r3, #31
 801071a:	d439      	bmi.n	8010790 <_printf_float+0x370>
 801071c:	9a08      	ldr	r2, [sp, #32]
 801071e:	9b04      	ldr	r3, [sp, #16]
 8010720:	9907      	ldr	r1, [sp, #28]
 8010722:	1ad3      	subs	r3, r2, r3
 8010724:	eba2 0901 	sub.w	r9, r2, r1
 8010728:	4599      	cmp	r9, r3
 801072a:	bfa8      	it	ge
 801072c:	4699      	movge	r9, r3
 801072e:	f1b9 0f00 	cmp.w	r9, #0
 8010732:	dc35      	bgt.n	80107a0 <_printf_float+0x380>
 8010734:	f04f 0800 	mov.w	r8, #0
 8010738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801073c:	f104 0a1a 	add.w	sl, r4, #26
 8010740:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010744:	1a9b      	subs	r3, r3, r2
 8010746:	eba3 0309 	sub.w	r3, r3, r9
 801074a:	4543      	cmp	r3, r8
 801074c:	f77f af75 	ble.w	801063a <_printf_float+0x21a>
 8010750:	2301      	movs	r3, #1
 8010752:	4652      	mov	r2, sl
 8010754:	4631      	mov	r1, r6
 8010756:	4628      	mov	r0, r5
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	f43f aeae 	beq.w	80104bc <_printf_float+0x9c>
 8010760:	f108 0801 	add.w	r8, r8, #1
 8010764:	e7ec      	b.n	8010740 <_printf_float+0x320>
 8010766:	4613      	mov	r3, r2
 8010768:	4631      	mov	r1, r6
 801076a:	4642      	mov	r2, r8
 801076c:	4628      	mov	r0, r5
 801076e:	47b8      	blx	r7
 8010770:	3001      	adds	r0, #1
 8010772:	d1bf      	bne.n	80106f4 <_printf_float+0x2d4>
 8010774:	e6a2      	b.n	80104bc <_printf_float+0x9c>
 8010776:	2301      	movs	r3, #1
 8010778:	4631      	mov	r1, r6
 801077a:	4628      	mov	r0, r5
 801077c:	9204      	str	r2, [sp, #16]
 801077e:	47b8      	blx	r7
 8010780:	3001      	adds	r0, #1
 8010782:	f43f ae9b 	beq.w	80104bc <_printf_float+0x9c>
 8010786:	9b05      	ldr	r3, [sp, #20]
 8010788:	9a04      	ldr	r2, [sp, #16]
 801078a:	3301      	adds	r3, #1
 801078c:	9305      	str	r3, [sp, #20]
 801078e:	e7b7      	b.n	8010700 <_printf_float+0x2e0>
 8010790:	4653      	mov	r3, sl
 8010792:	465a      	mov	r2, fp
 8010794:	4631      	mov	r1, r6
 8010796:	4628      	mov	r0, r5
 8010798:	47b8      	blx	r7
 801079a:	3001      	adds	r0, #1
 801079c:	d1be      	bne.n	801071c <_printf_float+0x2fc>
 801079e:	e68d      	b.n	80104bc <_printf_float+0x9c>
 80107a0:	9a04      	ldr	r2, [sp, #16]
 80107a2:	464b      	mov	r3, r9
 80107a4:	4442      	add	r2, r8
 80107a6:	4631      	mov	r1, r6
 80107a8:	4628      	mov	r0, r5
 80107aa:	47b8      	blx	r7
 80107ac:	3001      	adds	r0, #1
 80107ae:	d1c1      	bne.n	8010734 <_printf_float+0x314>
 80107b0:	e684      	b.n	80104bc <_printf_float+0x9c>
 80107b2:	9a08      	ldr	r2, [sp, #32]
 80107b4:	2a01      	cmp	r2, #1
 80107b6:	dc01      	bgt.n	80107bc <_printf_float+0x39c>
 80107b8:	07db      	lsls	r3, r3, #31
 80107ba:	d537      	bpl.n	801082c <_printf_float+0x40c>
 80107bc:	2301      	movs	r3, #1
 80107be:	4642      	mov	r2, r8
 80107c0:	4631      	mov	r1, r6
 80107c2:	4628      	mov	r0, r5
 80107c4:	47b8      	blx	r7
 80107c6:	3001      	adds	r0, #1
 80107c8:	f43f ae78 	beq.w	80104bc <_printf_float+0x9c>
 80107cc:	4653      	mov	r3, sl
 80107ce:	465a      	mov	r2, fp
 80107d0:	4631      	mov	r1, r6
 80107d2:	4628      	mov	r0, r5
 80107d4:	47b8      	blx	r7
 80107d6:	3001      	adds	r0, #1
 80107d8:	f43f ae70 	beq.w	80104bc <_printf_float+0x9c>
 80107dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80107e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e8:	d01b      	beq.n	8010822 <_printf_float+0x402>
 80107ea:	9b08      	ldr	r3, [sp, #32]
 80107ec:	f108 0201 	add.w	r2, r8, #1
 80107f0:	3b01      	subs	r3, #1
 80107f2:	4631      	mov	r1, r6
 80107f4:	4628      	mov	r0, r5
 80107f6:	47b8      	blx	r7
 80107f8:	3001      	adds	r0, #1
 80107fa:	d10e      	bne.n	801081a <_printf_float+0x3fa>
 80107fc:	e65e      	b.n	80104bc <_printf_float+0x9c>
 80107fe:	2301      	movs	r3, #1
 8010800:	464a      	mov	r2, r9
 8010802:	4631      	mov	r1, r6
 8010804:	4628      	mov	r0, r5
 8010806:	47b8      	blx	r7
 8010808:	3001      	adds	r0, #1
 801080a:	f43f ae57 	beq.w	80104bc <_printf_float+0x9c>
 801080e:	f108 0801 	add.w	r8, r8, #1
 8010812:	9b08      	ldr	r3, [sp, #32]
 8010814:	3b01      	subs	r3, #1
 8010816:	4543      	cmp	r3, r8
 8010818:	dcf1      	bgt.n	80107fe <_printf_float+0x3de>
 801081a:	9b04      	ldr	r3, [sp, #16]
 801081c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010820:	e6db      	b.n	80105da <_printf_float+0x1ba>
 8010822:	f04f 0800 	mov.w	r8, #0
 8010826:	f104 091a 	add.w	r9, r4, #26
 801082a:	e7f2      	b.n	8010812 <_printf_float+0x3f2>
 801082c:	2301      	movs	r3, #1
 801082e:	4642      	mov	r2, r8
 8010830:	e7df      	b.n	80107f2 <_printf_float+0x3d2>
 8010832:	2301      	movs	r3, #1
 8010834:	464a      	mov	r2, r9
 8010836:	4631      	mov	r1, r6
 8010838:	4628      	mov	r0, r5
 801083a:	47b8      	blx	r7
 801083c:	3001      	adds	r0, #1
 801083e:	f43f ae3d 	beq.w	80104bc <_printf_float+0x9c>
 8010842:	f108 0801 	add.w	r8, r8, #1
 8010846:	68e3      	ldr	r3, [r4, #12]
 8010848:	9909      	ldr	r1, [sp, #36]	; 0x24
 801084a:	1a5b      	subs	r3, r3, r1
 801084c:	4543      	cmp	r3, r8
 801084e:	dcf0      	bgt.n	8010832 <_printf_float+0x412>
 8010850:	e6f7      	b.n	8010642 <_printf_float+0x222>
 8010852:	f04f 0800 	mov.w	r8, #0
 8010856:	f104 0919 	add.w	r9, r4, #25
 801085a:	e7f4      	b.n	8010846 <_printf_float+0x426>

0801085c <_printf_common>:
 801085c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010860:	4616      	mov	r6, r2
 8010862:	4699      	mov	r9, r3
 8010864:	688a      	ldr	r2, [r1, #8]
 8010866:	690b      	ldr	r3, [r1, #16]
 8010868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801086c:	4293      	cmp	r3, r2
 801086e:	bfb8      	it	lt
 8010870:	4613      	movlt	r3, r2
 8010872:	6033      	str	r3, [r6, #0]
 8010874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010878:	4607      	mov	r7, r0
 801087a:	460c      	mov	r4, r1
 801087c:	b10a      	cbz	r2, 8010882 <_printf_common+0x26>
 801087e:	3301      	adds	r3, #1
 8010880:	6033      	str	r3, [r6, #0]
 8010882:	6823      	ldr	r3, [r4, #0]
 8010884:	0699      	lsls	r1, r3, #26
 8010886:	bf42      	ittt	mi
 8010888:	6833      	ldrmi	r3, [r6, #0]
 801088a:	3302      	addmi	r3, #2
 801088c:	6033      	strmi	r3, [r6, #0]
 801088e:	6825      	ldr	r5, [r4, #0]
 8010890:	f015 0506 	ands.w	r5, r5, #6
 8010894:	d106      	bne.n	80108a4 <_printf_common+0x48>
 8010896:	f104 0a19 	add.w	sl, r4, #25
 801089a:	68e3      	ldr	r3, [r4, #12]
 801089c:	6832      	ldr	r2, [r6, #0]
 801089e:	1a9b      	subs	r3, r3, r2
 80108a0:	42ab      	cmp	r3, r5
 80108a2:	dc26      	bgt.n	80108f2 <_printf_common+0x96>
 80108a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80108a8:	1e13      	subs	r3, r2, #0
 80108aa:	6822      	ldr	r2, [r4, #0]
 80108ac:	bf18      	it	ne
 80108ae:	2301      	movne	r3, #1
 80108b0:	0692      	lsls	r2, r2, #26
 80108b2:	d42b      	bmi.n	801090c <_printf_common+0xb0>
 80108b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108b8:	4649      	mov	r1, r9
 80108ba:	4638      	mov	r0, r7
 80108bc:	47c0      	blx	r8
 80108be:	3001      	adds	r0, #1
 80108c0:	d01e      	beq.n	8010900 <_printf_common+0xa4>
 80108c2:	6823      	ldr	r3, [r4, #0]
 80108c4:	68e5      	ldr	r5, [r4, #12]
 80108c6:	6832      	ldr	r2, [r6, #0]
 80108c8:	f003 0306 	and.w	r3, r3, #6
 80108cc:	2b04      	cmp	r3, #4
 80108ce:	bf08      	it	eq
 80108d0:	1aad      	subeq	r5, r5, r2
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	6922      	ldr	r2, [r4, #16]
 80108d6:	bf0c      	ite	eq
 80108d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108dc:	2500      	movne	r5, #0
 80108de:	4293      	cmp	r3, r2
 80108e0:	bfc4      	itt	gt
 80108e2:	1a9b      	subgt	r3, r3, r2
 80108e4:	18ed      	addgt	r5, r5, r3
 80108e6:	2600      	movs	r6, #0
 80108e8:	341a      	adds	r4, #26
 80108ea:	42b5      	cmp	r5, r6
 80108ec:	d11a      	bne.n	8010924 <_printf_common+0xc8>
 80108ee:	2000      	movs	r0, #0
 80108f0:	e008      	b.n	8010904 <_printf_common+0xa8>
 80108f2:	2301      	movs	r3, #1
 80108f4:	4652      	mov	r2, sl
 80108f6:	4649      	mov	r1, r9
 80108f8:	4638      	mov	r0, r7
 80108fa:	47c0      	blx	r8
 80108fc:	3001      	adds	r0, #1
 80108fe:	d103      	bne.n	8010908 <_printf_common+0xac>
 8010900:	f04f 30ff 	mov.w	r0, #4294967295
 8010904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010908:	3501      	adds	r5, #1
 801090a:	e7c6      	b.n	801089a <_printf_common+0x3e>
 801090c:	18e1      	adds	r1, r4, r3
 801090e:	1c5a      	adds	r2, r3, #1
 8010910:	2030      	movs	r0, #48	; 0x30
 8010912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010916:	4422      	add	r2, r4
 8010918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801091c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010920:	3302      	adds	r3, #2
 8010922:	e7c7      	b.n	80108b4 <_printf_common+0x58>
 8010924:	2301      	movs	r3, #1
 8010926:	4622      	mov	r2, r4
 8010928:	4649      	mov	r1, r9
 801092a:	4638      	mov	r0, r7
 801092c:	47c0      	blx	r8
 801092e:	3001      	adds	r0, #1
 8010930:	d0e6      	beq.n	8010900 <_printf_common+0xa4>
 8010932:	3601      	adds	r6, #1
 8010934:	e7d9      	b.n	80108ea <_printf_common+0x8e>
	...

08010938 <_printf_i>:
 8010938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801093c:	460c      	mov	r4, r1
 801093e:	4691      	mov	r9, r2
 8010940:	7e27      	ldrb	r7, [r4, #24]
 8010942:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010944:	2f78      	cmp	r7, #120	; 0x78
 8010946:	4680      	mov	r8, r0
 8010948:	469a      	mov	sl, r3
 801094a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801094e:	d807      	bhi.n	8010960 <_printf_i+0x28>
 8010950:	2f62      	cmp	r7, #98	; 0x62
 8010952:	d80a      	bhi.n	801096a <_printf_i+0x32>
 8010954:	2f00      	cmp	r7, #0
 8010956:	f000 80d8 	beq.w	8010b0a <_printf_i+0x1d2>
 801095a:	2f58      	cmp	r7, #88	; 0x58
 801095c:	f000 80a3 	beq.w	8010aa6 <_printf_i+0x16e>
 8010960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010968:	e03a      	b.n	80109e0 <_printf_i+0xa8>
 801096a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801096e:	2b15      	cmp	r3, #21
 8010970:	d8f6      	bhi.n	8010960 <_printf_i+0x28>
 8010972:	a001      	add	r0, pc, #4	; (adr r0, 8010978 <_printf_i+0x40>)
 8010974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010978:	080109d1 	.word	0x080109d1
 801097c:	080109e5 	.word	0x080109e5
 8010980:	08010961 	.word	0x08010961
 8010984:	08010961 	.word	0x08010961
 8010988:	08010961 	.word	0x08010961
 801098c:	08010961 	.word	0x08010961
 8010990:	080109e5 	.word	0x080109e5
 8010994:	08010961 	.word	0x08010961
 8010998:	08010961 	.word	0x08010961
 801099c:	08010961 	.word	0x08010961
 80109a0:	08010961 	.word	0x08010961
 80109a4:	08010af1 	.word	0x08010af1
 80109a8:	08010a15 	.word	0x08010a15
 80109ac:	08010ad3 	.word	0x08010ad3
 80109b0:	08010961 	.word	0x08010961
 80109b4:	08010961 	.word	0x08010961
 80109b8:	08010b13 	.word	0x08010b13
 80109bc:	08010961 	.word	0x08010961
 80109c0:	08010a15 	.word	0x08010a15
 80109c4:	08010961 	.word	0x08010961
 80109c8:	08010961 	.word	0x08010961
 80109cc:	08010adb 	.word	0x08010adb
 80109d0:	680b      	ldr	r3, [r1, #0]
 80109d2:	1d1a      	adds	r2, r3, #4
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	600a      	str	r2, [r1, #0]
 80109d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80109dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109e0:	2301      	movs	r3, #1
 80109e2:	e0a3      	b.n	8010b2c <_printf_i+0x1f4>
 80109e4:	6825      	ldr	r5, [r4, #0]
 80109e6:	6808      	ldr	r0, [r1, #0]
 80109e8:	062e      	lsls	r6, r5, #24
 80109ea:	f100 0304 	add.w	r3, r0, #4
 80109ee:	d50a      	bpl.n	8010a06 <_printf_i+0xce>
 80109f0:	6805      	ldr	r5, [r0, #0]
 80109f2:	600b      	str	r3, [r1, #0]
 80109f4:	2d00      	cmp	r5, #0
 80109f6:	da03      	bge.n	8010a00 <_printf_i+0xc8>
 80109f8:	232d      	movs	r3, #45	; 0x2d
 80109fa:	426d      	negs	r5, r5
 80109fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a00:	485e      	ldr	r0, [pc, #376]	; (8010b7c <_printf_i+0x244>)
 8010a02:	230a      	movs	r3, #10
 8010a04:	e019      	b.n	8010a3a <_printf_i+0x102>
 8010a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010a0a:	6805      	ldr	r5, [r0, #0]
 8010a0c:	600b      	str	r3, [r1, #0]
 8010a0e:	bf18      	it	ne
 8010a10:	b22d      	sxthne	r5, r5
 8010a12:	e7ef      	b.n	80109f4 <_printf_i+0xbc>
 8010a14:	680b      	ldr	r3, [r1, #0]
 8010a16:	6825      	ldr	r5, [r4, #0]
 8010a18:	1d18      	adds	r0, r3, #4
 8010a1a:	6008      	str	r0, [r1, #0]
 8010a1c:	0628      	lsls	r0, r5, #24
 8010a1e:	d501      	bpl.n	8010a24 <_printf_i+0xec>
 8010a20:	681d      	ldr	r5, [r3, #0]
 8010a22:	e002      	b.n	8010a2a <_printf_i+0xf2>
 8010a24:	0669      	lsls	r1, r5, #25
 8010a26:	d5fb      	bpl.n	8010a20 <_printf_i+0xe8>
 8010a28:	881d      	ldrh	r5, [r3, #0]
 8010a2a:	4854      	ldr	r0, [pc, #336]	; (8010b7c <_printf_i+0x244>)
 8010a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8010a2e:	bf0c      	ite	eq
 8010a30:	2308      	moveq	r3, #8
 8010a32:	230a      	movne	r3, #10
 8010a34:	2100      	movs	r1, #0
 8010a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a3a:	6866      	ldr	r6, [r4, #4]
 8010a3c:	60a6      	str	r6, [r4, #8]
 8010a3e:	2e00      	cmp	r6, #0
 8010a40:	bfa2      	ittt	ge
 8010a42:	6821      	ldrge	r1, [r4, #0]
 8010a44:	f021 0104 	bicge.w	r1, r1, #4
 8010a48:	6021      	strge	r1, [r4, #0]
 8010a4a:	b90d      	cbnz	r5, 8010a50 <_printf_i+0x118>
 8010a4c:	2e00      	cmp	r6, #0
 8010a4e:	d04d      	beq.n	8010aec <_printf_i+0x1b4>
 8010a50:	4616      	mov	r6, r2
 8010a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a56:	fb03 5711 	mls	r7, r3, r1, r5
 8010a5a:	5dc7      	ldrb	r7, [r0, r7]
 8010a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a60:	462f      	mov	r7, r5
 8010a62:	42bb      	cmp	r3, r7
 8010a64:	460d      	mov	r5, r1
 8010a66:	d9f4      	bls.n	8010a52 <_printf_i+0x11a>
 8010a68:	2b08      	cmp	r3, #8
 8010a6a:	d10b      	bne.n	8010a84 <_printf_i+0x14c>
 8010a6c:	6823      	ldr	r3, [r4, #0]
 8010a6e:	07df      	lsls	r7, r3, #31
 8010a70:	d508      	bpl.n	8010a84 <_printf_i+0x14c>
 8010a72:	6923      	ldr	r3, [r4, #16]
 8010a74:	6861      	ldr	r1, [r4, #4]
 8010a76:	4299      	cmp	r1, r3
 8010a78:	bfde      	ittt	le
 8010a7a:	2330      	movle	r3, #48	; 0x30
 8010a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010a84:	1b92      	subs	r2, r2, r6
 8010a86:	6122      	str	r2, [r4, #16]
 8010a88:	f8cd a000 	str.w	sl, [sp]
 8010a8c:	464b      	mov	r3, r9
 8010a8e:	aa03      	add	r2, sp, #12
 8010a90:	4621      	mov	r1, r4
 8010a92:	4640      	mov	r0, r8
 8010a94:	f7ff fee2 	bl	801085c <_printf_common>
 8010a98:	3001      	adds	r0, #1
 8010a9a:	d14c      	bne.n	8010b36 <_printf_i+0x1fe>
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	b004      	add	sp, #16
 8010aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa6:	4835      	ldr	r0, [pc, #212]	; (8010b7c <_printf_i+0x244>)
 8010aa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	680e      	ldr	r6, [r1, #0]
 8010ab0:	061f      	lsls	r7, r3, #24
 8010ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8010ab6:	600e      	str	r6, [r1, #0]
 8010ab8:	d514      	bpl.n	8010ae4 <_printf_i+0x1ac>
 8010aba:	07d9      	lsls	r1, r3, #31
 8010abc:	bf44      	itt	mi
 8010abe:	f043 0320 	orrmi.w	r3, r3, #32
 8010ac2:	6023      	strmi	r3, [r4, #0]
 8010ac4:	b91d      	cbnz	r5, 8010ace <_printf_i+0x196>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	f023 0320 	bic.w	r3, r3, #32
 8010acc:	6023      	str	r3, [r4, #0]
 8010ace:	2310      	movs	r3, #16
 8010ad0:	e7b0      	b.n	8010a34 <_printf_i+0xfc>
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	f043 0320 	orr.w	r3, r3, #32
 8010ad8:	6023      	str	r3, [r4, #0]
 8010ada:	2378      	movs	r3, #120	; 0x78
 8010adc:	4828      	ldr	r0, [pc, #160]	; (8010b80 <_printf_i+0x248>)
 8010ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ae2:	e7e3      	b.n	8010aac <_printf_i+0x174>
 8010ae4:	065e      	lsls	r6, r3, #25
 8010ae6:	bf48      	it	mi
 8010ae8:	b2ad      	uxthmi	r5, r5
 8010aea:	e7e6      	b.n	8010aba <_printf_i+0x182>
 8010aec:	4616      	mov	r6, r2
 8010aee:	e7bb      	b.n	8010a68 <_printf_i+0x130>
 8010af0:	680b      	ldr	r3, [r1, #0]
 8010af2:	6826      	ldr	r6, [r4, #0]
 8010af4:	6960      	ldr	r0, [r4, #20]
 8010af6:	1d1d      	adds	r5, r3, #4
 8010af8:	600d      	str	r5, [r1, #0]
 8010afa:	0635      	lsls	r5, r6, #24
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	d501      	bpl.n	8010b04 <_printf_i+0x1cc>
 8010b00:	6018      	str	r0, [r3, #0]
 8010b02:	e002      	b.n	8010b0a <_printf_i+0x1d2>
 8010b04:	0671      	lsls	r1, r6, #25
 8010b06:	d5fb      	bpl.n	8010b00 <_printf_i+0x1c8>
 8010b08:	8018      	strh	r0, [r3, #0]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	6123      	str	r3, [r4, #16]
 8010b0e:	4616      	mov	r6, r2
 8010b10:	e7ba      	b.n	8010a88 <_printf_i+0x150>
 8010b12:	680b      	ldr	r3, [r1, #0]
 8010b14:	1d1a      	adds	r2, r3, #4
 8010b16:	600a      	str	r2, [r1, #0]
 8010b18:	681e      	ldr	r6, [r3, #0]
 8010b1a:	6862      	ldr	r2, [r4, #4]
 8010b1c:	2100      	movs	r1, #0
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f7ef fbf6 	bl	8000310 <memchr>
 8010b24:	b108      	cbz	r0, 8010b2a <_printf_i+0x1f2>
 8010b26:	1b80      	subs	r0, r0, r6
 8010b28:	6060      	str	r0, [r4, #4]
 8010b2a:	6863      	ldr	r3, [r4, #4]
 8010b2c:	6123      	str	r3, [r4, #16]
 8010b2e:	2300      	movs	r3, #0
 8010b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b34:	e7a8      	b.n	8010a88 <_printf_i+0x150>
 8010b36:	6923      	ldr	r3, [r4, #16]
 8010b38:	4632      	mov	r2, r6
 8010b3a:	4649      	mov	r1, r9
 8010b3c:	4640      	mov	r0, r8
 8010b3e:	47d0      	blx	sl
 8010b40:	3001      	adds	r0, #1
 8010b42:	d0ab      	beq.n	8010a9c <_printf_i+0x164>
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	079b      	lsls	r3, r3, #30
 8010b48:	d413      	bmi.n	8010b72 <_printf_i+0x23a>
 8010b4a:	68e0      	ldr	r0, [r4, #12]
 8010b4c:	9b03      	ldr	r3, [sp, #12]
 8010b4e:	4298      	cmp	r0, r3
 8010b50:	bfb8      	it	lt
 8010b52:	4618      	movlt	r0, r3
 8010b54:	e7a4      	b.n	8010aa0 <_printf_i+0x168>
 8010b56:	2301      	movs	r3, #1
 8010b58:	4632      	mov	r2, r6
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	4640      	mov	r0, r8
 8010b5e:	47d0      	blx	sl
 8010b60:	3001      	adds	r0, #1
 8010b62:	d09b      	beq.n	8010a9c <_printf_i+0x164>
 8010b64:	3501      	adds	r5, #1
 8010b66:	68e3      	ldr	r3, [r4, #12]
 8010b68:	9903      	ldr	r1, [sp, #12]
 8010b6a:	1a5b      	subs	r3, r3, r1
 8010b6c:	42ab      	cmp	r3, r5
 8010b6e:	dcf2      	bgt.n	8010b56 <_printf_i+0x21e>
 8010b70:	e7eb      	b.n	8010b4a <_printf_i+0x212>
 8010b72:	2500      	movs	r5, #0
 8010b74:	f104 0619 	add.w	r6, r4, #25
 8010b78:	e7f5      	b.n	8010b66 <_printf_i+0x22e>
 8010b7a:	bf00      	nop
 8010b7c:	0801d507 	.word	0x0801d507
 8010b80:	0801d518 	.word	0x0801d518

08010b84 <_scanf_float>:
 8010b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	b087      	sub	sp, #28
 8010b8a:	4617      	mov	r7, r2
 8010b8c:	9303      	str	r3, [sp, #12]
 8010b8e:	688b      	ldr	r3, [r1, #8]
 8010b90:	1e5a      	subs	r2, r3, #1
 8010b92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010b96:	bf83      	ittte	hi
 8010b98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010b9c:	195b      	addhi	r3, r3, r5
 8010b9e:	9302      	strhi	r3, [sp, #8]
 8010ba0:	2300      	movls	r3, #0
 8010ba2:	bf86      	itte	hi
 8010ba4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010ba8:	608b      	strhi	r3, [r1, #8]
 8010baa:	9302      	strls	r3, [sp, #8]
 8010bac:	680b      	ldr	r3, [r1, #0]
 8010bae:	468b      	mov	fp, r1
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010bb6:	f84b 3b1c 	str.w	r3, [fp], #28
 8010bba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010bbe:	4680      	mov	r8, r0
 8010bc0:	460c      	mov	r4, r1
 8010bc2:	465e      	mov	r6, fp
 8010bc4:	46aa      	mov	sl, r5
 8010bc6:	46a9      	mov	r9, r5
 8010bc8:	9501      	str	r5, [sp, #4]
 8010bca:	68a2      	ldr	r2, [r4, #8]
 8010bcc:	b152      	cbz	r2, 8010be4 <_scanf_float+0x60>
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2b4e      	cmp	r3, #78	; 0x4e
 8010bd4:	d864      	bhi.n	8010ca0 <_scanf_float+0x11c>
 8010bd6:	2b40      	cmp	r3, #64	; 0x40
 8010bd8:	d83c      	bhi.n	8010c54 <_scanf_float+0xd0>
 8010bda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010bde:	b2c8      	uxtb	r0, r1
 8010be0:	280e      	cmp	r0, #14
 8010be2:	d93a      	bls.n	8010c5a <_scanf_float+0xd6>
 8010be4:	f1b9 0f00 	cmp.w	r9, #0
 8010be8:	d003      	beq.n	8010bf2 <_scanf_float+0x6e>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bf6:	f1ba 0f01 	cmp.w	sl, #1
 8010bfa:	f200 8113 	bhi.w	8010e24 <_scanf_float+0x2a0>
 8010bfe:	455e      	cmp	r6, fp
 8010c00:	f200 8105 	bhi.w	8010e0e <_scanf_float+0x28a>
 8010c04:	2501      	movs	r5, #1
 8010c06:	4628      	mov	r0, r5
 8010c08:	b007      	add	sp, #28
 8010c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010c12:	2a0d      	cmp	r2, #13
 8010c14:	d8e6      	bhi.n	8010be4 <_scanf_float+0x60>
 8010c16:	a101      	add	r1, pc, #4	; (adr r1, 8010c1c <_scanf_float+0x98>)
 8010c18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c1c:	08010d5b 	.word	0x08010d5b
 8010c20:	08010be5 	.word	0x08010be5
 8010c24:	08010be5 	.word	0x08010be5
 8010c28:	08010be5 	.word	0x08010be5
 8010c2c:	08010dbb 	.word	0x08010dbb
 8010c30:	08010d93 	.word	0x08010d93
 8010c34:	08010be5 	.word	0x08010be5
 8010c38:	08010be5 	.word	0x08010be5
 8010c3c:	08010d69 	.word	0x08010d69
 8010c40:	08010be5 	.word	0x08010be5
 8010c44:	08010be5 	.word	0x08010be5
 8010c48:	08010be5 	.word	0x08010be5
 8010c4c:	08010be5 	.word	0x08010be5
 8010c50:	08010d21 	.word	0x08010d21
 8010c54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010c58:	e7db      	b.n	8010c12 <_scanf_float+0x8e>
 8010c5a:	290e      	cmp	r1, #14
 8010c5c:	d8c2      	bhi.n	8010be4 <_scanf_float+0x60>
 8010c5e:	a001      	add	r0, pc, #4	; (adr r0, 8010c64 <_scanf_float+0xe0>)
 8010c60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010c64:	08010d13 	.word	0x08010d13
 8010c68:	08010be5 	.word	0x08010be5
 8010c6c:	08010d13 	.word	0x08010d13
 8010c70:	08010da7 	.word	0x08010da7
 8010c74:	08010be5 	.word	0x08010be5
 8010c78:	08010cc1 	.word	0x08010cc1
 8010c7c:	08010cfd 	.word	0x08010cfd
 8010c80:	08010cfd 	.word	0x08010cfd
 8010c84:	08010cfd 	.word	0x08010cfd
 8010c88:	08010cfd 	.word	0x08010cfd
 8010c8c:	08010cfd 	.word	0x08010cfd
 8010c90:	08010cfd 	.word	0x08010cfd
 8010c94:	08010cfd 	.word	0x08010cfd
 8010c98:	08010cfd 	.word	0x08010cfd
 8010c9c:	08010cfd 	.word	0x08010cfd
 8010ca0:	2b6e      	cmp	r3, #110	; 0x6e
 8010ca2:	d809      	bhi.n	8010cb8 <_scanf_float+0x134>
 8010ca4:	2b60      	cmp	r3, #96	; 0x60
 8010ca6:	d8b2      	bhi.n	8010c0e <_scanf_float+0x8a>
 8010ca8:	2b54      	cmp	r3, #84	; 0x54
 8010caa:	d077      	beq.n	8010d9c <_scanf_float+0x218>
 8010cac:	2b59      	cmp	r3, #89	; 0x59
 8010cae:	d199      	bne.n	8010be4 <_scanf_float+0x60>
 8010cb0:	2d07      	cmp	r5, #7
 8010cb2:	d197      	bne.n	8010be4 <_scanf_float+0x60>
 8010cb4:	2508      	movs	r5, #8
 8010cb6:	e029      	b.n	8010d0c <_scanf_float+0x188>
 8010cb8:	2b74      	cmp	r3, #116	; 0x74
 8010cba:	d06f      	beq.n	8010d9c <_scanf_float+0x218>
 8010cbc:	2b79      	cmp	r3, #121	; 0x79
 8010cbe:	e7f6      	b.n	8010cae <_scanf_float+0x12a>
 8010cc0:	6821      	ldr	r1, [r4, #0]
 8010cc2:	05c8      	lsls	r0, r1, #23
 8010cc4:	d51a      	bpl.n	8010cfc <_scanf_float+0x178>
 8010cc6:	9b02      	ldr	r3, [sp, #8]
 8010cc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010ccc:	6021      	str	r1, [r4, #0]
 8010cce:	f109 0901 	add.w	r9, r9, #1
 8010cd2:	b11b      	cbz	r3, 8010cdc <_scanf_float+0x158>
 8010cd4:	3b01      	subs	r3, #1
 8010cd6:	3201      	adds	r2, #1
 8010cd8:	9302      	str	r3, [sp, #8]
 8010cda:	60a2      	str	r2, [r4, #8]
 8010cdc:	68a3      	ldr	r3, [r4, #8]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	60a3      	str	r3, [r4, #8]
 8010ce2:	6923      	ldr	r3, [r4, #16]
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	6123      	str	r3, [r4, #16]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	3b01      	subs	r3, #1
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	607b      	str	r3, [r7, #4]
 8010cf0:	f340 8084 	ble.w	8010dfc <_scanf_float+0x278>
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	603b      	str	r3, [r7, #0]
 8010cfa:	e766      	b.n	8010bca <_scanf_float+0x46>
 8010cfc:	eb1a 0f05 	cmn.w	sl, r5
 8010d00:	f47f af70 	bne.w	8010be4 <_scanf_float+0x60>
 8010d04:	6822      	ldr	r2, [r4, #0]
 8010d06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010d0a:	6022      	str	r2, [r4, #0]
 8010d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8010d10:	e7e4      	b.n	8010cdc <_scanf_float+0x158>
 8010d12:	6822      	ldr	r2, [r4, #0]
 8010d14:	0610      	lsls	r0, r2, #24
 8010d16:	f57f af65 	bpl.w	8010be4 <_scanf_float+0x60>
 8010d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d1e:	e7f4      	b.n	8010d0a <_scanf_float+0x186>
 8010d20:	f1ba 0f00 	cmp.w	sl, #0
 8010d24:	d10e      	bne.n	8010d44 <_scanf_float+0x1c0>
 8010d26:	f1b9 0f00 	cmp.w	r9, #0
 8010d2a:	d10e      	bne.n	8010d4a <_scanf_float+0x1c6>
 8010d2c:	6822      	ldr	r2, [r4, #0]
 8010d2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010d32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010d36:	d108      	bne.n	8010d4a <_scanf_float+0x1c6>
 8010d38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d3c:	6022      	str	r2, [r4, #0]
 8010d3e:	f04f 0a01 	mov.w	sl, #1
 8010d42:	e7e3      	b.n	8010d0c <_scanf_float+0x188>
 8010d44:	f1ba 0f02 	cmp.w	sl, #2
 8010d48:	d055      	beq.n	8010df6 <_scanf_float+0x272>
 8010d4a:	2d01      	cmp	r5, #1
 8010d4c:	d002      	beq.n	8010d54 <_scanf_float+0x1d0>
 8010d4e:	2d04      	cmp	r5, #4
 8010d50:	f47f af48 	bne.w	8010be4 <_scanf_float+0x60>
 8010d54:	3501      	adds	r5, #1
 8010d56:	b2ed      	uxtb	r5, r5
 8010d58:	e7d8      	b.n	8010d0c <_scanf_float+0x188>
 8010d5a:	f1ba 0f01 	cmp.w	sl, #1
 8010d5e:	f47f af41 	bne.w	8010be4 <_scanf_float+0x60>
 8010d62:	f04f 0a02 	mov.w	sl, #2
 8010d66:	e7d1      	b.n	8010d0c <_scanf_float+0x188>
 8010d68:	b97d      	cbnz	r5, 8010d8a <_scanf_float+0x206>
 8010d6a:	f1b9 0f00 	cmp.w	r9, #0
 8010d6e:	f47f af3c 	bne.w	8010bea <_scanf_float+0x66>
 8010d72:	6822      	ldr	r2, [r4, #0]
 8010d74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010d78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010d7c:	f47f af39 	bne.w	8010bf2 <_scanf_float+0x6e>
 8010d80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d84:	6022      	str	r2, [r4, #0]
 8010d86:	2501      	movs	r5, #1
 8010d88:	e7c0      	b.n	8010d0c <_scanf_float+0x188>
 8010d8a:	2d03      	cmp	r5, #3
 8010d8c:	d0e2      	beq.n	8010d54 <_scanf_float+0x1d0>
 8010d8e:	2d05      	cmp	r5, #5
 8010d90:	e7de      	b.n	8010d50 <_scanf_float+0x1cc>
 8010d92:	2d02      	cmp	r5, #2
 8010d94:	f47f af26 	bne.w	8010be4 <_scanf_float+0x60>
 8010d98:	2503      	movs	r5, #3
 8010d9a:	e7b7      	b.n	8010d0c <_scanf_float+0x188>
 8010d9c:	2d06      	cmp	r5, #6
 8010d9e:	f47f af21 	bne.w	8010be4 <_scanf_float+0x60>
 8010da2:	2507      	movs	r5, #7
 8010da4:	e7b2      	b.n	8010d0c <_scanf_float+0x188>
 8010da6:	6822      	ldr	r2, [r4, #0]
 8010da8:	0591      	lsls	r1, r2, #22
 8010daa:	f57f af1b 	bpl.w	8010be4 <_scanf_float+0x60>
 8010dae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010db2:	6022      	str	r2, [r4, #0]
 8010db4:	f8cd 9004 	str.w	r9, [sp, #4]
 8010db8:	e7a8      	b.n	8010d0c <_scanf_float+0x188>
 8010dba:	6822      	ldr	r2, [r4, #0]
 8010dbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010dc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010dc4:	d006      	beq.n	8010dd4 <_scanf_float+0x250>
 8010dc6:	0550      	lsls	r0, r2, #21
 8010dc8:	f57f af0c 	bpl.w	8010be4 <_scanf_float+0x60>
 8010dcc:	f1b9 0f00 	cmp.w	r9, #0
 8010dd0:	f43f af0f 	beq.w	8010bf2 <_scanf_float+0x6e>
 8010dd4:	0591      	lsls	r1, r2, #22
 8010dd6:	bf58      	it	pl
 8010dd8:	9901      	ldrpl	r1, [sp, #4]
 8010dda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010dde:	bf58      	it	pl
 8010de0:	eba9 0101 	subpl.w	r1, r9, r1
 8010de4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010de8:	bf58      	it	pl
 8010dea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010dee:	6022      	str	r2, [r4, #0]
 8010df0:	f04f 0900 	mov.w	r9, #0
 8010df4:	e78a      	b.n	8010d0c <_scanf_float+0x188>
 8010df6:	f04f 0a03 	mov.w	sl, #3
 8010dfa:	e787      	b.n	8010d0c <_scanf_float+0x188>
 8010dfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e00:	4639      	mov	r1, r7
 8010e02:	4640      	mov	r0, r8
 8010e04:	4798      	blx	r3
 8010e06:	2800      	cmp	r0, #0
 8010e08:	f43f aedf 	beq.w	8010bca <_scanf_float+0x46>
 8010e0c:	e6ea      	b.n	8010be4 <_scanf_float+0x60>
 8010e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e16:	463a      	mov	r2, r7
 8010e18:	4640      	mov	r0, r8
 8010e1a:	4798      	blx	r3
 8010e1c:	6923      	ldr	r3, [r4, #16]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	6123      	str	r3, [r4, #16]
 8010e22:	e6ec      	b.n	8010bfe <_scanf_float+0x7a>
 8010e24:	1e6b      	subs	r3, r5, #1
 8010e26:	2b06      	cmp	r3, #6
 8010e28:	d825      	bhi.n	8010e76 <_scanf_float+0x2f2>
 8010e2a:	2d02      	cmp	r5, #2
 8010e2c:	d836      	bhi.n	8010e9c <_scanf_float+0x318>
 8010e2e:	455e      	cmp	r6, fp
 8010e30:	f67f aee8 	bls.w	8010c04 <_scanf_float+0x80>
 8010e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e3c:	463a      	mov	r2, r7
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4798      	blx	r3
 8010e42:	6923      	ldr	r3, [r4, #16]
 8010e44:	3b01      	subs	r3, #1
 8010e46:	6123      	str	r3, [r4, #16]
 8010e48:	e7f1      	b.n	8010e2e <_scanf_float+0x2aa>
 8010e4a:	9802      	ldr	r0, [sp, #8]
 8010e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010e54:	9002      	str	r0, [sp, #8]
 8010e56:	463a      	mov	r2, r7
 8010e58:	4640      	mov	r0, r8
 8010e5a:	4798      	blx	r3
 8010e5c:	6923      	ldr	r3, [r4, #16]
 8010e5e:	3b01      	subs	r3, #1
 8010e60:	6123      	str	r3, [r4, #16]
 8010e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e66:	fa5f fa8a 	uxtb.w	sl, sl
 8010e6a:	f1ba 0f02 	cmp.w	sl, #2
 8010e6e:	d1ec      	bne.n	8010e4a <_scanf_float+0x2c6>
 8010e70:	3d03      	subs	r5, #3
 8010e72:	b2ed      	uxtb	r5, r5
 8010e74:	1b76      	subs	r6, r6, r5
 8010e76:	6823      	ldr	r3, [r4, #0]
 8010e78:	05da      	lsls	r2, r3, #23
 8010e7a:	d52f      	bpl.n	8010edc <_scanf_float+0x358>
 8010e7c:	055b      	lsls	r3, r3, #21
 8010e7e:	d510      	bpl.n	8010ea2 <_scanf_float+0x31e>
 8010e80:	455e      	cmp	r6, fp
 8010e82:	f67f aebf 	bls.w	8010c04 <_scanf_float+0x80>
 8010e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e8e:	463a      	mov	r2, r7
 8010e90:	4640      	mov	r0, r8
 8010e92:	4798      	blx	r3
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	3b01      	subs	r3, #1
 8010e98:	6123      	str	r3, [r4, #16]
 8010e9a:	e7f1      	b.n	8010e80 <_scanf_float+0x2fc>
 8010e9c:	46aa      	mov	sl, r5
 8010e9e:	9602      	str	r6, [sp, #8]
 8010ea0:	e7df      	b.n	8010e62 <_scanf_float+0x2de>
 8010ea2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010ea6:	6923      	ldr	r3, [r4, #16]
 8010ea8:	2965      	cmp	r1, #101	; 0x65
 8010eaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8010eae:	f106 35ff 	add.w	r5, r6, #4294967295
 8010eb2:	6123      	str	r3, [r4, #16]
 8010eb4:	d00c      	beq.n	8010ed0 <_scanf_float+0x34c>
 8010eb6:	2945      	cmp	r1, #69	; 0x45
 8010eb8:	d00a      	beq.n	8010ed0 <_scanf_float+0x34c>
 8010eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	4640      	mov	r0, r8
 8010ec2:	4798      	blx	r3
 8010ec4:	6923      	ldr	r3, [r4, #16]
 8010ec6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010eca:	3b01      	subs	r3, #1
 8010ecc:	1eb5      	subs	r5, r6, #2
 8010ece:	6123      	str	r3, [r4, #16]
 8010ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ed4:	463a      	mov	r2, r7
 8010ed6:	4640      	mov	r0, r8
 8010ed8:	4798      	blx	r3
 8010eda:	462e      	mov	r6, r5
 8010edc:	6825      	ldr	r5, [r4, #0]
 8010ede:	f015 0510 	ands.w	r5, r5, #16
 8010ee2:	d14d      	bne.n	8010f80 <_scanf_float+0x3fc>
 8010ee4:	7035      	strb	r5, [r6, #0]
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef0:	d11a      	bne.n	8010f28 <_scanf_float+0x3a4>
 8010ef2:	9b01      	ldr	r3, [sp, #4]
 8010ef4:	454b      	cmp	r3, r9
 8010ef6:	eba3 0209 	sub.w	r2, r3, r9
 8010efa:	d122      	bne.n	8010f42 <_scanf_float+0x3be>
 8010efc:	2200      	movs	r2, #0
 8010efe:	4659      	mov	r1, fp
 8010f00:	4640      	mov	r0, r8
 8010f02:	f000 ff53 	bl	8011dac <_strtod_r>
 8010f06:	9b03      	ldr	r3, [sp, #12]
 8010f08:	6821      	ldr	r1, [r4, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f011 0f02 	tst.w	r1, #2
 8010f10:	f103 0204 	add.w	r2, r3, #4
 8010f14:	d020      	beq.n	8010f58 <_scanf_float+0x3d4>
 8010f16:	9903      	ldr	r1, [sp, #12]
 8010f18:	600a      	str	r2, [r1, #0]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	ed83 0b00 	vstr	d0, [r3]
 8010f20:	68e3      	ldr	r3, [r4, #12]
 8010f22:	3301      	adds	r3, #1
 8010f24:	60e3      	str	r3, [r4, #12]
 8010f26:	e66e      	b.n	8010c06 <_scanf_float+0x82>
 8010f28:	9b04      	ldr	r3, [sp, #16]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0e6      	beq.n	8010efc <_scanf_float+0x378>
 8010f2e:	9905      	ldr	r1, [sp, #20]
 8010f30:	230a      	movs	r3, #10
 8010f32:	462a      	mov	r2, r5
 8010f34:	3101      	adds	r1, #1
 8010f36:	4640      	mov	r0, r8
 8010f38:	f000 ffc2 	bl	8011ec0 <_strtol_r>
 8010f3c:	9b04      	ldr	r3, [sp, #16]
 8010f3e:	9e05      	ldr	r6, [sp, #20]
 8010f40:	1ac2      	subs	r2, r0, r3
 8010f42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f46:	429e      	cmp	r6, r3
 8010f48:	bf28      	it	cs
 8010f4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010f4e:	490d      	ldr	r1, [pc, #52]	; (8010f84 <_scanf_float+0x400>)
 8010f50:	4630      	mov	r0, r6
 8010f52:	f000 f8f3 	bl	801113c <siprintf>
 8010f56:	e7d1      	b.n	8010efc <_scanf_float+0x378>
 8010f58:	f011 0f04 	tst.w	r1, #4
 8010f5c:	9903      	ldr	r1, [sp, #12]
 8010f5e:	600a      	str	r2, [r1, #0]
 8010f60:	d1db      	bne.n	8010f1a <_scanf_float+0x396>
 8010f62:	eeb4 0b40 	vcmp.f64	d0, d0
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	681e      	ldr	r6, [r3, #0]
 8010f6c:	d705      	bvc.n	8010f7a <_scanf_float+0x3f6>
 8010f6e:	4806      	ldr	r0, [pc, #24]	; (8010f88 <_scanf_float+0x404>)
 8010f70:	f000 f8aa 	bl	80110c8 <nanf>
 8010f74:	ed86 0a00 	vstr	s0, [r6]
 8010f78:	e7d2      	b.n	8010f20 <_scanf_float+0x39c>
 8010f7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f7e:	e7f9      	b.n	8010f74 <_scanf_float+0x3f0>
 8010f80:	2500      	movs	r5, #0
 8010f82:	e640      	b.n	8010c06 <_scanf_float+0x82>
 8010f84:	0801d529 	.word	0x0801d529
 8010f88:	0801d4de 	.word	0x0801d4de

08010f8c <iprintf>:
 8010f8c:	b40f      	push	{r0, r1, r2, r3}
 8010f8e:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <iprintf+0x2c>)
 8010f90:	b513      	push	{r0, r1, r4, lr}
 8010f92:	681c      	ldr	r4, [r3, #0]
 8010f94:	b124      	cbz	r4, 8010fa0 <iprintf+0x14>
 8010f96:	69a3      	ldr	r3, [r4, #24]
 8010f98:	b913      	cbnz	r3, 8010fa0 <iprintf+0x14>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f001 ff80 	bl	8012ea0 <__sinit>
 8010fa0:	ab05      	add	r3, sp, #20
 8010fa2:	9a04      	ldr	r2, [sp, #16]
 8010fa4:	68a1      	ldr	r1, [r4, #8]
 8010fa6:	9301      	str	r3, [sp, #4]
 8010fa8:	4620      	mov	r0, r4
 8010faa:	f7ff f879 	bl	80100a0 <_vfiprintf_r>
 8010fae:	b002      	add	sp, #8
 8010fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fb4:	b004      	add	sp, #16
 8010fb6:	4770      	bx	lr
 8010fb8:	2400a0e8 	.word	0x2400a0e8

08010fbc <_puts_r>:
 8010fbc:	b570      	push	{r4, r5, r6, lr}
 8010fbe:	460e      	mov	r6, r1
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	b118      	cbz	r0, 8010fcc <_puts_r+0x10>
 8010fc4:	6983      	ldr	r3, [r0, #24]
 8010fc6:	b90b      	cbnz	r3, 8010fcc <_puts_r+0x10>
 8010fc8:	f001 ff6a 	bl	8012ea0 <__sinit>
 8010fcc:	69ab      	ldr	r3, [r5, #24]
 8010fce:	68ac      	ldr	r4, [r5, #8]
 8010fd0:	b913      	cbnz	r3, 8010fd8 <_puts_r+0x1c>
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f001 ff64 	bl	8012ea0 <__sinit>
 8010fd8:	4b2c      	ldr	r3, [pc, #176]	; (801108c <_puts_r+0xd0>)
 8010fda:	429c      	cmp	r4, r3
 8010fdc:	d120      	bne.n	8011020 <_puts_r+0x64>
 8010fde:	686c      	ldr	r4, [r5, #4]
 8010fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fe2:	07db      	lsls	r3, r3, #31
 8010fe4:	d405      	bmi.n	8010ff2 <_puts_r+0x36>
 8010fe6:	89a3      	ldrh	r3, [r4, #12]
 8010fe8:	0598      	lsls	r0, r3, #22
 8010fea:	d402      	bmi.n	8010ff2 <_puts_r+0x36>
 8010fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fee:	f002 fb68 	bl	80136c2 <__retarget_lock_acquire_recursive>
 8010ff2:	89a3      	ldrh	r3, [r4, #12]
 8010ff4:	0719      	lsls	r1, r3, #28
 8010ff6:	d51d      	bpl.n	8011034 <_puts_r+0x78>
 8010ff8:	6923      	ldr	r3, [r4, #16]
 8010ffa:	b1db      	cbz	r3, 8011034 <_puts_r+0x78>
 8010ffc:	3e01      	subs	r6, #1
 8010ffe:	68a3      	ldr	r3, [r4, #8]
 8011000:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011004:	3b01      	subs	r3, #1
 8011006:	60a3      	str	r3, [r4, #8]
 8011008:	bb39      	cbnz	r1, 801105a <_puts_r+0x9e>
 801100a:	2b00      	cmp	r3, #0
 801100c:	da38      	bge.n	8011080 <_puts_r+0xc4>
 801100e:	4622      	mov	r2, r4
 8011010:	210a      	movs	r1, #10
 8011012:	4628      	mov	r0, r5
 8011014:	f000 ff56 	bl	8011ec4 <__swbuf_r>
 8011018:	3001      	adds	r0, #1
 801101a:	d011      	beq.n	8011040 <_puts_r+0x84>
 801101c:	250a      	movs	r5, #10
 801101e:	e011      	b.n	8011044 <_puts_r+0x88>
 8011020:	4b1b      	ldr	r3, [pc, #108]	; (8011090 <_puts_r+0xd4>)
 8011022:	429c      	cmp	r4, r3
 8011024:	d101      	bne.n	801102a <_puts_r+0x6e>
 8011026:	68ac      	ldr	r4, [r5, #8]
 8011028:	e7da      	b.n	8010fe0 <_puts_r+0x24>
 801102a:	4b1a      	ldr	r3, [pc, #104]	; (8011094 <_puts_r+0xd8>)
 801102c:	429c      	cmp	r4, r3
 801102e:	bf08      	it	eq
 8011030:	68ec      	ldreq	r4, [r5, #12]
 8011032:	e7d5      	b.n	8010fe0 <_puts_r+0x24>
 8011034:	4621      	mov	r1, r4
 8011036:	4628      	mov	r0, r5
 8011038:	f000 ff96 	bl	8011f68 <__swsetup_r>
 801103c:	2800      	cmp	r0, #0
 801103e:	d0dd      	beq.n	8010ffc <_puts_r+0x40>
 8011040:	f04f 35ff 	mov.w	r5, #4294967295
 8011044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011046:	07da      	lsls	r2, r3, #31
 8011048:	d405      	bmi.n	8011056 <_puts_r+0x9a>
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	059b      	lsls	r3, r3, #22
 801104e:	d402      	bmi.n	8011056 <_puts_r+0x9a>
 8011050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011052:	f002 fb37 	bl	80136c4 <__retarget_lock_release_recursive>
 8011056:	4628      	mov	r0, r5
 8011058:	bd70      	pop	{r4, r5, r6, pc}
 801105a:	2b00      	cmp	r3, #0
 801105c:	da04      	bge.n	8011068 <_puts_r+0xac>
 801105e:	69a2      	ldr	r2, [r4, #24]
 8011060:	429a      	cmp	r2, r3
 8011062:	dc06      	bgt.n	8011072 <_puts_r+0xb6>
 8011064:	290a      	cmp	r1, #10
 8011066:	d004      	beq.n	8011072 <_puts_r+0xb6>
 8011068:	6823      	ldr	r3, [r4, #0]
 801106a:	1c5a      	adds	r2, r3, #1
 801106c:	6022      	str	r2, [r4, #0]
 801106e:	7019      	strb	r1, [r3, #0]
 8011070:	e7c5      	b.n	8010ffe <_puts_r+0x42>
 8011072:	4622      	mov	r2, r4
 8011074:	4628      	mov	r0, r5
 8011076:	f000 ff25 	bl	8011ec4 <__swbuf_r>
 801107a:	3001      	adds	r0, #1
 801107c:	d1bf      	bne.n	8010ffe <_puts_r+0x42>
 801107e:	e7df      	b.n	8011040 <_puts_r+0x84>
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	250a      	movs	r5, #10
 8011084:	1c5a      	adds	r2, r3, #1
 8011086:	6022      	str	r2, [r4, #0]
 8011088:	701d      	strb	r5, [r3, #0]
 801108a:	e7db      	b.n	8011044 <_puts_r+0x88>
 801108c:	0801d738 	.word	0x0801d738
 8011090:	0801d758 	.word	0x0801d758
 8011094:	0801d718 	.word	0x0801d718

08011098 <puts>:
 8011098:	4b02      	ldr	r3, [pc, #8]	; (80110a4 <puts+0xc>)
 801109a:	4601      	mov	r1, r0
 801109c:	6818      	ldr	r0, [r3, #0]
 801109e:	f7ff bf8d 	b.w	8010fbc <_puts_r>
 80110a2:	bf00      	nop
 80110a4:	2400a0e8 	.word	0x2400a0e8

080110a8 <_sbrk_r>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	4d06      	ldr	r5, [pc, #24]	; (80110c4 <_sbrk_r+0x1c>)
 80110ac:	2300      	movs	r3, #0
 80110ae:	4604      	mov	r4, r0
 80110b0:	4608      	mov	r0, r1
 80110b2:	602b      	str	r3, [r5, #0]
 80110b4:	f7f0 fc84 	bl	80019c0 <_sbrk>
 80110b8:	1c43      	adds	r3, r0, #1
 80110ba:	d102      	bne.n	80110c2 <_sbrk_r+0x1a>
 80110bc:	682b      	ldr	r3, [r5, #0]
 80110be:	b103      	cbz	r3, 80110c2 <_sbrk_r+0x1a>
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	bd38      	pop	{r3, r4, r5, pc}
 80110c4:	2400f69c 	.word	0x2400f69c

080110c8 <nanf>:
 80110c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80110d0 <nanf+0x8>
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	7fc00000 	.word	0x7fc00000

080110d4 <sniprintf>:
 80110d4:	b40c      	push	{r2, r3}
 80110d6:	b530      	push	{r4, r5, lr}
 80110d8:	4b17      	ldr	r3, [pc, #92]	; (8011138 <sniprintf+0x64>)
 80110da:	1e0c      	subs	r4, r1, #0
 80110dc:	681d      	ldr	r5, [r3, #0]
 80110de:	b09d      	sub	sp, #116	; 0x74
 80110e0:	da08      	bge.n	80110f4 <sniprintf+0x20>
 80110e2:	238b      	movs	r3, #139	; 0x8b
 80110e4:	602b      	str	r3, [r5, #0]
 80110e6:	f04f 30ff 	mov.w	r0, #4294967295
 80110ea:	b01d      	add	sp, #116	; 0x74
 80110ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110f0:	b002      	add	sp, #8
 80110f2:	4770      	bx	lr
 80110f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80110f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80110fc:	bf14      	ite	ne
 80110fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011102:	4623      	moveq	r3, r4
 8011104:	9304      	str	r3, [sp, #16]
 8011106:	9307      	str	r3, [sp, #28]
 8011108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801110c:	9002      	str	r0, [sp, #8]
 801110e:	9006      	str	r0, [sp, #24]
 8011110:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011114:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011116:	ab21      	add	r3, sp, #132	; 0x84
 8011118:	a902      	add	r1, sp, #8
 801111a:	4628      	mov	r0, r5
 801111c:	9301      	str	r3, [sp, #4]
 801111e:	f003 f8a1 	bl	8014264 <_svfiprintf_r>
 8011122:	1c43      	adds	r3, r0, #1
 8011124:	bfbc      	itt	lt
 8011126:	238b      	movlt	r3, #139	; 0x8b
 8011128:	602b      	strlt	r3, [r5, #0]
 801112a:	2c00      	cmp	r4, #0
 801112c:	d0dd      	beq.n	80110ea <sniprintf+0x16>
 801112e:	9b02      	ldr	r3, [sp, #8]
 8011130:	2200      	movs	r2, #0
 8011132:	701a      	strb	r2, [r3, #0]
 8011134:	e7d9      	b.n	80110ea <sniprintf+0x16>
 8011136:	bf00      	nop
 8011138:	2400a0e8 	.word	0x2400a0e8

0801113c <siprintf>:
 801113c:	b40e      	push	{r1, r2, r3}
 801113e:	b500      	push	{lr}
 8011140:	b09c      	sub	sp, #112	; 0x70
 8011142:	ab1d      	add	r3, sp, #116	; 0x74
 8011144:	9002      	str	r0, [sp, #8]
 8011146:	9006      	str	r0, [sp, #24]
 8011148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801114c:	4809      	ldr	r0, [pc, #36]	; (8011174 <siprintf+0x38>)
 801114e:	9107      	str	r1, [sp, #28]
 8011150:	9104      	str	r1, [sp, #16]
 8011152:	4909      	ldr	r1, [pc, #36]	; (8011178 <siprintf+0x3c>)
 8011154:	f853 2b04 	ldr.w	r2, [r3], #4
 8011158:	9105      	str	r1, [sp, #20]
 801115a:	6800      	ldr	r0, [r0, #0]
 801115c:	9301      	str	r3, [sp, #4]
 801115e:	a902      	add	r1, sp, #8
 8011160:	f003 f880 	bl	8014264 <_svfiprintf_r>
 8011164:	9b02      	ldr	r3, [sp, #8]
 8011166:	2200      	movs	r2, #0
 8011168:	701a      	strb	r2, [r3, #0]
 801116a:	b01c      	add	sp, #112	; 0x70
 801116c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011170:	b003      	add	sp, #12
 8011172:	4770      	bx	lr
 8011174:	2400a0e8 	.word	0x2400a0e8
 8011178:	ffff0208 	.word	0xffff0208

0801117c <strncmp>:
 801117c:	b510      	push	{r4, lr}
 801117e:	b16a      	cbz	r2, 801119c <strncmp+0x20>
 8011180:	3901      	subs	r1, #1
 8011182:	1884      	adds	r4, r0, r2
 8011184:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011188:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801118c:	4293      	cmp	r3, r2
 801118e:	d103      	bne.n	8011198 <strncmp+0x1c>
 8011190:	42a0      	cmp	r0, r4
 8011192:	d001      	beq.n	8011198 <strncmp+0x1c>
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1f5      	bne.n	8011184 <strncmp+0x8>
 8011198:	1a98      	subs	r0, r3, r2
 801119a:	bd10      	pop	{r4, pc}
 801119c:	4610      	mov	r0, r2
 801119e:	e7fc      	b.n	801119a <strncmp+0x1e>

080111a0 <strncpy>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	3901      	subs	r1, #1
 80111a4:	4603      	mov	r3, r0
 80111a6:	b132      	cbz	r2, 80111b6 <strncpy+0x16>
 80111a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111ac:	f803 4b01 	strb.w	r4, [r3], #1
 80111b0:	3a01      	subs	r2, #1
 80111b2:	2c00      	cmp	r4, #0
 80111b4:	d1f7      	bne.n	80111a6 <strncpy+0x6>
 80111b6:	441a      	add	r2, r3
 80111b8:	2100      	movs	r1, #0
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d100      	bne.n	80111c0 <strncpy+0x20>
 80111be:	bd10      	pop	{r4, pc}
 80111c0:	f803 1b01 	strb.w	r1, [r3], #1
 80111c4:	e7f9      	b.n	80111ba <strncpy+0x1a>

080111c6 <sulp>:
 80111c6:	b570      	push	{r4, r5, r6, lr}
 80111c8:	4604      	mov	r4, r0
 80111ca:	460d      	mov	r5, r1
 80111cc:	4616      	mov	r6, r2
 80111ce:	ec45 4b10 	vmov	d0, r4, r5
 80111d2:	f002 fe67 	bl	8013ea4 <__ulp>
 80111d6:	b17e      	cbz	r6, 80111f8 <sulp+0x32>
 80111d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80111dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dd09      	ble.n	80111f8 <sulp+0x32>
 80111e4:	051b      	lsls	r3, r3, #20
 80111e6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80111ea:	2000      	movs	r0, #0
 80111ec:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80111f0:	ec41 0b17 	vmov	d7, r0, r1
 80111f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80111f8:	bd70      	pop	{r4, r5, r6, pc}
 80111fa:	0000      	movs	r0, r0
 80111fc:	0000      	movs	r0, r0
	...

08011200 <_strtod_l>:
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	ed2d 8b0c 	vpush	{d8-d13}
 8011208:	b09d      	sub	sp, #116	; 0x74
 801120a:	461f      	mov	r7, r3
 801120c:	2300      	movs	r3, #0
 801120e:	9318      	str	r3, [sp, #96]	; 0x60
 8011210:	4ba6      	ldr	r3, [pc, #664]	; (80114ac <_strtod_l+0x2ac>)
 8011212:	9213      	str	r2, [sp, #76]	; 0x4c
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	9308      	str	r3, [sp, #32]
 8011218:	4604      	mov	r4, r0
 801121a:	4618      	mov	r0, r3
 801121c:	468a      	mov	sl, r1
 801121e:	f7ef f869 	bl	80002f4 <strlen>
 8011222:	f04f 0800 	mov.w	r8, #0
 8011226:	4605      	mov	r5, r0
 8011228:	f04f 0900 	mov.w	r9, #0
 801122c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8011230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011232:	781a      	ldrb	r2, [r3, #0]
 8011234:	2a2b      	cmp	r2, #43	; 0x2b
 8011236:	d04d      	beq.n	80112d4 <_strtod_l+0xd4>
 8011238:	d83a      	bhi.n	80112b0 <_strtod_l+0xb0>
 801123a:	2a0d      	cmp	r2, #13
 801123c:	d833      	bhi.n	80112a6 <_strtod_l+0xa6>
 801123e:	2a08      	cmp	r2, #8
 8011240:	d833      	bhi.n	80112aa <_strtod_l+0xaa>
 8011242:	2a00      	cmp	r2, #0
 8011244:	d03d      	beq.n	80112c2 <_strtod_l+0xc2>
 8011246:	2300      	movs	r3, #0
 8011248:	930b      	str	r3, [sp, #44]	; 0x2c
 801124a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801124c:	7833      	ldrb	r3, [r6, #0]
 801124e:	2b30      	cmp	r3, #48	; 0x30
 8011250:	f040 80b6 	bne.w	80113c0 <_strtod_l+0x1c0>
 8011254:	7873      	ldrb	r3, [r6, #1]
 8011256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801125a:	2b58      	cmp	r3, #88	; 0x58
 801125c:	d16d      	bne.n	801133a <_strtod_l+0x13a>
 801125e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011260:	9301      	str	r3, [sp, #4]
 8011262:	ab18      	add	r3, sp, #96	; 0x60
 8011264:	9702      	str	r7, [sp, #8]
 8011266:	9300      	str	r3, [sp, #0]
 8011268:	4a91      	ldr	r2, [pc, #580]	; (80114b0 <_strtod_l+0x2b0>)
 801126a:	ab19      	add	r3, sp, #100	; 0x64
 801126c:	a917      	add	r1, sp, #92	; 0x5c
 801126e:	4620      	mov	r0, r4
 8011270:	f001 ff1a 	bl	80130a8 <__gethex>
 8011274:	f010 0507 	ands.w	r5, r0, #7
 8011278:	4607      	mov	r7, r0
 801127a:	d005      	beq.n	8011288 <_strtod_l+0x88>
 801127c:	2d06      	cmp	r5, #6
 801127e:	d12b      	bne.n	80112d8 <_strtod_l+0xd8>
 8011280:	3601      	adds	r6, #1
 8011282:	2300      	movs	r3, #0
 8011284:	9617      	str	r6, [sp, #92]	; 0x5c
 8011286:	930b      	str	r3, [sp, #44]	; 0x2c
 8011288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801128a:	2b00      	cmp	r3, #0
 801128c:	f040 856e 	bne.w	8011d6c <_strtod_l+0xb6c>
 8011290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011292:	b1e3      	cbz	r3, 80112ce <_strtod_l+0xce>
 8011294:	ec49 8b17 	vmov	d7, r8, r9
 8011298:	eeb1 0b47 	vneg.f64	d0, d7
 801129c:	b01d      	add	sp, #116	; 0x74
 801129e:	ecbd 8b0c 	vpop	{d8-d13}
 80112a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a6:	2a20      	cmp	r2, #32
 80112a8:	d1cd      	bne.n	8011246 <_strtod_l+0x46>
 80112aa:	3301      	adds	r3, #1
 80112ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80112ae:	e7bf      	b.n	8011230 <_strtod_l+0x30>
 80112b0:	2a2d      	cmp	r2, #45	; 0x2d
 80112b2:	d1c8      	bne.n	8011246 <_strtod_l+0x46>
 80112b4:	2201      	movs	r2, #1
 80112b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80112bc:	785b      	ldrb	r3, [r3, #1]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1c3      	bne.n	801124a <_strtod_l+0x4a>
 80112c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80112c4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f040 854d 	bne.w	8011d68 <_strtod_l+0xb68>
 80112ce:	ec49 8b10 	vmov	d0, r8, r9
 80112d2:	e7e3      	b.n	801129c <_strtod_l+0x9c>
 80112d4:	2200      	movs	r2, #0
 80112d6:	e7ee      	b.n	80112b6 <_strtod_l+0xb6>
 80112d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80112da:	b13a      	cbz	r2, 80112ec <_strtod_l+0xec>
 80112dc:	2135      	movs	r1, #53	; 0x35
 80112de:	a81a      	add	r0, sp, #104	; 0x68
 80112e0:	f002 feec 	bl	80140bc <__copybits>
 80112e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80112e6:	4620      	mov	r0, r4
 80112e8:	f002 fab0 	bl	801384c <_Bfree>
 80112ec:	3d01      	subs	r5, #1
 80112ee:	2d05      	cmp	r5, #5
 80112f0:	d807      	bhi.n	8011302 <_strtod_l+0x102>
 80112f2:	e8df f005 	tbb	[pc, r5]
 80112f6:	0b0e      	.short	0x0b0e
 80112f8:	030e1d18 	.word	0x030e1d18
 80112fc:	f04f 0900 	mov.w	r9, #0
 8011300:	46c8      	mov	r8, r9
 8011302:	073b      	lsls	r3, r7, #28
 8011304:	d5c0      	bpl.n	8011288 <_strtod_l+0x88>
 8011306:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801130a:	e7bd      	b.n	8011288 <_strtod_l+0x88>
 801130c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8011310:	e7f7      	b.n	8011302 <_strtod_l+0x102>
 8011312:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8011316:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011318:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801131c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011320:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011324:	e7ed      	b.n	8011302 <_strtod_l+0x102>
 8011326:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80114b4 <_strtod_l+0x2b4>
 801132a:	f04f 0800 	mov.w	r8, #0
 801132e:	e7e8      	b.n	8011302 <_strtod_l+0x102>
 8011330:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011334:	f04f 38ff 	mov.w	r8, #4294967295
 8011338:	e7e3      	b.n	8011302 <_strtod_l+0x102>
 801133a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801133c:	1c5a      	adds	r2, r3, #1
 801133e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011340:	785b      	ldrb	r3, [r3, #1]
 8011342:	2b30      	cmp	r3, #48	; 0x30
 8011344:	d0f9      	beq.n	801133a <_strtod_l+0x13a>
 8011346:	2b00      	cmp	r3, #0
 8011348:	d09e      	beq.n	8011288 <_strtod_l+0x88>
 801134a:	2301      	movs	r3, #1
 801134c:	9306      	str	r3, [sp, #24]
 801134e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011350:	930c      	str	r3, [sp, #48]	; 0x30
 8011352:	2300      	movs	r3, #0
 8011354:	9304      	str	r3, [sp, #16]
 8011356:	930a      	str	r3, [sp, #40]	; 0x28
 8011358:	461e      	mov	r6, r3
 801135a:	220a      	movs	r2, #10
 801135c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801135e:	f890 b000 	ldrb.w	fp, [r0]
 8011362:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8011366:	b2d9      	uxtb	r1, r3
 8011368:	2909      	cmp	r1, #9
 801136a:	d92b      	bls.n	80113c4 <_strtod_l+0x1c4>
 801136c:	9908      	ldr	r1, [sp, #32]
 801136e:	462a      	mov	r2, r5
 8011370:	f7ff ff04 	bl	801117c <strncmp>
 8011374:	2800      	cmp	r0, #0
 8011376:	d035      	beq.n	80113e4 <_strtod_l+0x1e4>
 8011378:	2000      	movs	r0, #0
 801137a:	465a      	mov	r2, fp
 801137c:	4633      	mov	r3, r6
 801137e:	4683      	mov	fp, r0
 8011380:	4601      	mov	r1, r0
 8011382:	2a65      	cmp	r2, #101	; 0x65
 8011384:	d001      	beq.n	801138a <_strtod_l+0x18a>
 8011386:	2a45      	cmp	r2, #69	; 0x45
 8011388:	d118      	bne.n	80113bc <_strtod_l+0x1bc>
 801138a:	b91b      	cbnz	r3, 8011394 <_strtod_l+0x194>
 801138c:	9b06      	ldr	r3, [sp, #24]
 801138e:	4303      	orrs	r3, r0
 8011390:	d097      	beq.n	80112c2 <_strtod_l+0xc2>
 8011392:	2300      	movs	r3, #0
 8011394:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8011398:	f10a 0201 	add.w	r2, sl, #1
 801139c:	9217      	str	r2, [sp, #92]	; 0x5c
 801139e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80113a2:	2a2b      	cmp	r2, #43	; 0x2b
 80113a4:	d077      	beq.n	8011496 <_strtod_l+0x296>
 80113a6:	2a2d      	cmp	r2, #45	; 0x2d
 80113a8:	d07d      	beq.n	80114a6 <_strtod_l+0x2a6>
 80113aa:	f04f 0e00 	mov.w	lr, #0
 80113ae:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80113b2:	2d09      	cmp	r5, #9
 80113b4:	f240 8084 	bls.w	80114c0 <_strtod_l+0x2c0>
 80113b8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80113bc:	2500      	movs	r5, #0
 80113be:	e09f      	b.n	8011500 <_strtod_l+0x300>
 80113c0:	2300      	movs	r3, #0
 80113c2:	e7c3      	b.n	801134c <_strtod_l+0x14c>
 80113c4:	2e08      	cmp	r6, #8
 80113c6:	bfd5      	itete	le
 80113c8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80113ca:	9904      	ldrgt	r1, [sp, #16]
 80113cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80113d0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80113d4:	f100 0001 	add.w	r0, r0, #1
 80113d8:	bfd4      	ite	le
 80113da:	930a      	strle	r3, [sp, #40]	; 0x28
 80113dc:	9304      	strgt	r3, [sp, #16]
 80113de:	3601      	adds	r6, #1
 80113e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80113e2:	e7bb      	b.n	801135c <_strtod_l+0x15c>
 80113e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113e6:	195a      	adds	r2, r3, r5
 80113e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80113ea:	5d5a      	ldrb	r2, [r3, r5]
 80113ec:	b3ae      	cbz	r6, 801145a <_strtod_l+0x25a>
 80113ee:	4683      	mov	fp, r0
 80113f0:	4633      	mov	r3, r6
 80113f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80113f6:	2909      	cmp	r1, #9
 80113f8:	d912      	bls.n	8011420 <_strtod_l+0x220>
 80113fa:	2101      	movs	r1, #1
 80113fc:	e7c1      	b.n	8011382 <_strtod_l+0x182>
 80113fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011400:	1c5a      	adds	r2, r3, #1
 8011402:	9217      	str	r2, [sp, #92]	; 0x5c
 8011404:	785a      	ldrb	r2, [r3, #1]
 8011406:	3001      	adds	r0, #1
 8011408:	2a30      	cmp	r2, #48	; 0x30
 801140a:	d0f8      	beq.n	80113fe <_strtod_l+0x1fe>
 801140c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011410:	2b08      	cmp	r3, #8
 8011412:	f200 84b0 	bhi.w	8011d76 <_strtod_l+0xb76>
 8011416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011418:	930c      	str	r3, [sp, #48]	; 0x30
 801141a:	4683      	mov	fp, r0
 801141c:	2000      	movs	r0, #0
 801141e:	4603      	mov	r3, r0
 8011420:	3a30      	subs	r2, #48	; 0x30
 8011422:	f100 0101 	add.w	r1, r0, #1
 8011426:	d012      	beq.n	801144e <_strtod_l+0x24e>
 8011428:	448b      	add	fp, r1
 801142a:	eb00 0c03 	add.w	ip, r0, r3
 801142e:	4619      	mov	r1, r3
 8011430:	250a      	movs	r5, #10
 8011432:	4561      	cmp	r1, ip
 8011434:	d113      	bne.n	801145e <_strtod_l+0x25e>
 8011436:	1819      	adds	r1, r3, r0
 8011438:	2908      	cmp	r1, #8
 801143a:	f103 0301 	add.w	r3, r3, #1
 801143e:	4403      	add	r3, r0
 8011440:	dc1d      	bgt.n	801147e <_strtod_l+0x27e>
 8011442:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011444:	210a      	movs	r1, #10
 8011446:	fb01 2200 	mla	r2, r1, r0, r2
 801144a:	920a      	str	r2, [sp, #40]	; 0x28
 801144c:	2100      	movs	r1, #0
 801144e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011450:	1c50      	adds	r0, r2, #1
 8011452:	9017      	str	r0, [sp, #92]	; 0x5c
 8011454:	7852      	ldrb	r2, [r2, #1]
 8011456:	4608      	mov	r0, r1
 8011458:	e7cb      	b.n	80113f2 <_strtod_l+0x1f2>
 801145a:	4630      	mov	r0, r6
 801145c:	e7d4      	b.n	8011408 <_strtod_l+0x208>
 801145e:	2908      	cmp	r1, #8
 8011460:	dc04      	bgt.n	801146c <_strtod_l+0x26c>
 8011462:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011464:	436f      	muls	r7, r5
 8011466:	970a      	str	r7, [sp, #40]	; 0x28
 8011468:	3101      	adds	r1, #1
 801146a:	e7e2      	b.n	8011432 <_strtod_l+0x232>
 801146c:	f101 0e01 	add.w	lr, r1, #1
 8011470:	f1be 0f10 	cmp.w	lr, #16
 8011474:	bfde      	ittt	le
 8011476:	9f04      	ldrle	r7, [sp, #16]
 8011478:	436f      	mulle	r7, r5
 801147a:	9704      	strle	r7, [sp, #16]
 801147c:	e7f4      	b.n	8011468 <_strtod_l+0x268>
 801147e:	2b10      	cmp	r3, #16
 8011480:	bfdf      	itttt	le
 8011482:	9804      	ldrle	r0, [sp, #16]
 8011484:	210a      	movle	r1, #10
 8011486:	fb01 2200 	mlale	r2, r1, r0, r2
 801148a:	9204      	strle	r2, [sp, #16]
 801148c:	e7de      	b.n	801144c <_strtod_l+0x24c>
 801148e:	f04f 0b00 	mov.w	fp, #0
 8011492:	2101      	movs	r1, #1
 8011494:	e77a      	b.n	801138c <_strtod_l+0x18c>
 8011496:	f04f 0e00 	mov.w	lr, #0
 801149a:	f10a 0202 	add.w	r2, sl, #2
 801149e:	9217      	str	r2, [sp, #92]	; 0x5c
 80114a0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80114a4:	e783      	b.n	80113ae <_strtod_l+0x1ae>
 80114a6:	f04f 0e01 	mov.w	lr, #1
 80114aa:	e7f6      	b.n	801149a <_strtod_l+0x29a>
 80114ac:	0801d7e4 	.word	0x0801d7e4
 80114b0:	0801d530 	.word	0x0801d530
 80114b4:	7ff00000 	.word	0x7ff00000
 80114b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80114ba:	1c55      	adds	r5, r2, #1
 80114bc:	9517      	str	r5, [sp, #92]	; 0x5c
 80114be:	7852      	ldrb	r2, [r2, #1]
 80114c0:	2a30      	cmp	r2, #48	; 0x30
 80114c2:	d0f9      	beq.n	80114b8 <_strtod_l+0x2b8>
 80114c4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80114c8:	2d08      	cmp	r5, #8
 80114ca:	f63f af77 	bhi.w	80113bc <_strtod_l+0x1bc>
 80114ce:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80114d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80114d4:	9208      	str	r2, [sp, #32]
 80114d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80114d8:	1c55      	adds	r5, r2, #1
 80114da:	9517      	str	r5, [sp, #92]	; 0x5c
 80114dc:	7852      	ldrb	r2, [r2, #1]
 80114de:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80114e2:	2f09      	cmp	r7, #9
 80114e4:	d937      	bls.n	8011556 <_strtod_l+0x356>
 80114e6:	9f08      	ldr	r7, [sp, #32]
 80114e8:	1bed      	subs	r5, r5, r7
 80114ea:	2d08      	cmp	r5, #8
 80114ec:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80114f0:	dc02      	bgt.n	80114f8 <_strtod_l+0x2f8>
 80114f2:	4565      	cmp	r5, ip
 80114f4:	bfa8      	it	ge
 80114f6:	4665      	movge	r5, ip
 80114f8:	f1be 0f00 	cmp.w	lr, #0
 80114fc:	d000      	beq.n	8011500 <_strtod_l+0x300>
 80114fe:	426d      	negs	r5, r5
 8011500:	2b00      	cmp	r3, #0
 8011502:	d14f      	bne.n	80115a4 <_strtod_l+0x3a4>
 8011504:	9b06      	ldr	r3, [sp, #24]
 8011506:	4303      	orrs	r3, r0
 8011508:	f47f aebe 	bne.w	8011288 <_strtod_l+0x88>
 801150c:	2900      	cmp	r1, #0
 801150e:	f47f aed8 	bne.w	80112c2 <_strtod_l+0xc2>
 8011512:	2a69      	cmp	r2, #105	; 0x69
 8011514:	d027      	beq.n	8011566 <_strtod_l+0x366>
 8011516:	dc24      	bgt.n	8011562 <_strtod_l+0x362>
 8011518:	2a49      	cmp	r2, #73	; 0x49
 801151a:	d024      	beq.n	8011566 <_strtod_l+0x366>
 801151c:	2a4e      	cmp	r2, #78	; 0x4e
 801151e:	f47f aed0 	bne.w	80112c2 <_strtod_l+0xc2>
 8011522:	499b      	ldr	r1, [pc, #620]	; (8011790 <_strtod_l+0x590>)
 8011524:	a817      	add	r0, sp, #92	; 0x5c
 8011526:	f002 f817 	bl	8013558 <__match>
 801152a:	2800      	cmp	r0, #0
 801152c:	f43f aec9 	beq.w	80112c2 <_strtod_l+0xc2>
 8011530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b28      	cmp	r3, #40	; 0x28
 8011536:	d12d      	bne.n	8011594 <_strtod_l+0x394>
 8011538:	4996      	ldr	r1, [pc, #600]	; (8011794 <_strtod_l+0x594>)
 801153a:	aa1a      	add	r2, sp, #104	; 0x68
 801153c:	a817      	add	r0, sp, #92	; 0x5c
 801153e:	f002 f81f 	bl	8013580 <__hexnan>
 8011542:	2805      	cmp	r0, #5
 8011544:	d126      	bne.n	8011594 <_strtod_l+0x394>
 8011546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011548:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801154c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011550:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011554:	e698      	b.n	8011288 <_strtod_l+0x88>
 8011556:	250a      	movs	r5, #10
 8011558:	fb05 250c 	mla	r5, r5, ip, r2
 801155c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8011560:	e7b9      	b.n	80114d6 <_strtod_l+0x2d6>
 8011562:	2a6e      	cmp	r2, #110	; 0x6e
 8011564:	e7db      	b.n	801151e <_strtod_l+0x31e>
 8011566:	498c      	ldr	r1, [pc, #560]	; (8011798 <_strtod_l+0x598>)
 8011568:	a817      	add	r0, sp, #92	; 0x5c
 801156a:	f001 fff5 	bl	8013558 <__match>
 801156e:	2800      	cmp	r0, #0
 8011570:	f43f aea7 	beq.w	80112c2 <_strtod_l+0xc2>
 8011574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011576:	4989      	ldr	r1, [pc, #548]	; (801179c <_strtod_l+0x59c>)
 8011578:	3b01      	subs	r3, #1
 801157a:	a817      	add	r0, sp, #92	; 0x5c
 801157c:	9317      	str	r3, [sp, #92]	; 0x5c
 801157e:	f001 ffeb 	bl	8013558 <__match>
 8011582:	b910      	cbnz	r0, 801158a <_strtod_l+0x38a>
 8011584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011586:	3301      	adds	r3, #1
 8011588:	9317      	str	r3, [sp, #92]	; 0x5c
 801158a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80117b0 <_strtod_l+0x5b0>
 801158e:	f04f 0800 	mov.w	r8, #0
 8011592:	e679      	b.n	8011288 <_strtod_l+0x88>
 8011594:	4882      	ldr	r0, [pc, #520]	; (80117a0 <_strtod_l+0x5a0>)
 8011596:	f002 ff67 	bl	8014468 <nan>
 801159a:	ed8d 0b04 	vstr	d0, [sp, #16]
 801159e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80115a2:	e671      	b.n	8011288 <_strtod_l+0x88>
 80115a4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80115a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80115ac:	eba5 020b 	sub.w	r2, r5, fp
 80115b0:	2e00      	cmp	r6, #0
 80115b2:	bf08      	it	eq
 80115b4:	461e      	moveq	r6, r3
 80115b6:	2b10      	cmp	r3, #16
 80115b8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80115bc:	9206      	str	r2, [sp, #24]
 80115be:	461a      	mov	r2, r3
 80115c0:	bfa8      	it	ge
 80115c2:	2210      	movge	r2, #16
 80115c4:	2b09      	cmp	r3, #9
 80115c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80115ca:	dd0e      	ble.n	80115ea <_strtod_l+0x3ea>
 80115cc:	4975      	ldr	r1, [pc, #468]	; (80117a4 <_strtod_l+0x5a4>)
 80115ce:	eddd 7a04 	vldr	s15, [sp, #16]
 80115d2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80115d6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80115da:	ed9d 5b08 	vldr	d5, [sp, #32]
 80115de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80115e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80115e6:	ec59 8b17 	vmov	r8, r9, d7
 80115ea:	2b0f      	cmp	r3, #15
 80115ec:	dc37      	bgt.n	801165e <_strtod_l+0x45e>
 80115ee:	9906      	ldr	r1, [sp, #24]
 80115f0:	2900      	cmp	r1, #0
 80115f2:	f43f ae49 	beq.w	8011288 <_strtod_l+0x88>
 80115f6:	dd23      	ble.n	8011640 <_strtod_l+0x440>
 80115f8:	2916      	cmp	r1, #22
 80115fa:	dc0b      	bgt.n	8011614 <_strtod_l+0x414>
 80115fc:	4b69      	ldr	r3, [pc, #420]	; (80117a4 <_strtod_l+0x5a4>)
 80115fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011602:	ed93 7b00 	vldr	d7, [r3]
 8011606:	ec49 8b16 	vmov	d6, r8, r9
 801160a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801160e:	ec59 8b17 	vmov	r8, r9, d7
 8011612:	e639      	b.n	8011288 <_strtod_l+0x88>
 8011614:	9806      	ldr	r0, [sp, #24]
 8011616:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801161a:	4281      	cmp	r1, r0
 801161c:	db1f      	blt.n	801165e <_strtod_l+0x45e>
 801161e:	4a61      	ldr	r2, [pc, #388]	; (80117a4 <_strtod_l+0x5a4>)
 8011620:	f1c3 030f 	rsb	r3, r3, #15
 8011624:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011628:	ed91 7b00 	vldr	d7, [r1]
 801162c:	ec49 8b16 	vmov	d6, r8, r9
 8011630:	1ac3      	subs	r3, r0, r3
 8011632:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011636:	ee27 7b06 	vmul.f64	d7, d7, d6
 801163a:	ed92 6b00 	vldr	d6, [r2]
 801163e:	e7e4      	b.n	801160a <_strtod_l+0x40a>
 8011640:	9906      	ldr	r1, [sp, #24]
 8011642:	3116      	adds	r1, #22
 8011644:	db0b      	blt.n	801165e <_strtod_l+0x45e>
 8011646:	4b57      	ldr	r3, [pc, #348]	; (80117a4 <_strtod_l+0x5a4>)
 8011648:	ebab 0505 	sub.w	r5, fp, r5
 801164c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011650:	ed95 7b00 	vldr	d7, [r5]
 8011654:	ec49 8b16 	vmov	d6, r8, r9
 8011658:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801165c:	e7d7      	b.n	801160e <_strtod_l+0x40e>
 801165e:	9906      	ldr	r1, [sp, #24]
 8011660:	1a9a      	subs	r2, r3, r2
 8011662:	440a      	add	r2, r1
 8011664:	2a00      	cmp	r2, #0
 8011666:	dd74      	ble.n	8011752 <_strtod_l+0x552>
 8011668:	f012 000f 	ands.w	r0, r2, #15
 801166c:	d00a      	beq.n	8011684 <_strtod_l+0x484>
 801166e:	494d      	ldr	r1, [pc, #308]	; (80117a4 <_strtod_l+0x5a4>)
 8011670:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011674:	ed91 7b00 	vldr	d7, [r1]
 8011678:	ec49 8b16 	vmov	d6, r8, r9
 801167c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011680:	ec59 8b17 	vmov	r8, r9, d7
 8011684:	f032 020f 	bics.w	r2, r2, #15
 8011688:	d04f      	beq.n	801172a <_strtod_l+0x52a>
 801168a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801168e:	dd22      	ble.n	80116d6 <_strtod_l+0x4d6>
 8011690:	2500      	movs	r5, #0
 8011692:	462e      	mov	r6, r5
 8011694:	950a      	str	r5, [sp, #40]	; 0x28
 8011696:	462f      	mov	r7, r5
 8011698:	2322      	movs	r3, #34	; 0x22
 801169a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80117b0 <_strtod_l+0x5b0>
 801169e:	6023      	str	r3, [r4, #0]
 80116a0:	f04f 0800 	mov.w	r8, #0
 80116a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f43f adee 	beq.w	8011288 <_strtod_l+0x88>
 80116ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80116ae:	4620      	mov	r0, r4
 80116b0:	f002 f8cc 	bl	801384c <_Bfree>
 80116b4:	4639      	mov	r1, r7
 80116b6:	4620      	mov	r0, r4
 80116b8:	f002 f8c8 	bl	801384c <_Bfree>
 80116bc:	4631      	mov	r1, r6
 80116be:	4620      	mov	r0, r4
 80116c0:	f002 f8c4 	bl	801384c <_Bfree>
 80116c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80116c6:	4620      	mov	r0, r4
 80116c8:	f002 f8c0 	bl	801384c <_Bfree>
 80116cc:	4629      	mov	r1, r5
 80116ce:	4620      	mov	r0, r4
 80116d0:	f002 f8bc 	bl	801384c <_Bfree>
 80116d4:	e5d8      	b.n	8011288 <_strtod_l+0x88>
 80116d6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80116da:	2000      	movs	r0, #0
 80116dc:	4f32      	ldr	r7, [pc, #200]	; (80117a8 <_strtod_l+0x5a8>)
 80116de:	1112      	asrs	r2, r2, #4
 80116e0:	4601      	mov	r1, r0
 80116e2:	2a01      	cmp	r2, #1
 80116e4:	dc24      	bgt.n	8011730 <_strtod_l+0x530>
 80116e6:	b108      	cbz	r0, 80116ec <_strtod_l+0x4ec>
 80116e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80116ec:	4a2e      	ldr	r2, [pc, #184]	; (80117a8 <_strtod_l+0x5a8>)
 80116ee:	482f      	ldr	r0, [pc, #188]	; (80117ac <_strtod_l+0x5ac>)
 80116f0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80116f4:	ed91 7b00 	vldr	d7, [r1]
 80116f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80116fc:	ec49 8b16 	vmov	d6, r8, r9
 8011700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011704:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011708:	9905      	ldr	r1, [sp, #20]
 801170a:	4a29      	ldr	r2, [pc, #164]	; (80117b0 <_strtod_l+0x5b0>)
 801170c:	400a      	ands	r2, r1
 801170e:	4282      	cmp	r2, r0
 8011710:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011714:	d8bc      	bhi.n	8011690 <_strtod_l+0x490>
 8011716:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801171a:	4282      	cmp	r2, r0
 801171c:	bf86      	itte	hi
 801171e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80117b4 <_strtod_l+0x5b4>
 8011722:	f04f 38ff 	movhi.w	r8, #4294967295
 8011726:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801172a:	2200      	movs	r2, #0
 801172c:	9204      	str	r2, [sp, #16]
 801172e:	e07f      	b.n	8011830 <_strtod_l+0x630>
 8011730:	f012 0f01 	tst.w	r2, #1
 8011734:	d00a      	beq.n	801174c <_strtod_l+0x54c>
 8011736:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801173a:	ed90 7b00 	vldr	d7, [r0]
 801173e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8011742:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011746:	ed8d 7b04 	vstr	d7, [sp, #16]
 801174a:	2001      	movs	r0, #1
 801174c:	3101      	adds	r1, #1
 801174e:	1052      	asrs	r2, r2, #1
 8011750:	e7c7      	b.n	80116e2 <_strtod_l+0x4e2>
 8011752:	d0ea      	beq.n	801172a <_strtod_l+0x52a>
 8011754:	4252      	negs	r2, r2
 8011756:	f012 000f 	ands.w	r0, r2, #15
 801175a:	d00a      	beq.n	8011772 <_strtod_l+0x572>
 801175c:	4911      	ldr	r1, [pc, #68]	; (80117a4 <_strtod_l+0x5a4>)
 801175e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011762:	ed91 7b00 	vldr	d7, [r1]
 8011766:	ec49 8b16 	vmov	d6, r8, r9
 801176a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801176e:	ec59 8b17 	vmov	r8, r9, d7
 8011772:	1112      	asrs	r2, r2, #4
 8011774:	d0d9      	beq.n	801172a <_strtod_l+0x52a>
 8011776:	2a1f      	cmp	r2, #31
 8011778:	dd1e      	ble.n	80117b8 <_strtod_l+0x5b8>
 801177a:	2500      	movs	r5, #0
 801177c:	462e      	mov	r6, r5
 801177e:	950a      	str	r5, [sp, #40]	; 0x28
 8011780:	462f      	mov	r7, r5
 8011782:	2322      	movs	r3, #34	; 0x22
 8011784:	f04f 0800 	mov.w	r8, #0
 8011788:	f04f 0900 	mov.w	r9, #0
 801178c:	6023      	str	r3, [r4, #0]
 801178e:	e789      	b.n	80116a4 <_strtod_l+0x4a4>
 8011790:	0801d502 	.word	0x0801d502
 8011794:	0801d544 	.word	0x0801d544
 8011798:	0801d4fa 	.word	0x0801d4fa
 801179c:	0801d684 	.word	0x0801d684
 80117a0:	0801d4de 	.word	0x0801d4de
 80117a4:	0801d880 	.word	0x0801d880
 80117a8:	0801d858 	.word	0x0801d858
 80117ac:	7ca00000 	.word	0x7ca00000
 80117b0:	7ff00000 	.word	0x7ff00000
 80117b4:	7fefffff 	.word	0x7fefffff
 80117b8:	f012 0110 	ands.w	r1, r2, #16
 80117bc:	bf18      	it	ne
 80117be:	216a      	movne	r1, #106	; 0x6a
 80117c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80117c4:	9104      	str	r1, [sp, #16]
 80117c6:	49c0      	ldr	r1, [pc, #768]	; (8011ac8 <_strtod_l+0x8c8>)
 80117c8:	2000      	movs	r0, #0
 80117ca:	07d7      	lsls	r7, r2, #31
 80117cc:	d508      	bpl.n	80117e0 <_strtod_l+0x5e0>
 80117ce:	ed9d 6b08 	vldr	d6, [sp, #32]
 80117d2:	ed91 7b00 	vldr	d7, [r1]
 80117d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117da:	ed8d 7b08 	vstr	d7, [sp, #32]
 80117de:	2001      	movs	r0, #1
 80117e0:	1052      	asrs	r2, r2, #1
 80117e2:	f101 0108 	add.w	r1, r1, #8
 80117e6:	d1f0      	bne.n	80117ca <_strtod_l+0x5ca>
 80117e8:	b108      	cbz	r0, 80117ee <_strtod_l+0x5ee>
 80117ea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80117ee:	9a04      	ldr	r2, [sp, #16]
 80117f0:	b1ba      	cbz	r2, 8011822 <_strtod_l+0x622>
 80117f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80117f6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80117fa:	2a00      	cmp	r2, #0
 80117fc:	4649      	mov	r1, r9
 80117fe:	dd10      	ble.n	8011822 <_strtod_l+0x622>
 8011800:	2a1f      	cmp	r2, #31
 8011802:	f340 8132 	ble.w	8011a6a <_strtod_l+0x86a>
 8011806:	2a34      	cmp	r2, #52	; 0x34
 8011808:	bfde      	ittt	le
 801180a:	3a20      	suble	r2, #32
 801180c:	f04f 30ff 	movle.w	r0, #4294967295
 8011810:	fa00 f202 	lslle.w	r2, r0, r2
 8011814:	f04f 0800 	mov.w	r8, #0
 8011818:	bfcc      	ite	gt
 801181a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801181e:	ea02 0901 	andle.w	r9, r2, r1
 8011822:	ec49 8b17 	vmov	d7, r8, r9
 8011826:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182e:	d0a4      	beq.n	801177a <_strtod_l+0x57a>
 8011830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011832:	9200      	str	r2, [sp, #0]
 8011834:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011836:	4632      	mov	r2, r6
 8011838:	4620      	mov	r0, r4
 801183a:	f002 f873 	bl	8013924 <__s2b>
 801183e:	900a      	str	r0, [sp, #40]	; 0x28
 8011840:	2800      	cmp	r0, #0
 8011842:	f43f af25 	beq.w	8011690 <_strtod_l+0x490>
 8011846:	9b06      	ldr	r3, [sp, #24]
 8011848:	ebab 0505 	sub.w	r5, fp, r5
 801184c:	2b00      	cmp	r3, #0
 801184e:	bfb4      	ite	lt
 8011850:	462b      	movlt	r3, r5
 8011852:	2300      	movge	r3, #0
 8011854:	930c      	str	r3, [sp, #48]	; 0x30
 8011856:	9b06      	ldr	r3, [sp, #24]
 8011858:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011ab0 <_strtod_l+0x8b0>
 801185c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011ab8 <_strtod_l+0x8b8>
 8011860:	ed9f bb97 	vldr	d11, [pc, #604]	; 8011ac0 <_strtod_l+0x8c0>
 8011864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011868:	2500      	movs	r5, #0
 801186a:	9312      	str	r3, [sp, #72]	; 0x48
 801186c:	462e      	mov	r6, r5
 801186e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011870:	4620      	mov	r0, r4
 8011872:	6859      	ldr	r1, [r3, #4]
 8011874:	f001 ffaa 	bl	80137cc <_Balloc>
 8011878:	4607      	mov	r7, r0
 801187a:	2800      	cmp	r0, #0
 801187c:	f43f af0c 	beq.w	8011698 <_strtod_l+0x498>
 8011880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011882:	691a      	ldr	r2, [r3, #16]
 8011884:	3202      	adds	r2, #2
 8011886:	f103 010c 	add.w	r1, r3, #12
 801188a:	0092      	lsls	r2, r2, #2
 801188c:	300c      	adds	r0, #12
 801188e:	f7fe fb03 	bl	800fe98 <memcpy>
 8011892:	ec49 8b10 	vmov	d0, r8, r9
 8011896:	aa1a      	add	r2, sp, #104	; 0x68
 8011898:	a919      	add	r1, sp, #100	; 0x64
 801189a:	4620      	mov	r0, r4
 801189c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80118a0:	f002 fb7c 	bl	8013f9c <__d2b>
 80118a4:	9018      	str	r0, [sp, #96]	; 0x60
 80118a6:	2800      	cmp	r0, #0
 80118a8:	f43f aef6 	beq.w	8011698 <_strtod_l+0x498>
 80118ac:	2101      	movs	r1, #1
 80118ae:	4620      	mov	r0, r4
 80118b0:	f002 f8d2 	bl	8013a58 <__i2b>
 80118b4:	4606      	mov	r6, r0
 80118b6:	2800      	cmp	r0, #0
 80118b8:	f43f aeee 	beq.w	8011698 <_strtod_l+0x498>
 80118bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80118be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	bfab      	itete	ge
 80118c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80118c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80118c8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80118cc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80118d0:	bfac      	ite	ge
 80118d2:	eb03 0b02 	addge.w	fp, r3, r2
 80118d6:	eba2 0a03 	sublt.w	sl, r2, r3
 80118da:	9a04      	ldr	r2, [sp, #16]
 80118dc:	1a9b      	subs	r3, r3, r2
 80118de:	440b      	add	r3, r1
 80118e0:	4a7a      	ldr	r2, [pc, #488]	; (8011acc <_strtod_l+0x8cc>)
 80118e2:	3b01      	subs	r3, #1
 80118e4:	4293      	cmp	r3, r2
 80118e6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80118ea:	f280 80d1 	bge.w	8011a90 <_strtod_l+0x890>
 80118ee:	1ad2      	subs	r2, r2, r3
 80118f0:	2a1f      	cmp	r2, #31
 80118f2:	eba1 0102 	sub.w	r1, r1, r2
 80118f6:	f04f 0001 	mov.w	r0, #1
 80118fa:	f300 80bd 	bgt.w	8011a78 <_strtod_l+0x878>
 80118fe:	fa00 f302 	lsl.w	r3, r0, r2
 8011902:	930e      	str	r3, [sp, #56]	; 0x38
 8011904:	2300      	movs	r3, #0
 8011906:	930d      	str	r3, [sp, #52]	; 0x34
 8011908:	eb0b 0301 	add.w	r3, fp, r1
 801190c:	9a04      	ldr	r2, [sp, #16]
 801190e:	459b      	cmp	fp, r3
 8011910:	448a      	add	sl, r1
 8011912:	4492      	add	sl, r2
 8011914:	465a      	mov	r2, fp
 8011916:	bfa8      	it	ge
 8011918:	461a      	movge	r2, r3
 801191a:	4552      	cmp	r2, sl
 801191c:	bfa8      	it	ge
 801191e:	4652      	movge	r2, sl
 8011920:	2a00      	cmp	r2, #0
 8011922:	bfc2      	ittt	gt
 8011924:	1a9b      	subgt	r3, r3, r2
 8011926:	ebaa 0a02 	subgt.w	sl, sl, r2
 801192a:	ebab 0b02 	subgt.w	fp, fp, r2
 801192e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011930:	2a00      	cmp	r2, #0
 8011932:	dd18      	ble.n	8011966 <_strtod_l+0x766>
 8011934:	4631      	mov	r1, r6
 8011936:	4620      	mov	r0, r4
 8011938:	9315      	str	r3, [sp, #84]	; 0x54
 801193a:	f002 f949 	bl	8013bd0 <__pow5mult>
 801193e:	4606      	mov	r6, r0
 8011940:	2800      	cmp	r0, #0
 8011942:	f43f aea9 	beq.w	8011698 <_strtod_l+0x498>
 8011946:	4601      	mov	r1, r0
 8011948:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801194a:	4620      	mov	r0, r4
 801194c:	f002 f89a 	bl	8013a84 <__multiply>
 8011950:	9014      	str	r0, [sp, #80]	; 0x50
 8011952:	2800      	cmp	r0, #0
 8011954:	f43f aea0 	beq.w	8011698 <_strtod_l+0x498>
 8011958:	9918      	ldr	r1, [sp, #96]	; 0x60
 801195a:	4620      	mov	r0, r4
 801195c:	f001 ff76 	bl	801384c <_Bfree>
 8011960:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011964:	9218      	str	r2, [sp, #96]	; 0x60
 8011966:	2b00      	cmp	r3, #0
 8011968:	f300 8097 	bgt.w	8011a9a <_strtod_l+0x89a>
 801196c:	9b06      	ldr	r3, [sp, #24]
 801196e:	2b00      	cmp	r3, #0
 8011970:	dd08      	ble.n	8011984 <_strtod_l+0x784>
 8011972:	4639      	mov	r1, r7
 8011974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011976:	4620      	mov	r0, r4
 8011978:	f002 f92a 	bl	8013bd0 <__pow5mult>
 801197c:	4607      	mov	r7, r0
 801197e:	2800      	cmp	r0, #0
 8011980:	f43f ae8a 	beq.w	8011698 <_strtod_l+0x498>
 8011984:	f1ba 0f00 	cmp.w	sl, #0
 8011988:	dd08      	ble.n	801199c <_strtod_l+0x79c>
 801198a:	4639      	mov	r1, r7
 801198c:	4652      	mov	r2, sl
 801198e:	4620      	mov	r0, r4
 8011990:	f002 f978 	bl	8013c84 <__lshift>
 8011994:	4607      	mov	r7, r0
 8011996:	2800      	cmp	r0, #0
 8011998:	f43f ae7e 	beq.w	8011698 <_strtod_l+0x498>
 801199c:	f1bb 0f00 	cmp.w	fp, #0
 80119a0:	dd08      	ble.n	80119b4 <_strtod_l+0x7b4>
 80119a2:	4631      	mov	r1, r6
 80119a4:	465a      	mov	r2, fp
 80119a6:	4620      	mov	r0, r4
 80119a8:	f002 f96c 	bl	8013c84 <__lshift>
 80119ac:	4606      	mov	r6, r0
 80119ae:	2800      	cmp	r0, #0
 80119b0:	f43f ae72 	beq.w	8011698 <_strtod_l+0x498>
 80119b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80119b6:	463a      	mov	r2, r7
 80119b8:	4620      	mov	r0, r4
 80119ba:	f002 f9eb 	bl	8013d94 <__mdiff>
 80119be:	4605      	mov	r5, r0
 80119c0:	2800      	cmp	r0, #0
 80119c2:	f43f ae69 	beq.w	8011698 <_strtod_l+0x498>
 80119c6:	2300      	movs	r3, #0
 80119c8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80119cc:	60c3      	str	r3, [r0, #12]
 80119ce:	4631      	mov	r1, r6
 80119d0:	f002 f9c4 	bl	8013d5c <__mcmp>
 80119d4:	2800      	cmp	r0, #0
 80119d6:	da7f      	bge.n	8011ad8 <_strtod_l+0x8d8>
 80119d8:	ea5a 0308 	orrs.w	r3, sl, r8
 80119dc:	f040 80a5 	bne.w	8011b2a <_strtod_l+0x92a>
 80119e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f040 80a0 	bne.w	8011b2a <_strtod_l+0x92a>
 80119ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80119ee:	0d1b      	lsrs	r3, r3, #20
 80119f0:	051b      	lsls	r3, r3, #20
 80119f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80119f6:	f240 8098 	bls.w	8011b2a <_strtod_l+0x92a>
 80119fa:	696b      	ldr	r3, [r5, #20]
 80119fc:	b91b      	cbnz	r3, 8011a06 <_strtod_l+0x806>
 80119fe:	692b      	ldr	r3, [r5, #16]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	f340 8092 	ble.w	8011b2a <_strtod_l+0x92a>
 8011a06:	4629      	mov	r1, r5
 8011a08:	2201      	movs	r2, #1
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f002 f93a 	bl	8013c84 <__lshift>
 8011a10:	4631      	mov	r1, r6
 8011a12:	4605      	mov	r5, r0
 8011a14:	f002 f9a2 	bl	8013d5c <__mcmp>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	f340 8086 	ble.w	8011b2a <_strtod_l+0x92a>
 8011a1e:	9904      	ldr	r1, [sp, #16]
 8011a20:	4a2b      	ldr	r2, [pc, #172]	; (8011ad0 <_strtod_l+0x8d0>)
 8011a22:	464b      	mov	r3, r9
 8011a24:	2900      	cmp	r1, #0
 8011a26:	f000 80a1 	beq.w	8011b6c <_strtod_l+0x96c>
 8011a2a:	ea02 0109 	and.w	r1, r2, r9
 8011a2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011a32:	f300 809b 	bgt.w	8011b6c <_strtod_l+0x96c>
 8011a36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011a3a:	f77f aea2 	ble.w	8011782 <_strtod_l+0x582>
 8011a3e:	4a25      	ldr	r2, [pc, #148]	; (8011ad4 <_strtod_l+0x8d4>)
 8011a40:	2300      	movs	r3, #0
 8011a42:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8011a46:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8011a4a:	ec49 8b17 	vmov	d7, r8, r9
 8011a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a56:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	bf08      	it	eq
 8011a5e:	2322      	moveq	r3, #34	; 0x22
 8011a60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011a64:	bf08      	it	eq
 8011a66:	6023      	streq	r3, [r4, #0]
 8011a68:	e620      	b.n	80116ac <_strtod_l+0x4ac>
 8011a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8011a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8011a72:	ea02 0808 	and.w	r8, r2, r8
 8011a76:	e6d4      	b.n	8011822 <_strtod_l+0x622>
 8011a78:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011a7c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011a80:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011a84:	33e2      	adds	r3, #226	; 0xe2
 8011a86:	fa00 f303 	lsl.w	r3, r0, r3
 8011a8a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8011a8e:	e73b      	b.n	8011908 <_strtod_l+0x708>
 8011a90:	2000      	movs	r0, #0
 8011a92:	2301      	movs	r3, #1
 8011a94:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8011a98:	e736      	b.n	8011908 <_strtod_l+0x708>
 8011a9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f002 f8f0 	bl	8013c84 <__lshift>
 8011aa4:	9018      	str	r0, [sp, #96]	; 0x60
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	f47f af60 	bne.w	801196c <_strtod_l+0x76c>
 8011aac:	e5f4      	b.n	8011698 <_strtod_l+0x498>
 8011aae:	bf00      	nop
 8011ab0:	94a03595 	.word	0x94a03595
 8011ab4:	3fcfffff 	.word	0x3fcfffff
 8011ab8:	94a03595 	.word	0x94a03595
 8011abc:	3fdfffff 	.word	0x3fdfffff
 8011ac0:	35afe535 	.word	0x35afe535
 8011ac4:	3fe00000 	.word	0x3fe00000
 8011ac8:	0801d558 	.word	0x0801d558
 8011acc:	fffffc02 	.word	0xfffffc02
 8011ad0:	7ff00000 	.word	0x7ff00000
 8011ad4:	39500000 	.word	0x39500000
 8011ad8:	46cb      	mov	fp, r9
 8011ada:	d165      	bne.n	8011ba8 <_strtod_l+0x9a8>
 8011adc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ae0:	f1ba 0f00 	cmp.w	sl, #0
 8011ae4:	d02a      	beq.n	8011b3c <_strtod_l+0x93c>
 8011ae6:	4aaa      	ldr	r2, [pc, #680]	; (8011d90 <_strtod_l+0xb90>)
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d12b      	bne.n	8011b44 <_strtod_l+0x944>
 8011aec:	9b04      	ldr	r3, [sp, #16]
 8011aee:	4641      	mov	r1, r8
 8011af0:	b1fb      	cbz	r3, 8011b32 <_strtod_l+0x932>
 8011af2:	4aa8      	ldr	r2, [pc, #672]	; (8011d94 <_strtod_l+0xb94>)
 8011af4:	ea09 0202 	and.w	r2, r9, r2
 8011af8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011afc:	f04f 30ff 	mov.w	r0, #4294967295
 8011b00:	d81a      	bhi.n	8011b38 <_strtod_l+0x938>
 8011b02:	0d12      	lsrs	r2, r2, #20
 8011b04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011b08:	fa00 f303 	lsl.w	r3, r0, r3
 8011b0c:	4299      	cmp	r1, r3
 8011b0e:	d119      	bne.n	8011b44 <_strtod_l+0x944>
 8011b10:	4ba1      	ldr	r3, [pc, #644]	; (8011d98 <_strtod_l+0xb98>)
 8011b12:	459b      	cmp	fp, r3
 8011b14:	d102      	bne.n	8011b1c <_strtod_l+0x91c>
 8011b16:	3101      	adds	r1, #1
 8011b18:	f43f adbe 	beq.w	8011698 <_strtod_l+0x498>
 8011b1c:	4b9d      	ldr	r3, [pc, #628]	; (8011d94 <_strtod_l+0xb94>)
 8011b1e:	ea0b 0303 	and.w	r3, fp, r3
 8011b22:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011b26:	f04f 0800 	mov.w	r8, #0
 8011b2a:	9b04      	ldr	r3, [sp, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d186      	bne.n	8011a3e <_strtod_l+0x83e>
 8011b30:	e5bc      	b.n	80116ac <_strtod_l+0x4ac>
 8011b32:	f04f 33ff 	mov.w	r3, #4294967295
 8011b36:	e7e9      	b.n	8011b0c <_strtod_l+0x90c>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	e7e7      	b.n	8011b0c <_strtod_l+0x90c>
 8011b3c:	ea53 0308 	orrs.w	r3, r3, r8
 8011b40:	f43f af6d 	beq.w	8011a1e <_strtod_l+0x81e>
 8011b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b46:	b1db      	cbz	r3, 8011b80 <_strtod_l+0x980>
 8011b48:	ea13 0f0b 	tst.w	r3, fp
 8011b4c:	d0ed      	beq.n	8011b2a <_strtod_l+0x92a>
 8011b4e:	9a04      	ldr	r2, [sp, #16]
 8011b50:	4640      	mov	r0, r8
 8011b52:	4649      	mov	r1, r9
 8011b54:	f1ba 0f00 	cmp.w	sl, #0
 8011b58:	d016      	beq.n	8011b88 <_strtod_l+0x988>
 8011b5a:	f7ff fb34 	bl	80111c6 <sulp>
 8011b5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011b62:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011b66:	ec59 8b17 	vmov	r8, r9, d7
 8011b6a:	e7de      	b.n	8011b2a <_strtod_l+0x92a>
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011b72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011b76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011b7a:	f04f 38ff 	mov.w	r8, #4294967295
 8011b7e:	e7d4      	b.n	8011b2a <_strtod_l+0x92a>
 8011b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b82:	ea13 0f08 	tst.w	r3, r8
 8011b86:	e7e1      	b.n	8011b4c <_strtod_l+0x94c>
 8011b88:	f7ff fb1d 	bl	80111c6 <sulp>
 8011b8c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011b90:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011b94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8011ba4:	d1c1      	bne.n	8011b2a <_strtod_l+0x92a>
 8011ba6:	e5ec      	b.n	8011782 <_strtod_l+0x582>
 8011ba8:	4631      	mov	r1, r6
 8011baa:	4628      	mov	r0, r5
 8011bac:	f002 fa52 	bl	8014054 <__ratio>
 8011bb0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011bb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbc:	d867      	bhi.n	8011c8e <_strtod_l+0xa8e>
 8011bbe:	f1ba 0f00 	cmp.w	sl, #0
 8011bc2:	d044      	beq.n	8011c4e <_strtod_l+0xa4e>
 8011bc4:	4b75      	ldr	r3, [pc, #468]	; (8011d9c <_strtod_l+0xb9c>)
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011bcc:	4971      	ldr	r1, [pc, #452]	; (8011d94 <_strtod_l+0xb94>)
 8011bce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8011da8 <_strtod_l+0xba8>
 8011bd2:	ea0b 0001 	and.w	r0, fp, r1
 8011bd6:	4560      	cmp	r0, ip
 8011bd8:	900d      	str	r0, [sp, #52]	; 0x34
 8011bda:	f040 808b 	bne.w	8011cf4 <_strtod_l+0xaf4>
 8011bde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011be2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8011be6:	ec49 8b10 	vmov	d0, r8, r9
 8011bea:	ec43 2b1c 	vmov	d12, r2, r3
 8011bee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011bf2:	f002 f957 	bl	8013ea4 <__ulp>
 8011bf6:	ec49 8b1d 	vmov	d13, r8, r9
 8011bfa:	eeac db00 	vfma.f64	d13, d12, d0
 8011bfe:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8011c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c04:	4963      	ldr	r1, [pc, #396]	; (8011d94 <_strtod_l+0xb94>)
 8011c06:	4a66      	ldr	r2, [pc, #408]	; (8011da0 <_strtod_l+0xba0>)
 8011c08:	4019      	ands	r1, r3
 8011c0a:	4291      	cmp	r1, r2
 8011c0c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8011c10:	d947      	bls.n	8011ca2 <_strtod_l+0xaa2>
 8011c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d103      	bne.n	8011c24 <_strtod_l+0xa24>
 8011c1c:	9b08      	ldr	r3, [sp, #32]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	f43f ad3a 	beq.w	8011698 <_strtod_l+0x498>
 8011c24:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8011d98 <_strtod_l+0xb98>
 8011c28:	f04f 38ff 	mov.w	r8, #4294967295
 8011c2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f001 fe0c 	bl	801384c <_Bfree>
 8011c34:	4639      	mov	r1, r7
 8011c36:	4620      	mov	r0, r4
 8011c38:	f001 fe08 	bl	801384c <_Bfree>
 8011c3c:	4631      	mov	r1, r6
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f001 fe04 	bl	801384c <_Bfree>
 8011c44:	4629      	mov	r1, r5
 8011c46:	4620      	mov	r0, r4
 8011c48:	f001 fe00 	bl	801384c <_Bfree>
 8011c4c:	e60f      	b.n	801186e <_strtod_l+0x66e>
 8011c4e:	f1b8 0f00 	cmp.w	r8, #0
 8011c52:	d112      	bne.n	8011c7a <_strtod_l+0xa7a>
 8011c54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c58:	b9b3      	cbnz	r3, 8011c88 <_strtod_l+0xa88>
 8011c5a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011c5e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c66:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011c6a:	d401      	bmi.n	8011c70 <_strtod_l+0xa70>
 8011c6c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011c70:	eeb1 7b48 	vneg.f64	d7, d8
 8011c74:	ec53 2b17 	vmov	r2, r3, d7
 8011c78:	e7a8      	b.n	8011bcc <_strtod_l+0x9cc>
 8011c7a:	f1b8 0f01 	cmp.w	r8, #1
 8011c7e:	d103      	bne.n	8011c88 <_strtod_l+0xa88>
 8011c80:	f1b9 0f00 	cmp.w	r9, #0
 8011c84:	f43f ad7d 	beq.w	8011782 <_strtod_l+0x582>
 8011c88:	4b46      	ldr	r3, [pc, #280]	; (8011da4 <_strtod_l+0xba4>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	e79c      	b.n	8011bc8 <_strtod_l+0x9c8>
 8011c8e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011c92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011c96:	f1ba 0f00 	cmp.w	sl, #0
 8011c9a:	d0e9      	beq.n	8011c70 <_strtod_l+0xa70>
 8011c9c:	ec53 2b18 	vmov	r2, r3, d8
 8011ca0:	e794      	b.n	8011bcc <_strtod_l+0x9cc>
 8011ca2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011ca6:	9b04      	ldr	r3, [sp, #16]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1bf      	bne.n	8011c2c <_strtod_l+0xa2c>
 8011cac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011cb2:	0d1b      	lsrs	r3, r3, #20
 8011cb4:	051b      	lsls	r3, r3, #20
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d1b8      	bne.n	8011c2c <_strtod_l+0xa2c>
 8011cba:	ec51 0b18 	vmov	r0, r1, d8
 8011cbe:	f7ee fd4b 	bl	8000758 <__aeabi_d2lz>
 8011cc2:	f7ee fd03 	bl	80006cc <__aeabi_l2d>
 8011cc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cca:	ec41 0b17 	vmov	d7, r0, r1
 8011cce:	ea43 0308 	orr.w	r3, r3, r8
 8011cd2:	ea53 030a 	orrs.w	r3, r3, sl
 8011cd6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011cda:	d03e      	beq.n	8011d5a <_strtod_l+0xb5a>
 8011cdc:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	f53f ace2 	bmi.w	80116ac <_strtod_l+0x4ac>
 8011ce8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf0:	dd9c      	ble.n	8011c2c <_strtod_l+0xa2c>
 8011cf2:	e4db      	b.n	80116ac <_strtod_l+0x4ac>
 8011cf4:	9904      	ldr	r1, [sp, #16]
 8011cf6:	b301      	cbz	r1, 8011d3a <_strtod_l+0xb3a>
 8011cf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011cfa:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8011cfe:	d81c      	bhi.n	8011d3a <_strtod_l+0xb3a>
 8011d00:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011d88 <_strtod_l+0xb88>
 8011d04:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0c:	d811      	bhi.n	8011d32 <_strtod_l+0xb32>
 8011d0e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8011d12:	ee18 3a10 	vmov	r3, s16
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	bf38      	it	cc
 8011d1a:	2301      	movcc	r3, #1
 8011d1c:	ee08 3a10 	vmov	s16, r3
 8011d20:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8011d24:	f1ba 0f00 	cmp.w	sl, #0
 8011d28:	d114      	bne.n	8011d54 <_strtod_l+0xb54>
 8011d2a:	eeb1 7b48 	vneg.f64	d7, d8
 8011d2e:	ec53 2b17 	vmov	r2, r3, d7
 8011d32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011d34:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011d38:	1a0b      	subs	r3, r1, r0
 8011d3a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011d3e:	ec43 2b1c 	vmov	d12, r2, r3
 8011d42:	f002 f8af 	bl	8013ea4 <__ulp>
 8011d46:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011d4a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011d4e:	ec59 8b17 	vmov	r8, r9, d7
 8011d52:	e7a8      	b.n	8011ca6 <_strtod_l+0xaa6>
 8011d54:	ec53 2b18 	vmov	r2, r3, d8
 8011d58:	e7eb      	b.n	8011d32 <_strtod_l+0xb32>
 8011d5a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d62:	f57f af63 	bpl.w	8011c2c <_strtod_l+0xa2c>
 8011d66:	e4a1      	b.n	80116ac <_strtod_l+0x4ac>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d70:	6013      	str	r3, [r2, #0]
 8011d72:	f7ff ba8d 	b.w	8011290 <_strtod_l+0x90>
 8011d76:	2a65      	cmp	r2, #101	; 0x65
 8011d78:	f43f ab89 	beq.w	801148e <_strtod_l+0x28e>
 8011d7c:	2a45      	cmp	r2, #69	; 0x45
 8011d7e:	f43f ab86 	beq.w	801148e <_strtod_l+0x28e>
 8011d82:	2101      	movs	r1, #1
 8011d84:	f7ff bbbe 	b.w	8011504 <_strtod_l+0x304>
 8011d88:	ffc00000 	.word	0xffc00000
 8011d8c:	41dfffff 	.word	0x41dfffff
 8011d90:	000fffff 	.word	0x000fffff
 8011d94:	7ff00000 	.word	0x7ff00000
 8011d98:	7fefffff 	.word	0x7fefffff
 8011d9c:	3ff00000 	.word	0x3ff00000
 8011da0:	7c9fffff 	.word	0x7c9fffff
 8011da4:	bff00000 	.word	0xbff00000
 8011da8:	7fe00000 	.word	0x7fe00000

08011dac <_strtod_r>:
 8011dac:	4b01      	ldr	r3, [pc, #4]	; (8011db4 <_strtod_r+0x8>)
 8011dae:	f7ff ba27 	b.w	8011200 <_strtod_l>
 8011db2:	bf00      	nop
 8011db4:	2400a150 	.word	0x2400a150

08011db8 <_strtol_l.isra.0>:
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dbe:	d001      	beq.n	8011dc4 <_strtol_l.isra.0+0xc>
 8011dc0:	2b24      	cmp	r3, #36	; 0x24
 8011dc2:	d906      	bls.n	8011dd2 <_strtol_l.isra.0+0x1a>
 8011dc4:	f7fe f81c 	bl	800fe00 <__errno>
 8011dc8:	2316      	movs	r3, #22
 8011dca:	6003      	str	r3, [r0, #0]
 8011dcc:	2000      	movs	r0, #0
 8011dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dd2:	4f3a      	ldr	r7, [pc, #232]	; (8011ebc <_strtol_l.isra.0+0x104>)
 8011dd4:	468e      	mov	lr, r1
 8011dd6:	4676      	mov	r6, lr
 8011dd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011ddc:	5de5      	ldrb	r5, [r4, r7]
 8011dde:	f015 0508 	ands.w	r5, r5, #8
 8011de2:	d1f8      	bne.n	8011dd6 <_strtol_l.isra.0+0x1e>
 8011de4:	2c2d      	cmp	r4, #45	; 0x2d
 8011de6:	d134      	bne.n	8011e52 <_strtol_l.isra.0+0x9a>
 8011de8:	f89e 4000 	ldrb.w	r4, [lr]
 8011dec:	f04f 0801 	mov.w	r8, #1
 8011df0:	f106 0e02 	add.w	lr, r6, #2
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d05c      	beq.n	8011eb2 <_strtol_l.isra.0+0xfa>
 8011df8:	2b10      	cmp	r3, #16
 8011dfa:	d10c      	bne.n	8011e16 <_strtol_l.isra.0+0x5e>
 8011dfc:	2c30      	cmp	r4, #48	; 0x30
 8011dfe:	d10a      	bne.n	8011e16 <_strtol_l.isra.0+0x5e>
 8011e00:	f89e 4000 	ldrb.w	r4, [lr]
 8011e04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011e08:	2c58      	cmp	r4, #88	; 0x58
 8011e0a:	d14d      	bne.n	8011ea8 <_strtol_l.isra.0+0xf0>
 8011e0c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011e10:	2310      	movs	r3, #16
 8011e12:	f10e 0e02 	add.w	lr, lr, #2
 8011e16:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011e1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e1e:	2600      	movs	r6, #0
 8011e20:	fbbc f9f3 	udiv	r9, ip, r3
 8011e24:	4635      	mov	r5, r6
 8011e26:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011e2e:	2f09      	cmp	r7, #9
 8011e30:	d818      	bhi.n	8011e64 <_strtol_l.isra.0+0xac>
 8011e32:	463c      	mov	r4, r7
 8011e34:	42a3      	cmp	r3, r4
 8011e36:	dd24      	ble.n	8011e82 <_strtol_l.isra.0+0xca>
 8011e38:	2e00      	cmp	r6, #0
 8011e3a:	db1f      	blt.n	8011e7c <_strtol_l.isra.0+0xc4>
 8011e3c:	45a9      	cmp	r9, r5
 8011e3e:	d31d      	bcc.n	8011e7c <_strtol_l.isra.0+0xc4>
 8011e40:	d101      	bne.n	8011e46 <_strtol_l.isra.0+0x8e>
 8011e42:	45a2      	cmp	sl, r4
 8011e44:	db1a      	blt.n	8011e7c <_strtol_l.isra.0+0xc4>
 8011e46:	fb05 4503 	mla	r5, r5, r3, r4
 8011e4a:	2601      	movs	r6, #1
 8011e4c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011e50:	e7eb      	b.n	8011e2a <_strtol_l.isra.0+0x72>
 8011e52:	2c2b      	cmp	r4, #43	; 0x2b
 8011e54:	bf08      	it	eq
 8011e56:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011e5a:	46a8      	mov	r8, r5
 8011e5c:	bf08      	it	eq
 8011e5e:	f106 0e02 	addeq.w	lr, r6, #2
 8011e62:	e7c7      	b.n	8011df4 <_strtol_l.isra.0+0x3c>
 8011e64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011e68:	2f19      	cmp	r7, #25
 8011e6a:	d801      	bhi.n	8011e70 <_strtol_l.isra.0+0xb8>
 8011e6c:	3c37      	subs	r4, #55	; 0x37
 8011e6e:	e7e1      	b.n	8011e34 <_strtol_l.isra.0+0x7c>
 8011e70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011e74:	2f19      	cmp	r7, #25
 8011e76:	d804      	bhi.n	8011e82 <_strtol_l.isra.0+0xca>
 8011e78:	3c57      	subs	r4, #87	; 0x57
 8011e7a:	e7db      	b.n	8011e34 <_strtol_l.isra.0+0x7c>
 8011e7c:	f04f 36ff 	mov.w	r6, #4294967295
 8011e80:	e7e4      	b.n	8011e4c <_strtol_l.isra.0+0x94>
 8011e82:	2e00      	cmp	r6, #0
 8011e84:	da05      	bge.n	8011e92 <_strtol_l.isra.0+0xda>
 8011e86:	2322      	movs	r3, #34	; 0x22
 8011e88:	6003      	str	r3, [r0, #0]
 8011e8a:	4665      	mov	r5, ip
 8011e8c:	b942      	cbnz	r2, 8011ea0 <_strtol_l.isra.0+0xe8>
 8011e8e:	4628      	mov	r0, r5
 8011e90:	e79d      	b.n	8011dce <_strtol_l.isra.0+0x16>
 8011e92:	f1b8 0f00 	cmp.w	r8, #0
 8011e96:	d000      	beq.n	8011e9a <_strtol_l.isra.0+0xe2>
 8011e98:	426d      	negs	r5, r5
 8011e9a:	2a00      	cmp	r2, #0
 8011e9c:	d0f7      	beq.n	8011e8e <_strtol_l.isra.0+0xd6>
 8011e9e:	b10e      	cbz	r6, 8011ea4 <_strtol_l.isra.0+0xec>
 8011ea0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011ea4:	6011      	str	r1, [r2, #0]
 8011ea6:	e7f2      	b.n	8011e8e <_strtol_l.isra.0+0xd6>
 8011ea8:	2430      	movs	r4, #48	; 0x30
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1b3      	bne.n	8011e16 <_strtol_l.isra.0+0x5e>
 8011eae:	2308      	movs	r3, #8
 8011eb0:	e7b1      	b.n	8011e16 <_strtol_l.isra.0+0x5e>
 8011eb2:	2c30      	cmp	r4, #48	; 0x30
 8011eb4:	d0a4      	beq.n	8011e00 <_strtol_l.isra.0+0x48>
 8011eb6:	230a      	movs	r3, #10
 8011eb8:	e7ad      	b.n	8011e16 <_strtol_l.isra.0+0x5e>
 8011eba:	bf00      	nop
 8011ebc:	0801d581 	.word	0x0801d581

08011ec0 <_strtol_r>:
 8011ec0:	f7ff bf7a 	b.w	8011db8 <_strtol_l.isra.0>

08011ec4 <__swbuf_r>:
 8011ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec6:	460e      	mov	r6, r1
 8011ec8:	4614      	mov	r4, r2
 8011eca:	4605      	mov	r5, r0
 8011ecc:	b118      	cbz	r0, 8011ed6 <__swbuf_r+0x12>
 8011ece:	6983      	ldr	r3, [r0, #24]
 8011ed0:	b90b      	cbnz	r3, 8011ed6 <__swbuf_r+0x12>
 8011ed2:	f000 ffe5 	bl	8012ea0 <__sinit>
 8011ed6:	4b21      	ldr	r3, [pc, #132]	; (8011f5c <__swbuf_r+0x98>)
 8011ed8:	429c      	cmp	r4, r3
 8011eda:	d12b      	bne.n	8011f34 <__swbuf_r+0x70>
 8011edc:	686c      	ldr	r4, [r5, #4]
 8011ede:	69a3      	ldr	r3, [r4, #24]
 8011ee0:	60a3      	str	r3, [r4, #8]
 8011ee2:	89a3      	ldrh	r3, [r4, #12]
 8011ee4:	071a      	lsls	r2, r3, #28
 8011ee6:	d52f      	bpl.n	8011f48 <__swbuf_r+0x84>
 8011ee8:	6923      	ldr	r3, [r4, #16]
 8011eea:	b36b      	cbz	r3, 8011f48 <__swbuf_r+0x84>
 8011eec:	6923      	ldr	r3, [r4, #16]
 8011eee:	6820      	ldr	r0, [r4, #0]
 8011ef0:	1ac0      	subs	r0, r0, r3
 8011ef2:	6963      	ldr	r3, [r4, #20]
 8011ef4:	b2f6      	uxtb	r6, r6
 8011ef6:	4283      	cmp	r3, r0
 8011ef8:	4637      	mov	r7, r6
 8011efa:	dc04      	bgt.n	8011f06 <__swbuf_r+0x42>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4628      	mov	r0, r5
 8011f00:	f000 ff3a 	bl	8012d78 <_fflush_r>
 8011f04:	bb30      	cbnz	r0, 8011f54 <__swbuf_r+0x90>
 8011f06:	68a3      	ldr	r3, [r4, #8]
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	60a3      	str	r3, [r4, #8]
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	1c5a      	adds	r2, r3, #1
 8011f10:	6022      	str	r2, [r4, #0]
 8011f12:	701e      	strb	r6, [r3, #0]
 8011f14:	6963      	ldr	r3, [r4, #20]
 8011f16:	3001      	adds	r0, #1
 8011f18:	4283      	cmp	r3, r0
 8011f1a:	d004      	beq.n	8011f26 <__swbuf_r+0x62>
 8011f1c:	89a3      	ldrh	r3, [r4, #12]
 8011f1e:	07db      	lsls	r3, r3, #31
 8011f20:	d506      	bpl.n	8011f30 <__swbuf_r+0x6c>
 8011f22:	2e0a      	cmp	r6, #10
 8011f24:	d104      	bne.n	8011f30 <__swbuf_r+0x6c>
 8011f26:	4621      	mov	r1, r4
 8011f28:	4628      	mov	r0, r5
 8011f2a:	f000 ff25 	bl	8012d78 <_fflush_r>
 8011f2e:	b988      	cbnz	r0, 8011f54 <__swbuf_r+0x90>
 8011f30:	4638      	mov	r0, r7
 8011f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f34:	4b0a      	ldr	r3, [pc, #40]	; (8011f60 <__swbuf_r+0x9c>)
 8011f36:	429c      	cmp	r4, r3
 8011f38:	d101      	bne.n	8011f3e <__swbuf_r+0x7a>
 8011f3a:	68ac      	ldr	r4, [r5, #8]
 8011f3c:	e7cf      	b.n	8011ede <__swbuf_r+0x1a>
 8011f3e:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <__swbuf_r+0xa0>)
 8011f40:	429c      	cmp	r4, r3
 8011f42:	bf08      	it	eq
 8011f44:	68ec      	ldreq	r4, [r5, #12]
 8011f46:	e7ca      	b.n	8011ede <__swbuf_r+0x1a>
 8011f48:	4621      	mov	r1, r4
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	f000 f80c 	bl	8011f68 <__swsetup_r>
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d0cb      	beq.n	8011eec <__swbuf_r+0x28>
 8011f54:	f04f 37ff 	mov.w	r7, #4294967295
 8011f58:	e7ea      	b.n	8011f30 <__swbuf_r+0x6c>
 8011f5a:	bf00      	nop
 8011f5c:	0801d738 	.word	0x0801d738
 8011f60:	0801d758 	.word	0x0801d758
 8011f64:	0801d718 	.word	0x0801d718

08011f68 <__swsetup_r>:
 8011f68:	4b32      	ldr	r3, [pc, #200]	; (8012034 <__swsetup_r+0xcc>)
 8011f6a:	b570      	push	{r4, r5, r6, lr}
 8011f6c:	681d      	ldr	r5, [r3, #0]
 8011f6e:	4606      	mov	r6, r0
 8011f70:	460c      	mov	r4, r1
 8011f72:	b125      	cbz	r5, 8011f7e <__swsetup_r+0x16>
 8011f74:	69ab      	ldr	r3, [r5, #24]
 8011f76:	b913      	cbnz	r3, 8011f7e <__swsetup_r+0x16>
 8011f78:	4628      	mov	r0, r5
 8011f7a:	f000 ff91 	bl	8012ea0 <__sinit>
 8011f7e:	4b2e      	ldr	r3, [pc, #184]	; (8012038 <__swsetup_r+0xd0>)
 8011f80:	429c      	cmp	r4, r3
 8011f82:	d10f      	bne.n	8011fa4 <__swsetup_r+0x3c>
 8011f84:	686c      	ldr	r4, [r5, #4]
 8011f86:	89a3      	ldrh	r3, [r4, #12]
 8011f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f8c:	0719      	lsls	r1, r3, #28
 8011f8e:	d42c      	bmi.n	8011fea <__swsetup_r+0x82>
 8011f90:	06dd      	lsls	r5, r3, #27
 8011f92:	d411      	bmi.n	8011fb8 <__swsetup_r+0x50>
 8011f94:	2309      	movs	r3, #9
 8011f96:	6033      	str	r3, [r6, #0]
 8011f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011f9c:	81a3      	strh	r3, [r4, #12]
 8011f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa2:	e03e      	b.n	8012022 <__swsetup_r+0xba>
 8011fa4:	4b25      	ldr	r3, [pc, #148]	; (801203c <__swsetup_r+0xd4>)
 8011fa6:	429c      	cmp	r4, r3
 8011fa8:	d101      	bne.n	8011fae <__swsetup_r+0x46>
 8011faa:	68ac      	ldr	r4, [r5, #8]
 8011fac:	e7eb      	b.n	8011f86 <__swsetup_r+0x1e>
 8011fae:	4b24      	ldr	r3, [pc, #144]	; (8012040 <__swsetup_r+0xd8>)
 8011fb0:	429c      	cmp	r4, r3
 8011fb2:	bf08      	it	eq
 8011fb4:	68ec      	ldreq	r4, [r5, #12]
 8011fb6:	e7e6      	b.n	8011f86 <__swsetup_r+0x1e>
 8011fb8:	0758      	lsls	r0, r3, #29
 8011fba:	d512      	bpl.n	8011fe2 <__swsetup_r+0x7a>
 8011fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fbe:	b141      	cbz	r1, 8011fd2 <__swsetup_r+0x6a>
 8011fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fc4:	4299      	cmp	r1, r3
 8011fc6:	d002      	beq.n	8011fce <__swsetup_r+0x66>
 8011fc8:	4630      	mov	r0, r6
 8011fca:	f7fd ff95 	bl	800fef8 <_free_r>
 8011fce:	2300      	movs	r3, #0
 8011fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8011fd2:	89a3      	ldrh	r3, [r4, #12]
 8011fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011fd8:	81a3      	strh	r3, [r4, #12]
 8011fda:	2300      	movs	r3, #0
 8011fdc:	6063      	str	r3, [r4, #4]
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	89a3      	ldrh	r3, [r4, #12]
 8011fe4:	f043 0308 	orr.w	r3, r3, #8
 8011fe8:	81a3      	strh	r3, [r4, #12]
 8011fea:	6923      	ldr	r3, [r4, #16]
 8011fec:	b94b      	cbnz	r3, 8012002 <__swsetup_r+0x9a>
 8011fee:	89a3      	ldrh	r3, [r4, #12]
 8011ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ff8:	d003      	beq.n	8012002 <__swsetup_r+0x9a>
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f001 fb87 	bl	8013710 <__smakebuf_r>
 8012002:	89a0      	ldrh	r0, [r4, #12]
 8012004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012008:	f010 0301 	ands.w	r3, r0, #1
 801200c:	d00a      	beq.n	8012024 <__swsetup_r+0xbc>
 801200e:	2300      	movs	r3, #0
 8012010:	60a3      	str	r3, [r4, #8]
 8012012:	6963      	ldr	r3, [r4, #20]
 8012014:	425b      	negs	r3, r3
 8012016:	61a3      	str	r3, [r4, #24]
 8012018:	6923      	ldr	r3, [r4, #16]
 801201a:	b943      	cbnz	r3, 801202e <__swsetup_r+0xc6>
 801201c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012020:	d1ba      	bne.n	8011f98 <__swsetup_r+0x30>
 8012022:	bd70      	pop	{r4, r5, r6, pc}
 8012024:	0781      	lsls	r1, r0, #30
 8012026:	bf58      	it	pl
 8012028:	6963      	ldrpl	r3, [r4, #20]
 801202a:	60a3      	str	r3, [r4, #8]
 801202c:	e7f4      	b.n	8012018 <__swsetup_r+0xb0>
 801202e:	2000      	movs	r0, #0
 8012030:	e7f7      	b.n	8012022 <__swsetup_r+0xba>
 8012032:	bf00      	nop
 8012034:	2400a0e8 	.word	0x2400a0e8
 8012038:	0801d738 	.word	0x0801d738
 801203c:	0801d758 	.word	0x0801d758
 8012040:	0801d718 	.word	0x0801d718

08012044 <abort>:
 8012044:	b508      	push	{r3, lr}
 8012046:	2006      	movs	r0, #6
 8012048:	f002 fa3e 	bl	80144c8 <raise>
 801204c:	2001      	movs	r0, #1
 801204e:	f7ef fc3f 	bl	80018d0 <_exit>

08012052 <quorem>:
 8012052:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012056:	6903      	ldr	r3, [r0, #16]
 8012058:	690c      	ldr	r4, [r1, #16]
 801205a:	42a3      	cmp	r3, r4
 801205c:	4607      	mov	r7, r0
 801205e:	f2c0 8081 	blt.w	8012164 <quorem+0x112>
 8012062:	3c01      	subs	r4, #1
 8012064:	f101 0814 	add.w	r8, r1, #20
 8012068:	f100 0514 	add.w	r5, r0, #20
 801206c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012070:	9301      	str	r3, [sp, #4]
 8012072:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801207a:	3301      	adds	r3, #1
 801207c:	429a      	cmp	r2, r3
 801207e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012082:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012086:	fbb2 f6f3 	udiv	r6, r2, r3
 801208a:	d331      	bcc.n	80120f0 <quorem+0x9e>
 801208c:	f04f 0e00 	mov.w	lr, #0
 8012090:	4640      	mov	r0, r8
 8012092:	46ac      	mov	ip, r5
 8012094:	46f2      	mov	sl, lr
 8012096:	f850 2b04 	ldr.w	r2, [r0], #4
 801209a:	b293      	uxth	r3, r2
 801209c:	fb06 e303 	mla	r3, r6, r3, lr
 80120a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	ebaa 0303 	sub.w	r3, sl, r3
 80120aa:	0c12      	lsrs	r2, r2, #16
 80120ac:	f8dc a000 	ldr.w	sl, [ip]
 80120b0:	fb06 e202 	mla	r2, r6, r2, lr
 80120b4:	fa13 f38a 	uxtah	r3, r3, sl
 80120b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80120bc:	fa1f fa82 	uxth.w	sl, r2
 80120c0:	f8dc 2000 	ldr.w	r2, [ip]
 80120c4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80120c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120d2:	4581      	cmp	r9, r0
 80120d4:	f84c 3b04 	str.w	r3, [ip], #4
 80120d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80120dc:	d2db      	bcs.n	8012096 <quorem+0x44>
 80120de:	f855 300b 	ldr.w	r3, [r5, fp]
 80120e2:	b92b      	cbnz	r3, 80120f0 <quorem+0x9e>
 80120e4:	9b01      	ldr	r3, [sp, #4]
 80120e6:	3b04      	subs	r3, #4
 80120e8:	429d      	cmp	r5, r3
 80120ea:	461a      	mov	r2, r3
 80120ec:	d32e      	bcc.n	801214c <quorem+0xfa>
 80120ee:	613c      	str	r4, [r7, #16]
 80120f0:	4638      	mov	r0, r7
 80120f2:	f001 fe33 	bl	8013d5c <__mcmp>
 80120f6:	2800      	cmp	r0, #0
 80120f8:	db24      	blt.n	8012144 <quorem+0xf2>
 80120fa:	3601      	adds	r6, #1
 80120fc:	4628      	mov	r0, r5
 80120fe:	f04f 0c00 	mov.w	ip, #0
 8012102:	f858 2b04 	ldr.w	r2, [r8], #4
 8012106:	f8d0 e000 	ldr.w	lr, [r0]
 801210a:	b293      	uxth	r3, r2
 801210c:	ebac 0303 	sub.w	r3, ip, r3
 8012110:	0c12      	lsrs	r2, r2, #16
 8012112:	fa13 f38e 	uxtah	r3, r3, lr
 8012116:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801211a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801211e:	b29b      	uxth	r3, r3
 8012120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012124:	45c1      	cmp	r9, r8
 8012126:	f840 3b04 	str.w	r3, [r0], #4
 801212a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801212e:	d2e8      	bcs.n	8012102 <quorem+0xb0>
 8012130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012138:	b922      	cbnz	r2, 8012144 <quorem+0xf2>
 801213a:	3b04      	subs	r3, #4
 801213c:	429d      	cmp	r5, r3
 801213e:	461a      	mov	r2, r3
 8012140:	d30a      	bcc.n	8012158 <quorem+0x106>
 8012142:	613c      	str	r4, [r7, #16]
 8012144:	4630      	mov	r0, r6
 8012146:	b003      	add	sp, #12
 8012148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214c:	6812      	ldr	r2, [r2, #0]
 801214e:	3b04      	subs	r3, #4
 8012150:	2a00      	cmp	r2, #0
 8012152:	d1cc      	bne.n	80120ee <quorem+0x9c>
 8012154:	3c01      	subs	r4, #1
 8012156:	e7c7      	b.n	80120e8 <quorem+0x96>
 8012158:	6812      	ldr	r2, [r2, #0]
 801215a:	3b04      	subs	r3, #4
 801215c:	2a00      	cmp	r2, #0
 801215e:	d1f0      	bne.n	8012142 <quorem+0xf0>
 8012160:	3c01      	subs	r4, #1
 8012162:	e7eb      	b.n	801213c <quorem+0xea>
 8012164:	2000      	movs	r0, #0
 8012166:	e7ee      	b.n	8012146 <quorem+0xf4>

08012168 <_dtoa_r>:
 8012168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216c:	ec59 8b10 	vmov	r8, r9, d0
 8012170:	b095      	sub	sp, #84	; 0x54
 8012172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012174:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8012176:	9107      	str	r1, [sp, #28]
 8012178:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801217c:	4606      	mov	r6, r0
 801217e:	9209      	str	r2, [sp, #36]	; 0x24
 8012180:	9310      	str	r3, [sp, #64]	; 0x40
 8012182:	b975      	cbnz	r5, 80121a2 <_dtoa_r+0x3a>
 8012184:	2010      	movs	r0, #16
 8012186:	f7fd fe77 	bl	800fe78 <malloc>
 801218a:	4602      	mov	r2, r0
 801218c:	6270      	str	r0, [r6, #36]	; 0x24
 801218e:	b920      	cbnz	r0, 801219a <_dtoa_r+0x32>
 8012190:	4bab      	ldr	r3, [pc, #684]	; (8012440 <_dtoa_r+0x2d8>)
 8012192:	21ea      	movs	r1, #234	; 0xea
 8012194:	48ab      	ldr	r0, [pc, #684]	; (8012444 <_dtoa_r+0x2dc>)
 8012196:	f7fd fe15 	bl	800fdc4 <__assert_func>
 801219a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801219e:	6005      	str	r5, [r0, #0]
 80121a0:	60c5      	str	r5, [r0, #12]
 80121a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80121a4:	6819      	ldr	r1, [r3, #0]
 80121a6:	b151      	cbz	r1, 80121be <_dtoa_r+0x56>
 80121a8:	685a      	ldr	r2, [r3, #4]
 80121aa:	604a      	str	r2, [r1, #4]
 80121ac:	2301      	movs	r3, #1
 80121ae:	4093      	lsls	r3, r2
 80121b0:	608b      	str	r3, [r1, #8]
 80121b2:	4630      	mov	r0, r6
 80121b4:	f001 fb4a 	bl	801384c <_Bfree>
 80121b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]
 80121be:	f1b9 0300 	subs.w	r3, r9, #0
 80121c2:	bfbb      	ittet	lt
 80121c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80121c8:	9303      	strlt	r3, [sp, #12]
 80121ca:	2300      	movge	r3, #0
 80121cc:	2201      	movlt	r2, #1
 80121ce:	bfac      	ite	ge
 80121d0:	6023      	strge	r3, [r4, #0]
 80121d2:	6022      	strlt	r2, [r4, #0]
 80121d4:	4b9c      	ldr	r3, [pc, #624]	; (8012448 <_dtoa_r+0x2e0>)
 80121d6:	9c03      	ldr	r4, [sp, #12]
 80121d8:	43a3      	bics	r3, r4
 80121da:	d11a      	bne.n	8012212 <_dtoa_r+0xaa>
 80121dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121de:	f242 730f 	movw	r3, #9999	; 0x270f
 80121e2:	6013      	str	r3, [r2, #0]
 80121e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80121e8:	ea53 0308 	orrs.w	r3, r3, r8
 80121ec:	f000 8512 	beq.w	8012c14 <_dtoa_r+0xaac>
 80121f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80121f2:	b953      	cbnz	r3, 801220a <_dtoa_r+0xa2>
 80121f4:	4b95      	ldr	r3, [pc, #596]	; (801244c <_dtoa_r+0x2e4>)
 80121f6:	e01f      	b.n	8012238 <_dtoa_r+0xd0>
 80121f8:	4b95      	ldr	r3, [pc, #596]	; (8012450 <_dtoa_r+0x2e8>)
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	3308      	adds	r3, #8
 80121fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012200:	6013      	str	r3, [r2, #0]
 8012202:	9800      	ldr	r0, [sp, #0]
 8012204:	b015      	add	sp, #84	; 0x54
 8012206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220a:	4b90      	ldr	r3, [pc, #576]	; (801244c <_dtoa_r+0x2e4>)
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	3303      	adds	r3, #3
 8012210:	e7f5      	b.n	80121fe <_dtoa_r+0x96>
 8012212:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012216:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012222:	d10b      	bne.n	801223c <_dtoa_r+0xd4>
 8012224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012226:	2301      	movs	r3, #1
 8012228:	6013      	str	r3, [r2, #0]
 801222a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801222c:	2b00      	cmp	r3, #0
 801222e:	f000 84ee 	beq.w	8012c0e <_dtoa_r+0xaa6>
 8012232:	4888      	ldr	r0, [pc, #544]	; (8012454 <_dtoa_r+0x2ec>)
 8012234:	6018      	str	r0, [r3, #0]
 8012236:	1e43      	subs	r3, r0, #1
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	e7e2      	b.n	8012202 <_dtoa_r+0x9a>
 801223c:	a913      	add	r1, sp, #76	; 0x4c
 801223e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012242:	aa12      	add	r2, sp, #72	; 0x48
 8012244:	4630      	mov	r0, r6
 8012246:	f001 fea9 	bl	8013f9c <__d2b>
 801224a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801224e:	4605      	mov	r5, r0
 8012250:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012252:	2900      	cmp	r1, #0
 8012254:	d047      	beq.n	80122e6 <_dtoa_r+0x17e>
 8012256:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012258:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801225c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012260:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012264:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012268:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801226c:	2400      	movs	r4, #0
 801226e:	ec43 2b16 	vmov	d6, r2, r3
 8012272:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012276:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012428 <_dtoa_r+0x2c0>
 801227a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801227e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012430 <_dtoa_r+0x2c8>
 8012282:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012286:	eeb0 7b46 	vmov.f64	d7, d6
 801228a:	ee06 1a90 	vmov	s13, r1
 801228e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012292:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012438 <_dtoa_r+0x2d0>
 8012296:	eea5 7b06 	vfma.f64	d7, d5, d6
 801229a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801229e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a6:	ee16 ba90 	vmov	fp, s13
 80122aa:	9411      	str	r4, [sp, #68]	; 0x44
 80122ac:	d508      	bpl.n	80122c0 <_dtoa_r+0x158>
 80122ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80122b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80122b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ba:	bf18      	it	ne
 80122bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80122c0:	f1bb 0f16 	cmp.w	fp, #22
 80122c4:	d832      	bhi.n	801232c <_dtoa_r+0x1c4>
 80122c6:	4b64      	ldr	r3, [pc, #400]	; (8012458 <_dtoa_r+0x2f0>)
 80122c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80122cc:	ed93 7b00 	vldr	d7, [r3]
 80122d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80122d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122dc:	d501      	bpl.n	80122e2 <_dtoa_r+0x17a>
 80122de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80122e2:	2300      	movs	r3, #0
 80122e4:	e023      	b.n	801232e <_dtoa_r+0x1c6>
 80122e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80122e8:	4401      	add	r1, r0
 80122ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80122ee:	2b20      	cmp	r3, #32
 80122f0:	bfc3      	ittte	gt
 80122f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80122f6:	fa04 f303 	lslgt.w	r3, r4, r3
 80122fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80122fe:	f1c3 0320 	rsble	r3, r3, #32
 8012302:	bfc6      	itte	gt
 8012304:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012308:	ea43 0308 	orrgt.w	r3, r3, r8
 801230c:	fa08 f303 	lslle.w	r3, r8, r3
 8012310:	ee07 3a90 	vmov	s15, r3
 8012314:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012318:	3901      	subs	r1, #1
 801231a:	ed8d 7b00 	vstr	d7, [sp]
 801231e:	9c01      	ldr	r4, [sp, #4]
 8012320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012324:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012328:	2401      	movs	r4, #1
 801232a:	e7a0      	b.n	801226e <_dtoa_r+0x106>
 801232c:	2301      	movs	r3, #1
 801232e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012330:	1a43      	subs	r3, r0, r1
 8012332:	1e5a      	subs	r2, r3, #1
 8012334:	bf45      	ittet	mi
 8012336:	f1c3 0301 	rsbmi	r3, r3, #1
 801233a:	9305      	strmi	r3, [sp, #20]
 801233c:	2300      	movpl	r3, #0
 801233e:	2300      	movmi	r3, #0
 8012340:	9206      	str	r2, [sp, #24]
 8012342:	bf54      	ite	pl
 8012344:	9305      	strpl	r3, [sp, #20]
 8012346:	9306      	strmi	r3, [sp, #24]
 8012348:	f1bb 0f00 	cmp.w	fp, #0
 801234c:	db18      	blt.n	8012380 <_dtoa_r+0x218>
 801234e:	9b06      	ldr	r3, [sp, #24]
 8012350:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012354:	445b      	add	r3, fp
 8012356:	9306      	str	r3, [sp, #24]
 8012358:	2300      	movs	r3, #0
 801235a:	9a07      	ldr	r2, [sp, #28]
 801235c:	2a09      	cmp	r2, #9
 801235e:	d849      	bhi.n	80123f4 <_dtoa_r+0x28c>
 8012360:	2a05      	cmp	r2, #5
 8012362:	bfc4      	itt	gt
 8012364:	3a04      	subgt	r2, #4
 8012366:	9207      	strgt	r2, [sp, #28]
 8012368:	9a07      	ldr	r2, [sp, #28]
 801236a:	f1a2 0202 	sub.w	r2, r2, #2
 801236e:	bfcc      	ite	gt
 8012370:	2400      	movgt	r4, #0
 8012372:	2401      	movle	r4, #1
 8012374:	2a03      	cmp	r2, #3
 8012376:	d848      	bhi.n	801240a <_dtoa_r+0x2a2>
 8012378:	e8df f002 	tbb	[pc, r2]
 801237c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012380:	9b05      	ldr	r3, [sp, #20]
 8012382:	2200      	movs	r2, #0
 8012384:	eba3 030b 	sub.w	r3, r3, fp
 8012388:	9305      	str	r3, [sp, #20]
 801238a:	920e      	str	r2, [sp, #56]	; 0x38
 801238c:	f1cb 0300 	rsb	r3, fp, #0
 8012390:	e7e3      	b.n	801235a <_dtoa_r+0x1f2>
 8012392:	2200      	movs	r2, #0
 8012394:	9208      	str	r2, [sp, #32]
 8012396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012398:	2a00      	cmp	r2, #0
 801239a:	dc39      	bgt.n	8012410 <_dtoa_r+0x2a8>
 801239c:	f04f 0a01 	mov.w	sl, #1
 80123a0:	46d1      	mov	r9, sl
 80123a2:	4652      	mov	r2, sl
 80123a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80123a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80123aa:	2100      	movs	r1, #0
 80123ac:	6079      	str	r1, [r7, #4]
 80123ae:	2004      	movs	r0, #4
 80123b0:	f100 0c14 	add.w	ip, r0, #20
 80123b4:	4594      	cmp	ip, r2
 80123b6:	6879      	ldr	r1, [r7, #4]
 80123b8:	d92f      	bls.n	801241a <_dtoa_r+0x2b2>
 80123ba:	4630      	mov	r0, r6
 80123bc:	930c      	str	r3, [sp, #48]	; 0x30
 80123be:	f001 fa05 	bl	80137cc <_Balloc>
 80123c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123c4:	9000      	str	r0, [sp, #0]
 80123c6:	4602      	mov	r2, r0
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d149      	bne.n	8012460 <_dtoa_r+0x2f8>
 80123cc:	4b23      	ldr	r3, [pc, #140]	; (801245c <_dtoa_r+0x2f4>)
 80123ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80123d2:	e6df      	b.n	8012194 <_dtoa_r+0x2c>
 80123d4:	2201      	movs	r2, #1
 80123d6:	e7dd      	b.n	8012394 <_dtoa_r+0x22c>
 80123d8:	2200      	movs	r2, #0
 80123da:	9208      	str	r2, [sp, #32]
 80123dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123de:	eb0b 0a02 	add.w	sl, fp, r2
 80123e2:	f10a 0901 	add.w	r9, sl, #1
 80123e6:	464a      	mov	r2, r9
 80123e8:	2a01      	cmp	r2, #1
 80123ea:	bfb8      	it	lt
 80123ec:	2201      	movlt	r2, #1
 80123ee:	e7db      	b.n	80123a8 <_dtoa_r+0x240>
 80123f0:	2201      	movs	r2, #1
 80123f2:	e7f2      	b.n	80123da <_dtoa_r+0x272>
 80123f4:	2401      	movs	r4, #1
 80123f6:	2200      	movs	r2, #0
 80123f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80123fc:	f04f 3aff 	mov.w	sl, #4294967295
 8012400:	2100      	movs	r1, #0
 8012402:	46d1      	mov	r9, sl
 8012404:	2212      	movs	r2, #18
 8012406:	9109      	str	r1, [sp, #36]	; 0x24
 8012408:	e7ce      	b.n	80123a8 <_dtoa_r+0x240>
 801240a:	2201      	movs	r2, #1
 801240c:	9208      	str	r2, [sp, #32]
 801240e:	e7f5      	b.n	80123fc <_dtoa_r+0x294>
 8012410:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012414:	46d1      	mov	r9, sl
 8012416:	4652      	mov	r2, sl
 8012418:	e7c6      	b.n	80123a8 <_dtoa_r+0x240>
 801241a:	3101      	adds	r1, #1
 801241c:	6079      	str	r1, [r7, #4]
 801241e:	0040      	lsls	r0, r0, #1
 8012420:	e7c6      	b.n	80123b0 <_dtoa_r+0x248>
 8012422:	bf00      	nop
 8012424:	f3af 8000 	nop.w
 8012428:	636f4361 	.word	0x636f4361
 801242c:	3fd287a7 	.word	0x3fd287a7
 8012430:	8b60c8b3 	.word	0x8b60c8b3
 8012434:	3fc68a28 	.word	0x3fc68a28
 8012438:	509f79fb 	.word	0x509f79fb
 801243c:	3fd34413 	.word	0x3fd34413
 8012440:	0801d68e 	.word	0x0801d68e
 8012444:	0801d6a5 	.word	0x0801d6a5
 8012448:	7ff00000 	.word	0x7ff00000
 801244c:	0801d68a 	.word	0x0801d68a
 8012450:	0801d681 	.word	0x0801d681
 8012454:	0801d506 	.word	0x0801d506
 8012458:	0801d880 	.word	0x0801d880
 801245c:	0801d704 	.word	0x0801d704
 8012460:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012462:	9900      	ldr	r1, [sp, #0]
 8012464:	6011      	str	r1, [r2, #0]
 8012466:	f1b9 0f0e 	cmp.w	r9, #14
 801246a:	d872      	bhi.n	8012552 <_dtoa_r+0x3ea>
 801246c:	2c00      	cmp	r4, #0
 801246e:	d070      	beq.n	8012552 <_dtoa_r+0x3ea>
 8012470:	f1bb 0f00 	cmp.w	fp, #0
 8012474:	f340 80a6 	ble.w	80125c4 <_dtoa_r+0x45c>
 8012478:	49ca      	ldr	r1, [pc, #808]	; (80127a4 <_dtoa_r+0x63c>)
 801247a:	f00b 020f 	and.w	r2, fp, #15
 801247e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012482:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012486:	ed92 7b00 	vldr	d7, [r2]
 801248a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801248e:	f000 808d 	beq.w	80125ac <_dtoa_r+0x444>
 8012492:	4ac5      	ldr	r2, [pc, #788]	; (80127a8 <_dtoa_r+0x640>)
 8012494:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012498:	ed92 6b08 	vldr	d6, [r2, #32]
 801249c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80124a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80124a4:	f001 010f 	and.w	r1, r1, #15
 80124a8:	2203      	movs	r2, #3
 80124aa:	48bf      	ldr	r0, [pc, #764]	; (80127a8 <_dtoa_r+0x640>)
 80124ac:	2900      	cmp	r1, #0
 80124ae:	d17f      	bne.n	80125b0 <_dtoa_r+0x448>
 80124b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80124b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80124b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80124bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80124be:	2900      	cmp	r1, #0
 80124c0:	f000 80b2 	beq.w	8012628 <_dtoa_r+0x4c0>
 80124c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80124c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80124d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d4:	f140 80a8 	bpl.w	8012628 <_dtoa_r+0x4c0>
 80124d8:	f1b9 0f00 	cmp.w	r9, #0
 80124dc:	f000 80a4 	beq.w	8012628 <_dtoa_r+0x4c0>
 80124e0:	f1ba 0f00 	cmp.w	sl, #0
 80124e4:	dd31      	ble.n	801254a <_dtoa_r+0x3e2>
 80124e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80124ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80124ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80124f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80124f6:	3201      	adds	r2, #1
 80124f8:	4650      	mov	r0, sl
 80124fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80124fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012502:	ee07 2a90 	vmov	s15, r2
 8012506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801250a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801250e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012512:	9c03      	ldr	r4, [sp, #12]
 8012514:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012518:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801251c:	2800      	cmp	r0, #0
 801251e:	f040 8086 	bne.w	801262e <_dtoa_r+0x4c6>
 8012522:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012526:	ee36 6b47 	vsub.f64	d6, d6, d7
 801252a:	ec42 1b17 	vmov	d7, r1, r2
 801252e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012536:	f300 8272 	bgt.w	8012a1e <_dtoa_r+0x8b6>
 801253a:	eeb1 7b47 	vneg.f64	d7, d7
 801253e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012546:	f100 8267 	bmi.w	8012a18 <_dtoa_r+0x8b0>
 801254a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801254e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012552:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012554:	2a00      	cmp	r2, #0
 8012556:	f2c0 8129 	blt.w	80127ac <_dtoa_r+0x644>
 801255a:	f1bb 0f0e 	cmp.w	fp, #14
 801255e:	f300 8125 	bgt.w	80127ac <_dtoa_r+0x644>
 8012562:	4b90      	ldr	r3, [pc, #576]	; (80127a4 <_dtoa_r+0x63c>)
 8012564:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012568:	ed93 6b00 	vldr	d6, [r3]
 801256c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801256e:	2b00      	cmp	r3, #0
 8012570:	f280 80c3 	bge.w	80126fa <_dtoa_r+0x592>
 8012574:	f1b9 0f00 	cmp.w	r9, #0
 8012578:	f300 80bf 	bgt.w	80126fa <_dtoa_r+0x592>
 801257c:	f040 824c 	bne.w	8012a18 <_dtoa_r+0x8b0>
 8012580:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012584:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012588:	ed9d 7b02 	vldr	d7, [sp, #8]
 801258c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012594:	464c      	mov	r4, r9
 8012596:	464f      	mov	r7, r9
 8012598:	f280 8222 	bge.w	80129e0 <_dtoa_r+0x878>
 801259c:	f8dd 8000 	ldr.w	r8, [sp]
 80125a0:	2331      	movs	r3, #49	; 0x31
 80125a2:	f808 3b01 	strb.w	r3, [r8], #1
 80125a6:	f10b 0b01 	add.w	fp, fp, #1
 80125aa:	e21e      	b.n	80129ea <_dtoa_r+0x882>
 80125ac:	2202      	movs	r2, #2
 80125ae:	e77c      	b.n	80124aa <_dtoa_r+0x342>
 80125b0:	07cc      	lsls	r4, r1, #31
 80125b2:	d504      	bpl.n	80125be <_dtoa_r+0x456>
 80125b4:	ed90 6b00 	vldr	d6, [r0]
 80125b8:	3201      	adds	r2, #1
 80125ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80125be:	1049      	asrs	r1, r1, #1
 80125c0:	3008      	adds	r0, #8
 80125c2:	e773      	b.n	80124ac <_dtoa_r+0x344>
 80125c4:	d02e      	beq.n	8012624 <_dtoa_r+0x4bc>
 80125c6:	f1cb 0100 	rsb	r1, fp, #0
 80125ca:	4a76      	ldr	r2, [pc, #472]	; (80127a4 <_dtoa_r+0x63c>)
 80125cc:	f001 000f 	and.w	r0, r1, #15
 80125d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80125d4:	ed92 7b00 	vldr	d7, [r2]
 80125d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80125dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80125e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80125e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80125e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80125ec:	486e      	ldr	r0, [pc, #440]	; (80127a8 <_dtoa_r+0x640>)
 80125ee:	1109      	asrs	r1, r1, #4
 80125f0:	2400      	movs	r4, #0
 80125f2:	2202      	movs	r2, #2
 80125f4:	b939      	cbnz	r1, 8012606 <_dtoa_r+0x49e>
 80125f6:	2c00      	cmp	r4, #0
 80125f8:	f43f af60 	beq.w	80124bc <_dtoa_r+0x354>
 80125fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012604:	e75a      	b.n	80124bc <_dtoa_r+0x354>
 8012606:	07cf      	lsls	r7, r1, #31
 8012608:	d509      	bpl.n	801261e <_dtoa_r+0x4b6>
 801260a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801260e:	ed90 7b00 	vldr	d7, [r0]
 8012612:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012616:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801261a:	3201      	adds	r2, #1
 801261c:	2401      	movs	r4, #1
 801261e:	1049      	asrs	r1, r1, #1
 8012620:	3008      	adds	r0, #8
 8012622:	e7e7      	b.n	80125f4 <_dtoa_r+0x48c>
 8012624:	2202      	movs	r2, #2
 8012626:	e749      	b.n	80124bc <_dtoa_r+0x354>
 8012628:	465f      	mov	r7, fp
 801262a:	4648      	mov	r0, r9
 801262c:	e765      	b.n	80124fa <_dtoa_r+0x392>
 801262e:	ec42 1b17 	vmov	d7, r1, r2
 8012632:	4a5c      	ldr	r2, [pc, #368]	; (80127a4 <_dtoa_r+0x63c>)
 8012634:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012638:	ed12 4b02 	vldr	d4, [r2, #-8]
 801263c:	9a00      	ldr	r2, [sp, #0]
 801263e:	1814      	adds	r4, r2, r0
 8012640:	9a08      	ldr	r2, [sp, #32]
 8012642:	b352      	cbz	r2, 801269a <_dtoa_r+0x532>
 8012644:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012648:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801264c:	f8dd 8000 	ldr.w	r8, [sp]
 8012650:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012654:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012658:	ee35 7b47 	vsub.f64	d7, d5, d7
 801265c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012660:	ee14 2a90 	vmov	r2, s9
 8012664:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012668:	3230      	adds	r2, #48	; 0x30
 801266a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801266e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012676:	f808 2b01 	strb.w	r2, [r8], #1
 801267a:	d439      	bmi.n	80126f0 <_dtoa_r+0x588>
 801267c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012680:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	d472      	bmi.n	8012770 <_dtoa_r+0x608>
 801268a:	45a0      	cmp	r8, r4
 801268c:	f43f af5d 	beq.w	801254a <_dtoa_r+0x3e2>
 8012690:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012694:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012698:	e7e0      	b.n	801265c <_dtoa_r+0x4f4>
 801269a:	f8dd 8000 	ldr.w	r8, [sp]
 801269e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80126a2:	4621      	mov	r1, r4
 80126a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80126a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80126ac:	ee14 2a90 	vmov	r2, s9
 80126b0:	3230      	adds	r2, #48	; 0x30
 80126b2:	f808 2b01 	strb.w	r2, [r8], #1
 80126b6:	45a0      	cmp	r8, r4
 80126b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80126bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80126c0:	d118      	bne.n	80126f4 <_dtoa_r+0x58c>
 80126c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80126c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80126ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80126ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d2:	dc4d      	bgt.n	8012770 <_dtoa_r+0x608>
 80126d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80126d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e0:	f57f af33 	bpl.w	801254a <_dtoa_r+0x3e2>
 80126e4:	4688      	mov	r8, r1
 80126e6:	3901      	subs	r1, #1
 80126e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80126ec:	2b30      	cmp	r3, #48	; 0x30
 80126ee:	d0f9      	beq.n	80126e4 <_dtoa_r+0x57c>
 80126f0:	46bb      	mov	fp, r7
 80126f2:	e02a      	b.n	801274a <_dtoa_r+0x5e2>
 80126f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80126f8:	e7d6      	b.n	80126a8 <_dtoa_r+0x540>
 80126fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012702:	f8dd 8000 	ldr.w	r8, [sp]
 8012706:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801270a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801270e:	ee15 3a10 	vmov	r3, s10
 8012712:	3330      	adds	r3, #48	; 0x30
 8012714:	f808 3b01 	strb.w	r3, [r8], #1
 8012718:	9b00      	ldr	r3, [sp, #0]
 801271a:	eba8 0303 	sub.w	r3, r8, r3
 801271e:	4599      	cmp	r9, r3
 8012720:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012724:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012728:	d133      	bne.n	8012792 <_dtoa_r+0x62a>
 801272a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801272e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	dc1a      	bgt.n	801276e <_dtoa_r+0x606>
 8012738:	eeb4 7b46 	vcmp.f64	d7, d6
 801273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012740:	d103      	bne.n	801274a <_dtoa_r+0x5e2>
 8012742:	ee15 3a10 	vmov	r3, s10
 8012746:	07d9      	lsls	r1, r3, #31
 8012748:	d411      	bmi.n	801276e <_dtoa_r+0x606>
 801274a:	4629      	mov	r1, r5
 801274c:	4630      	mov	r0, r6
 801274e:	f001 f87d 	bl	801384c <_Bfree>
 8012752:	2300      	movs	r3, #0
 8012754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012756:	f888 3000 	strb.w	r3, [r8]
 801275a:	f10b 0301 	add.w	r3, fp, #1
 801275e:	6013      	str	r3, [r2, #0]
 8012760:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012762:	2b00      	cmp	r3, #0
 8012764:	f43f ad4d 	beq.w	8012202 <_dtoa_r+0x9a>
 8012768:	f8c3 8000 	str.w	r8, [r3]
 801276c:	e549      	b.n	8012202 <_dtoa_r+0x9a>
 801276e:	465f      	mov	r7, fp
 8012770:	4643      	mov	r3, r8
 8012772:	4698      	mov	r8, r3
 8012774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012778:	2a39      	cmp	r2, #57	; 0x39
 801277a:	d106      	bne.n	801278a <_dtoa_r+0x622>
 801277c:	9a00      	ldr	r2, [sp, #0]
 801277e:	429a      	cmp	r2, r3
 8012780:	d1f7      	bne.n	8012772 <_dtoa_r+0x60a>
 8012782:	9900      	ldr	r1, [sp, #0]
 8012784:	2230      	movs	r2, #48	; 0x30
 8012786:	3701      	adds	r7, #1
 8012788:	700a      	strb	r2, [r1, #0]
 801278a:	781a      	ldrb	r2, [r3, #0]
 801278c:	3201      	adds	r2, #1
 801278e:	701a      	strb	r2, [r3, #0]
 8012790:	e7ae      	b.n	80126f0 <_dtoa_r+0x588>
 8012792:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012796:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801279e:	d1b2      	bne.n	8012706 <_dtoa_r+0x59e>
 80127a0:	e7d3      	b.n	801274a <_dtoa_r+0x5e2>
 80127a2:	bf00      	nop
 80127a4:	0801d880 	.word	0x0801d880
 80127a8:	0801d858 	.word	0x0801d858
 80127ac:	9908      	ldr	r1, [sp, #32]
 80127ae:	2900      	cmp	r1, #0
 80127b0:	f000 80d1 	beq.w	8012956 <_dtoa_r+0x7ee>
 80127b4:	9907      	ldr	r1, [sp, #28]
 80127b6:	2901      	cmp	r1, #1
 80127b8:	f300 80b4 	bgt.w	8012924 <_dtoa_r+0x7bc>
 80127bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80127be:	2900      	cmp	r1, #0
 80127c0:	f000 80ac 	beq.w	801291c <_dtoa_r+0x7b4>
 80127c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80127c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80127cc:	461c      	mov	r4, r3
 80127ce:	930a      	str	r3, [sp, #40]	; 0x28
 80127d0:	9b05      	ldr	r3, [sp, #20]
 80127d2:	4413      	add	r3, r2
 80127d4:	9305      	str	r3, [sp, #20]
 80127d6:	9b06      	ldr	r3, [sp, #24]
 80127d8:	2101      	movs	r1, #1
 80127da:	4413      	add	r3, r2
 80127dc:	4630      	mov	r0, r6
 80127de:	9306      	str	r3, [sp, #24]
 80127e0:	f001 f93a 	bl	8013a58 <__i2b>
 80127e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127e6:	4607      	mov	r7, r0
 80127e8:	f1b8 0f00 	cmp.w	r8, #0
 80127ec:	dd0d      	ble.n	801280a <_dtoa_r+0x6a2>
 80127ee:	9a06      	ldr	r2, [sp, #24]
 80127f0:	2a00      	cmp	r2, #0
 80127f2:	dd0a      	ble.n	801280a <_dtoa_r+0x6a2>
 80127f4:	4542      	cmp	r2, r8
 80127f6:	9905      	ldr	r1, [sp, #20]
 80127f8:	bfa8      	it	ge
 80127fa:	4642      	movge	r2, r8
 80127fc:	1a89      	subs	r1, r1, r2
 80127fe:	9105      	str	r1, [sp, #20]
 8012800:	9906      	ldr	r1, [sp, #24]
 8012802:	eba8 0802 	sub.w	r8, r8, r2
 8012806:	1a8a      	subs	r2, r1, r2
 8012808:	9206      	str	r2, [sp, #24]
 801280a:	b303      	cbz	r3, 801284e <_dtoa_r+0x6e6>
 801280c:	9a08      	ldr	r2, [sp, #32]
 801280e:	2a00      	cmp	r2, #0
 8012810:	f000 80a6 	beq.w	8012960 <_dtoa_r+0x7f8>
 8012814:	2c00      	cmp	r4, #0
 8012816:	dd13      	ble.n	8012840 <_dtoa_r+0x6d8>
 8012818:	4639      	mov	r1, r7
 801281a:	4622      	mov	r2, r4
 801281c:	4630      	mov	r0, r6
 801281e:	930c      	str	r3, [sp, #48]	; 0x30
 8012820:	f001 f9d6 	bl	8013bd0 <__pow5mult>
 8012824:	462a      	mov	r2, r5
 8012826:	4601      	mov	r1, r0
 8012828:	4607      	mov	r7, r0
 801282a:	4630      	mov	r0, r6
 801282c:	f001 f92a 	bl	8013a84 <__multiply>
 8012830:	4629      	mov	r1, r5
 8012832:	900a      	str	r0, [sp, #40]	; 0x28
 8012834:	4630      	mov	r0, r6
 8012836:	f001 f809 	bl	801384c <_Bfree>
 801283a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801283c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801283e:	4615      	mov	r5, r2
 8012840:	1b1a      	subs	r2, r3, r4
 8012842:	d004      	beq.n	801284e <_dtoa_r+0x6e6>
 8012844:	4629      	mov	r1, r5
 8012846:	4630      	mov	r0, r6
 8012848:	f001 f9c2 	bl	8013bd0 <__pow5mult>
 801284c:	4605      	mov	r5, r0
 801284e:	2101      	movs	r1, #1
 8012850:	4630      	mov	r0, r6
 8012852:	f001 f901 	bl	8013a58 <__i2b>
 8012856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012858:	2b00      	cmp	r3, #0
 801285a:	4604      	mov	r4, r0
 801285c:	f340 8082 	ble.w	8012964 <_dtoa_r+0x7fc>
 8012860:	461a      	mov	r2, r3
 8012862:	4601      	mov	r1, r0
 8012864:	4630      	mov	r0, r6
 8012866:	f001 f9b3 	bl	8013bd0 <__pow5mult>
 801286a:	9b07      	ldr	r3, [sp, #28]
 801286c:	2b01      	cmp	r3, #1
 801286e:	4604      	mov	r4, r0
 8012870:	dd7b      	ble.n	801296a <_dtoa_r+0x802>
 8012872:	2300      	movs	r3, #0
 8012874:	930a      	str	r3, [sp, #40]	; 0x28
 8012876:	6922      	ldr	r2, [r4, #16]
 8012878:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801287c:	6910      	ldr	r0, [r2, #16]
 801287e:	f001 f89b 	bl	80139b8 <__hi0bits>
 8012882:	f1c0 0020 	rsb	r0, r0, #32
 8012886:	9b06      	ldr	r3, [sp, #24]
 8012888:	4418      	add	r0, r3
 801288a:	f010 001f 	ands.w	r0, r0, #31
 801288e:	f000 808d 	beq.w	80129ac <_dtoa_r+0x844>
 8012892:	f1c0 0220 	rsb	r2, r0, #32
 8012896:	2a04      	cmp	r2, #4
 8012898:	f340 8086 	ble.w	80129a8 <_dtoa_r+0x840>
 801289c:	f1c0 001c 	rsb	r0, r0, #28
 80128a0:	9b05      	ldr	r3, [sp, #20]
 80128a2:	4403      	add	r3, r0
 80128a4:	9305      	str	r3, [sp, #20]
 80128a6:	9b06      	ldr	r3, [sp, #24]
 80128a8:	4403      	add	r3, r0
 80128aa:	4480      	add	r8, r0
 80128ac:	9306      	str	r3, [sp, #24]
 80128ae:	9b05      	ldr	r3, [sp, #20]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	dd05      	ble.n	80128c0 <_dtoa_r+0x758>
 80128b4:	4629      	mov	r1, r5
 80128b6:	461a      	mov	r2, r3
 80128b8:	4630      	mov	r0, r6
 80128ba:	f001 f9e3 	bl	8013c84 <__lshift>
 80128be:	4605      	mov	r5, r0
 80128c0:	9b06      	ldr	r3, [sp, #24]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	dd05      	ble.n	80128d2 <_dtoa_r+0x76a>
 80128c6:	4621      	mov	r1, r4
 80128c8:	461a      	mov	r2, r3
 80128ca:	4630      	mov	r0, r6
 80128cc:	f001 f9da 	bl	8013c84 <__lshift>
 80128d0:	4604      	mov	r4, r0
 80128d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d06b      	beq.n	80129b0 <_dtoa_r+0x848>
 80128d8:	4621      	mov	r1, r4
 80128da:	4628      	mov	r0, r5
 80128dc:	f001 fa3e 	bl	8013d5c <__mcmp>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	da65      	bge.n	80129b0 <_dtoa_r+0x848>
 80128e4:	2300      	movs	r3, #0
 80128e6:	4629      	mov	r1, r5
 80128e8:	220a      	movs	r2, #10
 80128ea:	4630      	mov	r0, r6
 80128ec:	f000 ffd0 	bl	8013890 <__multadd>
 80128f0:	9b08      	ldr	r3, [sp, #32]
 80128f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128f6:	4605      	mov	r5, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 8192 	beq.w	8012c22 <_dtoa_r+0xaba>
 80128fe:	4639      	mov	r1, r7
 8012900:	2300      	movs	r3, #0
 8012902:	220a      	movs	r2, #10
 8012904:	4630      	mov	r0, r6
 8012906:	f000 ffc3 	bl	8013890 <__multadd>
 801290a:	f1ba 0f00 	cmp.w	sl, #0
 801290e:	4607      	mov	r7, r0
 8012910:	f300 808e 	bgt.w	8012a30 <_dtoa_r+0x8c8>
 8012914:	9b07      	ldr	r3, [sp, #28]
 8012916:	2b02      	cmp	r3, #2
 8012918:	dc51      	bgt.n	80129be <_dtoa_r+0x856>
 801291a:	e089      	b.n	8012a30 <_dtoa_r+0x8c8>
 801291c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801291e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012922:	e751      	b.n	80127c8 <_dtoa_r+0x660>
 8012924:	f109 34ff 	add.w	r4, r9, #4294967295
 8012928:	42a3      	cmp	r3, r4
 801292a:	bfbf      	itttt	lt
 801292c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801292e:	1ae3      	sublt	r3, r4, r3
 8012930:	18d2      	addlt	r2, r2, r3
 8012932:	4613      	movlt	r3, r2
 8012934:	bfb7      	itett	lt
 8012936:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012938:	1b1c      	subge	r4, r3, r4
 801293a:	4623      	movlt	r3, r4
 801293c:	2400      	movlt	r4, #0
 801293e:	f1b9 0f00 	cmp.w	r9, #0
 8012942:	bfb5      	itete	lt
 8012944:	9a05      	ldrlt	r2, [sp, #20]
 8012946:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801294a:	eba2 0809 	sublt.w	r8, r2, r9
 801294e:	464a      	movge	r2, r9
 8012950:	bfb8      	it	lt
 8012952:	2200      	movlt	r2, #0
 8012954:	e73b      	b.n	80127ce <_dtoa_r+0x666>
 8012956:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801295a:	9f08      	ldr	r7, [sp, #32]
 801295c:	461c      	mov	r4, r3
 801295e:	e743      	b.n	80127e8 <_dtoa_r+0x680>
 8012960:	461a      	mov	r2, r3
 8012962:	e76f      	b.n	8012844 <_dtoa_r+0x6dc>
 8012964:	9b07      	ldr	r3, [sp, #28]
 8012966:	2b01      	cmp	r3, #1
 8012968:	dc18      	bgt.n	801299c <_dtoa_r+0x834>
 801296a:	9b02      	ldr	r3, [sp, #8]
 801296c:	b9b3      	cbnz	r3, 801299c <_dtoa_r+0x834>
 801296e:	9b03      	ldr	r3, [sp, #12]
 8012970:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012974:	b9a2      	cbnz	r2, 80129a0 <_dtoa_r+0x838>
 8012976:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801297a:	0d12      	lsrs	r2, r2, #20
 801297c:	0512      	lsls	r2, r2, #20
 801297e:	b18a      	cbz	r2, 80129a4 <_dtoa_r+0x83c>
 8012980:	9b05      	ldr	r3, [sp, #20]
 8012982:	3301      	adds	r3, #1
 8012984:	9305      	str	r3, [sp, #20]
 8012986:	9b06      	ldr	r3, [sp, #24]
 8012988:	3301      	adds	r3, #1
 801298a:	9306      	str	r3, [sp, #24]
 801298c:	2301      	movs	r3, #1
 801298e:	930a      	str	r3, [sp, #40]	; 0x28
 8012990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012992:	2b00      	cmp	r3, #0
 8012994:	f47f af6f 	bne.w	8012876 <_dtoa_r+0x70e>
 8012998:	2001      	movs	r0, #1
 801299a:	e774      	b.n	8012886 <_dtoa_r+0x71e>
 801299c:	2300      	movs	r3, #0
 801299e:	e7f6      	b.n	801298e <_dtoa_r+0x826>
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	e7f4      	b.n	801298e <_dtoa_r+0x826>
 80129a4:	920a      	str	r2, [sp, #40]	; 0x28
 80129a6:	e7f3      	b.n	8012990 <_dtoa_r+0x828>
 80129a8:	d081      	beq.n	80128ae <_dtoa_r+0x746>
 80129aa:	4610      	mov	r0, r2
 80129ac:	301c      	adds	r0, #28
 80129ae:	e777      	b.n	80128a0 <_dtoa_r+0x738>
 80129b0:	f1b9 0f00 	cmp.w	r9, #0
 80129b4:	dc37      	bgt.n	8012a26 <_dtoa_r+0x8be>
 80129b6:	9b07      	ldr	r3, [sp, #28]
 80129b8:	2b02      	cmp	r3, #2
 80129ba:	dd34      	ble.n	8012a26 <_dtoa_r+0x8be>
 80129bc:	46ca      	mov	sl, r9
 80129be:	f1ba 0f00 	cmp.w	sl, #0
 80129c2:	d10d      	bne.n	80129e0 <_dtoa_r+0x878>
 80129c4:	4621      	mov	r1, r4
 80129c6:	4653      	mov	r3, sl
 80129c8:	2205      	movs	r2, #5
 80129ca:	4630      	mov	r0, r6
 80129cc:	f000 ff60 	bl	8013890 <__multadd>
 80129d0:	4601      	mov	r1, r0
 80129d2:	4604      	mov	r4, r0
 80129d4:	4628      	mov	r0, r5
 80129d6:	f001 f9c1 	bl	8013d5c <__mcmp>
 80129da:	2800      	cmp	r0, #0
 80129dc:	f73f adde 	bgt.w	801259c <_dtoa_r+0x434>
 80129e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e2:	f8dd 8000 	ldr.w	r8, [sp]
 80129e6:	ea6f 0b03 	mvn.w	fp, r3
 80129ea:	f04f 0900 	mov.w	r9, #0
 80129ee:	4621      	mov	r1, r4
 80129f0:	4630      	mov	r0, r6
 80129f2:	f000 ff2b 	bl	801384c <_Bfree>
 80129f6:	2f00      	cmp	r7, #0
 80129f8:	f43f aea7 	beq.w	801274a <_dtoa_r+0x5e2>
 80129fc:	f1b9 0f00 	cmp.w	r9, #0
 8012a00:	d005      	beq.n	8012a0e <_dtoa_r+0x8a6>
 8012a02:	45b9      	cmp	r9, r7
 8012a04:	d003      	beq.n	8012a0e <_dtoa_r+0x8a6>
 8012a06:	4649      	mov	r1, r9
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f000 ff1f 	bl	801384c <_Bfree>
 8012a0e:	4639      	mov	r1, r7
 8012a10:	4630      	mov	r0, r6
 8012a12:	f000 ff1b 	bl	801384c <_Bfree>
 8012a16:	e698      	b.n	801274a <_dtoa_r+0x5e2>
 8012a18:	2400      	movs	r4, #0
 8012a1a:	4627      	mov	r7, r4
 8012a1c:	e7e0      	b.n	80129e0 <_dtoa_r+0x878>
 8012a1e:	46bb      	mov	fp, r7
 8012a20:	4604      	mov	r4, r0
 8012a22:	4607      	mov	r7, r0
 8012a24:	e5ba      	b.n	801259c <_dtoa_r+0x434>
 8012a26:	9b08      	ldr	r3, [sp, #32]
 8012a28:	46ca      	mov	sl, r9
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	f000 8100 	beq.w	8012c30 <_dtoa_r+0xac8>
 8012a30:	f1b8 0f00 	cmp.w	r8, #0
 8012a34:	dd05      	ble.n	8012a42 <_dtoa_r+0x8da>
 8012a36:	4639      	mov	r1, r7
 8012a38:	4642      	mov	r2, r8
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	f001 f922 	bl	8013c84 <__lshift>
 8012a40:	4607      	mov	r7, r0
 8012a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d05d      	beq.n	8012b04 <_dtoa_r+0x99c>
 8012a48:	6879      	ldr	r1, [r7, #4]
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f000 febe 	bl	80137cc <_Balloc>
 8012a50:	4680      	mov	r8, r0
 8012a52:	b928      	cbnz	r0, 8012a60 <_dtoa_r+0x8f8>
 8012a54:	4b82      	ldr	r3, [pc, #520]	; (8012c60 <_dtoa_r+0xaf8>)
 8012a56:	4602      	mov	r2, r0
 8012a58:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a5c:	f7ff bb9a 	b.w	8012194 <_dtoa_r+0x2c>
 8012a60:	693a      	ldr	r2, [r7, #16]
 8012a62:	3202      	adds	r2, #2
 8012a64:	0092      	lsls	r2, r2, #2
 8012a66:	f107 010c 	add.w	r1, r7, #12
 8012a6a:	300c      	adds	r0, #12
 8012a6c:	f7fd fa14 	bl	800fe98 <memcpy>
 8012a70:	2201      	movs	r2, #1
 8012a72:	4641      	mov	r1, r8
 8012a74:	4630      	mov	r0, r6
 8012a76:	f001 f905 	bl	8013c84 <__lshift>
 8012a7a:	9b00      	ldr	r3, [sp, #0]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	9305      	str	r3, [sp, #20]
 8012a80:	9b00      	ldr	r3, [sp, #0]
 8012a82:	4453      	add	r3, sl
 8012a84:	9309      	str	r3, [sp, #36]	; 0x24
 8012a86:	9b02      	ldr	r3, [sp, #8]
 8012a88:	f003 0301 	and.w	r3, r3, #1
 8012a8c:	46b9      	mov	r9, r7
 8012a8e:	9308      	str	r3, [sp, #32]
 8012a90:	4607      	mov	r7, r0
 8012a92:	9b05      	ldr	r3, [sp, #20]
 8012a94:	4621      	mov	r1, r4
 8012a96:	3b01      	subs	r3, #1
 8012a98:	4628      	mov	r0, r5
 8012a9a:	9302      	str	r3, [sp, #8]
 8012a9c:	f7ff fad9 	bl	8012052 <quorem>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	3330      	adds	r3, #48	; 0x30
 8012aa4:	9006      	str	r0, [sp, #24]
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8012aac:	f001 f956 	bl	8013d5c <__mcmp>
 8012ab0:	463a      	mov	r2, r7
 8012ab2:	4682      	mov	sl, r0
 8012ab4:	4621      	mov	r1, r4
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	f001 f96c 	bl	8013d94 <__mdiff>
 8012abc:	68c2      	ldr	r2, [r0, #12]
 8012abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ac0:	4680      	mov	r8, r0
 8012ac2:	bb0a      	cbnz	r2, 8012b08 <_dtoa_r+0x9a0>
 8012ac4:	4601      	mov	r1, r0
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f001 f948 	bl	8013d5c <__mcmp>
 8012acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ace:	4602      	mov	r2, r0
 8012ad0:	4641      	mov	r1, r8
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	920e      	str	r2, [sp, #56]	; 0x38
 8012ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8012ad8:	f000 feb8 	bl	801384c <_Bfree>
 8012adc:	9b07      	ldr	r3, [sp, #28]
 8012ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ae0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012ae4:	ea43 0102 	orr.w	r1, r3, r2
 8012ae8:	9b08      	ldr	r3, [sp, #32]
 8012aea:	430b      	orrs	r3, r1
 8012aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aee:	d10d      	bne.n	8012b0c <_dtoa_r+0x9a4>
 8012af0:	2b39      	cmp	r3, #57	; 0x39
 8012af2:	d029      	beq.n	8012b48 <_dtoa_r+0x9e0>
 8012af4:	f1ba 0f00 	cmp.w	sl, #0
 8012af8:	dd01      	ble.n	8012afe <_dtoa_r+0x996>
 8012afa:	9b06      	ldr	r3, [sp, #24]
 8012afc:	3331      	adds	r3, #49	; 0x31
 8012afe:	9a02      	ldr	r2, [sp, #8]
 8012b00:	7013      	strb	r3, [r2, #0]
 8012b02:	e774      	b.n	80129ee <_dtoa_r+0x886>
 8012b04:	4638      	mov	r0, r7
 8012b06:	e7b8      	b.n	8012a7a <_dtoa_r+0x912>
 8012b08:	2201      	movs	r2, #1
 8012b0a:	e7e1      	b.n	8012ad0 <_dtoa_r+0x968>
 8012b0c:	f1ba 0f00 	cmp.w	sl, #0
 8012b10:	db06      	blt.n	8012b20 <_dtoa_r+0x9b8>
 8012b12:	9907      	ldr	r1, [sp, #28]
 8012b14:	ea41 0a0a 	orr.w	sl, r1, sl
 8012b18:	9908      	ldr	r1, [sp, #32]
 8012b1a:	ea5a 0101 	orrs.w	r1, sl, r1
 8012b1e:	d120      	bne.n	8012b62 <_dtoa_r+0x9fa>
 8012b20:	2a00      	cmp	r2, #0
 8012b22:	ddec      	ble.n	8012afe <_dtoa_r+0x996>
 8012b24:	4629      	mov	r1, r5
 8012b26:	2201      	movs	r2, #1
 8012b28:	4630      	mov	r0, r6
 8012b2a:	9305      	str	r3, [sp, #20]
 8012b2c:	f001 f8aa 	bl	8013c84 <__lshift>
 8012b30:	4621      	mov	r1, r4
 8012b32:	4605      	mov	r5, r0
 8012b34:	f001 f912 	bl	8013d5c <__mcmp>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	9b05      	ldr	r3, [sp, #20]
 8012b3c:	dc02      	bgt.n	8012b44 <_dtoa_r+0x9dc>
 8012b3e:	d1de      	bne.n	8012afe <_dtoa_r+0x996>
 8012b40:	07da      	lsls	r2, r3, #31
 8012b42:	d5dc      	bpl.n	8012afe <_dtoa_r+0x996>
 8012b44:	2b39      	cmp	r3, #57	; 0x39
 8012b46:	d1d8      	bne.n	8012afa <_dtoa_r+0x992>
 8012b48:	9a02      	ldr	r2, [sp, #8]
 8012b4a:	2339      	movs	r3, #57	; 0x39
 8012b4c:	7013      	strb	r3, [r2, #0]
 8012b4e:	4643      	mov	r3, r8
 8012b50:	4698      	mov	r8, r3
 8012b52:	3b01      	subs	r3, #1
 8012b54:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012b58:	2a39      	cmp	r2, #57	; 0x39
 8012b5a:	d051      	beq.n	8012c00 <_dtoa_r+0xa98>
 8012b5c:	3201      	adds	r2, #1
 8012b5e:	701a      	strb	r2, [r3, #0]
 8012b60:	e745      	b.n	80129ee <_dtoa_r+0x886>
 8012b62:	2a00      	cmp	r2, #0
 8012b64:	dd03      	ble.n	8012b6e <_dtoa_r+0xa06>
 8012b66:	2b39      	cmp	r3, #57	; 0x39
 8012b68:	d0ee      	beq.n	8012b48 <_dtoa_r+0x9e0>
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	e7c7      	b.n	8012afe <_dtoa_r+0x996>
 8012b6e:	9a05      	ldr	r2, [sp, #20]
 8012b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b72:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012b76:	428a      	cmp	r2, r1
 8012b78:	d02b      	beq.n	8012bd2 <_dtoa_r+0xa6a>
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	220a      	movs	r2, #10
 8012b80:	4630      	mov	r0, r6
 8012b82:	f000 fe85 	bl	8013890 <__multadd>
 8012b86:	45b9      	cmp	r9, r7
 8012b88:	4605      	mov	r5, r0
 8012b8a:	f04f 0300 	mov.w	r3, #0
 8012b8e:	f04f 020a 	mov.w	r2, #10
 8012b92:	4649      	mov	r1, r9
 8012b94:	4630      	mov	r0, r6
 8012b96:	d107      	bne.n	8012ba8 <_dtoa_r+0xa40>
 8012b98:	f000 fe7a 	bl	8013890 <__multadd>
 8012b9c:	4681      	mov	r9, r0
 8012b9e:	4607      	mov	r7, r0
 8012ba0:	9b05      	ldr	r3, [sp, #20]
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	9305      	str	r3, [sp, #20]
 8012ba6:	e774      	b.n	8012a92 <_dtoa_r+0x92a>
 8012ba8:	f000 fe72 	bl	8013890 <__multadd>
 8012bac:	4639      	mov	r1, r7
 8012bae:	4681      	mov	r9, r0
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	220a      	movs	r2, #10
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	f000 fe6b 	bl	8013890 <__multadd>
 8012bba:	4607      	mov	r7, r0
 8012bbc:	e7f0      	b.n	8012ba0 <_dtoa_r+0xa38>
 8012bbe:	f1ba 0f00 	cmp.w	sl, #0
 8012bc2:	9a00      	ldr	r2, [sp, #0]
 8012bc4:	bfcc      	ite	gt
 8012bc6:	46d0      	movgt	r8, sl
 8012bc8:	f04f 0801 	movle.w	r8, #1
 8012bcc:	4490      	add	r8, r2
 8012bce:	f04f 0900 	mov.w	r9, #0
 8012bd2:	4629      	mov	r1, r5
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	9302      	str	r3, [sp, #8]
 8012bda:	f001 f853 	bl	8013c84 <__lshift>
 8012bde:	4621      	mov	r1, r4
 8012be0:	4605      	mov	r5, r0
 8012be2:	f001 f8bb 	bl	8013d5c <__mcmp>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	dcb1      	bgt.n	8012b4e <_dtoa_r+0x9e6>
 8012bea:	d102      	bne.n	8012bf2 <_dtoa_r+0xa8a>
 8012bec:	9b02      	ldr	r3, [sp, #8]
 8012bee:	07db      	lsls	r3, r3, #31
 8012bf0:	d4ad      	bmi.n	8012b4e <_dtoa_r+0x9e6>
 8012bf2:	4643      	mov	r3, r8
 8012bf4:	4698      	mov	r8, r3
 8012bf6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bfa:	2a30      	cmp	r2, #48	; 0x30
 8012bfc:	d0fa      	beq.n	8012bf4 <_dtoa_r+0xa8c>
 8012bfe:	e6f6      	b.n	80129ee <_dtoa_r+0x886>
 8012c00:	9a00      	ldr	r2, [sp, #0]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d1a4      	bne.n	8012b50 <_dtoa_r+0x9e8>
 8012c06:	f10b 0b01 	add.w	fp, fp, #1
 8012c0a:	2331      	movs	r3, #49	; 0x31
 8012c0c:	e778      	b.n	8012b00 <_dtoa_r+0x998>
 8012c0e:	4b15      	ldr	r3, [pc, #84]	; (8012c64 <_dtoa_r+0xafc>)
 8012c10:	f7ff bb12 	b.w	8012238 <_dtoa_r+0xd0>
 8012c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f47f aaee 	bne.w	80121f8 <_dtoa_r+0x90>
 8012c1c:	4b12      	ldr	r3, [pc, #72]	; (8012c68 <_dtoa_r+0xb00>)
 8012c1e:	f7ff bb0b 	b.w	8012238 <_dtoa_r+0xd0>
 8012c22:	f1ba 0f00 	cmp.w	sl, #0
 8012c26:	dc03      	bgt.n	8012c30 <_dtoa_r+0xac8>
 8012c28:	9b07      	ldr	r3, [sp, #28]
 8012c2a:	2b02      	cmp	r3, #2
 8012c2c:	f73f aec7 	bgt.w	80129be <_dtoa_r+0x856>
 8012c30:	f8dd 8000 	ldr.w	r8, [sp]
 8012c34:	4621      	mov	r1, r4
 8012c36:	4628      	mov	r0, r5
 8012c38:	f7ff fa0b 	bl	8012052 <quorem>
 8012c3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012c40:	f808 3b01 	strb.w	r3, [r8], #1
 8012c44:	9a00      	ldr	r2, [sp, #0]
 8012c46:	eba8 0202 	sub.w	r2, r8, r2
 8012c4a:	4592      	cmp	sl, r2
 8012c4c:	ddb7      	ble.n	8012bbe <_dtoa_r+0xa56>
 8012c4e:	4629      	mov	r1, r5
 8012c50:	2300      	movs	r3, #0
 8012c52:	220a      	movs	r2, #10
 8012c54:	4630      	mov	r0, r6
 8012c56:	f000 fe1b 	bl	8013890 <__multadd>
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	e7ea      	b.n	8012c34 <_dtoa_r+0xacc>
 8012c5e:	bf00      	nop
 8012c60:	0801d704 	.word	0x0801d704
 8012c64:	0801d505 	.word	0x0801d505
 8012c68:	0801d681 	.word	0x0801d681

08012c6c <__sflush_r>:
 8012c6c:	898a      	ldrh	r2, [r1, #12]
 8012c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c72:	4605      	mov	r5, r0
 8012c74:	0710      	lsls	r0, r2, #28
 8012c76:	460c      	mov	r4, r1
 8012c78:	d458      	bmi.n	8012d2c <__sflush_r+0xc0>
 8012c7a:	684b      	ldr	r3, [r1, #4]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	dc05      	bgt.n	8012c8c <__sflush_r+0x20>
 8012c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	dc02      	bgt.n	8012c8c <__sflush_r+0x20>
 8012c86:	2000      	movs	r0, #0
 8012c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c8e:	2e00      	cmp	r6, #0
 8012c90:	d0f9      	beq.n	8012c86 <__sflush_r+0x1a>
 8012c92:	2300      	movs	r3, #0
 8012c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c98:	682f      	ldr	r7, [r5, #0]
 8012c9a:	602b      	str	r3, [r5, #0]
 8012c9c:	d032      	beq.n	8012d04 <__sflush_r+0x98>
 8012c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ca0:	89a3      	ldrh	r3, [r4, #12]
 8012ca2:	075a      	lsls	r2, r3, #29
 8012ca4:	d505      	bpl.n	8012cb2 <__sflush_r+0x46>
 8012ca6:	6863      	ldr	r3, [r4, #4]
 8012ca8:	1ac0      	subs	r0, r0, r3
 8012caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cac:	b10b      	cbz	r3, 8012cb2 <__sflush_r+0x46>
 8012cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cb0:	1ac0      	subs	r0, r0, r3
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cb8:	6a21      	ldr	r1, [r4, #32]
 8012cba:	4628      	mov	r0, r5
 8012cbc:	47b0      	blx	r6
 8012cbe:	1c43      	adds	r3, r0, #1
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	d106      	bne.n	8012cd2 <__sflush_r+0x66>
 8012cc4:	6829      	ldr	r1, [r5, #0]
 8012cc6:	291d      	cmp	r1, #29
 8012cc8:	d82c      	bhi.n	8012d24 <__sflush_r+0xb8>
 8012cca:	4a2a      	ldr	r2, [pc, #168]	; (8012d74 <__sflush_r+0x108>)
 8012ccc:	40ca      	lsrs	r2, r1
 8012cce:	07d6      	lsls	r6, r2, #31
 8012cd0:	d528      	bpl.n	8012d24 <__sflush_r+0xb8>
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	6062      	str	r2, [r4, #4]
 8012cd6:	04d9      	lsls	r1, r3, #19
 8012cd8:	6922      	ldr	r2, [r4, #16]
 8012cda:	6022      	str	r2, [r4, #0]
 8012cdc:	d504      	bpl.n	8012ce8 <__sflush_r+0x7c>
 8012cde:	1c42      	adds	r2, r0, #1
 8012ce0:	d101      	bne.n	8012ce6 <__sflush_r+0x7a>
 8012ce2:	682b      	ldr	r3, [r5, #0]
 8012ce4:	b903      	cbnz	r3, 8012ce8 <__sflush_r+0x7c>
 8012ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8012ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cea:	602f      	str	r7, [r5, #0]
 8012cec:	2900      	cmp	r1, #0
 8012cee:	d0ca      	beq.n	8012c86 <__sflush_r+0x1a>
 8012cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cf4:	4299      	cmp	r1, r3
 8012cf6:	d002      	beq.n	8012cfe <__sflush_r+0x92>
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f7fd f8fd 	bl	800fef8 <_free_r>
 8012cfe:	2000      	movs	r0, #0
 8012d00:	6360      	str	r0, [r4, #52]	; 0x34
 8012d02:	e7c1      	b.n	8012c88 <__sflush_r+0x1c>
 8012d04:	6a21      	ldr	r1, [r4, #32]
 8012d06:	2301      	movs	r3, #1
 8012d08:	4628      	mov	r0, r5
 8012d0a:	47b0      	blx	r6
 8012d0c:	1c41      	adds	r1, r0, #1
 8012d0e:	d1c7      	bne.n	8012ca0 <__sflush_r+0x34>
 8012d10:	682b      	ldr	r3, [r5, #0]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d0c4      	beq.n	8012ca0 <__sflush_r+0x34>
 8012d16:	2b1d      	cmp	r3, #29
 8012d18:	d001      	beq.n	8012d1e <__sflush_r+0xb2>
 8012d1a:	2b16      	cmp	r3, #22
 8012d1c:	d101      	bne.n	8012d22 <__sflush_r+0xb6>
 8012d1e:	602f      	str	r7, [r5, #0]
 8012d20:	e7b1      	b.n	8012c86 <__sflush_r+0x1a>
 8012d22:	89a3      	ldrh	r3, [r4, #12]
 8012d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d28:	81a3      	strh	r3, [r4, #12]
 8012d2a:	e7ad      	b.n	8012c88 <__sflush_r+0x1c>
 8012d2c:	690f      	ldr	r7, [r1, #16]
 8012d2e:	2f00      	cmp	r7, #0
 8012d30:	d0a9      	beq.n	8012c86 <__sflush_r+0x1a>
 8012d32:	0793      	lsls	r3, r2, #30
 8012d34:	680e      	ldr	r6, [r1, #0]
 8012d36:	bf08      	it	eq
 8012d38:	694b      	ldreq	r3, [r1, #20]
 8012d3a:	600f      	str	r7, [r1, #0]
 8012d3c:	bf18      	it	ne
 8012d3e:	2300      	movne	r3, #0
 8012d40:	eba6 0807 	sub.w	r8, r6, r7
 8012d44:	608b      	str	r3, [r1, #8]
 8012d46:	f1b8 0f00 	cmp.w	r8, #0
 8012d4a:	dd9c      	ble.n	8012c86 <__sflush_r+0x1a>
 8012d4c:	6a21      	ldr	r1, [r4, #32]
 8012d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d50:	4643      	mov	r3, r8
 8012d52:	463a      	mov	r2, r7
 8012d54:	4628      	mov	r0, r5
 8012d56:	47b0      	blx	r6
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	dc06      	bgt.n	8012d6a <__sflush_r+0xfe>
 8012d5c:	89a3      	ldrh	r3, [r4, #12]
 8012d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d62:	81a3      	strh	r3, [r4, #12]
 8012d64:	f04f 30ff 	mov.w	r0, #4294967295
 8012d68:	e78e      	b.n	8012c88 <__sflush_r+0x1c>
 8012d6a:	4407      	add	r7, r0
 8012d6c:	eba8 0800 	sub.w	r8, r8, r0
 8012d70:	e7e9      	b.n	8012d46 <__sflush_r+0xda>
 8012d72:	bf00      	nop
 8012d74:	20400001 	.word	0x20400001

08012d78 <_fflush_r>:
 8012d78:	b538      	push	{r3, r4, r5, lr}
 8012d7a:	690b      	ldr	r3, [r1, #16]
 8012d7c:	4605      	mov	r5, r0
 8012d7e:	460c      	mov	r4, r1
 8012d80:	b913      	cbnz	r3, 8012d88 <_fflush_r+0x10>
 8012d82:	2500      	movs	r5, #0
 8012d84:	4628      	mov	r0, r5
 8012d86:	bd38      	pop	{r3, r4, r5, pc}
 8012d88:	b118      	cbz	r0, 8012d92 <_fflush_r+0x1a>
 8012d8a:	6983      	ldr	r3, [r0, #24]
 8012d8c:	b90b      	cbnz	r3, 8012d92 <_fflush_r+0x1a>
 8012d8e:	f000 f887 	bl	8012ea0 <__sinit>
 8012d92:	4b14      	ldr	r3, [pc, #80]	; (8012de4 <_fflush_r+0x6c>)
 8012d94:	429c      	cmp	r4, r3
 8012d96:	d11b      	bne.n	8012dd0 <_fflush_r+0x58>
 8012d98:	686c      	ldr	r4, [r5, #4]
 8012d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d0ef      	beq.n	8012d82 <_fflush_r+0xa>
 8012da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012da4:	07d0      	lsls	r0, r2, #31
 8012da6:	d404      	bmi.n	8012db2 <_fflush_r+0x3a>
 8012da8:	0599      	lsls	r1, r3, #22
 8012daa:	d402      	bmi.n	8012db2 <_fflush_r+0x3a>
 8012dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dae:	f000 fc88 	bl	80136c2 <__retarget_lock_acquire_recursive>
 8012db2:	4628      	mov	r0, r5
 8012db4:	4621      	mov	r1, r4
 8012db6:	f7ff ff59 	bl	8012c6c <__sflush_r>
 8012dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012dbc:	07da      	lsls	r2, r3, #31
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	d4e0      	bmi.n	8012d84 <_fflush_r+0xc>
 8012dc2:	89a3      	ldrh	r3, [r4, #12]
 8012dc4:	059b      	lsls	r3, r3, #22
 8012dc6:	d4dd      	bmi.n	8012d84 <_fflush_r+0xc>
 8012dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dca:	f000 fc7b 	bl	80136c4 <__retarget_lock_release_recursive>
 8012dce:	e7d9      	b.n	8012d84 <_fflush_r+0xc>
 8012dd0:	4b05      	ldr	r3, [pc, #20]	; (8012de8 <_fflush_r+0x70>)
 8012dd2:	429c      	cmp	r4, r3
 8012dd4:	d101      	bne.n	8012dda <_fflush_r+0x62>
 8012dd6:	68ac      	ldr	r4, [r5, #8]
 8012dd8:	e7df      	b.n	8012d9a <_fflush_r+0x22>
 8012dda:	4b04      	ldr	r3, [pc, #16]	; (8012dec <_fflush_r+0x74>)
 8012ddc:	429c      	cmp	r4, r3
 8012dde:	bf08      	it	eq
 8012de0:	68ec      	ldreq	r4, [r5, #12]
 8012de2:	e7da      	b.n	8012d9a <_fflush_r+0x22>
 8012de4:	0801d738 	.word	0x0801d738
 8012de8:	0801d758 	.word	0x0801d758
 8012dec:	0801d718 	.word	0x0801d718

08012df0 <std>:
 8012df0:	2300      	movs	r3, #0
 8012df2:	b510      	push	{r4, lr}
 8012df4:	4604      	mov	r4, r0
 8012df6:	e9c0 3300 	strd	r3, r3, [r0]
 8012dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012dfe:	6083      	str	r3, [r0, #8]
 8012e00:	8181      	strh	r1, [r0, #12]
 8012e02:	6643      	str	r3, [r0, #100]	; 0x64
 8012e04:	81c2      	strh	r2, [r0, #14]
 8012e06:	6183      	str	r3, [r0, #24]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	2208      	movs	r2, #8
 8012e0c:	305c      	adds	r0, #92	; 0x5c
 8012e0e:	f7fd f86b 	bl	800fee8 <memset>
 8012e12:	4b05      	ldr	r3, [pc, #20]	; (8012e28 <std+0x38>)
 8012e14:	6263      	str	r3, [r4, #36]	; 0x24
 8012e16:	4b05      	ldr	r3, [pc, #20]	; (8012e2c <std+0x3c>)
 8012e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e1a:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <std+0x40>)
 8012e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e1e:	4b05      	ldr	r3, [pc, #20]	; (8012e34 <std+0x44>)
 8012e20:	6224      	str	r4, [r4, #32]
 8012e22:	6323      	str	r3, [r4, #48]	; 0x30
 8012e24:	bd10      	pop	{r4, pc}
 8012e26:	bf00      	nop
 8012e28:	08014501 	.word	0x08014501
 8012e2c:	08014523 	.word	0x08014523
 8012e30:	0801455b 	.word	0x0801455b
 8012e34:	0801457f 	.word	0x0801457f

08012e38 <_cleanup_r>:
 8012e38:	4901      	ldr	r1, [pc, #4]	; (8012e40 <_cleanup_r+0x8>)
 8012e3a:	f000 b8af 	b.w	8012f9c <_fwalk_reent>
 8012e3e:	bf00      	nop
 8012e40:	08012d79 	.word	0x08012d79

08012e44 <__sfmoreglue>:
 8012e44:	b570      	push	{r4, r5, r6, lr}
 8012e46:	1e4a      	subs	r2, r1, #1
 8012e48:	2568      	movs	r5, #104	; 0x68
 8012e4a:	4355      	muls	r5, r2
 8012e4c:	460e      	mov	r6, r1
 8012e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e52:	f7fd f8a1 	bl	800ff98 <_malloc_r>
 8012e56:	4604      	mov	r4, r0
 8012e58:	b140      	cbz	r0, 8012e6c <__sfmoreglue+0x28>
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8012e60:	300c      	adds	r0, #12
 8012e62:	60a0      	str	r0, [r4, #8]
 8012e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e68:	f7fd f83e 	bl	800fee8 <memset>
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}

08012e70 <__sfp_lock_acquire>:
 8012e70:	4801      	ldr	r0, [pc, #4]	; (8012e78 <__sfp_lock_acquire+0x8>)
 8012e72:	f000 bc26 	b.w	80136c2 <__retarget_lock_acquire_recursive>
 8012e76:	bf00      	nop
 8012e78:	2400f698 	.word	0x2400f698

08012e7c <__sfp_lock_release>:
 8012e7c:	4801      	ldr	r0, [pc, #4]	; (8012e84 <__sfp_lock_release+0x8>)
 8012e7e:	f000 bc21 	b.w	80136c4 <__retarget_lock_release_recursive>
 8012e82:	bf00      	nop
 8012e84:	2400f698 	.word	0x2400f698

08012e88 <__sinit_lock_acquire>:
 8012e88:	4801      	ldr	r0, [pc, #4]	; (8012e90 <__sinit_lock_acquire+0x8>)
 8012e8a:	f000 bc1a 	b.w	80136c2 <__retarget_lock_acquire_recursive>
 8012e8e:	bf00      	nop
 8012e90:	2400f693 	.word	0x2400f693

08012e94 <__sinit_lock_release>:
 8012e94:	4801      	ldr	r0, [pc, #4]	; (8012e9c <__sinit_lock_release+0x8>)
 8012e96:	f000 bc15 	b.w	80136c4 <__retarget_lock_release_recursive>
 8012e9a:	bf00      	nop
 8012e9c:	2400f693 	.word	0x2400f693

08012ea0 <__sinit>:
 8012ea0:	b510      	push	{r4, lr}
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	f7ff fff0 	bl	8012e88 <__sinit_lock_acquire>
 8012ea8:	69a3      	ldr	r3, [r4, #24]
 8012eaa:	b11b      	cbz	r3, 8012eb4 <__sinit+0x14>
 8012eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eb0:	f7ff bff0 	b.w	8012e94 <__sinit_lock_release>
 8012eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8012eba:	4b13      	ldr	r3, [pc, #76]	; (8012f08 <__sinit+0x68>)
 8012ebc:	4a13      	ldr	r2, [pc, #76]	; (8012f0c <__sinit+0x6c>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ec2:	42a3      	cmp	r3, r4
 8012ec4:	bf04      	itt	eq
 8012ec6:	2301      	moveq	r3, #1
 8012ec8:	61a3      	streq	r3, [r4, #24]
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f000 f820 	bl	8012f10 <__sfp>
 8012ed0:	6060      	str	r0, [r4, #4]
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f000 f81c 	bl	8012f10 <__sfp>
 8012ed8:	60a0      	str	r0, [r4, #8]
 8012eda:	4620      	mov	r0, r4
 8012edc:	f000 f818 	bl	8012f10 <__sfp>
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	60e0      	str	r0, [r4, #12]
 8012ee4:	2104      	movs	r1, #4
 8012ee6:	6860      	ldr	r0, [r4, #4]
 8012ee8:	f7ff ff82 	bl	8012df0 <std>
 8012eec:	68a0      	ldr	r0, [r4, #8]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	2109      	movs	r1, #9
 8012ef2:	f7ff ff7d 	bl	8012df0 <std>
 8012ef6:	68e0      	ldr	r0, [r4, #12]
 8012ef8:	2202      	movs	r2, #2
 8012efa:	2112      	movs	r1, #18
 8012efc:	f7ff ff78 	bl	8012df0 <std>
 8012f00:	2301      	movs	r3, #1
 8012f02:	61a3      	str	r3, [r4, #24]
 8012f04:	e7d2      	b.n	8012eac <__sinit+0xc>
 8012f06:	bf00      	nop
 8012f08:	0801d4e0 	.word	0x0801d4e0
 8012f0c:	08012e39 	.word	0x08012e39

08012f10 <__sfp>:
 8012f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f12:	4607      	mov	r7, r0
 8012f14:	f7ff ffac 	bl	8012e70 <__sfp_lock_acquire>
 8012f18:	4b1e      	ldr	r3, [pc, #120]	; (8012f94 <__sfp+0x84>)
 8012f1a:	681e      	ldr	r6, [r3, #0]
 8012f1c:	69b3      	ldr	r3, [r6, #24]
 8012f1e:	b913      	cbnz	r3, 8012f26 <__sfp+0x16>
 8012f20:	4630      	mov	r0, r6
 8012f22:	f7ff ffbd 	bl	8012ea0 <__sinit>
 8012f26:	3648      	adds	r6, #72	; 0x48
 8012f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	d503      	bpl.n	8012f38 <__sfp+0x28>
 8012f30:	6833      	ldr	r3, [r6, #0]
 8012f32:	b30b      	cbz	r3, 8012f78 <__sfp+0x68>
 8012f34:	6836      	ldr	r6, [r6, #0]
 8012f36:	e7f7      	b.n	8012f28 <__sfp+0x18>
 8012f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f3c:	b9d5      	cbnz	r5, 8012f74 <__sfp+0x64>
 8012f3e:	4b16      	ldr	r3, [pc, #88]	; (8012f98 <__sfp+0x88>)
 8012f40:	60e3      	str	r3, [r4, #12]
 8012f42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f46:	6665      	str	r5, [r4, #100]	; 0x64
 8012f48:	f000 fbba 	bl	80136c0 <__retarget_lock_init_recursive>
 8012f4c:	f7ff ff96 	bl	8012e7c <__sfp_lock_release>
 8012f50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f58:	6025      	str	r5, [r4, #0]
 8012f5a:	61a5      	str	r5, [r4, #24]
 8012f5c:	2208      	movs	r2, #8
 8012f5e:	4629      	mov	r1, r5
 8012f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f64:	f7fc ffc0 	bl	800fee8 <memset>
 8012f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f70:	4620      	mov	r0, r4
 8012f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f74:	3468      	adds	r4, #104	; 0x68
 8012f76:	e7d9      	b.n	8012f2c <__sfp+0x1c>
 8012f78:	2104      	movs	r1, #4
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	f7ff ff62 	bl	8012e44 <__sfmoreglue>
 8012f80:	4604      	mov	r4, r0
 8012f82:	6030      	str	r0, [r6, #0]
 8012f84:	2800      	cmp	r0, #0
 8012f86:	d1d5      	bne.n	8012f34 <__sfp+0x24>
 8012f88:	f7ff ff78 	bl	8012e7c <__sfp_lock_release>
 8012f8c:	230c      	movs	r3, #12
 8012f8e:	603b      	str	r3, [r7, #0]
 8012f90:	e7ee      	b.n	8012f70 <__sfp+0x60>
 8012f92:	bf00      	nop
 8012f94:	0801d4e0 	.word	0x0801d4e0
 8012f98:	ffff0001 	.word	0xffff0001

08012f9c <_fwalk_reent>:
 8012f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fa0:	4606      	mov	r6, r0
 8012fa2:	4688      	mov	r8, r1
 8012fa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fa8:	2700      	movs	r7, #0
 8012faa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fae:	f1b9 0901 	subs.w	r9, r9, #1
 8012fb2:	d505      	bpl.n	8012fc0 <_fwalk_reent+0x24>
 8012fb4:	6824      	ldr	r4, [r4, #0]
 8012fb6:	2c00      	cmp	r4, #0
 8012fb8:	d1f7      	bne.n	8012faa <_fwalk_reent+0xe>
 8012fba:	4638      	mov	r0, r7
 8012fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fc0:	89ab      	ldrh	r3, [r5, #12]
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d907      	bls.n	8012fd6 <_fwalk_reent+0x3a>
 8012fc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	d003      	beq.n	8012fd6 <_fwalk_reent+0x3a>
 8012fce:	4629      	mov	r1, r5
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	47c0      	blx	r8
 8012fd4:	4307      	orrs	r7, r0
 8012fd6:	3568      	adds	r5, #104	; 0x68
 8012fd8:	e7e9      	b.n	8012fae <_fwalk_reent+0x12>

08012fda <rshift>:
 8012fda:	6903      	ldr	r3, [r0, #16]
 8012fdc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fe4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012fe8:	f100 0414 	add.w	r4, r0, #20
 8012fec:	dd45      	ble.n	801307a <rshift+0xa0>
 8012fee:	f011 011f 	ands.w	r1, r1, #31
 8012ff2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012ff6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012ffa:	d10c      	bne.n	8013016 <rshift+0x3c>
 8012ffc:	f100 0710 	add.w	r7, r0, #16
 8013000:	4629      	mov	r1, r5
 8013002:	42b1      	cmp	r1, r6
 8013004:	d334      	bcc.n	8013070 <rshift+0x96>
 8013006:	1a9b      	subs	r3, r3, r2
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	1eea      	subs	r2, r5, #3
 801300c:	4296      	cmp	r6, r2
 801300e:	bf38      	it	cc
 8013010:	2300      	movcc	r3, #0
 8013012:	4423      	add	r3, r4
 8013014:	e015      	b.n	8013042 <rshift+0x68>
 8013016:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801301a:	f1c1 0820 	rsb	r8, r1, #32
 801301e:	40cf      	lsrs	r7, r1
 8013020:	f105 0e04 	add.w	lr, r5, #4
 8013024:	46a1      	mov	r9, r4
 8013026:	4576      	cmp	r6, lr
 8013028:	46f4      	mov	ip, lr
 801302a:	d815      	bhi.n	8013058 <rshift+0x7e>
 801302c:	1a9b      	subs	r3, r3, r2
 801302e:	009a      	lsls	r2, r3, #2
 8013030:	3a04      	subs	r2, #4
 8013032:	3501      	adds	r5, #1
 8013034:	42ae      	cmp	r6, r5
 8013036:	bf38      	it	cc
 8013038:	2200      	movcc	r2, #0
 801303a:	18a3      	adds	r3, r4, r2
 801303c:	50a7      	str	r7, [r4, r2]
 801303e:	b107      	cbz	r7, 8013042 <rshift+0x68>
 8013040:	3304      	adds	r3, #4
 8013042:	1b1a      	subs	r2, r3, r4
 8013044:	42a3      	cmp	r3, r4
 8013046:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801304a:	bf08      	it	eq
 801304c:	2300      	moveq	r3, #0
 801304e:	6102      	str	r2, [r0, #16]
 8013050:	bf08      	it	eq
 8013052:	6143      	streq	r3, [r0, #20]
 8013054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013058:	f8dc c000 	ldr.w	ip, [ip]
 801305c:	fa0c fc08 	lsl.w	ip, ip, r8
 8013060:	ea4c 0707 	orr.w	r7, ip, r7
 8013064:	f849 7b04 	str.w	r7, [r9], #4
 8013068:	f85e 7b04 	ldr.w	r7, [lr], #4
 801306c:	40cf      	lsrs	r7, r1
 801306e:	e7da      	b.n	8013026 <rshift+0x4c>
 8013070:	f851 cb04 	ldr.w	ip, [r1], #4
 8013074:	f847 cf04 	str.w	ip, [r7, #4]!
 8013078:	e7c3      	b.n	8013002 <rshift+0x28>
 801307a:	4623      	mov	r3, r4
 801307c:	e7e1      	b.n	8013042 <rshift+0x68>

0801307e <__hexdig_fun>:
 801307e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013082:	2b09      	cmp	r3, #9
 8013084:	d802      	bhi.n	801308c <__hexdig_fun+0xe>
 8013086:	3820      	subs	r0, #32
 8013088:	b2c0      	uxtb	r0, r0
 801308a:	4770      	bx	lr
 801308c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013090:	2b05      	cmp	r3, #5
 8013092:	d801      	bhi.n	8013098 <__hexdig_fun+0x1a>
 8013094:	3847      	subs	r0, #71	; 0x47
 8013096:	e7f7      	b.n	8013088 <__hexdig_fun+0xa>
 8013098:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801309c:	2b05      	cmp	r3, #5
 801309e:	d801      	bhi.n	80130a4 <__hexdig_fun+0x26>
 80130a0:	3827      	subs	r0, #39	; 0x27
 80130a2:	e7f1      	b.n	8013088 <__hexdig_fun+0xa>
 80130a4:	2000      	movs	r0, #0
 80130a6:	4770      	bx	lr

080130a8 <__gethex>:
 80130a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ac:	ed2d 8b02 	vpush	{d8}
 80130b0:	b089      	sub	sp, #36	; 0x24
 80130b2:	ee08 0a10 	vmov	s16, r0
 80130b6:	9304      	str	r3, [sp, #16]
 80130b8:	4bbc      	ldr	r3, [pc, #752]	; (80133ac <__gethex+0x304>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	9301      	str	r3, [sp, #4]
 80130be:	4618      	mov	r0, r3
 80130c0:	468b      	mov	fp, r1
 80130c2:	4690      	mov	r8, r2
 80130c4:	f7ed f916 	bl	80002f4 <strlen>
 80130c8:	9b01      	ldr	r3, [sp, #4]
 80130ca:	f8db 2000 	ldr.w	r2, [fp]
 80130ce:	4403      	add	r3, r0
 80130d0:	4682      	mov	sl, r0
 80130d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80130d6:	9305      	str	r3, [sp, #20]
 80130d8:	1c93      	adds	r3, r2, #2
 80130da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80130de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80130e2:	32fe      	adds	r2, #254	; 0xfe
 80130e4:	18d1      	adds	r1, r2, r3
 80130e6:	461f      	mov	r7, r3
 80130e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80130ec:	9100      	str	r1, [sp, #0]
 80130ee:	2830      	cmp	r0, #48	; 0x30
 80130f0:	d0f8      	beq.n	80130e4 <__gethex+0x3c>
 80130f2:	f7ff ffc4 	bl	801307e <__hexdig_fun>
 80130f6:	4604      	mov	r4, r0
 80130f8:	2800      	cmp	r0, #0
 80130fa:	d13a      	bne.n	8013172 <__gethex+0xca>
 80130fc:	9901      	ldr	r1, [sp, #4]
 80130fe:	4652      	mov	r2, sl
 8013100:	4638      	mov	r0, r7
 8013102:	f7fe f83b 	bl	801117c <strncmp>
 8013106:	4605      	mov	r5, r0
 8013108:	2800      	cmp	r0, #0
 801310a:	d168      	bne.n	80131de <__gethex+0x136>
 801310c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013110:	eb07 060a 	add.w	r6, r7, sl
 8013114:	f7ff ffb3 	bl	801307e <__hexdig_fun>
 8013118:	2800      	cmp	r0, #0
 801311a:	d062      	beq.n	80131e2 <__gethex+0x13a>
 801311c:	4633      	mov	r3, r6
 801311e:	7818      	ldrb	r0, [r3, #0]
 8013120:	2830      	cmp	r0, #48	; 0x30
 8013122:	461f      	mov	r7, r3
 8013124:	f103 0301 	add.w	r3, r3, #1
 8013128:	d0f9      	beq.n	801311e <__gethex+0x76>
 801312a:	f7ff ffa8 	bl	801307e <__hexdig_fun>
 801312e:	2301      	movs	r3, #1
 8013130:	fab0 f480 	clz	r4, r0
 8013134:	0964      	lsrs	r4, r4, #5
 8013136:	4635      	mov	r5, r6
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	463a      	mov	r2, r7
 801313c:	4616      	mov	r6, r2
 801313e:	3201      	adds	r2, #1
 8013140:	7830      	ldrb	r0, [r6, #0]
 8013142:	f7ff ff9c 	bl	801307e <__hexdig_fun>
 8013146:	2800      	cmp	r0, #0
 8013148:	d1f8      	bne.n	801313c <__gethex+0x94>
 801314a:	9901      	ldr	r1, [sp, #4]
 801314c:	4652      	mov	r2, sl
 801314e:	4630      	mov	r0, r6
 8013150:	f7fe f814 	bl	801117c <strncmp>
 8013154:	b980      	cbnz	r0, 8013178 <__gethex+0xd0>
 8013156:	b94d      	cbnz	r5, 801316c <__gethex+0xc4>
 8013158:	eb06 050a 	add.w	r5, r6, sl
 801315c:	462a      	mov	r2, r5
 801315e:	4616      	mov	r6, r2
 8013160:	3201      	adds	r2, #1
 8013162:	7830      	ldrb	r0, [r6, #0]
 8013164:	f7ff ff8b 	bl	801307e <__hexdig_fun>
 8013168:	2800      	cmp	r0, #0
 801316a:	d1f8      	bne.n	801315e <__gethex+0xb6>
 801316c:	1bad      	subs	r5, r5, r6
 801316e:	00ad      	lsls	r5, r5, #2
 8013170:	e004      	b.n	801317c <__gethex+0xd4>
 8013172:	2400      	movs	r4, #0
 8013174:	4625      	mov	r5, r4
 8013176:	e7e0      	b.n	801313a <__gethex+0x92>
 8013178:	2d00      	cmp	r5, #0
 801317a:	d1f7      	bne.n	801316c <__gethex+0xc4>
 801317c:	7833      	ldrb	r3, [r6, #0]
 801317e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013182:	2b50      	cmp	r3, #80	; 0x50
 8013184:	d13b      	bne.n	80131fe <__gethex+0x156>
 8013186:	7873      	ldrb	r3, [r6, #1]
 8013188:	2b2b      	cmp	r3, #43	; 0x2b
 801318a:	d02c      	beq.n	80131e6 <__gethex+0x13e>
 801318c:	2b2d      	cmp	r3, #45	; 0x2d
 801318e:	d02e      	beq.n	80131ee <__gethex+0x146>
 8013190:	1c71      	adds	r1, r6, #1
 8013192:	f04f 0900 	mov.w	r9, #0
 8013196:	7808      	ldrb	r0, [r1, #0]
 8013198:	f7ff ff71 	bl	801307e <__hexdig_fun>
 801319c:	1e43      	subs	r3, r0, #1
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	2b18      	cmp	r3, #24
 80131a2:	d82c      	bhi.n	80131fe <__gethex+0x156>
 80131a4:	f1a0 0210 	sub.w	r2, r0, #16
 80131a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80131ac:	f7ff ff67 	bl	801307e <__hexdig_fun>
 80131b0:	1e43      	subs	r3, r0, #1
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	2b18      	cmp	r3, #24
 80131b6:	d91d      	bls.n	80131f4 <__gethex+0x14c>
 80131b8:	f1b9 0f00 	cmp.w	r9, #0
 80131bc:	d000      	beq.n	80131c0 <__gethex+0x118>
 80131be:	4252      	negs	r2, r2
 80131c0:	4415      	add	r5, r2
 80131c2:	f8cb 1000 	str.w	r1, [fp]
 80131c6:	b1e4      	cbz	r4, 8013202 <__gethex+0x15a>
 80131c8:	9b00      	ldr	r3, [sp, #0]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	bf14      	ite	ne
 80131ce:	2700      	movne	r7, #0
 80131d0:	2706      	moveq	r7, #6
 80131d2:	4638      	mov	r0, r7
 80131d4:	b009      	add	sp, #36	; 0x24
 80131d6:	ecbd 8b02 	vpop	{d8}
 80131da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131de:	463e      	mov	r6, r7
 80131e0:	4625      	mov	r5, r4
 80131e2:	2401      	movs	r4, #1
 80131e4:	e7ca      	b.n	801317c <__gethex+0xd4>
 80131e6:	f04f 0900 	mov.w	r9, #0
 80131ea:	1cb1      	adds	r1, r6, #2
 80131ec:	e7d3      	b.n	8013196 <__gethex+0xee>
 80131ee:	f04f 0901 	mov.w	r9, #1
 80131f2:	e7fa      	b.n	80131ea <__gethex+0x142>
 80131f4:	230a      	movs	r3, #10
 80131f6:	fb03 0202 	mla	r2, r3, r2, r0
 80131fa:	3a10      	subs	r2, #16
 80131fc:	e7d4      	b.n	80131a8 <__gethex+0x100>
 80131fe:	4631      	mov	r1, r6
 8013200:	e7df      	b.n	80131c2 <__gethex+0x11a>
 8013202:	1bf3      	subs	r3, r6, r7
 8013204:	3b01      	subs	r3, #1
 8013206:	4621      	mov	r1, r4
 8013208:	2b07      	cmp	r3, #7
 801320a:	dc0b      	bgt.n	8013224 <__gethex+0x17c>
 801320c:	ee18 0a10 	vmov	r0, s16
 8013210:	f000 fadc 	bl	80137cc <_Balloc>
 8013214:	4604      	mov	r4, r0
 8013216:	b940      	cbnz	r0, 801322a <__gethex+0x182>
 8013218:	4b65      	ldr	r3, [pc, #404]	; (80133b0 <__gethex+0x308>)
 801321a:	4602      	mov	r2, r0
 801321c:	21de      	movs	r1, #222	; 0xde
 801321e:	4865      	ldr	r0, [pc, #404]	; (80133b4 <__gethex+0x30c>)
 8013220:	f7fc fdd0 	bl	800fdc4 <__assert_func>
 8013224:	3101      	adds	r1, #1
 8013226:	105b      	asrs	r3, r3, #1
 8013228:	e7ee      	b.n	8013208 <__gethex+0x160>
 801322a:	f100 0914 	add.w	r9, r0, #20
 801322e:	f04f 0b00 	mov.w	fp, #0
 8013232:	f1ca 0301 	rsb	r3, sl, #1
 8013236:	f8cd 9008 	str.w	r9, [sp, #8]
 801323a:	f8cd b000 	str.w	fp, [sp]
 801323e:	9306      	str	r3, [sp, #24]
 8013240:	42b7      	cmp	r7, r6
 8013242:	d340      	bcc.n	80132c6 <__gethex+0x21e>
 8013244:	9802      	ldr	r0, [sp, #8]
 8013246:	9b00      	ldr	r3, [sp, #0]
 8013248:	f840 3b04 	str.w	r3, [r0], #4
 801324c:	eba0 0009 	sub.w	r0, r0, r9
 8013250:	1080      	asrs	r0, r0, #2
 8013252:	0146      	lsls	r6, r0, #5
 8013254:	6120      	str	r0, [r4, #16]
 8013256:	4618      	mov	r0, r3
 8013258:	f000 fbae 	bl	80139b8 <__hi0bits>
 801325c:	1a30      	subs	r0, r6, r0
 801325e:	f8d8 6000 	ldr.w	r6, [r8]
 8013262:	42b0      	cmp	r0, r6
 8013264:	dd63      	ble.n	801332e <__gethex+0x286>
 8013266:	1b87      	subs	r7, r0, r6
 8013268:	4639      	mov	r1, r7
 801326a:	4620      	mov	r0, r4
 801326c:	f000 ff49 	bl	8014102 <__any_on>
 8013270:	4682      	mov	sl, r0
 8013272:	b1a8      	cbz	r0, 80132a0 <__gethex+0x1f8>
 8013274:	1e7b      	subs	r3, r7, #1
 8013276:	1159      	asrs	r1, r3, #5
 8013278:	f003 021f 	and.w	r2, r3, #31
 801327c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013280:	f04f 0a01 	mov.w	sl, #1
 8013284:	fa0a f202 	lsl.w	r2, sl, r2
 8013288:	420a      	tst	r2, r1
 801328a:	d009      	beq.n	80132a0 <__gethex+0x1f8>
 801328c:	4553      	cmp	r3, sl
 801328e:	dd05      	ble.n	801329c <__gethex+0x1f4>
 8013290:	1eb9      	subs	r1, r7, #2
 8013292:	4620      	mov	r0, r4
 8013294:	f000 ff35 	bl	8014102 <__any_on>
 8013298:	2800      	cmp	r0, #0
 801329a:	d145      	bne.n	8013328 <__gethex+0x280>
 801329c:	f04f 0a02 	mov.w	sl, #2
 80132a0:	4639      	mov	r1, r7
 80132a2:	4620      	mov	r0, r4
 80132a4:	f7ff fe99 	bl	8012fda <rshift>
 80132a8:	443d      	add	r5, r7
 80132aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132ae:	42ab      	cmp	r3, r5
 80132b0:	da4c      	bge.n	801334c <__gethex+0x2a4>
 80132b2:	ee18 0a10 	vmov	r0, s16
 80132b6:	4621      	mov	r1, r4
 80132b8:	f000 fac8 	bl	801384c <_Bfree>
 80132bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80132be:	2300      	movs	r3, #0
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	27a3      	movs	r7, #163	; 0xa3
 80132c4:	e785      	b.n	80131d2 <__gethex+0x12a>
 80132c6:	1e73      	subs	r3, r6, #1
 80132c8:	9a05      	ldr	r2, [sp, #20]
 80132ca:	9303      	str	r3, [sp, #12]
 80132cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d019      	beq.n	8013308 <__gethex+0x260>
 80132d4:	f1bb 0f20 	cmp.w	fp, #32
 80132d8:	d107      	bne.n	80132ea <__gethex+0x242>
 80132da:	9b02      	ldr	r3, [sp, #8]
 80132dc:	9a00      	ldr	r2, [sp, #0]
 80132de:	f843 2b04 	str.w	r2, [r3], #4
 80132e2:	9302      	str	r3, [sp, #8]
 80132e4:	2300      	movs	r3, #0
 80132e6:	9300      	str	r3, [sp, #0]
 80132e8:	469b      	mov	fp, r3
 80132ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80132ee:	f7ff fec6 	bl	801307e <__hexdig_fun>
 80132f2:	9b00      	ldr	r3, [sp, #0]
 80132f4:	f000 000f 	and.w	r0, r0, #15
 80132f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80132fc:	4303      	orrs	r3, r0
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	f10b 0b04 	add.w	fp, fp, #4
 8013304:	9b03      	ldr	r3, [sp, #12]
 8013306:	e00d      	b.n	8013324 <__gethex+0x27c>
 8013308:	9b03      	ldr	r3, [sp, #12]
 801330a:	9a06      	ldr	r2, [sp, #24]
 801330c:	4413      	add	r3, r2
 801330e:	42bb      	cmp	r3, r7
 8013310:	d3e0      	bcc.n	80132d4 <__gethex+0x22c>
 8013312:	4618      	mov	r0, r3
 8013314:	9901      	ldr	r1, [sp, #4]
 8013316:	9307      	str	r3, [sp, #28]
 8013318:	4652      	mov	r2, sl
 801331a:	f7fd ff2f 	bl	801117c <strncmp>
 801331e:	9b07      	ldr	r3, [sp, #28]
 8013320:	2800      	cmp	r0, #0
 8013322:	d1d7      	bne.n	80132d4 <__gethex+0x22c>
 8013324:	461e      	mov	r6, r3
 8013326:	e78b      	b.n	8013240 <__gethex+0x198>
 8013328:	f04f 0a03 	mov.w	sl, #3
 801332c:	e7b8      	b.n	80132a0 <__gethex+0x1f8>
 801332e:	da0a      	bge.n	8013346 <__gethex+0x29e>
 8013330:	1a37      	subs	r7, r6, r0
 8013332:	4621      	mov	r1, r4
 8013334:	ee18 0a10 	vmov	r0, s16
 8013338:	463a      	mov	r2, r7
 801333a:	f000 fca3 	bl	8013c84 <__lshift>
 801333e:	1bed      	subs	r5, r5, r7
 8013340:	4604      	mov	r4, r0
 8013342:	f100 0914 	add.w	r9, r0, #20
 8013346:	f04f 0a00 	mov.w	sl, #0
 801334a:	e7ae      	b.n	80132aa <__gethex+0x202>
 801334c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013350:	42a8      	cmp	r0, r5
 8013352:	dd72      	ble.n	801343a <__gethex+0x392>
 8013354:	1b45      	subs	r5, r0, r5
 8013356:	42ae      	cmp	r6, r5
 8013358:	dc36      	bgt.n	80133c8 <__gethex+0x320>
 801335a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801335e:	2b02      	cmp	r3, #2
 8013360:	d02a      	beq.n	80133b8 <__gethex+0x310>
 8013362:	2b03      	cmp	r3, #3
 8013364:	d02c      	beq.n	80133c0 <__gethex+0x318>
 8013366:	2b01      	cmp	r3, #1
 8013368:	d115      	bne.n	8013396 <__gethex+0x2ee>
 801336a:	42ae      	cmp	r6, r5
 801336c:	d113      	bne.n	8013396 <__gethex+0x2ee>
 801336e:	2e01      	cmp	r6, #1
 8013370:	d10b      	bne.n	801338a <__gethex+0x2e2>
 8013372:	9a04      	ldr	r2, [sp, #16]
 8013374:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	2301      	movs	r3, #1
 801337c:	6123      	str	r3, [r4, #16]
 801337e:	f8c9 3000 	str.w	r3, [r9]
 8013382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013384:	2762      	movs	r7, #98	; 0x62
 8013386:	601c      	str	r4, [r3, #0]
 8013388:	e723      	b.n	80131d2 <__gethex+0x12a>
 801338a:	1e71      	subs	r1, r6, #1
 801338c:	4620      	mov	r0, r4
 801338e:	f000 feb8 	bl	8014102 <__any_on>
 8013392:	2800      	cmp	r0, #0
 8013394:	d1ed      	bne.n	8013372 <__gethex+0x2ca>
 8013396:	ee18 0a10 	vmov	r0, s16
 801339a:	4621      	mov	r1, r4
 801339c:	f000 fa56 	bl	801384c <_Bfree>
 80133a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133a2:	2300      	movs	r3, #0
 80133a4:	6013      	str	r3, [r2, #0]
 80133a6:	2750      	movs	r7, #80	; 0x50
 80133a8:	e713      	b.n	80131d2 <__gethex+0x12a>
 80133aa:	bf00      	nop
 80133ac:	0801d7e4 	.word	0x0801d7e4
 80133b0:	0801d704 	.word	0x0801d704
 80133b4:	0801d778 	.word	0x0801d778
 80133b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d1eb      	bne.n	8013396 <__gethex+0x2ee>
 80133be:	e7d8      	b.n	8013372 <__gethex+0x2ca>
 80133c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d1d5      	bne.n	8013372 <__gethex+0x2ca>
 80133c6:	e7e6      	b.n	8013396 <__gethex+0x2ee>
 80133c8:	1e6f      	subs	r7, r5, #1
 80133ca:	f1ba 0f00 	cmp.w	sl, #0
 80133ce:	d131      	bne.n	8013434 <__gethex+0x38c>
 80133d0:	b127      	cbz	r7, 80133dc <__gethex+0x334>
 80133d2:	4639      	mov	r1, r7
 80133d4:	4620      	mov	r0, r4
 80133d6:	f000 fe94 	bl	8014102 <__any_on>
 80133da:	4682      	mov	sl, r0
 80133dc:	117b      	asrs	r3, r7, #5
 80133de:	2101      	movs	r1, #1
 80133e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80133e4:	f007 071f 	and.w	r7, r7, #31
 80133e8:	fa01 f707 	lsl.w	r7, r1, r7
 80133ec:	421f      	tst	r7, r3
 80133ee:	4629      	mov	r1, r5
 80133f0:	4620      	mov	r0, r4
 80133f2:	bf18      	it	ne
 80133f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80133f8:	1b76      	subs	r6, r6, r5
 80133fa:	f7ff fdee 	bl	8012fda <rshift>
 80133fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013402:	2702      	movs	r7, #2
 8013404:	f1ba 0f00 	cmp.w	sl, #0
 8013408:	d048      	beq.n	801349c <__gethex+0x3f4>
 801340a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801340e:	2b02      	cmp	r3, #2
 8013410:	d015      	beq.n	801343e <__gethex+0x396>
 8013412:	2b03      	cmp	r3, #3
 8013414:	d017      	beq.n	8013446 <__gethex+0x39e>
 8013416:	2b01      	cmp	r3, #1
 8013418:	d109      	bne.n	801342e <__gethex+0x386>
 801341a:	f01a 0f02 	tst.w	sl, #2
 801341e:	d006      	beq.n	801342e <__gethex+0x386>
 8013420:	f8d9 0000 	ldr.w	r0, [r9]
 8013424:	ea4a 0a00 	orr.w	sl, sl, r0
 8013428:	f01a 0f01 	tst.w	sl, #1
 801342c:	d10e      	bne.n	801344c <__gethex+0x3a4>
 801342e:	f047 0710 	orr.w	r7, r7, #16
 8013432:	e033      	b.n	801349c <__gethex+0x3f4>
 8013434:	f04f 0a01 	mov.w	sl, #1
 8013438:	e7d0      	b.n	80133dc <__gethex+0x334>
 801343a:	2701      	movs	r7, #1
 801343c:	e7e2      	b.n	8013404 <__gethex+0x35c>
 801343e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013440:	f1c3 0301 	rsb	r3, r3, #1
 8013444:	9315      	str	r3, [sp, #84]	; 0x54
 8013446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013448:	2b00      	cmp	r3, #0
 801344a:	d0f0      	beq.n	801342e <__gethex+0x386>
 801344c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013450:	f104 0314 	add.w	r3, r4, #20
 8013454:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013458:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801345c:	f04f 0c00 	mov.w	ip, #0
 8013460:	4618      	mov	r0, r3
 8013462:	f853 2b04 	ldr.w	r2, [r3], #4
 8013466:	f1b2 3fff 	cmp.w	r2, #4294967295
 801346a:	d01c      	beq.n	80134a6 <__gethex+0x3fe>
 801346c:	3201      	adds	r2, #1
 801346e:	6002      	str	r2, [r0, #0]
 8013470:	2f02      	cmp	r7, #2
 8013472:	f104 0314 	add.w	r3, r4, #20
 8013476:	d13f      	bne.n	80134f8 <__gethex+0x450>
 8013478:	f8d8 2000 	ldr.w	r2, [r8]
 801347c:	3a01      	subs	r2, #1
 801347e:	42b2      	cmp	r2, r6
 8013480:	d10a      	bne.n	8013498 <__gethex+0x3f0>
 8013482:	1171      	asrs	r1, r6, #5
 8013484:	2201      	movs	r2, #1
 8013486:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801348a:	f006 061f 	and.w	r6, r6, #31
 801348e:	fa02 f606 	lsl.w	r6, r2, r6
 8013492:	421e      	tst	r6, r3
 8013494:	bf18      	it	ne
 8013496:	4617      	movne	r7, r2
 8013498:	f047 0720 	orr.w	r7, r7, #32
 801349c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801349e:	601c      	str	r4, [r3, #0]
 80134a0:	9b04      	ldr	r3, [sp, #16]
 80134a2:	601d      	str	r5, [r3, #0]
 80134a4:	e695      	b.n	80131d2 <__gethex+0x12a>
 80134a6:	4299      	cmp	r1, r3
 80134a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80134ac:	d8d8      	bhi.n	8013460 <__gethex+0x3b8>
 80134ae:	68a3      	ldr	r3, [r4, #8]
 80134b0:	459b      	cmp	fp, r3
 80134b2:	db19      	blt.n	80134e8 <__gethex+0x440>
 80134b4:	6861      	ldr	r1, [r4, #4]
 80134b6:	ee18 0a10 	vmov	r0, s16
 80134ba:	3101      	adds	r1, #1
 80134bc:	f000 f986 	bl	80137cc <_Balloc>
 80134c0:	4681      	mov	r9, r0
 80134c2:	b918      	cbnz	r0, 80134cc <__gethex+0x424>
 80134c4:	4b1a      	ldr	r3, [pc, #104]	; (8013530 <__gethex+0x488>)
 80134c6:	4602      	mov	r2, r0
 80134c8:	2184      	movs	r1, #132	; 0x84
 80134ca:	e6a8      	b.n	801321e <__gethex+0x176>
 80134cc:	6922      	ldr	r2, [r4, #16]
 80134ce:	3202      	adds	r2, #2
 80134d0:	f104 010c 	add.w	r1, r4, #12
 80134d4:	0092      	lsls	r2, r2, #2
 80134d6:	300c      	adds	r0, #12
 80134d8:	f7fc fcde 	bl	800fe98 <memcpy>
 80134dc:	4621      	mov	r1, r4
 80134de:	ee18 0a10 	vmov	r0, s16
 80134e2:	f000 f9b3 	bl	801384c <_Bfree>
 80134e6:	464c      	mov	r4, r9
 80134e8:	6923      	ldr	r3, [r4, #16]
 80134ea:	1c5a      	adds	r2, r3, #1
 80134ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80134f0:	6122      	str	r2, [r4, #16]
 80134f2:	2201      	movs	r2, #1
 80134f4:	615a      	str	r2, [r3, #20]
 80134f6:	e7bb      	b.n	8013470 <__gethex+0x3c8>
 80134f8:	6922      	ldr	r2, [r4, #16]
 80134fa:	455a      	cmp	r2, fp
 80134fc:	dd0b      	ble.n	8013516 <__gethex+0x46e>
 80134fe:	2101      	movs	r1, #1
 8013500:	4620      	mov	r0, r4
 8013502:	f7ff fd6a 	bl	8012fda <rshift>
 8013506:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801350a:	3501      	adds	r5, #1
 801350c:	42ab      	cmp	r3, r5
 801350e:	f6ff aed0 	blt.w	80132b2 <__gethex+0x20a>
 8013512:	2701      	movs	r7, #1
 8013514:	e7c0      	b.n	8013498 <__gethex+0x3f0>
 8013516:	f016 061f 	ands.w	r6, r6, #31
 801351a:	d0fa      	beq.n	8013512 <__gethex+0x46a>
 801351c:	449a      	add	sl, r3
 801351e:	f1c6 0620 	rsb	r6, r6, #32
 8013522:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013526:	f000 fa47 	bl	80139b8 <__hi0bits>
 801352a:	42b0      	cmp	r0, r6
 801352c:	dbe7      	blt.n	80134fe <__gethex+0x456>
 801352e:	e7f0      	b.n	8013512 <__gethex+0x46a>
 8013530:	0801d704 	.word	0x0801d704

08013534 <L_shift>:
 8013534:	f1c2 0208 	rsb	r2, r2, #8
 8013538:	0092      	lsls	r2, r2, #2
 801353a:	b570      	push	{r4, r5, r6, lr}
 801353c:	f1c2 0620 	rsb	r6, r2, #32
 8013540:	6843      	ldr	r3, [r0, #4]
 8013542:	6804      	ldr	r4, [r0, #0]
 8013544:	fa03 f506 	lsl.w	r5, r3, r6
 8013548:	432c      	orrs	r4, r5
 801354a:	40d3      	lsrs	r3, r2
 801354c:	6004      	str	r4, [r0, #0]
 801354e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013552:	4288      	cmp	r0, r1
 8013554:	d3f4      	bcc.n	8013540 <L_shift+0xc>
 8013556:	bd70      	pop	{r4, r5, r6, pc}

08013558 <__match>:
 8013558:	b530      	push	{r4, r5, lr}
 801355a:	6803      	ldr	r3, [r0, #0]
 801355c:	3301      	adds	r3, #1
 801355e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013562:	b914      	cbnz	r4, 801356a <__match+0x12>
 8013564:	6003      	str	r3, [r0, #0]
 8013566:	2001      	movs	r0, #1
 8013568:	bd30      	pop	{r4, r5, pc}
 801356a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801356e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013572:	2d19      	cmp	r5, #25
 8013574:	bf98      	it	ls
 8013576:	3220      	addls	r2, #32
 8013578:	42a2      	cmp	r2, r4
 801357a:	d0f0      	beq.n	801355e <__match+0x6>
 801357c:	2000      	movs	r0, #0
 801357e:	e7f3      	b.n	8013568 <__match+0x10>

08013580 <__hexnan>:
 8013580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013584:	680b      	ldr	r3, [r1, #0]
 8013586:	6801      	ldr	r1, [r0, #0]
 8013588:	115e      	asrs	r6, r3, #5
 801358a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801358e:	f013 031f 	ands.w	r3, r3, #31
 8013592:	b087      	sub	sp, #28
 8013594:	bf18      	it	ne
 8013596:	3604      	addne	r6, #4
 8013598:	2500      	movs	r5, #0
 801359a:	1f37      	subs	r7, r6, #4
 801359c:	4682      	mov	sl, r0
 801359e:	4690      	mov	r8, r2
 80135a0:	9301      	str	r3, [sp, #4]
 80135a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80135a6:	46b9      	mov	r9, r7
 80135a8:	463c      	mov	r4, r7
 80135aa:	9502      	str	r5, [sp, #8]
 80135ac:	46ab      	mov	fp, r5
 80135ae:	784a      	ldrb	r2, [r1, #1]
 80135b0:	1c4b      	adds	r3, r1, #1
 80135b2:	9303      	str	r3, [sp, #12]
 80135b4:	b342      	cbz	r2, 8013608 <__hexnan+0x88>
 80135b6:	4610      	mov	r0, r2
 80135b8:	9105      	str	r1, [sp, #20]
 80135ba:	9204      	str	r2, [sp, #16]
 80135bc:	f7ff fd5f 	bl	801307e <__hexdig_fun>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	d14f      	bne.n	8013664 <__hexnan+0xe4>
 80135c4:	9a04      	ldr	r2, [sp, #16]
 80135c6:	9905      	ldr	r1, [sp, #20]
 80135c8:	2a20      	cmp	r2, #32
 80135ca:	d818      	bhi.n	80135fe <__hexnan+0x7e>
 80135cc:	9b02      	ldr	r3, [sp, #8]
 80135ce:	459b      	cmp	fp, r3
 80135d0:	dd13      	ble.n	80135fa <__hexnan+0x7a>
 80135d2:	454c      	cmp	r4, r9
 80135d4:	d206      	bcs.n	80135e4 <__hexnan+0x64>
 80135d6:	2d07      	cmp	r5, #7
 80135d8:	dc04      	bgt.n	80135e4 <__hexnan+0x64>
 80135da:	462a      	mov	r2, r5
 80135dc:	4649      	mov	r1, r9
 80135de:	4620      	mov	r0, r4
 80135e0:	f7ff ffa8 	bl	8013534 <L_shift>
 80135e4:	4544      	cmp	r4, r8
 80135e6:	d950      	bls.n	801368a <__hexnan+0x10a>
 80135e8:	2300      	movs	r3, #0
 80135ea:	f1a4 0904 	sub.w	r9, r4, #4
 80135ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80135f2:	f8cd b008 	str.w	fp, [sp, #8]
 80135f6:	464c      	mov	r4, r9
 80135f8:	461d      	mov	r5, r3
 80135fa:	9903      	ldr	r1, [sp, #12]
 80135fc:	e7d7      	b.n	80135ae <__hexnan+0x2e>
 80135fe:	2a29      	cmp	r2, #41	; 0x29
 8013600:	d156      	bne.n	80136b0 <__hexnan+0x130>
 8013602:	3102      	adds	r1, #2
 8013604:	f8ca 1000 	str.w	r1, [sl]
 8013608:	f1bb 0f00 	cmp.w	fp, #0
 801360c:	d050      	beq.n	80136b0 <__hexnan+0x130>
 801360e:	454c      	cmp	r4, r9
 8013610:	d206      	bcs.n	8013620 <__hexnan+0xa0>
 8013612:	2d07      	cmp	r5, #7
 8013614:	dc04      	bgt.n	8013620 <__hexnan+0xa0>
 8013616:	462a      	mov	r2, r5
 8013618:	4649      	mov	r1, r9
 801361a:	4620      	mov	r0, r4
 801361c:	f7ff ff8a 	bl	8013534 <L_shift>
 8013620:	4544      	cmp	r4, r8
 8013622:	d934      	bls.n	801368e <__hexnan+0x10e>
 8013624:	f1a8 0204 	sub.w	r2, r8, #4
 8013628:	4623      	mov	r3, r4
 801362a:	f853 1b04 	ldr.w	r1, [r3], #4
 801362e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013632:	429f      	cmp	r7, r3
 8013634:	d2f9      	bcs.n	801362a <__hexnan+0xaa>
 8013636:	1b3b      	subs	r3, r7, r4
 8013638:	f023 0303 	bic.w	r3, r3, #3
 801363c:	3304      	adds	r3, #4
 801363e:	3401      	adds	r4, #1
 8013640:	3e03      	subs	r6, #3
 8013642:	42b4      	cmp	r4, r6
 8013644:	bf88      	it	hi
 8013646:	2304      	movhi	r3, #4
 8013648:	4443      	add	r3, r8
 801364a:	2200      	movs	r2, #0
 801364c:	f843 2b04 	str.w	r2, [r3], #4
 8013650:	429f      	cmp	r7, r3
 8013652:	d2fb      	bcs.n	801364c <__hexnan+0xcc>
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	b91b      	cbnz	r3, 8013660 <__hexnan+0xe0>
 8013658:	4547      	cmp	r7, r8
 801365a:	d127      	bne.n	80136ac <__hexnan+0x12c>
 801365c:	2301      	movs	r3, #1
 801365e:	603b      	str	r3, [r7, #0]
 8013660:	2005      	movs	r0, #5
 8013662:	e026      	b.n	80136b2 <__hexnan+0x132>
 8013664:	3501      	adds	r5, #1
 8013666:	2d08      	cmp	r5, #8
 8013668:	f10b 0b01 	add.w	fp, fp, #1
 801366c:	dd06      	ble.n	801367c <__hexnan+0xfc>
 801366e:	4544      	cmp	r4, r8
 8013670:	d9c3      	bls.n	80135fa <__hexnan+0x7a>
 8013672:	2300      	movs	r3, #0
 8013674:	f844 3c04 	str.w	r3, [r4, #-4]
 8013678:	2501      	movs	r5, #1
 801367a:	3c04      	subs	r4, #4
 801367c:	6822      	ldr	r2, [r4, #0]
 801367e:	f000 000f 	and.w	r0, r0, #15
 8013682:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013686:	6022      	str	r2, [r4, #0]
 8013688:	e7b7      	b.n	80135fa <__hexnan+0x7a>
 801368a:	2508      	movs	r5, #8
 801368c:	e7b5      	b.n	80135fa <__hexnan+0x7a>
 801368e:	9b01      	ldr	r3, [sp, #4]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d0df      	beq.n	8013654 <__hexnan+0xd4>
 8013694:	f04f 32ff 	mov.w	r2, #4294967295
 8013698:	f1c3 0320 	rsb	r3, r3, #32
 801369c:	fa22 f303 	lsr.w	r3, r2, r3
 80136a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80136a4:	401a      	ands	r2, r3
 80136a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80136aa:	e7d3      	b.n	8013654 <__hexnan+0xd4>
 80136ac:	3f04      	subs	r7, #4
 80136ae:	e7d1      	b.n	8013654 <__hexnan+0xd4>
 80136b0:	2004      	movs	r0, #4
 80136b2:	b007      	add	sp, #28
 80136b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080136b8 <_localeconv_r>:
 80136b8:	4800      	ldr	r0, [pc, #0]	; (80136bc <_localeconv_r+0x4>)
 80136ba:	4770      	bx	lr
 80136bc:	2400a240 	.word	0x2400a240

080136c0 <__retarget_lock_init_recursive>:
 80136c0:	4770      	bx	lr

080136c2 <__retarget_lock_acquire_recursive>:
 80136c2:	4770      	bx	lr

080136c4 <__retarget_lock_release_recursive>:
 80136c4:	4770      	bx	lr

080136c6 <__swhatbuf_r>:
 80136c6:	b570      	push	{r4, r5, r6, lr}
 80136c8:	460e      	mov	r6, r1
 80136ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ce:	2900      	cmp	r1, #0
 80136d0:	b096      	sub	sp, #88	; 0x58
 80136d2:	4614      	mov	r4, r2
 80136d4:	461d      	mov	r5, r3
 80136d6:	da07      	bge.n	80136e8 <__swhatbuf_r+0x22>
 80136d8:	2300      	movs	r3, #0
 80136da:	602b      	str	r3, [r5, #0]
 80136dc:	89b3      	ldrh	r3, [r6, #12]
 80136de:	061a      	lsls	r2, r3, #24
 80136e0:	d410      	bmi.n	8013704 <__swhatbuf_r+0x3e>
 80136e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136e6:	e00e      	b.n	8013706 <__swhatbuf_r+0x40>
 80136e8:	466a      	mov	r2, sp
 80136ea:	f000 ff7b 	bl	80145e4 <_fstat_r>
 80136ee:	2800      	cmp	r0, #0
 80136f0:	dbf2      	blt.n	80136d8 <__swhatbuf_r+0x12>
 80136f2:	9a01      	ldr	r2, [sp, #4]
 80136f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80136f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80136fc:	425a      	negs	r2, r3
 80136fe:	415a      	adcs	r2, r3
 8013700:	602a      	str	r2, [r5, #0]
 8013702:	e7ee      	b.n	80136e2 <__swhatbuf_r+0x1c>
 8013704:	2340      	movs	r3, #64	; 0x40
 8013706:	2000      	movs	r0, #0
 8013708:	6023      	str	r3, [r4, #0]
 801370a:	b016      	add	sp, #88	; 0x58
 801370c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013710 <__smakebuf_r>:
 8013710:	898b      	ldrh	r3, [r1, #12]
 8013712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013714:	079d      	lsls	r5, r3, #30
 8013716:	4606      	mov	r6, r0
 8013718:	460c      	mov	r4, r1
 801371a:	d507      	bpl.n	801372c <__smakebuf_r+0x1c>
 801371c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013720:	6023      	str	r3, [r4, #0]
 8013722:	6123      	str	r3, [r4, #16]
 8013724:	2301      	movs	r3, #1
 8013726:	6163      	str	r3, [r4, #20]
 8013728:	b002      	add	sp, #8
 801372a:	bd70      	pop	{r4, r5, r6, pc}
 801372c:	ab01      	add	r3, sp, #4
 801372e:	466a      	mov	r2, sp
 8013730:	f7ff ffc9 	bl	80136c6 <__swhatbuf_r>
 8013734:	9900      	ldr	r1, [sp, #0]
 8013736:	4605      	mov	r5, r0
 8013738:	4630      	mov	r0, r6
 801373a:	f7fc fc2d 	bl	800ff98 <_malloc_r>
 801373e:	b948      	cbnz	r0, 8013754 <__smakebuf_r+0x44>
 8013740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013744:	059a      	lsls	r2, r3, #22
 8013746:	d4ef      	bmi.n	8013728 <__smakebuf_r+0x18>
 8013748:	f023 0303 	bic.w	r3, r3, #3
 801374c:	f043 0302 	orr.w	r3, r3, #2
 8013750:	81a3      	strh	r3, [r4, #12]
 8013752:	e7e3      	b.n	801371c <__smakebuf_r+0xc>
 8013754:	4b0d      	ldr	r3, [pc, #52]	; (801378c <__smakebuf_r+0x7c>)
 8013756:	62b3      	str	r3, [r6, #40]	; 0x28
 8013758:	89a3      	ldrh	r3, [r4, #12]
 801375a:	6020      	str	r0, [r4, #0]
 801375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013760:	81a3      	strh	r3, [r4, #12]
 8013762:	9b00      	ldr	r3, [sp, #0]
 8013764:	6163      	str	r3, [r4, #20]
 8013766:	9b01      	ldr	r3, [sp, #4]
 8013768:	6120      	str	r0, [r4, #16]
 801376a:	b15b      	cbz	r3, 8013784 <__smakebuf_r+0x74>
 801376c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013770:	4630      	mov	r0, r6
 8013772:	f000 ff49 	bl	8014608 <_isatty_r>
 8013776:	b128      	cbz	r0, 8013784 <__smakebuf_r+0x74>
 8013778:	89a3      	ldrh	r3, [r4, #12]
 801377a:	f023 0303 	bic.w	r3, r3, #3
 801377e:	f043 0301 	orr.w	r3, r3, #1
 8013782:	81a3      	strh	r3, [r4, #12]
 8013784:	89a0      	ldrh	r0, [r4, #12]
 8013786:	4305      	orrs	r5, r0
 8013788:	81a5      	strh	r5, [r4, #12]
 801378a:	e7cd      	b.n	8013728 <__smakebuf_r+0x18>
 801378c:	08012e39 	.word	0x08012e39

08013790 <__ascii_mbtowc>:
 8013790:	b082      	sub	sp, #8
 8013792:	b901      	cbnz	r1, 8013796 <__ascii_mbtowc+0x6>
 8013794:	a901      	add	r1, sp, #4
 8013796:	b142      	cbz	r2, 80137aa <__ascii_mbtowc+0x1a>
 8013798:	b14b      	cbz	r3, 80137ae <__ascii_mbtowc+0x1e>
 801379a:	7813      	ldrb	r3, [r2, #0]
 801379c:	600b      	str	r3, [r1, #0]
 801379e:	7812      	ldrb	r2, [r2, #0]
 80137a0:	1e10      	subs	r0, r2, #0
 80137a2:	bf18      	it	ne
 80137a4:	2001      	movne	r0, #1
 80137a6:	b002      	add	sp, #8
 80137a8:	4770      	bx	lr
 80137aa:	4610      	mov	r0, r2
 80137ac:	e7fb      	b.n	80137a6 <__ascii_mbtowc+0x16>
 80137ae:	f06f 0001 	mvn.w	r0, #1
 80137b2:	e7f8      	b.n	80137a6 <__ascii_mbtowc+0x16>

080137b4 <__malloc_lock>:
 80137b4:	4801      	ldr	r0, [pc, #4]	; (80137bc <__malloc_lock+0x8>)
 80137b6:	f7ff bf84 	b.w	80136c2 <__retarget_lock_acquire_recursive>
 80137ba:	bf00      	nop
 80137bc:	2400f694 	.word	0x2400f694

080137c0 <__malloc_unlock>:
 80137c0:	4801      	ldr	r0, [pc, #4]	; (80137c8 <__malloc_unlock+0x8>)
 80137c2:	f7ff bf7f 	b.w	80136c4 <__retarget_lock_release_recursive>
 80137c6:	bf00      	nop
 80137c8:	2400f694 	.word	0x2400f694

080137cc <_Balloc>:
 80137cc:	b570      	push	{r4, r5, r6, lr}
 80137ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80137d0:	4604      	mov	r4, r0
 80137d2:	460d      	mov	r5, r1
 80137d4:	b976      	cbnz	r6, 80137f4 <_Balloc+0x28>
 80137d6:	2010      	movs	r0, #16
 80137d8:	f7fc fb4e 	bl	800fe78 <malloc>
 80137dc:	4602      	mov	r2, r0
 80137de:	6260      	str	r0, [r4, #36]	; 0x24
 80137e0:	b920      	cbnz	r0, 80137ec <_Balloc+0x20>
 80137e2:	4b18      	ldr	r3, [pc, #96]	; (8013844 <_Balloc+0x78>)
 80137e4:	4818      	ldr	r0, [pc, #96]	; (8013848 <_Balloc+0x7c>)
 80137e6:	2166      	movs	r1, #102	; 0x66
 80137e8:	f7fc faec 	bl	800fdc4 <__assert_func>
 80137ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137f0:	6006      	str	r6, [r0, #0]
 80137f2:	60c6      	str	r6, [r0, #12]
 80137f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80137f6:	68f3      	ldr	r3, [r6, #12]
 80137f8:	b183      	cbz	r3, 801381c <_Balloc+0x50>
 80137fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137fc:	68db      	ldr	r3, [r3, #12]
 80137fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013802:	b9b8      	cbnz	r0, 8013834 <_Balloc+0x68>
 8013804:	2101      	movs	r1, #1
 8013806:	fa01 f605 	lsl.w	r6, r1, r5
 801380a:	1d72      	adds	r2, r6, #5
 801380c:	0092      	lsls	r2, r2, #2
 801380e:	4620      	mov	r0, r4
 8013810:	f000 fc98 	bl	8014144 <_calloc_r>
 8013814:	b160      	cbz	r0, 8013830 <_Balloc+0x64>
 8013816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801381a:	e00e      	b.n	801383a <_Balloc+0x6e>
 801381c:	2221      	movs	r2, #33	; 0x21
 801381e:	2104      	movs	r1, #4
 8013820:	4620      	mov	r0, r4
 8013822:	f000 fc8f 	bl	8014144 <_calloc_r>
 8013826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013828:	60f0      	str	r0, [r6, #12]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d1e4      	bne.n	80137fa <_Balloc+0x2e>
 8013830:	2000      	movs	r0, #0
 8013832:	bd70      	pop	{r4, r5, r6, pc}
 8013834:	6802      	ldr	r2, [r0, #0]
 8013836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801383a:	2300      	movs	r3, #0
 801383c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013840:	e7f7      	b.n	8013832 <_Balloc+0x66>
 8013842:	bf00      	nop
 8013844:	0801d68e 	.word	0x0801d68e
 8013848:	0801d7f8 	.word	0x0801d7f8

0801384c <_Bfree>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013850:	4605      	mov	r5, r0
 8013852:	460c      	mov	r4, r1
 8013854:	b976      	cbnz	r6, 8013874 <_Bfree+0x28>
 8013856:	2010      	movs	r0, #16
 8013858:	f7fc fb0e 	bl	800fe78 <malloc>
 801385c:	4602      	mov	r2, r0
 801385e:	6268      	str	r0, [r5, #36]	; 0x24
 8013860:	b920      	cbnz	r0, 801386c <_Bfree+0x20>
 8013862:	4b09      	ldr	r3, [pc, #36]	; (8013888 <_Bfree+0x3c>)
 8013864:	4809      	ldr	r0, [pc, #36]	; (801388c <_Bfree+0x40>)
 8013866:	218a      	movs	r1, #138	; 0x8a
 8013868:	f7fc faac 	bl	800fdc4 <__assert_func>
 801386c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013870:	6006      	str	r6, [r0, #0]
 8013872:	60c6      	str	r6, [r0, #12]
 8013874:	b13c      	cbz	r4, 8013886 <_Bfree+0x3a>
 8013876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013878:	6862      	ldr	r2, [r4, #4]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013880:	6021      	str	r1, [r4, #0]
 8013882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013886:	bd70      	pop	{r4, r5, r6, pc}
 8013888:	0801d68e 	.word	0x0801d68e
 801388c:	0801d7f8 	.word	0x0801d7f8

08013890 <__multadd>:
 8013890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013894:	690e      	ldr	r6, [r1, #16]
 8013896:	4607      	mov	r7, r0
 8013898:	4698      	mov	r8, r3
 801389a:	460c      	mov	r4, r1
 801389c:	f101 0014 	add.w	r0, r1, #20
 80138a0:	2300      	movs	r3, #0
 80138a2:	6805      	ldr	r5, [r0, #0]
 80138a4:	b2a9      	uxth	r1, r5
 80138a6:	fb02 8101 	mla	r1, r2, r1, r8
 80138aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80138ae:	0c2d      	lsrs	r5, r5, #16
 80138b0:	fb02 c505 	mla	r5, r2, r5, ip
 80138b4:	b289      	uxth	r1, r1
 80138b6:	3301      	adds	r3, #1
 80138b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80138bc:	429e      	cmp	r6, r3
 80138be:	f840 1b04 	str.w	r1, [r0], #4
 80138c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80138c6:	dcec      	bgt.n	80138a2 <__multadd+0x12>
 80138c8:	f1b8 0f00 	cmp.w	r8, #0
 80138cc:	d022      	beq.n	8013914 <__multadd+0x84>
 80138ce:	68a3      	ldr	r3, [r4, #8]
 80138d0:	42b3      	cmp	r3, r6
 80138d2:	dc19      	bgt.n	8013908 <__multadd+0x78>
 80138d4:	6861      	ldr	r1, [r4, #4]
 80138d6:	4638      	mov	r0, r7
 80138d8:	3101      	adds	r1, #1
 80138da:	f7ff ff77 	bl	80137cc <_Balloc>
 80138de:	4605      	mov	r5, r0
 80138e0:	b928      	cbnz	r0, 80138ee <__multadd+0x5e>
 80138e2:	4602      	mov	r2, r0
 80138e4:	4b0d      	ldr	r3, [pc, #52]	; (801391c <__multadd+0x8c>)
 80138e6:	480e      	ldr	r0, [pc, #56]	; (8013920 <__multadd+0x90>)
 80138e8:	21b5      	movs	r1, #181	; 0xb5
 80138ea:	f7fc fa6b 	bl	800fdc4 <__assert_func>
 80138ee:	6922      	ldr	r2, [r4, #16]
 80138f0:	3202      	adds	r2, #2
 80138f2:	f104 010c 	add.w	r1, r4, #12
 80138f6:	0092      	lsls	r2, r2, #2
 80138f8:	300c      	adds	r0, #12
 80138fa:	f7fc facd 	bl	800fe98 <memcpy>
 80138fe:	4621      	mov	r1, r4
 8013900:	4638      	mov	r0, r7
 8013902:	f7ff ffa3 	bl	801384c <_Bfree>
 8013906:	462c      	mov	r4, r5
 8013908:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801390c:	3601      	adds	r6, #1
 801390e:	f8c3 8014 	str.w	r8, [r3, #20]
 8013912:	6126      	str	r6, [r4, #16]
 8013914:	4620      	mov	r0, r4
 8013916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391a:	bf00      	nop
 801391c:	0801d704 	.word	0x0801d704
 8013920:	0801d7f8 	.word	0x0801d7f8

08013924 <__s2b>:
 8013924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013928:	460c      	mov	r4, r1
 801392a:	4615      	mov	r5, r2
 801392c:	461f      	mov	r7, r3
 801392e:	2209      	movs	r2, #9
 8013930:	3308      	adds	r3, #8
 8013932:	4606      	mov	r6, r0
 8013934:	fb93 f3f2 	sdiv	r3, r3, r2
 8013938:	2100      	movs	r1, #0
 801393a:	2201      	movs	r2, #1
 801393c:	429a      	cmp	r2, r3
 801393e:	db09      	blt.n	8013954 <__s2b+0x30>
 8013940:	4630      	mov	r0, r6
 8013942:	f7ff ff43 	bl	80137cc <_Balloc>
 8013946:	b940      	cbnz	r0, 801395a <__s2b+0x36>
 8013948:	4602      	mov	r2, r0
 801394a:	4b19      	ldr	r3, [pc, #100]	; (80139b0 <__s2b+0x8c>)
 801394c:	4819      	ldr	r0, [pc, #100]	; (80139b4 <__s2b+0x90>)
 801394e:	21ce      	movs	r1, #206	; 0xce
 8013950:	f7fc fa38 	bl	800fdc4 <__assert_func>
 8013954:	0052      	lsls	r2, r2, #1
 8013956:	3101      	adds	r1, #1
 8013958:	e7f0      	b.n	801393c <__s2b+0x18>
 801395a:	9b08      	ldr	r3, [sp, #32]
 801395c:	6143      	str	r3, [r0, #20]
 801395e:	2d09      	cmp	r5, #9
 8013960:	f04f 0301 	mov.w	r3, #1
 8013964:	6103      	str	r3, [r0, #16]
 8013966:	dd16      	ble.n	8013996 <__s2b+0x72>
 8013968:	f104 0909 	add.w	r9, r4, #9
 801396c:	46c8      	mov	r8, r9
 801396e:	442c      	add	r4, r5
 8013970:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013974:	4601      	mov	r1, r0
 8013976:	3b30      	subs	r3, #48	; 0x30
 8013978:	220a      	movs	r2, #10
 801397a:	4630      	mov	r0, r6
 801397c:	f7ff ff88 	bl	8013890 <__multadd>
 8013980:	45a0      	cmp	r8, r4
 8013982:	d1f5      	bne.n	8013970 <__s2b+0x4c>
 8013984:	f1a5 0408 	sub.w	r4, r5, #8
 8013988:	444c      	add	r4, r9
 801398a:	1b2d      	subs	r5, r5, r4
 801398c:	1963      	adds	r3, r4, r5
 801398e:	42bb      	cmp	r3, r7
 8013990:	db04      	blt.n	801399c <__s2b+0x78>
 8013992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013996:	340a      	adds	r4, #10
 8013998:	2509      	movs	r5, #9
 801399a:	e7f6      	b.n	801398a <__s2b+0x66>
 801399c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80139a0:	4601      	mov	r1, r0
 80139a2:	3b30      	subs	r3, #48	; 0x30
 80139a4:	220a      	movs	r2, #10
 80139a6:	4630      	mov	r0, r6
 80139a8:	f7ff ff72 	bl	8013890 <__multadd>
 80139ac:	e7ee      	b.n	801398c <__s2b+0x68>
 80139ae:	bf00      	nop
 80139b0:	0801d704 	.word	0x0801d704
 80139b4:	0801d7f8 	.word	0x0801d7f8

080139b8 <__hi0bits>:
 80139b8:	0c03      	lsrs	r3, r0, #16
 80139ba:	041b      	lsls	r3, r3, #16
 80139bc:	b9d3      	cbnz	r3, 80139f4 <__hi0bits+0x3c>
 80139be:	0400      	lsls	r0, r0, #16
 80139c0:	2310      	movs	r3, #16
 80139c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80139c6:	bf04      	itt	eq
 80139c8:	0200      	lsleq	r0, r0, #8
 80139ca:	3308      	addeq	r3, #8
 80139cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80139d0:	bf04      	itt	eq
 80139d2:	0100      	lsleq	r0, r0, #4
 80139d4:	3304      	addeq	r3, #4
 80139d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80139da:	bf04      	itt	eq
 80139dc:	0080      	lsleq	r0, r0, #2
 80139de:	3302      	addeq	r3, #2
 80139e0:	2800      	cmp	r0, #0
 80139e2:	db05      	blt.n	80139f0 <__hi0bits+0x38>
 80139e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80139e8:	f103 0301 	add.w	r3, r3, #1
 80139ec:	bf08      	it	eq
 80139ee:	2320      	moveq	r3, #32
 80139f0:	4618      	mov	r0, r3
 80139f2:	4770      	bx	lr
 80139f4:	2300      	movs	r3, #0
 80139f6:	e7e4      	b.n	80139c2 <__hi0bits+0xa>

080139f8 <__lo0bits>:
 80139f8:	6803      	ldr	r3, [r0, #0]
 80139fa:	f013 0207 	ands.w	r2, r3, #7
 80139fe:	4601      	mov	r1, r0
 8013a00:	d00b      	beq.n	8013a1a <__lo0bits+0x22>
 8013a02:	07da      	lsls	r2, r3, #31
 8013a04:	d424      	bmi.n	8013a50 <__lo0bits+0x58>
 8013a06:	0798      	lsls	r0, r3, #30
 8013a08:	bf49      	itett	mi
 8013a0a:	085b      	lsrmi	r3, r3, #1
 8013a0c:	089b      	lsrpl	r3, r3, #2
 8013a0e:	2001      	movmi	r0, #1
 8013a10:	600b      	strmi	r3, [r1, #0]
 8013a12:	bf5c      	itt	pl
 8013a14:	600b      	strpl	r3, [r1, #0]
 8013a16:	2002      	movpl	r0, #2
 8013a18:	4770      	bx	lr
 8013a1a:	b298      	uxth	r0, r3
 8013a1c:	b9b0      	cbnz	r0, 8013a4c <__lo0bits+0x54>
 8013a1e:	0c1b      	lsrs	r3, r3, #16
 8013a20:	2010      	movs	r0, #16
 8013a22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a26:	bf04      	itt	eq
 8013a28:	0a1b      	lsreq	r3, r3, #8
 8013a2a:	3008      	addeq	r0, #8
 8013a2c:	071a      	lsls	r2, r3, #28
 8013a2e:	bf04      	itt	eq
 8013a30:	091b      	lsreq	r3, r3, #4
 8013a32:	3004      	addeq	r0, #4
 8013a34:	079a      	lsls	r2, r3, #30
 8013a36:	bf04      	itt	eq
 8013a38:	089b      	lsreq	r3, r3, #2
 8013a3a:	3002      	addeq	r0, #2
 8013a3c:	07da      	lsls	r2, r3, #31
 8013a3e:	d403      	bmi.n	8013a48 <__lo0bits+0x50>
 8013a40:	085b      	lsrs	r3, r3, #1
 8013a42:	f100 0001 	add.w	r0, r0, #1
 8013a46:	d005      	beq.n	8013a54 <__lo0bits+0x5c>
 8013a48:	600b      	str	r3, [r1, #0]
 8013a4a:	4770      	bx	lr
 8013a4c:	4610      	mov	r0, r2
 8013a4e:	e7e8      	b.n	8013a22 <__lo0bits+0x2a>
 8013a50:	2000      	movs	r0, #0
 8013a52:	4770      	bx	lr
 8013a54:	2020      	movs	r0, #32
 8013a56:	4770      	bx	lr

08013a58 <__i2b>:
 8013a58:	b510      	push	{r4, lr}
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	f7ff feb5 	bl	80137cc <_Balloc>
 8013a62:	4602      	mov	r2, r0
 8013a64:	b928      	cbnz	r0, 8013a72 <__i2b+0x1a>
 8013a66:	4b05      	ldr	r3, [pc, #20]	; (8013a7c <__i2b+0x24>)
 8013a68:	4805      	ldr	r0, [pc, #20]	; (8013a80 <__i2b+0x28>)
 8013a6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a6e:	f7fc f9a9 	bl	800fdc4 <__assert_func>
 8013a72:	2301      	movs	r3, #1
 8013a74:	6144      	str	r4, [r0, #20]
 8013a76:	6103      	str	r3, [r0, #16]
 8013a78:	bd10      	pop	{r4, pc}
 8013a7a:	bf00      	nop
 8013a7c:	0801d704 	.word	0x0801d704
 8013a80:	0801d7f8 	.word	0x0801d7f8

08013a84 <__multiply>:
 8013a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a88:	4614      	mov	r4, r2
 8013a8a:	690a      	ldr	r2, [r1, #16]
 8013a8c:	6923      	ldr	r3, [r4, #16]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	bfb8      	it	lt
 8013a92:	460b      	movlt	r3, r1
 8013a94:	460d      	mov	r5, r1
 8013a96:	bfbc      	itt	lt
 8013a98:	4625      	movlt	r5, r4
 8013a9a:	461c      	movlt	r4, r3
 8013a9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013aa0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013aa4:	68ab      	ldr	r3, [r5, #8]
 8013aa6:	6869      	ldr	r1, [r5, #4]
 8013aa8:	eb0a 0709 	add.w	r7, sl, r9
 8013aac:	42bb      	cmp	r3, r7
 8013aae:	b085      	sub	sp, #20
 8013ab0:	bfb8      	it	lt
 8013ab2:	3101      	addlt	r1, #1
 8013ab4:	f7ff fe8a 	bl	80137cc <_Balloc>
 8013ab8:	b930      	cbnz	r0, 8013ac8 <__multiply+0x44>
 8013aba:	4602      	mov	r2, r0
 8013abc:	4b42      	ldr	r3, [pc, #264]	; (8013bc8 <__multiply+0x144>)
 8013abe:	4843      	ldr	r0, [pc, #268]	; (8013bcc <__multiply+0x148>)
 8013ac0:	f240 115d 	movw	r1, #349	; 0x15d
 8013ac4:	f7fc f97e 	bl	800fdc4 <__assert_func>
 8013ac8:	f100 0614 	add.w	r6, r0, #20
 8013acc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013ad0:	4633      	mov	r3, r6
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	4543      	cmp	r3, r8
 8013ad6:	d31e      	bcc.n	8013b16 <__multiply+0x92>
 8013ad8:	f105 0c14 	add.w	ip, r5, #20
 8013adc:	f104 0314 	add.w	r3, r4, #20
 8013ae0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013ae4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013ae8:	9202      	str	r2, [sp, #8]
 8013aea:	ebac 0205 	sub.w	r2, ip, r5
 8013aee:	3a15      	subs	r2, #21
 8013af0:	f022 0203 	bic.w	r2, r2, #3
 8013af4:	3204      	adds	r2, #4
 8013af6:	f105 0115 	add.w	r1, r5, #21
 8013afa:	458c      	cmp	ip, r1
 8013afc:	bf38      	it	cc
 8013afe:	2204      	movcc	r2, #4
 8013b00:	9201      	str	r2, [sp, #4]
 8013b02:	9a02      	ldr	r2, [sp, #8]
 8013b04:	9303      	str	r3, [sp, #12]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d808      	bhi.n	8013b1c <__multiply+0x98>
 8013b0a:	2f00      	cmp	r7, #0
 8013b0c:	dc55      	bgt.n	8013bba <__multiply+0x136>
 8013b0e:	6107      	str	r7, [r0, #16]
 8013b10:	b005      	add	sp, #20
 8013b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b16:	f843 2b04 	str.w	r2, [r3], #4
 8013b1a:	e7db      	b.n	8013ad4 <__multiply+0x50>
 8013b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b20:	f1ba 0f00 	cmp.w	sl, #0
 8013b24:	d020      	beq.n	8013b68 <__multiply+0xe4>
 8013b26:	f105 0e14 	add.w	lr, r5, #20
 8013b2a:	46b1      	mov	r9, r6
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013b32:	f8d9 b000 	ldr.w	fp, [r9]
 8013b36:	b2a1      	uxth	r1, r4
 8013b38:	fa1f fb8b 	uxth.w	fp, fp
 8013b3c:	fb0a b101 	mla	r1, sl, r1, fp
 8013b40:	4411      	add	r1, r2
 8013b42:	f8d9 2000 	ldr.w	r2, [r9]
 8013b46:	0c24      	lsrs	r4, r4, #16
 8013b48:	0c12      	lsrs	r2, r2, #16
 8013b4a:	fb0a 2404 	mla	r4, sl, r4, r2
 8013b4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013b52:	b289      	uxth	r1, r1
 8013b54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013b58:	45f4      	cmp	ip, lr
 8013b5a:	f849 1b04 	str.w	r1, [r9], #4
 8013b5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013b62:	d8e4      	bhi.n	8013b2e <__multiply+0xaa>
 8013b64:	9901      	ldr	r1, [sp, #4]
 8013b66:	5072      	str	r2, [r6, r1]
 8013b68:	9a03      	ldr	r2, [sp, #12]
 8013b6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b6e:	3304      	adds	r3, #4
 8013b70:	f1b9 0f00 	cmp.w	r9, #0
 8013b74:	d01f      	beq.n	8013bb6 <__multiply+0x132>
 8013b76:	6834      	ldr	r4, [r6, #0]
 8013b78:	f105 0114 	add.w	r1, r5, #20
 8013b7c:	46b6      	mov	lr, r6
 8013b7e:	f04f 0a00 	mov.w	sl, #0
 8013b82:	880a      	ldrh	r2, [r1, #0]
 8013b84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013b88:	fb09 b202 	mla	r2, r9, r2, fp
 8013b8c:	4492      	add	sl, r2
 8013b8e:	b2a4      	uxth	r4, r4
 8013b90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013b94:	f84e 4b04 	str.w	r4, [lr], #4
 8013b98:	f851 4b04 	ldr.w	r4, [r1], #4
 8013b9c:	f8be 2000 	ldrh.w	r2, [lr]
 8013ba0:	0c24      	lsrs	r4, r4, #16
 8013ba2:	fb09 2404 	mla	r4, r9, r4, r2
 8013ba6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013baa:	458c      	cmp	ip, r1
 8013bac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013bb0:	d8e7      	bhi.n	8013b82 <__multiply+0xfe>
 8013bb2:	9a01      	ldr	r2, [sp, #4]
 8013bb4:	50b4      	str	r4, [r6, r2]
 8013bb6:	3604      	adds	r6, #4
 8013bb8:	e7a3      	b.n	8013b02 <__multiply+0x7e>
 8013bba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d1a5      	bne.n	8013b0e <__multiply+0x8a>
 8013bc2:	3f01      	subs	r7, #1
 8013bc4:	e7a1      	b.n	8013b0a <__multiply+0x86>
 8013bc6:	bf00      	nop
 8013bc8:	0801d704 	.word	0x0801d704
 8013bcc:	0801d7f8 	.word	0x0801d7f8

08013bd0 <__pow5mult>:
 8013bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bd4:	4615      	mov	r5, r2
 8013bd6:	f012 0203 	ands.w	r2, r2, #3
 8013bda:	4606      	mov	r6, r0
 8013bdc:	460f      	mov	r7, r1
 8013bde:	d007      	beq.n	8013bf0 <__pow5mult+0x20>
 8013be0:	4c25      	ldr	r4, [pc, #148]	; (8013c78 <__pow5mult+0xa8>)
 8013be2:	3a01      	subs	r2, #1
 8013be4:	2300      	movs	r3, #0
 8013be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013bea:	f7ff fe51 	bl	8013890 <__multadd>
 8013bee:	4607      	mov	r7, r0
 8013bf0:	10ad      	asrs	r5, r5, #2
 8013bf2:	d03d      	beq.n	8013c70 <__pow5mult+0xa0>
 8013bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013bf6:	b97c      	cbnz	r4, 8013c18 <__pow5mult+0x48>
 8013bf8:	2010      	movs	r0, #16
 8013bfa:	f7fc f93d 	bl	800fe78 <malloc>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	6270      	str	r0, [r6, #36]	; 0x24
 8013c02:	b928      	cbnz	r0, 8013c10 <__pow5mult+0x40>
 8013c04:	4b1d      	ldr	r3, [pc, #116]	; (8013c7c <__pow5mult+0xac>)
 8013c06:	481e      	ldr	r0, [pc, #120]	; (8013c80 <__pow5mult+0xb0>)
 8013c08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c0c:	f7fc f8da 	bl	800fdc4 <__assert_func>
 8013c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c14:	6004      	str	r4, [r0, #0]
 8013c16:	60c4      	str	r4, [r0, #12]
 8013c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c20:	b94c      	cbnz	r4, 8013c36 <__pow5mult+0x66>
 8013c22:	f240 2171 	movw	r1, #625	; 0x271
 8013c26:	4630      	mov	r0, r6
 8013c28:	f7ff ff16 	bl	8013a58 <__i2b>
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c32:	4604      	mov	r4, r0
 8013c34:	6003      	str	r3, [r0, #0]
 8013c36:	f04f 0900 	mov.w	r9, #0
 8013c3a:	07eb      	lsls	r3, r5, #31
 8013c3c:	d50a      	bpl.n	8013c54 <__pow5mult+0x84>
 8013c3e:	4639      	mov	r1, r7
 8013c40:	4622      	mov	r2, r4
 8013c42:	4630      	mov	r0, r6
 8013c44:	f7ff ff1e 	bl	8013a84 <__multiply>
 8013c48:	4639      	mov	r1, r7
 8013c4a:	4680      	mov	r8, r0
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f7ff fdfd 	bl	801384c <_Bfree>
 8013c52:	4647      	mov	r7, r8
 8013c54:	106d      	asrs	r5, r5, #1
 8013c56:	d00b      	beq.n	8013c70 <__pow5mult+0xa0>
 8013c58:	6820      	ldr	r0, [r4, #0]
 8013c5a:	b938      	cbnz	r0, 8013c6c <__pow5mult+0x9c>
 8013c5c:	4622      	mov	r2, r4
 8013c5e:	4621      	mov	r1, r4
 8013c60:	4630      	mov	r0, r6
 8013c62:	f7ff ff0f 	bl	8013a84 <__multiply>
 8013c66:	6020      	str	r0, [r4, #0]
 8013c68:	f8c0 9000 	str.w	r9, [r0]
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	e7e4      	b.n	8013c3a <__pow5mult+0x6a>
 8013c70:	4638      	mov	r0, r7
 8013c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c76:	bf00      	nop
 8013c78:	0801d948 	.word	0x0801d948
 8013c7c:	0801d68e 	.word	0x0801d68e
 8013c80:	0801d7f8 	.word	0x0801d7f8

08013c84 <__lshift>:
 8013c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c88:	460c      	mov	r4, r1
 8013c8a:	6849      	ldr	r1, [r1, #4]
 8013c8c:	6923      	ldr	r3, [r4, #16]
 8013c8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c92:	68a3      	ldr	r3, [r4, #8]
 8013c94:	4607      	mov	r7, r0
 8013c96:	4691      	mov	r9, r2
 8013c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c9c:	f108 0601 	add.w	r6, r8, #1
 8013ca0:	42b3      	cmp	r3, r6
 8013ca2:	db0b      	blt.n	8013cbc <__lshift+0x38>
 8013ca4:	4638      	mov	r0, r7
 8013ca6:	f7ff fd91 	bl	80137cc <_Balloc>
 8013caa:	4605      	mov	r5, r0
 8013cac:	b948      	cbnz	r0, 8013cc2 <__lshift+0x3e>
 8013cae:	4602      	mov	r2, r0
 8013cb0:	4b28      	ldr	r3, [pc, #160]	; (8013d54 <__lshift+0xd0>)
 8013cb2:	4829      	ldr	r0, [pc, #164]	; (8013d58 <__lshift+0xd4>)
 8013cb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013cb8:	f7fc f884 	bl	800fdc4 <__assert_func>
 8013cbc:	3101      	adds	r1, #1
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	e7ee      	b.n	8013ca0 <__lshift+0x1c>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	f100 0114 	add.w	r1, r0, #20
 8013cc8:	f100 0210 	add.w	r2, r0, #16
 8013ccc:	4618      	mov	r0, r3
 8013cce:	4553      	cmp	r3, sl
 8013cd0:	db33      	blt.n	8013d3a <__lshift+0xb6>
 8013cd2:	6920      	ldr	r0, [r4, #16]
 8013cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013cd8:	f104 0314 	add.w	r3, r4, #20
 8013cdc:	f019 091f 	ands.w	r9, r9, #31
 8013ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ce8:	d02b      	beq.n	8013d42 <__lshift+0xbe>
 8013cea:	f1c9 0e20 	rsb	lr, r9, #32
 8013cee:	468a      	mov	sl, r1
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	6818      	ldr	r0, [r3, #0]
 8013cf4:	fa00 f009 	lsl.w	r0, r0, r9
 8013cf8:	4302      	orrs	r2, r0
 8013cfa:	f84a 2b04 	str.w	r2, [sl], #4
 8013cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d02:	459c      	cmp	ip, r3
 8013d04:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d08:	d8f3      	bhi.n	8013cf2 <__lshift+0x6e>
 8013d0a:	ebac 0304 	sub.w	r3, ip, r4
 8013d0e:	3b15      	subs	r3, #21
 8013d10:	f023 0303 	bic.w	r3, r3, #3
 8013d14:	3304      	adds	r3, #4
 8013d16:	f104 0015 	add.w	r0, r4, #21
 8013d1a:	4584      	cmp	ip, r0
 8013d1c:	bf38      	it	cc
 8013d1e:	2304      	movcc	r3, #4
 8013d20:	50ca      	str	r2, [r1, r3]
 8013d22:	b10a      	cbz	r2, 8013d28 <__lshift+0xa4>
 8013d24:	f108 0602 	add.w	r6, r8, #2
 8013d28:	3e01      	subs	r6, #1
 8013d2a:	4638      	mov	r0, r7
 8013d2c:	612e      	str	r6, [r5, #16]
 8013d2e:	4621      	mov	r1, r4
 8013d30:	f7ff fd8c 	bl	801384c <_Bfree>
 8013d34:	4628      	mov	r0, r5
 8013d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d3e:	3301      	adds	r3, #1
 8013d40:	e7c5      	b.n	8013cce <__lshift+0x4a>
 8013d42:	3904      	subs	r1, #4
 8013d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d48:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d4c:	459c      	cmp	ip, r3
 8013d4e:	d8f9      	bhi.n	8013d44 <__lshift+0xc0>
 8013d50:	e7ea      	b.n	8013d28 <__lshift+0xa4>
 8013d52:	bf00      	nop
 8013d54:	0801d704 	.word	0x0801d704
 8013d58:	0801d7f8 	.word	0x0801d7f8

08013d5c <__mcmp>:
 8013d5c:	b530      	push	{r4, r5, lr}
 8013d5e:	6902      	ldr	r2, [r0, #16]
 8013d60:	690c      	ldr	r4, [r1, #16]
 8013d62:	1b12      	subs	r2, r2, r4
 8013d64:	d10e      	bne.n	8013d84 <__mcmp+0x28>
 8013d66:	f100 0314 	add.w	r3, r0, #20
 8013d6a:	3114      	adds	r1, #20
 8013d6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013d74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013d78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013d7c:	42a5      	cmp	r5, r4
 8013d7e:	d003      	beq.n	8013d88 <__mcmp+0x2c>
 8013d80:	d305      	bcc.n	8013d8e <__mcmp+0x32>
 8013d82:	2201      	movs	r2, #1
 8013d84:	4610      	mov	r0, r2
 8013d86:	bd30      	pop	{r4, r5, pc}
 8013d88:	4283      	cmp	r3, r0
 8013d8a:	d3f3      	bcc.n	8013d74 <__mcmp+0x18>
 8013d8c:	e7fa      	b.n	8013d84 <__mcmp+0x28>
 8013d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d92:	e7f7      	b.n	8013d84 <__mcmp+0x28>

08013d94 <__mdiff>:
 8013d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d98:	460c      	mov	r4, r1
 8013d9a:	4606      	mov	r6, r0
 8013d9c:	4611      	mov	r1, r2
 8013d9e:	4620      	mov	r0, r4
 8013da0:	4617      	mov	r7, r2
 8013da2:	f7ff ffdb 	bl	8013d5c <__mcmp>
 8013da6:	1e05      	subs	r5, r0, #0
 8013da8:	d110      	bne.n	8013dcc <__mdiff+0x38>
 8013daa:	4629      	mov	r1, r5
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7ff fd0d 	bl	80137cc <_Balloc>
 8013db2:	b930      	cbnz	r0, 8013dc2 <__mdiff+0x2e>
 8013db4:	4b39      	ldr	r3, [pc, #228]	; (8013e9c <__mdiff+0x108>)
 8013db6:	4602      	mov	r2, r0
 8013db8:	f240 2132 	movw	r1, #562	; 0x232
 8013dbc:	4838      	ldr	r0, [pc, #224]	; (8013ea0 <__mdiff+0x10c>)
 8013dbe:	f7fc f801 	bl	800fdc4 <__assert_func>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dcc:	bfa4      	itt	ge
 8013dce:	463b      	movge	r3, r7
 8013dd0:	4627      	movge	r7, r4
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	6879      	ldr	r1, [r7, #4]
 8013dd6:	bfa6      	itte	ge
 8013dd8:	461c      	movge	r4, r3
 8013dda:	2500      	movge	r5, #0
 8013ddc:	2501      	movlt	r5, #1
 8013dde:	f7ff fcf5 	bl	80137cc <_Balloc>
 8013de2:	b920      	cbnz	r0, 8013dee <__mdiff+0x5a>
 8013de4:	4b2d      	ldr	r3, [pc, #180]	; (8013e9c <__mdiff+0x108>)
 8013de6:	4602      	mov	r2, r0
 8013de8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013dec:	e7e6      	b.n	8013dbc <__mdiff+0x28>
 8013dee:	693e      	ldr	r6, [r7, #16]
 8013df0:	60c5      	str	r5, [r0, #12]
 8013df2:	6925      	ldr	r5, [r4, #16]
 8013df4:	f107 0114 	add.w	r1, r7, #20
 8013df8:	f104 0914 	add.w	r9, r4, #20
 8013dfc:	f100 0e14 	add.w	lr, r0, #20
 8013e00:	f107 0210 	add.w	r2, r7, #16
 8013e04:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013e08:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013e0c:	46f2      	mov	sl, lr
 8013e0e:	2700      	movs	r7, #0
 8013e10:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e18:	fa1f f883 	uxth.w	r8, r3
 8013e1c:	fa17 f78b 	uxtah	r7, r7, fp
 8013e20:	0c1b      	lsrs	r3, r3, #16
 8013e22:	eba7 0808 	sub.w	r8, r7, r8
 8013e26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e2e:	fa1f f888 	uxth.w	r8, r8
 8013e32:	141f      	asrs	r7, r3, #16
 8013e34:	454d      	cmp	r5, r9
 8013e36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e3a:	f84a 3b04 	str.w	r3, [sl], #4
 8013e3e:	d8e7      	bhi.n	8013e10 <__mdiff+0x7c>
 8013e40:	1b2b      	subs	r3, r5, r4
 8013e42:	3b15      	subs	r3, #21
 8013e44:	f023 0303 	bic.w	r3, r3, #3
 8013e48:	3304      	adds	r3, #4
 8013e4a:	3415      	adds	r4, #21
 8013e4c:	42a5      	cmp	r5, r4
 8013e4e:	bf38      	it	cc
 8013e50:	2304      	movcc	r3, #4
 8013e52:	4419      	add	r1, r3
 8013e54:	4473      	add	r3, lr
 8013e56:	469e      	mov	lr, r3
 8013e58:	460d      	mov	r5, r1
 8013e5a:	4565      	cmp	r5, ip
 8013e5c:	d30e      	bcc.n	8013e7c <__mdiff+0xe8>
 8013e5e:	f10c 0203 	add.w	r2, ip, #3
 8013e62:	1a52      	subs	r2, r2, r1
 8013e64:	f022 0203 	bic.w	r2, r2, #3
 8013e68:	3903      	subs	r1, #3
 8013e6a:	458c      	cmp	ip, r1
 8013e6c:	bf38      	it	cc
 8013e6e:	2200      	movcc	r2, #0
 8013e70:	441a      	add	r2, r3
 8013e72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013e76:	b17b      	cbz	r3, 8013e98 <__mdiff+0x104>
 8013e78:	6106      	str	r6, [r0, #16]
 8013e7a:	e7a5      	b.n	8013dc8 <__mdiff+0x34>
 8013e7c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013e80:	fa17 f488 	uxtah	r4, r7, r8
 8013e84:	1422      	asrs	r2, r4, #16
 8013e86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013e8a:	b2a4      	uxth	r4, r4
 8013e8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013e90:	f84e 4b04 	str.w	r4, [lr], #4
 8013e94:	1417      	asrs	r7, r2, #16
 8013e96:	e7e0      	b.n	8013e5a <__mdiff+0xc6>
 8013e98:	3e01      	subs	r6, #1
 8013e9a:	e7ea      	b.n	8013e72 <__mdiff+0xde>
 8013e9c:	0801d704 	.word	0x0801d704
 8013ea0:	0801d7f8 	.word	0x0801d7f8

08013ea4 <__ulp>:
 8013ea4:	b082      	sub	sp, #8
 8013ea6:	ed8d 0b00 	vstr	d0, [sp]
 8013eaa:	9b01      	ldr	r3, [sp, #4]
 8013eac:	4912      	ldr	r1, [pc, #72]	; (8013ef8 <__ulp+0x54>)
 8013eae:	4019      	ands	r1, r3
 8013eb0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013eb4:	2900      	cmp	r1, #0
 8013eb6:	dd05      	ble.n	8013ec4 <__ulp+0x20>
 8013eb8:	2200      	movs	r2, #0
 8013eba:	460b      	mov	r3, r1
 8013ebc:	ec43 2b10 	vmov	d0, r2, r3
 8013ec0:	b002      	add	sp, #8
 8013ec2:	4770      	bx	lr
 8013ec4:	4249      	negs	r1, r1
 8013ec6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013eca:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013ece:	f04f 0200 	mov.w	r2, #0
 8013ed2:	f04f 0300 	mov.w	r3, #0
 8013ed6:	da04      	bge.n	8013ee2 <__ulp+0x3e>
 8013ed8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013edc:	fa41 f300 	asr.w	r3, r1, r0
 8013ee0:	e7ec      	b.n	8013ebc <__ulp+0x18>
 8013ee2:	f1a0 0114 	sub.w	r1, r0, #20
 8013ee6:	291e      	cmp	r1, #30
 8013ee8:	bfda      	itte	le
 8013eea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013eee:	fa20 f101 	lsrle.w	r1, r0, r1
 8013ef2:	2101      	movgt	r1, #1
 8013ef4:	460a      	mov	r2, r1
 8013ef6:	e7e1      	b.n	8013ebc <__ulp+0x18>
 8013ef8:	7ff00000 	.word	0x7ff00000

08013efc <__b2d>:
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013efe:	6905      	ldr	r5, [r0, #16]
 8013f00:	f100 0714 	add.w	r7, r0, #20
 8013f04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f08:	1f2e      	subs	r6, r5, #4
 8013f0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f0e:	4620      	mov	r0, r4
 8013f10:	f7ff fd52 	bl	80139b8 <__hi0bits>
 8013f14:	f1c0 0320 	rsb	r3, r0, #32
 8013f18:	280a      	cmp	r0, #10
 8013f1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013f98 <__b2d+0x9c>
 8013f1e:	600b      	str	r3, [r1, #0]
 8013f20:	dc14      	bgt.n	8013f4c <__b2d+0x50>
 8013f22:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f26:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f2a:	42b7      	cmp	r7, r6
 8013f2c:	ea41 030c 	orr.w	r3, r1, ip
 8013f30:	bf34      	ite	cc
 8013f32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f36:	2100      	movcs	r1, #0
 8013f38:	3015      	adds	r0, #21
 8013f3a:	fa04 f000 	lsl.w	r0, r4, r0
 8013f3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013f42:	ea40 0201 	orr.w	r2, r0, r1
 8013f46:	ec43 2b10 	vmov	d0, r2, r3
 8013f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f4c:	42b7      	cmp	r7, r6
 8013f4e:	bf3a      	itte	cc
 8013f50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f54:	f1a5 0608 	subcc.w	r6, r5, #8
 8013f58:	2100      	movcs	r1, #0
 8013f5a:	380b      	subs	r0, #11
 8013f5c:	d017      	beq.n	8013f8e <__b2d+0x92>
 8013f5e:	f1c0 0c20 	rsb	ip, r0, #32
 8013f62:	fa04 f500 	lsl.w	r5, r4, r0
 8013f66:	42be      	cmp	r6, r7
 8013f68:	fa21 f40c 	lsr.w	r4, r1, ip
 8013f6c:	ea45 0504 	orr.w	r5, r5, r4
 8013f70:	bf8c      	ite	hi
 8013f72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013f76:	2400      	movls	r4, #0
 8013f78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013f7c:	fa01 f000 	lsl.w	r0, r1, r0
 8013f80:	fa24 f40c 	lsr.w	r4, r4, ip
 8013f84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013f88:	ea40 0204 	orr.w	r2, r0, r4
 8013f8c:	e7db      	b.n	8013f46 <__b2d+0x4a>
 8013f8e:	ea44 030c 	orr.w	r3, r4, ip
 8013f92:	460a      	mov	r2, r1
 8013f94:	e7d7      	b.n	8013f46 <__b2d+0x4a>
 8013f96:	bf00      	nop
 8013f98:	3ff00000 	.word	0x3ff00000

08013f9c <__d2b>:
 8013f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fa0:	4689      	mov	r9, r1
 8013fa2:	2101      	movs	r1, #1
 8013fa4:	ec57 6b10 	vmov	r6, r7, d0
 8013fa8:	4690      	mov	r8, r2
 8013faa:	f7ff fc0f 	bl	80137cc <_Balloc>
 8013fae:	4604      	mov	r4, r0
 8013fb0:	b930      	cbnz	r0, 8013fc0 <__d2b+0x24>
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	4b25      	ldr	r3, [pc, #148]	; (801404c <__d2b+0xb0>)
 8013fb6:	4826      	ldr	r0, [pc, #152]	; (8014050 <__d2b+0xb4>)
 8013fb8:	f240 310a 	movw	r1, #778	; 0x30a
 8013fbc:	f7fb ff02 	bl	800fdc4 <__assert_func>
 8013fc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013fc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013fc8:	bb35      	cbnz	r5, 8014018 <__d2b+0x7c>
 8013fca:	2e00      	cmp	r6, #0
 8013fcc:	9301      	str	r3, [sp, #4]
 8013fce:	d028      	beq.n	8014022 <__d2b+0x86>
 8013fd0:	4668      	mov	r0, sp
 8013fd2:	9600      	str	r6, [sp, #0]
 8013fd4:	f7ff fd10 	bl	80139f8 <__lo0bits>
 8013fd8:	9900      	ldr	r1, [sp, #0]
 8013fda:	b300      	cbz	r0, 801401e <__d2b+0x82>
 8013fdc:	9a01      	ldr	r2, [sp, #4]
 8013fde:	f1c0 0320 	rsb	r3, r0, #32
 8013fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8013fe6:	430b      	orrs	r3, r1
 8013fe8:	40c2      	lsrs	r2, r0
 8013fea:	6163      	str	r3, [r4, #20]
 8013fec:	9201      	str	r2, [sp, #4]
 8013fee:	9b01      	ldr	r3, [sp, #4]
 8013ff0:	61a3      	str	r3, [r4, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	bf14      	ite	ne
 8013ff6:	2202      	movne	r2, #2
 8013ff8:	2201      	moveq	r2, #1
 8013ffa:	6122      	str	r2, [r4, #16]
 8013ffc:	b1d5      	cbz	r5, 8014034 <__d2b+0x98>
 8013ffe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014002:	4405      	add	r5, r0
 8014004:	f8c9 5000 	str.w	r5, [r9]
 8014008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801400c:	f8c8 0000 	str.w	r0, [r8]
 8014010:	4620      	mov	r0, r4
 8014012:	b003      	add	sp, #12
 8014014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801401c:	e7d5      	b.n	8013fca <__d2b+0x2e>
 801401e:	6161      	str	r1, [r4, #20]
 8014020:	e7e5      	b.n	8013fee <__d2b+0x52>
 8014022:	a801      	add	r0, sp, #4
 8014024:	f7ff fce8 	bl	80139f8 <__lo0bits>
 8014028:	9b01      	ldr	r3, [sp, #4]
 801402a:	6163      	str	r3, [r4, #20]
 801402c:	2201      	movs	r2, #1
 801402e:	6122      	str	r2, [r4, #16]
 8014030:	3020      	adds	r0, #32
 8014032:	e7e3      	b.n	8013ffc <__d2b+0x60>
 8014034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801403c:	f8c9 0000 	str.w	r0, [r9]
 8014040:	6918      	ldr	r0, [r3, #16]
 8014042:	f7ff fcb9 	bl	80139b8 <__hi0bits>
 8014046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801404a:	e7df      	b.n	801400c <__d2b+0x70>
 801404c:	0801d704 	.word	0x0801d704
 8014050:	0801d7f8 	.word	0x0801d7f8

08014054 <__ratio>:
 8014054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014058:	468a      	mov	sl, r1
 801405a:	4669      	mov	r1, sp
 801405c:	4683      	mov	fp, r0
 801405e:	f7ff ff4d 	bl	8013efc <__b2d>
 8014062:	a901      	add	r1, sp, #4
 8014064:	4650      	mov	r0, sl
 8014066:	ec59 8b10 	vmov	r8, r9, d0
 801406a:	ee10 6a10 	vmov	r6, s0
 801406e:	f7ff ff45 	bl	8013efc <__b2d>
 8014072:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014076:	f8da 2010 	ldr.w	r2, [sl, #16]
 801407a:	eba3 0c02 	sub.w	ip, r3, r2
 801407e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014082:	1a9b      	subs	r3, r3, r2
 8014084:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014088:	ec55 4b10 	vmov	r4, r5, d0
 801408c:	2b00      	cmp	r3, #0
 801408e:	ee10 0a10 	vmov	r0, s0
 8014092:	bfce      	itee	gt
 8014094:	464a      	movgt	r2, r9
 8014096:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801409a:	462a      	movle	r2, r5
 801409c:	464f      	mov	r7, r9
 801409e:	4629      	mov	r1, r5
 80140a0:	bfcc      	ite	gt
 80140a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80140a6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80140aa:	ec47 6b17 	vmov	d7, r6, r7
 80140ae:	ec41 0b16 	vmov	d6, r0, r1
 80140b2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80140b6:	b003      	add	sp, #12
 80140b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140bc <__copybits>:
 80140bc:	3901      	subs	r1, #1
 80140be:	b570      	push	{r4, r5, r6, lr}
 80140c0:	1149      	asrs	r1, r1, #5
 80140c2:	6914      	ldr	r4, [r2, #16]
 80140c4:	3101      	adds	r1, #1
 80140c6:	f102 0314 	add.w	r3, r2, #20
 80140ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80140ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140d2:	1f05      	subs	r5, r0, #4
 80140d4:	42a3      	cmp	r3, r4
 80140d6:	d30c      	bcc.n	80140f2 <__copybits+0x36>
 80140d8:	1aa3      	subs	r3, r4, r2
 80140da:	3b11      	subs	r3, #17
 80140dc:	f023 0303 	bic.w	r3, r3, #3
 80140e0:	3211      	adds	r2, #17
 80140e2:	42a2      	cmp	r2, r4
 80140e4:	bf88      	it	hi
 80140e6:	2300      	movhi	r3, #0
 80140e8:	4418      	add	r0, r3
 80140ea:	2300      	movs	r3, #0
 80140ec:	4288      	cmp	r0, r1
 80140ee:	d305      	bcc.n	80140fc <__copybits+0x40>
 80140f0:	bd70      	pop	{r4, r5, r6, pc}
 80140f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80140f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80140fa:	e7eb      	b.n	80140d4 <__copybits+0x18>
 80140fc:	f840 3b04 	str.w	r3, [r0], #4
 8014100:	e7f4      	b.n	80140ec <__copybits+0x30>

08014102 <__any_on>:
 8014102:	f100 0214 	add.w	r2, r0, #20
 8014106:	6900      	ldr	r0, [r0, #16]
 8014108:	114b      	asrs	r3, r1, #5
 801410a:	4298      	cmp	r0, r3
 801410c:	b510      	push	{r4, lr}
 801410e:	db11      	blt.n	8014134 <__any_on+0x32>
 8014110:	dd0a      	ble.n	8014128 <__any_on+0x26>
 8014112:	f011 011f 	ands.w	r1, r1, #31
 8014116:	d007      	beq.n	8014128 <__any_on+0x26>
 8014118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801411c:	fa24 f001 	lsr.w	r0, r4, r1
 8014120:	fa00 f101 	lsl.w	r1, r0, r1
 8014124:	428c      	cmp	r4, r1
 8014126:	d10b      	bne.n	8014140 <__any_on+0x3e>
 8014128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801412c:	4293      	cmp	r3, r2
 801412e:	d803      	bhi.n	8014138 <__any_on+0x36>
 8014130:	2000      	movs	r0, #0
 8014132:	bd10      	pop	{r4, pc}
 8014134:	4603      	mov	r3, r0
 8014136:	e7f7      	b.n	8014128 <__any_on+0x26>
 8014138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801413c:	2900      	cmp	r1, #0
 801413e:	d0f5      	beq.n	801412c <__any_on+0x2a>
 8014140:	2001      	movs	r0, #1
 8014142:	e7f6      	b.n	8014132 <__any_on+0x30>

08014144 <_calloc_r>:
 8014144:	b513      	push	{r0, r1, r4, lr}
 8014146:	434a      	muls	r2, r1
 8014148:	4611      	mov	r1, r2
 801414a:	9201      	str	r2, [sp, #4]
 801414c:	f7fb ff24 	bl	800ff98 <_malloc_r>
 8014150:	4604      	mov	r4, r0
 8014152:	b118      	cbz	r0, 801415c <_calloc_r+0x18>
 8014154:	9a01      	ldr	r2, [sp, #4]
 8014156:	2100      	movs	r1, #0
 8014158:	f7fb fec6 	bl	800fee8 <memset>
 801415c:	4620      	mov	r0, r4
 801415e:	b002      	add	sp, #8
 8014160:	bd10      	pop	{r4, pc}

08014162 <_realloc_r>:
 8014162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014164:	4607      	mov	r7, r0
 8014166:	4614      	mov	r4, r2
 8014168:	460e      	mov	r6, r1
 801416a:	b921      	cbnz	r1, 8014176 <_realloc_r+0x14>
 801416c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014170:	4611      	mov	r1, r2
 8014172:	f7fb bf11 	b.w	800ff98 <_malloc_r>
 8014176:	b922      	cbnz	r2, 8014182 <_realloc_r+0x20>
 8014178:	f7fb febe 	bl	800fef8 <_free_r>
 801417c:	4625      	mov	r5, r4
 801417e:	4628      	mov	r0, r5
 8014180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014182:	f000 fa63 	bl	801464c <_malloc_usable_size_r>
 8014186:	42a0      	cmp	r0, r4
 8014188:	d20f      	bcs.n	80141aa <_realloc_r+0x48>
 801418a:	4621      	mov	r1, r4
 801418c:	4638      	mov	r0, r7
 801418e:	f7fb ff03 	bl	800ff98 <_malloc_r>
 8014192:	4605      	mov	r5, r0
 8014194:	2800      	cmp	r0, #0
 8014196:	d0f2      	beq.n	801417e <_realloc_r+0x1c>
 8014198:	4631      	mov	r1, r6
 801419a:	4622      	mov	r2, r4
 801419c:	f7fb fe7c 	bl	800fe98 <memcpy>
 80141a0:	4631      	mov	r1, r6
 80141a2:	4638      	mov	r0, r7
 80141a4:	f7fb fea8 	bl	800fef8 <_free_r>
 80141a8:	e7e9      	b.n	801417e <_realloc_r+0x1c>
 80141aa:	4635      	mov	r5, r6
 80141ac:	e7e7      	b.n	801417e <_realloc_r+0x1c>

080141ae <__ssputs_r>:
 80141ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141b2:	688e      	ldr	r6, [r1, #8]
 80141b4:	429e      	cmp	r6, r3
 80141b6:	4682      	mov	sl, r0
 80141b8:	460c      	mov	r4, r1
 80141ba:	4690      	mov	r8, r2
 80141bc:	461f      	mov	r7, r3
 80141be:	d838      	bhi.n	8014232 <__ssputs_r+0x84>
 80141c0:	898a      	ldrh	r2, [r1, #12]
 80141c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80141c6:	d032      	beq.n	801422e <__ssputs_r+0x80>
 80141c8:	6825      	ldr	r5, [r4, #0]
 80141ca:	6909      	ldr	r1, [r1, #16]
 80141cc:	eba5 0901 	sub.w	r9, r5, r1
 80141d0:	6965      	ldr	r5, [r4, #20]
 80141d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80141da:	3301      	adds	r3, #1
 80141dc:	444b      	add	r3, r9
 80141de:	106d      	asrs	r5, r5, #1
 80141e0:	429d      	cmp	r5, r3
 80141e2:	bf38      	it	cc
 80141e4:	461d      	movcc	r5, r3
 80141e6:	0553      	lsls	r3, r2, #21
 80141e8:	d531      	bpl.n	801424e <__ssputs_r+0xa0>
 80141ea:	4629      	mov	r1, r5
 80141ec:	f7fb fed4 	bl	800ff98 <_malloc_r>
 80141f0:	4606      	mov	r6, r0
 80141f2:	b950      	cbnz	r0, 801420a <__ssputs_r+0x5c>
 80141f4:	230c      	movs	r3, #12
 80141f6:	f8ca 3000 	str.w	r3, [sl]
 80141fa:	89a3      	ldrh	r3, [r4, #12]
 80141fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014200:	81a3      	strh	r3, [r4, #12]
 8014202:	f04f 30ff 	mov.w	r0, #4294967295
 8014206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420a:	6921      	ldr	r1, [r4, #16]
 801420c:	464a      	mov	r2, r9
 801420e:	f7fb fe43 	bl	800fe98 <memcpy>
 8014212:	89a3      	ldrh	r3, [r4, #12]
 8014214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801421c:	81a3      	strh	r3, [r4, #12]
 801421e:	6126      	str	r6, [r4, #16]
 8014220:	6165      	str	r5, [r4, #20]
 8014222:	444e      	add	r6, r9
 8014224:	eba5 0509 	sub.w	r5, r5, r9
 8014228:	6026      	str	r6, [r4, #0]
 801422a:	60a5      	str	r5, [r4, #8]
 801422c:	463e      	mov	r6, r7
 801422e:	42be      	cmp	r6, r7
 8014230:	d900      	bls.n	8014234 <__ssputs_r+0x86>
 8014232:	463e      	mov	r6, r7
 8014234:	4632      	mov	r2, r6
 8014236:	6820      	ldr	r0, [r4, #0]
 8014238:	4641      	mov	r1, r8
 801423a:	f7fb fe3b 	bl	800feb4 <memmove>
 801423e:	68a3      	ldr	r3, [r4, #8]
 8014240:	6822      	ldr	r2, [r4, #0]
 8014242:	1b9b      	subs	r3, r3, r6
 8014244:	4432      	add	r2, r6
 8014246:	60a3      	str	r3, [r4, #8]
 8014248:	6022      	str	r2, [r4, #0]
 801424a:	2000      	movs	r0, #0
 801424c:	e7db      	b.n	8014206 <__ssputs_r+0x58>
 801424e:	462a      	mov	r2, r5
 8014250:	f7ff ff87 	bl	8014162 <_realloc_r>
 8014254:	4606      	mov	r6, r0
 8014256:	2800      	cmp	r0, #0
 8014258:	d1e1      	bne.n	801421e <__ssputs_r+0x70>
 801425a:	6921      	ldr	r1, [r4, #16]
 801425c:	4650      	mov	r0, sl
 801425e:	f7fb fe4b 	bl	800fef8 <_free_r>
 8014262:	e7c7      	b.n	80141f4 <__ssputs_r+0x46>

08014264 <_svfiprintf_r>:
 8014264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014268:	4698      	mov	r8, r3
 801426a:	898b      	ldrh	r3, [r1, #12]
 801426c:	061b      	lsls	r3, r3, #24
 801426e:	b09d      	sub	sp, #116	; 0x74
 8014270:	4607      	mov	r7, r0
 8014272:	460d      	mov	r5, r1
 8014274:	4614      	mov	r4, r2
 8014276:	d50e      	bpl.n	8014296 <_svfiprintf_r+0x32>
 8014278:	690b      	ldr	r3, [r1, #16]
 801427a:	b963      	cbnz	r3, 8014296 <_svfiprintf_r+0x32>
 801427c:	2140      	movs	r1, #64	; 0x40
 801427e:	f7fb fe8b 	bl	800ff98 <_malloc_r>
 8014282:	6028      	str	r0, [r5, #0]
 8014284:	6128      	str	r0, [r5, #16]
 8014286:	b920      	cbnz	r0, 8014292 <_svfiprintf_r+0x2e>
 8014288:	230c      	movs	r3, #12
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	f04f 30ff 	mov.w	r0, #4294967295
 8014290:	e0d1      	b.n	8014436 <_svfiprintf_r+0x1d2>
 8014292:	2340      	movs	r3, #64	; 0x40
 8014294:	616b      	str	r3, [r5, #20]
 8014296:	2300      	movs	r3, #0
 8014298:	9309      	str	r3, [sp, #36]	; 0x24
 801429a:	2320      	movs	r3, #32
 801429c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80142a4:	2330      	movs	r3, #48	; 0x30
 80142a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014450 <_svfiprintf_r+0x1ec>
 80142aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142ae:	f04f 0901 	mov.w	r9, #1
 80142b2:	4623      	mov	r3, r4
 80142b4:	469a      	mov	sl, r3
 80142b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142ba:	b10a      	cbz	r2, 80142c0 <_svfiprintf_r+0x5c>
 80142bc:	2a25      	cmp	r2, #37	; 0x25
 80142be:	d1f9      	bne.n	80142b4 <_svfiprintf_r+0x50>
 80142c0:	ebba 0b04 	subs.w	fp, sl, r4
 80142c4:	d00b      	beq.n	80142de <_svfiprintf_r+0x7a>
 80142c6:	465b      	mov	r3, fp
 80142c8:	4622      	mov	r2, r4
 80142ca:	4629      	mov	r1, r5
 80142cc:	4638      	mov	r0, r7
 80142ce:	f7ff ff6e 	bl	80141ae <__ssputs_r>
 80142d2:	3001      	adds	r0, #1
 80142d4:	f000 80aa 	beq.w	801442c <_svfiprintf_r+0x1c8>
 80142d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142da:	445a      	add	r2, fp
 80142dc:	9209      	str	r2, [sp, #36]	; 0x24
 80142de:	f89a 3000 	ldrb.w	r3, [sl]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	f000 80a2 	beq.w	801442c <_svfiprintf_r+0x1c8>
 80142e8:	2300      	movs	r3, #0
 80142ea:	f04f 32ff 	mov.w	r2, #4294967295
 80142ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142f2:	f10a 0a01 	add.w	sl, sl, #1
 80142f6:	9304      	str	r3, [sp, #16]
 80142f8:	9307      	str	r3, [sp, #28]
 80142fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142fe:	931a      	str	r3, [sp, #104]	; 0x68
 8014300:	4654      	mov	r4, sl
 8014302:	2205      	movs	r2, #5
 8014304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014308:	4851      	ldr	r0, [pc, #324]	; (8014450 <_svfiprintf_r+0x1ec>)
 801430a:	f7ec f801 	bl	8000310 <memchr>
 801430e:	9a04      	ldr	r2, [sp, #16]
 8014310:	b9d8      	cbnz	r0, 801434a <_svfiprintf_r+0xe6>
 8014312:	06d0      	lsls	r0, r2, #27
 8014314:	bf44      	itt	mi
 8014316:	2320      	movmi	r3, #32
 8014318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801431c:	0711      	lsls	r1, r2, #28
 801431e:	bf44      	itt	mi
 8014320:	232b      	movmi	r3, #43	; 0x2b
 8014322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014326:	f89a 3000 	ldrb.w	r3, [sl]
 801432a:	2b2a      	cmp	r3, #42	; 0x2a
 801432c:	d015      	beq.n	801435a <_svfiprintf_r+0xf6>
 801432e:	9a07      	ldr	r2, [sp, #28]
 8014330:	4654      	mov	r4, sl
 8014332:	2000      	movs	r0, #0
 8014334:	f04f 0c0a 	mov.w	ip, #10
 8014338:	4621      	mov	r1, r4
 801433a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801433e:	3b30      	subs	r3, #48	; 0x30
 8014340:	2b09      	cmp	r3, #9
 8014342:	d94e      	bls.n	80143e2 <_svfiprintf_r+0x17e>
 8014344:	b1b0      	cbz	r0, 8014374 <_svfiprintf_r+0x110>
 8014346:	9207      	str	r2, [sp, #28]
 8014348:	e014      	b.n	8014374 <_svfiprintf_r+0x110>
 801434a:	eba0 0308 	sub.w	r3, r0, r8
 801434e:	fa09 f303 	lsl.w	r3, r9, r3
 8014352:	4313      	orrs	r3, r2
 8014354:	9304      	str	r3, [sp, #16]
 8014356:	46a2      	mov	sl, r4
 8014358:	e7d2      	b.n	8014300 <_svfiprintf_r+0x9c>
 801435a:	9b03      	ldr	r3, [sp, #12]
 801435c:	1d19      	adds	r1, r3, #4
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	9103      	str	r1, [sp, #12]
 8014362:	2b00      	cmp	r3, #0
 8014364:	bfbb      	ittet	lt
 8014366:	425b      	neglt	r3, r3
 8014368:	f042 0202 	orrlt.w	r2, r2, #2
 801436c:	9307      	strge	r3, [sp, #28]
 801436e:	9307      	strlt	r3, [sp, #28]
 8014370:	bfb8      	it	lt
 8014372:	9204      	strlt	r2, [sp, #16]
 8014374:	7823      	ldrb	r3, [r4, #0]
 8014376:	2b2e      	cmp	r3, #46	; 0x2e
 8014378:	d10c      	bne.n	8014394 <_svfiprintf_r+0x130>
 801437a:	7863      	ldrb	r3, [r4, #1]
 801437c:	2b2a      	cmp	r3, #42	; 0x2a
 801437e:	d135      	bne.n	80143ec <_svfiprintf_r+0x188>
 8014380:	9b03      	ldr	r3, [sp, #12]
 8014382:	1d1a      	adds	r2, r3, #4
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	9203      	str	r2, [sp, #12]
 8014388:	2b00      	cmp	r3, #0
 801438a:	bfb8      	it	lt
 801438c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014390:	3402      	adds	r4, #2
 8014392:	9305      	str	r3, [sp, #20]
 8014394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014460 <_svfiprintf_r+0x1fc>
 8014398:	7821      	ldrb	r1, [r4, #0]
 801439a:	2203      	movs	r2, #3
 801439c:	4650      	mov	r0, sl
 801439e:	f7eb ffb7 	bl	8000310 <memchr>
 80143a2:	b140      	cbz	r0, 80143b6 <_svfiprintf_r+0x152>
 80143a4:	2340      	movs	r3, #64	; 0x40
 80143a6:	eba0 000a 	sub.w	r0, r0, sl
 80143aa:	fa03 f000 	lsl.w	r0, r3, r0
 80143ae:	9b04      	ldr	r3, [sp, #16]
 80143b0:	4303      	orrs	r3, r0
 80143b2:	3401      	adds	r4, #1
 80143b4:	9304      	str	r3, [sp, #16]
 80143b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ba:	4826      	ldr	r0, [pc, #152]	; (8014454 <_svfiprintf_r+0x1f0>)
 80143bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143c0:	2206      	movs	r2, #6
 80143c2:	f7eb ffa5 	bl	8000310 <memchr>
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d038      	beq.n	801443c <_svfiprintf_r+0x1d8>
 80143ca:	4b23      	ldr	r3, [pc, #140]	; (8014458 <_svfiprintf_r+0x1f4>)
 80143cc:	bb1b      	cbnz	r3, 8014416 <_svfiprintf_r+0x1b2>
 80143ce:	9b03      	ldr	r3, [sp, #12]
 80143d0:	3307      	adds	r3, #7
 80143d2:	f023 0307 	bic.w	r3, r3, #7
 80143d6:	3308      	adds	r3, #8
 80143d8:	9303      	str	r3, [sp, #12]
 80143da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143dc:	4433      	add	r3, r6
 80143de:	9309      	str	r3, [sp, #36]	; 0x24
 80143e0:	e767      	b.n	80142b2 <_svfiprintf_r+0x4e>
 80143e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80143e6:	460c      	mov	r4, r1
 80143e8:	2001      	movs	r0, #1
 80143ea:	e7a5      	b.n	8014338 <_svfiprintf_r+0xd4>
 80143ec:	2300      	movs	r3, #0
 80143ee:	3401      	adds	r4, #1
 80143f0:	9305      	str	r3, [sp, #20]
 80143f2:	4619      	mov	r1, r3
 80143f4:	f04f 0c0a 	mov.w	ip, #10
 80143f8:	4620      	mov	r0, r4
 80143fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143fe:	3a30      	subs	r2, #48	; 0x30
 8014400:	2a09      	cmp	r2, #9
 8014402:	d903      	bls.n	801440c <_svfiprintf_r+0x1a8>
 8014404:	2b00      	cmp	r3, #0
 8014406:	d0c5      	beq.n	8014394 <_svfiprintf_r+0x130>
 8014408:	9105      	str	r1, [sp, #20]
 801440a:	e7c3      	b.n	8014394 <_svfiprintf_r+0x130>
 801440c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014410:	4604      	mov	r4, r0
 8014412:	2301      	movs	r3, #1
 8014414:	e7f0      	b.n	80143f8 <_svfiprintf_r+0x194>
 8014416:	ab03      	add	r3, sp, #12
 8014418:	9300      	str	r3, [sp, #0]
 801441a:	462a      	mov	r2, r5
 801441c:	4b0f      	ldr	r3, [pc, #60]	; (801445c <_svfiprintf_r+0x1f8>)
 801441e:	a904      	add	r1, sp, #16
 8014420:	4638      	mov	r0, r7
 8014422:	f7fb fffd 	bl	8010420 <_printf_float>
 8014426:	1c42      	adds	r2, r0, #1
 8014428:	4606      	mov	r6, r0
 801442a:	d1d6      	bne.n	80143da <_svfiprintf_r+0x176>
 801442c:	89ab      	ldrh	r3, [r5, #12]
 801442e:	065b      	lsls	r3, r3, #25
 8014430:	f53f af2c 	bmi.w	801428c <_svfiprintf_r+0x28>
 8014434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014436:	b01d      	add	sp, #116	; 0x74
 8014438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801443c:	ab03      	add	r3, sp, #12
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	462a      	mov	r2, r5
 8014442:	4b06      	ldr	r3, [pc, #24]	; (801445c <_svfiprintf_r+0x1f8>)
 8014444:	a904      	add	r1, sp, #16
 8014446:	4638      	mov	r0, r7
 8014448:	f7fc fa76 	bl	8010938 <_printf_i>
 801444c:	e7eb      	b.n	8014426 <_svfiprintf_r+0x1c2>
 801444e:	bf00      	nop
 8014450:	0801d4e4 	.word	0x0801d4e4
 8014454:	0801d4ee 	.word	0x0801d4ee
 8014458:	08010421 	.word	0x08010421
 801445c:	080141af 	.word	0x080141af
 8014460:	0801d4ea 	.word	0x0801d4ea
 8014464:	00000000 	.word	0x00000000

08014468 <nan>:
 8014468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014470 <nan+0x8>
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	00000000 	.word	0x00000000
 8014474:	7ff80000 	.word	0x7ff80000

08014478 <_raise_r>:
 8014478:	291f      	cmp	r1, #31
 801447a:	b538      	push	{r3, r4, r5, lr}
 801447c:	4604      	mov	r4, r0
 801447e:	460d      	mov	r5, r1
 8014480:	d904      	bls.n	801448c <_raise_r+0x14>
 8014482:	2316      	movs	r3, #22
 8014484:	6003      	str	r3, [r0, #0]
 8014486:	f04f 30ff 	mov.w	r0, #4294967295
 801448a:	bd38      	pop	{r3, r4, r5, pc}
 801448c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801448e:	b112      	cbz	r2, 8014496 <_raise_r+0x1e>
 8014490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014494:	b94b      	cbnz	r3, 80144aa <_raise_r+0x32>
 8014496:	4620      	mov	r0, r4
 8014498:	f000 f830 	bl	80144fc <_getpid_r>
 801449c:	462a      	mov	r2, r5
 801449e:	4601      	mov	r1, r0
 80144a0:	4620      	mov	r0, r4
 80144a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144a6:	f000 b817 	b.w	80144d8 <_kill_r>
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d00a      	beq.n	80144c4 <_raise_r+0x4c>
 80144ae:	1c59      	adds	r1, r3, #1
 80144b0:	d103      	bne.n	80144ba <_raise_r+0x42>
 80144b2:	2316      	movs	r3, #22
 80144b4:	6003      	str	r3, [r0, #0]
 80144b6:	2001      	movs	r0, #1
 80144b8:	e7e7      	b.n	801448a <_raise_r+0x12>
 80144ba:	2400      	movs	r4, #0
 80144bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80144c0:	4628      	mov	r0, r5
 80144c2:	4798      	blx	r3
 80144c4:	2000      	movs	r0, #0
 80144c6:	e7e0      	b.n	801448a <_raise_r+0x12>

080144c8 <raise>:
 80144c8:	4b02      	ldr	r3, [pc, #8]	; (80144d4 <raise+0xc>)
 80144ca:	4601      	mov	r1, r0
 80144cc:	6818      	ldr	r0, [r3, #0]
 80144ce:	f7ff bfd3 	b.w	8014478 <_raise_r>
 80144d2:	bf00      	nop
 80144d4:	2400a0e8 	.word	0x2400a0e8

080144d8 <_kill_r>:
 80144d8:	b538      	push	{r3, r4, r5, lr}
 80144da:	4d07      	ldr	r5, [pc, #28]	; (80144f8 <_kill_r+0x20>)
 80144dc:	2300      	movs	r3, #0
 80144de:	4604      	mov	r4, r0
 80144e0:	4608      	mov	r0, r1
 80144e2:	4611      	mov	r1, r2
 80144e4:	602b      	str	r3, [r5, #0]
 80144e6:	f7ed f9e3 	bl	80018b0 <_kill>
 80144ea:	1c43      	adds	r3, r0, #1
 80144ec:	d102      	bne.n	80144f4 <_kill_r+0x1c>
 80144ee:	682b      	ldr	r3, [r5, #0]
 80144f0:	b103      	cbz	r3, 80144f4 <_kill_r+0x1c>
 80144f2:	6023      	str	r3, [r4, #0]
 80144f4:	bd38      	pop	{r3, r4, r5, pc}
 80144f6:	bf00      	nop
 80144f8:	2400f69c 	.word	0x2400f69c

080144fc <_getpid_r>:
 80144fc:	f7ed b9d0 	b.w	80018a0 <_getpid>

08014500 <__sread>:
 8014500:	b510      	push	{r4, lr}
 8014502:	460c      	mov	r4, r1
 8014504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014508:	f000 f8a8 	bl	801465c <_read_r>
 801450c:	2800      	cmp	r0, #0
 801450e:	bfab      	itete	ge
 8014510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014512:	89a3      	ldrhlt	r3, [r4, #12]
 8014514:	181b      	addge	r3, r3, r0
 8014516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801451a:	bfac      	ite	ge
 801451c:	6563      	strge	r3, [r4, #84]	; 0x54
 801451e:	81a3      	strhlt	r3, [r4, #12]
 8014520:	bd10      	pop	{r4, pc}

08014522 <__swrite>:
 8014522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014526:	461f      	mov	r7, r3
 8014528:	898b      	ldrh	r3, [r1, #12]
 801452a:	05db      	lsls	r3, r3, #23
 801452c:	4605      	mov	r5, r0
 801452e:	460c      	mov	r4, r1
 8014530:	4616      	mov	r6, r2
 8014532:	d505      	bpl.n	8014540 <__swrite+0x1e>
 8014534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014538:	2302      	movs	r3, #2
 801453a:	2200      	movs	r2, #0
 801453c:	f000 f874 	bl	8014628 <_lseek_r>
 8014540:	89a3      	ldrh	r3, [r4, #12]
 8014542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801454a:	81a3      	strh	r3, [r4, #12]
 801454c:	4632      	mov	r2, r6
 801454e:	463b      	mov	r3, r7
 8014550:	4628      	mov	r0, r5
 8014552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014556:	f000 b823 	b.w	80145a0 <_write_r>

0801455a <__sseek>:
 801455a:	b510      	push	{r4, lr}
 801455c:	460c      	mov	r4, r1
 801455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014562:	f000 f861 	bl	8014628 <_lseek_r>
 8014566:	1c43      	adds	r3, r0, #1
 8014568:	89a3      	ldrh	r3, [r4, #12]
 801456a:	bf15      	itete	ne
 801456c:	6560      	strne	r0, [r4, #84]	; 0x54
 801456e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014576:	81a3      	strheq	r3, [r4, #12]
 8014578:	bf18      	it	ne
 801457a:	81a3      	strhne	r3, [r4, #12]
 801457c:	bd10      	pop	{r4, pc}

0801457e <__sclose>:
 801457e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014582:	f000 b81f 	b.w	80145c4 <_close_r>

08014586 <__ascii_wctomb>:
 8014586:	b149      	cbz	r1, 801459c <__ascii_wctomb+0x16>
 8014588:	2aff      	cmp	r2, #255	; 0xff
 801458a:	bf85      	ittet	hi
 801458c:	238a      	movhi	r3, #138	; 0x8a
 801458e:	6003      	strhi	r3, [r0, #0]
 8014590:	700a      	strbls	r2, [r1, #0]
 8014592:	f04f 30ff 	movhi.w	r0, #4294967295
 8014596:	bf98      	it	ls
 8014598:	2001      	movls	r0, #1
 801459a:	4770      	bx	lr
 801459c:	4608      	mov	r0, r1
 801459e:	4770      	bx	lr

080145a0 <_write_r>:
 80145a0:	b538      	push	{r3, r4, r5, lr}
 80145a2:	4d07      	ldr	r5, [pc, #28]	; (80145c0 <_write_r+0x20>)
 80145a4:	4604      	mov	r4, r0
 80145a6:	4608      	mov	r0, r1
 80145a8:	4611      	mov	r1, r2
 80145aa:	2200      	movs	r2, #0
 80145ac:	602a      	str	r2, [r5, #0]
 80145ae:	461a      	mov	r2, r3
 80145b0:	f7ed f9b5 	bl	800191e <_write>
 80145b4:	1c43      	adds	r3, r0, #1
 80145b6:	d102      	bne.n	80145be <_write_r+0x1e>
 80145b8:	682b      	ldr	r3, [r5, #0]
 80145ba:	b103      	cbz	r3, 80145be <_write_r+0x1e>
 80145bc:	6023      	str	r3, [r4, #0]
 80145be:	bd38      	pop	{r3, r4, r5, pc}
 80145c0:	2400f69c 	.word	0x2400f69c

080145c4 <_close_r>:
 80145c4:	b538      	push	{r3, r4, r5, lr}
 80145c6:	4d06      	ldr	r5, [pc, #24]	; (80145e0 <_close_r+0x1c>)
 80145c8:	2300      	movs	r3, #0
 80145ca:	4604      	mov	r4, r0
 80145cc:	4608      	mov	r0, r1
 80145ce:	602b      	str	r3, [r5, #0]
 80145d0:	f7ed f9c1 	bl	8001956 <_close>
 80145d4:	1c43      	adds	r3, r0, #1
 80145d6:	d102      	bne.n	80145de <_close_r+0x1a>
 80145d8:	682b      	ldr	r3, [r5, #0]
 80145da:	b103      	cbz	r3, 80145de <_close_r+0x1a>
 80145dc:	6023      	str	r3, [r4, #0]
 80145de:	bd38      	pop	{r3, r4, r5, pc}
 80145e0:	2400f69c 	.word	0x2400f69c

080145e4 <_fstat_r>:
 80145e4:	b538      	push	{r3, r4, r5, lr}
 80145e6:	4d07      	ldr	r5, [pc, #28]	; (8014604 <_fstat_r+0x20>)
 80145e8:	2300      	movs	r3, #0
 80145ea:	4604      	mov	r4, r0
 80145ec:	4608      	mov	r0, r1
 80145ee:	4611      	mov	r1, r2
 80145f0:	602b      	str	r3, [r5, #0]
 80145f2:	f7ed f9bc 	bl	800196e <_fstat>
 80145f6:	1c43      	adds	r3, r0, #1
 80145f8:	d102      	bne.n	8014600 <_fstat_r+0x1c>
 80145fa:	682b      	ldr	r3, [r5, #0]
 80145fc:	b103      	cbz	r3, 8014600 <_fstat_r+0x1c>
 80145fe:	6023      	str	r3, [r4, #0]
 8014600:	bd38      	pop	{r3, r4, r5, pc}
 8014602:	bf00      	nop
 8014604:	2400f69c 	.word	0x2400f69c

08014608 <_isatty_r>:
 8014608:	b538      	push	{r3, r4, r5, lr}
 801460a:	4d06      	ldr	r5, [pc, #24]	; (8014624 <_isatty_r+0x1c>)
 801460c:	2300      	movs	r3, #0
 801460e:	4604      	mov	r4, r0
 8014610:	4608      	mov	r0, r1
 8014612:	602b      	str	r3, [r5, #0]
 8014614:	f7ed f9bb 	bl	800198e <_isatty>
 8014618:	1c43      	adds	r3, r0, #1
 801461a:	d102      	bne.n	8014622 <_isatty_r+0x1a>
 801461c:	682b      	ldr	r3, [r5, #0]
 801461e:	b103      	cbz	r3, 8014622 <_isatty_r+0x1a>
 8014620:	6023      	str	r3, [r4, #0]
 8014622:	bd38      	pop	{r3, r4, r5, pc}
 8014624:	2400f69c 	.word	0x2400f69c

08014628 <_lseek_r>:
 8014628:	b538      	push	{r3, r4, r5, lr}
 801462a:	4d07      	ldr	r5, [pc, #28]	; (8014648 <_lseek_r+0x20>)
 801462c:	4604      	mov	r4, r0
 801462e:	4608      	mov	r0, r1
 8014630:	4611      	mov	r1, r2
 8014632:	2200      	movs	r2, #0
 8014634:	602a      	str	r2, [r5, #0]
 8014636:	461a      	mov	r2, r3
 8014638:	f7ed f9b4 	bl	80019a4 <_lseek>
 801463c:	1c43      	adds	r3, r0, #1
 801463e:	d102      	bne.n	8014646 <_lseek_r+0x1e>
 8014640:	682b      	ldr	r3, [r5, #0]
 8014642:	b103      	cbz	r3, 8014646 <_lseek_r+0x1e>
 8014644:	6023      	str	r3, [r4, #0]
 8014646:	bd38      	pop	{r3, r4, r5, pc}
 8014648:	2400f69c 	.word	0x2400f69c

0801464c <_malloc_usable_size_r>:
 801464c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014650:	1f18      	subs	r0, r3, #4
 8014652:	2b00      	cmp	r3, #0
 8014654:	bfbc      	itt	lt
 8014656:	580b      	ldrlt	r3, [r1, r0]
 8014658:	18c0      	addlt	r0, r0, r3
 801465a:	4770      	bx	lr

0801465c <_read_r>:
 801465c:	b538      	push	{r3, r4, r5, lr}
 801465e:	4d07      	ldr	r5, [pc, #28]	; (801467c <_read_r+0x20>)
 8014660:	4604      	mov	r4, r0
 8014662:	4608      	mov	r0, r1
 8014664:	4611      	mov	r1, r2
 8014666:	2200      	movs	r2, #0
 8014668:	602a      	str	r2, [r5, #0]
 801466a:	461a      	mov	r2, r3
 801466c:	f7ed f93a 	bl	80018e4 <_read>
 8014670:	1c43      	adds	r3, r0, #1
 8014672:	d102      	bne.n	801467a <_read_r+0x1e>
 8014674:	682b      	ldr	r3, [r5, #0]
 8014676:	b103      	cbz	r3, 801467a <_read_r+0x1e>
 8014678:	6023      	str	r3, [r4, #0]
 801467a:	bd38      	pop	{r3, r4, r5, pc}
 801467c:	2400f69c 	.word	0x2400f69c

08014680 <fmax>:
 8014680:	b508      	push	{r3, lr}
 8014682:	ed2d 8b04 	vpush	{d8-d9}
 8014686:	eeb0 8b40 	vmov.f64	d8, d0
 801468a:	eeb0 9b41 	vmov.f64	d9, d1
 801468e:	f000 f82d 	bl	80146ec <__fpclassifyd>
 8014692:	b148      	cbz	r0, 80146a8 <fmax+0x28>
 8014694:	eeb0 0b49 	vmov.f64	d0, d9
 8014698:	f000 f828 	bl	80146ec <__fpclassifyd>
 801469c:	b130      	cbz	r0, 80146ac <fmax+0x2c>
 801469e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80146a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a6:	dc01      	bgt.n	80146ac <fmax+0x2c>
 80146a8:	eeb0 8b49 	vmov.f64	d8, d9
 80146ac:	eeb0 0b48 	vmov.f64	d0, d8
 80146b0:	ecbd 8b04 	vpop	{d8-d9}
 80146b4:	bd08      	pop	{r3, pc}

080146b6 <fmin>:
 80146b6:	b508      	push	{r3, lr}
 80146b8:	ed2d 8b04 	vpush	{d8-d9}
 80146bc:	eeb0 8b40 	vmov.f64	d8, d0
 80146c0:	eeb0 9b41 	vmov.f64	d9, d1
 80146c4:	f000 f812 	bl	80146ec <__fpclassifyd>
 80146c8:	b148      	cbz	r0, 80146de <fmin+0x28>
 80146ca:	eeb0 0b49 	vmov.f64	d0, d9
 80146ce:	f000 f80d 	bl	80146ec <__fpclassifyd>
 80146d2:	b130      	cbz	r0, 80146e2 <fmin+0x2c>
 80146d4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80146d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146dc:	d401      	bmi.n	80146e2 <fmin+0x2c>
 80146de:	eeb0 8b49 	vmov.f64	d8, d9
 80146e2:	eeb0 0b48 	vmov.f64	d0, d8
 80146e6:	ecbd 8b04 	vpop	{d8-d9}
 80146ea:	bd08      	pop	{r3, pc}

080146ec <__fpclassifyd>:
 80146ec:	ec51 0b10 	vmov	r0, r1, d0
 80146f0:	b510      	push	{r4, lr}
 80146f2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80146f6:	460b      	mov	r3, r1
 80146f8:	d019      	beq.n	801472e <__fpclassifyd+0x42>
 80146fa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80146fe:	490e      	ldr	r1, [pc, #56]	; (8014738 <__fpclassifyd+0x4c>)
 8014700:	428a      	cmp	r2, r1
 8014702:	d90e      	bls.n	8014722 <__fpclassifyd+0x36>
 8014704:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8014708:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801470c:	428a      	cmp	r2, r1
 801470e:	d908      	bls.n	8014722 <__fpclassifyd+0x36>
 8014710:	4a0a      	ldr	r2, [pc, #40]	; (801473c <__fpclassifyd+0x50>)
 8014712:	4213      	tst	r3, r2
 8014714:	d007      	beq.n	8014726 <__fpclassifyd+0x3a>
 8014716:	4294      	cmp	r4, r2
 8014718:	d107      	bne.n	801472a <__fpclassifyd+0x3e>
 801471a:	fab0 f080 	clz	r0, r0
 801471e:	0940      	lsrs	r0, r0, #5
 8014720:	bd10      	pop	{r4, pc}
 8014722:	2004      	movs	r0, #4
 8014724:	e7fc      	b.n	8014720 <__fpclassifyd+0x34>
 8014726:	2003      	movs	r0, #3
 8014728:	e7fa      	b.n	8014720 <__fpclassifyd+0x34>
 801472a:	2000      	movs	r0, #0
 801472c:	e7f8      	b.n	8014720 <__fpclassifyd+0x34>
 801472e:	2800      	cmp	r0, #0
 8014730:	d1ee      	bne.n	8014710 <__fpclassifyd+0x24>
 8014732:	2002      	movs	r0, #2
 8014734:	e7f4      	b.n	8014720 <__fpclassifyd+0x34>
 8014736:	bf00      	nop
 8014738:	7fdfffff 	.word	0x7fdfffff
 801473c:	7ff00000 	.word	0x7ff00000

08014740 <_init>:
 8014740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014742:	bf00      	nop
 8014744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014746:	bc08      	pop	{r3}
 8014748:	469e      	mov	lr, r3
 801474a:	4770      	bx	lr

0801474c <_fini>:
 801474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801474e:	bf00      	nop
 8014750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014752:	bc08      	pop	{r3}
 8014754:	469e      	mov	lr, r3
 8014756:	4770      	bx	lr
