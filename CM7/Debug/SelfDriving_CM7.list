
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008f14  08018fe0  08018fe0  00028fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021ef4  08021ef4  0004a398  2**0
                  CONTENTS
  4 .ARM          00000008  08021ef4  08021ef4  00031ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021efc  08021efc  0004a398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021efc  08021efc  00031efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021f00  08021f00  00031f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2d8  24000000  08021f04  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2d8  0802c1dc  0004a2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a338  0802c23c  0004a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004888  2400a398  0802c29c  0004a398  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400ec20  0802c29c  0004ec20  2**0
                  ALLOC
 13 .data_RAM_D2  00000000  30000000  30000000  0004a398  2**0
                  CONTENTS
 14 .bss_RAM_D2   00000000  30000000  30000000  0004a398  2**0
                  CONTENTS
 15 .openamp_section 0000008c  38000000  0802c29c  00050000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0004a398  2**0
                  CONTENTS, READONLY
 17 .debug_info   00091f3f  00000000  00000000  0004a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000ca00  00000000  00000000  000dc305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002e70  00000000  00000000  000e8d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002a40  00000000  00000000  000ebb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00050c26  00000000  00000000  000ee5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00055715  00000000  00000000  0013f1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0019fef7  00000000  00000000  001948f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  003347ea  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d26c  00000000  00000000  00334840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a398 	.word	0x2400a398
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018fc8 	.word	0x08018fc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a39c 	.word	0x2400a39c
 80002dc:	08018fc8 	.word	0x08018fc8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400a5b8 	.word	0x2400a5b8
 8000acc:	2400a3b4 	.word	0x2400a3b4
 8000ad0:	2400a600 	.word	0x2400a600

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f013 fae7 	bl	80140ac <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400a600 	.word	0x2400a600
 8000b00:	2400a5bc 	.word	0x2400a5bc
 8000b04:	2400a5b8 	.word	0x2400a5b8

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400a5bc 	.word	0x2400a5bc

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f013 fa96 	bl	8014070 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400a5c0 	.word	0x2400a5c0
 8000b60:	2400a5bc 	.word	0x2400a5bc

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f013 fe61 	bl	8014848 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400a5b4 	.word	0x2400a5b4
 8000b94:	2400a3b4 	.word	0x2400a3b4

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 fe04 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fe1b 	bl	8002936 <HAL_NVIC_EnableIRQ>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	58024400 	.word	0x58024400

08000d0c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d12:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <MX_ETH_Init+0x84>)
 8000d14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d24:	22e1      	movs	r2, #225	; 0xe1
 8000d26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d3c:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_ETH_Init+0x8c>)
 8000d4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d5c:	f003 fd88 	bl	8004870 <HAL_ETH_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d66:	f000 fd66 	bl	8001836 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d70:	f013 fd92 	bl	8014898 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d76:	2221      	movs	r2, #33	; 0x21
 8000d78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2400a4a8 	.word	0x2400a4a8
 8000d90:	40028000 	.word	0x40028000
 8000d94:	2400a3b8 	.word	0x2400a3b8
 8000d98:	2400a338 	.word	0x2400a338
 8000d9c:	2400a2d8 	.word	0x2400a2d8
 8000da0:	2400a530 	.word	0x2400a530

08000da4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a59      	ldr	r2, [pc, #356]	; (8000f28 <HAL_ETH_MspInit+0x184>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 80ab 	bne.w	8000f1e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dc8:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dce:	4a57      	ldr	r2, [pc, #348]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd8:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000de6:	4b51      	ldr	r3, [pc, #324]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df6:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e04:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0a:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e14:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a2a      	ldr	r2, [pc, #168]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e9a:	2332      	movs	r3, #50	; 0x32
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481e      	ldr	r0, [pc, #120]	; (8000f30 <HAL_ETH_MspInit+0x18c>)
 8000eb6:	f004 f8f1 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eba:	2386      	movs	r3, #134	; 0x86
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_ETH_MspInit+0x190>)
 8000ed6:	f004 f8e1 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eec:	230b      	movs	r3, #11
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <HAL_ETH_MspInit+0x194>)
 8000ef8:	f004 f8d0 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000efc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_ETH_MspInit+0x198>)
 8000f1a:	f004 f8bf 	bl	800509c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3738      	adds	r7, #56	; 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40028000 	.word	0x40028000
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020800 	.word	0x58020800
 8000f34:	58020000 	.word	0x58020000
 8000f38:	58020400 	.word	0x58020400
 8000f3c:	58021800 	.word	0x58021800

08000f40 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b85      	ldr	r3, [pc, #532]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a83      	ldr	r2, [pc, #524]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b81      	ldr	r3, [pc, #516]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	623b      	str	r3, [r7, #32]
 8000f72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f74:	4b7d      	ldr	r3, [pc, #500]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a7c      	ldr	r2, [pc, #496]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b79      	ldr	r3, [pc, #484]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b76      	ldr	r3, [pc, #472]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a74      	ldr	r2, [pc, #464]	; (800116c <MX_GPIO_Init+0x22c>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa2:	4b72      	ldr	r3, [pc, #456]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b6e      	ldr	r3, [pc, #440]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a6d      	ldr	r2, [pc, #436]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b6a      	ldr	r3, [pc, #424]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a65      	ldr	r2, [pc, #404]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fec:	4b5f      	ldr	r3, [pc, #380]	; (800116c <MX_GPIO_Init+0x22c>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a5e      	ldr	r2, [pc, #376]	; (800116c <MX_GPIO_Init+0x22c>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b5b      	ldr	r3, [pc, #364]	; (800116c <MX_GPIO_Init+0x22c>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b58      	ldr	r3, [pc, #352]	; (800116c <MX_GPIO_Init+0x22c>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <MX_GPIO_Init+0x22c>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b54      	ldr	r3, [pc, #336]	; (800116c <MX_GPIO_Init+0x22c>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	4b50      	ldr	r3, [pc, #320]	; (800116c <MX_GPIO_Init+0x22c>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a4f      	ldr	r2, [pc, #316]	; (800116c <MX_GPIO_Init+0x22c>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <MX_GPIO_Init+0x22c>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f244 0101 	movw	r1, #16385	; 0x4001
 800104c:	4848      	ldr	r0, [pc, #288]	; (8001170 <MX_GPIO_Init+0x230>)
 800104e:	f004 f9d5 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	4846      	ldr	r0, [pc, #280]	; (8001174 <MX_GPIO_Init+0x234>)
 800105a:	f004 f9cf 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_NRF_CE_Pin|GPIO_NRF_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001064:	4844      	ldr	r0, [pc, #272]	; (8001178 <MX_GPIO_Init+0x238>)
 8001066:	f004 f9c9 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001070:	4842      	ldr	r0, [pc, #264]	; (800117c <MX_GPIO_Init+0x23c>)
 8001072:	f004 f9c3 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	4840      	ldr	r0, [pc, #256]	; (8001180 <MX_GPIO_Init+0x240>)
 800107e:	f004 f9bd 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SD_CS_GPIO_Port, GPIO_SD_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2110      	movs	r1, #16
 8001086:	483c      	ldr	r0, [pc, #240]	; (8001178 <MX_GPIO_Init+0x238>)
 8001088:	f004 f9b8 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	483c      	ldr	r0, [pc, #240]	; (8001184 <MX_GPIO_Init+0x244>)
 8001092:	f004 f9b3 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001096:	f244 0301 	movw	r3, #16385	; 0x4001
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4830      	ldr	r0, [pc, #192]	; (8001170 <MX_GPIO_Init+0x230>)
 80010b0:	f003 fff4 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4829      	ldr	r0, [pc, #164]	; (8001174 <MX_GPIO_Init+0x234>)
 80010ce:	f003 ffe5 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_NRF_CE_Pin|GPIO_NRF_CS_Pin;
 80010d2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4823      	ldr	r0, [pc, #140]	; (8001178 <MX_GPIO_Init+0x238>)
 80010ec:	f003 ffd6 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 80010f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	481c      	ldr	r0, [pc, #112]	; (800117c <MX_GPIO_Init+0x23c>)
 800110a:	f003 ffc7 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4816      	ldr	r0, [pc, #88]	; (8001180 <MX_GPIO_Init+0x240>)
 8001128:	f003 ffb8 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SD_CS_Pin;
 800112c:	2310      	movs	r3, #16
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_SD_CS_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_GPIO_Init+0x238>)
 8001144:	f003 ffaa 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <MX_GPIO_Init+0x244>)
 8001160:	f003 ff9c 	bl	800509c <HAL_GPIO_Init>

}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	; 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	58024400 	.word	0x58024400
 8001170:	58020400 	.word	0x58020400
 8001174:	58021400 	.word	0x58021400
 8001178:	58020c00 	.word	0x58020c00
 800117c:	58021800 	.word	0x58021800
 8001180:	58020000 	.word	0x58020000
 8001184:	58021000 	.word	0x58021000

08001188 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_I2C1_Init+0x74>)
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <MX_I2C1_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_I2C1_Init+0x74>)
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <MX_I2C1_Init+0x7c>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_I2C1_Init+0x74>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_I2C1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_I2C1_Init+0x74>)
 80011c4:	f005 fed6 	bl	8006f74 <HAL_I2C_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ce:	f000 fb32 	bl	8001836 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <MX_I2C1_Init+0x74>)
 80011d6:	f005 ff77 	bl	80070c8 <HAL_I2CEx_ConfigAnalogFilter>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011e0:	f000 fb29 	bl	8001836 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_I2C1_Init+0x74>)
 80011e8:	f005 ffb9 	bl	800715e <HAL_I2CEx_ConfigDigitalFilter>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f000 fb20 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2400a564 	.word	0x2400a564
 8001200:	40005400 	.word	0x40005400
 8001204:	00301242 	.word	0x00301242

08001208 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b8      	sub	sp, #224	; 0xe0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	22bc      	movs	r2, #188	; 0xbc
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f013 fb35 	bl	8014898 <memset>
  if(i2cHandle->Instance==I2C1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <HAL_I2C_MspInit+0xd0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d14a      	bne.n	80012ce <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001238:	2308      	movs	r3, #8
 800123a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4618      	mov	r0, r3
 8001248:	f006 ffdc 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001252:	f000 faf0 	bl	8001836 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_I2C_MspInit+0xd4>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_I2C_MspInit+0xd4>)
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_I2C_MspInit+0xd4>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 8001274:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127c:	2312      	movs	r3, #18
 800127e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001282:	2301      	movs	r3, #1
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128e:	2304      	movs	r3, #4
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001298:	4619      	mov	r1, r3
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <HAL_I2C_MspInit+0xd8>)
 800129c:	f003 fefe 	bl	800509c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_I2C_MspInit+0xd4>)
 80012a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_I2C_MspInit+0xd4>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_I2C_MspInit+0xd4>)
 80012b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2104      	movs	r1, #4
 80012c2:	201f      	movs	r0, #31
 80012c4:	f001 fb1d 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012c8:	201f      	movs	r0, #31
 80012ca:	f001 fb34 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ce:	bf00      	nop
 80012d0:	37e0      	adds	r7, #224	; 0xe0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020400 	.word	0x58020400

080012e4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d101      	bne.n	80012fe <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <rpmsg_send+0x3c>)
 80012fc:	e00c      	b.n	8001318 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f011 f9e7 	bl	80126e4 <rpmsg_send_offchannel_raw>
 8001316:	4603      	mov	r3, r0
					 len, true);
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	fffff829 	.word	0xfffff829

08001324 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2220      	movs	r2, #32
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f014 fbd5 	bl	8015ae8 <strncpy>
	ept->addr = src;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <nRF24_CE_L>:
#ifdef USE_HAL_DRIVER
//extern SPI_HandleTypeDef hspi1;


static inline void nRF24_CE_L()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <nRF24_CE_L+0x14>)
 800136c:	f004 f846 	bl	80053fc <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58020c00 	.word	0x58020c00

08001378 <nRF24_CE_H>:

static inline void nRF24_CE_H()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <nRF24_CE_H+0x14>)
 8001384:	f004 f83a 	bl	80053fc <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58020c00 	.word	0x58020c00

08001390 <Delay_ms>:
    return result;
}


static inline void Delay_ms(uint32_t ms)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f001 f993 	bl	80026c4 <HAL_Delay>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	f5ad 6dd2 	sub.w	sp, sp, #1680	; 0x690
 80013ae:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 80013b0:	f000 fa1a 	bl	80017e8 <MPU_Config>
	CPU_CACHE_Enable();
 80013b4:	f000 f9aa 	bl	800170c <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013b8:	e000      	b.n	80013bc <main+0x14>
	{
		asm("nop");
 80013ba:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013bc:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <main+0x228>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f8      	bne.n	80013ba <main+0x12>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f001 f8ea 	bl	80025a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f916 	bl	80015fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80013d0:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <main+0x228>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	4a7e      	ldr	r2, [pc, #504]	; (80015d0 <main+0x228>)
 80013d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e0:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <main+0x228>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f005 fd62 	bl	8006ec0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2000      	movs	r0, #0
 8001400:	f005 fd78 	bl	8006ef4 <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <main+0x228>)
 8001406:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <main+0x228>)
 800140c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001410:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001414:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <main+0x228>)
 8001416:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800141a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	681b      	ldr	r3, [r3, #0]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001426:	f7ff fd8b 	bl	8000f40 <MX_GPIO_Init>
  MX_DMA_Init();
 800142a:	f7ff fc4f 	bl	8000ccc <MX_DMA_Init>
  MX_ETH_Init();
 800142e:	f7ff fc6d 	bl	8000d0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001432:	f000 ff25 	bl	8002280 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001436:	f7ff fea7 	bl	8001188 <MX_I2C1_Init>
  MX_SPI3_Init();
 800143a:	f000 faad 	bl	8001998 <MX_SPI3_Init>
  MX_TIM1_Init();
 800143e:	f000 fdd7 	bl	8001ff0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001442:	f000 fed1 	bl	80021e8 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001446:	f012 fe9f 	bl	8014188 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 800144a:	f000 f9f9 	bl	8001840 <MX_SPI1_Init>
  MX_FATFS_Init();
 800144e:	f00c f9c9 	bl	800d7e4 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001452:	f000 fa4b 	bl	80018ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	MAILBOX_Init();
 8001456:	f012 fc5b 	bl	8013d10 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 800145a:	2300      	movs	r3, #0
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	f04f 32ff 	mov.w	r2, #4294967295
 800146a:	495a      	ldr	r1, [pc, #360]	; (80015d4 <main+0x22c>)
 800146c:	485a      	ldr	r0, [pc, #360]	; (80015d8 <main+0x230>)
 800146e:	f7ff ff59 	bl	8001324 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 8001472:	495a      	ldr	r1, [pc, #360]	; (80015dc <main+0x234>)
 8001474:	2000      	movs	r0, #0
 8001476:	f012 fd65 	bl	8013f44 <MX_OPENAMP_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <main+0xdc>
	{
		Error_Handler();
 8001480:	f000 f9d9 	bl	8001836 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8001484:	4854      	ldr	r0, [pc, #336]	; (80015d8 <main+0x230>)
 8001486:	f012 fe1d 	bl	80140c4 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 800148a:	2204      	movs	r2, #4
 800148c:	4954      	ldr	r1, [pc, #336]	; (80015e0 <main+0x238>)
 800148e:	4852      	ldr	r0, [pc, #328]	; (80015d8 <main+0x230>)
 8001490:	f7ff ff28 	bl	80012e4 <rpmsg_send>
 8001494:	f8c7 0684 	str.w	r0, [r7, #1668]	; 0x684

	if (status < 0)
 8001498:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 800149c:	2b00      	cmp	r3, #0
 800149e:	da01      	bge.n	80014a4 <main+0xfc>
	{
		Error_Handler();
 80014a0:	f000 f9c9 	bl	8001836 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
	while (message < 100)
 80014aa:	e014      	b.n	80014d6 <main+0x12e>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 80014ac:	f7ff fb12 	bl	8000ad4 <receive_message>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80014b8:	f207 6377 	addw	r3, r7, #1655	; 0x677
 80014bc:	2201      	movs	r2, #1
 80014be:	4619      	mov	r1, r3
 80014c0:	4845      	ldr	r0, [pc, #276]	; (80015d8 <main+0x230>)
 80014c2:	f7ff ff0f 	bl	80012e4 <rpmsg_send>
 80014c6:	f8c7 0684 	str.w	r0, [r7, #1668]	; 0x684
		if (status < 0)
 80014ca:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da01      	bge.n	80014d6 <main+0x12e>
		{
			Error_Handler();
 80014d2:	f000 f9b0 	bl	8001836 <Error_Handler>
	while (message < 100)
 80014d6:	f897 3677 	ldrb.w	r3, [r7, #1655]	; 0x677
 80014da:	2b63      	cmp	r3, #99	; 0x63
 80014dc:	d9e6      	bls.n	80014ac <main+0x104>
	FATFS FatFs; 	//Fatfs handle
	  FIL fil; 		//File handle
	  FRESULT fres; //Result after operations

	  //Open the file system
	  fres = f_mount(&FatFs, "", 0); //1=mount now
 80014de:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80014e2:	2200      	movs	r2, #0
 80014e4:	493f      	ldr	r1, [pc, #252]	; (80015e4 <main+0x23c>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00f fe08 	bl	80110fc <f_mount>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 3683 	strb.w	r3, [r7, #1667]	; 0x683
	  if (fres != FR_OK)
 80014f2:	f897 3683 	ldrb.w	r3, [r7, #1667]	; 0x683
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d000      	beq.n	80014fc <main+0x154>
	  {
	//	myprintf("f_mount error (%i)\r\n", fres);
		while(1);
 80014fa:	e7fe      	b.n	80014fa <main+0x152>

	  FATFS* getFreeFs;
	  uint8_t buffer[_MAX_SS];

	//  fres = f_mkfs("\\", FM_FAT32, 0, buffer, sizeof(buffer));
	  fres = f_getfree("", &free_clusters, &getFreeFs);
 80014fc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001500:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001504:	4619      	mov	r1, r3
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <main+0x23c>)
 8001508:	f00f fe3e 	bl	8011188 <f_getfree>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 3683 	strb.w	r3, [r7, #1667]	; 0x683
	  if (fres != FR_OK)
 8001512:	f897 3683 	ldrb.w	r3, [r7, #1667]	; 0x683
 8001516:	2b00      	cmp	r3, #0
 8001518:	d000      	beq.n	800151c <main+0x174>
	  {
	//	myprintf("f_getfree error (%i)\r\n", fres);
		while(1);
 800151a:	e7fe      	b.n	800151a <main+0x172>
	  }

	  //Formula comes from ChaN's documentation
	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800151c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	3b02      	subs	r3, #2
 8001526:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	8952      	ldrh	r2, [r2, #10]
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
	  free_sectors = free_clusters * getFreeFs->csize;
 8001536:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	895b      	ldrh	r3, [r3, #10]
 800153e:	461a      	mov	r2, r3
 8001540:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fb03 f302 	mul.w	r3, r3, r2
 800154a:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678

	//	isPortrait = true;
	screenInit();
 800154e:	f012 fad1 	bl	8013af4 <screenInit>
	screenClear();
 8001552:	f012 fbab 	bl	8013cac <screenClear>
	renderCompleteFrame = true;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <main+0x240>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]

	// RX/TX disabled
	nRF24_CE_L();
 800155c:	f7ff ff00 	bl	8001360 <nRF24_CE_L>
	nRF24_Init();
 8001560:	f00c ff63 	bl	800e42a <nRF24_Init>
//	nRF24_SetPowerMode(nRF24_PWR_DOWN);

	if (!nRF24_Check())
 8001564:	f00c ffae 	bl	800e4c4 <nRF24_Check>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <main+0x1ce>
	{
//		UART_SendStr("FAIL\r\n");
		while (1)
		{
//			Toggle_LED();
			Delay_ms(50);
 800156e:	2032      	movs	r0, #50	; 0x32
 8001570:	f7ff ff0e 	bl	8001390 <Delay_ms>
 8001574:	e7fb      	b.n	800156e <main+0x1c6>
	//   - CRC scheme: 2 byte

	// The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

	// Disable ShockBurst for all RX pipes
	nRF24_DisableAA(0xFF);
 8001576:	20ff      	movs	r0, #255	; 0xff
 8001578:	f00d f8fc 	bl	800e774 <nRF24_DisableAA>

	// Set RF channel
	nRF24_SetRFChannel(76);
 800157c:	204c      	movs	r0, #76	; 0x4c
 800157e:	f00d f821 	bl	800e5c4 <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_1Mbps);
 8001582:	2000      	movs	r0, #0
 8001584:	f00d f886 	bl	800e694 <nRF24_SetDataRate>

	// Set CRC scheme
//	nRF24_SetCRCScheme(nRF24_CRC_2byte);

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(5);
 8001588:	2005      	movs	r0, #5
 800158a:	f00d f829 	bl	800e5e0 <nRF24_SetAddrWidth>

	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR[] = {0x0, 0x0, 0x0, 0x0, 0x1};//{ 0xE7, 0x1C, 0xE3 };
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 800158e:	4917      	ldr	r1, [pc, #92]	; (80015ec <main+0x244>)
 8001590:	2001      	movs	r0, #1
 8001592:	f00d f835 	bl	800e600 <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 32); // Auto-ACK: disabled, payload length: 5 bytes
 8001596:	2220      	movs	r2, #32
 8001598:	2101      	movs	r1, #1
 800159a:	2001      	movs	r0, #1
 800159c:	f00d f896 	bl	800e6cc <nRF24_SetRXPipe>

	// Set operational mode (PRX == receiver)
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f00c ffee 	bl	800e582 <nRF24_SetOperationalMode>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80015a6:	2002      	movs	r0, #2
 80015a8:	f00c ffcc 	bl	800e544 <nRF24_SetPowerMode>

	// Put the transceiver to the RX mode
	nRF24_CE_H();
 80015ac:	f7ff fee4 	bl	8001378 <nRF24_CE_H>
		// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
		//
		// This is far from best solution, but it's ok for testing purposes
		// More smart way is to use the IRQ pin :)
		//
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 80015b0:	f00d f907 	bl	800e7c2 <nRF24_GetStatus_RXFIFO>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d0fa      	beq.n	80015b0 <main+0x208>
		{
			// Get a payload from the transceiver
			pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 80015ba:	490d      	ldr	r1, [pc, #52]	; (80015f0 <main+0x248>)
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <main+0x24c>)
 80015be:	f00d f98d 	bl	800e8dc <nRF24_ReadPayload>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <main+0x250>)
 80015c8:	701a      	strb	r2, [r3, #0]

			// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 80015ca:	f00d f915 	bl	800e7f8 <nRF24_ClearIRQFlags>
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 80015ce:	e7ef      	b.n	80015b0 <main+0x208>
 80015d0:	58024400 	.word	0x58024400
 80015d4:	08018fe0 	.word	0x08018fe0
 80015d8:	2400a5c0 	.word	0x2400a5c0
 80015dc:	08000b29 	.word	0x08000b29
 80015e0:	2400a3c0 	.word	0x2400a3c0
 80015e4:	08018ff8 	.word	0x08018ff8
 80015e8:	2400a400 	.word	0x2400a400
 80015ec:	08019524 	.word	0x08019524
 80015f0:	2400a5b1 	.word	0x2400a5b1
 80015f4:	2400a614 	.word	0x2400a614
 80015f8:	2400a5b2 	.word	0x2400a5b2

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09c      	sub	sp, #112	; 0x70
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	224c      	movs	r2, #76	; 0x4c
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f013 f944 	bl	8014898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2220      	movs	r2, #32
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f013 f93e 	bl	8014898 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800161c:	2004      	movs	r0, #4
 800161e:	f005 fdeb 	bl	80071f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <SystemClock_Config+0x104>)
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	4a35      	ldr	r2, [pc, #212]	; (8001700 <SystemClock_Config+0x104>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001632:	4b33      	ldr	r3, [pc, #204]	; (8001700 <SystemClock_Config+0x104>)
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <SystemClock_Config+0x108>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001644:	4a2f      	ldr	r2, [pc, #188]	; (8001704 <SystemClock_Config+0x108>)
 8001646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <SystemClock_Config+0x108>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001658:	bf00      	nop
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <SystemClock_Config+0x108>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001666:	d1f8      	bne.n	800165a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <SystemClock_Config+0x10c>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f023 0303 	bic.w	r3, r3, #3
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <SystemClock_Config+0x10c>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800167c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001686:	2302      	movs	r3, #2
 8001688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800168a:	2301      	movs	r3, #1
 800168c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800168e:	2312      	movs	r3, #18
 8001690:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001692:	2302      	movs	r3, #2
 8001694:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001696:	2302      	movs	r3, #2
 8001698:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800169e:	230c      	movs	r3, #12
 80016a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80016a2:	2302      	movs	r3, #2
 80016a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80016a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 fe0b 	bl	80072cc <HAL_RCC_OscConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016bc:	f000 f8bb 	bl	8001836 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	233f      	movs	r3, #63	; 0x3f
 80016c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2303      	movs	r3, #3
 80016c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016d4:	2340      	movs	r3, #64	; 0x40
 80016d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2101      	movs	r1, #1
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 fa00 	bl	8007aec <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80016f2:	f000 f8a0 	bl	8001836 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3770      	adds	r7, #112	; 0x70
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	58000400 	.word	0x58000400
 8001704:	58024800 	.word	0x58024800
 8001708:	58024400 	.word	0x58024400

0800170c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11b      	bne.n	8001756 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800171e:	f3bf 8f4f 	dsb	sy
}
 8001722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001724:	f3bf 8f6f 	isb	sy
}
 8001728:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 800172c:	2200      	movs	r2, #0
 800172e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001732:	f3bf 8f4f 	dsb	sy
}
 8001736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001738:	f3bf 8f6f 	isb	sy
}
 800173c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800174a:	f3bf 8f4f 	dsb	sy
}
 800174e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001750:	f3bf 8f6f 	isb	sy
}
 8001754:	e000      	b.n	8001758 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001756:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d138      	bne.n	80017d6 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800176c:	f3bf 8f4f 	dsb	sy
}
 8001770:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 8001774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001778:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	0b5b      	lsrs	r3, r3, #13
 800177e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001782:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	08db      	lsrs	r3, r3, #3
 8001788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800178c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001796:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800179c:	4911      	ldr	r1, [pc, #68]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	1e5a      	subs	r2, r3, #1
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ef      	bne.n	800178e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e5      	bne.n	8001784 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80017b8:	f3bf 8f4f 	dsb	sy
}
 80017bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <CPU_CACHE_Enable+0xd8>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ca:	f3bf 8f4f 	dsb	sy
}
 80017ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017d0:	f3bf 8f6f 	isb	sy
}
 80017d4:	e000      	b.n	80017d8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80017d6:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 80017ee:	f001 f8bd 	bl	800296c <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 80017f6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80017fa:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80017fc:	230f      	movs	r3, #15
 80017fe:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001800:	2303      	movs	r3, #3
 8001802:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800180c:	2301      	movs	r3, #1
 800180e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001810:	2300      	movs	r3, #0
 8001812:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001814:	2300      	movs	r3, #0
 8001816:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001818:	2300      	movs	r3, #0
 800181a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001820:	463b      	mov	r3, r7
 8001822:	4618      	mov	r0, r3
 8001824:	f001 f8da 	bl	80029dc <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001828:	2004      	movs	r0, #4
 800182a:	f001 f8b7 	bl	800299c <HAL_MPU_Enable>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800183a:	b672      	cpsid	i
}
 800183c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800183e:	e7fe      	b.n	800183e <Error_Handler+0x8>

08001840 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001846:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <MX_SPI1_Init+0xa8>)
 8001848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <MX_SPI1_Init+0xa4>)
 800184c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <MX_SPI1_Init+0xa4>)
 800185a:	2207      	movs	r2, #7
 800185c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_SPI1_Init+0xa4>)
 800186c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001874:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001878:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_SPI1_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_SPI1_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI1_Init+0xa4>)
 8001894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_SPI1_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_SPI1_Init+0xa4>)
 80018d2:	f007 fff9 	bl	80098c8 <HAL_SPI_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80018dc:	f7ff ffab 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2400a744 	.word	0x2400a744
 80018e8:	40013000 	.word	0x40013000

080018ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <MX_SPI2_Init+0xa4>)
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <MX_SPI2_Init+0xa8>)
 80018f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <MX_SPI2_Init+0xa4>)
 80018f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001906:	2207      	movs	r2, #7
 8001908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_SPI2_Init+0xa4>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001918:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800191c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001920:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001924:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_SPI2_Init+0xa4>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_SPI2_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001944:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001948:	2200      	movs	r2, #0
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <MX_SPI2_Init+0xa4>)
 800194e:	2200      	movs	r2, #0
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001954:	2200      	movs	r2, #0
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <MX_SPI2_Init+0xa4>)
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001966:	2200      	movs	r2, #0
 8001968:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_SPI2_Init+0xa4>)
 800196c:	2200      	movs	r2, #0
 800196e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001972:	2200      	movs	r2, #0
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_SPI2_Init+0xa4>)
 8001978:	2200      	movs	r2, #0
 800197a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_SPI2_Init+0xa4>)
 800197e:	f007 ffa3 	bl	80098c8 <HAL_SPI_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001988:	f7ff ff55 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2400a634 	.word	0x2400a634
 8001994:	40003800 	.word	0x40003800

08001998 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800199c:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <MX_SPI3_Init+0xa8>)
 800199e:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <MX_SPI3_Init+0xac>)
 80019a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019a2:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019ac:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80019b0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_SPI3_Init+0xa8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_SPI3_Init+0xa8>)
 8001a2c:	f007 ff4c 	bl	80098c8 <HAL_SPI_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001a36:	f7ff fefe 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2400a6bc 	.word	0x2400a6bc
 8001a44:	40003c00 	.word	0x40003c00

08001a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0c0      	sub	sp, #256	; 0x100
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a64:	22bc      	movs	r2, #188	; 0xbc
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f012 ff15 	bl	8014898 <memset>
  if(spiHandle->Instance==SPI1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4aa9      	ldr	r2, [pc, #676]	; (8001d18 <HAL_SPI_MspInit+0x2d0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d16f      	bne.n	8001b58 <HAL_SPI_MspInit+0x110>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f006 fbbb 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001a94:	f7ff fecf 	bl	8001836 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a98:	4ba0      	ldr	r3, [pc, #640]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9e:	4a9f      	ldr	r2, [pc, #636]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aa8:	4b9c      	ldr	r3, [pc, #624]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b99      	ldr	r3, [pc, #612]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	4a97      	ldr	r2, [pc, #604]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac6:	4b95      	ldr	r3, [pc, #596]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad4:	4b91      	ldr	r3, [pc, #580]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	4a90      	ldr	r2, [pc, #576]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae4:	4b8d      	ldr	r3, [pc, #564]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_NRF_Pin|SPI1_MISO_NRF_Pin;
 8001af2:	2360      	movs	r3, #96	; 0x60
 8001af4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b14:	4619      	mov	r1, r3
 8001b16:	4882      	ldr	r0, [pc, #520]	; (8001d20 <HAL_SPI_MspInit+0x2d8>)
 8001b18:	f003 fac0 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_NRF_Pin;
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b34:	2305      	movs	r3, #5
 8001b36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI1_MOSI_NRF_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4878      	ldr	r0, [pc, #480]	; (8001d24 <HAL_SPI_MspInit+0x2dc>)
 8001b42:	f003 faab 	bl	800509c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2023      	movs	r0, #35	; 0x23
 8001b4c:	f000 fed9 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b50:	2023      	movs	r0, #35	; 0x23
 8001b52:	f000 fef0 	bl	8002936 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b56:	e0d9      	b.n	8001d0c <HAL_SPI_MspInit+0x2c4>
  else if(spiHandle->Instance==SPI2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_SPI_MspInit+0x2e0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d167      	bne.n	8001c32 <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b72:	4618      	mov	r0, r3
 8001b74:	f006 fb46 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001b7e:	f7ff fe5a 	bl	8001836 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b82:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b88:	4a64      	ldr	r2, [pc, #400]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b92:	4b62      	ldr	r3, [pc, #392]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb0:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bdc:	230c      	movs	r3, #12
 8001bde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bfe:	4619      	mov	r1, r3
 8001c00:	484a      	ldr	r0, [pc, #296]	; (8001d2c <HAL_SPI_MspInit+0x2e4>)
 8001c02:	f003 fa4b 	bl	800509c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c06:	2308      	movs	r3, #8
 8001c08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c28:	4619      	mov	r1, r3
 8001c2a:	483e      	ldr	r0, [pc, #248]	; (8001d24 <HAL_SPI_MspInit+0x2dc>)
 8001c2c:	f003 fa36 	bl	800509c <HAL_GPIO_Init>
}
 8001c30:	e06c      	b.n	8001d0c <HAL_SPI_MspInit+0x2c4>
  else if(spiHandle->Instance==SPI3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a3e      	ldr	r2, [pc, #248]	; (8001d30 <HAL_SPI_MspInit+0x2e8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d167      	bne.n	8001d0c <HAL_SPI_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 fad9 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001c58:	f7ff fded 	bl	8001836 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c62:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_SPI_MspInit+0x2d4>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <HAL_SPI_MspInit+0x2ec>)
 8001cdc:	f003 f9de 	bl	800509c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 8001ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d04:	4619      	mov	r1, r3
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_SPI_MspInit+0x2e4>)
 8001d08:	f003 f9c8 	bl	800509c <HAL_GPIO_Init>
}
 8001d0c:	bf00      	nop
 8001d0e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013000 	.word	0x40013000
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	58020000 	.word	0x58020000
 8001d24:	58020c00 	.word	0x58020c00
 8001d28:	40003800 	.word	0x40003800
 8001d2c:	58020800 	.word	0x58020800
 8001d30:	40003c00 	.word	0x40003c00
 8001d34:	58020400 	.word	0x58020400

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_MspInit+0x5c>)
 8001d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_MspInit+0x5c>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_MspInit+0x5c>)
 8001d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2104      	movs	r1, #4
 8001d60:	2041      	movs	r0, #65	; 0x41
 8001d62:	f000 fdce 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8001d66:	2041      	movs	r0, #65	; 0x41
 8001d68:	f000 fde5 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	207d      	movs	r0, #125	; 0x7d
 8001d72:	f000 fdc6 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001d76:	207d      	movs	r0, #125	; 0x7d
 8001d78:	f000 fddd 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2104      	movs	r1, #4
 8001d80:	2094      	movs	r0, #148	; 0x94
 8001d82:	f000 fdbe 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8001d86:	2094      	movs	r0, #148	; 0x94
 8001d88:	f000 fdd5 	bl	8002936 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	58024400 	.word	0x58024400

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <NMI_Handler+0x4>

08001d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler+0x4>

08001daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de4:	f000 fc4e 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA1_Stream0_IRQHandler+0x10>)
 8001df2:	f001 fbd7 	bl	80035a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2400a8a8 	.word	0x2400a8a8

08001e00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <I2C1_EV_IRQHandler+0x10>)
 8001e06:	f005 f945 	bl	8007094 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2400a564 	.word	0x2400a564

08001e14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <SPI1_IRQHandler+0x10>)
 8001e1a:	f008 fb35 	bl	800a488 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2400a744 	.word	0x2400a744

08001e28 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <OTG_FS_IRQHandler+0x10>)
 8001e3e:	f003 fd61 	bl	8005904 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2400e90c 	.word	0x2400e90c

08001e4c <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e50:	f005 f876 	bl	8006f40 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
	return 1;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_kill>:

int _kill(int pid, int sig)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e80:	f012 fc96 	bl	80147b0 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2216      	movs	r2, #22
 8001e88:	601a      	str	r2, [r3, #0]
	return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_exit>:

void _exit (int status)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffe7 	bl	8001e76 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea8:	e7fe      	b.n	8001ea8 <_exit+0x12>

08001eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e00a      	b.n	8001ed2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dbf0      	blt.n	8001ebc <_read+0x12>
	}

return len;
 8001eda:	687b      	ldr	r3, [r7, #4]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e009      	b.n	8001f0a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	60ba      	str	r2, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbf1      	blt.n	8001ef6 <_write+0x12>
	}
	return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_close>:

int _close(int file)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	return -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f44:	605a      	str	r2, [r3, #4]
	return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_isatty>:

int _isatty(int file)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
	return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f012 fbfc 	bl	80147b0 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	24040000 	.word	0x24040000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	2400a3c4 	.word	0x2400a3c4
 8001fec:	2400ec20 	.word	0x2400ec20

08001ff0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b096      	sub	sp, #88	; 0x58
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	615a      	str	r2, [r3, #20]
 8002014:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	222c      	movs	r2, #44	; 0x2c
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f012 fc3b 	bl	8014898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <MX_TIM1_Init+0x134>)
 8002024:	4a40      	ldr	r2, [pc, #256]	; (8002128 <MX_TIM1_Init+0x138>)
 8002026:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <MX_TIM1_Init+0x134>)
 800202a:	224b      	movs	r2, #75	; 0x4b
 800202c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <MX_TIM1_Init+0x134>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <MX_TIM1_Init+0x134>)
 8002036:	f644 6220 	movw	r2, #20000	; 0x4e20
 800203a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <MX_TIM1_Init+0x134>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <MX_TIM1_Init+0x134>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <MX_TIM1_Init+0x134>)
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800204e:	4835      	ldr	r0, [pc, #212]	; (8002124 <MX_TIM1_Init+0x134>)
 8002050:	f008 fd25 	bl	800aa9e <HAL_TIM_PWM_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800205a:	f7ff fbec 	bl	8001836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800206a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800206e:	4619      	mov	r1, r3
 8002070:	482c      	ldr	r0, [pc, #176]	; (8002124 <MX_TIM1_Init+0x134>)
 8002072:	f009 fb11 	bl	800b698 <HAL_TIMEx_MasterConfigSynchronization>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800207c:	f7ff fbdb 	bl	8001836 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002080:	2360      	movs	r3, #96	; 0x60
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8002084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208a:	2300      	movs	r3, #0
 800208c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800208e:	2300      	movs	r3, #0
 8002090:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	481f      	ldr	r0, [pc, #124]	; (8002124 <MX_TIM1_Init+0x134>)
 80020a8:	f008 fe58 	bl	800ad5c <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80020b2:	f7ff fbc0 	bl	8001836 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020be:	2204      	movs	r2, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4818      	ldr	r0, [pc, #96]	; (8002124 <MX_TIM1_Init+0x134>)
 80020c4:	f008 fe4a 	bl	800ad5c <HAL_TIM_PWM_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80020ce:	f7ff fbb2 	bl	8001836 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4807      	ldr	r0, [pc, #28]	; (8002124 <MX_TIM1_Init+0x134>)
 8002108:	f009 fb4e 	bl	800b7a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002112:	f7ff fb90 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <MX_TIM1_Init+0x134>)
 8002118:	f000 f82a 	bl	8002170 <HAL_TIM_MspPostInit>

}
 800211c:	bf00      	nop
 800211e:	3758      	adds	r7, #88	; 0x58
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2400a7cc 	.word	0x2400a7cc
 8002128:	40010000 	.word	0x40010000

0800212c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_TIM_PWM_MspInit+0x3c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10e      	bne.n	800215c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_TIM_PWM_MspInit+0x40>)
 8002140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_TIM_PWM_MspInit+0x40>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_TIM_PWM_MspInit+0x40>)
 8002150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40010000 	.word	0x40010000
 800216c:	58024400 	.word	0x58024400

08002170 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_TIM_MspPostInit+0x6c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11f      	bne.n	80021d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_TIM_MspPostInit+0x70>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002198:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_TIM_MspPostInit+0x70>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_TIM_MspPostInit+0x70>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 80021b0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_TIM_MspPostInit+0x74>)
 80021ce:	f002 ff65 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58021000 	.word	0x58021000

080021e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <MX_USART1_UART_Init+0x90>)
 80021ee:	4a23      	ldr	r2, [pc, #140]	; (800227c <MX_USART1_UART_Init+0x94>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <MX_USART1_UART_Init+0x90>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <MX_USART1_UART_Init+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_USART1_UART_Init+0x90>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_USART1_UART_Init+0x90>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_USART1_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002230:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002232:	f009 fb37 	bl	800b8a4 <HAL_UART_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800223c:	f7ff fafb 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002240:	2100      	movs	r1, #0
 8002242:	480d      	ldr	r0, [pc, #52]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002244:	f00a fa84 	bl	800c750 <HAL_UARTEx_SetTxFifoThreshold>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800224e:	f7ff faf2 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002252:	2100      	movs	r1, #0
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002256:	f00a fab9 	bl	800c7cc <HAL_UARTEx_SetRxFifoThreshold>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002260:	f7ff fae9 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_USART1_UART_Init+0x90>)
 8002266:	f00a fa3a 	bl	800c6de <HAL_UARTEx_DisableFifoMode>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002270:	f7ff fae1 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2400a920 	.word	0x2400a920
 800227c:	40011000 	.word	0x40011000

08002280 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <MX_USART3_UART_Init+0x90>)
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <MX_USART3_UART_Init+0x94>)
 8002288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <MX_USART3_UART_Init+0x90>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <MX_USART3_UART_Init+0x90>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <MX_USART3_UART_Init+0x90>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022ca:	f009 faeb 	bl	800b8a4 <HAL_UART_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022d4:	f7ff faaf 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022d8:	2100      	movs	r1, #0
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022dc:	f00a fa38 	bl	800c750 <HAL_UARTEx_SetTxFifoThreshold>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022e6:	f7ff faa6 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ea:	2100      	movs	r1, #0
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022ee:	f00a fa6d 	bl	800c7cc <HAL_UARTEx_SetRxFifoThreshold>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80022f8:	f7ff fa9d 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_USART3_UART_Init+0x90>)
 80022fe:	f00a f9ee 	bl	800c6de <HAL_UARTEx_DisableFifoMode>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002308:	f7ff fa95 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2400a818 	.word	0x2400a818
 8002314:	40004800 	.word	0x40004800

08002318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0ba      	sub	sp, #232	; 0xe8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	22bc      	movs	r2, #188	; 0xbc
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f012 faad 	bl	8014898 <memset>
  if(uartHandle->Instance==USART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6c      	ldr	r2, [pc, #432]	; (80024f4 <HAL_UART_MspInit+0x1dc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 8088 	bne.w	800245a <HAL_UART_MspInit+0x142>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002354:	f107 0318 	add.w	r3, r7, #24
 8002358:	4618      	mov	r0, r3
 800235a:	f005 ff53 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002364:	f7ff fa67 	bl	8001836 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002368:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 800236a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800236e:	4a62      	ldr	r2, [pc, #392]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 800237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002396:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023be:	2304      	movs	r3, #4
 80023c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023c8:	4619      	mov	r1, r3
 80023ca:	484c      	ldr	r0, [pc, #304]	; (80024fc <HAL_UART_MspInit+0x1e4>)
 80023cc:	f002 fe66 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023d0:	2340      	movs	r3, #64	; 0x40
 80023d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e8:	2307      	movs	r3, #7
 80023ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4841      	ldr	r0, [pc, #260]	; (80024fc <HAL_UART_MspInit+0x1e4>)
 80023f6:	f002 fe51 	bl	800509c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 80023fc:	4a41      	ldr	r2, [pc, #260]	; (8002504 <HAL_UART_MspInit+0x1ec>)
 80023fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002400:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002402:	2229      	movs	r2, #41	; 0x29
 8002404:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002418:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002420:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800242e:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002430:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002434:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002436:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800243c:	4830      	ldr	r0, [pc, #192]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 800243e:	f000 fb11 	bl	8002a64 <HAL_DMA_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8002448:	f7ff f9f5 	bl	8001836 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002450:	67da      	str	r2, [r3, #124]	; 0x7c
 8002452:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <HAL_UART_MspInit+0x1e8>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002458:	e047      	b.n	80024ea <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART3)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <HAL_UART_MspInit+0x1f0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d142      	bne.n	80024ea <HAL_UART_MspInit+0x1d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002464:	2302      	movs	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800246e:	f107 0318 	add.w	r3, r7, #24
 8002472:	4618      	mov	r0, r3
 8002474:	f005 fec6 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 800247e:	f7ff f9da 	bl	8001836 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 8002484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 800248a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800248e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 8002494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_UART_MspInit+0x1e0>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024d8:	2307      	movs	r3, #7
 80024da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_UART_MspInit+0x1f4>)
 80024e6:	f002 fdd9 	bl	800509c <HAL_GPIO_Init>
}
 80024ea:	bf00      	nop
 80024ec:	37e8      	adds	r7, #232	; 0xe8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40011000 	.word	0x40011000
 80024f8:	58024400 	.word	0x58024400
 80024fc:	58020400 	.word	0x58020400
 8002500:	2400a8a8 	.word	0x2400a8a8
 8002504:	40020010 	.word	0x40020010
 8002508:	40004800 	.word	0x40004800
 800250c:	58020c00 	.word	0x58020c00

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002510:	f8df d05c 	ldr.w	sp, [pc, #92]	; 8002570 <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002514:	f7fe fb40 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002518:	4816      	ldr	r0, [pc, #88]	; (8002574 <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 800251a:	4917      	ldr	r1, [pc, #92]	; (8002578 <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002520:	e002      	b.n	8002528 <LoopCopyDataInit>

08002522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002526:	3304      	adds	r3, #4

08002528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800252c:	d3f9      	bcc.n	8002522 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 8002530:	4c14      	ldr	r4, [pc, #80]	; (8002584 <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002534:	e001      	b.n	800253a <LoopFillZerobss>

08002536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002538:	3204      	adds	r2, #4

0800253a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800253c:	d3fb      	bcc.n	8002536 <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 800253e:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 8002540:	e003      	b.n	800254a <LoopCopyDataInit_RAM_D2>

08002542 <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 8002544:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002546:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002548:	3104      	adds	r1, #4

0800254a <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 800254a:	4810      	ldr	r0, [pc, #64]	; (800258c <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 800254e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002550:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 8002552:	d3f6      	bcc.n	8002542 <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 8002556:	e002      	b.n	800255e <LoopFillZerobss_RAM_D2>

08002558 <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 8002558:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800255a:	f842 3b04 	str.w	r3, [r2], #4

0800255e <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 8002560:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 8002562:	d3f9      	bcc.n	8002558 <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 8002564:	f012 f93c 	bl	80147e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002568:	f7fe ff1e 	bl	80013a8 <main>
  bx  lr
 800256c:	4770      	bx	lr
 800256e:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 8002570:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8002574:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002578:	2400a2d8 	.word	0x2400a2d8
  ldr r2, =_sidata
 800257c:	08021f04 	.word	0x08021f04
  ldr r2, =_sbss
 8002580:	2400a398 	.word	0x2400a398
  ldr r4, =_ebss
 8002584:	2400ec20 	.word	0x2400ec20
  ldr  r3, =_siRAM_D2
 8002588:	0802c29c 	.word	0x0802c29c
  ldr  r0, =_sRAM_D2
 800258c:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 8002590:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 8002594:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 8002598:	30000000 	.word	0x30000000

0800259c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC3_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a6:	2003      	movs	r0, #3
 80025a8:	f000 f9a0 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025ac:	f005 fc54 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_Init+0x68>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	4913      	ldr	r1, [pc, #76]	; (800260c <HAL_Init+0x6c>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_Init+0x68>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_Init+0x6c>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_Init+0x70>)
 80025e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e4:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <HAL_Init+0x74>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ea:	2000      	movs	r0, #0
 80025ec:	f000 f814 	bl	8002618 <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e002      	b.n	8002600 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025fa:	f7ff fb9d 	bl	8001d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58024400 	.word	0x58024400
 800260c:	08019514 	.word	0x08019514
 8002610:	24000004 	.word	0x24000004
 8002614:	24000000 	.word	0x24000000

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_InitTick+0x60>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e021      	b.n	8002670 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_InitTick+0x64>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_InitTick+0x60>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f985 	bl	8002952 <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 f94f 	bl	8002902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x68>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	24000014 	.word	0x24000014
 800267c:	24000000 	.word	0x24000000
 8002680:	24000010 	.word	0x24000010

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	24000014 	.word	0x24000014
 80026a8:	2400a9b0 	.word	0x2400a9b0

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2400a9b0 	.word	0x2400a9b0

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	24000014 	.word	0x24000014

0800270c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetREVID+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0c1b      	lsrs	r3, r3, #16
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	5c001000 	.word	0x5c001000

08002724 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	58000400 	.word	0x58000400

0800274c <__NVIC_SetPriorityGrouping>:
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <__NVIC_SetPriorityGrouping+0x40>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	4313      	orrs	r3, r2
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x40>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00
 8002790:	05fa0000 	.word	0x05fa0000

08002794 <__NVIC_GetPriorityGrouping>:
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <__NVIC_EnableIRQ+0x38>)
 80027ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000e100 	.word	0xe000e100

080027ec <__NVIC_SetPriority>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <__NVIC_SetPriority+0x50>)
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f7ff ff8e 	bl	80027ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff29 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002910:	f7ff ff40 	bl	8002794 <__NVIC_GetPriorityGrouping>
 8002914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f7ff ff90 	bl	8002840 <NVIC_EncodePriority>
 8002920:	4602      	mov	r2, r0
 8002922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff5f 	bl	80027ec <__NVIC_SetPriority>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff33 	bl	80027b0 <__NVIC_EnableIRQ>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffa4 	bl	80028a8 <SysTick_Config>
 8002960:	4603      	mov	r3, r0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002970:	f3bf 8f5f 	dmb	sy
}
 8002974:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_MPU_Disable+0x28>)
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	4a06      	ldr	r2, [pc, #24]	; (8002994 <HAL_MPU_Disable+0x28>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_MPU_Disable+0x2c>)
 8002984:	2200      	movs	r2, #0
 8002986:	605a      	str	r2, [r3, #4]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	e000ed90 	.word	0xe000ed90

0800299c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <HAL_MPU_Enable+0x38>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_MPU_Enable+0x3c>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_MPU_Enable+0x3c>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029ba:	f3bf 8f4f 	dsb	sy
}
 80029be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029c0:	f3bf 8f6f 	isb	sy
}
 80029c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed90 	.word	0xe000ed90
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	785a      	ldrb	r2, [r3, #1]
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_MPU_ConfigRegion+0x84>)
 80029ea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d029      	beq.n	8002a48 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_MPU_ConfigRegion+0x84>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b1b      	ldrb	r3, [r3, #12]
 8002a00:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7adb      	ldrb	r3, [r3, #11]
 8002a06:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7a9b      	ldrb	r3, [r3, #10]
 8002a0e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7b5b      	ldrb	r3, [r3, #13]
 8002a16:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7b9b      	ldrb	r3, [r3, #14]
 8002a1e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7bdb      	ldrb	r3, [r3, #15]
 8002a26:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7a5b      	ldrb	r3, [r3, #9]
 8002a2e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7a1b      	ldrb	r3, [r3, #8]
 8002a36:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a38:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a42:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a44:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a46:	e005      	b.n	8002a54 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_MPU_ConfigRegion+0x84>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_MPU_ConfigRegion+0x84>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed90 	.word	0xe000ed90

08002a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff fe1e 	bl	80026ac <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e316      	b.n	80030aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <HAL_DMA_Init+0x1b8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04a      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_DMA_Init+0x1bc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a63      	ldr	r2, [pc, #396]	; (8002c24 <HAL_DMA_Init+0x1c0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d040      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a62      	ldr	r2, [pc, #392]	; (8002c28 <HAL_DMA_Init+0x1c4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d03b      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	; (8002c2c <HAL_DMA_Init+0x1c8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	; (8002c30 <HAL_DMA_Init+0x1cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5d      	ldr	r2, [pc, #372]	; (8002c34 <HAL_DMA_Init+0x1d0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02c      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	; (8002c38 <HAL_DMA_Init+0x1d4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d027      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	; (8002c3c <HAL_DMA_Init+0x1d8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d022      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a59      	ldr	r2, [pc, #356]	; (8002c40 <HAL_DMA_Init+0x1dc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01d      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_DMA_Init+0x1e0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a56      	ldr	r2, [pc, #344]	; (8002c48 <HAL_DMA_Init+0x1e4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_DMA_Init+0x1e8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <HAL_DMA_Init+0x1ec>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	; (8002c54 <HAL_DMA_Init+0x1f0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Init+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a50      	ldr	r2, [pc, #320]	; (8002c58 <HAL_DMA_Init+0x1f4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Init+0xbc>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_Init+0xbe>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 813b 	beq.w	8002d9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a37      	ldr	r2, [pc, #220]	; (8002c1c <HAL_DMA_Init+0x1b8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d04a      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <HAL_DMA_Init+0x1bc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d045      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <HAL_DMA_Init+0x1c0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d040      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a33      	ldr	r2, [pc, #204]	; (8002c28 <HAL_DMA_Init+0x1c4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d03b      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_DMA_Init+0x1c8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d036      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_DMA_Init+0x1cc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d031      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <HAL_DMA_Init+0x1d0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02c      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2d      	ldr	r2, [pc, #180]	; (8002c38 <HAL_DMA_Init+0x1d4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d027      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2b      	ldr	r2, [pc, #172]	; (8002c3c <HAL_DMA_Init+0x1d8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d022      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_DMA_Init+0x1dc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d01d      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_DMA_Init+0x1e0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d018      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_DMA_Init+0x1e4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <HAL_DMA_Init+0x1e8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <HAL_DMA_Init+0x1ec>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_DMA_Init+0x1f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_Init+0x174>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <HAL_DMA_Init+0x1f4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <HAL_DMA_Init+0x186>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e007      	b.n	8002bfa <HAL_DMA_Init+0x196>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bfa:	e02f      	b.n	8002c5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bfc:	f7ff fd56 	bl	80026ac <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d928      	bls.n	8002c5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2203      	movs	r2, #3
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e246      	b.n	80030aa <HAL_DMA_Init+0x646>
 8002c1c:	40020010 	.word	0x40020010
 8002c20:	40020028 	.word	0x40020028
 8002c24:	40020040 	.word	0x40020040
 8002c28:	40020058 	.word	0x40020058
 8002c2c:	40020070 	.word	0x40020070
 8002c30:	40020088 	.word	0x40020088
 8002c34:	400200a0 	.word	0x400200a0
 8002c38:	400200b8 	.word	0x400200b8
 8002c3c:	40020410 	.word	0x40020410
 8002c40:	40020428 	.word	0x40020428
 8002c44:	40020440 	.word	0x40020440
 8002c48:	40020458 	.word	0x40020458
 8002c4c:	40020470 	.word	0x40020470
 8002c50:	40020488 	.word	0x40020488
 8002c54:	400204a0 	.word	0x400204a0
 8002c58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1c8      	bne.n	8002bfc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_DMA_Init+0x420>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002cc0:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <HAL_DMA_Init+0x424>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b71      	ldr	r3, [pc, #452]	; (8002e8c <HAL_DMA_Init+0x428>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ccc:	d328      	bcc.n	8002d20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b28      	cmp	r3, #40	; 0x28
 8002cd4:	d903      	bls.n	8002cde <HAL_DMA_Init+0x27a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b2e      	cmp	r3, #46	; 0x2e
 8002cdc:	d917      	bls.n	8002d0e <HAL_DMA_Init+0x2aa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ce4:	d903      	bls.n	8002cee <HAL_DMA_Init+0x28a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b42      	cmp	r3, #66	; 0x42
 8002cec:	d90f      	bls.n	8002d0e <HAL_DMA_Init+0x2aa>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b46      	cmp	r3, #70	; 0x46
 8002cf4:	d903      	bls.n	8002cfe <HAL_DMA_Init+0x29a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b48      	cmp	r3, #72	; 0x48
 8002cfc:	d907      	bls.n	8002d0e <HAL_DMA_Init+0x2aa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b4e      	cmp	r3, #78	; 0x4e
 8002d04:	d905      	bls.n	8002d12 <HAL_DMA_Init+0x2ae>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b52      	cmp	r3, #82	; 0x52
 8002d0c:	d801      	bhi.n	8002d12 <HAL_DMA_Init+0x2ae>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_DMA_Init+0x2b0>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0307 	bic.w	r3, r3, #7
 8002d36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d117      	bne.n	8002d7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f001 fbfd 	bl	800455c <DMA_CheckFifoParam>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e197      	b.n	80030aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f001 fb38 	bl	80043f8 <DMA_CalcBaseAndBitshift>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	223f      	movs	r2, #63	; 0x3f
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e0cd      	b.n	8002f3a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <HAL_DMA_Init+0x42c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <HAL_DMA_Init+0x430>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01d      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a38      	ldr	r2, [pc, #224]	; (8002e98 <HAL_DMA_Init+0x434>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_DMA_Init+0x438>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <HAL_DMA_Init+0x43c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <HAL_DMA_Init+0x440>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_DMA_Init+0x444>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_DMA_Init+0x38a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a30      	ldr	r2, [pc, #192]	; (8002eac <HAL_DMA_Init+0x448>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Init+0x38e>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_DMA_Init+0x390>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_DMA_Init+0x42c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d021      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_DMA_Init+0x430>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01c      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_DMA_Init+0x434>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d017      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_DMA_Init+0x438>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d012      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_DMA_Init+0x43c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00d      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_DMA_Init+0x440>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d008      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <HAL_DMA_Init+0x444>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <HAL_DMA_Init+0x3e4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <HAL_DMA_Init+0x448>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_DMA_Init+0x44c>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d020      	beq.n	8002eb4 <HAL_DMA_Init+0x450>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d102      	bne.n	8002e80 <HAL_DMA_Init+0x41c>
 8002e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e7e:	e01a      	b.n	8002eb6 <HAL_DMA_Init+0x452>
 8002e80:	2300      	movs	r3, #0
 8002e82:	e018      	b.n	8002eb6 <HAL_DMA_Init+0x452>
 8002e84:	fe10803f 	.word	0xfe10803f
 8002e88:	5c001000 	.word	0x5c001000
 8002e8c:	ffff0000 	.word	0xffff0000
 8002e90:	58025408 	.word	0x58025408
 8002e94:	5802541c 	.word	0x5802541c
 8002e98:	58025430 	.word	0x58025430
 8002e9c:	58025444 	.word	0x58025444
 8002ea0:	58025458 	.word	0x58025458
 8002ea4:	5802546c 	.word	0x5802546c
 8002ea8:	58025480 	.word	0x58025480
 8002eac:	58025494 	.word	0x58025494
 8002eb0:	fffe000f 	.word	0xfffe000f
 8002eb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68d2      	ldr	r2, [r2, #12]
 8002eba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ecc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ed4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002edc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ee4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b6e      	ldr	r3, [pc, #440]	; (80030b4 <HAL_DMA_Init+0x650>)
 8002efc:	4413      	add	r3, r2
 8002efe:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <HAL_DMA_Init+0x654>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	009a      	lsls	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f001 fa73 	bl	80043f8 <DMA_CalcBaseAndBitshift>
 8002f12:	4603      	mov	r3, r0
 8002f14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e008      	b.n	8002f3a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0b7      	b.n	80030aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_DMA_Init+0x658>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d072      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_DMA_Init+0x65c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d06d      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5c      	ldr	r2, [pc, #368]	; (80030c4 <HAL_DMA_Init+0x660>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d068      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5a      	ldr	r2, [pc, #360]	; (80030c8 <HAL_DMA_Init+0x664>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d063      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_DMA_Init+0x668>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d05e      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_DMA_Init+0x66c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d059      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_DMA_Init+0x670>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d054      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_DMA_Init+0x674>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d04f      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a53      	ldr	r2, [pc, #332]	; (80030dc <HAL_DMA_Init+0x678>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04a      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_DMA_Init+0x67c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d045      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_DMA_Init+0x680>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <HAL_DMA_Init+0x684>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d03b      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a4d      	ldr	r2, [pc, #308]	; (80030ec <HAL_DMA_Init+0x688>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d036      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <HAL_DMA_Init+0x68c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_DMA_Init+0x690>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d02c      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a48      	ldr	r2, [pc, #288]	; (80030f8 <HAL_DMA_Init+0x694>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a47      	ldr	r2, [pc, #284]	; (80030fc <HAL_DMA_Init+0x698>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	; (8003100 <HAL_DMA_Init+0x69c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01d      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a44      	ldr	r2, [pc, #272]	; (8003104 <HAL_DMA_Init+0x6a0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_DMA_Init+0x6a4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a41      	ldr	r2, [pc, #260]	; (800310c <HAL_DMA_Init+0x6a8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3f      	ldr	r2, [pc, #252]	; (8003110 <HAL_DMA_Init+0x6ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3e      	ldr	r2, [pc, #248]	; (8003114 <HAL_DMA_Init+0x6b0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_DMA_Init+0x5c6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <HAL_DMA_Init+0x6b4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_DMA_Init+0x5ca>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_DMA_Init+0x5cc>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d032      	beq.n	800309a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 fb0d 	bl	8004654 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d102      	bne.n	8003048 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800305c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <HAL_DMA_Init+0x624>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b08      	cmp	r3, #8
 800306c:	d80c      	bhi.n	8003088 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f001 fb8a 	bl	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	e008      	b.n	800309a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	a7fdabf8 	.word	0xa7fdabf8
 80030b8:	cccccccd 	.word	0xcccccccd
 80030bc:	40020010 	.word	0x40020010
 80030c0:	40020028 	.word	0x40020028
 80030c4:	40020040 	.word	0x40020040
 80030c8:	40020058 	.word	0x40020058
 80030cc:	40020070 	.word	0x40020070
 80030d0:	40020088 	.word	0x40020088
 80030d4:	400200a0 	.word	0x400200a0
 80030d8:	400200b8 	.word	0x400200b8
 80030dc:	40020410 	.word	0x40020410
 80030e0:	40020428 	.word	0x40020428
 80030e4:	40020440 	.word	0x40020440
 80030e8:	40020458 	.word	0x40020458
 80030ec:	40020470 	.word	0x40020470
 80030f0:	40020488 	.word	0x40020488
 80030f4:	400204a0 	.word	0x400204a0
 80030f8:	400204b8 	.word	0x400204b8
 80030fc:	58025408 	.word	0x58025408
 8003100:	5802541c 	.word	0x5802541c
 8003104:	58025430 	.word	0x58025430
 8003108:	58025444 	.word	0x58025444
 800310c:	58025458 	.word	0x58025458
 8003110:	5802546c 	.word	0x5802546c
 8003114:	58025480 	.word	0x58025480
 8003118:	58025494 	.word	0x58025494

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e205      	b.n	800353a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e1fa      	b.n	800353a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a8c      	ldr	r2, [pc, #560]	; (800337c <HAL_DMA_Abort_IT+0x260>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d04a      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a8b      	ldr	r2, [pc, #556]	; (8003380 <HAL_DMA_Abort_IT+0x264>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d045      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a89      	ldr	r2, [pc, #548]	; (8003384 <HAL_DMA_Abort_IT+0x268>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d040      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a88      	ldr	r2, [pc, #544]	; (8003388 <HAL_DMA_Abort_IT+0x26c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d03b      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a86      	ldr	r2, [pc, #536]	; (800338c <HAL_DMA_Abort_IT+0x270>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d036      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a85      	ldr	r2, [pc, #532]	; (8003390 <HAL_DMA_Abort_IT+0x274>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d031      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a83      	ldr	r2, [pc, #524]	; (8003394 <HAL_DMA_Abort_IT+0x278>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02c      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a82      	ldr	r2, [pc, #520]	; (8003398 <HAL_DMA_Abort_IT+0x27c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d027      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a80      	ldr	r2, [pc, #512]	; (800339c <HAL_DMA_Abort_IT+0x280>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d022      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7f      	ldr	r2, [pc, #508]	; (80033a0 <HAL_DMA_Abort_IT+0x284>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d01d      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7d      	ldr	r2, [pc, #500]	; (80033a4 <HAL_DMA_Abort_IT+0x288>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d018      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7c      	ldr	r2, [pc, #496]	; (80033a8 <HAL_DMA_Abort_IT+0x28c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a7a      	ldr	r2, [pc, #488]	; (80033ac <HAL_DMA_Abort_IT+0x290>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00e      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a79      	ldr	r2, [pc, #484]	; (80033b0 <HAL_DMA_Abort_IT+0x294>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a77      	ldr	r2, [pc, #476]	; (80033b4 <HAL_DMA_Abort_IT+0x298>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a76      	ldr	r2, [pc, #472]	; (80033b8 <HAL_DMA_Abort_IT+0x29c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Abort_IT+0xcc>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_DMA_Abort_IT+0xce>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d065      	beq.n	80032ba <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2204      	movs	r2, #4
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a60      	ldr	r2, [pc, #384]	; (800337c <HAL_DMA_Abort_IT+0x260>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d04a      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5e      	ldr	r2, [pc, #376]	; (8003380 <HAL_DMA_Abort_IT+0x264>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d045      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5d      	ldr	r2, [pc, #372]	; (8003384 <HAL_DMA_Abort_IT+0x268>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d040      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5b      	ldr	r2, [pc, #364]	; (8003388 <HAL_DMA_Abort_IT+0x26c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d03b      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5a      	ldr	r2, [pc, #360]	; (800338c <HAL_DMA_Abort_IT+0x270>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d036      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_DMA_Abort_IT+0x274>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_DMA_Abort_IT+0x278>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d02c      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a55      	ldr	r2, [pc, #340]	; (8003398 <HAL_DMA_Abort_IT+0x27c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d027      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_DMA_Abort_IT+0x280>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_DMA_Abort_IT+0x284>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a51      	ldr	r2, [pc, #324]	; (80033a4 <HAL_DMA_Abort_IT+0x288>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4f      	ldr	r2, [pc, #316]	; (80033a8 <HAL_DMA_Abort_IT+0x28c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4e      	ldr	r2, [pc, #312]	; (80033ac <HAL_DMA_Abort_IT+0x290>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <HAL_DMA_Abort_IT+0x294>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_DMA_Abort_IT+0x298>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_Abort_IT+0x17a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <HAL_DMA_Abort_IT+0x29c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <HAL_DMA_Abort_IT+0x18c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e147      	b.n	8003538 <HAL_DMA_Abort_IT+0x41c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e13e      	b.n	8003538 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 020e 	bic.w	r2, r2, #14
 80032c8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2b      	ldr	r2, [pc, #172]	; (800337c <HAL_DMA_Abort_IT+0x260>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04a      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a29      	ldr	r2, [pc, #164]	; (8003380 <HAL_DMA_Abort_IT+0x264>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d045      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a28      	ldr	r2, [pc, #160]	; (8003384 <HAL_DMA_Abort_IT+0x268>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d040      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a26      	ldr	r2, [pc, #152]	; (8003388 <HAL_DMA_Abort_IT+0x26c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d03b      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a25      	ldr	r2, [pc, #148]	; (800338c <HAL_DMA_Abort_IT+0x270>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d036      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_DMA_Abort_IT+0x274>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a22      	ldr	r2, [pc, #136]	; (8003394 <HAL_DMA_Abort_IT+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d02c      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a20      	ldr	r2, [pc, #128]	; (8003398 <HAL_DMA_Abort_IT+0x27c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d027      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1f      	ldr	r2, [pc, #124]	; (800339c <HAL_DMA_Abort_IT+0x280>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_DMA_Abort_IT+0x284>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01d      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_DMA_Abort_IT+0x288>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <HAL_DMA_Abort_IT+0x28c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_DMA_Abort_IT+0x290>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_DMA_Abort_IT+0x294>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <HAL_DMA_Abort_IT+0x298>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_DMA_Abort_IT+0x24e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_DMA_Abort_IT+0x29c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d128      	bne.n	80033bc <HAL_DMA_Abort_IT+0x2a0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e027      	b.n	80033cc <HAL_DMA_Abort_IT+0x2b0>
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5c      	ldr	r2, [pc, #368]	; (8003544 <HAL_DMA_Abort_IT+0x428>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d072      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5b      	ldr	r2, [pc, #364]	; (8003548 <HAL_DMA_Abort_IT+0x42c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d06d      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a59      	ldr	r2, [pc, #356]	; (800354c <HAL_DMA_Abort_IT+0x430>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d068      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_DMA_Abort_IT+0x434>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d063      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_DMA_Abort_IT+0x438>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d05e      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a55      	ldr	r2, [pc, #340]	; (8003558 <HAL_DMA_Abort_IT+0x43c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d059      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a53      	ldr	r2, [pc, #332]	; (800355c <HAL_DMA_Abort_IT+0x440>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d054      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_DMA_Abort_IT+0x444>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04f      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a50      	ldr	r2, [pc, #320]	; (8003564 <HAL_DMA_Abort_IT+0x448>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d04a      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_DMA_Abort_IT+0x44c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d045      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a4d      	ldr	r2, [pc, #308]	; (800356c <HAL_DMA_Abort_IT+0x450>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d040      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <HAL_DMA_Abort_IT+0x454>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d03b      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4a      	ldr	r2, [pc, #296]	; (8003574 <HAL_DMA_Abort_IT+0x458>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d036      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a49      	ldr	r2, [pc, #292]	; (8003578 <HAL_DMA_Abort_IT+0x45c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d031      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a47      	ldr	r2, [pc, #284]	; (800357c <HAL_DMA_Abort_IT+0x460>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02c      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a46      	ldr	r2, [pc, #280]	; (8003580 <HAL_DMA_Abort_IT+0x464>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d027      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a44      	ldr	r2, [pc, #272]	; (8003584 <HAL_DMA_Abort_IT+0x468>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d022      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a43      	ldr	r2, [pc, #268]	; (8003588 <HAL_DMA_Abort_IT+0x46c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d01d      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a41      	ldr	r2, [pc, #260]	; (800358c <HAL_DMA_Abort_IT+0x470>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d018      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a40      	ldr	r2, [pc, #256]	; (8003590 <HAL_DMA_Abort_IT+0x474>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <HAL_DMA_Abort_IT+0x478>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <HAL_DMA_Abort_IT+0x47c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a3b      	ldr	r2, [pc, #236]	; (800359c <HAL_DMA_Abort_IT+0x480>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_DMA_Abort_IT+0x3a0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3a      	ldr	r2, [pc, #232]	; (80035a0 <HAL_DMA_Abort_IT+0x484>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Abort_IT+0x3a4>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_DMA_Abort_IT+0x3a6>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d028      	beq.n	8003518 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2201      	movs	r2, #1
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800350c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003516:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40020010 	.word	0x40020010
 8003548:	40020028 	.word	0x40020028
 800354c:	40020040 	.word	0x40020040
 8003550:	40020058 	.word	0x40020058
 8003554:	40020070 	.word	0x40020070
 8003558:	40020088 	.word	0x40020088
 800355c:	400200a0 	.word	0x400200a0
 8003560:	400200b8 	.word	0x400200b8
 8003564:	40020410 	.word	0x40020410
 8003568:	40020428 	.word	0x40020428
 800356c:	40020440 	.word	0x40020440
 8003570:	40020458 	.word	0x40020458
 8003574:	40020470 	.word	0x40020470
 8003578:	40020488 	.word	0x40020488
 800357c:	400204a0 	.word	0x400204a0
 8003580:	400204b8 	.word	0x400204b8
 8003584:	58025408 	.word	0x58025408
 8003588:	5802541c 	.word	0x5802541c
 800358c:	58025430 	.word	0x58025430
 8003590:	58025444 	.word	0x58025444
 8003594:	58025458 	.word	0x58025458
 8003598:	5802546c 	.word	0x5802546c
 800359c:	58025480 	.word	0x58025480
 80035a0:	58025494 	.word	0x58025494

080035a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035b0:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_DMA_IRQHandler+0x1ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a67      	ldr	r2, [pc, #412]	; (8003754 <HAL_DMA_IRQHandler+0x1b0>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0a9b      	lsrs	r3, r3, #10
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5f      	ldr	r2, [pc, #380]	; (8003758 <HAL_DMA_IRQHandler+0x1b4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04a      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5d      	ldr	r2, [pc, #372]	; (800375c <HAL_DMA_IRQHandler+0x1b8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d045      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5c      	ldr	r2, [pc, #368]	; (8003760 <HAL_DMA_IRQHandler+0x1bc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d040      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a5a      	ldr	r2, [pc, #360]	; (8003764 <HAL_DMA_IRQHandler+0x1c0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d03b      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a59      	ldr	r2, [pc, #356]	; (8003768 <HAL_DMA_IRQHandler+0x1c4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d036      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a57      	ldr	r2, [pc, #348]	; (800376c <HAL_DMA_IRQHandler+0x1c8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d031      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a56      	ldr	r2, [pc, #344]	; (8003770 <HAL_DMA_IRQHandler+0x1cc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d02c      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a54      	ldr	r2, [pc, #336]	; (8003774 <HAL_DMA_IRQHandler+0x1d0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d027      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a53      	ldr	r2, [pc, #332]	; (8003778 <HAL_DMA_IRQHandler+0x1d4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a51      	ldr	r2, [pc, #324]	; (800377c <HAL_DMA_IRQHandler+0x1d8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01d      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a50      	ldr	r2, [pc, #320]	; (8003780 <HAL_DMA_IRQHandler+0x1dc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d018      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a4e      	ldr	r2, [pc, #312]	; (8003784 <HAL_DMA_IRQHandler+0x1e0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a4d      	ldr	r2, [pc, #308]	; (8003788 <HAL_DMA_IRQHandler+0x1e4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00e      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a4b      	ldr	r2, [pc, #300]	; (800378c <HAL_DMA_IRQHandler+0x1e8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <HAL_DMA_IRQHandler+0x1ec>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_DMA_IRQHandler+0xd2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a48      	ldr	r2, [pc, #288]	; (8003794 <HAL_DMA_IRQHandler+0x1f0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_DMA_IRQHandler+0xd6>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_DMA_IRQHandler+0xd8>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 842b 	beq.w	8003ed8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2208      	movs	r2, #8
 800368c:	409a      	lsls	r2, r3
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a2 	beq.w	80037dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2e      	ldr	r2, [pc, #184]	; (8003758 <HAL_DMA_IRQHandler+0x1b4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2d      	ldr	r2, [pc, #180]	; (800375c <HAL_DMA_IRQHandler+0x1b8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <HAL_DMA_IRQHandler+0x1bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_DMA_IRQHandler+0x1c0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a28      	ldr	r2, [pc, #160]	; (8003768 <HAL_DMA_IRQHandler+0x1c4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a27      	ldr	r2, [pc, #156]	; (800376c <HAL_DMA_IRQHandler+0x1c8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a25      	ldr	r2, [pc, #148]	; (8003770 <HAL_DMA_IRQHandler+0x1cc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a24      	ldr	r2, [pc, #144]	; (8003774 <HAL_DMA_IRQHandler+0x1d0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a22      	ldr	r2, [pc, #136]	; (8003778 <HAL_DMA_IRQHandler+0x1d4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <HAL_DMA_IRQHandler+0x1d8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_DMA_IRQHandler+0x1dc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_DMA_IRQHandler+0x1e0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_DMA_IRQHandler+0x1e4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_DMA_IRQHandler+0x1e8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_DMA_IRQHandler+0x1ec>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_IRQHandler+0x194>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_DMA_IRQHandler+0x1f0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d12f      	bne.n	8003798 <HAL_DMA_IRQHandler+0x1f4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e02e      	b.n	80037ac <HAL_DMA_IRQHandler+0x208>
 800374e:	bf00      	nop
 8003750:	24000000 	.word	0x24000000
 8003754:	1b4e81b5 	.word	0x1b4e81b5
 8003758:	40020010 	.word	0x40020010
 800375c:	40020028 	.word	0x40020028
 8003760:	40020040 	.word	0x40020040
 8003764:	40020058 	.word	0x40020058
 8003768:	40020070 	.word	0x40020070
 800376c:	40020088 	.word	0x40020088
 8003770:	400200a0 	.word	0x400200a0
 8003774:	400200b8 	.word	0x400200b8
 8003778:	40020410 	.word	0x40020410
 800377c:	40020428 	.word	0x40020428
 8003780:	40020440 	.word	0x40020440
 8003784:	40020458 	.word	0x40020458
 8003788:	40020470 	.word	0x40020470
 800378c:	40020488 	.word	0x40020488
 8003790:	400204a0 	.word	0x400204a0
 8003794:	400204b8 	.word	0x400204b8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0204 	bic.w	r2, r2, #4
 80037be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2208      	movs	r2, #8
 80037ca:	409a      	lsls	r2, r3
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d06e      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a69      	ldr	r2, [pc, #420]	; (800399c <HAL_DMA_IRQHandler+0x3f8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04a      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a67      	ldr	r2, [pc, #412]	; (80039a0 <HAL_DMA_IRQHandler+0x3fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d045      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a66      	ldr	r2, [pc, #408]	; (80039a4 <HAL_DMA_IRQHandler+0x400>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d040      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <HAL_DMA_IRQHandler+0x404>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a63      	ldr	r2, [pc, #396]	; (80039ac <HAL_DMA_IRQHandler+0x408>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d036      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a61      	ldr	r2, [pc, #388]	; (80039b0 <HAL_DMA_IRQHandler+0x40c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a60      	ldr	r2, [pc, #384]	; (80039b4 <HAL_DMA_IRQHandler+0x410>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d02c      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5e      	ldr	r2, [pc, #376]	; (80039b8 <HAL_DMA_IRQHandler+0x414>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d027      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5d      	ldr	r2, [pc, #372]	; (80039bc <HAL_DMA_IRQHandler+0x418>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5b      	ldr	r2, [pc, #364]	; (80039c0 <HAL_DMA_IRQHandler+0x41c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5a      	ldr	r2, [pc, #360]	; (80039c4 <HAL_DMA_IRQHandler+0x420>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_DMA_IRQHandler+0x424>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_DMA_IRQHandler+0x428>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a55      	ldr	r2, [pc, #340]	; (80039d0 <HAL_DMA_IRQHandler+0x42c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a54      	ldr	r2, [pc, #336]	; (80039d4 <HAL_DMA_IRQHandler+0x430>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2ee>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_DMA_IRQHandler+0x434>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d10a      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x304>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e003      	b.n	80038b0 <HAL_DMA_IRQHandler+0x30c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f043 0202 	orr.w	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2204      	movs	r2, #4
 80038da:	409a      	lsls	r2, r3
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 808f 	beq.w	8003a04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <HAL_DMA_IRQHandler+0x3f8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d04a      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_DMA_IRQHandler+0x3fc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d045      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <HAL_DMA_IRQHandler+0x400>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d040      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <HAL_DMA_IRQHandler+0x404>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d03b      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a26      	ldr	r2, [pc, #152]	; (80039ac <HAL_DMA_IRQHandler+0x408>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d036      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <HAL_DMA_IRQHandler+0x40c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d031      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_DMA_IRQHandler+0x410>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d02c      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_DMA_IRQHandler+0x414>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d027      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a20      	ldr	r2, [pc, #128]	; (80039bc <HAL_DMA_IRQHandler+0x418>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_DMA_IRQHandler+0x41c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01d      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_DMA_IRQHandler+0x420>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d018      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_DMA_IRQHandler+0x424>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_DMA_IRQHandler+0x428>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_DMA_IRQHandler+0x42c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <HAL_DMA_IRQHandler+0x430>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_DMA_IRQHandler+0x3e2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <HAL_DMA_IRQHandler+0x434>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d12a      	bne.n	80039dc <HAL_DMA_IRQHandler+0x438>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e023      	b.n	80039e4 <HAL_DMA_IRQHandler+0x440>
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2204      	movs	r2, #4
 80039f2:	409a      	lsls	r2, r3
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a6 	beq.w	8003b66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a85      	ldr	r2, [pc, #532]	; (8003c34 <HAL_DMA_IRQHandler+0x690>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d04a      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_DMA_IRQHandler+0x694>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d045      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a82      	ldr	r2, [pc, #520]	; (8003c3c <HAL_DMA_IRQHandler+0x698>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d040      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a80      	ldr	r2, [pc, #512]	; (8003c40 <HAL_DMA_IRQHandler+0x69c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d03b      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7f      	ldr	r2, [pc, #508]	; (8003c44 <HAL_DMA_IRQHandler+0x6a0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d036      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7d      	ldr	r2, [pc, #500]	; (8003c48 <HAL_DMA_IRQHandler+0x6a4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d031      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7c      	ldr	r2, [pc, #496]	; (8003c4c <HAL_DMA_IRQHandler+0x6a8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d02c      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a7a      	ldr	r2, [pc, #488]	; (8003c50 <HAL_DMA_IRQHandler+0x6ac>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d027      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a79      	ldr	r2, [pc, #484]	; (8003c54 <HAL_DMA_IRQHandler+0x6b0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d022      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a77      	ldr	r2, [pc, #476]	; (8003c58 <HAL_DMA_IRQHandler+0x6b4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <HAL_DMA_IRQHandler+0x6b8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d018      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a74      	ldr	r2, [pc, #464]	; (8003c60 <HAL_DMA_IRQHandler+0x6bc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <HAL_DMA_IRQHandler+0x6c0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a71      	ldr	r2, [pc, #452]	; (8003c68 <HAL_DMA_IRQHandler+0x6c4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a70      	ldr	r2, [pc, #448]	; (8003c6c <HAL_DMA_IRQHandler+0x6c8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_DMA_IRQHandler+0x516>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_DMA_IRQHandler+0x6cc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x52c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e009      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x540>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d03e      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2210      	movs	r2, #16
 8003af2:	409a      	lsls	r2, r3
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d024      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
 8003b24:	e01f      	b.n	8003b66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01b      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
 8003b36:	e016      	b.n	8003b66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2220      	movs	r2, #32
 8003b70:	409a      	lsls	r2, r3
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8110 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <HAL_DMA_IRQHandler+0x690>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <HAL_DMA_IRQHandler+0x694>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d045      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <HAL_DMA_IRQHandler+0x698>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d040      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_DMA_IRQHandler+0x69c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03b      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a26      	ldr	r2, [pc, #152]	; (8003c44 <HAL_DMA_IRQHandler+0x6a0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d036      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <HAL_DMA_IRQHandler+0x6a4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d031      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <HAL_DMA_IRQHandler+0x6a8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02c      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <HAL_DMA_IRQHandler+0x6ac>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d027      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_DMA_IRQHandler+0x6b0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_DMA_IRQHandler+0x6b4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01d      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_DMA_IRQHandler+0x6b8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_DMA_IRQHandler+0x6bc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_DMA_IRQHandler+0x6c0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <HAL_DMA_IRQHandler+0x6c4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <HAL_DMA_IRQHandler+0x6c8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x678>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_DMA_IRQHandler+0x6cc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d12b      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x6d0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	e02a      	b.n	8003c88 <HAL_DMA_IRQHandler+0x6e4>
 8003c32:	bf00      	nop
 8003c34:	40020010 	.word	0x40020010
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	40020040 	.word	0x40020040
 8003c40:	40020058 	.word	0x40020058
 8003c44:	40020070 	.word	0x40020070
 8003c48:	40020088 	.word	0x40020088
 8003c4c:	400200a0 	.word	0x400200a0
 8003c50:	400200b8 	.word	0x400200b8
 8003c54:	40020410 	.word	0x40020410
 8003c58:	40020428 	.word	0x40020428
 8003c5c:	40020440 	.word	0x40020440
 8003c60:	40020458 	.word	0x40020458
 8003c64:	40020470 	.word	0x40020470
 8003c68:	40020488 	.word	0x40020488
 8003c6c:	400204a0 	.word	0x400204a0
 8003c70:	400204b8 	.word	0x400204b8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8087 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2220      	movs	r2, #32
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d139      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0216 	bic.w	r2, r2, #22
 8003cb8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <HAL_DMA_IRQHandler+0x736>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0208 	bic.w	r2, r2, #8
 8003ce8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	223f      	movs	r2, #63	; 0x3f
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 834a 	beq.w	80043a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
          }
          return;
 8003d1c:	e344      	b.n	80043a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d018      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d02c      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
 8003d4a:	e027      	b.n	8003d9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e01e      	b.n	8003d9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10f      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0210 	bic.w	r2, r2, #16
 8003d7a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8306 	beq.w	80043b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8088 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7a      	ldr	r2, [pc, #488]	; (8003fac <HAL_DMA_IRQHandler+0xa08>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d04a      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a79      	ldr	r2, [pc, #484]	; (8003fb0 <HAL_DMA_IRQHandler+0xa0c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d045      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a77      	ldr	r2, [pc, #476]	; (8003fb4 <HAL_DMA_IRQHandler+0xa10>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d040      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a76      	ldr	r2, [pc, #472]	; (8003fb8 <HAL_DMA_IRQHandler+0xa14>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d03b      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a74      	ldr	r2, [pc, #464]	; (8003fbc <HAL_DMA_IRQHandler+0xa18>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d036      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a73      	ldr	r2, [pc, #460]	; (8003fc0 <HAL_DMA_IRQHandler+0xa1c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d031      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a71      	ldr	r2, [pc, #452]	; (8003fc4 <HAL_DMA_IRQHandler+0xa20>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02c      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a70      	ldr	r2, [pc, #448]	; (8003fc8 <HAL_DMA_IRQHandler+0xa24>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d027      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6e      	ldr	r2, [pc, #440]	; (8003fcc <HAL_DMA_IRQHandler+0xa28>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6d      	ldr	r2, [pc, #436]	; (8003fd0 <HAL_DMA_IRQHandler+0xa2c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d01d      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6b      	ldr	r2, [pc, #428]	; (8003fd4 <HAL_DMA_IRQHandler+0xa30>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d018      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6a      	ldr	r2, [pc, #424]	; (8003fd8 <HAL_DMA_IRQHandler+0xa34>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a68      	ldr	r2, [pc, #416]	; (8003fdc <HAL_DMA_IRQHandler+0xa38>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a67      	ldr	r2, [pc, #412]	; (8003fe0 <HAL_DMA_IRQHandler+0xa3c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_DMA_IRQHandler+0xa40>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x8b8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a64      	ldr	r2, [pc, #400]	; (8003fe8 <HAL_DMA_IRQHandler+0xa44>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x8ca>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e007      	b.n	8003e7e <HAL_DMA_IRQHandler+0x8da>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3301      	adds	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d307      	bcc.n	8003e9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f2      	bne.n	8003e7e <HAL_DMA_IRQHandler+0x8da>
 8003e98:	e000      	b.n	8003e9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e9a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003eba:	e003      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8272 	beq.w	80043b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
 8003ed6:	e26c      	b.n	80043b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a43      	ldr	r2, [pc, #268]	; (8003fec <HAL_DMA_IRQHandler+0xa48>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d022      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a42      	ldr	r2, [pc, #264]	; (8003ff0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d01d      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a40      	ldr	r2, [pc, #256]	; (8003ff4 <HAL_DMA_IRQHandler+0xa50>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d018      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <HAL_DMA_IRQHandler+0xa54>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3d      	ldr	r2, [pc, #244]	; (8003ffc <HAL_DMA_IRQHandler+0xa58>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00e      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <HAL_DMA_IRQHandler+0xa5c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a3a      	ldr	r2, [pc, #232]	; (8004004 <HAL_DMA_IRQHandler+0xa60>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x984>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a39      	ldr	r2, [pc, #228]	; (8004008 <HAL_DMA_IRQHandler+0xa64>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x988>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_DMA_IRQHandler+0x98a>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 823f 	beq.w	80043b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80cd 	beq.w	80040ec <HAL_DMA_IRQHandler+0xb48>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80c7 	beq.w	80040ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2204      	movs	r2, #4
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d049      	beq.n	800400c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8210 	beq.w	80043ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f94:	e20a      	b.n	80043ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8206 	beq.w	80043ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fa8:	e200      	b.n	80043ac <HAL_DMA_IRQHandler+0xe08>
 8003faa:	bf00      	nop
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
 8003fec:	58025408 	.word	0x58025408
 8003ff0:	5802541c 	.word	0x5802541c
 8003ff4:	58025430 	.word	0x58025430
 8003ff8:	58025444 	.word	0x58025444
 8003ffc:	58025458 	.word	0x58025458
 8004000:	5802546c 	.word	0x5802546c
 8004004:	58025480 	.word	0x58025480
 8004008:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d160      	bne.n	80040d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8c      	ldr	r2, [pc, #560]	; (800424c <HAL_DMA_IRQHandler+0xca8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d04a      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a8a      	ldr	r2, [pc, #552]	; (8004250 <HAL_DMA_IRQHandler+0xcac>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d045      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a89      	ldr	r2, [pc, #548]	; (8004254 <HAL_DMA_IRQHandler+0xcb0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a87      	ldr	r2, [pc, #540]	; (8004258 <HAL_DMA_IRQHandler+0xcb4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d03b      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a86      	ldr	r2, [pc, #536]	; (800425c <HAL_DMA_IRQHandler+0xcb8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d036      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a84      	ldr	r2, [pc, #528]	; (8004260 <HAL_DMA_IRQHandler+0xcbc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a83      	ldr	r2, [pc, #524]	; (8004264 <HAL_DMA_IRQHandler+0xcc0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d02c      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a81      	ldr	r2, [pc, #516]	; (8004268 <HAL_DMA_IRQHandler+0xcc4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d027      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a80      	ldr	r2, [pc, #512]	; (800426c <HAL_DMA_IRQHandler+0xcc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a7e      	ldr	r2, [pc, #504]	; (8004270 <HAL_DMA_IRQHandler+0xccc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7d      	ldr	r2, [pc, #500]	; (8004274 <HAL_DMA_IRQHandler+0xcd0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a7b      	ldr	r2, [pc, #492]	; (8004278 <HAL_DMA_IRQHandler+0xcd4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7a      	ldr	r2, [pc, #488]	; (800427c <HAL_DMA_IRQHandler+0xcd8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a78      	ldr	r2, [pc, #480]	; (8004280 <HAL_DMA_IRQHandler+0xcdc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a77      	ldr	r2, [pc, #476]	; (8004284 <HAL_DMA_IRQHandler+0xce0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xb12>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a75      	ldr	r2, [pc, #468]	; (8004288 <HAL_DMA_IRQHandler+0xce4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <HAL_DMA_IRQHandler+0xb24>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0208 	bic.w	r2, r2, #8
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e007      	b.n	80040d8 <HAL_DMA_IRQHandler+0xb34>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8165 	beq.w	80043ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ea:	e15f      	b.n	80043ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2202      	movs	r2, #2
 80040f6:	409a      	lsls	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80c5 	beq.w	800428c <HAL_DMA_IRQHandler+0xce8>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80bf 	beq.w	800428c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2202      	movs	r2, #2
 8004118:	409a      	lsls	r2, r3
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 813a 	beq.w	80043b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004144:	e134      	b.n	80043b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8130 	beq.w	80043b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004158:	e12a      	b.n	80043b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d168      	bne.n	8004236 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a38      	ldr	r2, [pc, #224]	; (800424c <HAL_DMA_IRQHandler+0xca8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04a      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a37      	ldr	r2, [pc, #220]	; (8004250 <HAL_DMA_IRQHandler+0xcac>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d045      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	; (8004254 <HAL_DMA_IRQHandler+0xcb0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d040      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a34      	ldr	r2, [pc, #208]	; (8004258 <HAL_DMA_IRQHandler+0xcb4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d03b      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a32      	ldr	r2, [pc, #200]	; (800425c <HAL_DMA_IRQHandler+0xcb8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d036      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a31      	ldr	r2, [pc, #196]	; (8004260 <HAL_DMA_IRQHandler+0xcbc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d031      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <HAL_DMA_IRQHandler+0xcc0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2e      	ldr	r2, [pc, #184]	; (8004268 <HAL_DMA_IRQHandler+0xcc4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d027      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <HAL_DMA_IRQHandler+0xcc8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <HAL_DMA_IRQHandler+0xccc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d01d      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a29      	ldr	r2, [pc, #164]	; (8004274 <HAL_DMA_IRQHandler+0xcd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a28      	ldr	r2, [pc, #160]	; (8004278 <HAL_DMA_IRQHandler+0xcd4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_DMA_IRQHandler+0xcd8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a25      	ldr	r2, [pc, #148]	; (8004280 <HAL_DMA_IRQHandler+0xcdc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a23      	ldr	r2, [pc, #140]	; (8004284 <HAL_DMA_IRQHandler+0xce0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_DMA_IRQHandler+0xc60>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a22      	ldr	r2, [pc, #136]	; (8004288 <HAL_DMA_IRQHandler+0xce4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <HAL_DMA_IRQHandler+0xc72>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0214 	bic.w	r2, r2, #20
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <HAL_DMA_IRQHandler+0xc82>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 020a 	bic.w	r2, r2, #10
 8004224:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80b8 	beq.w	80043b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004248:	e0b2      	b.n	80043b0 <HAL_DMA_IRQHandler+0xe0c>
 800424a:	bf00      	nop
 800424c:	40020010 	.word	0x40020010
 8004250:	40020028 	.word	0x40020028
 8004254:	40020040 	.word	0x40020040
 8004258:	40020058 	.word	0x40020058
 800425c:	40020070 	.word	0x40020070
 8004260:	40020088 	.word	0x40020088
 8004264:	400200a0 	.word	0x400200a0
 8004268:	400200b8 	.word	0x400200b8
 800426c:	40020410 	.word	0x40020410
 8004270:	40020428 	.word	0x40020428
 8004274:	40020440 	.word	0x40020440
 8004278:	40020458 	.word	0x40020458
 800427c:	40020470 	.word	0x40020470
 8004280:	40020488 	.word	0x40020488
 8004284:	400204a0 	.word	0x400204a0
 8004288:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2208      	movs	r2, #8
 8004296:	409a      	lsls	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8088 	beq.w	80043b2 <HAL_DMA_IRQHandler+0xe0e>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8082 	beq.w	80043b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a41      	ldr	r2, [pc, #260]	; (80043b8 <HAL_DMA_IRQHandler+0xe14>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d04a      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a3f      	ldr	r2, [pc, #252]	; (80043bc <HAL_DMA_IRQHandler+0xe18>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d045      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3e      	ldr	r2, [pc, #248]	; (80043c0 <HAL_DMA_IRQHandler+0xe1c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d040      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3c      	ldr	r2, [pc, #240]	; (80043c4 <HAL_DMA_IRQHandler+0xe20>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d03b      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3b      	ldr	r2, [pc, #236]	; (80043c8 <HAL_DMA_IRQHandler+0xe24>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d036      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a39      	ldr	r2, [pc, #228]	; (80043cc <HAL_DMA_IRQHandler+0xe28>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d031      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a38      	ldr	r2, [pc, #224]	; (80043d0 <HAL_DMA_IRQHandler+0xe2c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d02c      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a36      	ldr	r2, [pc, #216]	; (80043d4 <HAL_DMA_IRQHandler+0xe30>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d027      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a35      	ldr	r2, [pc, #212]	; (80043d8 <HAL_DMA_IRQHandler+0xe34>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a33      	ldr	r2, [pc, #204]	; (80043dc <HAL_DMA_IRQHandler+0xe38>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01d      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a32      	ldr	r2, [pc, #200]	; (80043e0 <HAL_DMA_IRQHandler+0xe3c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d018      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a30      	ldr	r2, [pc, #192]	; (80043e4 <HAL_DMA_IRQHandler+0xe40>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2f      	ldr	r2, [pc, #188]	; (80043e8 <HAL_DMA_IRQHandler+0xe44>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2d      	ldr	r2, [pc, #180]	; (80043ec <HAL_DMA_IRQHandler+0xe48>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2c      	ldr	r2, [pc, #176]	; (80043f0 <HAL_DMA_IRQHandler+0xe4c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_DMA_IRQHandler+0xdaa>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <HAL_DMA_IRQHandler+0xe50>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <HAL_DMA_IRQHandler+0xdbc>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 021c 	bic.w	r2, r2, #28
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e007      	b.n	8004370 <HAL_DMA_IRQHandler+0xdcc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020e 	bic.w	r2, r2, #14
 800436e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2201      	movs	r2, #1
 800437a:	409a      	lsls	r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
 80043a6:	e004      	b.n	80043b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043b2:	3728      	adds	r7, #40	; 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8

080043f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a42      	ldr	r2, [pc, #264]	; (8004510 <DMA_CalcBaseAndBitshift+0x118>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d04a      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a41      	ldr	r2, [pc, #260]	; (8004514 <DMA_CalcBaseAndBitshift+0x11c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d045      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a3f      	ldr	r2, [pc, #252]	; (8004518 <DMA_CalcBaseAndBitshift+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d040      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a3e      	ldr	r2, [pc, #248]	; (800451c <DMA_CalcBaseAndBitshift+0x124>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d03b      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <DMA_CalcBaseAndBitshift+0x128>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d036      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <DMA_CalcBaseAndBitshift+0x12c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d031      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a39      	ldr	r2, [pc, #228]	; (8004528 <DMA_CalcBaseAndBitshift+0x130>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02c      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a38      	ldr	r2, [pc, #224]	; (800452c <DMA_CalcBaseAndBitshift+0x134>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d027      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a36      	ldr	r2, [pc, #216]	; (8004530 <DMA_CalcBaseAndBitshift+0x138>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d022      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a35      	ldr	r2, [pc, #212]	; (8004534 <DMA_CalcBaseAndBitshift+0x13c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d01d      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a33      	ldr	r2, [pc, #204]	; (8004538 <DMA_CalcBaseAndBitshift+0x140>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d018      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a32      	ldr	r2, [pc, #200]	; (800453c <DMA_CalcBaseAndBitshift+0x144>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d013      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a30      	ldr	r2, [pc, #192]	; (8004540 <DMA_CalcBaseAndBitshift+0x148>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2f      	ldr	r2, [pc, #188]	; (8004544 <DMA_CalcBaseAndBitshift+0x14c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <DMA_CalcBaseAndBitshift+0x150>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2c      	ldr	r2, [pc, #176]	; (800454c <DMA_CalcBaseAndBitshift+0x154>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <DMA_CalcBaseAndBitshift+0xac>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <DMA_CalcBaseAndBitshift+0xae>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d024      	beq.n	80044f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3b10      	subs	r3, #16
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <DMA_CalcBaseAndBitshift+0x158>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	4a24      	ldr	r2, [pc, #144]	; (8004554 <DMA_CalcBaseAndBitshift+0x15c>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d908      	bls.n	80044e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <DMA_CalcBaseAndBitshift+0x160>)
 80044da:	4013      	ands	r3, r2
 80044dc:	1d1a      	adds	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	659a      	str	r2, [r3, #88]	; 0x58
 80044e2:	e00d      	b.n	8004500 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <DMA_CalcBaseAndBitshift+0x160>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6593      	str	r3, [r2, #88]	; 0x58
 80044f2:	e005      	b.n	8004500 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40020010 	.word	0x40020010
 8004514:	40020028 	.word	0x40020028
 8004518:	40020040 	.word	0x40020040
 800451c:	40020058 	.word	0x40020058
 8004520:	40020070 	.word	0x40020070
 8004524:	40020088 	.word	0x40020088
 8004528:	400200a0 	.word	0x400200a0
 800452c:	400200b8 	.word	0x400200b8
 8004530:	40020410 	.word	0x40020410
 8004534:	40020428 	.word	0x40020428
 8004538:	40020440 	.word	0x40020440
 800453c:	40020458 	.word	0x40020458
 8004540:	40020470 	.word	0x40020470
 8004544:	40020488 	.word	0x40020488
 8004548:	400204a0 	.word	0x400204a0
 800454c:	400204b8 	.word	0x400204b8
 8004550:	aaaaaaab 	.word	0xaaaaaaab
 8004554:	0801952c 	.word	0x0801952c
 8004558:	fffffc00 	.word	0xfffffc00

0800455c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d120      	bne.n	80045b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	2b03      	cmp	r3, #3
 8004576:	d858      	bhi.n	800462a <DMA_CheckFifoParam+0xce>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <DMA_CheckFifoParam+0x24>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	08004591 	.word	0x08004591
 8004584:	080045a3 	.word	0x080045a3
 8004588:	08004591 	.word	0x08004591
 800458c:	0800462b 	.word	0x0800462b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d048      	beq.n	800462e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045a0:	e045      	b.n	800462e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045aa:	d142      	bne.n	8004632 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b0:	e03f      	b.n	8004632 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ba:	d123      	bne.n	8004604 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d838      	bhi.n	8004636 <DMA_CheckFifoParam+0xda>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <DMA_CheckFifoParam+0x70>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045e3 	.word	0x080045e3
 80045d4:	080045dd 	.word	0x080045dd
 80045d8:	080045f5 	.word	0x080045f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
        break;
 80045e0:	e030      	b.n	8004644 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d025      	beq.n	800463a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045f2:	e022      	b.n	800463a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045fc:	d11f      	bne.n	800463e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004602:	e01c      	b.n	800463e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2b02      	cmp	r3, #2
 800460a:	d902      	bls.n	8004612 <DMA_CheckFifoParam+0xb6>
 800460c:	2b03      	cmp	r3, #3
 800460e:	d003      	beq.n	8004618 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004610:	e018      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
        break;
 8004616:	e015      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00e      	beq.n	8004642 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
    break;
 8004628:	e00b      	b.n	8004642 <DMA_CheckFifoParam+0xe6>
        break;
 800462a:	bf00      	nop
 800462c:	e00a      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        break;
 800462e:	bf00      	nop
 8004630:	e008      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        break;
 8004632:	bf00      	nop
 8004634:	e006      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        break;
 8004636:	bf00      	nop
 8004638:	e004      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        break;
 800463a:	bf00      	nop
 800463c:	e002      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
        break;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <DMA_CheckFifoParam+0xe8>
    break;
 8004642:	bf00      	nop
    }
  }

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop

08004654 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a38      	ldr	r2, [pc, #224]	; (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a36      	ldr	r2, [pc, #216]	; (800474c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a35      	ldr	r2, [pc, #212]	; (8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a33      	ldr	r2, [pc, #204]	; (8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a32      	ldr	r2, [pc, #200]	; (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a30      	ldr	r2, [pc, #192]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01a      	beq.n	80046f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	3b08      	subs	r3, #8
 80046c4:	4a28      	ldr	r2, [pc, #160]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4b26      	ldr	r3, [pc, #152]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	461a      	mov	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a24      	ldr	r2, [pc, #144]	; (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2201      	movs	r2, #1
 80046ea:	409a      	lsls	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046f0:	e024      	b.n	800473c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3b10      	subs	r3, #16
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d806      	bhi.n	800471a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d902      	bls.n	800471a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3308      	adds	r3, #8
 8004718:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a16      	ldr	r2, [pc, #88]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800472c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	2201      	movs	r2, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	58025408 	.word	0x58025408
 800474c:	5802541c 	.word	0x5802541c
 8004750:	58025430 	.word	0x58025430
 8004754:	58025444 	.word	0x58025444
 8004758:	58025458 	.word	0x58025458
 800475c:	5802546c 	.word	0x5802546c
 8004760:	58025480 	.word	0x58025480
 8004764:	58025494 	.word	0x58025494
 8004768:	cccccccd 	.word	0xcccccccd
 800476c:	16009600 	.word	0x16009600
 8004770:	58025880 	.word	0x58025880
 8004774:	aaaaaaab 	.word	0xaaaaaaab
 8004778:	400204b8 	.word	0x400204b8
 800477c:	4002040f 	.word	0x4002040f
 8004780:	10008200 	.word	0x10008200
 8004784:	40020880 	.word	0x40020880

08004788 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04a      	beq.n	8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d847      	bhi.n	8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a25      	ldr	r2, [pc, #148]	; (8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a24      	ldr	r2, [pc, #144]	; (8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d01d      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	; (800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	461a      	mov	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004810:	671a      	str	r2, [r3, #112]	; 0x70
 8004812:	e009      	b.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004826:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3b01      	subs	r3, #1
 800482c:	2201      	movs	r2, #1
 800482e:	409a      	lsls	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	58025408 	.word	0x58025408
 8004844:	5802541c 	.word	0x5802541c
 8004848:	58025430 	.word	0x58025430
 800484c:	58025444 	.word	0x58025444
 8004850:	58025458 	.word	0x58025458
 8004854:	5802546c 	.word	0x5802546c
 8004858:	58025480 	.word	0x58025480
 800485c:	58025494 	.word	0x58025494
 8004860:	1600963f 	.word	0x1600963f
 8004864:	58025940 	.word	0x58025940
 8004868:	1000823f 	.word	0x1000823f
 800486c:	40020940 	.word	0x40020940

08004870 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e0c6      	b.n	8004a10 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc fa8a 	bl	8000da4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2223      	movs	r2, #35	; 0x23
 8004894:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004896:	4b60      	ldr	r3, [pc, #384]	; (8004a18 <HAL_ETH_Init+0x1a8>)
 8004898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800489c:	4a5e      	ldr	r2, [pc, #376]	; (8004a18 <HAL_ETH_Init+0x1a8>)
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048a6:	4b5c      	ldr	r3, [pc, #368]	; (8004a18 <HAL_ETH_Init+0x1a8>)
 80048a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7a1b      	ldrb	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d103      	bne.n	80048c4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80048bc:	2000      	movs	r0, #0
 80048be:	f7fd ff31 	bl	8002724 <HAL_SYSCFG_ETHInterfaceSelect>
 80048c2:	e003      	b.n	80048cc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80048c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80048c8:	f7fd ff2c 	bl	8002724 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e4:	f7fd fee2 	bl	80026ac <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80048ea:	e00f      	b.n	800490c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80048ec:	f7fd fede 	bl	80026ac <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048fa:	d907      	bls.n	800490c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2204      	movs	r2, #4
 8004900:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	22e0      	movs	r2, #224	; 0xe0
 8004906:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e081      	b.n	8004a10 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e6      	bne.n	80048ec <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fac0 	bl	8004ea4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004924:	f003 fc12 	bl	800814c <HAL_RCC_GetHCLKFreq>
 8004928:	4603      	mov	r3, r0
 800492a:	4a3c      	ldr	r2, [pc, #240]	; (8004a1c <HAL_ETH_Init+0x1ac>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	0c9a      	lsrs	r2, r3, #18
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3a01      	subs	r2, #1
 8004938:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa13 	bl	8004d68 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004958:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800495c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	22e0      	movs	r2, #224	; 0xe0
 8004974:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e04a      	b.n	8004a10 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004982:	4413      	add	r3, r2
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_ETH_Init+0x1b0>)
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6952      	ldr	r2, [r2, #20]
 800498e:	0052      	lsls	r2, r2, #1
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	6809      	ldr	r1, [r1, #0]
 8004994:	431a      	orrs	r2, r3
 8004996:	f241 1308 	movw	r3, #4360	; 0x1108
 800499a:	440b      	add	r3, r1
 800499c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fad8 	bl	8004f54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fb1c 	bl	8004fe2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	3305      	adds	r3, #5
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	4619      	mov	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	3303      	adds	r3, #3
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	061a      	lsls	r2, r3, #24
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	3302      	adds	r3, #2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80049f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2210      	movs	r2, #16
 8004a06:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	431bde83 	.word	0x431bde83
 8004a20:	ffff8001 	.word	0xffff8001

08004a24 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004a36:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	791b      	ldrb	r3, [r3, #4]
 8004a3c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004a3e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	7b1b      	ldrb	r3, [r3, #12]
 8004a44:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a46:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	7b5b      	ldrb	r3, [r3, #13]
 8004a4c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a4e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	7b9b      	ldrb	r3, [r3, #14]
 8004a54:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	7bdb      	ldrb	r3, [r3, #15]
 8004a5c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a5e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	7c12      	ldrb	r2, [r2, #16]
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	d102      	bne.n	8004a6e <ETH_SetMACConfig+0x4a>
 8004a68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a6c:	e000      	b.n	8004a70 <ETH_SetMACConfig+0x4c>
 8004a6e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a70:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	7c52      	ldrb	r2, [r2, #17]
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	d102      	bne.n	8004a80 <ETH_SetMACConfig+0x5c>
 8004a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a7e:	e000      	b.n	8004a82 <ETH_SetMACConfig+0x5e>
 8004a80:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a82:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	7c9b      	ldrb	r3, [r3, #18]
 8004a88:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a8a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004a90:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004a96:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	7f1b      	ldrb	r3, [r3, #28]
 8004a9c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004a9e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	7f5b      	ldrb	r3, [r3, #29]
 8004aa4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004aa6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	7f92      	ldrb	r2, [r2, #30]
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d102      	bne.n	8004ab6 <ETH_SetMACConfig+0x92>
 8004ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ab4:	e000      	b.n	8004ab8 <ETH_SetMACConfig+0x94>
 8004ab6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004ab8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	7fdb      	ldrb	r3, [r3, #31]
 8004abe:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004ac0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d102      	bne.n	8004ad2 <ETH_SetMACConfig+0xae>
 8004acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad0:	e000      	b.n	8004ad4 <ETH_SetMACConfig+0xb0>
 8004ad2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004ad4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004ada:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ae2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004ae4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b56      	ldr	r3, [pc, #344]	; (8004c50 <ETH_SetMACConfig+0x22c>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b0e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b10:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b18:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004b1a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b22:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004b24:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	d102      	bne.n	8004b36 <ETH_SetMACConfig+0x112>
 8004b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b34:	e000      	b.n	8004b38 <ETH_SetMACConfig+0x114>
 8004b36:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b38:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <ETH_SetMACConfig+0x230>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <ETH_SetMACConfig+0x234>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	68f9      	ldr	r1, [r7, #12]
 8004b76:	430b      	orrs	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b80:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b86:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004b8e:	2a00      	cmp	r2, #0
 8004b90:	d101      	bne.n	8004b96 <ETH_SetMACConfig+0x172>
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	e000      	b.n	8004b98 <ETH_SetMACConfig+0x174>
 8004b96:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004b98:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004baa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004bae:	4013      	ands	r3, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004bc0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004bc8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	f023 0103 	bic.w	r1, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004bee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d101      	bne.n	8004c12 <ETH_SetMACConfig+0x1ee>
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	e000      	b.n	8004c14 <ETH_SetMACConfig+0x1f0>
 8004c12:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004c14:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004c1c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c1e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004c26:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c34:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	00048083 	.word	0x00048083
 8004c54:	c0f88000 	.word	0xc0f88000
 8004c58:	fffffef0 	.word	0xfffffef0

08004c5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <ETH_SetDMAConfig+0xf8>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	6809      	ldr	r1, [r1, #0]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004c82:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	791b      	ldrb	r3, [r3, #4]
 8004c88:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c8e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004ca2:	4413      	add	r3, r2
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <ETH_SetDMAConfig+0xfc>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6811      	ldr	r1, [r2, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	f241 0304 	movw	r3, #4100	; 0x1004
 8004cb6:	440b      	add	r3, r1
 8004cb8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	7b5b      	ldrb	r3, [r3, #13]
 8004cbe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <ETH_SetDMAConfig+0x100>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6811      	ldr	r1, [r2, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004ce2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	7d1b      	ldrb	r3, [r3, #20]
 8004cec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	7f5b      	ldrb	r3, [r3, #29]
 8004cf4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d02:	4413      	add	r3, r2
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <ETH_SetDMAConfig+0x104>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6811      	ldr	r1, [r2, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d16:	440b      	add	r3, r1
 8004d18:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	7f1b      	ldrb	r3, [r3, #28]
 8004d1e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d30:	4413      	add	r3, r2
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <ETH_SetDMAConfig+0x108>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6811      	ldr	r1, [r2, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d44:	440b      	add	r3, r1
 8004d46:	601a      	str	r2, [r3, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	ffff87fd 	.word	0xffff87fd
 8004d58:	ffff2ffe 	.word	0xffff2ffe
 8004d5c:	fffec000 	.word	0xfffec000
 8004d60:	ffc0efef 	.word	0xffc0efef
 8004d64:	7fc0ffff 	.word	0x7fc0ffff

08004d68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b0a4      	sub	sp, #144	; 0x90
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004d76:	2300      	movs	r3, #0
 8004d78:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004dc0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004de2:	2300      	movs	r3, #0
 8004de4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004dea:	2300      	movs	r3, #0
 8004dec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e00:	2320      	movs	r3, #32
 8004e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e1c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004e24:	2302      	movs	r3, #2
 8004e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e42:	2300      	movs	r3, #0
 8004e44:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fde6 	bl	8004a24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004e88:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fee1 	bl	8004c5c <ETH_SetDMAConfig>
}
 8004e9a:	bf00      	nop
 8004e9c:	3790      	adds	r7, #144	; 0x90
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ebe:	f003 f945 	bl	800814c <HAL_RCC_GetHCLKFreq>
 8004ec2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d908      	bls.n	8004ede <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d804      	bhi.n	8004ede <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e027      	b.n	8004f2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d908      	bls.n	8004ef8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d204      	bcs.n	8004ef8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e01a      	b.n	8004f2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d303      	bcc.n	8004f08 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d911      	bls.n	8004f2c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a10      	ldr	r2, [pc, #64]	; (8004f4c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d908      	bls.n	8004f22 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d804      	bhi.n	8004f22 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e005      	b.n	8004f2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e000      	b.n	8004f2e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f2c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	01312cff 	.word	0x01312cff
 8004f44:	02160ebf 	.word	0x02160ebf
 8004f48:	03938700 	.word	0x03938700
 8004f4c:	05f5e0ff 	.word	0x05f5e0ff
 8004f50:	08f0d17f 	.word	0x08f0d17f

08004f54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e01d      	b.n	8004f9e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68d9      	ldr	r1, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	3206      	adds	r2, #6
 8004f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d9de      	bls.n	8004f62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	f241 132c 	movw	r3, #4396	; 0x112c
 8004fb2:	4413      	add	r3, r2
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68d9      	ldr	r1, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	f241 1314 	movw	r3, #4372	; 0x1114
 8004fc4:	4413      	add	r3, r2
 8004fc6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e024      	b.n	800503a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6919      	ldr	r1, [r3, #16]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	440b      	add	r3, r1
 8005000:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3310      	adds	r3, #16
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d9d7      	bls.n	8004ff0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f241 1330 	movw	r3, #4400	; 0x1130
 8005066:	4413      	add	r3, r2
 8005068:	2203      	movs	r2, #3
 800506a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6919      	ldr	r1, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	f241 131c 	movw	r3, #4380	; 0x111c
 8005078:	4413      	add	r3, r2
 800507a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	f241 1328 	movw	r3, #4392	; 0x1128
 800508c:	4413      	add	r3, r2
 800508e:	6019      	str	r1, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050aa:	4b89      	ldr	r3, [pc, #548]	; (80052d0 <HAL_GPIO_Init+0x234>)
 80050ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ae:	e194      	b.n	80053da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2101      	movs	r1, #1
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8186 	beq.w	80053d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d00b      	beq.n	80050e8 <HAL_GPIO_Init+0x4c>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d007      	beq.n	80050e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050dc:	2b11      	cmp	r3, #17
 80050de:	d003      	beq.n	80050e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b12      	cmp	r3, #18
 80050e6:	d130      	bne.n	800514a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800511e:	2201      	movs	r2, #1
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f003 0201 	and.w	r2, r3, #1
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d003      	beq.n	800518a <HAL_GPIO_Init+0xee>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b12      	cmp	r3, #18
 8005188:	d123      	bne.n	80051d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	08da      	lsrs	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3208      	adds	r2, #8
 8005192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	220f      	movs	r2, #15
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	08da      	lsrs	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3208      	adds	r2, #8
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2203      	movs	r2, #3
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 0203 	and.w	r2, r3, #3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80e0 	beq.w	80053d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005214:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <HAL_GPIO_Init+0x238>)
 8005216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800521a:	4a2e      	ldr	r2, [pc, #184]	; (80052d4 <HAL_GPIO_Init+0x238>)
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005224:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <HAL_GPIO_Init+0x238>)
 8005226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005232:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <HAL_GPIO_Init+0x23c>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a20      	ldr	r2, [pc, #128]	; (80052dc <HAL_GPIO_Init+0x240>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d052      	beq.n	8005304 <HAL_GPIO_Init+0x268>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_GPIO_Init+0x244>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_GPIO_Init+0x22e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_GPIO_Init+0x248>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_Init+0x22a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_GPIO_Init+0x24c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_Init+0x226>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_GPIO_Init+0x250>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_Init+0x222>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <HAL_GPIO_Init+0x254>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_Init+0x21e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <HAL_GPIO_Init+0x258>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_Init+0x21a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <HAL_GPIO_Init+0x25c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_Init+0x216>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_GPIO_Init+0x260>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_Init+0x212>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <HAL_GPIO_Init+0x264>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_Init+0x20e>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e02d      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e02b      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052ae:	2308      	movs	r3, #8
 80052b0:	e029      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e027      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e025      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e023      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052be:	2304      	movs	r3, #4
 80052c0:	e021      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e01f      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e01d      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e01b      	b.n	8005306 <HAL_GPIO_Init+0x26a>
 80052ce:	bf00      	nop
 80052d0:	58000080 	.word	0x58000080
 80052d4:	58024400 	.word	0x58024400
 80052d8:	58000400 	.word	0x58000400
 80052dc:	58020000 	.word	0x58020000
 80052e0:	58020400 	.word	0x58020400
 80052e4:	58020800 	.word	0x58020800
 80052e8:	58020c00 	.word	0x58020c00
 80052ec:	58021000 	.word	0x58021000
 80052f0:	58021400 	.word	0x58021400
 80052f4:	58021800 	.word	0x58021800
 80052f8:	58021c00 	.word	0x58021c00
 80052fc:	58022000 	.word	0x58022000
 8005300:	58022400 	.word	0x58022400
 8005304:	2300      	movs	r3, #0
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	f002 0203 	and.w	r2, r2, #3
 800530c:	0092      	lsls	r2, r2, #2
 800530e:	4093      	lsls	r3, r2
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4313      	orrs	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005316:	4938      	ldr	r1, [pc, #224]	; (80053f8 <HAL_GPIO_Init+0x35c>)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	3302      	adds	r3, #2
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	43db      	mvns	r3, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4013      	ands	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800539e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	3301      	adds	r3, #1
 80053d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f ae63 	bne.w	80050b0 <HAL_GPIO_Init+0x14>
  }
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	3724      	adds	r7, #36	; 0x24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	58000400 	.word	0x58000400

080053fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	807b      	strh	r3, [r7, #2]
 8005408:	4613      	mov	r3, r2
 800540a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800540c:	787b      	ldrb	r3, [r7, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005412:	887a      	ldrh	r2, [r7, #2]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005418:	e003      	b.n	8005422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	041a      	lsls	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	619a      	str	r2, [r3, #24]
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800542e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005430:	b08f      	sub	sp, #60	; 0x3c
 8005432:	af0a      	add	r7, sp, #40	; 0x28
 8005434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e054      	b.n	80054ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f00e fee8 	bl	8014230 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f007 faaf 	bl	800c9e2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	687e      	ldr	r6, [r7, #4]
 800548c:	466d      	mov	r5, sp
 800548e:	f106 0410 	add.w	r4, r6, #16
 8005492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800549a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800549e:	e885 0003 	stmia.w	r5, {r0, r1}
 80054a2:	1d33      	adds	r3, r6, #4
 80054a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f007 fa1c 	bl	800c8e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2101      	movs	r1, #1
 80054b2:	4618      	mov	r0, r3
 80054b4:	f007 faa6 	bl	800ca04 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	687e      	ldr	r6, [r7, #4]
 80054c0:	466d      	mov	r5, sp
 80054c2:	f106 0410 	add.w	r4, r6, #16
 80054c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80054d6:	1d33      	adds	r3, r6, #4
 80054d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054da:	6838      	ldr	r0, [r7, #0]
 80054dc:	f007 fbf0 	bl	800ccc0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80054f2:	b590      	push	{r4, r7, lr}
 80054f4:	b089      	sub	sp, #36	; 0x24
 80054f6:	af04      	add	r7, sp, #16
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	4608      	mov	r0, r1
 80054fc:	4611      	mov	r1, r2
 80054fe:	461a      	mov	r2, r3
 8005500:	4603      	mov	r3, r0
 8005502:	70fb      	strb	r3, [r7, #3]
 8005504:	460b      	mov	r3, r1
 8005506:	70bb      	strb	r3, [r7, #2]
 8005508:	4613      	mov	r3, r2
 800550a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_HCD_HC_Init+0x28>
 8005516:	2302      	movs	r3, #2
 8005518:	e076      	b.n	8005608 <HAL_HCD_HC_Init+0x116>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	212c      	movs	r1, #44	; 0x2c
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	4413      	add	r3, r2
 800552e:	333d      	adds	r3, #61	; 0x3d
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	212c      	movs	r1, #44	; 0x2c
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	4413      	add	r3, r2
 8005540:	3338      	adds	r3, #56	; 0x38
 8005542:	787a      	ldrb	r2, [r7, #1]
 8005544:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	212c      	movs	r1, #44	; 0x2c
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	3340      	adds	r3, #64	; 0x40
 8005554:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005556:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	212c      	movs	r1, #44	; 0x2c
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	3339      	adds	r3, #57	; 0x39
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	212c      	movs	r1, #44	; 0x2c
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	333f      	adds	r3, #63	; 0x3f
 8005578:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800557c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	78ba      	ldrb	r2, [r7, #2]
 8005582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005586:	b2d0      	uxtb	r0, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	333a      	adds	r3, #58	; 0x3a
 8005594:	4602      	mov	r2, r0
 8005596:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005598:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800559c:	2b00      	cmp	r3, #0
 800559e:	da09      	bge.n	80055b4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	333b      	adds	r3, #59	; 0x3b
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e008      	b.n	80055c6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	212c      	movs	r1, #44	; 0x2c
 80055ba:	fb01 f303 	mul.w	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	333b      	adds	r3, #59	; 0x3b
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	212c      	movs	r1, #44	; 0x2c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	333c      	adds	r3, #60	; 0x3c
 80055d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80055d8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	787c      	ldrb	r4, [r7, #1]
 80055e0:	78ba      	ldrb	r2, [r7, #2]
 80055e2:	78f9      	ldrb	r1, [r7, #3]
 80055e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055e6:	9302      	str	r3, [sp, #8]
 80055e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4623      	mov	r3, r4
 80055f6:	f007 fcb5 	bl	800cf64 <USB_HC_Init>
 80055fa:	4603      	mov	r3, r0
 80055fc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	bd90      	pop	{r4, r7, pc}

08005610 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_HCD_HC_Halt+0x1e>
 800562a:	2302      	movs	r3, #2
 800562c:	e00f      	b.n	800564e <HAL_HCD_HC_Halt+0x3e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f007 fef1 	bl	800d426 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	461a      	mov	r2, r3
 8005666:	4603      	mov	r3, r0
 8005668:	70fb      	strb	r3, [r7, #3]
 800566a:	460b      	mov	r3, r1
 800566c:	70bb      	strb	r3, [r7, #2]
 800566e:	4613      	mov	r3, r2
 8005670:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	212c      	movs	r1, #44	; 0x2c
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	4413      	add	r3, r2
 800567e:	333b      	adds	r3, #59	; 0x3b
 8005680:	78ba      	ldrb	r2, [r7, #2]
 8005682:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	212c      	movs	r1, #44	; 0x2c
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	4413      	add	r3, r2
 8005690:	333f      	adds	r3, #63	; 0x3f
 8005692:	787a      	ldrb	r2, [r7, #1]
 8005694:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005696:	7c3b      	ldrb	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d112      	bne.n	80056c2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	212c      	movs	r1, #44	; 0x2c
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	3342      	adds	r3, #66	; 0x42
 80056aa:	2203      	movs	r2, #3
 80056ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	333d      	adds	r3, #61	; 0x3d
 80056bc:	7f3a      	ldrb	r2, [r7, #28]
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e008      	b.n	80056d4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	212c      	movs	r1, #44	; 0x2c
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	3342      	adds	r3, #66	; 0x42
 80056d0:	2202      	movs	r2, #2
 80056d2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80056d4:	787b      	ldrb	r3, [r7, #1]
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	f200 80c6 	bhi.w	8005868 <HAL_HCD_HC_SubmitRequest+0x210>
 80056dc:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	080056f5 	.word	0x080056f5
 80056e8:	08005855 	.word	0x08005855
 80056ec:	08005759 	.word	0x08005759
 80056f0:	080057d7 	.word	0x080057d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80056f4:	7c3b      	ldrb	r3, [r7, #16]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	f040 80b8 	bne.w	800586c <HAL_HCD_HC_SubmitRequest+0x214>
 80056fc:	78bb      	ldrb	r3, [r7, #2]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 80b4 	bne.w	800586c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005704:	8b3b      	ldrh	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	212c      	movs	r1, #44	; 0x2c
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	3355      	adds	r3, #85	; 0x55
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	212c      	movs	r1, #44	; 0x2c
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	3355      	adds	r3, #85	; 0x55
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3342      	adds	r3, #66	; 0x42
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005742:	e093      	b.n	800586c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	212c      	movs	r1, #44	; 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	3342      	adds	r3, #66	; 0x42
 8005752:	2202      	movs	r2, #2
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e089      	b.n	800586c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005758:	78bb      	ldrb	r3, [r7, #2]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d11d      	bne.n	800579a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	212c      	movs	r1, #44	; 0x2c
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	4413      	add	r3, r2
 800576a:	3355      	adds	r3, #85	; 0x55
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	212c      	movs	r1, #44	; 0x2c
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	4413      	add	r3, r2
 800577e:	3342      	adds	r3, #66	; 0x42
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005784:	e073      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	3342      	adds	r3, #66	; 0x42
 8005794:	2202      	movs	r2, #2
 8005796:	701a      	strb	r2, [r3, #0]
      break;
 8005798:	e069      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	212c      	movs	r1, #44	; 0x2c
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	3354      	adds	r3, #84	; 0x54
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	212c      	movs	r1, #44	; 0x2c
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	3342      	adds	r3, #66	; 0x42
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
      break;
 80057c0:	e055      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	212c      	movs	r1, #44	; 0x2c
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	3342      	adds	r3, #66	; 0x42
 80057d0:	2202      	movs	r2, #2
 80057d2:	701a      	strb	r2, [r3, #0]
      break;
 80057d4:	e04b      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80057d6:	78bb      	ldrb	r3, [r7, #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11d      	bne.n	8005818 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	212c      	movs	r1, #44	; 0x2c
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	3355      	adds	r3, #85	; 0x55
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	212c      	movs	r1, #44	; 0x2c
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	3342      	adds	r3, #66	; 0x42
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005802:	e034      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	212c      	movs	r1, #44	; 0x2c
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	4413      	add	r3, r2
 8005810:	3342      	adds	r3, #66	; 0x42
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
      break;
 8005816:	e02a      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	212c      	movs	r1, #44	; 0x2c
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	4413      	add	r3, r2
 8005824:	3354      	adds	r3, #84	; 0x54
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	212c      	movs	r1, #44	; 0x2c
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	4413      	add	r3, r2
 8005838:	3342      	adds	r3, #66	; 0x42
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
      break;
 800583e:	e016      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	212c      	movs	r1, #44	; 0x2c
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	4413      	add	r3, r2
 800584c:	3342      	adds	r3, #66	; 0x42
 800584e:	2202      	movs	r2, #2
 8005850:	701a      	strb	r2, [r3, #0]
      break;
 8005852:	e00c      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	212c      	movs	r1, #44	; 0x2c
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	4413      	add	r3, r2
 8005860:	3342      	adds	r3, #66	; 0x42
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
      break;
 8005866:	e002      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800586c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	212c      	movs	r1, #44	; 0x2c
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	4413      	add	r3, r2
 800587a:	3344      	adds	r3, #68	; 0x44
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	8b3a      	ldrh	r2, [r7, #24]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	202c      	movs	r0, #44	; 0x2c
 8005888:	fb00 f303 	mul.w	r3, r0, r3
 800588c:	440b      	add	r3, r1
 800588e:	334c      	adds	r3, #76	; 0x4c
 8005890:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	212c      	movs	r1, #44	; 0x2c
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	4413      	add	r3, r2
 800589e:	3360      	adds	r3, #96	; 0x60
 80058a0:	2200      	movs	r2, #0
 80058a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3350      	adds	r3, #80	; 0x50
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	212c      	movs	r1, #44	; 0x2c
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	3339      	adds	r3, #57	; 0x39
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	212c      	movs	r1, #44	; 0x2c
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	3361      	adds	r3, #97	; 0x61
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	222c      	movs	r2, #44	; 0x2c
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	3338      	adds	r3, #56	; 0x38
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	18d1      	adds	r1, r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	f007 fc44 	bl	800d180 <USB_HC_StartXfer>
 80058f8:	4603      	mov	r3, r0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop

08005904 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f007 f98d 	bl	800cc3a <USB_GetMode>
 8005920:	4603      	mov	r3, r0
 8005922:	2b01      	cmp	r3, #1
 8005924:	f040 80ef 	bne.w	8005b06 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f007 f971 	bl	800cc14 <USB_ReadInterrupts>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80e5 	beq.w	8005b04 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f007 f968 	bl	800cc14 <USB_ReadInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800594a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800594e:	d104      	bne.n	800595a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005958:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f007 f958 	bl	800cc14 <USB_ReadInterrupts>
 8005964:	4603      	mov	r3, r0
 8005966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d104      	bne.n	800597a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005978:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f007 f948 	bl	800cc14 <USB_ReadInterrupts>
 8005984:	4603      	mov	r3, r0
 8005986:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800598a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800598e:	d104      	bne.n	800599a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005998:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f007 f938 	bl	800cc14 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d103      	bne.n	80059b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2202      	movs	r2, #2
 80059b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f007 f92a 	bl	800cc14 <USB_ReadInterrupts>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ca:	d115      	bne.n	80059f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f00e fcd0 	bl	801438c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f007 fa1a 	bl	800ce2c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f007 f909 	bl	800cc14 <USB_ReadInterrupts>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0c:	d102      	bne.n	8005a14 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 f9e3 	bl	8006dda <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f007 f8fb 	bl	800cc14 <USB_ReadInterrupts>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d106      	bne.n	8005a36 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f00e fc93 	bl	8014354 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2208      	movs	r2, #8
 8005a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f007 f8ea 	bl	800cc14 <USB_ReadInterrupts>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d101      	bne.n	8005a4e <HAL_HCD_IRQHandler+0x14a>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_HCD_IRQHandler+0x14c>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0210 	bic.w	r2, r2, #16
 8005a62:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 f8e6 	bl	8006c36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0210 	orr.w	r2, r2, #16
 8005a78:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f007 f8c8 	bl	800cc14 <USB_ReadInterrupts>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a8e:	d13a      	bne.n	8005b06 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f007 fcb5 	bl	800d404 <USB_HC_ReadInterrupt>
 8005a9a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e025      	b.n	8005aee <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d018      	beq.n	8005ae8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	d106      	bne.n	8005adc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f88f 	bl	8005bf8 <HCD_HC_IN_IRQHandler>
 8005ada:	e005      	b.n	8005ae8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fcaa 	bl	800643c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d3d4      	bcc.n	8005aa2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	e000      	b.n	8005b06 <HAL_HCD_IRQHandler+0x202>
      return;
 8005b04:	bf00      	nop
    }
  }
}
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_HCD_Start+0x16>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e013      	b.n	8005b4a <HAL_HCD_Start+0x3e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f006 ff46 	bl	800c9c0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f007 f9b0 	bl	800cea0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_HCD_Stop+0x16>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e00d      	b.n	8005b84 <HAL_HCD_Stop+0x32>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f007 fdaf 	bl	800d6d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	212c      	movs	r1, #44	; 0x2c
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3360      	adds	r3, #96	; 0x60
 8005ba6:	781b      	ldrb	r3, [r3, #0]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	3350      	adds	r3, #80	; 0x50
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f007 f9a9 	bl	800cf40 <USB_GetCurrentFrame>
 8005bee:	4603      	mov	r3, r0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d119      	bne.n	8005c5c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	461a      	mov	r2, r3
 8005c36:	2304      	movs	r3, #4
 8005c38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c54:	f043 0302 	orr.w	r3, r3, #2
 8005c58:	60d3      	str	r3, [r2, #12]
 8005c5a:	e101      	b.n	8005e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d12b      	bne.n	8005ccc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	212c      	movs	r1, #44	; 0x2c
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	3361      	adds	r3, #97	; 0x61
 8005c96:	2207      	movs	r2, #7
 8005c98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f007 fbae 	bl	800d426 <USB_HC_Halt>
 8005cca:	e0c9      	b.n	8005e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d109      	bne.n	8005cf6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2320      	movs	r3, #32
 8005cf2:	6093      	str	r3, [r2, #8]
 8005cf4:	e0b4      	b.n	8005e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d133      	bne.n	8005d74 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d26:	f043 0302 	orr.w	r3, r3, #2
 8005d2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	212c      	movs	r1, #44	; 0x2c
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	3361      	adds	r3, #97	; 0x61
 8005d3a:	2205      	movs	r2, #5
 8005d3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2308      	movs	r3, #8
 8005d60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f007 fb5a 	bl	800d426 <USB_HC_Halt>
 8005d72:	e075      	b.n	8005e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8a:	d134      	bne.n	8005df6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	212c      	movs	r1, #44	; 0x2c
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3361      	adds	r3, #97	; 0x61
 8005dba:	2208      	movs	r2, #8
 8005dbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2310      	movs	r3, #16
 8005dce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f007 fb19 	bl	800d426 <USB_HC_Halt>
 8005df4:	e034      	b.n	8005e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d129      	bne.n	8005e60 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	212c      	movs	r1, #44	; 0x2c
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	3361      	adds	r3, #97	; 0x61
 8005e3a:	2206      	movs	r2, #6
 8005e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f007 faec 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e76:	d122      	bne.n	8005ebe <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e92:	f043 0302 	orr.w	r3, r3, #2
 8005e96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f007 fabf 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005ebc:	e2ba      	b.n	8006434 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 811b 	bne.w	800610c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d019      	beq.n	8005f12 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	212c      	movs	r1, #44	; 0x2c
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	3348      	adds	r3, #72	; 0x48
 8005eec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	0159      	lsls	r1, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	440b      	add	r3, r1
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	202c      	movs	r0, #44	; 0x2c
 8005f08:	fb00 f303 	mul.w	r3, r0, r3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3350      	adds	r3, #80	; 0x50
 8005f10:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	212c      	movs	r1, #44	; 0x2c
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3361      	adds	r3, #97	; 0x61
 8005f20:	2201      	movs	r2, #1
 8005f22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	212c      	movs	r1, #44	; 0x2c
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	335c      	adds	r3, #92	; 0x5c
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	461a      	mov	r2, r3
 8005f44:	2301      	movs	r3, #1
 8005f46:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	212c      	movs	r1, #44	; 0x2c
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	333f      	adds	r3, #63	; 0x3f
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	212c      	movs	r1, #44	; 0x2c
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	333f      	adds	r3, #63	; 0x3f
 8005f6a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d121      	bne.n	8005fb4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8a:	f043 0302 	orr.w	r3, r3, #2
 8005f8e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f007 fa43 	bl	800d426 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	461a      	mov	r2, r3
 8005fae:	2310      	movs	r3, #16
 8005fb0:	6093      	str	r3, [r2, #8]
 8005fb2:	e066      	b.n	8006082 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	212c      	movs	r1, #44	; 0x2c
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	333f      	adds	r3, #63	; 0x3f
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d127      	bne.n	8006018 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fe6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3360      	adds	r3, #96	; 0x60
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	b2d9      	uxtb	r1, r3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	202c      	movs	r0, #44	; 0x2c
 8006004:	fb00 f303 	mul.w	r3, r0, r3
 8006008:	4413      	add	r3, r2
 800600a:	3360      	adds	r3, #96	; 0x60
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f00e f9c9 	bl	80143a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006016:	e034      	b.n	8006082 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	333f      	adds	r3, #63	; 0x3f
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d12a      	bne.n	8006082 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	212c      	movs	r1, #44	; 0x2c
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	4413      	add	r3, r2
 8006038:	3360      	adds	r3, #96	; 0x60
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	212c      	movs	r1, #44	; 0x2c
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	4413      	add	r3, r2
 800604a:	3354      	adds	r3, #84	; 0x54
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f083 0301 	eor.w	r3, r3, #1
 8006052:	b2d8      	uxtb	r0, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	3354      	adds	r3, #84	; 0x54
 8006062:	4602      	mov	r2, r0
 8006064:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	b2d9      	uxtb	r1, r3
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	202c      	movs	r0, #44	; 0x2c
 8006070:	fb00 f303 	mul.w	r3, r0, r3
 8006074:	4413      	add	r3, r2
 8006076:	3360      	adds	r3, #96	; 0x60
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f00e f993 	bl	80143a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d12b      	bne.n	80060e2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	212c      	movs	r1, #44	; 0x2c
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	3348      	adds	r3, #72	; 0x48
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	202c      	movs	r0, #44	; 0x2c
 80060a0:	fb00 f202 	mul.w	r2, r0, r2
 80060a4:	440a      	add	r2, r1
 80060a6:	3240      	adds	r2, #64	; 0x40
 80060a8:	8812      	ldrh	r2, [r2, #0]
 80060aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 81be 	beq.w	8006434 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	212c      	movs	r1, #44	; 0x2c
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	3354      	adds	r3, #84	; 0x54
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f083 0301 	eor.w	r3, r3, #1
 80060cc:	b2d8      	uxtb	r0, r3
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	212c      	movs	r1, #44	; 0x2c
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	4413      	add	r3, r2
 80060da:	3354      	adds	r3, #84	; 0x54
 80060dc:	4602      	mov	r2, r0
 80060de:	701a      	strb	r2, [r3, #0]
}
 80060e0:	e1a8      	b.n	8006434 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	212c      	movs	r1, #44	; 0x2c
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	3354      	adds	r3, #84	; 0x54
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	f083 0301 	eor.w	r3, r3, #1
 80060f6:	b2d8      	uxtb	r0, r3
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	212c      	movs	r1, #44	; 0x2c
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	3354      	adds	r3, #84	; 0x54
 8006106:	4602      	mov	r2, r0
 8006108:	701a      	strb	r2, [r3, #0]
}
 800610a:	e193      	b.n	8006434 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	f040 8106 	bne.w	8006330 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613e:	f023 0302 	bic.w	r3, r3, #2
 8006142:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	212c      	movs	r1, #44	; 0x2c
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	3361      	adds	r3, #97	; 0x61
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d109      	bne.n	800616c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	212c      	movs	r1, #44	; 0x2c
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	3360      	adds	r3, #96	; 0x60
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e0c9      	b.n	8006300 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	212c      	movs	r1, #44	; 0x2c
 8006172:	fb01 f303 	mul.w	r3, r1, r3
 8006176:	4413      	add	r3, r2
 8006178:	3361      	adds	r3, #97	; 0x61
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b05      	cmp	r3, #5
 800617e:	d109      	bne.n	8006194 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	212c      	movs	r1, #44	; 0x2c
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	3360      	adds	r3, #96	; 0x60
 800618e:	2205      	movs	r2, #5
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e0b5      	b.n	8006300 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	212c      	movs	r1, #44	; 0x2c
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	3361      	adds	r3, #97	; 0x61
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d009      	beq.n	80061bc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	212c      	movs	r1, #44	; 0x2c
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	3361      	adds	r3, #97	; 0x61
 80061b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d150      	bne.n	800625e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	212c      	movs	r1, #44	; 0x2c
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	335c      	adds	r3, #92	; 0x5c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	202c      	movs	r0, #44	; 0x2c
 80061d4:	fb00 f303 	mul.w	r3, r0, r3
 80061d8:	440b      	add	r3, r1
 80061da:	335c      	adds	r3, #92	; 0x5c
 80061dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	212c      	movs	r1, #44	; 0x2c
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	4413      	add	r3, r2
 80061ea:	335c      	adds	r3, #92	; 0x5c
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d912      	bls.n	8006218 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	212c      	movs	r1, #44	; 0x2c
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	335c      	adds	r3, #92	; 0x5c
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	212c      	movs	r1, #44	; 0x2c
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	4413      	add	r3, r2
 8006210:	3360      	adds	r3, #96	; 0x60
 8006212:	2204      	movs	r2, #4
 8006214:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006216:	e073      	b.n	8006300 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	212c      	movs	r1, #44	; 0x2c
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	3360      	adds	r3, #96	; 0x60
 8006226:	2202      	movs	r2, #2
 8006228:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006240:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006248:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800625c:	e050      	b.n	8006300 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	212c      	movs	r1, #44	; 0x2c
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	4413      	add	r3, r2
 800626a:	3361      	adds	r3, #97	; 0x61
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d122      	bne.n	80062b8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	212c      	movs	r1, #44	; 0x2c
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	3360      	adds	r3, #96	; 0x60
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800629a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e023      	b.n	8006300 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	212c      	movs	r1, #44	; 0x2c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	3361      	adds	r3, #97	; 0x61
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b07      	cmp	r3, #7
 80062ca:	d119      	bne.n	8006300 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	212c      	movs	r1, #44	; 0x2c
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	335c      	adds	r3, #92	; 0x5c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	202c      	movs	r0, #44	; 0x2c
 80062e4:	fb00 f303 	mul.w	r3, r0, r3
 80062e8:	440b      	add	r3, r1
 80062ea:	335c      	adds	r3, #92	; 0x5c
 80062ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	212c      	movs	r1, #44	; 0x2c
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	3360      	adds	r3, #96	; 0x60
 80062fc:	2204      	movs	r2, #4
 80062fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630c:	461a      	mov	r2, r3
 800630e:	2302      	movs	r3, #2
 8006310:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	b2d9      	uxtb	r1, r3
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	202c      	movs	r0, #44	; 0x2c
 800631c:	fb00 f303 	mul.w	r3, r0, r3
 8006320:	4413      	add	r3, r2
 8006322:	3360      	adds	r3, #96	; 0x60
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f00e f83d 	bl	80143a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800632e:	e081      	b.n	8006434 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b10      	cmp	r3, #16
 8006344:	d176      	bne.n	8006434 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	212c      	movs	r1, #44	; 0x2c
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	4413      	add	r3, r2
 8006352:	333f      	adds	r3, #63	; 0x3f
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d121      	bne.n	800639e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	212c      	movs	r1, #44	; 0x2c
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	4413      	add	r3, r2
 8006366:	335c      	adds	r3, #92	; 0x5c
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	440a      	add	r2, r1
 8006382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f007 f845 	bl	800d426 <USB_HC_Halt>
 800639c:	e041      	b.n	8006422 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	212c      	movs	r1, #44	; 0x2c
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	333f      	adds	r3, #63	; 0x3f
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	212c      	movs	r1, #44	; 0x2c
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	333f      	adds	r3, #63	; 0x3f
 80063c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d12d      	bne.n	8006422 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	212c      	movs	r1, #44	; 0x2c
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	335c      	adds	r3, #92	; 0x5c
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d120      	bne.n	8006422 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	212c      	movs	r1, #44	; 0x2c
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	3361      	adds	r3, #97	; 0x61
 80063ee:	2203      	movs	r2, #3
 80063f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f007 f802 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	4413      	add	r3, r2
 800642a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642e:	461a      	mov	r2, r3
 8006430:	2310      	movs	r3, #16
 8006432:	6093      	str	r3, [r2, #8]
}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d119      	bne.n	80064a0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	461a      	mov	r2, r3
 800647a:	2304      	movs	r3, #4
 800647c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	440a      	add	r2, r1
 8006494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006498:	f043 0302 	orr.w	r3, r3, #2
 800649c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800649e:	e3c6      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d13e      	bne.n	8006534 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	461a      	mov	r2, r3
 80064c4:	2320      	movs	r3, #32
 80064c6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	212c      	movs	r1, #44	; 0x2c
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	333d      	adds	r3, #61	; 0x3d
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	f040 83a8 	bne.w	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	212c      	movs	r1, #44	; 0x2c
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	4413      	add	r3, r2
 80064ea:	333d      	adds	r3, #61	; 0x3d
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	212c      	movs	r1, #44	; 0x2c
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	3360      	adds	r3, #96	; 0x60
 80064fe:	2202      	movs	r2, #2
 8006500:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	440a      	add	r2, r1
 8006518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	4611      	mov	r1, r2
 800652c:	4618      	mov	r0, r3
 800652e:	f006 ff7a 	bl	800d426 <USB_HC_Halt>
}
 8006532:	e37c      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654a:	d122      	bne.n	8006592 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	440a      	add	r2, r1
 8006562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006566:	f043 0302 	orr.w	r3, r3, #2
 800656a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f006 ff55 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	461a      	mov	r2, r3
 800658a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658e:	6093      	str	r3, [r2, #8]
}
 8006590:	e34d      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d150      	bne.n	800664a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	212c      	movs	r1, #44	; 0x2c
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	335c      	adds	r3, #92	; 0x5c
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d111      	bne.n	80065f4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	212c      	movs	r1, #44	; 0x2c
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	4413      	add	r3, r2
 80065dc:	333d      	adds	r3, #61	; 0x3d
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	461a      	mov	r2, r3
 80065f0:	2340      	movs	r3, #64	; 0x40
 80065f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660e:	f043 0302 	orr.w	r3, r3, #2
 8006612:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	4611      	mov	r1, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f006 ff01 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006630:	461a      	mov	r2, r3
 8006632:	2301      	movs	r3, #1
 8006634:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	212c      	movs	r1, #44	; 0x2c
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	3361      	adds	r3, #97	; 0x61
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
}
 8006648:	e2f1      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d13c      	bne.n	80066da <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	212c      	movs	r1, #44	; 0x2c
 8006666:	fb01 f303 	mul.w	r3, r1, r3
 800666a:	4413      	add	r3, r2
 800666c:	3361      	adds	r3, #97	; 0x61
 800666e:	2204      	movs	r2, #4
 8006670:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	212c      	movs	r1, #44	; 0x2c
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	4413      	add	r3, r2
 800667e:	333d      	adds	r3, #61	; 0x3d
 8006680:	2201      	movs	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	212c      	movs	r1, #44	; 0x2c
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	335c      	adds	r3, #92	; 0x5c
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b0:	f043 0302 	orr.w	r3, r3, #2
 80066b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f006 feb0 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	461a      	mov	r2, r3
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	6093      	str	r3, [r2, #8]
}
 80066d8:	e2a9      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d12a      	bne.n	8006746 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fc:	461a      	mov	r2, r3
 80066fe:	2308      	movs	r3, #8
 8006700:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	440a      	add	r2, r1
 8006718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	4611      	mov	r1, r2
 800672c:	4618      	mov	r0, r3
 800672e:	f006 fe7a 	bl	800d426 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	212c      	movs	r1, #44	; 0x2c
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	4413      	add	r3, r2
 800673e:	3361      	adds	r3, #97	; 0x61
 8006740:	2205      	movs	r2, #5
 8006742:	701a      	strb	r2, [r3, #0]
}
 8006744:	e273      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d150      	bne.n	80067fe <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	212c      	movs	r1, #44	; 0x2c
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	4413      	add	r3, r2
 8006768:	335c      	adds	r3, #92	; 0x5c
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	212c      	movs	r1, #44	; 0x2c
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	3361      	adds	r3, #97	; 0x61
 800677c:	2203      	movs	r2, #3
 800677e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	212c      	movs	r1, #44	; 0x2c
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	333d      	adds	r3, #61	; 0x3d
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d112      	bne.n	80067ba <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	212c      	movs	r1, #44	; 0x2c
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	333c      	adds	r3, #60	; 0x3c
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d108      	bne.n	80067ba <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	212c      	movs	r1, #44	; 0x2c
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	333d      	adds	r3, #61	; 0x3d
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	4611      	mov	r1, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f006 fe1e 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	461a      	mov	r2, r3
 80067f8:	2310      	movs	r3, #16
 80067fa:	6093      	str	r3, [r2, #8]
}
 80067fc:	e217      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d174      	bne.n	80068fe <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d121      	bne.n	8006860 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	212c      	movs	r1, #44	; 0x2c
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	3361      	adds	r3, #97	; 0x61
 800682a:	2206      	movs	r2, #6
 800682c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	440a      	add	r2, r1
 8006844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006848:	f043 0302 	orr.w	r3, r3, #2
 800684c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f006 fde4 	bl	800d426 <USB_HC_Halt>
 800685e:	e044      	b.n	80068ea <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	212c      	movs	r1, #44	; 0x2c
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	335c      	adds	r3, #92	; 0x5c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	202c      	movs	r0, #44	; 0x2c
 8006878:	fb00 f303 	mul.w	r3, r0, r3
 800687c:	440b      	add	r3, r1
 800687e:	335c      	adds	r3, #92	; 0x5c
 8006880:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	212c      	movs	r1, #44	; 0x2c
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	4413      	add	r3, r2
 800688e:	335c      	adds	r3, #92	; 0x5c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d920      	bls.n	80068d8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	212c      	movs	r1, #44	; 0x2c
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	335c      	adds	r3, #92	; 0x5c
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	212c      	movs	r1, #44	; 0x2c
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	3360      	adds	r3, #96	; 0x60
 80068b6:	2204      	movs	r2, #4
 80068b8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	b2d9      	uxtb	r1, r3
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	202c      	movs	r0, #44	; 0x2c
 80068c4:	fb00 f303 	mul.w	r3, r0, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	3360      	adds	r3, #96	; 0x60
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f00d fd69 	bl	80143a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80068d6:	e008      	b.n	80068ea <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	212c      	movs	r1, #44	; 0x2c
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	3360      	adds	r3, #96	; 0x60
 80068e6:	2202      	movs	r2, #2
 80068e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	461a      	mov	r2, r3
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	6093      	str	r3, [r2, #8]
}
 80068fc:	e197      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006914:	d134      	bne.n	8006980 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f006 fd70 	bl	800d426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	2310      	movs	r3, #16
 8006956:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	461a      	mov	r2, r3
 8006966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800696a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	212c      	movs	r1, #44	; 0x2c
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	3361      	adds	r3, #97	; 0x61
 800697a:	2208      	movs	r2, #8
 800697c:	701a      	strb	r2, [r3, #0]
}
 800697e:	e156      	b.n	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	f040 814b 	bne.w	8006c2e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b2:	f023 0302 	bic.w	r3, r3, #2
 80069b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	212c      	movs	r1, #44	; 0x2c
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	3361      	adds	r3, #97	; 0x61
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d179      	bne.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	212c      	movs	r1, #44	; 0x2c
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	3360      	adds	r3, #96	; 0x60
 80069da:	2201      	movs	r2, #1
 80069dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	212c      	movs	r1, #44	; 0x2c
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	333f      	adds	r3, #63	; 0x3f
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d00a      	beq.n	8006a08 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	212c      	movs	r1, #44	; 0x2c
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	4413      	add	r3, r2
 80069fe:	333f      	adds	r3, #63	; 0x3f
 8006a00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	f040 80fc 	bne.w	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d142      	bne.n	8006a96 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	212c      	movs	r1, #44	; 0x2c
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	334c      	adds	r3, #76	; 0x4c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80ed 	beq.w	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	212c      	movs	r1, #44	; 0x2c
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	334c      	adds	r3, #76	; 0x4c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	202c      	movs	r0, #44	; 0x2c
 8006a3c:	fb00 f202 	mul.w	r2, r0, r2
 8006a40:	440a      	add	r2, r1
 8006a42:	3240      	adds	r2, #64	; 0x40
 8006a44:	8812      	ldrh	r2, [r2, #0]
 8006a46:	4413      	add	r3, r2
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	202c      	movs	r0, #44	; 0x2c
 8006a50:	fb00 f202 	mul.w	r2, r0, r2
 8006a54:	440a      	add	r2, r1
 8006a56:	3240      	adds	r2, #64	; 0x40
 8006a58:	8812      	ldrh	r2, [r2, #0]
 8006a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80ca 	beq.w	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	212c      	movs	r1, #44	; 0x2c
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	3355      	adds	r3, #85	; 0x55
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f083 0301 	eor.w	r3, r3, #1
 8006a80:	b2d8      	uxtb	r0, r3
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	212c      	movs	r1, #44	; 0x2c
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3355      	adds	r3, #85	; 0x55
 8006a90:	4602      	mov	r2, r0
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e0b4      	b.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	212c      	movs	r1, #44	; 0x2c
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3355      	adds	r3, #85	; 0x55
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f083 0301 	eor.w	r3, r3, #1
 8006aaa:	b2d8      	uxtb	r0, r3
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	212c      	movs	r1, #44	; 0x2c
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3355      	adds	r3, #85	; 0x55
 8006aba:	4602      	mov	r2, r0
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e09f      	b.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	212c      	movs	r1, #44	; 0x2c
 8006ac6:	fb01 f303 	mul.w	r3, r1, r3
 8006aca:	4413      	add	r3, r2
 8006acc:	3361      	adds	r3, #97	; 0x61
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d109      	bne.n	8006ae8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	212c      	movs	r1, #44	; 0x2c
 8006ada:	fb01 f303 	mul.w	r3, r1, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	3360      	adds	r3, #96	; 0x60
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e08b      	b.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	212c      	movs	r1, #44	; 0x2c
 8006aee:	fb01 f303 	mul.w	r3, r1, r3
 8006af2:	4413      	add	r3, r2
 8006af4:	3361      	adds	r3, #97	; 0x61
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d109      	bne.n	8006b10 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	212c      	movs	r1, #44	; 0x2c
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	3360      	adds	r3, #96	; 0x60
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	e077      	b.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	212c      	movs	r1, #44	; 0x2c
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3361      	adds	r3, #97	; 0x61
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	d109      	bne.n	8006b38 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	212c      	movs	r1, #44	; 0x2c
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	3360      	adds	r3, #96	; 0x60
 8006b32:	2205      	movs	r2, #5
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e063      	b.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	212c      	movs	r1, #44	; 0x2c
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	3361      	adds	r3, #97	; 0x61
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b06      	cmp	r3, #6
 8006b4a:	d009      	beq.n	8006b60 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	212c      	movs	r1, #44	; 0x2c
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	3361      	adds	r3, #97	; 0x61
 8006b5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d14f      	bne.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	212c      	movs	r1, #44	; 0x2c
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	335c      	adds	r3, #92	; 0x5c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	202c      	movs	r0, #44	; 0x2c
 8006b78:	fb00 f303 	mul.w	r3, r0, r3
 8006b7c:	440b      	add	r3, r1
 8006b7e:	335c      	adds	r3, #92	; 0x5c
 8006b80:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	212c      	movs	r1, #44	; 0x2c
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	335c      	adds	r3, #92	; 0x5c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d912      	bls.n	8006bbc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	335c      	adds	r3, #92	; 0x5c
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	212c      	movs	r1, #44	; 0x2c
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3360      	adds	r3, #96	; 0x60
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	e021      	b.n	8006c00 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	212c      	movs	r1, #44	; 0x2c
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3360      	adds	r3, #96	; 0x60
 8006bca:	2202      	movs	r2, #2
 8006bcc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2302      	movs	r3, #2
 8006c10:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	b2d9      	uxtb	r1, r3
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	202c      	movs	r0, #44	; 0x2c
 8006c1c:	fb00 f303 	mul.w	r3, r0, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	3360      	adds	r3, #96	; 0x60
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f00d fbbd 	bl	80143a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006c2e:	bf00      	nop
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b08a      	sub	sp, #40	; 0x28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	0c5b      	lsrs	r3, r3, #17
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	091b      	lsrs	r3, r3, #4
 8006c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d004      	beq.n	8006c7c <HCD_RXQLVL_IRQHandler+0x46>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	f000 80a9 	beq.w	8006dcc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006c7a:	e0aa      	b.n	8006dd2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80a6 	beq.w	8006dd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	212c      	movs	r1, #44	; 0x2c
 8006c8a:	fb01 f303 	mul.w	r3, r1, r3
 8006c8e:	4413      	add	r3, r2
 8006c90:	3344      	adds	r3, #68	; 0x44
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 809b 	beq.w	8006dd0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	212c      	movs	r1, #44	; 0x2c
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3350      	adds	r3, #80	; 0x50
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	441a      	add	r2, r3
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	202c      	movs	r0, #44	; 0x2c
 8006cb4:	fb00 f303 	mul.w	r3, r0, r3
 8006cb8:	440b      	add	r3, r1
 8006cba:	334c      	adds	r3, #76	; 0x4c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d87a      	bhi.n	8006db8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	212c      	movs	r1, #44	; 0x2c
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3344      	adds	r3, #68	; 0x44
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	b292      	uxth	r2, r2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	f005 ff42 	bl	800cb64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	212c      	movs	r1, #44	; 0x2c
 8006ce6:	fb01 f303 	mul.w	r3, r1, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	3344      	adds	r3, #68	; 0x44
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	441a      	add	r2, r3
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	202c      	movs	r0, #44	; 0x2c
 8006cfa:	fb00 f303 	mul.w	r3, r0, r3
 8006cfe:	440b      	add	r3, r1
 8006d00:	3344      	adds	r3, #68	; 0x44
 8006d02:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	212c      	movs	r1, #44	; 0x2c
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	4413      	add	r3, r2
 8006d10:	3350      	adds	r3, #80	; 0x50
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	441a      	add	r2, r3
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	202c      	movs	r0, #44	; 0x2c
 8006d1e:	fb00 f303 	mul.w	r3, r0, r3
 8006d22:	440b      	add	r3, r1
 8006d24:	3350      	adds	r3, #80	; 0x50
 8006d26:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	0cdb      	lsrs	r3, r3, #19
 8006d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d3c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	212c      	movs	r1, #44	; 0x2c
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	4413      	add	r3, r2
 8006d4a:	3340      	adds	r3, #64	; 0x40
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d13c      	bne.n	8006dd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d039      	beq.n	8006dd0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	212c      	movs	r1, #44	; 0x2c
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	3354      	adds	r3, #84	; 0x54
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	f083 0301 	eor.w	r3, r3, #1
 8006da2:	b2d8      	uxtb	r0, r3
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	212c      	movs	r1, #44	; 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3354      	adds	r3, #84	; 0x54
 8006db2:	4602      	mov	r2, r0
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e00b      	b.n	8006dd0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	212c      	movs	r1, #44	; 0x2c
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3360      	adds	r3, #96	; 0x60
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	701a      	strb	r2, [r3, #0]
      break;
 8006dca:	e001      	b.n	8006dd0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006dcc:	bf00      	nop
 8006dce:	e000      	b.n	8006dd2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006dd0:	bf00      	nop
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3728      	adds	r7, #40	; 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e06:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d10b      	bne.n	8006e2a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f00d faa7 	bl	8014370 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f043 0302 	orr.w	r3, r3, #2
 8006e28:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d132      	bne.n	8006e9a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f043 0308 	orr.w	r3, r3, #8
 8006e3a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d126      	bne.n	8006e94 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d113      	bne.n	8006e76 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006e54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e58:	d106      	bne.n	8006e68 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2102      	movs	r1, #2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f005 ffe3 	bl	800ce2c <USB_InitFSLSPClkSel>
 8006e66:	e011      	b.n	8006e8c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f005 ffdc 	bl	800ce2c <USB_InitFSLSPClkSel>
 8006e74:	e00a      	b.n	8006e8c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d106      	bne.n	8006e8c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e84:	461a      	mov	r2, r3
 8006e86:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006e8a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f00d fa99 	bl	80143c4 <HAL_HCD_PortEnabled_Callback>
 8006e92:	e002      	b.n	8006e9a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f00d faa3 	bl	80143e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d103      	bne.n	8006eac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f043 0320 	orr.w	r3, r3, #32
 8006eaa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6013      	str	r3, [r2, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006ec8:	4a08      	ldr	r2, [pc, #32]	; (8006eec <HAL_HSEM_FastTake+0x2c>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3320      	adds	r3, #32
 8006ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed2:	4a07      	ldr	r2, [pc, #28]	; (8006ef0 <HAL_HSEM_FastTake+0x30>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d101      	bne.n	8006edc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	58026400 	.word	0x58026400
 8006ef0:	80000300 	.word	0x80000300

08006ef4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006efe:	4906      	ldr	r1, [pc, #24]	; (8006f18 <HAL_HSEM_Release+0x24>)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	58026400 	.word	0x58026400

08006f1c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <HAL_HSEM_ActivateNotification+0x20>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	4904      	ldr	r1, [pc, #16]	; (8006f3c <HAL_HSEM_ActivateNotification+0x20>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]
#endif
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	58026500 	.word	0x58026500

08006f40 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_HSEM_IRQHandler+0x30>)
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <HAL_HSEM_IRQHandler+0x30>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	43db      	mvns	r3, r3
 8006f54:	4906      	ldr	r1, [pc, #24]	; (8006f70 <HAL_HSEM_IRQHandler+0x30>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006f5a:	4a05      	ldr	r2, [pc, #20]	; (8006f70 <HAL_HSEM_IRQHandler+0x30>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f00c fec5 	bl	8013cf0 <HAL_HSEM_FreeCallback>
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	58026500 	.word	0x58026500

08006f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e07f      	b.n	8007086 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fa f934 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	; 0x24
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fea:	609a      	str	r2, [r3, #8]
 8006fec:	e006      	b.n	8006ffc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ffa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d104      	bne.n	800700e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800700c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <HAL_I2C_Init+0x11c>)
 800701a:	430b      	orrs	r3, r1
 800701c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800702c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	ea42 0103 	orr.w	r1, r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	021a      	lsls	r2, r3, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	69d9      	ldr	r1, [r3, #28]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1a      	ldr	r2, [r3, #32]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	02008000 	.word	0x02008000

08007094 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
  }
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d138      	bne.n	8007150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e032      	b.n	8007152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2224      	movs	r2, #36	; 0x24
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800711a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e000      	b.n	8007152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007150:	2302      	movs	r3, #2
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b20      	cmp	r3, #32
 8007172:	d139      	bne.n	80071e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800717e:	2302      	movs	r3, #2
 8007180:	e033      	b.n	80071ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2224      	movs	r2, #36	; 0x24
 800718e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e000      	b.n	80071ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071e8:	2302      	movs	r3, #2
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
	...

080071f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007200:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	2b06      	cmp	r3, #6
 800720a:	d00a      	beq.n	8007222 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800720c:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d001      	beq.n	800721e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e040      	b.n	80072a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e03e      	b.n	80072a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007222:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800722a:	491f      	ldr	r1, [pc, #124]	; (80072a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4313      	orrs	r3, r2
 8007230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007232:	f7fb fa3b 	bl	80026ac <HAL_GetTick>
 8007236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007238:	e009      	b.n	800724e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800723a:	f7fb fa37 	bl	80026ac <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007248:	d901      	bls.n	800724e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e028      	b.n	80072a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725a:	d1ee      	bne.n	800723a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b1e      	cmp	r3, #30
 8007260:	d008      	beq.n	8007274 <HAL_PWREx_ConfigSupply+0x7c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b2e      	cmp	r3, #46	; 0x2e
 8007266:	d005      	beq.n	8007274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b1d      	cmp	r3, #29
 800726c:	d002      	beq.n	8007274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b2d      	cmp	r3, #45	; 0x2d
 8007272:	d114      	bne.n	800729e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007274:	f7fb fa1a 	bl	80026ac <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800727a:	e009      	b.n	8007290 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800727c:	f7fb fa16 	bl	80026ac <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800728a:	d901      	bls.n	8007290 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e007      	b.n	80072a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d1ee      	bne.n	800727c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	58024800 	.word	0x58024800

080072ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80072b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ba:	60d3      	str	r3, [r2, #12]
}
 80072bc:	bf00      	nop
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	58024800 	.word	0x58024800

080072cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e3ff      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 8087 	beq.w	80073fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ec:	4b99      	ldr	r3, [pc, #612]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072f6:	4b97      	ldr	r3, [pc, #604]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d007      	beq.n	8007312 <HAL_RCC_OscConfig+0x46>
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	2b18      	cmp	r3, #24
 8007306:	d110      	bne.n	800732a <HAL_RCC_OscConfig+0x5e>
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d10b      	bne.n	800732a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007312:	4b90      	ldr	r3, [pc, #576]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d06c      	beq.n	80073f8 <HAL_RCC_OscConfig+0x12c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d168      	bne.n	80073f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e3d9      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007332:	d106      	bne.n	8007342 <HAL_RCC_OscConfig+0x76>
 8007334:	4b87      	ldr	r3, [pc, #540]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a86      	ldr	r2, [pc, #536]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800733a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	e02e      	b.n	80073a0 <HAL_RCC_OscConfig+0xd4>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10c      	bne.n	8007364 <HAL_RCC_OscConfig+0x98>
 800734a:	4b82      	ldr	r3, [pc, #520]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a81      	ldr	r2, [pc, #516]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4b7f      	ldr	r3, [pc, #508]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a7e      	ldr	r2, [pc, #504]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800735c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e01d      	b.n	80073a0 <HAL_RCC_OscConfig+0xd4>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800736c:	d10c      	bne.n	8007388 <HAL_RCC_OscConfig+0xbc>
 800736e:	4b79      	ldr	r3, [pc, #484]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a78      	ldr	r2, [pc, #480]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	4b76      	ldr	r3, [pc, #472]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a75      	ldr	r2, [pc, #468]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e00b      	b.n	80073a0 <HAL_RCC_OscConfig+0xd4>
 8007388:	4b72      	ldr	r3, [pc, #456]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a71      	ldr	r2, [pc, #452]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800738e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	4b6f      	ldr	r3, [pc, #444]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a6e      	ldr	r2, [pc, #440]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800739a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d013      	beq.n	80073d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fb f980 	bl	80026ac <HAL_GetTick>
 80073ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b0:	f7fb f97c 	bl	80026ac <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b64      	cmp	r3, #100	; 0x64
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e38d      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073c2:	4b64      	ldr	r3, [pc, #400]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCC_OscConfig+0xe4>
 80073ce:	e014      	b.n	80073fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d0:	f7fb f96c 	bl	80026ac <HAL_GetTick>
 80073d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d8:	f7fb f968 	bl	80026ac <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b64      	cmp	r3, #100	; 0x64
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e379      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073ea:	4b5a      	ldr	r3, [pc, #360]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f0      	bne.n	80073d8 <HAL_RCC_OscConfig+0x10c>
 80073f6:	e000      	b.n	80073fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80ae 	beq.w	8007564 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007408:	4b52      	ldr	r3, [pc, #328]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007410:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007412:	4b50      	ldr	r3, [pc, #320]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <HAL_RCC_OscConfig+0x162>
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2b18      	cmp	r3, #24
 8007422:	d13a      	bne.n	800749a <HAL_RCC_OscConfig+0x1ce>
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d135      	bne.n	800749a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800742e:	4b49      	ldr	r3, [pc, #292]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_RCC_OscConfig+0x17a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e34b      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007446:	f7fb f961 	bl	800270c <HAL_GetREVID>
 800744a:	4603      	mov	r3, r0
 800744c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007450:	4293      	cmp	r3, r2
 8007452:	d817      	bhi.n	8007484 <HAL_RCC_OscConfig+0x1b8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d108      	bne.n	800746e <HAL_RCC_OscConfig+0x1a2>
 800745c:	4b3d      	ldr	r3, [pc, #244]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007464:	4a3b      	ldr	r2, [pc, #236]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800746c:	e07a      	b.n	8007564 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800746e:	4b39      	ldr	r3, [pc, #228]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	031b      	lsls	r3, r3, #12
 800747c:	4935      	ldr	r1, [pc, #212]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800747e:	4313      	orrs	r3, r2
 8007480:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007482:	e06f      	b.n	8007564 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007484:	4b33      	ldr	r3, [pc, #204]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	061b      	lsls	r3, r3, #24
 8007492:	4930      	ldr	r1, [pc, #192]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007494:	4313      	orrs	r3, r2
 8007496:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007498:	e064      	b.n	8007564 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d045      	beq.n	800752e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074a2:	4b2c      	ldr	r3, [pc, #176]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 0219 	bic.w	r2, r3, #25
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	4929      	ldr	r1, [pc, #164]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fb f8fa 	bl	80026ac <HAL_GetTick>
 80074b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074bc:	f7fb f8f6 	bl	80026ac <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e307      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074ce:	4b21      	ldr	r3, [pc, #132]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0f0      	beq.n	80074bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074da:	f7fb f917 	bl	800270c <HAL_GetREVID>
 80074de:	4603      	mov	r3, r0
 80074e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d817      	bhi.n	8007518 <HAL_RCC_OscConfig+0x24c>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d108      	bne.n	8007502 <HAL_RCC_OscConfig+0x236>
 80074f0:	4b18      	ldr	r3, [pc, #96]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80074f8:	4a16      	ldr	r2, [pc, #88]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 80074fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fe:	6053      	str	r3, [r2, #4]
 8007500:	e030      	b.n	8007564 <HAL_RCC_OscConfig+0x298>
 8007502:	4b14      	ldr	r3, [pc, #80]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	031b      	lsls	r3, r3, #12
 8007510:	4910      	ldr	r1, [pc, #64]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007512:	4313      	orrs	r3, r2
 8007514:	604b      	str	r3, [r1, #4]
 8007516:	e025      	b.n	8007564 <HAL_RCC_OscConfig+0x298>
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	490b      	ldr	r1, [pc, #44]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007528:	4313      	orrs	r3, r2
 800752a:	604b      	str	r3, [r1, #4]
 800752c:	e01a      	b.n	8007564 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a08      	ldr	r2, [pc, #32]	; (8007554 <HAL_RCC_OscConfig+0x288>)
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753a:	f7fb f8b7 	bl	80026ac <HAL_GetTick>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007540:	e00a      	b.n	8007558 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007542:	f7fb f8b3 	bl	80026ac <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d903      	bls.n	8007558 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e2c4      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
 8007554:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007558:	4ba4      	ldr	r3, [pc, #656]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1ee      	bne.n	8007542 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80a9 	beq.w	80076c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007572:	4b9e      	ldr	r3, [pc, #632]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800757a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800757c:	4b9b      	ldr	r3, [pc, #620]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b08      	cmp	r3, #8
 8007586:	d007      	beq.n	8007598 <HAL_RCC_OscConfig+0x2cc>
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b18      	cmp	r3, #24
 800758c:	d13a      	bne.n	8007604 <HAL_RCC_OscConfig+0x338>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	2b01      	cmp	r3, #1
 8007596:	d135      	bne.n	8007604 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007598:	4b94      	ldr	r3, [pc, #592]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <HAL_RCC_OscConfig+0x2e4>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d001      	beq.n	80075b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e296      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075b0:	f7fb f8ac 	bl	800270c <HAL_GetREVID>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d817      	bhi.n	80075ee <HAL_RCC_OscConfig+0x322>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d108      	bne.n	80075d8 <HAL_RCC_OscConfig+0x30c>
 80075c6:	4b89      	ldr	r3, [pc, #548]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80075ce:	4a87      	ldr	r2, [pc, #540]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80075d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075d6:	e075      	b.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075d8:	4b84      	ldr	r3, [pc, #528]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	069b      	lsls	r3, r3, #26
 80075e6:	4981      	ldr	r1, [pc, #516]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075ec:	e06a      	b.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075ee:	4b7f      	ldr	r3, [pc, #508]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	061b      	lsls	r3, r3, #24
 80075fc:	497b      	ldr	r1, [pc, #492]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007602:	e05f      	b.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d042      	beq.n	8007692 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800760c:	4b77      	ldr	r3, [pc, #476]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a76      	ldr	r2, [pc, #472]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007618:	f7fb f848 	bl	80026ac <HAL_GetTick>
 800761c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007620:	f7fb f844 	bl	80026ac <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e255      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007632:	4b6e      	ldr	r3, [pc, #440]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f0      	beq.n	8007620 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800763e:	f7fb f865 	bl	800270c <HAL_GetREVID>
 8007642:	4603      	mov	r3, r0
 8007644:	f241 0203 	movw	r2, #4099	; 0x1003
 8007648:	4293      	cmp	r3, r2
 800764a:	d817      	bhi.n	800767c <HAL_RCC_OscConfig+0x3b0>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	2b20      	cmp	r3, #32
 8007652:	d108      	bne.n	8007666 <HAL_RCC_OscConfig+0x39a>
 8007654:	4b65      	ldr	r3, [pc, #404]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800765c:	4a63      	ldr	r2, [pc, #396]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800765e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007662:	6053      	str	r3, [r2, #4]
 8007664:	e02e      	b.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
 8007666:	4b61      	ldr	r3, [pc, #388]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	069b      	lsls	r3, r3, #26
 8007674:	495d      	ldr	r1, [pc, #372]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007676:	4313      	orrs	r3, r2
 8007678:	604b      	str	r3, [r1, #4]
 800767a:	e023      	b.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
 800767c:	4b5b      	ldr	r3, [pc, #364]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	061b      	lsls	r3, r3, #24
 800768a:	4958      	ldr	r1, [pc, #352]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800768c:	4313      	orrs	r3, r2
 800768e:	60cb      	str	r3, [r1, #12]
 8007690:	e018      	b.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007692:	4b56      	ldr	r3, [pc, #344]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a55      	ldr	r2, [pc, #340]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800769c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769e:	f7fb f805 	bl	80026ac <HAL_GetTick>
 80076a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076a4:	e008      	b.n	80076b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80076a6:	f7fb f801 	bl	80026ac <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d901      	bls.n	80076b8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e212      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076b8:	4b4c      	ldr	r3, [pc, #304]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1f0      	bne.n	80076a6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d036      	beq.n	800773e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d019      	beq.n	800770c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076d8:	4b44      	ldr	r3, [pc, #272]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80076da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076dc:	4a43      	ldr	r2, [pc, #268]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80076de:	f043 0301 	orr.w	r3, r3, #1
 80076e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e4:	f7fa ffe2 	bl	80026ac <HAL_GetTick>
 80076e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ec:	f7fa ffde 	bl	80026ac <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e1ef      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076fe:	4b3b      	ldr	r3, [pc, #236]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0f0      	beq.n	80076ec <HAL_RCC_OscConfig+0x420>
 800770a:	e018      	b.n	800773e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800770c:	4b37      	ldr	r3, [pc, #220]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800770e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007710:	4a36      	ldr	r2, [pc, #216]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007718:	f7fa ffc8 	bl	80026ac <HAL_GetTick>
 800771c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007720:	f7fa ffc4 	bl	80026ac <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e1d5      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007732:	4b2e      	ldr	r3, [pc, #184]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1f0      	bne.n	8007720 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d036      	beq.n	80077b8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d019      	beq.n	8007786 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007752:	4b26      	ldr	r3, [pc, #152]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a25      	ldr	r2, [pc, #148]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800775c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800775e:	f7fa ffa5 	bl	80026ac <HAL_GetTick>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007766:	f7fa ffa1 	bl	80026ac <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e1b2      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007778:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0f0      	beq.n	8007766 <HAL_RCC_OscConfig+0x49a>
 8007784:	e018      	b.n	80077b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007786:	4b19      	ldr	r3, [pc, #100]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a18      	ldr	r2, [pc, #96]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 800778c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007790:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007792:	f7fa ff8b 	bl	80026ac <HAL_GetTick>
 8007796:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800779a:	f7fa ff87 	bl	80026ac <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e198      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <HAL_RCC_OscConfig+0x520>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f0      	bne.n	800779a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8085 	beq.w	80078d0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <HAL_RCC_OscConfig+0x524>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <HAL_RCC_OscConfig+0x524>)
 80077cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077d2:	f7fa ff6b 	bl	80026ac <HAL_GetTick>
 80077d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d8:	e00c      	b.n	80077f4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077da:	f7fa ff67 	bl	80026ac <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b64      	cmp	r3, #100	; 0x64
 80077e6:	d905      	bls.n	80077f4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e178      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
 80077ec:	58024400 	.word	0x58024400
 80077f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077f4:	4b96      	ldr	r3, [pc, #600]	; (8007a50 <HAL_RCC_OscConfig+0x784>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0ec      	beq.n	80077da <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d106      	bne.n	8007816 <HAL_RCC_OscConfig+0x54a>
 8007808:	4b92      	ldr	r3, [pc, #584]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	4a91      	ldr	r2, [pc, #580]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6713      	str	r3, [r2, #112]	; 0x70
 8007814:	e02d      	b.n	8007872 <HAL_RCC_OscConfig+0x5a6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0x56c>
 800781e:	4b8d      	ldr	r3, [pc, #564]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	4a8c      	ldr	r2, [pc, #560]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	6713      	str	r3, [r2, #112]	; 0x70
 800782a:	4b8a      	ldr	r3, [pc, #552]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	4a89      	ldr	r2, [pc, #548]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007830:	f023 0304 	bic.w	r3, r3, #4
 8007834:	6713      	str	r3, [r2, #112]	; 0x70
 8007836:	e01c      	b.n	8007872 <HAL_RCC_OscConfig+0x5a6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	2b05      	cmp	r3, #5
 800783e:	d10c      	bne.n	800785a <HAL_RCC_OscConfig+0x58e>
 8007840:	4b84      	ldr	r3, [pc, #528]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007844:	4a83      	ldr	r2, [pc, #524]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007846:	f043 0304 	orr.w	r3, r3, #4
 800784a:	6713      	str	r3, [r2, #112]	; 0x70
 800784c:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007850:	4a80      	ldr	r2, [pc, #512]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	6713      	str	r3, [r2, #112]	; 0x70
 8007858:	e00b      	b.n	8007872 <HAL_RCC_OscConfig+0x5a6>
 800785a:	4b7e      	ldr	r3, [pc, #504]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	4a7d      	ldr	r2, [pc, #500]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	6713      	str	r3, [r2, #112]	; 0x70
 8007866:	4b7b      	ldr	r3, [pc, #492]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	4a7a      	ldr	r2, [pc, #488]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800786c:	f023 0304 	bic.w	r3, r3, #4
 8007870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787a:	f7fa ff17 	bl	80026ac <HAL_GetTick>
 800787e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007880:	e00a      	b.n	8007898 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007882:	f7fa ff13 	bl	80026ac <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007890:	4293      	cmp	r3, r2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e122      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007898:	4b6e      	ldr	r3, [pc, #440]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ee      	beq.n	8007882 <HAL_RCC_OscConfig+0x5b6>
 80078a4:	e014      	b.n	80078d0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a6:	f7fa ff01 	bl	80026ac <HAL_GetTick>
 80078aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078ac:	e00a      	b.n	80078c4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078ae:	f7fa fefd 	bl	80026ac <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078bc:	4293      	cmp	r3, r2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e10c      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078c4:	4b63      	ldr	r3, [pc, #396]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80078c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1ee      	bne.n	80078ae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8101 	beq.w	8007adc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80078da:	4b5e      	ldr	r3, [pc, #376]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e2:	2b18      	cmp	r3, #24
 80078e4:	f000 80bc 	beq.w	8007a60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	f040 8095 	bne.w	8007a1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f2:	4b58      	ldr	r3, [pc, #352]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a57      	ldr	r2, [pc, #348]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80078f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fe:	f7fa fed5 	bl	80026ac <HAL_GetTick>
 8007902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007906:	f7fa fed1 	bl	80026ac <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e0e2      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007918:	4b4e      	ldr	r3, [pc, #312]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f0      	bne.n	8007906 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007924:	4b4b      	ldr	r3, [pc, #300]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007928:	4b4b      	ldr	r3, [pc, #300]	; (8007a58 <HAL_RCC_OscConfig+0x78c>)
 800792a:	4013      	ands	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007934:	0112      	lsls	r2, r2, #4
 8007936:	430a      	orrs	r2, r1
 8007938:	4946      	ldr	r1, [pc, #280]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800793a:	4313      	orrs	r3, r2
 800793c:	628b      	str	r3, [r1, #40]	; 0x28
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	3b01      	subs	r3, #1
 8007944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794c:	3b01      	subs	r3, #1
 800794e:	025b      	lsls	r3, r3, #9
 8007950:	b29b      	uxth	r3, r3
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	3b01      	subs	r3, #1
 800795a:	041b      	lsls	r3, r3, #16
 800795c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007966:	3b01      	subs	r3, #1
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800796e:	4939      	ldr	r1, [pc, #228]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007970:	4313      	orrs	r3, r2
 8007972:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007974:	4b37      	ldr	r3, [pc, #220]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	4a36      	ldr	r2, [pc, #216]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007980:	4b34      	ldr	r3, [pc, #208]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007984:	4b35      	ldr	r3, [pc, #212]	; (8007a5c <HAL_RCC_OscConfig+0x790>)
 8007986:	4013      	ands	r3, r2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800798c:	00d2      	lsls	r2, r2, #3
 800798e:	4931      	ldr	r1, [pc, #196]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007990:	4313      	orrs	r3, r2
 8007992:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007994:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	f023 020c 	bic.w	r2, r3, #12
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	492c      	ldr	r1, [pc, #176]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80079a6:	4b2b      	ldr	r3, [pc, #172]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	f023 0202 	bic.w	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b2:	4928      	ldr	r1, [pc, #160]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079b8:	4b26      	ldr	r3, [pc, #152]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	4a25      	ldr	r2, [pc, #148]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80079dc:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 80079ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fa fe5a 	bl	80026ac <HAL_GetTick>
 80079f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fa fe56 	bl	80026ac <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e067      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0x730>
 8007a1a:	e05f      	b.n	8007adc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0c      	ldr	r2, [pc, #48]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a28:	f7fa fe40 	bl	80026ac <HAL_GetTick>
 8007a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a30:	f7fa fe3c 	bl	80026ac <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e04d      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a42:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <HAL_RCC_OscConfig+0x788>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0x764>
 8007a4e:	e045      	b.n	8007adc <HAL_RCC_OscConfig+0x810>
 8007a50:	58024800 	.word	0x58024800
 8007a54:	58024400 	.word	0x58024400
 8007a58:	fffffc0c 	.word	0xfffffc0c
 8007a5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a60:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <HAL_RCC_OscConfig+0x81c>)
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a66:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <HAL_RCC_OscConfig+0x81c>)
 8007a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d031      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f003 0203 	and.w	r2, r3, #3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d12a      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	091b      	lsrs	r3, r3, #4
 8007a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d122      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d11a      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	0a5b      	lsrs	r3, r3, #9
 8007aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d111      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	0c1b      	lsrs	r3, r3, #16
 8007ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d108      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	0e1b      	lsrs	r3, r3, #24
 8007aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d001      	beq.n	8007adc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3730      	adds	r7, #48	; 0x30
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400

08007aec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e19c      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b00:	4b8a      	ldr	r3, [pc, #552]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d910      	bls.n	8007b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b0e:	4b87      	ldr	r3, [pc, #540]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f023 020f 	bic.w	r2, r3, #15
 8007b16:	4985      	ldr	r1, [pc, #532]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b1e:	4b83      	ldr	r3, [pc, #524]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d001      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e184      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d010      	beq.n	8007b5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	4b7b      	ldr	r3, [pc, #492]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d908      	bls.n	8007b5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b4c:	4b78      	ldr	r3, [pc, #480]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	4975      	ldr	r1, [pc, #468]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d010      	beq.n	8007b8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695a      	ldr	r2, [r3, #20]
 8007b6e:	4b70      	ldr	r3, [pc, #448]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d908      	bls.n	8007b8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b7a:	4b6d      	ldr	r3, [pc, #436]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	496a      	ldr	r1, [pc, #424]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d010      	beq.n	8007bba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	4b64      	ldr	r3, [pc, #400]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d908      	bls.n	8007bba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ba8:	4b61      	ldr	r3, [pc, #388]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	495e      	ldr	r1, [pc, #376]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d010      	beq.n	8007be8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69da      	ldr	r2, [r3, #28]
 8007bca:	4b59      	ldr	r3, [pc, #356]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d908      	bls.n	8007be8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bd6:	4b56      	ldr	r3, [pc, #344]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	4953      	ldr	r1, [pc, #332]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d010      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	4b4d      	ldr	r3, [pc, #308]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d908      	bls.n	8007c16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c04:	4b4a      	ldr	r3, [pc, #296]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	f023 020f 	bic.w	r2, r3, #15
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	4947      	ldr	r1, [pc, #284]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d055      	beq.n	8007cce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c22:	4b43      	ldr	r3, [pc, #268]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4940      	ldr	r1, [pc, #256]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c3c:	4b3c      	ldr	r3, [pc, #240]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d121      	bne.n	8007c8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0f6      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d107      	bne.n	8007c64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c54:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d115      	bne.n	8007c8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e0ea      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c6c:	4b30      	ldr	r3, [pc, #192]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0de      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c7c:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0d6      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c8c:	4b28      	ldr	r3, [pc, #160]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f023 0207 	bic.w	r2, r3, #7
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	4925      	ldr	r1, [pc, #148]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c9e:	f7fa fd05 	bl	80026ac <HAL_GetTick>
 8007ca2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca4:	e00a      	b.n	8007cbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca6:	f7fa fd01 	bl	80026ac <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e0be      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d1eb      	bne.n	8007ca6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d010      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d208      	bcs.n	8007cfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cea:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	f023 020f 	bic.w	r2, r3, #15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	490e      	ldr	r1, [pc, #56]	; (8007d30 <HAL_RCC_ClockConfig+0x244>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d214      	bcs.n	8007d34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0a:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f023 020f 	bic.w	r2, r3, #15
 8007d12:	4906      	ldr	r1, [pc, #24]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1a:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <HAL_RCC_ClockConfig+0x240>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d005      	beq.n	8007d34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e086      	b.n	8007e3a <HAL_RCC_ClockConfig+0x34e>
 8007d2c:	52002000 	.word	0x52002000
 8007d30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d010      	beq.n	8007d62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	4b3f      	ldr	r3, [pc, #252]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d208      	bcs.n	8007d62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d50:	4b3c      	ldr	r3, [pc, #240]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	4939      	ldr	r1, [pc, #228]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d010      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	4b34      	ldr	r3, [pc, #208]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d208      	bcs.n	8007d90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d7e:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	492e      	ldr	r1, [pc, #184]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d010      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699a      	ldr	r2, [r3, #24]
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d208      	bcs.n	8007dbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dac:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	4922      	ldr	r1, [pc, #136]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d010      	beq.n	8007dec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69da      	ldr	r2, [r3, #28]
 8007dce:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d208      	bcs.n	8007dec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007dda:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	4917      	ldr	r1, [pc, #92]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007dec:	f000 f834 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8007df0:	4602      	mov	r2, r0
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	4912      	ldr	r1, [pc, #72]	; (8007e48 <HAL_RCC_ClockConfig+0x35c>)
 8007dfe:	5ccb      	ldrb	r3, [r1, r3]
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
 8007e08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e0a:	4b0e      	ldr	r3, [pc, #56]	; (8007e44 <HAL_RCC_ClockConfig+0x358>)
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	4a0d      	ldr	r2, [pc, #52]	; (8007e48 <HAL_RCC_ClockConfig+0x35c>)
 8007e14:	5cd3      	ldrb	r3, [r2, r3]
 8007e16:	f003 031f 	and.w	r3, r3, #31
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <HAL_RCC_ClockConfig+0x360>)
 8007e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e24:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <HAL_RCC_ClockConfig+0x364>)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <HAL_RCC_ClockConfig+0x368>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fa fbf2 	bl	8002618 <HAL_InitTick>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
 8007e48:	08019514 	.word	0x08019514
 8007e4c:	24000004 	.word	0x24000004
 8007e50:	24000000 	.word	0x24000000
 8007e54:	24000010 	.word	0x24000010

08007e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b089      	sub	sp, #36	; 0x24
 8007e5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e5e:	4bb3      	ldr	r3, [pc, #716]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e66:	2b18      	cmp	r3, #24
 8007e68:	f200 8155 	bhi.w	8008116 <HAL_RCC_GetSysClockFreq+0x2be>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08008117 	.word	0x08008117
 8007e7c:	08008117 	.word	0x08008117
 8007e80:	08008117 	.word	0x08008117
 8007e84:	08008117 	.word	0x08008117
 8007e88:	08008117 	.word	0x08008117
 8007e8c:	08008117 	.word	0x08008117
 8007e90:	08008117 	.word	0x08008117
 8007e94:	08007eff 	.word	0x08007eff
 8007e98:	08008117 	.word	0x08008117
 8007e9c:	08008117 	.word	0x08008117
 8007ea0:	08008117 	.word	0x08008117
 8007ea4:	08008117 	.word	0x08008117
 8007ea8:	08008117 	.word	0x08008117
 8007eac:	08008117 	.word	0x08008117
 8007eb0:	08008117 	.word	0x08008117
 8007eb4:	08007f05 	.word	0x08007f05
 8007eb8:	08008117 	.word	0x08008117
 8007ebc:	08008117 	.word	0x08008117
 8007ec0:	08008117 	.word	0x08008117
 8007ec4:	08008117 	.word	0x08008117
 8007ec8:	08008117 	.word	0x08008117
 8007ecc:	08008117 	.word	0x08008117
 8007ed0:	08008117 	.word	0x08008117
 8007ed4:	08007f0b 	.word	0x08007f0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed8:	4b94      	ldr	r3, [pc, #592]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ee4:	4b91      	ldr	r3, [pc, #580]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	4a90      	ldr	r2, [pc, #576]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007ef6:	e111      	b.n	800811c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ef8:	4b8d      	ldr	r3, [pc, #564]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007efa:	61bb      	str	r3, [r7, #24]
    break;
 8007efc:	e10e      	b.n	800811c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007efe:	4b8d      	ldr	r3, [pc, #564]	; (8008134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f00:	61bb      	str	r3, [r7, #24]
    break;
 8007f02:	e10b      	b.n	800811c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007f04:	4b8c      	ldr	r3, [pc, #560]	; (8008138 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f06:	61bb      	str	r3, [r7, #24]
    break;
 8007f08:	e108      	b.n	800811c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f0a:	4b88      	ldr	r3, [pc, #544]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007f14:	4b85      	ldr	r3, [pc, #532]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f20:	4b82      	ldr	r3, [pc, #520]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f2a:	4b80      	ldr	r3, [pc, #512]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2e:	08db      	lsrs	r3, r3, #3
 8007f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80e1 	beq.w	8008110 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f000 8083 	beq.w	800805c <HAL_RCC_GetSysClockFreq+0x204>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	f200 80a1 	bhi.w	80080a0 <HAL_RCC_GetSysClockFreq+0x248>
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0x114>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d056      	beq.n	8008018 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f6a:	e099      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f6c:	4b6f      	ldr	r3, [pc, #444]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0320 	and.w	r3, r3, #32
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d02d      	beq.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f78:	4b6c      	ldr	r3, [pc, #432]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	08db      	lsrs	r3, r3, #3
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	4a6b      	ldr	r2, [pc, #428]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
 8007f88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b62      	ldr	r3, [pc, #392]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800813c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007fd2:	e087      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe6:	4b51      	ldr	r3, [pc, #324]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ffa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800813c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008016:	e065      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008144 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802a:	4b40      	ldr	r3, [pc, #256]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803a:	ed97 6a02 	vldr	s12, [r7, #8]
 800803e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800813c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800804e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800805a:	e043      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008066:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008148 <HAL_RCC_GetSysClockFreq+0x2f0>
 800806a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806e:	4b2f      	ldr	r3, [pc, #188]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008082:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800813c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800809e:	e021      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008144 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b2:	4b1e      	ldr	r3, [pc, #120]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80080c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800813c <HAL_RCC_GetSysClockFreq+0x2e4>
 80080ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80080e4:	4b11      	ldr	r3, [pc, #68]	; (800812c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	0a5b      	lsrs	r3, r3, #9
 80080ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ee:	3301      	adds	r3, #1
 80080f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008108:	ee17 3a90 	vmov	r3, s15
 800810c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800810e:	e005      	b.n	800811c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
    break;
 8008114:	e002      	b.n	800811c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008118:	61bb      	str	r3, [r7, #24]
    break;
 800811a:	bf00      	nop
  }

  return sysclockfreq;
 800811c:	69bb      	ldr	r3, [r7, #24]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3724      	adds	r7, #36	; 0x24
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
 8008130:	03d09000 	.word	0x03d09000
 8008134:	003d0900 	.word	0x003d0900
 8008138:	007a1200 	.word	0x007a1200
 800813c:	46000000 	.word	0x46000000
 8008140:	4c742400 	.word	0x4c742400
 8008144:	4a742400 	.word	0x4a742400
 8008148:	4af42400 	.word	0x4af42400

0800814c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008152:	f7ff fe81 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8008156:	4602      	mov	r2, r0
 8008158:	4b10      	ldr	r3, [pc, #64]	; (800819c <HAL_RCC_GetHCLKFreq+0x50>)
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	0a1b      	lsrs	r3, r3, #8
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	490f      	ldr	r1, [pc, #60]	; (80081a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008164:	5ccb      	ldrb	r3, [r1, r3]
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	fa22 f303 	lsr.w	r3, r2, r3
 800816e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <HAL_RCC_GetHCLKFreq+0x50>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800817a:	5cd3      	ldrb	r3, [r2, r3]
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	fa22 f303 	lsr.w	r3, r2, r3
 8008186:	4a07      	ldr	r2, [pc, #28]	; (80081a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008188:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800818a:	4a07      	ldr	r2, [pc, #28]	; (80081a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008192:	681b      	ldr	r3, [r3, #0]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	58024400 	.word	0x58024400
 80081a0:	08019514 	.word	0x08019514
 80081a4:	24000004 	.word	0x24000004
 80081a8:	24000000 	.word	0x24000000

080081ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80081b0:	f7ff ffcc 	bl	800814c <HAL_RCC_GetHCLKFreq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	091b      	lsrs	r3, r3, #4
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	4904      	ldr	r1, [pc, #16]	; (80081d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081c2:	5ccb      	ldrb	r3, [r1, r3]
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	58024400 	.word	0x58024400
 80081d4:	08019514 	.word	0x08019514

080081d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80081dc:	f7ff ffb6 	bl	800814c <HAL_RCC_GetHCLKFreq>
 80081e0:	4602      	mov	r2, r0
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	4904      	ldr	r1, [pc, #16]	; (8008200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081ee:	5ccb      	ldrb	r3, [r1, r3]
 80081f0:	f003 031f 	and.w	r3, r3, #31
 80081f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	58024400 	.word	0x58024400
 8008200:	08019514 	.word	0x08019514

08008204 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008210:	2300      	movs	r3, #0
 8008212:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d03f      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008224:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008228:	d02a      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800822a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800822e:	d824      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008234:	d018      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800823a:	d81e      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008244:	d007      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008246:	e018      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008248:	4bab      	ldr	r3, [pc, #684]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4aaa      	ldr	r2, [pc, #680]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800824e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008254:	e015      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3304      	adds	r3, #4
 800825a:	2102      	movs	r1, #2
 800825c:	4618      	mov	r0, r3
 800825e:	f001 f9cf 	bl	8009600 <RCCEx_PLL2_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008266:	e00c      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3324      	adds	r3, #36	; 0x24
 800826c:	2102      	movs	r1, #2
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fa78 	bl	8009764 <RCCEx_PLL3_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008278:	e003      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	75fb      	strb	r3, [r7, #23]
      break;
 800827e:	e000      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d109      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008288:	4b9b      	ldr	r3, [pc, #620]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800828a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008294:	4998      	ldr	r1, [pc, #608]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008296:	4313      	orrs	r3, r2
 8008298:	650b      	str	r3, [r1, #80]	; 0x50
 800829a:	e001      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d03d      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d826      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082df 	.word	0x080082df
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	08008309 	.word	0x08008309
 80082cc:	08008309 	.word	0x08008309
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d0:	4b89      	ldr	r3, [pc, #548]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	4a88      	ldr	r2, [pc, #544]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082dc:	e015      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3304      	adds	r3, #4
 80082e2:	2100      	movs	r1, #0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 f98b 	bl	8009600 <RCCEx_PLL2_Config>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082ee:	e00c      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3324      	adds	r3, #36	; 0x24
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fa34 	bl	8009764 <RCCEx_PLL3_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008300:	e003      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
      break;
 8008306:	e000      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d109      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008310:	4b79      	ldr	r3, [pc, #484]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008314:	f023 0207 	bic.w	r2, r3, #7
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	4976      	ldr	r1, [pc, #472]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800831e:	4313      	orrs	r3, r2
 8008320:	650b      	str	r3, [r1, #80]	; 0x50
 8008322:	e001      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008330:	2b00      	cmp	r3, #0
 8008332:	d042      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833c:	d02b      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800833e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008342:	d825      	bhi.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008344:	2bc0      	cmp	r3, #192	; 0xc0
 8008346:	d028      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008348:	2bc0      	cmp	r3, #192	; 0xc0
 800834a:	d821      	bhi.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800834c:	2b80      	cmp	r3, #128	; 0x80
 800834e:	d016      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d81d      	bhi.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d007      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800835c:	e018      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800835e:	4b66      	ldr	r3, [pc, #408]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	4a65      	ldr	r2, [pc, #404]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800836a:	e017      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	2100      	movs	r1, #0
 8008372:	4618      	mov	r0, r3
 8008374:	f001 f944 	bl	8009600 <RCCEx_PLL2_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800837c:	e00e      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3324      	adds	r3, #36	; 0x24
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f001 f9ed 	bl	8009764 <RCCEx_PLL3_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800838e:	e005      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
      break;
 8008394:	e002      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008396:	bf00      	nop
 8008398:	e000      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800839a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80083a2:	4b55      	ldr	r3, [pc, #340]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	4952      	ldr	r1, [pc, #328]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	650b      	str	r3, [r1, #80]	; 0x50
 80083b4:	e001      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d049      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d0:	d030      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80083d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d6:	d82a      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083dc:	d02c      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80083de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083e2:	d824      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e8:	d018      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80083ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ee:	d81e      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80083f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f8:	d007      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80083fa:	e018      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083fc:	4b3e      	ldr	r3, [pc, #248]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	4a3d      	ldr	r2, [pc, #244]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008408:	e017      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3304      	adds	r3, #4
 800840e:	2100      	movs	r1, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f001 f8f5 	bl	8009600 <RCCEx_PLL2_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800841a:	e00e      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3324      	adds	r3, #36	; 0x24
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f001 f99e 	bl	8009764 <RCCEx_PLL3_Config>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800842c:	e005      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]
      break;
 8008432:	e002      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008434:	bf00      	nop
 8008436:	e000      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008440:	4b2d      	ldr	r3, [pc, #180]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008444:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800844e:	492a      	ldr	r1, [pc, #168]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008450:	4313      	orrs	r3, r2
 8008452:	658b      	str	r3, [r1, #88]	; 0x58
 8008454:	e001      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008462:	2b00      	cmp	r3, #0
 8008464:	d04c      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800846c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008470:	d030      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008476:	d82a      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800847c:	d02c      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800847e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008482:	d824      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008488:	d018      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800848a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800848e:	d81e      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008498:	d007      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800849a:	e018      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084a8:	e017      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 f8a5 	bl	8009600 <RCCEx_PLL2_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084ba:	e00e      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 f94e 	bl	8009764 <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084cc:	e005      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
      break;
 80084d2:	e002      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80084d4:	bf00      	nop
 80084d6:	e000      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80084d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10d      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80084ee:	4902      	ldr	r1, [pc, #8]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	658b      	str	r3, [r1, #88]	; 0x58
 80084f4:	e004      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80084f6:	bf00      	nop
 80084f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d032      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008510:	2b30      	cmp	r3, #48	; 0x30
 8008512:	d01c      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008514:	2b30      	cmp	r3, #48	; 0x30
 8008516:	d817      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008518:	2b20      	cmp	r3, #32
 800851a:	d00c      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800851c:	2b20      	cmp	r3, #32
 800851e:	d813      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d016      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008524:	2b10      	cmp	r3, #16
 8008526:	d10f      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008528:	4baf      	ldr	r3, [pc, #700]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4aae      	ldr	r2, [pc, #696]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800852e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008534:	e00e      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	2102      	movs	r1, #2
 800853c:	4618      	mov	r0, r3
 800853e:	f001 f85f 	bl	8009600 <RCCEx_PLL2_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008546:	e005      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
      break;
 800854c:	e002      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800854e:	bf00      	nop
 8008550:	e000      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800855a:	4ba3      	ldr	r3, [pc, #652]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008566:	49a0      	ldr	r1, [pc, #640]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008568:	4313      	orrs	r3, r2
 800856a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800856c:	e001      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d047      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008586:	d030      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800858c:	d82a      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800858e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008592:	d02c      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008598:	d824      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800859a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800859e:	d018      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80085a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a4:	d81e      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80085aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ae:	d007      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80085b0:	e018      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b2:	4b8d      	ldr	r3, [pc, #564]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	4a8c      	ldr	r2, [pc, #560]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085be:	e017      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 f81a 	bl	8009600 <RCCEx_PLL2_Config>
 80085cc:	4603      	mov	r3, r0
 80085ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085d0:	e00e      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3324      	adds	r3, #36	; 0x24
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 f8c3 	bl	8009764 <RCCEx_PLL3_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085e2:	e005      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]
      break;
 80085e8:	e002      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80085ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085f6:	4b7c      	ldr	r3, [pc, #496]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008602:	4979      	ldr	r1, [pc, #484]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008604:	4313      	orrs	r3, r2
 8008606:	650b      	str	r3, [r1, #80]	; 0x50
 8008608:	e001      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d049      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008622:	d02e      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008628:	d828      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800862a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800862e:	d02a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008634:	d822      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008636:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800863a:	d026      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800863c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008640:	d81c      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008646:	d010      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800864c:	d816      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01d      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008656:	d111      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	2101      	movs	r1, #1
 800865e:	4618      	mov	r0, r3
 8008660:	f000 ffce 	bl	8009600 <RCCEx_PLL2_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008668:	e012      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3324      	adds	r3, #36	; 0x24
 800866e:	2101      	movs	r1, #1
 8008670:	4618      	mov	r0, r3
 8008672:	f001 f877 	bl	8009764 <RCCEx_PLL3_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800867a:	e009      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
      break;
 8008680:	e006      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008682:	bf00      	nop
 8008684:	e004      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008686:	bf00      	nop
 8008688:	e002      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800868e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008696:	4b54      	ldr	r3, [pc, #336]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a2:	4951      	ldr	r1, [pc, #324]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	650b      	str	r3, [r1, #80]	; 0x50
 80086a8:	e001      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d04b      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086c4:	d02e      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80086c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ca:	d828      	bhi.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d0:	d02a      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80086d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d6:	d822      	bhi.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086dc:	d026      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80086de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086e2:	d81c      	bhi.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e8:	d010      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80086ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ee:	d816      	bhi.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01d      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80086f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086f8:	d111      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3304      	adds	r3, #4
 80086fe:	2101      	movs	r1, #1
 8008700:	4618      	mov	r0, r3
 8008702:	f000 ff7d 	bl	8009600 <RCCEx_PLL2_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800870a:	e012      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3324      	adds	r3, #36	; 0x24
 8008710:	2101      	movs	r1, #1
 8008712:	4618      	mov	r0, r3
 8008714:	f001 f826 	bl	8009764 <RCCEx_PLL3_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800871c:	e009      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	75fb      	strb	r3, [r7, #23]
      break;
 8008722:	e006      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008724:	bf00      	nop
 8008726:	e004      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008728:	bf00      	nop
 800872a:	e002      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800872c:	bf00      	nop
 800872e:	e000      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008738:	4b2b      	ldr	r3, [pc, #172]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800873a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008746:	4928      	ldr	r1, [pc, #160]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008748:	4313      	orrs	r3, r2
 800874a:	658b      	str	r3, [r1, #88]	; 0x58
 800874c:	e001      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d02f      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008766:	d00e      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800876c:	d814      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d015      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008776:	d10f      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	4a1a      	ldr	r2, [pc, #104]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800877e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008784:	e00c      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3304      	adds	r3, #4
 800878a:	2101      	movs	r1, #1
 800878c:	4618      	mov	r0, r3
 800878e:	f000 ff37 	bl	8009600 <RCCEx_PLL2_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008796:	e003      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
      break;
 800879c:	e000      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800879e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80087a6:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b2:	490d      	ldr	r1, [pc, #52]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	650b      	str	r3, [r1, #80]	; 0x50
 80087b8:	e001      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d033      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d81c      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	08008813 	.word	0x08008813
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	080087fb 	.word	0x080087fb
 80087e4:	08008813 	.word	0x08008813
 80087e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ec:	4bb8      	ldr	r3, [pc, #736]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f0:	4ab7      	ldr	r2, [pc, #732]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087f8:	e00c      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3304      	adds	r3, #4
 80087fe:	2102      	movs	r1, #2
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fefd 	bl	8009600 <RCCEx_PLL2_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800880a:	e003      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	75fb      	strb	r3, [r7, #23]
      break;
 8008810:	e000      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800881a:	4bad      	ldr	r3, [pc, #692]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800881c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881e:	f023 0203 	bic.w	r2, r3, #3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008826:	49aa      	ldr	r1, [pc, #680]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008828:	4313      	orrs	r3, r2
 800882a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800882c:	e001      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 8086 	beq.w	800894c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008840:	4ba4      	ldr	r3, [pc, #656]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4aa3      	ldr	r2, [pc, #652]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800884a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800884c:	f7f9 ff2e 	bl	80026ac <HAL_GetTick>
 8008850:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008852:	e009      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008854:	f7f9 ff2a 	bl	80026ac <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b64      	cmp	r3, #100	; 0x64
 8008860:	d902      	bls.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	75fb      	strb	r3, [r7, #23]
        break;
 8008866:	e005      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008868:	4b9a      	ldr	r3, [pc, #616]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0ef      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d166      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800887a:	4b95      	ldr	r3, [pc, #596]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800887c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008884:	4053      	eors	r3, r2
 8008886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888a:	2b00      	cmp	r3, #0
 800888c:	d013      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800888e:	4b90      	ldr	r3, [pc, #576]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008896:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008898:	4b8d      	ldr	r3, [pc, #564]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800889a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889c:	4a8c      	ldr	r2, [pc, #560]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800889e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088a4:	4b8a      	ldr	r3, [pc, #552]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a8:	4a89      	ldr	r2, [pc, #548]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80088b0:	4a87      	ldr	r2, [pc, #540]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c0:	d115      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c2:	f7f9 fef3 	bl	80026ac <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088c8:	e00b      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ca:	f7f9 feef 	bl	80026ac <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d8:	4293      	cmp	r3, r2
 80088da:	d902      	bls.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	75fb      	strb	r3, [r7, #23]
            break;
 80088e0:	e005      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088e2:	4b7b      	ldr	r3, [pc, #492]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0ed      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d126      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008902:	d10d      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008904:	4b72      	ldr	r3, [pc, #456]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008912:	0919      	lsrs	r1, r3, #4
 8008914:	4b70      	ldr	r3, [pc, #448]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008916:	400b      	ands	r3, r1
 8008918:	496d      	ldr	r1, [pc, #436]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800891a:	4313      	orrs	r3, r2
 800891c:	610b      	str	r3, [r1, #16]
 800891e:	e005      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008920:	4b6b      	ldr	r3, [pc, #428]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	4a6a      	ldr	r2, [pc, #424]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008926:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800892a:	6113      	str	r3, [r2, #16]
 800892c:	4b68      	ldr	r3, [pc, #416]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800892e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800893a:	4965      	ldr	r1, [pc, #404]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800893c:	4313      	orrs	r3, r2
 800893e:	670b      	str	r3, [r1, #112]	; 0x70
 8008940:	e004      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	75bb      	strb	r3, [r7, #22]
 8008946:	e001      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d07e      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895c:	2b28      	cmp	r3, #40	; 0x28
 800895e:	d867      	bhi.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	08008a37 	.word	0x08008a37
 800896c:	08008a31 	.word	0x08008a31
 8008970:	08008a31 	.word	0x08008a31
 8008974:	08008a31 	.word	0x08008a31
 8008978:	08008a31 	.word	0x08008a31
 800897c:	08008a31 	.word	0x08008a31
 8008980:	08008a31 	.word	0x08008a31
 8008984:	08008a31 	.word	0x08008a31
 8008988:	08008a0d 	.word	0x08008a0d
 800898c:	08008a31 	.word	0x08008a31
 8008990:	08008a31 	.word	0x08008a31
 8008994:	08008a31 	.word	0x08008a31
 8008998:	08008a31 	.word	0x08008a31
 800899c:	08008a31 	.word	0x08008a31
 80089a0:	08008a31 	.word	0x08008a31
 80089a4:	08008a31 	.word	0x08008a31
 80089a8:	08008a1f 	.word	0x08008a1f
 80089ac:	08008a31 	.word	0x08008a31
 80089b0:	08008a31 	.word	0x08008a31
 80089b4:	08008a31 	.word	0x08008a31
 80089b8:	08008a31 	.word	0x08008a31
 80089bc:	08008a31 	.word	0x08008a31
 80089c0:	08008a31 	.word	0x08008a31
 80089c4:	08008a31 	.word	0x08008a31
 80089c8:	08008a37 	.word	0x08008a37
 80089cc:	08008a31 	.word	0x08008a31
 80089d0:	08008a31 	.word	0x08008a31
 80089d4:	08008a31 	.word	0x08008a31
 80089d8:	08008a31 	.word	0x08008a31
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	08008a31 	.word	0x08008a31
 80089e4:	08008a31 	.word	0x08008a31
 80089e8:	08008a37 	.word	0x08008a37
 80089ec:	08008a31 	.word	0x08008a31
 80089f0:	08008a31 	.word	0x08008a31
 80089f4:	08008a31 	.word	0x08008a31
 80089f8:	08008a31 	.word	0x08008a31
 80089fc:	08008a31 	.word	0x08008a31
 8008a00:	08008a31 	.word	0x08008a31
 8008a04:	08008a31 	.word	0x08008a31
 8008a08:	08008a37 	.word	0x08008a37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	2101      	movs	r1, #1
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fdf4 	bl	8009600 <RCCEx_PLL2_Config>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a1c:	e00c      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3324      	adds	r3, #36	; 0x24
 8008a22:	2101      	movs	r1, #1
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fe9d 	bl	8009764 <RCCEx_PLL3_Config>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a2e:	e003      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	75fb      	strb	r3, [r7, #23]
      break;
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a3e:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a4a:	4921      	ldr	r1, [pc, #132]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a50:	e001      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d03e      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	d820      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008a6a:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008ab3 	.word	0x08008ab3
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a9b 	.word	0x08008a9b
 8008a7c:	08008ab3 	.word	0x08008ab3
 8008a80:	08008ab3 	.word	0x08008ab3
 8008a84:	08008ab3 	.word	0x08008ab3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fdb6 	bl	8009600 <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a98:	e00c      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3324      	adds	r3, #36	; 0x24
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fe5f 	bl	8009764 <RCCEx_PLL3_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008aaa:	e003      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab0:	e000      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d110      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abe:	f023 0207 	bic.w	r2, r3, #7
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac6:	4902      	ldr	r1, [pc, #8]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	654b      	str	r3, [r1, #84]	; 0x54
 8008acc:	e008      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008ace:	bf00      	nop
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	58024800 	.word	0x58024800
 8008ad8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d039      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d820      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b3f 	.word	0x08008b3f
 8008b00:	08008b15 	.word	0x08008b15
 8008b04:	08008b27 	.word	0x08008b27
 8008b08:	08008b3f 	.word	0x08008b3f
 8008b0c:	08008b3f 	.word	0x08008b3f
 8008b10:	08008b3f 	.word	0x08008b3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	2101      	movs	r1, #1
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fd70 	bl	8009600 <RCCEx_PLL2_Config>
 8008b20:	4603      	mov	r3, r0
 8008b22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b24:	e00c      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3324      	adds	r3, #36	; 0x24
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 fe19 	bl	8009764 <RCCEx_PLL3_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b36:	e003      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3c:	e000      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b46:	4bb7      	ldr	r3, [pc, #732]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4a:	f023 0207 	bic.w	r2, r3, #7
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b54:	49b3      	ldr	r1, [pc, #716]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	658b      	str	r3, [r1, #88]	; 0x58
 8008b5a:	e001      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d04b      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b76:	d02e      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b7c:	d828      	bhi.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b82:	d02a      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d822      	bhi.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b8e:	d026      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008b90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b94:	d81c      	bhi.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b9a:	d010      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba0:	d816      	bhi.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01d      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008baa:	d111      	bne.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fd24 	bl	8009600 <RCCEx_PLL2_Config>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008bbc:	e012      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3324      	adds	r3, #36	; 0x24
 8008bc2:	2102      	movs	r1, #2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fdcd 	bl	8009764 <RCCEx_PLL3_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008bce:	e009      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd4:	e006      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e004      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bda:	bf00      	nop
 8008bdc:	e002      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bde:	bf00      	nop
 8008be0:	e000      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bea:	4b8e      	ldr	r3, [pc, #568]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf8:	498a      	ldr	r1, [pc, #552]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	654b      	str	r3, [r1, #84]	; 0x54
 8008bfe:	e001      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d04b      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c1a:	d02e      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008c1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c20:	d828      	bhi.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c26:	d02a      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2c:	d822      	bhi.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c32:	d026      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c38:	d81c      	bhi.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3e:	d010      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c44:	d816      	bhi.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01d      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4e:	d111      	bne.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3304      	adds	r3, #4
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fcd2 	bl	8009600 <RCCEx_PLL2_Config>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c60:	e012      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3324      	adds	r3, #36	; 0x24
 8008c66:	2102      	movs	r1, #2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fd7b 	bl	8009764 <RCCEx_PLL3_Config>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c72:	e009      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	75fb      	strb	r3, [r7, #23]
      break;
 8008c78:	e006      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c7a:	bf00      	nop
 8008c7c:	e004      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c7e:	bf00      	nop
 8008c80:	e002      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c82:	bf00      	nop
 8008c84:	e000      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c8e:	4b65      	ldr	r3, [pc, #404]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c9c:	4961      	ldr	r1, [pc, #388]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ca2:	e001      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d04b      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008cba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008cbe:	d02e      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008cc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008cc4:	d828      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cca:	d02a      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd0:	d822      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cd6:	d026      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008cd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cdc:	d81c      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce2:	d010      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce8:	d816      	bhi.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01d      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf2:	d111      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fc80 	bl	8009600 <RCCEx_PLL2_Config>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008d04:	e012      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3324      	adds	r3, #36	; 0x24
 8008d0a:	2102      	movs	r1, #2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fd29 	bl	8009764 <RCCEx_PLL3_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008d16:	e009      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1c:	e006      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d1e:	bf00      	nop
 8008d20:	e004      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d22:	bf00      	nop
 8008d24:	e002      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d26:	bf00      	nop
 8008d28:	e000      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d32:	4b3c      	ldr	r3, [pc, #240]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d40:	4938      	ldr	r1, [pc, #224]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	658b      	str	r3, [r1, #88]	; 0x58
 8008d46:	e001      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01a      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d62:	d10a      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3324      	adds	r3, #36	; 0x24
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fcfa 	bl	8009764 <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d7a:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d88:	4926      	ldr	r1, [pc, #152]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0310 	and.w	r3, r3, #16
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01a      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da4:	d10a      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3324      	adds	r3, #36	; 0x24
 8008daa:	2102      	movs	r1, #2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fcd9 	bl	8009764 <RCCEx_PLL3_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dbc:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dca:	4916      	ldr	r1, [pc, #88]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d036      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de6:	d01f      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dec:	d817      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df6:	d009      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008df8:	e011      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fbfd 	bl	8009600 <RCCEx_PLL2_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008e0a:	e00e      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3324      	adds	r3, #36	; 0x24
 8008e10:	2102      	movs	r1, #2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fca6 	bl	8009764 <RCCEx_PLL3_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008e1c:	e005      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
      break;
 8008e22:	e002      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008e24:	58024400 	.word	0x58024400
      break;
 8008e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e30:	4b93      	ldr	r3, [pc, #588]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e3e:	4990      	ldr	r1, [pc, #576]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	658b      	str	r3, [r1, #88]	; 0x58
 8008e44:	e001      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d033      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e60:	d01c      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e66:	d816      	bhi.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e6c:	d003      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e72:	d007      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008e74:	e00f      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e76:	4b82      	ldr	r3, [pc, #520]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4a81      	ldr	r2, [pc, #516]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e82:	e00c      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3324      	adds	r3, #36	; 0x24
 8008e88:	2101      	movs	r1, #1
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fc6a 	bl	8009764 <RCCEx_PLL3_Config>
 8008e90:	4603      	mov	r3, r0
 8008e92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e94:	e003      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	75fb      	strb	r3, [r7, #23]
      break;
 8008e9a:	e000      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ea4:	4b76      	ldr	r3, [pc, #472]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb2:	4973      	ldr	r1, [pc, #460]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	654b      	str	r3, [r1, #84]	; 0x54
 8008eb8:	e001      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d029      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed6:	d007      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008ed8:	e00f      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eda:	4b69      	ldr	r3, [pc, #420]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	4a68      	ldr	r2, [pc, #416]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ee6:	e00b      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	2102      	movs	r1, #2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fb86 	bl	8009600 <RCCEx_PLL2_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
      break;
 8008efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f06:	4b5e      	ldr	r3, [pc, #376]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f12:	495b      	ldr	r1, [pc, #364]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f18:	e001      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3324      	adds	r3, #36	; 0x24
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fc17 	bl	8009764 <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d030      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f54:	d017      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f5a:	d811      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f60:	d013      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f66:	d80b      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d010      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f70:	d106      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f72:	4b43      	ldr	r3, [pc, #268]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a42      	ldr	r2, [pc, #264]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008f7e:	e007      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]
      break;
 8008f84:	e004      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f86:	bf00      	nop
 8008f88:	e002      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f8a:	bf00      	nop
 8008f8c:	e000      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f96:	4b3a      	ldr	r3, [pc, #232]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fa2:	4937      	ldr	r1, [pc, #220]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8008fa8:	e001      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fba:	4b31      	ldr	r3, [pc, #196]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	492e      	ldr	r1, [pc, #184]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d009      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008fd8:	4b29      	ldr	r3, [pc, #164]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fe6:	4926      	ldr	r1, [pc, #152]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ff8:	4b21      	ldr	r3, [pc, #132]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009004:	491e      	ldr	r1, [pc, #120]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009006:	4313      	orrs	r3, r2
 8009008:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009016:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	4a19      	ldr	r2, [pc, #100]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800901c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009020:	6113      	str	r3, [r2, #16]
 8009022:	4b17      	ldr	r3, [pc, #92]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800902c:	4914      	ldr	r1, [pc, #80]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800902e:	4313      	orrs	r3, r2
 8009030:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	da08      	bge.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800903a:	4b11      	ldr	r3, [pc, #68]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800903e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009046:	490e      	ldr	r1, [pc, #56]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009048:	4313      	orrs	r3, r2
 800904a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009058:	4b09      	ldr	r3, [pc, #36]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800905a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009066:	4906      	ldr	r1, [pc, #24]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800906c:	7dbb      	ldrb	r3, [r7, #22]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	e000      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	58024400 	.word	0x58024400

08009084 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009088:	f7ff f860 	bl	800814c <HAL_RCC_GetHCLKFreq>
 800908c:	4602      	mov	r2, r0
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	091b      	lsrs	r3, r3, #4
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	4904      	ldr	r1, [pc, #16]	; (80090ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800909a:	5ccb      	ldrb	r3, [r1, r3]
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	58024400 	.word	0x58024400
 80090ac:	08019514 	.word	0x08019514

080090b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b089      	sub	sp, #36	; 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090b8:	4ba1      	ldr	r3, [pc, #644]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80090c2:	4b9f      	ldr	r3, [pc, #636]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	0b1b      	lsrs	r3, r3, #12
 80090c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090ce:	4b9c      	ldr	r3, [pc, #624]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	091b      	lsrs	r3, r3, #4
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090da:	4b99      	ldr	r3, [pc, #612]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090de:	08db      	lsrs	r3, r3, #3
 80090e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	fb02 f303 	mul.w	r3, r2, r3
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 8111 	beq.w	8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b02      	cmp	r3, #2
 8009102:	f000 8083 	beq.w	800920c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	2b02      	cmp	r3, #2
 800910a:	f200 80a1 	bhi.w	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d056      	beq.n	80091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800911a:	e099      	b.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800911c:	4b88      	ldr	r3, [pc, #544]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0320 	and.w	r3, r3, #32
 8009124:	2b00      	cmp	r3, #0
 8009126:	d02d      	beq.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009128:	4b85      	ldr	r3, [pc, #532]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	08db      	lsrs	r3, r3, #3
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	4a84      	ldr	r2, [pc, #528]	; (8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
 8009138:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b7b      	ldr	r3, [pc, #492]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a03 	vldr	s12, [r7, #12]
 8009166:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009182:	e087      	b.n	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800934c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009196:	4b6a      	ldr	r3, [pc, #424]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091c6:	e065      	b.n	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091da:	4b59      	ldr	r3, [pc, #356]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800920a:	e043      	b.n	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800921a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921e:	4b48      	ldr	r3, [pc, #288]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009232:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800924e:	e021      	b.n	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800925e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009262:	4b37      	ldr	r3, [pc, #220]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009272:	ed97 6a03 	vldr	s12, [r7, #12]
 8009276:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800927a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009292:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009294:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	0a5b      	lsrs	r3, r3, #9
 800929a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ba:	ee17 2a90 	vmov	r2, s15
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80092c2:	4b1f      	ldr	r3, [pc, #124]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	0c1b      	lsrs	r3, r3, #16
 80092c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80092e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e8:	ee17 2a90 	vmov	r2, s15
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80092f0:	4b13      	ldr	r3, [pc, #76]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	0e1b      	lsrs	r3, r3, #24
 80092f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800930a:	edd7 6a07 	vldr	s13, [r7, #28]
 800930e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009316:	ee17 2a90 	vmov	r2, s15
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800931e:	e008      	b.n	8009332 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	609a      	str	r2, [r3, #8]
}
 8009332:	bf00      	nop
 8009334:	3724      	adds	r7, #36	; 0x24
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	58024400 	.word	0x58024400
 8009344:	03d09000 	.word	0x03d09000
 8009348:	46000000 	.word	0x46000000
 800934c:	4c742400 	.word	0x4c742400
 8009350:	4a742400 	.word	0x4a742400
 8009354:	4af42400 	.word	0x4af42400

08009358 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009358:	b480      	push	{r7}
 800935a:	b089      	sub	sp, #36	; 0x24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009360:	4ba1      	ldr	r3, [pc, #644]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800936a:	4b9f      	ldr	r3, [pc, #636]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	0d1b      	lsrs	r3, r3, #20
 8009370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009374:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009376:	4b9c      	ldr	r3, [pc, #624]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009382:	4b99      	ldr	r3, [pc, #612]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009386:	08db      	lsrs	r3, r3, #3
 8009388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	fb02 f303 	mul.w	r3, r2, r3
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 8111 	beq.w	80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	f000 8083 	beq.w	80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	f200 80a1 	bhi.w	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d056      	beq.n	8009470 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093c2:	e099      	b.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c4:	4b88      	ldr	r3, [pc, #544]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0320 	and.w	r3, r3, #32
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d02d      	beq.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093d0:	4b85      	ldr	r3, [pc, #532]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	08db      	lsrs	r3, r3, #3
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	4a84      	ldr	r2, [pc, #528]	; (80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
 80093e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b7b      	ldr	r3, [pc, #492]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a03 	vldr	s12, [r7, #12]
 800940e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800942a:	e087      	b.n	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b6a      	ldr	r3, [pc, #424]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009452:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800946e:	e065      	b.n	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b59      	ldr	r3, [pc, #356]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a03 	vldr	s12, [r7, #12]
 8009496:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094b2:	e043      	b.n	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b48      	ldr	r3, [pc, #288]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094f6:	e021      	b.n	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950a:	4b37      	ldr	r3, [pc, #220]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951a:	ed97 6a03 	vldr	s12, [r7, #12]
 800951e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800953a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800953c:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	0a5b      	lsrs	r3, r3, #9
 8009542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009556:	edd7 6a07 	vldr	s13, [r7, #28]
 800955a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009562:	ee17 2a90 	vmov	r2, s15
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800956a:	4b1f      	ldr	r3, [pc, #124]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800956c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956e:	0c1b      	lsrs	r3, r3, #16
 8009570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009574:	ee07 3a90 	vmov	s15, r3
 8009578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009584:	edd7 6a07 	vldr	s13, [r7, #28]
 8009588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800958c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009590:	ee17 2a90 	vmov	r2, s15
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009598:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	0e1b      	lsrs	r3, r3, #24
 800959e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095be:	ee17 2a90 	vmov	r2, s15
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095c6:	e008      	b.n	80095da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	609a      	str	r2, [r3, #8]
}
 80095da:	bf00      	nop
 80095dc:	3724      	adds	r7, #36	; 0x24
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	58024400 	.word	0x58024400
 80095ec:	03d09000 	.word	0x03d09000
 80095f0:	46000000 	.word	0x46000000
 80095f4:	4c742400 	.word	0x4c742400
 80095f8:	4a742400 	.word	0x4a742400
 80095fc:	4af42400 	.word	0x4af42400

08009600 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800960e:	4b53      	ldr	r3, [pc, #332]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	2b03      	cmp	r3, #3
 8009618:	d101      	bne.n	800961e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e099      	b.n	8009752 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800961e:	4b4f      	ldr	r3, [pc, #316]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a4e      	ldr	r2, [pc, #312]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009624:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800962a:	f7f9 f83f 	bl	80026ac <HAL_GetTick>
 800962e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009630:	e008      	b.n	8009644 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009632:	f7f9 f83b 	bl	80026ac <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b02      	cmp	r3, #2
 800963e:	d901      	bls.n	8009644 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e086      	b.n	8009752 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009644:	4b45      	ldr	r3, [pc, #276]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f0      	bne.n	8009632 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009650:	4b42      	ldr	r3, [pc, #264]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	031b      	lsls	r3, r3, #12
 800965e:	493f      	ldr	r1, [pc, #252]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009660:	4313      	orrs	r3, r2
 8009662:	628b      	str	r3, [r1, #40]	; 0x28
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	3b01      	subs	r3, #1
 800966a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	3b01      	subs	r3, #1
 8009674:	025b      	lsls	r3, r3, #9
 8009676:	b29b      	uxth	r3, r3
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	3b01      	subs	r3, #1
 8009680:	041b      	lsls	r3, r3, #16
 8009682:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	3b01      	subs	r3, #1
 800968e:	061b      	lsls	r3, r3, #24
 8009690:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009694:	4931      	ldr	r1, [pc, #196]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009696:	4313      	orrs	r3, r2
 8009698:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800969a:	4b30      	ldr	r3, [pc, #192]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	492d      	ldr	r1, [pc, #180]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80096ac:	4b2b      	ldr	r3, [pc, #172]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	f023 0220 	bic.w	r2, r3, #32
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	4928      	ldr	r1, [pc, #160]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096be:	4b27      	ldr	r3, [pc, #156]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a26      	ldr	r2, [pc, #152]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096c4:	f023 0310 	bic.w	r3, r3, #16
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096ca:	4b24      	ldr	r3, [pc, #144]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ce:	4b24      	ldr	r3, [pc, #144]	; (8009760 <RCCEx_PLL2_Config+0x160>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	69d2      	ldr	r2, [r2, #28]
 80096d6:	00d2      	lsls	r2, r2, #3
 80096d8:	4920      	ldr	r1, [pc, #128]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096de:	4b1f      	ldr	r3, [pc, #124]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e2:	4a1e      	ldr	r2, [pc, #120]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096e4:	f043 0310 	orr.w	r3, r3, #16
 80096e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d106      	bne.n	80096fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096f0:	4b1a      	ldr	r3, [pc, #104]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	4a19      	ldr	r2, [pc, #100]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 80096f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096fc:	e00f      	b.n	800971e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d106      	bne.n	8009712 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009704:	4b15      	ldr	r3, [pc, #84]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	4a14      	ldr	r2, [pc, #80]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 800970a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800970e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009710:	e005      	b.n	800971e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009712:	4b12      	ldr	r3, [pc, #72]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	4a11      	ldr	r2, [pc, #68]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800971c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800971e:	4b0f      	ldr	r3, [pc, #60]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a0e      	ldr	r2, [pc, #56]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800972a:	f7f8 ffbf 	bl	80026ac <HAL_GetTick>
 800972e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009730:	e008      	b.n	8009744 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009732:	f7f8 ffbb 	bl	80026ac <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d901      	bls.n	8009744 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e006      	b.n	8009752 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <RCCEx_PLL2_Config+0x15c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0f0      	beq.n	8009732 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	58024400 	.word	0x58024400
 8009760:	ffff0007 	.word	0xffff0007

08009764 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009772:	4b53      	ldr	r3, [pc, #332]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	f003 0303 	and.w	r3, r3, #3
 800977a:	2b03      	cmp	r3, #3
 800977c:	d101      	bne.n	8009782 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e099      	b.n	80098b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009782:	4b4f      	ldr	r3, [pc, #316]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a4e      	ldr	r2, [pc, #312]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800978c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800978e:	f7f8 ff8d 	bl	80026ac <HAL_GetTick>
 8009792:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009794:	e008      	b.n	80097a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009796:	f7f8 ff89 	bl	80026ac <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d901      	bls.n	80097a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e086      	b.n	80098b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80097a8:	4b45      	ldr	r3, [pc, #276]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1f0      	bne.n	8009796 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80097b4:	4b42      	ldr	r3, [pc, #264]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 80097b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	051b      	lsls	r3, r3, #20
 80097c2:	493f      	ldr	r1, [pc, #252]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	628b      	str	r3, [r1, #40]	; 0x28
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	025b      	lsls	r3, r3, #9
 80097da:	b29b      	uxth	r3, r3
 80097dc:	431a      	orrs	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	041b      	lsls	r3, r3, #16
 80097e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097ea:	431a      	orrs	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	061b      	lsls	r3, r3, #24
 80097f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097f8:	4931      	ldr	r1, [pc, #196]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097fe:	4b30      	ldr	r3, [pc, #192]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	492d      	ldr	r1, [pc, #180]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800980c:	4313      	orrs	r3, r2
 800980e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009810:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	4928      	ldr	r1, [pc, #160]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800981e:	4313      	orrs	r3, r2
 8009820:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009822:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a26      	ldr	r2, [pc, #152]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800982c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009832:	4b24      	ldr	r3, [pc, #144]	; (80098c4 <RCCEx_PLL3_Config+0x160>)
 8009834:	4013      	ands	r3, r2
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	69d2      	ldr	r2, [r2, #28]
 800983a:	00d2      	lsls	r2, r2, #3
 800983c:	4920      	ldr	r1, [pc, #128]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800983e:	4313      	orrs	r3, r2
 8009840:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009842:	4b1f      	ldr	r3, [pc, #124]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	4a1e      	ldr	r2, [pc, #120]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800984c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009854:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800985a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800985e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009860:	e00f      	b.n	8009882 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d106      	bne.n	8009876 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009868:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800986e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009874:	e005      	b.n	8009882 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009876:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 800987c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009880:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009882:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a0e      	ldr	r2, [pc, #56]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 8009888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800988c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988e:	f7f8 ff0d 	bl	80026ac <HAL_GetTick>
 8009892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009894:	e008      	b.n	80098a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009896:	f7f8 ff09 	bl	80026ac <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d901      	bls.n	80098a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e006      	b.n	80098b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <RCCEx_PLL3_Config+0x15c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0f0      	beq.n	8009896 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	58024400 	.word	0x58024400
 80098c4:	ffff0007 	.word	0xffff0007

080098c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e0eb      	b.n	8009ab6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a75      	ldr	r2, [pc, #468]	; (8009ac0 <HAL_SPI_Init+0x1f8>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00f      	beq.n	800990e <HAL_SPI_Init+0x46>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a74      	ldr	r2, [pc, #464]	; (8009ac4 <HAL_SPI_Init+0x1fc>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00a      	beq.n	800990e <HAL_SPI_Init+0x46>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a72      	ldr	r2, [pc, #456]	; (8009ac8 <HAL_SPI_Init+0x200>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d005      	beq.n	800990e <HAL_SPI_Init+0x46>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	2b0f      	cmp	r3, #15
 8009908:	d901      	bls.n	800990e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e0d3      	b.n	8009ab6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f8aa 	bl	800aa68 <SPI_GetPacketSize>
 8009914:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a69      	ldr	r2, [pc, #420]	; (8009ac0 <HAL_SPI_Init+0x1f8>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00c      	beq.n	800993a <HAL_SPI_Init+0x72>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a67      	ldr	r2, [pc, #412]	; (8009ac4 <HAL_SPI_Init+0x1fc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d007      	beq.n	800993a <HAL_SPI_Init+0x72>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a66      	ldr	r2, [pc, #408]	; (8009ac8 <HAL_SPI_Init+0x200>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d002      	beq.n	800993a <HAL_SPI_Init+0x72>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b08      	cmp	r3, #8
 8009938:	d811      	bhi.n	800995e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800993e:	4a60      	ldr	r2, [pc, #384]	; (8009ac0 <HAL_SPI_Init+0x1f8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d009      	beq.n	8009958 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a5e      	ldr	r2, [pc, #376]	; (8009ac4 <HAL_SPI_Init+0x1fc>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <HAL_SPI_Init+0x90>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a5d      	ldr	r2, [pc, #372]	; (8009ac8 <HAL_SPI_Init+0x200>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d104      	bne.n	8009962 <HAL_SPI_Init+0x9a>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b10      	cmp	r3, #16
 800995c:	d901      	bls.n	8009962 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e0a9      	b.n	8009ab6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7f8 f866 	bl	8001a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0201 	bic.w	r2, r2, #1
 8009992:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800999c:	d119      	bne.n	80099d2 <HAL_SPI_Init+0x10a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099a6:	d103      	bne.n	80099b0 <HAL_SPI_Init+0xe8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d008      	beq.n	80099c2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10c      	bne.n	80099d2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c0:	d107      	bne.n	80099d2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69da      	ldr	r2, [r3, #28]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099da:	431a      	orrs	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e4:	ea42 0103 	orr.w	r1, r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a32:	ea42 0103 	orr.w	r1, r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d113      	bne.n	8009a72 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	40013000 	.word	0x40013000
 8009ac4:	40003800 	.word	0x40003800
 8009ac8:	40003c00 	.word	0x40003c00

08009acc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3320      	adds	r3, #32
 8009ae2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d101      	bne.n	8009af6 <HAL_SPI_Transmit+0x2a>
 8009af2:	2302      	movs	r3, #2
 8009af4:	e1d7      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009afe:	f7f8 fdd5 	bl	80026ac <HAL_GetTick>
 8009b02:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d007      	beq.n	8009b20 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009b10:	2302      	movs	r3, #2
 8009b12:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009b1c:	7efb      	ldrb	r3, [r7, #27]
 8009b1e:	e1c2      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <HAL_SPI_Transmit+0x60>
 8009b26:	88fb      	ldrh	r3, [r7, #6]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d107      	bne.n	8009b3c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009b38:	7efb      	ldrb	r3, [r7, #27]
 8009b3a:	e1b4      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2203      	movs	r2, #3
 8009b40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	88fa      	ldrh	r2, [r7, #6]
 8009b56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	88fa      	ldrh	r2, [r7, #6]
 8009b5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009b8c:	d107      	bne.n	8009b9e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	4b96      	ldr	r3, [pc, #600]	; (8009e00 <HAL_SPI_Transmit+0x334>)
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	88f9      	ldrh	r1, [r7, #6]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	6812      	ldr	r2, [r2, #0]
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0201 	orr.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bca:	d107      	bne.n	8009bdc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	2b0f      	cmp	r3, #15
 8009be2:	d947      	bls.n	8009c74 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009be4:	e03f      	b.n	8009c66 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d114      	bne.n	8009c1e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c04:	1d1a      	adds	r2, r3, #4
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009c1c:	e023      	b.n	8009c66 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c1e:	f7f8 fd45 	bl	80026ac <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d803      	bhi.n	8009c36 <HAL_SPI_Transmit+0x16a>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c34:	d102      	bne.n	8009c3c <HAL_SPI_Transmit+0x170>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d114      	bne.n	8009c66 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 fe45 	bl	800a8cc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e11f      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1b9      	bne.n	8009be6 <HAL_SPI_Transmit+0x11a>
 8009c72:	e0f2      	b.n	8009e5a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	2b07      	cmp	r3, #7
 8009c7a:	f240 80e7 	bls.w	8009e4c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c7e:	e05d      	b.n	8009d3c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d132      	bne.n	8009cf4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d918      	bls.n	8009ccc <HAL_SPI_Transmit+0x200>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d014      	beq.n	8009ccc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb2:	1d1a      	adds	r2, r3, #4
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b02      	subs	r3, #2
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cca:	e037      	b.n	8009d3c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cda:	1c9a      	adds	r2, r3, #2
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cf2:	e023      	b.n	8009d3c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cf4:	f7f8 fcda 	bl	80026ac <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d803      	bhi.n	8009d0c <HAL_SPI_Transmit+0x240>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0a:	d102      	bne.n	8009d12 <HAL_SPI_Transmit+0x246>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d114      	bne.n	8009d3c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fdda 	bl	800a8cc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0b4      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d19b      	bne.n	8009c80 <HAL_SPI_Transmit+0x1b4>
 8009d48:	e087      	b.n	8009e5a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d155      	bne.n	8009e04 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d918      	bls.n	8009d96 <HAL_SPI_Transmit+0x2ca>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d68:	2b40      	cmp	r3, #64	; 0x40
 8009d6a:	d914      	bls.n	8009d96 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b04      	subs	r3, #4
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d94:	e05a      	b.n	8009e4c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d917      	bls.n	8009dd2 <HAL_SPI_Transmit+0x306>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d013      	beq.n	8009dd2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dae:	881a      	ldrh	r2, [r3, #0]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	3b02      	subs	r3, #2
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009dd0:	e03c      	b.n	8009e4c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3320      	adds	r3, #32
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009dfc:	e026      	b.n	8009e4c <HAL_SPI_Transmit+0x380>
 8009dfe:	bf00      	nop
 8009e00:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e04:	f7f8 fc52 	bl	80026ac <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d803      	bhi.n	8009e1c <HAL_SPI_Transmit+0x350>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1a:	d102      	bne.n	8009e22 <HAL_SPI_Transmit+0x356>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d114      	bne.n	8009e4c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fd52 	bl	800a8cc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e02c      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f47f af78 	bne.w	8009d4a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2200      	movs	r2, #0
 8009e62:	2108      	movs	r1, #8
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fdd1 	bl	800aa0c <SPI_WaitOnFlagUntilTimeout>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d007      	beq.n	8009e80 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e76:	f043 0220 	orr.w	r2, r3, #32
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 fd23 	bl	800a8cc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e000      	b.n	8009ea6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009ea4:	7efb      	ldrb	r3, [r7, #27]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3720      	adds	r7, #32
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop

08009eb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3320      	adds	r3, #32
 8009eca:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3330      	adds	r3, #48	; 0x30
 8009ed2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_SPI_TransmitReceive+0x32>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e2ce      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009eea:	f7f8 fbdf 	bl	80026ac <HAL_GetTick>
 8009eee:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009ef0:	887b      	ldrh	r3, [r7, #2]
 8009ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009ef4:	887b      	ldrh	r3, [r7, #2]
 8009ef6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009efe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f06:	7efb      	ldrb	r3, [r7, #27]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d014      	beq.n	8009f36 <HAL_SPI_TransmitReceive+0x86>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f12:	d106      	bne.n	8009f22 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d102      	bne.n	8009f22 <HAL_SPI_TransmitReceive+0x72>
 8009f1c:	7efb      	ldrb	r3, [r7, #27]
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d009      	beq.n	8009f36 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8009f22:	2302      	movs	r3, #2
 8009f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f34:	e2a4      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <HAL_SPI_TransmitReceive+0x98>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_SPI_TransmitReceive+0x98>
 8009f42:	887b      	ldrh	r3, [r7, #2]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d109      	bne.n	8009f5c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f5a:	e291      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d003      	beq.n	8009f70 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2205      	movs	r2, #5
 8009f6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	887a      	ldrh	r2, [r7, #2]
 8009f82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	887a      	ldrh	r2, [r7, #2]
 8009f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	887a      	ldrh	r2, [r7, #2]
 8009f98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	887a      	ldrh	r2, [r7, #2]
 8009fa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b9f      	ldr	r3, [pc, #636]	; (800a234 <HAL_SPI_TransmitReceive+0x384>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	8879      	ldrh	r1, [r7, #2]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fdc:	d107      	bne.n	8009fee <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	2b0f      	cmp	r3, #15
 8009ff4:	d970      	bls.n	800a0d8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009ff6:	e068      	b.n	800a0ca <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b02      	cmp	r3, #2
 800a004:	d11a      	bne.n	800a03c <HAL_SPI_TransmitReceive+0x18c>
 800a006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d017      	beq.n	800a03c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6812      	ldr	r2, [r2, #0]
 800a016:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a01c:	1d1a      	adds	r2, r3, #4
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a028:	b29b      	uxth	r3, r3
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a03a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	f248 0308 	movw	r3, #32776	; 0x8008
 800a046:	4013      	ands	r3, r2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d01a      	beq.n	800a082 <HAL_SPI_TransmitReceive+0x1d2>
 800a04c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d017      	beq.n	800a082 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a05a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a05c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a062:	1d1a      	adds	r2, r3, #4
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a06e:	b29b      	uxth	r3, r3
 800a070:	3b01      	subs	r3, #1
 800a072:	b29a      	uxth	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a080:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a082:	f7f8 fb13 	bl	80026ac <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08e:	429a      	cmp	r2, r3
 800a090:	d803      	bhi.n	800a09a <HAL_SPI_TransmitReceive+0x1ea>
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d102      	bne.n	800a0a0 <HAL_SPI_TransmitReceive+0x1f0>
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d114      	bne.n	800a0ca <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fc13 	bl	800a8cc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e1da      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a0ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d193      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x148>
 800a0d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d190      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x148>
 800a0d6:	e1ac      	b.n	800a432 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	2b07      	cmp	r3, #7
 800a0de:	f240 81a0 	bls.w	800a422 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a0e2:	e0a9      	b.n	800a238 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d139      	bne.n	800a166 <HAL_SPI_TransmitReceive+0x2b6>
 800a0f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d036      	beq.n	800a166 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a0f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d91c      	bls.n	800a138 <HAL_SPI_TransmitReceive+0x288>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d018      	beq.n	800a138 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6812      	ldr	r2, [r2, #0]
 800a110:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a116:	1d1a      	adds	r2, r3, #4
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b02      	subs	r3, #2
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a134:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a136:	e016      	b.n	800a166 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a13c:	881a      	ldrh	r2, [r3, #0]
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a146:	1c9a      	adds	r2, r3, #2
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a152:	b29b      	uxth	r3, r3
 800a154:	3b01      	subs	r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a164:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d03a      	beq.n	800a1ea <HAL_SPI_TransmitReceive+0x33a>
 800a174:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a176:	2b00      	cmp	r3, #0
 800a178:	d037      	beq.n	800a1ea <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d018      	beq.n	800a1ba <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a190:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a192:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a198:	1d1a      	adds	r2, r3, #4
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3b02      	subs	r3, #2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a1b8:	e017      	b.n	800a1ea <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1be:	6a3a      	ldr	r2, [r7, #32]
 800a1c0:	8812      	ldrh	r2, [r2, #0]
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ca:	1c9a      	adds	r2, r3, #2
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ea:	f7f8 fa5f 	bl	80026ac <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d803      	bhi.n	800a202 <HAL_SPI_TransmitReceive+0x352>
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d102      	bne.n	800a208 <HAL_SPI_TransmitReceive+0x358>
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d117      	bne.n	800a238 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 fb5f 	bl	800a8cc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a21c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e126      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
 800a232:	bf00      	nop
 800a234:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f47f af52 	bne.w	800a0e4 <HAL_SPI_TransmitReceive+0x234>
 800a240:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a242:	2b00      	cmp	r3, #0
 800a244:	f47f af4e 	bne.w	800a0e4 <HAL_SPI_TransmitReceive+0x234>
 800a248:	e0f3      	b.n	800a432 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b02      	cmp	r3, #2
 800a256:	d15a      	bne.n	800a30e <HAL_SPI_TransmitReceive+0x45e>
 800a258:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d057      	beq.n	800a30e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a25e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a260:	2b03      	cmp	r3, #3
 800a262:	d91c      	bls.n	800a29e <HAL_SPI_TransmitReceive+0x3ee>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a268:	2b40      	cmp	r3, #64	; 0x40
 800a26a:	d918      	bls.n	800a29e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6812      	ldr	r2, [r2, #0]
 800a276:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b04      	subs	r3, #4
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a29a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a29c:	e037      	b.n	800a30e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a29e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d91b      	bls.n	800a2dc <HAL_SPI_TransmitReceive+0x42c>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d017      	beq.n	800a2dc <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ba:	1c9a      	adds	r2, r3, #2
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3b02      	subs	r3, #2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2da:	e018      	b.n	800a30e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3320      	adds	r3, #32
 800a2e6:	7812      	ldrb	r2, [r2, #0]
 800a2e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a30c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d05e      	beq.n	800a3da <HAL_SPI_TransmitReceive+0x52a>
 800a31c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d05b      	beq.n	800a3da <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d018      	beq.n	800a362 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a33a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a340:	1d1a      	adds	r2, r3, #4
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b04      	subs	r3, #4
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a35e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a360:	e03b      	b.n	800a3da <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a36c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a370:	d918      	bls.n	800a3a4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a376:	6a3a      	ldr	r2, [r7, #32]
 800a378:	8812      	ldrh	r2, [r2, #0]
 800a37a:	b292      	uxth	r2, r2
 800a37c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a382:	1c9a      	adds	r2, r3, #2
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a38e:	b29b      	uxth	r3, r3
 800a390:	3b02      	subs	r3, #2
 800a392:	b29a      	uxth	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a3a2:	e01a      	b.n	800a3da <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3b0:	7812      	ldrb	r2, [r2, #0]
 800a3b2:	b2d2      	uxtb	r2, r2
 800a3b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3da:	f7f8 f967 	bl	80026ac <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d803      	bhi.n	800a3f2 <HAL_SPI_TransmitReceive+0x542>
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f0:	d102      	bne.n	800a3f8 <HAL_SPI_TransmitReceive+0x548>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d114      	bne.n	800a422 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fa67 	bl	800a8cc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a40c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e02e      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a424:	2b00      	cmp	r3, #0
 800a426:	f47f af10 	bne.w	800a24a <HAL_SPI_TransmitReceive+0x39a>
 800a42a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f47f af0c 	bne.w	800a24a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	2200      	movs	r2, #0
 800a43a:	2108      	movs	r1, #8
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 fae5 	bl	800aa0c <SPI_WaitOnFlagUntilTimeout>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d007      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a44e:	f043 0220 	orr.w	r2, r3, #32
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fa37 	bl	800a8cc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e001      	b.n	800a480 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a47c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a480:	4618      	mov	r0, r3
 800a482:	3730      	adds	r7, #48	; 0x30
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a4a0:	6a3a      	ldr	r2, [r7, #32]
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a4ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3330      	adds	r3, #48	; 0x30
 800a4c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d113      	bne.n	800a4f6 <HAL_SPI_IRQHandler+0x6e>
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10e      	bne.n	800a4f6 <HAL_SPI_IRQHandler+0x6e>
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d009      	beq.n	800a4f6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
    handled = 1UL;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10f      	bne.n	800a520 <HAL_SPI_IRQHandler+0x98>
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00a      	beq.n	800a520 <HAL_SPI_IRQHandler+0x98>
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d105      	bne.n	800a520 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	4798      	blx	r3
    handled = 1UL;
 800a51c:	2301      	movs	r3, #1
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	f003 0320 	and.w	r3, r3, #32
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10f      	bne.n	800a54a <HAL_SPI_IRQHandler+0xc2>
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <HAL_SPI_IRQHandler+0xc2>
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	f003 0304 	and.w	r3, r3, #4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d105      	bne.n	800a54a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	4798      	blx	r3
    handled = 1UL;
 800a546:	2301      	movs	r3, #1
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 816f 	bne.w	800a830 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80a0 	beq.w	800a69e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	699a      	ldr	r2, [r3, #24]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f042 0208 	orr.w	r2, r2, #8
 800a56c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	699a      	ldr	r2, [r3, #24]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f042 0210 	orr.w	r2, r2, #16
 800a57c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	699a      	ldr	r2, [r3, #24]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a58c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	691a      	ldr	r2, [r3, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0208 	bic.w	r2, r2, #8
 800a59c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <HAL_SPI_IRQHandler+0x140>
 800a5a8:	7cfb      	ldrb	r3, [r7, #19]
 800a5aa:	2b04      	cmp	r3, #4
 800a5ac:	d004      	beq.n	800a5b8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <HAL_SPI_IRQHandler+0x140>
 800a5b8:	7cfb      	ldrb	r3, [r7, #19]
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d059      	beq.n	800a672 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d154      	bne.n	800a672 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d13d      	bne.n	800a652 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a5d6:	e036      	b.n	800a646 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	2b0f      	cmp	r3, #15
 800a5de:	d90b      	bls.n	800a5f8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a5ea:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f0:	1d1a      	adds	r2, r3, #4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	665a      	str	r2, [r3, #100]	; 0x64
 800a5f6:	e01d      	b.n	800a634 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	d90b      	bls.n	800a618 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	8812      	ldrh	r2, [r2, #0]
 800a608:	b292      	uxth	r2, r2
 800a60a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a610:	1c9a      	adds	r2, r3, #2
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	665a      	str	r2, [r3, #100]	; 0x64
 800a616:	e00d      	b.n	800a634 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1c2      	bne.n	800a5d8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f93a 	bl	800a8cc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f90a 	bl	800a884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a670:	e0e3      	b.n	800a83a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	2b05      	cmp	r3, #5
 800a676:	d103      	bne.n	800a680 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f8f9 	bl	800a870 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a67e:	e0d9      	b.n	800a834 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a680:	7cfb      	ldrb	r3, [r7, #19]
 800a682:	2b04      	cmp	r3, #4
 800a684:	d103      	bne.n	800a68e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f8e8 	bl	800a85c <HAL_SPI_RxCpltCallback>
    return;
 800a68c:	e0d2      	b.n	800a834 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a68e:	7cfb      	ldrb	r3, [r7, #19]
 800a690:	2b03      	cmp	r3, #3
 800a692:	f040 80cf 	bne.w	800a834 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f8d6 	bl	800a848 <HAL_SPI_TxCpltCallback>
    return;
 800a69c:	e0ca      	b.n	800a834 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00d      	beq.n	800a6c4 <HAL_SPI_IRQHandler+0x23c>
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	f003 0308 	and.w	r3, r3, #8
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d008      	beq.n	800a6c4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	699a      	ldr	r2, [r3, #24]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6c0:	619a      	str	r2, [r3, #24]

    return;
 800a6c2:	e0ba      	b.n	800a83a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 80b5 	beq.w	800a83a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00f      	beq.n	800a6fa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6e0:	f043 0204 	orr.w	r2, r3, #4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00f      	beq.n	800a724 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a70a:	f043 0201 	orr.w	r2, r3, #1
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a722:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00f      	beq.n	800a74e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a734:	f043 0208 	orr.w	r2, r3, #8
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	699a      	ldr	r2, [r3, #24]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a74c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a75e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	699a      	ldr	r2, [r3, #24]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0220 	orr.w	r2, r2, #32
 800a776:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d05a      	beq.n	800a838 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0201 	bic.w	r2, r2, #1
 800a790:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6919      	ldr	r1, [r3, #16]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	4b28      	ldr	r3, [pc, #160]	; (800a840 <HAL_SPI_IRQHandler+0x3b8>)
 800a79e:	400b      	ands	r3, r1
 800a7a0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a7ac:	d138      	bne.n	800a820 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a7bc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d013      	beq.n	800a7ee <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ca:	4a1e      	ldr	r2, [pc, #120]	; (800a844 <HAL_SPI_IRQHandler+0x3bc>)
 800a7cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7f8 fca2 	bl	800311c <HAL_DMA_Abort_IT>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d020      	beq.n	800a838 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7fa:	4a12      	ldr	r2, [pc, #72]	; (800a844 <HAL_SPI_IRQHandler+0x3bc>)
 800a7fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a802:	4618      	mov	r0, r3
 800a804:	f7f8 fc8a 	bl	800311c <HAL_DMA_Abort_IT>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d014      	beq.n	800a838 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a814:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a81e:	e00b      	b.n	800a838 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f82b 	bl	800a884 <HAL_SPI_ErrorCallback>
    return;
 800a82e:	e003      	b.n	800a838 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a830:	bf00      	nop
 800a832:	e002      	b.n	800a83a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a834:	bf00      	nop
 800a836:	e000      	b.n	800a83a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a838:	bf00      	nop
  }
}
 800a83a:	3728      	adds	r7, #40	; 0x28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	fffffc94 	.word	0xfffffc94
 800a844:	0800a899 	.word	0x0800a899

0800a848 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff ffe0 	bl	800a884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0208 	orr.w	r2, r2, #8
 800a8ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0210 	orr.w	r2, r2, #16
 800a8fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0201 	bic.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6919      	ldr	r1, [r3, #16]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	4b3c      	ldr	r3, [pc, #240]	; (800aa08 <SPI_CloseTransfer+0x13c>)
 800a918:	400b      	ands	r3, r1
 800a91a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689a      	ldr	r2, [r3, #8]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a92a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b04      	cmp	r3, #4
 800a936:	d014      	beq.n	800a962 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f003 0320 	and.w	r3, r3, #32
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00f      	beq.n	800a962 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a948:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	699a      	ldr	r2, [r3, #24]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f042 0220 	orr.w	r2, r2, #32
 800a960:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d014      	beq.n	800a998 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00f      	beq.n	800a998 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a97e:	f043 0204 	orr.w	r2, r3, #4
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	699a      	ldr	r2, [r3, #24]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a996:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00f      	beq.n	800a9c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a8:	f043 0201 	orr.w	r2, r3, #1
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	699a      	ldr	r2, [r3, #24]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00f      	beq.n	800a9ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9d2:	f043 0208 	orr.w	r2, r3, #8
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699a      	ldr	r2, [r3, #24]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a9fc:	bf00      	nop
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	fffffc90 	.word	0xfffffc90

0800aa0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa1c:	e010      	b.n	800aa40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa1e:	f7f7 fe45 	bl	80026ac <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d803      	bhi.n	800aa36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d102      	bne.n	800aa3c <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e00f      	b.n	800aa60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	695a      	ldr	r2, [r3, #20]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4013      	ands	r3, r2
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d0df      	beq.n	800aa1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa74:	095b      	lsrs	r3, r3, #5
 800aa76:	3301      	adds	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	3307      	adds	r3, #7
 800aa86:	08db      	lsrs	r3, r3, #3
 800aa88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e049      	b.n	800ab44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d106      	bne.n	800aaca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7f7 fb31 	bl	800212c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3304      	adds	r3, #4
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f000 fa4d 	bl	800af7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <HAL_TIM_PWM_Start+0x24>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	bf14      	ite	ne
 800ab68:	2301      	movne	r3, #1
 800ab6a:	2300      	moveq	r3, #0
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	e03c      	b.n	800abea <HAL_TIM_PWM_Start+0x9e>
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d109      	bne.n	800ab8a <HAL_TIM_PWM_Start+0x3e>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	bf14      	ite	ne
 800ab82:	2301      	movne	r3, #1
 800ab84:	2300      	moveq	r3, #0
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	e02f      	b.n	800abea <HAL_TIM_PWM_Start+0x9e>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	d109      	bne.n	800aba4 <HAL_TIM_PWM_Start+0x58>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	bf14      	ite	ne
 800ab9c:	2301      	movne	r3, #1
 800ab9e:	2300      	moveq	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	e022      	b.n	800abea <HAL_TIM_PWM_Start+0x9e>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b0c      	cmp	r3, #12
 800aba8:	d109      	bne.n	800abbe <HAL_TIM_PWM_Start+0x72>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	bf14      	ite	ne
 800abb6:	2301      	movne	r3, #1
 800abb8:	2300      	moveq	r3, #0
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	e015      	b.n	800abea <HAL_TIM_PWM_Start+0x9e>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b10      	cmp	r3, #16
 800abc2:	d109      	bne.n	800abd8 <HAL_TIM_PWM_Start+0x8c>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b01      	cmp	r3, #1
 800abce:	bf14      	ite	ne
 800abd0:	2301      	movne	r3, #1
 800abd2:	2300      	moveq	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	e008      	b.n	800abea <HAL_TIM_PWM_Start+0x9e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	bf14      	ite	ne
 800abe4:	2301      	movne	r3, #1
 800abe6:	2300      	moveq	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e09c      	b.n	800ad2c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <HAL_TIM_PWM_Start+0xb6>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac00:	e023      	b.n	800ac4a <HAL_TIM_PWM_Start+0xfe>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d104      	bne.n	800ac12 <HAL_TIM_PWM_Start+0xc6>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac10:	e01b      	b.n	800ac4a <HAL_TIM_PWM_Start+0xfe>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d104      	bne.n	800ac22 <HAL_TIM_PWM_Start+0xd6>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac20:	e013      	b.n	800ac4a <HAL_TIM_PWM_Start+0xfe>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b0c      	cmp	r3, #12
 800ac26:	d104      	bne.n	800ac32 <HAL_TIM_PWM_Start+0xe6>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac30:	e00b      	b.n	800ac4a <HAL_TIM_PWM_Start+0xfe>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b10      	cmp	r3, #16
 800ac36:	d104      	bne.n	800ac42 <HAL_TIM_PWM_Start+0xf6>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac40:	e003      	b.n	800ac4a <HAL_TIM_PWM_Start+0xfe>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fcfa 	bl	800b64c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a35      	ldr	r2, [pc, #212]	; (800ad34 <HAL_TIM_PWM_Start+0x1e8>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d013      	beq.n	800ac8a <HAL_TIM_PWM_Start+0x13e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a34      	ldr	r2, [pc, #208]	; (800ad38 <HAL_TIM_PWM_Start+0x1ec>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00e      	beq.n	800ac8a <HAL_TIM_PWM_Start+0x13e>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a32      	ldr	r2, [pc, #200]	; (800ad3c <HAL_TIM_PWM_Start+0x1f0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d009      	beq.n	800ac8a <HAL_TIM_PWM_Start+0x13e>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a31      	ldr	r2, [pc, #196]	; (800ad40 <HAL_TIM_PWM_Start+0x1f4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d004      	beq.n	800ac8a <HAL_TIM_PWM_Start+0x13e>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a2f      	ldr	r2, [pc, #188]	; (800ad44 <HAL_TIM_PWM_Start+0x1f8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d101      	bne.n	800ac8e <HAL_TIM_PWM_Start+0x142>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <HAL_TIM_PWM_Start+0x144>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aca2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a22      	ldr	r2, [pc, #136]	; (800ad34 <HAL_TIM_PWM_Start+0x1e8>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d01d      	beq.n	800acea <HAL_TIM_PWM_Start+0x19e>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb6:	d018      	beq.n	800acea <HAL_TIM_PWM_Start+0x19e>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a22      	ldr	r2, [pc, #136]	; (800ad48 <HAL_TIM_PWM_Start+0x1fc>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d013      	beq.n	800acea <HAL_TIM_PWM_Start+0x19e>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a21      	ldr	r2, [pc, #132]	; (800ad4c <HAL_TIM_PWM_Start+0x200>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d00e      	beq.n	800acea <HAL_TIM_PWM_Start+0x19e>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a1f      	ldr	r2, [pc, #124]	; (800ad50 <HAL_TIM_PWM_Start+0x204>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d009      	beq.n	800acea <HAL_TIM_PWM_Start+0x19e>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <HAL_TIM_PWM_Start+0x1ec>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d004      	beq.n	800acea <HAL_TIM_PWM_Start+0x19e>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <HAL_TIM_PWM_Start+0x208>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d115      	bne.n	800ad16 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	689a      	ldr	r2, [r3, #8]
 800acf0:	4b19      	ldr	r3, [pc, #100]	; (800ad58 <HAL_TIM_PWM_Start+0x20c>)
 800acf2:	4013      	ands	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b06      	cmp	r3, #6
 800acfa:	d015      	beq.n	800ad28 <HAL_TIM_PWM_Start+0x1dc>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad02:	d011      	beq.n	800ad28 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f042 0201 	orr.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad14:	e008      	b.n	800ad28 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0201 	orr.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e000      	b.n	800ad2a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	40014400 	.word	0x40014400
 800ad44:	40014800 	.word	0x40014800
 800ad48:	40000400 	.word	0x40000400
 800ad4c:	40000800 	.word	0x40000800
 800ad50:	40000c00 	.word	0x40000c00
 800ad54:	40001800 	.word	0x40001800
 800ad58:	00010007 	.word	0x00010007

0800ad5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e0fd      	b.n	800af72 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b14      	cmp	r3, #20
 800ad82:	f200 80f0 	bhi.w	800af66 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ad86:	a201      	add	r2, pc, #4	; (adr r2, 800ad8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8c:	0800ade1 	.word	0x0800ade1
 800ad90:	0800af67 	.word	0x0800af67
 800ad94:	0800af67 	.word	0x0800af67
 800ad98:	0800af67 	.word	0x0800af67
 800ad9c:	0800ae21 	.word	0x0800ae21
 800ada0:	0800af67 	.word	0x0800af67
 800ada4:	0800af67 	.word	0x0800af67
 800ada8:	0800af67 	.word	0x0800af67
 800adac:	0800ae63 	.word	0x0800ae63
 800adb0:	0800af67 	.word	0x0800af67
 800adb4:	0800af67 	.word	0x0800af67
 800adb8:	0800af67 	.word	0x0800af67
 800adbc:	0800aea3 	.word	0x0800aea3
 800adc0:	0800af67 	.word	0x0800af67
 800adc4:	0800af67 	.word	0x0800af67
 800adc8:	0800af67 	.word	0x0800af67
 800adcc:	0800aee5 	.word	0x0800aee5
 800add0:	0800af67 	.word	0x0800af67
 800add4:	0800af67 	.word	0x0800af67
 800add8:	0800af67 	.word	0x0800af67
 800addc:	0800af25 	.word	0x0800af25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68b9      	ldr	r1, [r7, #8]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 f962 	bl	800b0b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	699a      	ldr	r2, [r3, #24]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f042 0208 	orr.w	r2, r2, #8
 800adfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	699a      	ldr	r2, [r3, #24]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0204 	bic.w	r2, r2, #4
 800ae0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6999      	ldr	r1, [r3, #24]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	691a      	ldr	r2, [r3, #16]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	619a      	str	r2, [r3, #24]
      break;
 800ae1e:	e0a3      	b.n	800af68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 f9d2 	bl	800b1d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	699a      	ldr	r2, [r3, #24]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	699a      	ldr	r2, [r3, #24]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6999      	ldr	r1, [r3, #24]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	021a      	lsls	r2, r3, #8
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	619a      	str	r2, [r3, #24]
      break;
 800ae60:	e082      	b.n	800af68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fa3b 	bl	800b2e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	69da      	ldr	r2, [r3, #28]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f042 0208 	orr.w	r2, r2, #8
 800ae7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f022 0204 	bic.w	r2, r2, #4
 800ae8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69d9      	ldr	r1, [r3, #28]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	691a      	ldr	r2, [r3, #16]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	61da      	str	r2, [r3, #28]
      break;
 800aea0:	e062      	b.n	800af68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 faa1 	bl	800b3f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	69da      	ldr	r2, [r3, #28]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69da      	ldr	r2, [r3, #28]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	69d9      	ldr	r1, [r3, #28]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	021a      	lsls	r2, r3, #8
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	61da      	str	r2, [r3, #28]
      break;
 800aee2:	e041      	b.n	800af68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 fae8 	bl	800b4c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0208 	orr.w	r2, r2, #8
 800aefe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0204 	bic.w	r2, r2, #4
 800af0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af22:	e021      	b.n	800af68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fb2a 	bl	800b584 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	021a      	lsls	r2, r3, #8
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af64:	e000      	b.n	800af68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800af66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop

0800af7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a40      	ldr	r2, [pc, #256]	; (800b090 <TIM_Base_SetConfig+0x114>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d013      	beq.n	800afbc <TIM_Base_SetConfig+0x40>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9a:	d00f      	beq.n	800afbc <TIM_Base_SetConfig+0x40>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a3d      	ldr	r2, [pc, #244]	; (800b094 <TIM_Base_SetConfig+0x118>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00b      	beq.n	800afbc <TIM_Base_SetConfig+0x40>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a3c      	ldr	r2, [pc, #240]	; (800b098 <TIM_Base_SetConfig+0x11c>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d007      	beq.n	800afbc <TIM_Base_SetConfig+0x40>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a3b      	ldr	r2, [pc, #236]	; (800b09c <TIM_Base_SetConfig+0x120>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_Base_SetConfig+0x40>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a3a      	ldr	r2, [pc, #232]	; (800b0a0 <TIM_Base_SetConfig+0x124>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d108      	bne.n	800afce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a2f      	ldr	r2, [pc, #188]	; (800b090 <TIM_Base_SetConfig+0x114>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d01f      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afdc:	d01b      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a2c      	ldr	r2, [pc, #176]	; (800b094 <TIM_Base_SetConfig+0x118>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d017      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a2b      	ldr	r2, [pc, #172]	; (800b098 <TIM_Base_SetConfig+0x11c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d013      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a2a      	ldr	r2, [pc, #168]	; (800b09c <TIM_Base_SetConfig+0x120>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d00f      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a29      	ldr	r2, [pc, #164]	; (800b0a0 <TIM_Base_SetConfig+0x124>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d00b      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a28      	ldr	r2, [pc, #160]	; (800b0a4 <TIM_Base_SetConfig+0x128>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d007      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a27      	ldr	r2, [pc, #156]	; (800b0a8 <TIM_Base_SetConfig+0x12c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d003      	beq.n	800b016 <TIM_Base_SetConfig+0x9a>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a26      	ldr	r2, [pc, #152]	; (800b0ac <TIM_Base_SetConfig+0x130>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d108      	bne.n	800b028 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b01c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	4313      	orrs	r3, r2
 800b026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	4313      	orrs	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689a      	ldr	r2, [r3, #8]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a10      	ldr	r2, [pc, #64]	; (800b090 <TIM_Base_SetConfig+0x114>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00f      	beq.n	800b074 <TIM_Base_SetConfig+0xf8>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a12      	ldr	r2, [pc, #72]	; (800b0a0 <TIM_Base_SetConfig+0x124>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00b      	beq.n	800b074 <TIM_Base_SetConfig+0xf8>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a11      	ldr	r2, [pc, #68]	; (800b0a4 <TIM_Base_SetConfig+0x128>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d007      	beq.n	800b074 <TIM_Base_SetConfig+0xf8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a10      	ldr	r2, [pc, #64]	; (800b0a8 <TIM_Base_SetConfig+0x12c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_Base_SetConfig+0xf8>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a0f      	ldr	r2, [pc, #60]	; (800b0ac <TIM_Base_SetConfig+0x130>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d103      	bne.n	800b07c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	691a      	ldr	r2, [r3, #16]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	615a      	str	r2, [r3, #20]
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	40010000 	.word	0x40010000
 800b094:	40000400 	.word	0x40000400
 800b098:	40000800 	.word	0x40000800
 800b09c:	40000c00 	.word	0x40000c00
 800b0a0:	40010400 	.word	0x40010400
 800b0a4:	40014000 	.word	0x40014000
 800b0a8:	40014400 	.word	0x40014400
 800b0ac:	40014800 	.word	0x40014800

0800b0b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	f023 0201 	bic.w	r2, r3, #1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4b37      	ldr	r3, [pc, #220]	; (800b1b8 <TIM_OC1_SetConfig+0x108>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f023 0302 	bic.w	r3, r3, #2
 800b0f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a2d      	ldr	r2, [pc, #180]	; (800b1bc <TIM_OC1_SetConfig+0x10c>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d00f      	beq.n	800b12c <TIM_OC1_SetConfig+0x7c>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a2c      	ldr	r2, [pc, #176]	; (800b1c0 <TIM_OC1_SetConfig+0x110>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d00b      	beq.n	800b12c <TIM_OC1_SetConfig+0x7c>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a2b      	ldr	r2, [pc, #172]	; (800b1c4 <TIM_OC1_SetConfig+0x114>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d007      	beq.n	800b12c <TIM_OC1_SetConfig+0x7c>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a2a      	ldr	r2, [pc, #168]	; (800b1c8 <TIM_OC1_SetConfig+0x118>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d003      	beq.n	800b12c <TIM_OC1_SetConfig+0x7c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a29      	ldr	r2, [pc, #164]	; (800b1cc <TIM_OC1_SetConfig+0x11c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d10c      	bne.n	800b146 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f023 0308 	bic.w	r3, r3, #8
 800b132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f023 0304 	bic.w	r3, r3, #4
 800b144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a1c      	ldr	r2, [pc, #112]	; (800b1bc <TIM_OC1_SetConfig+0x10c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00f      	beq.n	800b16e <TIM_OC1_SetConfig+0xbe>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a1b      	ldr	r2, [pc, #108]	; (800b1c0 <TIM_OC1_SetConfig+0x110>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d00b      	beq.n	800b16e <TIM_OC1_SetConfig+0xbe>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a1a      	ldr	r2, [pc, #104]	; (800b1c4 <TIM_OC1_SetConfig+0x114>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d007      	beq.n	800b16e <TIM_OC1_SetConfig+0xbe>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <TIM_OC1_SetConfig+0x118>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d003      	beq.n	800b16e <TIM_OC1_SetConfig+0xbe>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a18      	ldr	r2, [pc, #96]	; (800b1cc <TIM_OC1_SetConfig+0x11c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d111      	bne.n	800b192 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	4313      	orrs	r3, r2
 800b186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	621a      	str	r2, [r3, #32]
}
 800b1ac:	bf00      	nop
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	fffeff8f 	.word	0xfffeff8f
 800b1bc:	40010000 	.word	0x40010000
 800b1c0:	40010400 	.word	0x40010400
 800b1c4:	40014000 	.word	0x40014000
 800b1c8:	40014400 	.word	0x40014400
 800b1cc:	40014800 	.word	0x40014800

0800b1d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f023 0210 	bic.w	r2, r3, #16
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4b34      	ldr	r3, [pc, #208]	; (800b2cc <TIM_OC2_SetConfig+0xfc>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4313      	orrs	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f023 0320 	bic.w	r3, r3, #32
 800b21a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	011b      	lsls	r3, r3, #4
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	4313      	orrs	r3, r2
 800b226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a29      	ldr	r2, [pc, #164]	; (800b2d0 <TIM_OC2_SetConfig+0x100>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d003      	beq.n	800b238 <TIM_OC2_SetConfig+0x68>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a28      	ldr	r2, [pc, #160]	; (800b2d4 <TIM_OC2_SetConfig+0x104>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d10d      	bne.n	800b254 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b23e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	4313      	orrs	r3, r2
 800b24a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a1e      	ldr	r2, [pc, #120]	; (800b2d0 <TIM_OC2_SetConfig+0x100>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d00f      	beq.n	800b27c <TIM_OC2_SetConfig+0xac>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <TIM_OC2_SetConfig+0x104>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d00b      	beq.n	800b27c <TIM_OC2_SetConfig+0xac>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a1c      	ldr	r2, [pc, #112]	; (800b2d8 <TIM_OC2_SetConfig+0x108>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d007      	beq.n	800b27c <TIM_OC2_SetConfig+0xac>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a1b      	ldr	r2, [pc, #108]	; (800b2dc <TIM_OC2_SetConfig+0x10c>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d003      	beq.n	800b27c <TIM_OC2_SetConfig+0xac>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a1a      	ldr	r2, [pc, #104]	; (800b2e0 <TIM_OC2_SetConfig+0x110>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d113      	bne.n	800b2a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b28a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	4313      	orrs	r3, r2
 800b296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	621a      	str	r2, [r3, #32]
}
 800b2be:	bf00      	nop
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	feff8fff 	.word	0xfeff8fff
 800b2d0:	40010000 	.word	0x40010000
 800b2d4:	40010400 	.word	0x40010400
 800b2d8:	40014000 	.word	0x40014000
 800b2dc:	40014400 	.word	0x40014400
 800b2e0:	40014800 	.word	0x40014800

0800b2e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f023 0303 	bic.w	r3, r3, #3
 800b31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	4313      	orrs	r3, r2
 800b338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a27      	ldr	r2, [pc, #156]	; (800b3dc <TIM_OC3_SetConfig+0xf8>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d003      	beq.n	800b34a <TIM_OC3_SetConfig+0x66>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a26      	ldr	r2, [pc, #152]	; (800b3e0 <TIM_OC3_SetConfig+0xfc>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d10d      	bne.n	800b366 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a1c      	ldr	r2, [pc, #112]	; (800b3dc <TIM_OC3_SetConfig+0xf8>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d00f      	beq.n	800b38e <TIM_OC3_SetConfig+0xaa>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a1b      	ldr	r2, [pc, #108]	; (800b3e0 <TIM_OC3_SetConfig+0xfc>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00b      	beq.n	800b38e <TIM_OC3_SetConfig+0xaa>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a1a      	ldr	r2, [pc, #104]	; (800b3e4 <TIM_OC3_SetConfig+0x100>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d007      	beq.n	800b38e <TIM_OC3_SetConfig+0xaa>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a19      	ldr	r2, [pc, #100]	; (800b3e8 <TIM_OC3_SetConfig+0x104>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d003      	beq.n	800b38e <TIM_OC3_SetConfig+0xaa>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a18      	ldr	r2, [pc, #96]	; (800b3ec <TIM_OC3_SetConfig+0x108>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d113      	bne.n	800b3b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b39c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	011b      	lsls	r3, r3, #4
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	621a      	str	r2, [r3, #32]
}
 800b3d0:	bf00      	nop
 800b3d2:	371c      	adds	r7, #28
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	40010000 	.word	0x40010000
 800b3e0:	40010400 	.word	0x40010400
 800b3e4:	40014000 	.word	0x40014000
 800b3e8:	40014400 	.word	0x40014400
 800b3ec:	40014800 	.word	0x40014800

0800b3f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4313      	orrs	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b43a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	031b      	lsls	r3, r3, #12
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a18      	ldr	r2, [pc, #96]	; (800b4ac <TIM_OC4_SetConfig+0xbc>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00f      	beq.n	800b470 <TIM_OC4_SetConfig+0x80>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a17      	ldr	r2, [pc, #92]	; (800b4b0 <TIM_OC4_SetConfig+0xc0>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00b      	beq.n	800b470 <TIM_OC4_SetConfig+0x80>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a16      	ldr	r2, [pc, #88]	; (800b4b4 <TIM_OC4_SetConfig+0xc4>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d007      	beq.n	800b470 <TIM_OC4_SetConfig+0x80>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a15      	ldr	r2, [pc, #84]	; (800b4b8 <TIM_OC4_SetConfig+0xc8>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d003      	beq.n	800b470 <TIM_OC4_SetConfig+0x80>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a14      	ldr	r2, [pc, #80]	; (800b4bc <TIM_OC4_SetConfig+0xcc>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d109      	bne.n	800b484 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	019b      	lsls	r3, r3, #6
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40010400 	.word	0x40010400
 800b4b4:	40014000 	.word	0x40014000
 800b4b8:	40014400 	.word	0x40014400
 800b4bc:	40014800 	.word	0x40014800

0800b4c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b087      	sub	sp, #28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b500:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a17      	ldr	r2, [pc, #92]	; (800b570 <TIM_OC5_SetConfig+0xb0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00f      	beq.n	800b536 <TIM_OC5_SetConfig+0x76>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a16      	ldr	r2, [pc, #88]	; (800b574 <TIM_OC5_SetConfig+0xb4>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d00b      	beq.n	800b536 <TIM_OC5_SetConfig+0x76>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a15      	ldr	r2, [pc, #84]	; (800b578 <TIM_OC5_SetConfig+0xb8>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d007      	beq.n	800b536 <TIM_OC5_SetConfig+0x76>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a14      	ldr	r2, [pc, #80]	; (800b57c <TIM_OC5_SetConfig+0xbc>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d003      	beq.n	800b536 <TIM_OC5_SetConfig+0x76>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a13      	ldr	r2, [pc, #76]	; (800b580 <TIM_OC5_SetConfig+0xc0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d109      	bne.n	800b54a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b53c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	021b      	lsls	r3, r3, #8
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	4313      	orrs	r3, r2
 800b548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	621a      	str	r2, [r3, #32]
}
 800b564:	bf00      	nop
 800b566:	371c      	adds	r7, #28
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	40010000 	.word	0x40010000
 800b574:	40010400 	.word	0x40010400
 800b578:	40014000 	.word	0x40014000
 800b57c:	40014400 	.word	0x40014400
 800b580:	40014800 	.word	0x40014800

0800b584 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	021b      	lsls	r3, r3, #8
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	051b      	lsls	r3, r3, #20
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a18      	ldr	r2, [pc, #96]	; (800b638 <TIM_OC6_SetConfig+0xb4>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00f      	beq.n	800b5fc <TIM_OC6_SetConfig+0x78>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a17      	ldr	r2, [pc, #92]	; (800b63c <TIM_OC6_SetConfig+0xb8>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00b      	beq.n	800b5fc <TIM_OC6_SetConfig+0x78>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a16      	ldr	r2, [pc, #88]	; (800b640 <TIM_OC6_SetConfig+0xbc>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d007      	beq.n	800b5fc <TIM_OC6_SetConfig+0x78>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a15      	ldr	r2, [pc, #84]	; (800b644 <TIM_OC6_SetConfig+0xc0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_OC6_SetConfig+0x78>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a14      	ldr	r2, [pc, #80]	; (800b648 <TIM_OC6_SetConfig+0xc4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d109      	bne.n	800b610 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	029b      	lsls	r3, r3, #10
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	621a      	str	r2, [r3, #32]
}
 800b62a:	bf00      	nop
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	40010000 	.word	0x40010000
 800b63c:	40010400 	.word	0x40010400
 800b640:	40014000 	.word	0x40014000
 800b644:	40014400 	.word	0x40014400
 800b648:	40014800 	.word	0x40014800

0800b64c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f003 031f 	and.w	r3, r3, #31
 800b65e:	2201      	movs	r2, #1
 800b660:	fa02 f303 	lsl.w	r3, r2, r3
 800b664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a1a      	ldr	r2, [r3, #32]
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	43db      	mvns	r3, r3
 800b66e:	401a      	ands	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a1a      	ldr	r2, [r3, #32]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	f003 031f 	and.w	r3, r3, #31
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	fa01 f303 	lsl.w	r3, r1, r3
 800b684:	431a      	orrs	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	621a      	str	r2, [r3, #32]
}
 800b68a:	bf00      	nop
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
	...

0800b698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d101      	bne.n	800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e068      	b.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a2e      	ldr	r2, [pc, #184]	; (800b790 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d004      	beq.n	800b6e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a2d      	ldr	r2, [pc, #180]	; (800b794 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d108      	bne.n	800b6f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b6ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1e      	ldr	r2, [pc, #120]	; (800b790 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d01d      	beq.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b722:	d018      	beq.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a1b      	ldr	r2, [pc, #108]	; (800b798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d013      	beq.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a1a      	ldr	r2, [pc, #104]	; (800b79c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d00e      	beq.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a18      	ldr	r2, [pc, #96]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d009      	beq.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a13      	ldr	r2, [pc, #76]	; (800b794 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d004      	beq.n	800b756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d10c      	bne.n	800b770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b75c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	4313      	orrs	r3, r2
 800b766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40010000 	.word	0x40010000
 800b794:	40010400 	.word	0x40010400
 800b798:	40000400 	.word	0x40000400
 800b79c:	40000800 	.word	0x40000800
 800b7a0:	40000c00 	.word	0x40000c00
 800b7a4:	40001800 	.word	0x40001800

0800b7a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d101      	bne.n	800b7c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e065      	b.n	800b890 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	041b      	lsls	r3, r3, #16
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a16      	ldr	r2, [pc, #88]	; (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d004      	beq.n	800b852 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a14      	ldr	r2, [pc, #80]	; (800b8a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d115      	bne.n	800b87e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	051b      	lsls	r3, r3, #20
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	40010400 	.word	0x40010400

0800b8a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e042      	b.n	800b93c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d106      	bne.n	800b8ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7f6 fd25 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2224      	movs	r2, #36	; 0x24
 800b8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0201 	bic.w	r2, r2, #1
 800b8e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f82c 	bl	800b944 <UART_SetConfig>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d101      	bne.n	800b8f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e022      	b.n	800b93c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fd80 	bl	800c404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fe07 	bl	800c548 <UART_CheckIdleState>
 800b93a:	4603      	mov	r3, r0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b944:	b5b0      	push	{r4, r5, r7, lr}
 800b946:	b08e      	sub	sp, #56	; 0x38
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689a      	ldr	r2, [r3, #8]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	431a      	orrs	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	4313      	orrs	r3, r2
 800b968:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	4bbf      	ldr	r3, [pc, #764]	; (800bc70 <UART_SetConfig+0x32c>)
 800b972:	4013      	ands	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6812      	ldr	r2, [r2, #0]
 800b978:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b97a:	430b      	orrs	r3, r1
 800b97c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	430a      	orrs	r2, r1
 800b992:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4ab5      	ldr	r2, [pc, #724]	; (800bc74 <UART_SetConfig+0x330>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d004      	beq.n	800b9ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	4bb0      	ldr	r3, [pc, #704]	; (800bc78 <UART_SetConfig+0x334>)
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	f023 010f 	bic.w	r1, r3, #15
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4aa7      	ldr	r2, [pc, #668]	; (800bc7c <UART_SetConfig+0x338>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d176      	bne.n	800bad0 <UART_SetConfig+0x18c>
 800b9e2:	4ba7      	ldr	r3, [pc, #668]	; (800bc80 <UART_SetConfig+0x33c>)
 800b9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9ea:	2b28      	cmp	r3, #40	; 0x28
 800b9ec:	d86c      	bhi.n	800bac8 <UART_SetConfig+0x184>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <UART_SetConfig+0xb0>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba99 	.word	0x0800ba99
 800b9f8:	0800bac9 	.word	0x0800bac9
 800b9fc:	0800bac9 	.word	0x0800bac9
 800ba00:	0800bac9 	.word	0x0800bac9
 800ba04:	0800bac9 	.word	0x0800bac9
 800ba08:	0800bac9 	.word	0x0800bac9
 800ba0c:	0800bac9 	.word	0x0800bac9
 800ba10:	0800bac9 	.word	0x0800bac9
 800ba14:	0800baa1 	.word	0x0800baa1
 800ba18:	0800bac9 	.word	0x0800bac9
 800ba1c:	0800bac9 	.word	0x0800bac9
 800ba20:	0800bac9 	.word	0x0800bac9
 800ba24:	0800bac9 	.word	0x0800bac9
 800ba28:	0800bac9 	.word	0x0800bac9
 800ba2c:	0800bac9 	.word	0x0800bac9
 800ba30:	0800bac9 	.word	0x0800bac9
 800ba34:	0800baa9 	.word	0x0800baa9
 800ba38:	0800bac9 	.word	0x0800bac9
 800ba3c:	0800bac9 	.word	0x0800bac9
 800ba40:	0800bac9 	.word	0x0800bac9
 800ba44:	0800bac9 	.word	0x0800bac9
 800ba48:	0800bac9 	.word	0x0800bac9
 800ba4c:	0800bac9 	.word	0x0800bac9
 800ba50:	0800bac9 	.word	0x0800bac9
 800ba54:	0800bab1 	.word	0x0800bab1
 800ba58:	0800bac9 	.word	0x0800bac9
 800ba5c:	0800bac9 	.word	0x0800bac9
 800ba60:	0800bac9 	.word	0x0800bac9
 800ba64:	0800bac9 	.word	0x0800bac9
 800ba68:	0800bac9 	.word	0x0800bac9
 800ba6c:	0800bac9 	.word	0x0800bac9
 800ba70:	0800bac9 	.word	0x0800bac9
 800ba74:	0800bab9 	.word	0x0800bab9
 800ba78:	0800bac9 	.word	0x0800bac9
 800ba7c:	0800bac9 	.word	0x0800bac9
 800ba80:	0800bac9 	.word	0x0800bac9
 800ba84:	0800bac9 	.word	0x0800bac9
 800ba88:	0800bac9 	.word	0x0800bac9
 800ba8c:	0800bac9 	.word	0x0800bac9
 800ba90:	0800bac9 	.word	0x0800bac9
 800ba94:	0800bac1 	.word	0x0800bac1
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9e:	e222      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800baa0:	2304      	movs	r3, #4
 800baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa6:	e21e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800baa8:	2308      	movs	r3, #8
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e21a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bab0:	2310      	movs	r3, #16
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e216      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bab8:	2320      	movs	r3, #32
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e212      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bac0:	2340      	movs	r3, #64	; 0x40
 800bac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac6:	e20e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bac8:	2380      	movs	r3, #128	; 0x80
 800baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bace:	e20a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a6b      	ldr	r2, [pc, #428]	; (800bc84 <UART_SetConfig+0x340>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d130      	bne.n	800bb3c <UART_SetConfig+0x1f8>
 800bada:	4b69      	ldr	r3, [pc, #420]	; (800bc80 <UART_SetConfig+0x33c>)
 800badc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bade:	f003 0307 	and.w	r3, r3, #7
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d826      	bhi.n	800bb34 <UART_SetConfig+0x1f0>
 800bae6:	a201      	add	r2, pc, #4	; (adr r2, 800baec <UART_SetConfig+0x1a8>)
 800bae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baec:	0800bb05 	.word	0x0800bb05
 800baf0:	0800bb0d 	.word	0x0800bb0d
 800baf4:	0800bb15 	.word	0x0800bb15
 800baf8:	0800bb1d 	.word	0x0800bb1d
 800bafc:	0800bb25 	.word	0x0800bb25
 800bb00:	0800bb2d 	.word	0x0800bb2d
 800bb04:	2300      	movs	r3, #0
 800bb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0a:	e1ec      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb0c:	2304      	movs	r3, #4
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb12:	e1e8      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb14:	2308      	movs	r3, #8
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e1e4      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb1c:	2310      	movs	r3, #16
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb22:	e1e0      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb24:	2320      	movs	r3, #32
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e1dc      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb2c:	2340      	movs	r3, #64	; 0x40
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e1d8      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb34:	2380      	movs	r3, #128	; 0x80
 800bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb3a:	e1d4      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a51      	ldr	r2, [pc, #324]	; (800bc88 <UART_SetConfig+0x344>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d130      	bne.n	800bba8 <UART_SetConfig+0x264>
 800bb46:	4b4e      	ldr	r3, [pc, #312]	; (800bc80 <UART_SetConfig+0x33c>)
 800bb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	2b05      	cmp	r3, #5
 800bb50:	d826      	bhi.n	800bba0 <UART_SetConfig+0x25c>
 800bb52:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <UART_SetConfig+0x214>)
 800bb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb58:	0800bb71 	.word	0x0800bb71
 800bb5c:	0800bb79 	.word	0x0800bb79
 800bb60:	0800bb81 	.word	0x0800bb81
 800bb64:	0800bb89 	.word	0x0800bb89
 800bb68:	0800bb91 	.word	0x0800bb91
 800bb6c:	0800bb99 	.word	0x0800bb99
 800bb70:	2300      	movs	r3, #0
 800bb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb76:	e1b6      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb78:	2304      	movs	r3, #4
 800bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7e:	e1b2      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb80:	2308      	movs	r3, #8
 800bb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb86:	e1ae      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb88:	2310      	movs	r3, #16
 800bb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8e:	e1aa      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb90:	2320      	movs	r3, #32
 800bb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb96:	e1a6      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bb98:	2340      	movs	r3, #64	; 0x40
 800bb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb9e:	e1a2      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bba0:	2380      	movs	r3, #128	; 0x80
 800bba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bba6:	e19e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a37      	ldr	r2, [pc, #220]	; (800bc8c <UART_SetConfig+0x348>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d130      	bne.n	800bc14 <UART_SetConfig+0x2d0>
 800bbb2:	4b33      	ldr	r3, [pc, #204]	; (800bc80 <UART_SetConfig+0x33c>)
 800bbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb6:	f003 0307 	and.w	r3, r3, #7
 800bbba:	2b05      	cmp	r3, #5
 800bbbc:	d826      	bhi.n	800bc0c <UART_SetConfig+0x2c8>
 800bbbe:	a201      	add	r2, pc, #4	; (adr r2, 800bbc4 <UART_SetConfig+0x280>)
 800bbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc4:	0800bbdd 	.word	0x0800bbdd
 800bbc8:	0800bbe5 	.word	0x0800bbe5
 800bbcc:	0800bbed 	.word	0x0800bbed
 800bbd0:	0800bbf5 	.word	0x0800bbf5
 800bbd4:	0800bbfd 	.word	0x0800bbfd
 800bbd8:	0800bc05 	.word	0x0800bc05
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe2:	e180      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bbe4:	2304      	movs	r3, #4
 800bbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbea:	e17c      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bbec:	2308      	movs	r3, #8
 800bbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf2:	e178      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bbf4:	2310      	movs	r3, #16
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfa:	e174      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bbfc:	2320      	movs	r3, #32
 800bbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc02:	e170      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc04:	2340      	movs	r3, #64	; 0x40
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0a:	e16c      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc0c:	2380      	movs	r3, #128	; 0x80
 800bc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc12:	e168      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a1d      	ldr	r2, [pc, #116]	; (800bc90 <UART_SetConfig+0x34c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d142      	bne.n	800bca4 <UART_SetConfig+0x360>
 800bc1e:	4b18      	ldr	r3, [pc, #96]	; (800bc80 <UART_SetConfig+0x33c>)
 800bc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	2b05      	cmp	r3, #5
 800bc28:	d838      	bhi.n	800bc9c <UART_SetConfig+0x358>
 800bc2a:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <UART_SetConfig+0x2ec>)
 800bc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc30:	0800bc49 	.word	0x0800bc49
 800bc34:	0800bc51 	.word	0x0800bc51
 800bc38:	0800bc59 	.word	0x0800bc59
 800bc3c:	0800bc61 	.word	0x0800bc61
 800bc40:	0800bc69 	.word	0x0800bc69
 800bc44:	0800bc95 	.word	0x0800bc95
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4e:	e14a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc50:	2304      	movs	r3, #4
 800bc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc56:	e146      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc58:	2308      	movs	r3, #8
 800bc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc5e:	e142      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc60:	2310      	movs	r3, #16
 800bc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc66:	e13e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc68:	2320      	movs	r3, #32
 800bc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc6e:	e13a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc70:	cfff69f3 	.word	0xcfff69f3
 800bc74:	58000c00 	.word	0x58000c00
 800bc78:	11fff4ff 	.word	0x11fff4ff
 800bc7c:	40011000 	.word	0x40011000
 800bc80:	58024400 	.word	0x58024400
 800bc84:	40004400 	.word	0x40004400
 800bc88:	40004800 	.word	0x40004800
 800bc8c:	40004c00 	.word	0x40004c00
 800bc90:	40005000 	.word	0x40005000
 800bc94:	2340      	movs	r3, #64	; 0x40
 800bc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9a:	e124      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bc9c:	2380      	movs	r3, #128	; 0x80
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca2:	e120      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4acc      	ldr	r2, [pc, #816]	; (800bfdc <UART_SetConfig+0x698>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d176      	bne.n	800bd9c <UART_SetConfig+0x458>
 800bcae:	4bcc      	ldr	r3, [pc, #816]	; (800bfe0 <UART_SetConfig+0x69c>)
 800bcb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcb6:	2b28      	cmp	r3, #40	; 0x28
 800bcb8:	d86c      	bhi.n	800bd94 <UART_SetConfig+0x450>
 800bcba:	a201      	add	r2, pc, #4	; (adr r2, 800bcc0 <UART_SetConfig+0x37c>)
 800bcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc0:	0800bd65 	.word	0x0800bd65
 800bcc4:	0800bd95 	.word	0x0800bd95
 800bcc8:	0800bd95 	.word	0x0800bd95
 800bccc:	0800bd95 	.word	0x0800bd95
 800bcd0:	0800bd95 	.word	0x0800bd95
 800bcd4:	0800bd95 	.word	0x0800bd95
 800bcd8:	0800bd95 	.word	0x0800bd95
 800bcdc:	0800bd95 	.word	0x0800bd95
 800bce0:	0800bd6d 	.word	0x0800bd6d
 800bce4:	0800bd95 	.word	0x0800bd95
 800bce8:	0800bd95 	.word	0x0800bd95
 800bcec:	0800bd95 	.word	0x0800bd95
 800bcf0:	0800bd95 	.word	0x0800bd95
 800bcf4:	0800bd95 	.word	0x0800bd95
 800bcf8:	0800bd95 	.word	0x0800bd95
 800bcfc:	0800bd95 	.word	0x0800bd95
 800bd00:	0800bd75 	.word	0x0800bd75
 800bd04:	0800bd95 	.word	0x0800bd95
 800bd08:	0800bd95 	.word	0x0800bd95
 800bd0c:	0800bd95 	.word	0x0800bd95
 800bd10:	0800bd95 	.word	0x0800bd95
 800bd14:	0800bd95 	.word	0x0800bd95
 800bd18:	0800bd95 	.word	0x0800bd95
 800bd1c:	0800bd95 	.word	0x0800bd95
 800bd20:	0800bd7d 	.word	0x0800bd7d
 800bd24:	0800bd95 	.word	0x0800bd95
 800bd28:	0800bd95 	.word	0x0800bd95
 800bd2c:	0800bd95 	.word	0x0800bd95
 800bd30:	0800bd95 	.word	0x0800bd95
 800bd34:	0800bd95 	.word	0x0800bd95
 800bd38:	0800bd95 	.word	0x0800bd95
 800bd3c:	0800bd95 	.word	0x0800bd95
 800bd40:	0800bd85 	.word	0x0800bd85
 800bd44:	0800bd95 	.word	0x0800bd95
 800bd48:	0800bd95 	.word	0x0800bd95
 800bd4c:	0800bd95 	.word	0x0800bd95
 800bd50:	0800bd95 	.word	0x0800bd95
 800bd54:	0800bd95 	.word	0x0800bd95
 800bd58:	0800bd95 	.word	0x0800bd95
 800bd5c:	0800bd95 	.word	0x0800bd95
 800bd60:	0800bd8d 	.word	0x0800bd8d
 800bd64:	2301      	movs	r3, #1
 800bd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6a:	e0bc      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e0b8      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd74:	2308      	movs	r3, #8
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e0b4      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd7c:	2310      	movs	r3, #16
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e0b0      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd84:	2320      	movs	r3, #32
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e0ac      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd92:	e0a8      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd94:	2380      	movs	r3, #128	; 0x80
 800bd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9a:	e0a4      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a90      	ldr	r2, [pc, #576]	; (800bfe4 <UART_SetConfig+0x6a0>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d130      	bne.n	800be08 <UART_SetConfig+0x4c4>
 800bda6:	4b8e      	ldr	r3, [pc, #568]	; (800bfe0 <UART_SetConfig+0x69c>)
 800bda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdaa:	f003 0307 	and.w	r3, r3, #7
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d826      	bhi.n	800be00 <UART_SetConfig+0x4bc>
 800bdb2:	a201      	add	r2, pc, #4	; (adr r2, 800bdb8 <UART_SetConfig+0x474>)
 800bdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb8:	0800bdd1 	.word	0x0800bdd1
 800bdbc:	0800bdd9 	.word	0x0800bdd9
 800bdc0:	0800bde1 	.word	0x0800bde1
 800bdc4:	0800bde9 	.word	0x0800bde9
 800bdc8:	0800bdf1 	.word	0x0800bdf1
 800bdcc:	0800bdf9 	.word	0x0800bdf9
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd6:	e086      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bdd8:	2304      	movs	r3, #4
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdde:	e082      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bde0:	2308      	movs	r3, #8
 800bde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde6:	e07e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bde8:	2310      	movs	r3, #16
 800bdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdee:	e07a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bdf0:	2320      	movs	r3, #32
 800bdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf6:	e076      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bdf8:	2340      	movs	r3, #64	; 0x40
 800bdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfe:	e072      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be00:	2380      	movs	r3, #128	; 0x80
 800be02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be06:	e06e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a76      	ldr	r2, [pc, #472]	; (800bfe8 <UART_SetConfig+0x6a4>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d130      	bne.n	800be74 <UART_SetConfig+0x530>
 800be12:	4b73      	ldr	r3, [pc, #460]	; (800bfe0 <UART_SetConfig+0x69c>)
 800be14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be16:	f003 0307 	and.w	r3, r3, #7
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	d826      	bhi.n	800be6c <UART_SetConfig+0x528>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <UART_SetConfig+0x4e0>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800be3d 	.word	0x0800be3d
 800be28:	0800be45 	.word	0x0800be45
 800be2c:	0800be4d 	.word	0x0800be4d
 800be30:	0800be55 	.word	0x0800be55
 800be34:	0800be5d 	.word	0x0800be5d
 800be38:	0800be65 	.word	0x0800be65
 800be3c:	2300      	movs	r3, #0
 800be3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be42:	e050      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be44:	2304      	movs	r3, #4
 800be46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be4a:	e04c      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be4c:	2308      	movs	r3, #8
 800be4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be52:	e048      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be54:	2310      	movs	r3, #16
 800be56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be5a:	e044      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be5c:	2320      	movs	r3, #32
 800be5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be62:	e040      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be64:	2340      	movs	r3, #64	; 0x40
 800be66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be6a:	e03c      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be6c:	2380      	movs	r3, #128	; 0x80
 800be6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be72:	e038      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a5c      	ldr	r2, [pc, #368]	; (800bfec <UART_SetConfig+0x6a8>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d130      	bne.n	800bee0 <UART_SetConfig+0x59c>
 800be7e:	4b58      	ldr	r3, [pc, #352]	; (800bfe0 <UART_SetConfig+0x69c>)
 800be80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b05      	cmp	r3, #5
 800be88:	d826      	bhi.n	800bed8 <UART_SetConfig+0x594>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <UART_SetConfig+0x54c>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bea9 	.word	0x0800bea9
 800be94:	0800beb1 	.word	0x0800beb1
 800be98:	0800beb9 	.word	0x0800beb9
 800be9c:	0800bec1 	.word	0x0800bec1
 800bea0:	0800bec9 	.word	0x0800bec9
 800bea4:	0800bed1 	.word	0x0800bed1
 800bea8:	2302      	movs	r3, #2
 800beaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beae:	e01a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800beb0:	2304      	movs	r3, #4
 800beb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb6:	e016      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800beb8:	2308      	movs	r3, #8
 800beba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bebe:	e012      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bec0:	2310      	movs	r3, #16
 800bec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec6:	e00e      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bec8:	2320      	movs	r3, #32
 800beca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bece:	e00a      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bed0:	2340      	movs	r3, #64	; 0x40
 800bed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bed6:	e006      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bed8:	2380      	movs	r3, #128	; 0x80
 800beda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bede:	e002      	b.n	800bee6 <UART_SetConfig+0x5a2>
 800bee0:	2380      	movs	r3, #128	; 0x80
 800bee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a40      	ldr	r2, [pc, #256]	; (800bfec <UART_SetConfig+0x6a8>)
 800beec:	4293      	cmp	r3, r2
 800beee:	f040 80ef 	bne.w	800c0d0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bef6:	2b20      	cmp	r3, #32
 800bef8:	dc46      	bgt.n	800bf88 <UART_SetConfig+0x644>
 800befa:	2b02      	cmp	r3, #2
 800befc:	f2c0 8081 	blt.w	800c002 <UART_SetConfig+0x6be>
 800bf00:	3b02      	subs	r3, #2
 800bf02:	2b1e      	cmp	r3, #30
 800bf04:	d87d      	bhi.n	800c002 <UART_SetConfig+0x6be>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <UART_SetConfig+0x5c8>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf8f 	.word	0x0800bf8f
 800bf10:	0800c003 	.word	0x0800c003
 800bf14:	0800bf97 	.word	0x0800bf97
 800bf18:	0800c003 	.word	0x0800c003
 800bf1c:	0800c003 	.word	0x0800c003
 800bf20:	0800c003 	.word	0x0800c003
 800bf24:	0800bfa7 	.word	0x0800bfa7
 800bf28:	0800c003 	.word	0x0800c003
 800bf2c:	0800c003 	.word	0x0800c003
 800bf30:	0800c003 	.word	0x0800c003
 800bf34:	0800c003 	.word	0x0800c003
 800bf38:	0800c003 	.word	0x0800c003
 800bf3c:	0800c003 	.word	0x0800c003
 800bf40:	0800c003 	.word	0x0800c003
 800bf44:	0800bfb7 	.word	0x0800bfb7
 800bf48:	0800c003 	.word	0x0800c003
 800bf4c:	0800c003 	.word	0x0800c003
 800bf50:	0800c003 	.word	0x0800c003
 800bf54:	0800c003 	.word	0x0800c003
 800bf58:	0800c003 	.word	0x0800c003
 800bf5c:	0800c003 	.word	0x0800c003
 800bf60:	0800c003 	.word	0x0800c003
 800bf64:	0800c003 	.word	0x0800c003
 800bf68:	0800c003 	.word	0x0800c003
 800bf6c:	0800c003 	.word	0x0800c003
 800bf70:	0800c003 	.word	0x0800c003
 800bf74:	0800c003 	.word	0x0800c003
 800bf78:	0800c003 	.word	0x0800c003
 800bf7c:	0800c003 	.word	0x0800c003
 800bf80:	0800c003 	.word	0x0800c003
 800bf84:	0800bff5 	.word	0x0800bff5
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d036      	beq.n	800bffa <UART_SetConfig+0x6b6>
 800bf8c:	e039      	b.n	800c002 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf8e:	f7fd f879 	bl	8009084 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bf94:	e03b      	b.n	800c00e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf96:	f107 0314 	add.w	r3, r7, #20
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fd f888 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfa4:	e033      	b.n	800c00e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa6:	f107 0308 	add.w	r3, r7, #8
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fd f9d4 	bl	8009358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfb4:	e02b      	b.n	800c00e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfb6:	4b0a      	ldr	r3, [pc, #40]	; (800bfe0 <UART_SetConfig+0x69c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0320 	and.w	r3, r3, #32
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d009      	beq.n	800bfd6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfc2:	4b07      	ldr	r3, [pc, #28]	; (800bfe0 <UART_SetConfig+0x69c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	08db      	lsrs	r3, r3, #3
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	4a08      	ldr	r2, [pc, #32]	; (800bff0 <UART_SetConfig+0x6ac>)
 800bfce:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfd4:	e01b      	b.n	800c00e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bfd6:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <UART_SetConfig+0x6ac>)
 800bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfda:	e018      	b.n	800c00e <UART_SetConfig+0x6ca>
 800bfdc:	40011400 	.word	0x40011400
 800bfe0:	58024400 	.word	0x58024400
 800bfe4:	40007800 	.word	0x40007800
 800bfe8:	40007c00 	.word	0x40007c00
 800bfec:	58000c00 	.word	0x58000c00
 800bff0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bff4:	4bc4      	ldr	r3, [pc, #784]	; (800c308 <UART_SetConfig+0x9c4>)
 800bff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bff8:	e009      	b.n	800c00e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c000:	e005      	b.n	800c00e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c00c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 81da 	beq.w	800c3ca <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01a:	4abc      	ldr	r2, [pc, #752]	; (800c30c <UART_SetConfig+0x9c8>)
 800c01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c020:	461a      	mov	r2, r3
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	fbb3 f3f2 	udiv	r3, r3, r2
 800c028:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	4413      	add	r3, r2
 800c034:	6a3a      	ldr	r2, [r7, #32]
 800c036:	429a      	cmp	r2, r3
 800c038:	d305      	bcc.n	800c046 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c040:	6a3a      	ldr	r2, [r7, #32]
 800c042:	429a      	cmp	r2, r3
 800c044:	d903      	bls.n	800c04e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c04c:	e1bd      	b.n	800c3ca <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	4618      	mov	r0, r3
 800c052:	f04f 0100 	mov.w	r1, #0
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05a:	4aac      	ldr	r2, [pc, #688]	; (800c30c <UART_SetConfig+0x9c8>)
 800c05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c060:	b29a      	uxth	r2, r3
 800c062:	f04f 0300 	mov.w	r3, #0
 800c066:	f7f4 fb5f 	bl	8000728 <__aeabi_uldivmod>
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4610      	mov	r0, r2
 800c070:	4619      	mov	r1, r3
 800c072:	f04f 0200 	mov.w	r2, #0
 800c076:	f04f 0300 	mov.w	r3, #0
 800c07a:	020b      	lsls	r3, r1, #8
 800c07c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c080:	0202      	lsls	r2, r0, #8
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	6849      	ldr	r1, [r1, #4]
 800c086:	0849      	lsrs	r1, r1, #1
 800c088:	4608      	mov	r0, r1
 800c08a:	f04f 0100 	mov.w	r1, #0
 800c08e:	1814      	adds	r4, r2, r0
 800c090:	eb43 0501 	adc.w	r5, r3, r1
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	461a      	mov	r2, r3
 800c09a:	f04f 0300 	mov.w	r3, #0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fb41 	bl	8000728 <__aeabi_uldivmod>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0b4:	d308      	bcc.n	800c0c8 <UART_SetConfig+0x784>
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0bc:	d204      	bcs.n	800c0c8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0c4:	60da      	str	r2, [r3, #12]
 800c0c6:	e180      	b.n	800c3ca <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0ce:	e17c      	b.n	800c3ca <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	69db      	ldr	r3, [r3, #28]
 800c0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0d8:	f040 80bf 	bne.w	800c25a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c0dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0e0:	2b20      	cmp	r3, #32
 800c0e2:	dc49      	bgt.n	800c178 <UART_SetConfig+0x834>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	db7c      	blt.n	800c1e2 <UART_SetConfig+0x89e>
 800c0e8:	2b20      	cmp	r3, #32
 800c0ea:	d87a      	bhi.n	800c1e2 <UART_SetConfig+0x89e>
 800c0ec:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <UART_SetConfig+0x7b0>)
 800c0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f2:	bf00      	nop
 800c0f4:	0800c17f 	.word	0x0800c17f
 800c0f8:	0800c187 	.word	0x0800c187
 800c0fc:	0800c1e3 	.word	0x0800c1e3
 800c100:	0800c1e3 	.word	0x0800c1e3
 800c104:	0800c18f 	.word	0x0800c18f
 800c108:	0800c1e3 	.word	0x0800c1e3
 800c10c:	0800c1e3 	.word	0x0800c1e3
 800c110:	0800c1e3 	.word	0x0800c1e3
 800c114:	0800c19f 	.word	0x0800c19f
 800c118:	0800c1e3 	.word	0x0800c1e3
 800c11c:	0800c1e3 	.word	0x0800c1e3
 800c120:	0800c1e3 	.word	0x0800c1e3
 800c124:	0800c1e3 	.word	0x0800c1e3
 800c128:	0800c1e3 	.word	0x0800c1e3
 800c12c:	0800c1e3 	.word	0x0800c1e3
 800c130:	0800c1e3 	.word	0x0800c1e3
 800c134:	0800c1af 	.word	0x0800c1af
 800c138:	0800c1e3 	.word	0x0800c1e3
 800c13c:	0800c1e3 	.word	0x0800c1e3
 800c140:	0800c1e3 	.word	0x0800c1e3
 800c144:	0800c1e3 	.word	0x0800c1e3
 800c148:	0800c1e3 	.word	0x0800c1e3
 800c14c:	0800c1e3 	.word	0x0800c1e3
 800c150:	0800c1e3 	.word	0x0800c1e3
 800c154:	0800c1e3 	.word	0x0800c1e3
 800c158:	0800c1e3 	.word	0x0800c1e3
 800c15c:	0800c1e3 	.word	0x0800c1e3
 800c160:	0800c1e3 	.word	0x0800c1e3
 800c164:	0800c1e3 	.word	0x0800c1e3
 800c168:	0800c1e3 	.word	0x0800c1e3
 800c16c:	0800c1e3 	.word	0x0800c1e3
 800c170:	0800c1e3 	.word	0x0800c1e3
 800c174:	0800c1d5 	.word	0x0800c1d5
 800c178:	2b40      	cmp	r3, #64	; 0x40
 800c17a:	d02e      	beq.n	800c1da <UART_SetConfig+0x896>
 800c17c:	e031      	b.n	800c1e2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c17e:	f7fc f815 	bl	80081ac <HAL_RCC_GetPCLK1Freq>
 800c182:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c184:	e033      	b.n	800c1ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c186:	f7fc f827 	bl	80081d8 <HAL_RCC_GetPCLK2Freq>
 800c18a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c18c:	e02f      	b.n	800c1ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c18e:	f107 0314 	add.w	r3, r7, #20
 800c192:	4618      	mov	r0, r3
 800c194:	f7fc ff8c 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c19c:	e027      	b.n	800c1ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c19e:	f107 0308 	add.w	r3, r7, #8
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fd f8d8 	bl	8009358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ac:	e01f      	b.n	800c1ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ae:	4b58      	ldr	r3, [pc, #352]	; (800c310 <UART_SetConfig+0x9cc>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0320 	and.w	r3, r3, #32
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d009      	beq.n	800c1ce <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1ba:	4b55      	ldr	r3, [pc, #340]	; (800c310 <UART_SetConfig+0x9cc>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	08db      	lsrs	r3, r3, #3
 800c1c0:	f003 0303 	and.w	r3, r3, #3
 800c1c4:	4a53      	ldr	r2, [pc, #332]	; (800c314 <UART_SetConfig+0x9d0>)
 800c1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1cc:	e00f      	b.n	800c1ee <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c1ce:	4b51      	ldr	r3, [pc, #324]	; (800c314 <UART_SetConfig+0x9d0>)
 800c1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1d2:	e00c      	b.n	800c1ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1d4:	4b4c      	ldr	r3, [pc, #304]	; (800c308 <UART_SetConfig+0x9c4>)
 800c1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1d8:	e009      	b.n	800c1ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1e0:	e005      	b.n	800c1ee <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c1ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 80ea 	beq.w	800c3ca <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fa:	4a44      	ldr	r2, [pc, #272]	; (800c30c <UART_SetConfig+0x9c8>)
 800c1fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c200:	461a      	mov	r2, r3
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	fbb3 f3f2 	udiv	r3, r3, r2
 800c208:	005a      	lsls	r2, r3, #1
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	085b      	lsrs	r3, r3, #1
 800c210:	441a      	add	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	fbb2 f3f3 	udiv	r3, r2, r3
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	2b0f      	cmp	r3, #15
 800c222:	d916      	bls.n	800c252 <UART_SetConfig+0x90e>
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c22a:	d212      	bcs.n	800c252 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	b29b      	uxth	r3, r3
 800c230:	f023 030f 	bic.w	r3, r3, #15
 800c234:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	085b      	lsrs	r3, r3, #1
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	f003 0307 	and.w	r3, r3, #7
 800c240:	b29a      	uxth	r2, r3
 800c242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c244:	4313      	orrs	r3, r2
 800c246:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c24e:	60da      	str	r2, [r3, #12]
 800c250:	e0bb      	b.n	800c3ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c258:	e0b7      	b.n	800c3ca <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c25a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c25e:	2b20      	cmp	r3, #32
 800c260:	dc4a      	bgt.n	800c2f8 <UART_SetConfig+0x9b4>
 800c262:	2b00      	cmp	r3, #0
 800c264:	f2c0 8086 	blt.w	800c374 <UART_SetConfig+0xa30>
 800c268:	2b20      	cmp	r3, #32
 800c26a:	f200 8083 	bhi.w	800c374 <UART_SetConfig+0xa30>
 800c26e:	a201      	add	r2, pc, #4	; (adr r2, 800c274 <UART_SetConfig+0x930>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c2ff 	.word	0x0800c2ff
 800c278:	0800c319 	.word	0x0800c319
 800c27c:	0800c375 	.word	0x0800c375
 800c280:	0800c375 	.word	0x0800c375
 800c284:	0800c321 	.word	0x0800c321
 800c288:	0800c375 	.word	0x0800c375
 800c28c:	0800c375 	.word	0x0800c375
 800c290:	0800c375 	.word	0x0800c375
 800c294:	0800c331 	.word	0x0800c331
 800c298:	0800c375 	.word	0x0800c375
 800c29c:	0800c375 	.word	0x0800c375
 800c2a0:	0800c375 	.word	0x0800c375
 800c2a4:	0800c375 	.word	0x0800c375
 800c2a8:	0800c375 	.word	0x0800c375
 800c2ac:	0800c375 	.word	0x0800c375
 800c2b0:	0800c375 	.word	0x0800c375
 800c2b4:	0800c341 	.word	0x0800c341
 800c2b8:	0800c375 	.word	0x0800c375
 800c2bc:	0800c375 	.word	0x0800c375
 800c2c0:	0800c375 	.word	0x0800c375
 800c2c4:	0800c375 	.word	0x0800c375
 800c2c8:	0800c375 	.word	0x0800c375
 800c2cc:	0800c375 	.word	0x0800c375
 800c2d0:	0800c375 	.word	0x0800c375
 800c2d4:	0800c375 	.word	0x0800c375
 800c2d8:	0800c375 	.word	0x0800c375
 800c2dc:	0800c375 	.word	0x0800c375
 800c2e0:	0800c375 	.word	0x0800c375
 800c2e4:	0800c375 	.word	0x0800c375
 800c2e8:	0800c375 	.word	0x0800c375
 800c2ec:	0800c375 	.word	0x0800c375
 800c2f0:	0800c375 	.word	0x0800c375
 800c2f4:	0800c367 	.word	0x0800c367
 800c2f8:	2b40      	cmp	r3, #64	; 0x40
 800c2fa:	d037      	beq.n	800c36c <UART_SetConfig+0xa28>
 800c2fc:	e03a      	b.n	800c374 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2fe:	f7fb ff55 	bl	80081ac <HAL_RCC_GetPCLK1Freq>
 800c302:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c304:	e03c      	b.n	800c380 <UART_SetConfig+0xa3c>
 800c306:	bf00      	nop
 800c308:	003d0900 	.word	0x003d0900
 800c30c:	08019534 	.word	0x08019534
 800c310:	58024400 	.word	0x58024400
 800c314:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c318:	f7fb ff5e 	bl	80081d8 <HAL_RCC_GetPCLK2Freq>
 800c31c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c31e:	e02f      	b.n	800c380 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c320:	f107 0314 	add.w	r3, r7, #20
 800c324:	4618      	mov	r0, r3
 800c326:	f7fc fec3 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c32e:	e027      	b.n	800c380 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c330:	f107 0308 	add.w	r3, r7, #8
 800c334:	4618      	mov	r0, r3
 800c336:	f7fd f80f 	bl	8009358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c33e:	e01f      	b.n	800c380 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c340:	4b2c      	ldr	r3, [pc, #176]	; (800c3f4 <UART_SetConfig+0xab0>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0320 	and.w	r3, r3, #32
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d009      	beq.n	800c360 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c34c:	4b29      	ldr	r3, [pc, #164]	; (800c3f4 <UART_SetConfig+0xab0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	08db      	lsrs	r3, r3, #3
 800c352:	f003 0303 	and.w	r3, r3, #3
 800c356:	4a28      	ldr	r2, [pc, #160]	; (800c3f8 <UART_SetConfig+0xab4>)
 800c358:	fa22 f303 	lsr.w	r3, r2, r3
 800c35c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c35e:	e00f      	b.n	800c380 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c360:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <UART_SetConfig+0xab4>)
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c364:	e00c      	b.n	800c380 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c366:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <UART_SetConfig+0xab8>)
 800c368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c36a:	e009      	b.n	800c380 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c36c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c372:	e005      	b.n	800c380 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c374:	2300      	movs	r3, #0
 800c376:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c37e:	bf00      	nop
    }

    if (pclk != 0U)
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d021      	beq.n	800c3ca <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38a:	4a1d      	ldr	r2, [pc, #116]	; (800c400 <UART_SetConfig+0xabc>)
 800c38c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c390:	461a      	mov	r2, r3
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	fbb3 f2f2 	udiv	r2, r3, r2
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	085b      	lsrs	r3, r3, #1
 800c39e:	441a      	add	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	2b0f      	cmp	r3, #15
 800c3b0:	d908      	bls.n	800c3c4 <UART_SetConfig+0xa80>
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b8:	d204      	bcs.n	800c3c4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	e002      	b.n	800c3ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c3e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3738      	adds	r7, #56	; 0x38
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	58024400 	.word	0x58024400
 800c3f8:	03d09000 	.word	0x03d09000
 800c3fc:	003d0900 	.word	0x003d0900
 800c400:	08019534 	.word	0x08019534

0800c404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00a      	beq.n	800c472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	f003 0308 	and.w	r3, r3, #8
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c498:	f003 0310 	and.w	r3, r3, #16
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	f003 0320 	and.w	r3, r3, #32
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00a      	beq.n	800c4d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	430a      	orrs	r2, r1
 800c4d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01a      	beq.n	800c51a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c502:	d10a      	bne.n	800c51a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	430a      	orrs	r2, r1
 800c518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	605a      	str	r2, [r3, #4]
  }
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af02      	add	r7, sp, #8
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c558:	f7f6 f8a8 	bl	80026ac <HAL_GetTick>
 800c55c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0308 	and.w	r3, r3, #8
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d10e      	bne.n	800c58a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c56c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f82f 	bl	800c5de <UART_WaitOnFlagUntilTimeout>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c586:	2303      	movs	r3, #3
 800c588:	e025      	b.n	800c5d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0304 	and.w	r3, r3, #4
 800c594:	2b04      	cmp	r3, #4
 800c596:	d10e      	bne.n	800c5b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f819 	bl	800c5de <UART_WaitOnFlagUntilTimeout>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e00f      	b.n	800c5d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2220      	movs	r2, #32
 800c5ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	60f8      	str	r0, [r7, #12]
 800c5e6:	60b9      	str	r1, [r7, #8]
 800c5e8:	603b      	str	r3, [r7, #0]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5ee:	e062      	b.n	800c6b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d05e      	beq.n	800c6b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5f8:	f7f6 f858 	bl	80026ac <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	69ba      	ldr	r2, [r7, #24]
 800c604:	429a      	cmp	r2, r3
 800c606:	d302      	bcc.n	800c60e <UART_WaitOnFlagUntilTimeout+0x30>
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d11d      	bne.n	800c64a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c61c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	689a      	ldr	r2, [r3, #8]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0201 	bic.w	r2, r2, #1
 800c62c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2220      	movs	r2, #32
 800c632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2220      	movs	r2, #32
 800c63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e045      	b.n	800c6d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	2b00      	cmp	r3, #0
 800c656:	d02e      	beq.n	800c6b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	69db      	ldr	r3, [r3, #28]
 800c65e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c666:	d126      	bne.n	800c6b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c680:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f022 0201 	bic.w	r2, r2, #1
 800c690:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2220      	movs	r2, #32
 800c696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	e00f      	b.n	800c6d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	69da      	ldr	r2, [r3, #28]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	4013      	ands	r3, r2
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	bf0c      	ite	eq
 800c6c6:	2301      	moveq	r3, #1
 800c6c8:	2300      	movne	r3, #0
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d08d      	beq.n	800c5f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b085      	sub	sp, #20
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e027      	b.n	800c744 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2224      	movs	r2, #36	; 0x24
 800c700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0201 	bic.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c722:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2220      	movs	r2, #32
 800c736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c760:	2b01      	cmp	r3, #1
 800c762:	d101      	bne.n	800c768 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c764:	2302      	movs	r3, #2
 800c766:	e02d      	b.n	800c7c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2224      	movs	r2, #36	; 0x24
 800c774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f022 0201 	bic.w	r2, r2, #1
 800c78e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f84f 	bl	800c848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2220      	movs	r2, #32
 800c7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d101      	bne.n	800c7e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	e02d      	b.n	800c840 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2224      	movs	r2, #36	; 0x24
 800c7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 0201 	bic.w	r2, r2, #1
 800c80a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	430a      	orrs	r2, r1
 800c81e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f811 	bl	800c848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2220      	movs	r2, #32
 800c832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c854:	2b00      	cmp	r3, #0
 800c856:	d108      	bne.n	800c86a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c868:	e031      	b.n	800c8ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c86a:	2310      	movs	r3, #16
 800c86c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c86e:	2310      	movs	r3, #16
 800c870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	0e5b      	lsrs	r3, r3, #25
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 0307 	and.w	r3, r3, #7
 800c880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	0f5b      	lsrs	r3, r3, #29
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0307 	and.w	r3, r3, #7
 800c890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	7b3a      	ldrb	r2, [r7, #12]
 800c896:	4911      	ldr	r1, [pc, #68]	; (800c8dc <UARTEx_SetNbDataToProcess+0x94>)
 800c898:	5c8a      	ldrb	r2, [r1, r2]
 800c89a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c89e:	7b3a      	ldrb	r2, [r7, #12]
 800c8a0:	490f      	ldr	r1, [pc, #60]	; (800c8e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c8a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	7b7a      	ldrb	r2, [r7, #13]
 800c8b4:	4909      	ldr	r1, [pc, #36]	; (800c8dc <UARTEx_SetNbDataToProcess+0x94>)
 800c8b6:	5c8a      	ldrb	r2, [r1, r2]
 800c8b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8bc:	7b7a      	ldrb	r2, [r7, #13]
 800c8be:	4908      	ldr	r1, [pc, #32]	; (800c8e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c8c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8ce:	bf00      	nop
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	0801954c 	.word	0x0801954c
 800c8e0:	08019554 	.word	0x08019554

0800c8e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b084      	sub	sp, #16
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	f107 001c 	add.w	r0, r7, #28
 800c8f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d120      	bne.n	800c93e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68da      	ldr	r2, [r3, #12]
 800c90c:	4b2a      	ldr	r3, [pc, #168]	; (800c9b8 <USB_CoreInit+0xd4>)
 800c90e:	4013      	ands	r3, r2
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c922:	2b01      	cmp	r3, #1
 800c924:	d105      	bne.n	800c932 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f990 	bl	800cc58 <USB_CoreReset>
 800c938:	4603      	mov	r3, r0
 800c93a:	73fb      	strb	r3, [r7, #15]
 800c93c:	e01a      	b.n	800c974 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f984 	bl	800cc58 <USB_CoreReset>
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	d106      	bne.n	800c968 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	639a      	str	r2, [r3, #56]	; 0x38
 800c966:	e005      	b.n	800c974 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	2b01      	cmp	r3, #1
 800c978:	d116      	bne.n	800c9a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c97e:	b29a      	uxth	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c988:	4b0c      	ldr	r3, [pc, #48]	; (800c9bc <USB_CoreInit+0xd8>)
 800c98a:	4313      	orrs	r3, r2
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	f043 0206 	orr.w	r2, r3, #6
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f043 0220 	orr.w	r2, r3, #32
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9b4:	b004      	add	sp, #16
 800c9b6:	4770      	bx	lr
 800c9b8:	ffbdffbf 	.word	0xffbdffbf
 800c9bc:	03ee0000 	.word	0x03ee0000

0800c9c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	f043 0201 	orr.w	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b083      	sub	sp, #12
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	f023 0201 	bic.w	r2, r3, #1
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d106      	bne.n	800ca30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	60da      	str	r2, [r3, #12]
 800ca2e:	e00b      	b.n	800ca48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca30:	78fb      	ldrb	r3, [r7, #3]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60da      	str	r2, [r3, #12]
 800ca42:	e001      	b.n	800ca48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e003      	b.n	800ca50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca48:	2032      	movs	r0, #50	; 0x32
 800ca4a:	f7f5 fe3b 	bl	80026c4 <HAL_Delay>

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	019b      	lsls	r3, r3, #6
 800ca6a:	f043 0220 	orr.w	r2, r3, #32
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3301      	adds	r3, #1
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <USB_FlushTxFifo+0x48>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d901      	bls.n	800ca84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca80:	2303      	movs	r3, #3
 800ca82:	e006      	b.n	800ca92 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	f003 0320 	and.w	r3, r3, #32
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d0f0      	beq.n	800ca72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	00030d40 	.word	0x00030d40

0800caa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800caac:	2300      	movs	r3, #0
 800caae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2210      	movs	r2, #16
 800cab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4a09      	ldr	r2, [pc, #36]	; (800cae4 <USB_FlushRxFifo+0x40>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d901      	bls.n	800cac8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cac4:	2303      	movs	r3, #3
 800cac6:	e006      	b.n	800cad6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	f003 0310 	and.w	r3, r3, #16
 800cad0:	2b10      	cmp	r3, #16
 800cad2:	d0f0      	beq.n	800cab6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	00030d40 	.word	0x00030d40

0800cae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cae8:	b480      	push	{r7}
 800caea:	b089      	sub	sp, #36	; 0x24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4611      	mov	r1, r2
 800caf4:	461a      	mov	r2, r3
 800caf6:	460b      	mov	r3, r1
 800caf8:	71fb      	strb	r3, [r7, #7]
 800cafa:	4613      	mov	r3, r2
 800cafc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cb06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d123      	bne.n	800cb56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb0e:	88bb      	ldrh	r3, [r7, #4]
 800cb10:	3303      	adds	r3, #3
 800cb12:	089b      	lsrs	r3, r3, #2
 800cb14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb16:	2300      	movs	r3, #0
 800cb18:	61bb      	str	r3, [r7, #24]
 800cb1a:	e018      	b.n	800cb4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	031a      	lsls	r2, r3, #12
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb28:	461a      	mov	r2, r3
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	3301      	adds	r3, #1
 800cb34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	3301      	adds	r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d3e2      	bcc.n	800cb1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3724      	adds	r7, #36	; 0x24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b08b      	sub	sp, #44	; 0x2c
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb7a:	88fb      	ldrh	r3, [r7, #6]
 800cb7c:	089b      	lsrs	r3, r3, #2
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb82:	88fb      	ldrh	r3, [r7, #6]
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	623b      	str	r3, [r7, #32]
 800cb8e:	e014      	b.n	800cbba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	3301      	adds	r3, #1
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	3301      	adds	r3, #1
 800cba6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	3301      	adds	r3, #1
 800cbac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	623b      	str	r3, [r7, #32]
 800cbba:	6a3a      	ldr	r2, [r7, #32]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d3e6      	bcc.n	800cb90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cbc2:	8bfb      	ldrh	r3, [r7, #30]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01e      	beq.n	800cc06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	f107 0310 	add.w	r3, r7, #16
 800cbd8:	6812      	ldr	r2, [r2, #0]
 800cbda:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	701a      	strb	r2, [r3, #0]
      i++;
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cbfa:	8bfb      	ldrh	r3, [r7, #30]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cc00:	8bfb      	ldrh	r3, [r7, #30]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1ea      	bne.n	800cbdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	372c      	adds	r7, #44	; 0x2c
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	4013      	ands	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	f003 0301 	and.w	r3, r3, #1
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3301      	adds	r3, #1
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4a13      	ldr	r2, [pc, #76]	; (800ccbc <USB_CoreReset+0x64>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e01b      	b.n	800ccae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	daf2      	bge.n	800cc64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	f043 0201 	orr.w	r2, r3, #1
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3301      	adds	r3, #1
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <USB_CoreReset+0x64>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d901      	bls.n	800cca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e006      	b.n	800ccae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d0f0      	beq.n	800cc8e <USB_CoreReset+0x36>

  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	00030d40 	.word	0x00030d40

0800ccc0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	f107 001c 	add.w	r0, r7, #28
 800ccce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccdc:	461a      	mov	r2, r3
 800ccde:	2300      	movs	r3, #0
 800cce0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d018      	beq.n	800cd38 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d10a      	bne.n	800cd22 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd1a:	f043 0304 	orr.w	r3, r3, #4
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	e014      	b.n	800cd4c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd30:	f023 0304 	bic.w	r3, r3, #4
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	e009      	b.n	800cd4c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd46:	f023 0304 	bic.w	r3, r3, #4
 800cd4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cd4c:	2110      	movs	r1, #16
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7ff fe82 	bl	800ca58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff fea5 	bl	800caa4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	e015      	b.n	800cd8c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	015a      	lsls	r2, r3, #5
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	4413      	add	r3, r2
 800cd68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd72:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd80:	461a      	mov	r2, r3
 800cd82:	2300      	movs	r3, #0
 800cd84:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	6a3b      	ldr	r3, [r7, #32]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d3e5      	bcc.n	800cd60 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cd94:	2101      	movs	r1, #1
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f882 	bl	800cea0 <USB_DriveVbus>

  HAL_Delay(200U);
 800cd9c:	20c8      	movs	r0, #200	; 0xc8
 800cd9e:	f7f5 fc91 	bl	80026c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdc2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a14      	ldr	r2, [pc, #80]	; (800ce18 <USB_HostInit+0x158>)
 800cdc8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a13      	ldr	r2, [pc, #76]	; (800ce1c <USB_HostInit+0x15c>)
 800cdce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cdd2:	e009      	b.n	800cde8 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2280      	movs	r2, #128	; 0x80
 800cdd8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a10      	ldr	r2, [pc, #64]	; (800ce20 <USB_HostInit+0x160>)
 800cdde:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a10      	ldr	r2, [pc, #64]	; (800ce24 <USB_HostInit+0x164>)
 800cde4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d105      	bne.n	800cdfa <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	f043 0210 	orr.w	r2, r3, #16
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	699a      	ldr	r2, [r3, #24]
 800cdfe:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <USB_HostInit+0x168>)
 800ce00:	4313      	orrs	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce12:	b004      	add	sp, #16
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	01000200 	.word	0x01000200
 800ce1c:	00e00300 	.word	0x00e00300
 800ce20:	00600080 	.word	0x00600080
 800ce24:	004000e0 	.word	0x004000e0
 800ce28:	a3200008 	.word	0xa3200008

0800ce2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	78fb      	ldrb	r3, [r7, #3]
 800ce5a:	f003 0303 	and.w	r3, r3, #3
 800ce5e:	68f9      	ldr	r1, [r7, #12]
 800ce60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ce64:	4313      	orrs	r3, r2
 800ce66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ce68:	78fb      	ldrb	r3, [r7, #3]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d107      	bne.n	800ce7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce74:	461a      	mov	r2, r3
 800ce76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ce7a:	6053      	str	r3, [r2, #4]
 800ce7c:	e009      	b.n	800ce92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d106      	bne.n	800ce92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ce90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cec4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d109      	bne.n	800cee4 <USB_DriveVbus+0x44>
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d106      	bne.n	800cee4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cee2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ceea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceee:	d109      	bne.n	800cf04 <USB_DriveVbus+0x64>
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cefe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf02:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b085      	sub	sp, #20
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	0c5b      	lsrs	r3, r3, #17
 800cf30:	f003 0303 	and.w	r3, r3, #3
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	b29b      	uxth	r3, r3
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
	...

0800cf64 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	4611      	mov	r1, r2
 800cf70:	461a      	mov	r2, r3
 800cf72:	4603      	mov	r3, r0
 800cf74:	70fb      	strb	r3, [r7, #3]
 800cf76:	460b      	mov	r3, r1
 800cf78:	70bb      	strb	r3, [r7, #2]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cf86:	78fb      	ldrb	r3, [r7, #3]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf92:	461a      	mov	r2, r3
 800cf94:	f04f 33ff 	mov.w	r3, #4294967295
 800cf98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cf9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d87e      	bhi.n	800d0a0 <USB_HC_Init+0x13c>
 800cfa2:	a201      	add	r2, pc, #4	; (adr r2, 800cfa8 <USB_HC_Init+0x44>)
 800cfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa8:	0800cfb9 	.word	0x0800cfb9
 800cfac:	0800d063 	.word	0x0800d063
 800cfb0:	0800cfb9 	.word	0x0800cfb9
 800cfb4:	0800d025 	.word	0x0800d025
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	f240 439d 	movw	r3, #1181	; 0x49d
 800cfca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cfcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	da10      	bge.n	800cff6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	78fa      	ldrb	r2, [r7, #3]
 800cfe4:	0151      	lsls	r1, r2, #5
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	440a      	add	r2, r1
 800cfea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cff2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cff4:	e057      	b.n	800d0a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d051      	beq.n	800d0a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d002:	78fb      	ldrb	r3, [r7, #3]
 800d004:	015a      	lsls	r2, r3, #5
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	4413      	add	r3, r2
 800d00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	78fa      	ldrb	r2, [r7, #3]
 800d012:	0151      	lsls	r1, r2, #5
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	440a      	add	r2, r1
 800d018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d01c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d020:	60d3      	str	r3, [r2, #12]
      break;
 800d022:	e040      	b.n	800d0a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	015a      	lsls	r2, r3, #5
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	4413      	add	r3, r2
 800d02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d030:	461a      	mov	r2, r3
 800d032:	f240 639d 	movw	r3, #1693	; 0x69d
 800d036:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	da34      	bge.n	800d0aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d040:	78fb      	ldrb	r3, [r7, #3]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	4413      	add	r3, r2
 800d048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	78fa      	ldrb	r2, [r7, #3]
 800d050:	0151      	lsls	r1, r2, #5
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	440a      	add	r2, r1
 800d056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d05a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d05e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d060:	e023      	b.n	800d0aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d062:	78fb      	ldrb	r3, [r7, #3]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d06e:	461a      	mov	r2, r3
 800d070:	f240 2325 	movw	r3, #549	; 0x225
 800d074:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d076:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	da17      	bge.n	800d0ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d07e:	78fb      	ldrb	r3, [r7, #3]
 800d080:	015a      	lsls	r2, r3, #5
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	4413      	add	r3, r2
 800d086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	78fa      	ldrb	r2, [r7, #3]
 800d08e:	0151      	lsls	r1, r2, #5
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	440a      	add	r2, r1
 800d094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d098:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d09c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d09e:	e006      	b.n	800d0ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	77fb      	strb	r3, [r7, #31]
      break;
 800d0a4:	e004      	b.n	800d0b0 <USB_HC_Init+0x14c>
      break;
 800d0a6:	bf00      	nop
 800d0a8:	e002      	b.n	800d0b0 <USB_HC_Init+0x14c>
      break;
 800d0aa:	bf00      	nop
 800d0ac:	e000      	b.n	800d0b0 <USB_HC_Init+0x14c>
      break;
 800d0ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0b6:	699a      	ldr	r2, [r3, #24]
 800d0b8:	78fb      	ldrb	r3, [r7, #3]
 800d0ba:	f003 030f 	and.w	r3, r3, #15
 800d0be:	2101      	movs	r1, #1
 800d0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c4:	6939      	ldr	r1, [r7, #16]
 800d0c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d0da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da03      	bge.n	800d0ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0e6:	61bb      	str	r3, [r7, #24]
 800d0e8:	e001      	b.n	800d0ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7ff ff0f 	bl	800cf12 <USB_GetHostSpeed>
 800d0f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d0f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d106      	bne.n	800d10c <USB_HC_Init+0x1a8>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b02      	cmp	r3, #2
 800d102:	d003      	beq.n	800d10c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d108:	617b      	str	r3, [r7, #20]
 800d10a:	e001      	b.n	800d110 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d110:	787b      	ldrb	r3, [r7, #1]
 800d112:	059b      	lsls	r3, r3, #22
 800d114:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d118:	78bb      	ldrb	r3, [r7, #2]
 800d11a:	02db      	lsls	r3, r3, #11
 800d11c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d120:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d122:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d126:	049b      	lsls	r3, r3, #18
 800d128:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d12c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d12e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d130:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d134:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d13a:	78fb      	ldrb	r3, [r7, #3]
 800d13c:	0159      	lsls	r1, r3, #5
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	440b      	add	r3, r1
 800d142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d146:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d14c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d14e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d152:	2b03      	cmp	r3, #3
 800d154:	d10f      	bne.n	800d176 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	78fa      	ldrb	r2, [r7, #3]
 800d166:	0151      	lsls	r1, r2, #5
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	440a      	add	r2, r1
 800d16c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d174:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d176:	7ffb      	ldrb	r3, [r7, #31]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08c      	sub	sp, #48	; 0x30
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d19c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d02d      	beq.n	800d206 <USB_HC_StartXfer+0x86>
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	791b      	ldrb	r3, [r3, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d129      	bne.n	800d206 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d117      	bne.n	800d1e8 <USB_HC_StartXfer+0x68>
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	79db      	ldrb	r3, [r3, #7]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <USB_HC_StartXfer+0x48>
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	79db      	ldrb	r3, [r3, #7]
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d10f      	bne.n	800d1e8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	69fa      	ldr	r2, [r7, #28]
 800d1d8:	0151      	lsls	r1, r2, #5
 800d1da:	6a3a      	ldr	r2, [r7, #32]
 800d1dc:	440a      	add	r2, r1
 800d1de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1e6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d1e8:	79fb      	ldrb	r3, [r7, #7]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10b      	bne.n	800d206 <USB_HC_StartXfer+0x86>
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	795b      	ldrb	r3, [r3, #5]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d107      	bne.n	800d206 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	785b      	ldrb	r3, [r3, #1]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f000 fa2f 	bl	800d660 <USB_DoPing>
      return HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	e0f8      	b.n	800d3f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d018      	beq.n	800d240 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	695b      	ldr	r3, [r3, #20]
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	8912      	ldrh	r2, [r2, #8]
 800d216:	4413      	add	r3, r2
 800d218:	3b01      	subs	r3, #1
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	8912      	ldrh	r2, [r2, #8]
 800d21e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d222:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d224:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d226:	8b7b      	ldrh	r3, [r7, #26]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d90b      	bls.n	800d244 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d22c:	8b7b      	ldrh	r3, [r7, #26]
 800d22e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	8912      	ldrh	r2, [r2, #8]
 800d236:	fb02 f203 	mul.w	r2, r2, r3
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	611a      	str	r2, [r3, #16]
 800d23e:	e001      	b.n	800d244 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d240:	2301      	movs	r3, #1
 800d242:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	78db      	ldrb	r3, [r3, #3]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d007      	beq.n	800d25c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d24c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	8912      	ldrh	r2, [r2, #8]
 800d252:	fb02 f203 	mul.w	r2, r2, r3
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	611a      	str	r2, [r3, #16]
 800d25a:	e003      	b.n	800d264 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	695a      	ldr	r2, [r3, #20]
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d26c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d26e:	04d9      	lsls	r1, r3, #19
 800d270:	4b63      	ldr	r3, [pc, #396]	; (800d400 <USB_HC_StartXfer+0x280>)
 800d272:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d274:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	7a9b      	ldrb	r3, [r3, #10]
 800d27a:	075b      	lsls	r3, r3, #29
 800d27c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d280:	69f9      	ldr	r1, [r7, #28]
 800d282:	0148      	lsls	r0, r1, #5
 800d284:	6a39      	ldr	r1, [r7, #32]
 800d286:	4401      	add	r1, r0
 800d288:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d28c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d28e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d009      	beq.n	800d2aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	68d9      	ldr	r1, [r3, #12]
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	015a      	lsls	r2, r3, #5
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2a6:	460a      	mov	r2, r1
 800d2a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bf0c      	ite	eq
 800d2ba:	2301      	moveq	r3, #1
 800d2bc:	2300      	movne	r3, #0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	69fa      	ldr	r2, [r7, #28]
 800d2d2:	0151      	lsls	r1, r2, #5
 800d2d4:	6a3a      	ldr	r2, [r7, #32]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d2e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	7e7b      	ldrb	r3, [r7, #25]
 800d2f2:	075b      	lsls	r3, r3, #29
 800d2f4:	69f9      	ldr	r1, [r7, #28]
 800d2f6:	0148      	lsls	r0, r1, #5
 800d2f8:	6a39      	ldr	r1, [r7, #32]
 800d2fa:	4401      	add	r1, r0
 800d2fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d300:	4313      	orrs	r3, r2
 800d302:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d31a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	78db      	ldrb	r3, [r3, #3]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d004      	beq.n	800d32e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d32a:	613b      	str	r3, [r7, #16]
 800d32c:	e003      	b.n	800d336 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d334:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d33c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	015a      	lsls	r2, r3, #5
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	4413      	add	r3, r2
 800d346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d34a:	461a      	mov	r2, r3
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d350:	79fb      	ldrb	r3, [r7, #7]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d001      	beq.n	800d35a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	e04e      	b.n	800d3f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	78db      	ldrb	r3, [r3, #3]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d149      	bne.n	800d3f6 <USB_HC_StartXfer+0x276>
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d045      	beq.n	800d3f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	79db      	ldrb	r3, [r3, #7]
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d830      	bhi.n	800d3d4 <USB_HC_StartXfer+0x254>
 800d372:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <USB_HC_StartXfer+0x1f8>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d3ad 	.word	0x0800d3ad
 800d380:	0800d389 	.word	0x0800d389
 800d384:	0800d3ad 	.word	0x0800d3ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	3303      	adds	r3, #3
 800d38e:	089b      	lsrs	r3, r3, #2
 800d390:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d392:	8afa      	ldrh	r2, [r7, #22]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d398:	b29b      	uxth	r3, r3
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d91c      	bls.n	800d3d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f043 0220 	orr.w	r2, r3, #32
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	619a      	str	r2, [r3, #24]
        }
        break;
 800d3aa:	e015      	b.n	800d3d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	3303      	adds	r3, #3
 800d3b2:	089b      	lsrs	r3, r3, #2
 800d3b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d3b6:	8afa      	ldrh	r2, [r7, #22]
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d90a      	bls.n	800d3dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	699b      	ldr	r3, [r3, #24]
 800d3ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	619a      	str	r2, [r3, #24]
        }
        break;
 800d3d2:	e003      	b.n	800d3dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d3d4:	bf00      	nop
 800d3d6:	e002      	b.n	800d3de <USB_HC_StartXfer+0x25e>
        break;
 800d3d8:	bf00      	nop
 800d3da:	e000      	b.n	800d3de <USB_HC_StartXfer+0x25e>
        break;
 800d3dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	68d9      	ldr	r1, [r3, #12]
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	785a      	ldrb	r2, [r3, #1]
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	9000      	str	r0, [sp, #0]
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f7ff fb79 	bl	800cae8 <USB_WritePacket>
  }

  return HAL_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3728      	adds	r7, #40	; 0x28
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	1ff80000 	.word	0x1ff80000

0800d404 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	b29b      	uxth	r3, r3
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d426:	b480      	push	{r7}
 800d428:	b089      	sub	sp, #36	; 0x24
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	460b      	mov	r3, r1
 800d430:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d43a:	2300      	movs	r3, #0
 800d43c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	015a      	lsls	r2, r3, #5
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	4413      	add	r3, r2
 800d446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	0c9b      	lsrs	r3, r3, #18
 800d44e:	f003 0303 	and.w	r3, r3, #3
 800d452:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	015a      	lsls	r2, r3, #5
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	4413      	add	r3, r2
 800d45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	0fdb      	lsrs	r3, r3, #31
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b20      	cmp	r3, #32
 800d474:	d104      	bne.n	800d480 <USB_HC_Halt+0x5a>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d101      	bne.n	800d480 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e0e8      	b.n	800d652 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <USB_HC_Halt+0x66>
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d173      	bne.n	800d574 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	4413      	add	r3, r2
 800d494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	0151      	lsls	r1, r2, #5
 800d49e:	69ba      	ldr	r2, [r7, #24]
 800d4a0:	440a      	add	r2, r1
 800d4a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	f003 0320 	and.w	r3, r3, #32
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f040 80cb 	bne.w	800d650 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d143      	bne.n	800d54e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	015a      	lsls	r2, r3, #5
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	0151      	lsls	r1, r2, #5
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	440a      	add	r2, r1
 800d4dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	015a      	lsls	r2, r3, #5
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	697a      	ldr	r2, [r7, #20]
 800d4f6:	0151      	lsls	r1, r2, #5
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	440a      	add	r2, r1
 800d4fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d504:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	015a      	lsls	r2, r3, #5
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	4413      	add	r3, r2
 800d50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	0151      	lsls	r1, r2, #5
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	440a      	add	r2, r1
 800d51c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d524:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	3301      	adds	r3, #1
 800d52a:	61fb      	str	r3, [r7, #28]
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d532:	d81d      	bhi.n	800d570 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	015a      	lsls	r2, r3, #5
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	4413      	add	r3, r2
 800d53c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d54a:	d0ec      	beq.n	800d526 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d54c:	e080      	b.n	800d650 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	015a      	lsls	r2, r3, #5
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	4413      	add	r3, r2
 800d556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	0151      	lsls	r1, r2, #5
 800d560:	69ba      	ldr	r2, [r7, #24]
 800d562:	440a      	add	r2, r1
 800d564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d56c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d56e:	e06f      	b.n	800d650 <USB_HC_Halt+0x22a>
            break;
 800d570:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d572:	e06d      	b.n	800d650 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	4413      	add	r3, r2
 800d57c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	697a      	ldr	r2, [r7, #20]
 800d584:	0151      	lsls	r1, r2, #5
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	440a      	add	r2, r1
 800d58a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d58e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d592:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d143      	bne.n	800d62c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	015a      	lsls	r2, r3, #5
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	0151      	lsls	r1, r2, #5
 800d5b6:	69ba      	ldr	r2, [r7, #24]
 800d5b8:	440a      	add	r2, r1
 800d5ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	0151      	lsls	r1, r2, #5
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	440a      	add	r2, r1
 800d5da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	697a      	ldr	r2, [r7, #20]
 800d5f4:	0151      	lsls	r1, r2, #5
 800d5f6:	69ba      	ldr	r2, [r7, #24]
 800d5f8:	440a      	add	r2, r1
 800d5fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d602:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	3301      	adds	r3, #1
 800d608:	61fb      	str	r3, [r7, #28]
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d610:	d81d      	bhi.n	800d64e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	015a      	lsls	r2, r3, #5
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	4413      	add	r3, r2
 800d61a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d628:	d0ec      	beq.n	800d604 <USB_HC_Halt+0x1de>
 800d62a:	e011      	b.n	800d650 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	015a      	lsls	r2, r3, #5
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	4413      	add	r3, r2
 800d634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	0151      	lsls	r1, r2, #5
 800d63e:	69ba      	ldr	r2, [r7, #24]
 800d640:	440a      	add	r2, r1
 800d642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	e000      	b.n	800d650 <USB_HC_Halt+0x22a>
          break;
 800d64e:	bf00      	nop
    }
  }

  return HAL_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3724      	adds	r7, #36	; 0x24
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
	...

0800d660 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d660:	b480      	push	{r7}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	460b      	mov	r3, r1
 800d66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d674:	2301      	movs	r3, #1
 800d676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	04da      	lsls	r2, r3, #19
 800d67c:	4b15      	ldr	r3, [pc, #84]	; (800d6d4 <USB_DoPing+0x74>)
 800d67e:	4013      	ands	r3, r2
 800d680:	693a      	ldr	r2, [r7, #16]
 800d682:	0151      	lsls	r1, r2, #5
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	440a      	add	r2, r1
 800d688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d68c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d690:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	015a      	lsls	r2, r3, #5
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6be:	461a      	mov	r2, r3
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	371c      	adds	r7, #28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	1ff80000 	.word	0x1ff80000

0800d6d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff f97a 	bl	800c9e2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d6ee:	2110      	movs	r1, #16
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff f9b1 	bl	800ca58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff f9d4 	bl	800caa4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	613b      	str	r3, [r7, #16]
 800d700:	e01f      	b.n	800d742 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	015a      	lsls	r2, r3, #5
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	4413      	add	r3, r2
 800d70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d718:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d720:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d728:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	015a      	lsls	r2, r3, #5
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	4413      	add	r3, r2
 800d732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d736:	461a      	mov	r2, r3
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	3301      	adds	r3, #1
 800d740:	613b      	str	r3, [r7, #16]
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	2b0f      	cmp	r3, #15
 800d746:	d9dc      	bls.n	800d702 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d748:	2300      	movs	r3, #0
 800d74a:	613b      	str	r3, [r7, #16]
 800d74c:	e034      	b.n	800d7b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	015a      	lsls	r2, r3, #5
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	4413      	add	r3, r2
 800d756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d764:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d76c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d774:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	015a      	lsls	r2, r3, #5
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d782:	461a      	mov	r2, r3
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	3301      	adds	r3, #1
 800d78c:	617b      	str	r3, [r7, #20]
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d794:	d80c      	bhi.n	800d7b0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	015a      	lsls	r2, r3, #5
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	4413      	add	r3, r2
 800d79e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7ac:	d0ec      	beq.n	800d788 <USB_StopHost+0xb0>
 800d7ae:	e000      	b.n	800d7b2 <USB_StopHost+0xda>
        break;
 800d7b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	613b      	str	r3, [r7, #16]
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2b0f      	cmp	r3, #15
 800d7bc:	d9c7      	bls.n	800d74e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff f8f3 	bl	800c9c0 <USB_EnableGlobalInt>

  return HAL_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d7e8:	4904      	ldr	r1, [pc, #16]	; (800d7fc <MX_FATFS_Init+0x18>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	; (800d800 <MX_FATFS_Init+0x1c>)
 800d7ec:	f003 fdce 	bl	801138c <FATFS_LinkDriver>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	4b03      	ldr	r3, [pc, #12]	; (800d804 <MX_FATFS_Init+0x20>)
 800d7f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d7f8:	bf00      	nop
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	2400a9b4 	.word	0x2400a9b4
 800d800:	24000018 	.word	0x24000018
 800d804:	2400a9b8 	.word	0x2400a9b8

0800d808 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	4603      	mov	r3, r0
 800d810:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	4618      	mov	r0, r3
 800d816:	f000 f9d9 	bl	800dbcc <USER_SPI_initialize>
 800d81a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return USER_SPI_status(pdrv); //ADD THIS LINE
 800d82e:	79fb      	ldrb	r3, [r7, #7]
 800d830:	4618      	mov	r0, r3
 800d832:	f000 fab5 	bl	800dda0 <USER_SPI_status>
 800d836:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800d850:	7bf8      	ldrb	r0, [r7, #15]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	68b9      	ldr	r1, [r7, #8]
 800d858:	f000 fab8 	bl	800ddcc <USER_SPI_read>
 800d85c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800d876:	7bf8      	ldrb	r0, [r7, #15]
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	68b9      	ldr	r1, [r7, #8]
 800d87e:	f000 fb0b 	bl	800de98 <USER_SPI_write>
 800d882:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	603a      	str	r2, [r7, #0]
 800d896:	71fb      	strb	r3, [r7, #7]
 800d898:	460b      	mov	r3, r1
 800d89a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800d89c:	79b9      	ldrb	r1, [r7, #6]
 800d89e:	79fb      	ldrb	r3, [r7, #7]
 800d8a0:	683a      	ldr	r2, [r7, #0]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 fb74 	bl	800df90 <USER_SPI_ioctl>
 800d8a8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3708      	adds	r7, #8
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
	...

0800d8b4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d8bc:	f7f4 fef6 	bl	80026ac <HAL_GetTick>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	4a04      	ldr	r2, [pc, #16]	; (800d8d4 <SPI_Timer_On+0x20>)
 800d8c4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800d8c6:	4a04      	ldr	r2, [pc, #16]	; (800d8d8 <SPI_Timer_On+0x24>)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6013      	str	r3, [r2, #0]
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	2400ae1c 	.word	0x2400ae1c
 800d8d8:	2400ae20 	.word	0x2400ae20

0800d8dc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d8e0:	f7f4 fee4 	bl	80026ac <HAL_GetTick>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	4b06      	ldr	r3, [pc, #24]	; (800d900 <SPI_Timer_Status+0x24>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	4b05      	ldr	r3, [pc, #20]	; (800d904 <SPI_Timer_Status+0x28>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	bf34      	ite	cc
 800d8f4:	2301      	movcc	r3, #1
 800d8f6:	2300      	movcs	r3, #0
 800d8f8:	b2db      	uxtb	r3, r3
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	2400ae1c 	.word	0x2400ae1c
 800d904:	2400ae20 	.word	0x2400ae20

0800d908 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi (BYTE dat	/* Data to send */)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af02      	add	r7, sp, #8
 800d90e:	4603      	mov	r3, r0
 800d910:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d912:	f107 020f 	add.w	r2, r7, #15
 800d916:	1df9      	adds	r1, r7, #7
 800d918:	2332      	movs	r3, #50	; 0x32
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	2301      	movs	r3, #1
 800d91e:	4804      	ldr	r0, [pc, #16]	; (800d930 <xchg_spi+0x28>)
 800d920:	f7fc fac6 	bl	8009eb0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800d924:	7bfb      	ldrb	r3, [r7, #15]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	2400a634 	.word	0x2400a634

0800d934 <rcvr_spi_multi>:


/* Receive multiple byte */
static void rcvr_spi_multi (BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++)
 800d93e:	2300      	movs	r3, #0
 800d940:	60fb      	str	r3, [r7, #12]
 800d942:	e00a      	b.n	800d95a <rcvr_spi_multi+0x26>
	{
		*(buff+i) = xchg_spi(0xFF);
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	18d4      	adds	r4, r2, r3
 800d94a:	20ff      	movs	r0, #255	; 0xff
 800d94c:	f7ff ffdc 	bl	800d908 <xchg_spi>
 800d950:	4603      	mov	r3, r0
 800d952:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3301      	adds	r3, #1
 800d958:	60fb      	str	r3, [r7, #12]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d3f0      	bcc.n	800d944 <rcvr_spi_multi+0x10>
	}
}
 800d962:	bf00      	nop
 800d964:	bf00      	nop
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd90      	pop	{r4, r7, pc}

0800d96c <xmit_spi_multi>:

#if _USE_WRITE
/* Send multiple byte */
static void xmit_spi_multi (const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++)
 800d976:	2300      	movs	r3, #0
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	e009      	b.n	800d990 <xmit_spi_multi+0x24>
	{
		xchg_spi(*(buff+i));
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	4413      	add	r3, r2
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff ffbf 	bl	800d908 <xchg_spi>
	for(UINT i=0; i<btx; i++)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	3301      	adds	r3, #1
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	429a      	cmp	r2, r3
 800d996:	d3f1      	bcc.n	800d97c <xmit_spi_multi+0x10>
	}
}
 800d998:	bf00      	nop
 800d99a:	bf00      	nop
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b086      	sub	sp, #24
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800d9aa:	f7f4 fe7f 	bl	80026ac <HAL_GetTick>
 800d9ae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800d9b4:	20ff      	movs	r0, #255	; 0xff
 800d9b6:	f7ff ffa7 	bl	800d908 <xchg_spi>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	2bff      	cmp	r3, #255	; 0xff
 800d9c2:	d007      	beq.n	800d9d4 <wait_ready+0x32>
 800d9c4:	f7f4 fe72 	bl	80026ac <HAL_GetTick>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	693a      	ldr	r2, [r7, #16]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d8ef      	bhi.n	800d9b4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
 800d9d6:	2bff      	cmp	r3, #255	; 0xff
 800d9d8:	bf0c      	ite	eq
 800d9da:	2301      	moveq	r3, #1
 800d9dc:	2300      	movne	r3, #0
 800d9de:	b2db      	uxtb	r3, r3
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void despiselect (void)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	2110      	movs	r1, #16
 800d9f0:	4803      	ldr	r0, [pc, #12]	; (800da00 <despiselect+0x18>)
 800d9f2:	f7f7 fd03 	bl	80053fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d9f6:	20ff      	movs	r0, #255	; 0xff
 800d9f8:	f7ff ff86 	bl	800d908 <xchg_spi>

}
 800d9fc:	bf00      	nop
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	58020c00 	.word	0x58020c00

0800da04 <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800da08:	2200      	movs	r2, #0
 800da0a:	2110      	movs	r1, #16
 800da0c:	4809      	ldr	r0, [pc, #36]	; (800da34 <spiselect+0x30>)
 800da0e:	f7f7 fcf5 	bl	80053fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800da12:	20ff      	movs	r0, #255	; 0xff
 800da14:	f7ff ff78 	bl	800d908 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800da18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800da1c:	f7ff ffc1 	bl	800d9a2 <wait_ready>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <spiselect+0x26>
 800da26:	2301      	movs	r3, #1
 800da28:	e002      	b.n	800da30 <spiselect+0x2c>

	despiselect();
 800da2a:	f7ff ffdd 	bl	800d9e8 <despiselect>
	return 0;	/* Timeout */
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	bd80      	pop	{r7, pc}
 800da34:	58020c00 	.word	0x58020c00

0800da38 <rcvr_datablock>:
/*-----------------------------------------------------------------------*/

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800da42:	20c8      	movs	r0, #200	; 0xc8
 800da44:	f7ff ff36 	bl	800d8b4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800da48:	20ff      	movs	r0, #255	; 0xff
 800da4a:	f7ff ff5d 	bl	800d908 <xchg_spi>
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800da52:	7bfb      	ldrb	r3, [r7, #15]
 800da54:	2bff      	cmp	r3, #255	; 0xff
 800da56:	d104      	bne.n	800da62 <rcvr_datablock+0x2a>
 800da58:	f7ff ff40 	bl	800d8dc <SPI_Timer_Status>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d1f2      	bne.n	800da48 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	2bfe      	cmp	r3, #254	; 0xfe
 800da66:	d001      	beq.n	800da6c <rcvr_datablock+0x34>
 800da68:	2300      	movs	r3, #0
 800da6a:	e00a      	b.n	800da82 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff ff60 	bl	800d934 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800da74:	20ff      	movs	r0, #255	; 0xff
 800da76:	f7ff ff47 	bl	800d908 <xchg_spi>
 800da7a:	20ff      	movs	r0, #255	; 0xff
 800da7c:	f7ff ff44 	bl	800d908 <xchg_spi>

	return 1;						/* Function succeeded */
 800da80:	2301      	movs	r3, #1
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <xmit_datablock>:

#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800da96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800da9a:	f7ff ff82 	bl	800d9a2 <wait_ready>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d101      	bne.n	800daa8 <xmit_datablock+0x1e>
 800daa4:	2300      	movs	r3, #0
 800daa6:	e01e      	b.n	800dae6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800daa8:	78fb      	ldrb	r3, [r7, #3]
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff ff2c 	bl	800d908 <xchg_spi>
	if (token != 0xFD)
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	2bfd      	cmp	r3, #253	; 0xfd
 800dab4:	d016      	beq.n	800dae4 <xmit_datablock+0x5a>
	{				/* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512);		/* Data */
 800dab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff ff56 	bl	800d96c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800dac0:	20ff      	movs	r0, #255	; 0xff
 800dac2:	f7ff ff21 	bl	800d908 <xchg_spi>
 800dac6:	20ff      	movs	r0, #255	; 0xff
 800dac8:	f7ff ff1e 	bl	800d908 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800dacc:	20ff      	movs	r0, #255	; 0xff
 800dace:	f7ff ff1b 	bl	800d908 <xchg_spi>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	f003 031f 	and.w	r3, r3, #31
 800dadc:	2b05      	cmp	r3, #5
 800dade:	d001      	beq.n	800dae4 <xmit_datablock+0x5a>
 800dae0:	2300      	movs	r3, #0
 800dae2:	e000      	b.n	800dae6 <xmit_datablock+0x5c>
	}
	return 1;
 800dae4:	2301      	movs	r3, #1
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	4603      	mov	r3, r0
 800daf6:	6039      	str	r1, [r7, #0]
 800daf8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80)
 800dafa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	da0e      	bge.n	800db20 <send_cmd+0x32>
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db08:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800db0a:	2100      	movs	r1, #0
 800db0c:	2037      	movs	r0, #55	; 0x37
 800db0e:	f7ff ffee 	bl	800daee <send_cmd>
 800db12:	4603      	mov	r3, r0
 800db14:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d901      	bls.n	800db20 <send_cmd+0x32>
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	e051      	b.n	800dbc4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12)
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	2b0c      	cmp	r3, #12
 800db24:	d008      	beq.n	800db38 <send_cmd+0x4a>
	{
		despiselect();
 800db26:	f7ff ff5f 	bl	800d9e8 <despiselect>
		if (!spiselect()) return 0xFF;
 800db2a:	f7ff ff6b 	bl	800da04 <spiselect>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <send_cmd+0x4a>
 800db34:	23ff      	movs	r3, #255	; 0xff
 800db36:	e045      	b.n	800dbc4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800db38:	79fb      	ldrb	r3, [r7, #7]
 800db3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	4618      	mov	r0, r3
 800db42:	f7ff fee1 	bl	800d908 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	0e1b      	lsrs	r3, r3, #24
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff fedb 	bl	800d908 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	0c1b      	lsrs	r3, r3, #16
 800db56:	b2db      	uxtb	r3, r3
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff fed5 	bl	800d908 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	0a1b      	lsrs	r3, r3, #8
 800db62:	b2db      	uxtb	r3, r3
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fecf 	bl	800d908 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff feca 	bl	800d908 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800db74:	2301      	movs	r3, #1
 800db76:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d101      	bne.n	800db82 <send_cmd+0x94>
 800db7e:	2395      	movs	r3, #149	; 0x95
 800db80:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	2b08      	cmp	r3, #8
 800db86:	d101      	bne.n	800db8c <send_cmd+0x9e>
 800db88:	2387      	movs	r3, #135	; 0x87
 800db8a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	4618      	mov	r0, r3
 800db90:	f7ff feba 	bl	800d908 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	2b0c      	cmp	r3, #12
 800db98:	d102      	bne.n	800dba0 <send_cmd+0xb2>
 800db9a:	20ff      	movs	r0, #255	; 0xff
 800db9c:	f7ff feb4 	bl	800d908 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800dba0:	230a      	movs	r3, #10
 800dba2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800dba4:	20ff      	movs	r0, #255	; 0xff
 800dba6:	f7ff feaf 	bl	800d908 <xchg_spi>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800dbae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	da05      	bge.n	800dbc2 <send_cmd+0xd4>
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	73fb      	strb	r3, [r7, #15]
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1f0      	bne.n	800dba4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USER_SPI_initialize>:
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */)
{
 800dbcc:	b590      	push	{r4, r7, lr}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <USER_SPI_initialize+0x14>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e0d4      	b.n	800dd8a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800dbe0:	4b6c      	ldr	r3, [pc, #432]	; (800dd94 <USER_SPI_initialize+0x1c8>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 0302 	and.w	r3, r3, #2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <USER_SPI_initialize+0x2a>
 800dbee:	4b69      	ldr	r3, [pc, #420]	; (800dd94 <USER_SPI_initialize+0x1c8>)
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	e0c9      	b.n	800dd8a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800dbf6:	4b68      	ldr	r3, [pc, #416]	; (800dd98 <USER_SPI_initialize+0x1cc>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	4b66      	ldr	r3, [pc, #408]	; (800dd98 <USER_SPI_initialize+0x1cc>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 800dc04:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800dc06:	230a      	movs	r3, #10
 800dc08:	73fb      	strb	r3, [r7, #15]
 800dc0a:	e005      	b.n	800dc18 <USER_SPI_initialize+0x4c>
 800dc0c:	20ff      	movs	r0, #255	; 0xff
 800dc0e:	f7ff fe7b 	bl	800d908 <xchg_spi>
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	73fb      	strb	r3, [r7, #15]
 800dc18:	7bfb      	ldrb	r3, [r7, #15]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1f6      	bne.n	800dc0c <USER_SPI_initialize+0x40>

	ty = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800dc22:	2100      	movs	r1, #0
 800dc24:	2000      	movs	r0, #0
 800dc26:	f7ff ff62 	bl	800daee <send_cmd>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	f040 808b 	bne.w	800dd48 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800dc32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dc36:	f7ff fe3d 	bl	800d8b4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800dc3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc3e:	2008      	movs	r0, #8
 800dc40:	f7ff ff55 	bl	800daee <send_cmd>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d151      	bne.n	800dcee <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	73fb      	strb	r3, [r7, #15]
 800dc4e:	e00d      	b.n	800dc6c <USER_SPI_initialize+0xa0>
 800dc50:	7bfc      	ldrb	r4, [r7, #15]
 800dc52:	20ff      	movs	r0, #255	; 0xff
 800dc54:	f7ff fe58 	bl	800d908 <xchg_spi>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f107 0310 	add.w	r3, r7, #16
 800dc60:	4423      	add	r3, r4
 800dc62:	f803 2c08 	strb.w	r2, [r3, #-8]
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	73fb      	strb	r3, [r7, #15]
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	d9ee      	bls.n	800dc50 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800dc72:	7abb      	ldrb	r3, [r7, #10]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d167      	bne.n	800dd48 <USER_SPI_initialize+0x17c>
 800dc78:	7afb      	ldrb	r3, [r7, #11]
 800dc7a:	2baa      	cmp	r3, #170	; 0xaa
 800dc7c:	d164      	bne.n	800dd48 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800dc7e:	bf00      	nop
 800dc80:	f7ff fe2c 	bl	800d8dc <SPI_Timer_Status>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d007      	beq.n	800dc9a <USER_SPI_initialize+0xce>
 800dc8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800dc8e:	20a9      	movs	r0, #169	; 0xa9
 800dc90:	f7ff ff2d 	bl	800daee <send_cmd>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1f2      	bne.n	800dc80 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800dc9a:	f7ff fe1f 	bl	800d8dc <SPI_Timer_Status>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d051      	beq.n	800dd48 <USER_SPI_initialize+0x17c>
 800dca4:	2100      	movs	r1, #0
 800dca6:	203a      	movs	r0, #58	; 0x3a
 800dca8:	f7ff ff21 	bl	800daee <send_cmd>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d14a      	bne.n	800dd48 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	73fb      	strb	r3, [r7, #15]
 800dcb6:	e00d      	b.n	800dcd4 <USER_SPI_initialize+0x108>
 800dcb8:	7bfc      	ldrb	r4, [r7, #15]
 800dcba:	20ff      	movs	r0, #255	; 0xff
 800dcbc:	f7ff fe24 	bl	800d908 <xchg_spi>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f107 0310 	add.w	r3, r7, #16
 800dcc8:	4423      	add	r3, r4
 800dcca:	f803 2c08 	strb.w	r2, [r3, #-8]
 800dcce:	7bfb      	ldrb	r3, [r7, #15]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	73fb      	strb	r3, [r7, #15]
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d9ee      	bls.n	800dcb8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800dcda:	7a3b      	ldrb	r3, [r7, #8]
 800dcdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <USER_SPI_initialize+0x11c>
 800dce4:	230c      	movs	r3, #12
 800dce6:	e000      	b.n	800dcea <USER_SPI_initialize+0x11e>
 800dce8:	2304      	movs	r3, #4
 800dcea:	737b      	strb	r3, [r7, #13]
 800dcec:	e02c      	b.n	800dd48 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800dcee:	2100      	movs	r1, #0
 800dcf0:	20a9      	movs	r0, #169	; 0xa9
 800dcf2:	f7ff fefc 	bl	800daee <send_cmd>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d804      	bhi.n	800dd06 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	737b      	strb	r3, [r7, #13]
 800dd00:	23a9      	movs	r3, #169	; 0xa9
 800dd02:	73bb      	strb	r3, [r7, #14]
 800dd04:	e003      	b.n	800dd0e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800dd06:	2301      	movs	r3, #1
 800dd08:	737b      	strb	r3, [r7, #13]
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800dd0e:	bf00      	nop
 800dd10:	f7ff fde4 	bl	800d8dc <SPI_Timer_Status>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d007      	beq.n	800dd2a <USER_SPI_initialize+0x15e>
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7ff fee5 	bl	800daee <send_cmd>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1f2      	bne.n	800dd10 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800dd2a:	f7ff fdd7 	bl	800d8dc <SPI_Timer_Status>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <USER_SPI_initialize+0x178>
 800dd34:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd38:	2010      	movs	r0, #16
 800dd3a:	f7ff fed8 	bl	800daee <send_cmd>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d001      	beq.n	800dd48 <USER_SPI_initialize+0x17c>
				ty = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800dd48:	4a14      	ldr	r2, [pc, #80]	; (800dd9c <USER_SPI_initialize+0x1d0>)
 800dd4a:	7b7b      	ldrb	r3, [r7, #13]
 800dd4c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800dd4e:	f7ff fe4b 	bl	800d9e8 <despiselect>

	if (ty) {			/* OK */
 800dd52:	7b7b      	ldrb	r3, [r7, #13]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d012      	beq.n	800dd7e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800dd58:	4b0f      	ldr	r3, [pc, #60]	; (800dd98 <USER_SPI_initialize+0x1cc>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800dd62:	4b0d      	ldr	r3, [pc, #52]	; (800dd98 <USER_SPI_initialize+0x1cc>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800dd6a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <USER_SPI_initialize+0x1c8>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	f023 0301 	bic.w	r3, r3, #1
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	4b06      	ldr	r3, [pc, #24]	; (800dd94 <USER_SPI_initialize+0x1c8>)
 800dd7a:	701a      	strb	r2, [r3, #0]
 800dd7c:	e002      	b.n	800dd84 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800dd7e:	4b05      	ldr	r3, [pc, #20]	; (800dd94 <USER_SPI_initialize+0x1c8>)
 800dd80:	2201      	movs	r2, #1
 800dd82:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800dd84:	4b03      	ldr	r3, [pc, #12]	; (800dd94 <USER_SPI_initialize+0x1c8>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	b2db      	uxtb	r3, r3
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3714      	adds	r7, #20
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd90      	pop	{r4, r7, pc}
 800dd92:	bf00      	nop
 800dd94:	2400002c 	.word	0x2400002c
 800dd98:	2400a634 	.word	0x2400a634
 800dd9c:	2400a3c8 	.word	0x2400a3c8

0800dda0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800ddaa:	79fb      	ldrb	r3, [r7, #7]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <USER_SPI_status+0x14>
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e002      	b.n	800ddba <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800ddb4:	4b04      	ldr	r3, [pc, #16]	; (800ddc8 <USER_SPI_status+0x28>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	b2db      	uxtb	r3, r3
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	2400002c 	.word	0x2400002c

0800ddcc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60b9      	str	r1, [r7, #8]
 800ddd4:	607a      	str	r2, [r7, #4]
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	4603      	mov	r3, r0
 800ddda:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <USER_SPI_read+0x1c>
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <USER_SPI_read+0x20>
 800dde8:	2304      	movs	r3, #4
 800ddea:	e04d      	b.n	800de88 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ddec:	4b28      	ldr	r3, [pc, #160]	; (800de90 <USER_SPI_read+0xc4>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	f003 0301 	and.w	r3, r3, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <USER_SPI_read+0x32>
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	e044      	b.n	800de88 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ddfe:	4b25      	ldr	r3, [pc, #148]	; (800de94 <USER_SPI_read+0xc8>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	f003 0308 	and.w	r3, r3, #8
 800de06:	2b00      	cmp	r3, #0
 800de08:	d102      	bne.n	800de10 <USER_SPI_read+0x44>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	025b      	lsls	r3, r3, #9
 800de0e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d111      	bne.n	800de3a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800de16:	6879      	ldr	r1, [r7, #4]
 800de18:	2011      	movs	r0, #17
 800de1a:	f7ff fe68 	bl	800daee <send_cmd>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d129      	bne.n	800de78 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800de24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de28:	68b8      	ldr	r0, [r7, #8]
 800de2a:	f7ff fe05 	bl	800da38 <rcvr_datablock>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d021      	beq.n	800de78 <USER_SPI_read+0xac>
			count = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	e01e      	b.n	800de78 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800de3a:	6879      	ldr	r1, [r7, #4]
 800de3c:	2012      	movs	r0, #18
 800de3e:	f7ff fe56 	bl	800daee <send_cmd>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d117      	bne.n	800de78 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800de48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de4c:	68b8      	ldr	r0, [r7, #8]
 800de4e:	f7ff fdf3 	bl	800da38 <rcvr_datablock>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00a      	beq.n	800de6e <USER_SPI_read+0xa2>
				buff += 512;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800de5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	3b01      	subs	r3, #1
 800de64:	603b      	str	r3, [r7, #0]
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1ed      	bne.n	800de48 <USER_SPI_read+0x7c>
 800de6c:	e000      	b.n	800de70 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800de6e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800de70:	2100      	movs	r1, #0
 800de72:	200c      	movs	r0, #12
 800de74:	f7ff fe3b 	bl	800daee <send_cmd>
		}
	}
	despiselect();
 800de78:	f7ff fdb6 	bl	800d9e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	bf14      	ite	ne
 800de82:	2301      	movne	r3, #1
 800de84:	2300      	moveq	r3, #0
 800de86:	b2db      	uxtb	r3, r3
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	2400002c 	.word	0x2400002c
 800de94:	2400a3c8 	.word	0x2400a3c8

0800de98 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60b9      	str	r1, [r7, #8]
 800dea0:	607a      	str	r2, [r7, #4]
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	4603      	mov	r3, r0
 800dea6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d102      	bne.n	800deb4 <USER_SPI_write+0x1c>
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d101      	bne.n	800deb8 <USER_SPI_write+0x20>
 800deb4:	2304      	movs	r3, #4
 800deb6:	e063      	b.n	800df80 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800deb8:	4b33      	ldr	r3, [pc, #204]	; (800df88 <USER_SPI_write+0xf0>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0301 	and.w	r3, r3, #1
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <USER_SPI_write+0x32>
 800dec6:	2303      	movs	r3, #3
 800dec8:	e05a      	b.n	800df80 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800deca:	4b2f      	ldr	r3, [pc, #188]	; (800df88 <USER_SPI_write+0xf0>)
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <USER_SPI_write+0x44>
 800ded8:	2302      	movs	r3, #2
 800deda:	e051      	b.n	800df80 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800dedc:	4b2b      	ldr	r3, [pc, #172]	; (800df8c <USER_SPI_write+0xf4>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	f003 0308 	and.w	r3, r3, #8
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <USER_SPI_write+0x56>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	025b      	lsls	r3, r3, #9
 800deec:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d110      	bne.n	800df16 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800def4:	6879      	ldr	r1, [r7, #4]
 800def6:	2018      	movs	r0, #24
 800def8:	f7ff fdf9 	bl	800daee <send_cmd>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d136      	bne.n	800df70 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800df02:	21fe      	movs	r1, #254	; 0xfe
 800df04:	68b8      	ldr	r0, [r7, #8]
 800df06:	f7ff fdc0 	bl	800da8a <xmit_datablock>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d02f      	beq.n	800df70 <USER_SPI_write+0xd8>
			count = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	e02c      	b.n	800df70 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800df16:	4b1d      	ldr	r3, [pc, #116]	; (800df8c <USER_SPI_write+0xf4>)
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	f003 0306 	and.w	r3, r3, #6
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <USER_SPI_write+0x92>
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	2097      	movs	r0, #151	; 0x97
 800df26:	f7ff fde2 	bl	800daee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	2019      	movs	r0, #25
 800df2e:	f7ff fdde 	bl	800daee <send_cmd>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d11b      	bne.n	800df70 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800df38:	21fc      	movs	r1, #252	; 0xfc
 800df3a:	68b8      	ldr	r0, [r7, #8]
 800df3c:	f7ff fda5 	bl	800da8a <xmit_datablock>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00a      	beq.n	800df5c <USER_SPI_write+0xc4>
				buff += 512;
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df4c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	3b01      	subs	r3, #1
 800df52:	603b      	str	r3, [r7, #0]
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1ee      	bne.n	800df38 <USER_SPI_write+0xa0>
 800df5a:	e000      	b.n	800df5e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800df5c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800df5e:	21fd      	movs	r1, #253	; 0xfd
 800df60:	2000      	movs	r0, #0
 800df62:	f7ff fd92 	bl	800da8a <xmit_datablock>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <USER_SPI_write+0xd8>
 800df6c:	2301      	movs	r3, #1
 800df6e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800df70:	f7ff fd3a 	bl	800d9e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	bf14      	ite	ne
 800df7a:	2301      	movne	r3, #1
 800df7c:	2300      	moveq	r3, #0
 800df7e:	b2db      	uxtb	r3, r3
}
 800df80:	4618      	mov	r0, r3
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	2400002c 	.word	0x2400002c
 800df8c:	2400a3c8 	.word	0x2400a3c8

0800df90 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b08c      	sub	sp, #48	; 0x30
 800df94:	af00      	add	r7, sp, #0
 800df96:	4603      	mov	r3, r0
 800df98:	603a      	str	r2, [r7, #0]
 800df9a:	71fb      	strb	r3, [r7, #7]
 800df9c:	460b      	mov	r3, r1
 800df9e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <USER_SPI_ioctl+0x1a>
 800dfa6:	2304      	movs	r3, #4
 800dfa8:	e15a      	b.n	800e260 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800dfaa:	4baf      	ldr	r3, [pc, #700]	; (800e268 <USER_SPI_ioctl+0x2d8>)
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <USER_SPI_ioctl+0x2c>
 800dfb8:	2303      	movs	r3, #3
 800dfba:	e151      	b.n	800e260 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800dfc2:	79bb      	ldrb	r3, [r7, #6]
 800dfc4:	2b04      	cmp	r3, #4
 800dfc6:	f200 8136 	bhi.w	800e236 <USER_SPI_ioctl+0x2a6>
 800dfca:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <USER_SPI_ioctl+0x40>)
 800dfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd0:	0800dfe5 	.word	0x0800dfe5
 800dfd4:	0800dff9 	.word	0x0800dff9
 800dfd8:	0800e237 	.word	0x0800e237
 800dfdc:	0800e0a5 	.word	0x0800e0a5
 800dfe0:	0800e19b 	.word	0x0800e19b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800dfe4:	f7ff fd0e 	bl	800da04 <spiselect>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f000 8127 	beq.w	800e23e <USER_SPI_ioctl+0x2ae>
 800dff0:	2300      	movs	r3, #0
 800dff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800dff6:	e122      	b.n	800e23e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800dff8:	2100      	movs	r1, #0
 800dffa:	2009      	movs	r0, #9
 800dffc:	f7ff fd77 	bl	800daee <send_cmd>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	f040 811d 	bne.w	800e242 <USER_SPI_ioctl+0x2b2>
 800e008:	f107 030c 	add.w	r3, r7, #12
 800e00c:	2110      	movs	r1, #16
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff fd12 	bl	800da38 <rcvr_datablock>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	f000 8113 	beq.w	800e242 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e01c:	7b3b      	ldrb	r3, [r7, #12]
 800e01e:	099b      	lsrs	r3, r3, #6
 800e020:	b2db      	uxtb	r3, r3
 800e022:	2b01      	cmp	r3, #1
 800e024:	d111      	bne.n	800e04a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e026:	7d7b      	ldrb	r3, [r7, #21]
 800e028:	461a      	mov	r2, r3
 800e02a:	7d3b      	ldrb	r3, [r7, #20]
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	4413      	add	r3, r2
 800e030:	461a      	mov	r2, r3
 800e032:	7cfb      	ldrb	r3, [r7, #19]
 800e034:	041b      	lsls	r3, r3, #16
 800e036:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800e03a:	4413      	add	r3, r2
 800e03c:	3301      	adds	r3, #1
 800e03e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	029a      	lsls	r2, r3, #10
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	601a      	str	r2, [r3, #0]
 800e048:	e028      	b.n	800e09c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e04a:	7c7b      	ldrb	r3, [r7, #17]
 800e04c:	f003 030f 	and.w	r3, r3, #15
 800e050:	b2da      	uxtb	r2, r3
 800e052:	7dbb      	ldrb	r3, [r7, #22]
 800e054:	09db      	lsrs	r3, r3, #7
 800e056:	b2db      	uxtb	r3, r3
 800e058:	4413      	add	r3, r2
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	7d7b      	ldrb	r3, [r7, #21]
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	b2db      	uxtb	r3, r3
 800e062:	f003 0306 	and.w	r3, r3, #6
 800e066:	b2db      	uxtb	r3, r3
 800e068:	4413      	add	r3, r2
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	3302      	adds	r3, #2
 800e06e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e072:	7d3b      	ldrb	r3, [r7, #20]
 800e074:	099b      	lsrs	r3, r3, #6
 800e076:	b2db      	uxtb	r3, r3
 800e078:	461a      	mov	r2, r3
 800e07a:	7cfb      	ldrb	r3, [r7, #19]
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	441a      	add	r2, r3
 800e080:	7cbb      	ldrb	r3, [r7, #18]
 800e082:	029b      	lsls	r3, r3, #10
 800e084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e088:	4413      	add	r3, r2
 800e08a:	3301      	adds	r3, #1
 800e08c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e08e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e092:	3b09      	subs	r3, #9
 800e094:	69fa      	ldr	r2, [r7, #28]
 800e096:	409a      	lsls	r2, r3
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e0a2:	e0ce      	b.n	800e242 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e0a4:	4b71      	ldr	r3, [pc, #452]	; (800e26c <USER_SPI_ioctl+0x2dc>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	f003 0304 	and.w	r3, r3, #4
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d031      	beq.n	800e114 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	208d      	movs	r0, #141	; 0x8d
 800e0b4:	f7ff fd1b 	bl	800daee <send_cmd>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f040 80c3 	bne.w	800e246 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e0c0:	20ff      	movs	r0, #255	; 0xff
 800e0c2:	f7ff fc21 	bl	800d908 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e0c6:	f107 030c 	add.w	r3, r7, #12
 800e0ca:	2110      	movs	r1, #16
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7ff fcb3 	bl	800da38 <rcvr_datablock>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 80b6 	beq.w	800e246 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e0da:	2330      	movs	r3, #48	; 0x30
 800e0dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e0e0:	e007      	b.n	800e0f2 <USER_SPI_ioctl+0x162>
 800e0e2:	20ff      	movs	r0, #255	; 0xff
 800e0e4:	f7ff fc10 	bl	800d908 <xchg_spi>
 800e0e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e0f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1f3      	bne.n	800e0e2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e0fa:	7dbb      	ldrb	r3, [r7, #22]
 800e0fc:	091b      	lsrs	r3, r3, #4
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	461a      	mov	r2, r3
 800e102:	2310      	movs	r3, #16
 800e104:	fa03 f202 	lsl.w	r2, r3, r2
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e112:	e098      	b.n	800e246 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e114:	2100      	movs	r1, #0
 800e116:	2009      	movs	r0, #9
 800e118:	f7ff fce9 	bl	800daee <send_cmd>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f040 8091 	bne.w	800e246 <USER_SPI_ioctl+0x2b6>
 800e124:	f107 030c 	add.w	r3, r7, #12
 800e128:	2110      	movs	r1, #16
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fc84 	bl	800da38 <rcvr_datablock>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 8087 	beq.w	800e246 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e138:	4b4c      	ldr	r3, [pc, #304]	; (800e26c <USER_SPI_ioctl+0x2dc>)
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	f003 0302 	and.w	r3, r3, #2
 800e140:	2b00      	cmp	r3, #0
 800e142:	d012      	beq.n	800e16a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e144:	7dbb      	ldrb	r3, [r7, #22]
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800e14c:	7dfa      	ldrb	r2, [r7, #23]
 800e14e:	09d2      	lsrs	r2, r2, #7
 800e150:	b2d2      	uxtb	r2, r2
 800e152:	4413      	add	r3, r2
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	7e7b      	ldrb	r3, [r7, #25]
 800e158:	099b      	lsrs	r3, r3, #6
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	3b01      	subs	r3, #1
 800e15e:	fa02 f303 	lsl.w	r3, r2, r3
 800e162:	461a      	mov	r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	601a      	str	r2, [r3, #0]
 800e168:	e013      	b.n	800e192 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e16a:	7dbb      	ldrb	r3, [r7, #22]
 800e16c:	109b      	asrs	r3, r3, #2
 800e16e:	b29b      	uxth	r3, r3
 800e170:	f003 031f 	and.w	r3, r3, #31
 800e174:	3301      	adds	r3, #1
 800e176:	7dfa      	ldrb	r2, [r7, #23]
 800e178:	00d2      	lsls	r2, r2, #3
 800e17a:	f002 0218 	and.w	r2, r2, #24
 800e17e:	7df9      	ldrb	r1, [r7, #23]
 800e180:	0949      	lsrs	r1, r1, #5
 800e182:	b2c9      	uxtb	r1, r1
 800e184:	440a      	add	r2, r1
 800e186:	3201      	adds	r2, #1
 800e188:	fb02 f303 	mul.w	r3, r2, r3
 800e18c:	461a      	mov	r2, r3
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e198:	e055      	b.n	800e246 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e19a:	4b34      	ldr	r3, [pc, #208]	; (800e26c <USER_SPI_ioctl+0x2dc>)
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	f003 0306 	and.w	r3, r3, #6
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d051      	beq.n	800e24a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e1a6:	f107 020c 	add.w	r2, r7, #12
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	210b      	movs	r1, #11
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff feee 	bl	800df90 <USER_SPI_ioctl>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d149      	bne.n	800e24e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e1ba:	7b3b      	ldrb	r3, [r7, #12]
 800e1bc:	099b      	lsrs	r3, r3, #6
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d104      	bne.n	800e1ce <USER_SPI_ioctl+0x23e>
 800e1c4:	7dbb      	ldrb	r3, [r7, #22]
 800e1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d041      	beq.n	800e252 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	623b      	str	r3, [r7, #32]
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800e1de:	4b23      	ldr	r3, [pc, #140]	; (800e26c <USER_SPI_ioctl+0x2dc>)
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	f003 0308 	and.w	r3, r3, #8
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d105      	bne.n	800e1f6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	025b      	lsls	r3, r3, #9
 800e1ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	025b      	lsls	r3, r3, #9
 800e1f4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1f8:	2020      	movs	r0, #32
 800e1fa:	f7ff fc78 	bl	800daee <send_cmd>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d128      	bne.n	800e256 <USER_SPI_ioctl+0x2c6>
 800e204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e206:	2021      	movs	r0, #33	; 0x21
 800e208:	f7ff fc71 	bl	800daee <send_cmd>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d121      	bne.n	800e256 <USER_SPI_ioctl+0x2c6>
 800e212:	2100      	movs	r1, #0
 800e214:	2026      	movs	r0, #38	; 0x26
 800e216:	f7ff fc6a 	bl	800daee <send_cmd>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d11a      	bne.n	800e256 <USER_SPI_ioctl+0x2c6>
 800e220:	f247 5030 	movw	r0, #30000	; 0x7530
 800e224:	f7ff fbbd 	bl	800d9a2 <wait_ready>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d013      	beq.n	800e256 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e22e:	2300      	movs	r3, #0
 800e230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e234:	e00f      	b.n	800e256 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e236:	2304      	movs	r3, #4
 800e238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e23c:	e00c      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		break;
 800e23e:	bf00      	nop
 800e240:	e00a      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		break;
 800e242:	bf00      	nop
 800e244:	e008      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		break;
 800e246:	bf00      	nop
 800e248:	e006      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e24a:	bf00      	nop
 800e24c:	e004      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e24e:	bf00      	nop
 800e250:	e002      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e252:	bf00      	nop
 800e254:	e000      	b.n	800e258 <USER_SPI_ioctl+0x2c8>
		break;
 800e256:	bf00      	nop
	}

	despiselect();
 800e258:	f7ff fbc6 	bl	800d9e8 <despiselect>

	return res;
 800e25c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e260:	4618      	mov	r0, r3
 800e262:	3730      	adds	r7, #48	; 0x30
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	2400002c 	.word	0x2400002c
 800e26c:	2400a3c8 	.word	0x2400a3c8

0800e270 <nRF24_CSN_L>:
{
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L()
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 800e274:	2200      	movs	r2, #0
 800e276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e27a:	4802      	ldr	r0, [pc, #8]	; (800e284 <nRF24_CSN_L+0x14>)
 800e27c:	f7f7 f8be 	bl	80053fc <HAL_GPIO_WritePin>
}
 800e280:	bf00      	nop
 800e282:	bd80      	pop	{r7, pc}
 800e284:	58020c00 	.word	0x58020c00

0800e288 <nRF24_CSN_H>:

static inline void nRF24_CSN_H()
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 800e28c:	2201      	movs	r2, #1
 800e28e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e292:	4802      	ldr	r0, [pc, #8]	; (800e29c <nRF24_CSN_H+0x14>)
 800e294:	f7f7 f8b2 	bl	80053fc <HAL_GPIO_WritePin>
}
 800e298:	bf00      	nop
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	58020c00 	.word	0x58020c00

0800e2a0 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af02      	add	r7, sp, #8
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&NRF_SPI_HANDLE,&data,&result,1,2000)!=HAL_OK)
 800e2aa:	f107 020f 	add.w	r2, r7, #15
 800e2ae:	1df9      	adds	r1, r7, #7
 800e2b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	4806      	ldr	r0, [pc, #24]	; (800e2d4 <nRF24_LL_RW+0x34>)
 800e2ba:	f7fb fdf9 	bl	8009eb0 <HAL_SPI_TransmitReceive>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <nRF24_LL_RW+0x28>
//    if(HAL_SPI_TransmitReceive_DMA(&NRF_SPI_HANDLE,&data,&result,1)!=HAL_OK)
    {
        Error_Handler();
 800e2c4:	f7f3 fab7 	bl	8001836 <Error_Handler>
    };
    return result;
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	2400a744 	.word	0x2400a744

0800e2d8 <nRF24_ReadReg>:
// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	nRF24_CSN_H();
 800e2e2:	f7ff ffd1 	bl	800e288 <nRF24_CSN_H>
		HAL_Delay(1);
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	f7f4 f9ec 	bl	80026c4 <HAL_Delay>
	nRF24_CSN_L();
 800e2ec:	f7ff ffc0 	bl	800e270 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	f003 031f 	and.w	r3, r3, #31
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7ff ffd1 	bl	800e2a0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 800e2fe:	20ff      	movs	r0, #255	; 0xff
 800e300:	f7ff ffce 	bl	800e2a0 <nRF24_LL_RW>
 800e304:	4603      	mov	r3, r0
 800e306:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800e308:	f7ff ffbe 	bl	800e288 <nRF24_CSN_H>

	return value;
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <nRF24_WriteReg>:
// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b082      	sub	sp, #8
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	4603      	mov	r3, r0
 800e31e:	460a      	mov	r2, r1
 800e320:	71fb      	strb	r3, [r7, #7]
 800e322:	4613      	mov	r3, r2
 800e324:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_H();
 800e326:	f7ff ffaf 	bl	800e288 <nRF24_CSN_H>
	HAL_Delay(1);
 800e32a:	2001      	movs	r0, #1
 800e32c:	f7f4 f9ca 	bl	80026c4 <HAL_Delay>
	nRF24_CSN_L();
 800e330:	f7ff ff9e 	bl	800e270 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	2b1f      	cmp	r3, #31
 800e338:	d810      	bhi.n	800e35c <nRF24_WriteReg+0x46>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800e33a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e33e:	f003 031f 	and.w	r3, r3, #31
 800e342:	b25b      	sxtb	r3, r3
 800e344:	f043 0320 	orr.w	r3, r3, #32
 800e348:	b25b      	sxtb	r3, r3
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ffa7 	bl	800e2a0 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800e352:	79bb      	ldrb	r3, [r7, #6]
 800e354:	4618      	mov	r0, r3
 800e356:	f7ff ffa3 	bl	800e2a0 <nRF24_LL_RW>
 800e35a:	e013      	b.n	800e384 <nRF24_WriteReg+0x6e>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff ff9e 	bl	800e2a0 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	2be1      	cmp	r3, #225	; 0xe1
 800e368:	d00c      	beq.n	800e384 <nRF24_WriteReg+0x6e>
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	2be2      	cmp	r3, #226	; 0xe2
 800e36e:	d009      	beq.n	800e384 <nRF24_WriteReg+0x6e>
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	2be3      	cmp	r3, #227	; 0xe3
 800e374:	d006      	beq.n	800e384 <nRF24_WriteReg+0x6e>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 800e376:	79fb      	ldrb	r3, [r7, #7]
 800e378:	2bff      	cmp	r3, #255	; 0xff
 800e37a:	d003      	beq.n	800e384 <nRF24_WriteReg+0x6e>
		{
			// Send register value
			nRF24_LL_RW(value);
 800e37c:	79bb      	ldrb	r3, [r7, #6]
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff ff8e 	bl	800e2a0 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800e384:	f7ff ff80 	bl	800e288 <nRF24_CSN_H>
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <nRF24_ReadMBReg>:
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	4603      	mov	r3, r0
 800e398:	6039      	str	r1, [r7, #0]
 800e39a:	71fb      	strb	r3, [r7, #7]
 800e39c:	4613      	mov	r3, r2
 800e39e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_H();
 800e3a0:	f7ff ff72 	bl	800e288 <nRF24_CSN_H>
	HAL_Delay(1);
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	f7f4 f98d 	bl	80026c4 <HAL_Delay>
	nRF24_CSN_L();
 800e3aa:	f7ff ff61 	bl	800e270 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff ff75 	bl	800e2a0 <nRF24_LL_RW>
//	uint8_t data = 9;
//	if(HAL_SPI_Transmit(&NRF_SPI_HANDLE,&reg,1,2000)!=HAL_OK)
//	{
//		Error_Handler();
//	};
	while (count--)
 800e3b6:	e007      	b.n	800e3c8 <nRF24_ReadMBReg+0x38>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800e3b8:	683c      	ldr	r4, [r7, #0]
 800e3ba:	1c63      	adds	r3, r4, #1
 800e3bc:	603b      	str	r3, [r7, #0]
 800e3be:	20ff      	movs	r0, #255	; 0xff
 800e3c0:	f7ff ff6e 	bl	800e2a0 <nRF24_LL_RW>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	7023      	strb	r3, [r4, #0]
	while (count--)
 800e3c8:	79bb      	ldrb	r3, [r7, #6]
 800e3ca:	1e5a      	subs	r2, r3, #1
 800e3cc:	71ba      	strb	r2, [r7, #6]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1f2      	bne.n	800e3b8 <nRF24_ReadMBReg+0x28>
//		HAL_SPI_Receive(&NRF_SPI_HANDLE,&data,1,2000);
//		*pBuf++ = data;
	}
	nRF24_CSN_H();
 800e3d2:	f7ff ff59 	bl	800e288 <nRF24_CSN_H>
}
 800e3d6:	bf00      	nop
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd90      	pop	{r4, r7, pc}

0800e3de <nRF24_WriteMBReg>:
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	6039      	str	r1, [r7, #0]
 800e3e8:	71fb      	strb	r3, [r7, #7]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_H();
 800e3ee:	f7ff ff4b 	bl	800e288 <nRF24_CSN_H>
	HAL_Delay(1);
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	f7f4 f966 	bl	80026c4 <HAL_Delay>
	nRF24_CSN_L();
 800e3f8:	f7ff ff3a 	bl	800e270 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800e3fc:	79fb      	ldrb	r3, [r7, #7]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff ff4e 	bl	800e2a0 <nRF24_LL_RW>
	while (count--)
 800e404:	e006      	b.n	800e414 <nRF24_WriteMBReg+0x36>
	{
		nRF24_LL_RW(*pBuf++);
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	603a      	str	r2, [r7, #0]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff ff46 	bl	800e2a0 <nRF24_LL_RW>
	while (count--)
 800e414:	79bb      	ldrb	r3, [r7, #6]
 800e416:	1e5a      	subs	r2, r3, #1
 800e418:	71ba      	strb	r2, [r7, #6]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1f3      	bne.n	800e406 <nRF24_WriteMBReg+0x28>
	}
	nRF24_CSN_H();
 800e41e:	f7ff ff33 	bl	800e288 <nRF24_CSN_H>
}
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800e42e:	2108      	movs	r1, #8
 800e430:	2000      	movs	r0, #0
 800e432:	f7ff ff70 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800e436:	213f      	movs	r1, #63	; 0x3f
 800e438:	2001      	movs	r0, #1
 800e43a:	f7ff ff6c 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800e43e:	2103      	movs	r1, #3
 800e440:	2002      	movs	r0, #2
 800e442:	f7ff ff68 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800e446:	2103      	movs	r1, #3
 800e448:	2003      	movs	r0, #3
 800e44a:	f7ff ff64 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800e44e:	2103      	movs	r1, #3
 800e450:	2004      	movs	r0, #4
 800e452:	f7ff ff60 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800e456:	2102      	movs	r1, #2
 800e458:	2005      	movs	r0, #5
 800e45a:	f7ff ff5c 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800e45e:	210e      	movs	r1, #14
 800e460:	2006      	movs	r0, #6
 800e462:	f7ff ff58 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800e466:	2100      	movs	r1, #0
 800e468:	2007      	movs	r0, #7
 800e46a:	f7ff ff54 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800e46e:	2100      	movs	r1, #0
 800e470:	2011      	movs	r0, #17
 800e472:	f7ff ff50 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800e476:	2100      	movs	r1, #0
 800e478:	2012      	movs	r0, #18
 800e47a:	f7ff ff4c 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800e47e:	2100      	movs	r1, #0
 800e480:	2013      	movs	r0, #19
 800e482:	f7ff ff48 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800e486:	2100      	movs	r1, #0
 800e488:	2014      	movs	r0, #20
 800e48a:	f7ff ff44 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800e48e:	2100      	movs	r1, #0
 800e490:	2015      	movs	r0, #21
 800e492:	f7ff ff40 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800e496:	2100      	movs	r1, #0
 800e498:	2016      	movs	r0, #22
 800e49a:	f7ff ff3c 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800e49e:	2100      	movs	r1, #0
 800e4a0:	201c      	movs	r0, #28
 800e4a2:	f7ff ff38 	bl	800e316 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	201d      	movs	r0, #29
 800e4aa:	f7ff ff34 	bl	800e316 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800e4ae:	f000 f99b 	bl	800e7e8 <nRF24_FlushRX>
	nRF24_FlushTX();
 800e4b2:	f000 f991 	bl	800e7d8 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800e4b6:	f000 f99f 	bl	800e7f8 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800e4ba:	f7ff fee5 	bl	800e288 <nRF24_CSN_H>
}
 800e4be:	bf00      	nop
 800e4c0:	bd80      	pop	{r7, pc}
	...

0800e4c4 <nRF24_Check>:
// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800e4ca:	4b1c      	ldr	r3, [pc, #112]	; (800e53c <nRF24_Check+0x78>)
 800e4cc:	613b      	str	r3, [r7, #16]


	uint8_t resetTX[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800e4ce:	4a1c      	ldr	r2, [pc, #112]	; (800e540 <nRF24_Check+0x7c>)
 800e4d0:	463b      	mov	r3, r7
 800e4d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4d6:	6018      	str	r0, [r3, #0]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	7019      	strb	r1, [r3, #0]

//	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
//	// Write test TX address and read TX_ADDR register
//	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
//	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, (uint8_t *)resetTX, 5);
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800e4dc:	f107 0308 	add.w	r3, r7, #8
 800e4e0:	2205      	movs	r2, #5
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	2010      	movs	r0, #16
 800e4e6:	f7ff ff53 	bl	800e390 <nRF24_ReadMBReg>
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800e4ea:	2205      	movs	r2, #5
 800e4ec:	6939      	ldr	r1, [r7, #16]
 800e4ee:	2030      	movs	r0, #48	; 0x30
 800e4f0:	f7ff ff75 	bl	800e3de <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	2205      	movs	r2, #5
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	2010      	movs	r0, #16
 800e4fe:	f7ff ff47 	bl	800e390 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++)
 800e502:	2300      	movs	r3, #0
 800e504:	75fb      	strb	r3, [r7, #23]
 800e506:	e010      	b.n	800e52a <nRF24_Check+0x66>
	{
		if (rxbuf[i] != *ptr++) return 0;
 800e508:	7dfb      	ldrb	r3, [r7, #23]
 800e50a:	f107 0218 	add.w	r2, r7, #24
 800e50e:	4413      	add	r3, r2
 800e510:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	1c59      	adds	r1, r3, #1
 800e518:	6139      	str	r1, [r7, #16]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d001      	beq.n	800e524 <nRF24_Check+0x60>
 800e520:	2300      	movs	r3, #0
 800e522:	e006      	b.n	800e532 <nRF24_Check+0x6e>
	for (i = 0; i < 5; i++)
 800e524:	7dfb      	ldrb	r3, [r7, #23]
 800e526:	3301      	adds	r3, #1
 800e528:	75fb      	strb	r3, [r7, #23]
 800e52a:	7dfb      	ldrb	r3, [r7, #23]
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	d9eb      	bls.n	800e508 <nRF24_Check+0x44>
	}

	return 1;
 800e530:	2301      	movs	r3, #1
}
 800e532:	4618      	mov	r0, r3
 800e534:	3718      	adds	r7, #24
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	08018ffc 	.word	0x08018ffc
 800e540:	08019004 	.word	0x08019004

0800e544 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	4603      	mov	r3, r0
 800e54c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800e54e:	2000      	movs	r0, #0
 800e550:	f7ff fec2 	bl	800e2d8 <nRF24_ReadReg>
 800e554:	4603      	mov	r3, r0
 800e556:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 800e558:	79fb      	ldrb	r3, [r7, #7]
 800e55a:	2b02      	cmp	r3, #2
 800e55c:	d104      	bne.n	800e568 <nRF24_SetPowerMode+0x24>
	{
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800e55e:	7bfb      	ldrb	r3, [r7, #15]
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	73fb      	strb	r3, [r7, #15]
 800e566:	e003      	b.n	800e570 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	f023 0302 	bic.w	r3, r3, #2
 800e56e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800e570:	7bfb      	ldrb	r3, [r7, #15]
 800e572:	4619      	mov	r1, r3
 800e574:	2000      	movs	r0, #0
 800e576:	f7ff fece 	bl	800e316 <nRF24_WriteReg>
}
 800e57a:	bf00      	nop
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b084      	sub	sp, #16
 800e586:	af00      	add	r7, sp, #0
 800e588:	4603      	mov	r3, r0
 800e58a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800e58c:	2000      	movs	r0, #0
 800e58e:	f7ff fea3 	bl	800e2d8 <nRF24_ReadReg>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800e596:	7bfb      	ldrb	r3, [r7, #15]
 800e598:	f023 0301 	bic.w	r3, r3, #1
 800e59c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800e59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	b25a      	sxtb	r2, r3
 800e5a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	b25b      	sxtb	r3, r3
 800e5b0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	f7ff fead 	bl	800e316 <nRF24_WriteReg>
}
 800e5bc:	bf00      	nop
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <nRF24_SetRFChannel>:
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	2005      	movs	r0, #5
 800e5d4:	f7ff fe9f 	bl	800e316 <nRF24_WriteReg>
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <nRF24_SetAddrWidth>:
// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800e5ea:	79fb      	ldrb	r3, [r7, #7]
 800e5ec:	3b02      	subs	r3, #2
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	2003      	movs	r0, #3
 800e5f4:	f7ff fe8f 	bl	800e316 <nRF24_WriteReg>
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <nRF24_SetAddr>:
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	6039      	str	r1, [r7, #0]
 800e60a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	2b06      	cmp	r3, #6
 800e610:	d00a      	beq.n	800e628 <nRF24_SetAddr+0x28>
 800e612:	2b06      	cmp	r3, #6
 800e614:	dc36      	bgt.n	800e684 <nRF24_SetAddr+0x84>
 800e616:	2b01      	cmp	r3, #1
 800e618:	dc02      	bgt.n	800e620 <nRF24_SetAddr+0x20>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	da04      	bge.n	800e628 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800e61e:	e031      	b.n	800e684 <nRF24_SetAddr+0x84>
 800e620:	3b02      	subs	r3, #2
	switch (pipe)
 800e622:	2b03      	cmp	r3, #3
 800e624:	d82e      	bhi.n	800e684 <nRF24_SetAddr+0x84>
 800e626:	e023      	b.n	800e670 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800e628:	2003      	movs	r0, #3
 800e62a:	f7ff fe55 	bl	800e2d8 <nRF24_ReadReg>
 800e62e:	4603      	mov	r3, r0
 800e630:	3301      	adds	r3, #1
 800e632:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	683a      	ldr	r2, [r7, #0]
 800e638:	4413      	add	r3, r2
 800e63a:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 800e63c:	f7ff fe18 	bl	800e270 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	4a13      	ldr	r2, [pc, #76]	; (800e690 <nRF24_SetAddr+0x90>)
 800e644:	5cd3      	ldrb	r3, [r2, r3]
 800e646:	f043 0320 	orr.w	r3, r3, #32
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fe27 	bl	800e2a0 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	1e5a      	subs	r2, r3, #1
 800e656:	603a      	str	r2, [r7, #0]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff fe20 	bl	800e2a0 <nRF24_LL_RW>
			} while (addr_width--);
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	1e5a      	subs	r2, r3, #1
 800e664:	73fa      	strb	r2, [r7, #15]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1f3      	bne.n	800e652 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 800e66a:	f7ff fe0d 	bl	800e288 <nRF24_CSN_H>
			break;
 800e66e:	e00a      	b.n	800e686 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800e670:	79fb      	ldrb	r3, [r7, #7]
 800e672:	4a07      	ldr	r2, [pc, #28]	; (800e690 <nRF24_SetAddr+0x90>)
 800e674:	5cd2      	ldrb	r2, [r2, r3]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7ff fe4a 	bl	800e316 <nRF24_WriteReg>
			break;
 800e682:	e000      	b.n	800e686 <nRF24_SetAddr+0x86>
			break;
 800e684:	bf00      	nop
	}
}
 800e686:	bf00      	nop
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	08019564 	.word	0x08019564

0800e694 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	4603      	mov	r3, r0
 800e69c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800e69e:	2006      	movs	r0, #6
 800e6a0:	f7ff fe1a 	bl	800e2d8 <nRF24_ReadReg>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800e6ae:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800e6b0:	7bfa      	ldrb	r2, [r7, #15]
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800e6b8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	2006      	movs	r0, #6
 800e6be:	f7ff fe2a 	bl	800e316 <nRF24_WriteReg>
}
 800e6c2:	bf00      	nop
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
	...

0800e6cc <nRF24_SetRXPipe>:
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	71fb      	strb	r3, [r7, #7]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	71bb      	strb	r3, [r7, #6]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800e6de:	2002      	movs	r0, #2
 800e6e0:	f7ff fdfa 	bl	800e2d8 <nRF24_ReadReg>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	b25a      	sxtb	r2, r3
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e6f0:	b25b      	sxtb	r3, r3
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	b25b      	sxtb	r3, r3
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6fc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
 800e700:	4619      	mov	r1, r3
 800e702:	2002      	movs	r0, #2
 800e704:	f7ff fe07 	bl	800e316 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	4a19      	ldr	r2, [pc, #100]	; (800e770 <nRF24_SetRXPipe+0xa4>)
 800e70c:	5cd2      	ldrb	r2, [r2, r3]
 800e70e:	797b      	ldrb	r3, [r7, #5]
 800e710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e714:	b2db      	uxtb	r3, r3
 800e716:	4619      	mov	r1, r3
 800e718:	4610      	mov	r0, r2
 800e71a:	f7ff fdfc 	bl	800e316 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800e71e:	2001      	movs	r0, #1
 800e720:	f7ff fdda 	bl	800e2d8 <nRF24_ReadReg>
 800e724:	4603      	mov	r3, r0
 800e726:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 800e728:	79bb      	ldrb	r3, [r7, #6]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d10a      	bne.n	800e744 <nRF24_SetRXPipe+0x78>
	{
		reg |=  (1 << pipe);
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	2201      	movs	r2, #1
 800e732:	fa02 f303 	lsl.w	r3, r2, r3
 800e736:	b25a      	sxtb	r2, r3
 800e738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	b25b      	sxtb	r3, r3
 800e740:	73fb      	strb	r3, [r7, #15]
 800e742:	e00b      	b.n	800e75c <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	2201      	movs	r2, #1
 800e748:	fa02 f303 	lsl.w	r3, r2, r3
 800e74c:	b25b      	sxtb	r3, r3
 800e74e:	43db      	mvns	r3, r3
 800e750:	b25a      	sxtb	r2, r3
 800e752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e756:	4013      	ands	r3, r2
 800e758:	b25b      	sxtb	r3, r3
 800e75a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
 800e75e:	4619      	mov	r1, r3
 800e760:	2001      	movs	r0, #1
 800e762:	f7ff fdd8 	bl	800e316 <nRF24_WriteReg>
}
 800e766:	bf00      	nop
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	0801955c 	.word	0x0801955c

0800e774 <nRF24_DisableAA>:

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5)
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	2b05      	cmp	r3, #5
 800e782:	d904      	bls.n	800e78e <nRF24_DisableAA+0x1a>
	{
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 800e784:	2100      	movs	r1, #0
 800e786:	2001      	movs	r0, #1
 800e788:	f7ff fdc5 	bl	800e316 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 800e78c:	e015      	b.n	800e7ba <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800e78e:	2001      	movs	r0, #1
 800e790:	f7ff fda2 	bl	800e2d8 <nRF24_ReadReg>
 800e794:	4603      	mov	r3, r0
 800e796:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	2201      	movs	r2, #1
 800e79c:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a0:	b25b      	sxtb	r3, r3
 800e7a2:	43db      	mvns	r3, r3
 800e7a4:	b25a      	sxtb	r2, r3
 800e7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	b25b      	sxtb	r3, r3
 800e7ae:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	f7ff fdae 	bl	800e316 <nRF24_WriteReg>
}
 800e7ba:	bf00      	nop
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <nRF24_GetStatus_RXFIFO>:
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800e7c6:	2017      	movs	r0, #23
 800e7c8:	f7ff fd86 	bl	800e2d8 <nRF24_ReadReg>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	f003 0303 	and.w	r3, r3, #3
 800e7d2:	b2db      	uxtb	r3, r3
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <nRF24_FlushTX>:
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800e7dc:	21ff      	movs	r1, #255	; 0xff
 800e7de:	20e1      	movs	r0, #225	; 0xe1
 800e7e0:	f7ff fd99 	bl	800e316 <nRF24_WriteReg>
}
 800e7e4:	bf00      	nop
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800e7ec:	21ff      	movs	r1, #255	; 0xff
 800e7ee:	20e2      	movs	r0, #226	; 0xe2
 800e7f0:	f7ff fd91 	bl	800e316 <nRF24_WriteReg>
}
 800e7f4:	bf00      	nop
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800e7fe:	2007      	movs	r0, #7
 800e800:	f7ff fd6a 	bl	800e2d8 <nRF24_ReadReg>
 800e804:	4603      	mov	r3, r0
 800e806:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e80e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800e810:	79fb      	ldrb	r3, [r7, #7]
 800e812:	4619      	mov	r1, r3
 800e814:	2007      	movs	r0, #7
 800e816:	f7ff fd7e 	bl	800e316 <nRF24_WriteReg>
}
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <nRF24_GetRxDplPayloadWidth>:
{
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth()
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800e828:	f7ff fd22 	bl	800e270 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800e82c:	2060      	movs	r0, #96	; 0x60
 800e82e:	f7ff fd37 	bl	800e2a0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 800e832:	20ff      	movs	r0, #255	; 0xff
 800e834:	f7ff fd34 	bl	800e2a0 <nRF24_LL_RW>
 800e838:	4603      	mov	r3, r0
 800e83a:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800e83c:	f7ff fd24 	bl	800e288 <nRF24_CSN_H>

	return value;
 800e840:	79fb      	ldrb	r3, [r7, #7]

}
 800e842:	4618      	mov	r0, r3
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	4613      	mov	r3, r2
 800e858:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800e85a:	2007      	movs	r0, #7
 800e85c:	f7ff fd3c 	bl	800e2d8 <nRF24_ReadReg>
 800e860:	4603      	mov	r3, r0
 800e862:	105b      	asrs	r3, r3, #1
 800e864:	b2db      	uxtb	r3, r3
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
 800e86e:	2b05      	cmp	r3, #5
 800e870:	d829      	bhi.n	800e8c6 <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if(dpl)
 800e872:	79fb      	ldrb	r3, [r7, #7]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00f      	beq.n	800e898 <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 800e878:	f7ff ffd3 	bl	800e822 <nRF24_GetRxDplPayloadWidth>
 800e87c:	4603      	mov	r3, r0
 800e87e:	461a      	mov	r2, r3
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	701a      	strb	r2, [r3, #0]
			if(*length>32)
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	2b20      	cmp	r3, #32
 800e88a:	d90f      	bls.n	800e8ac <nRF24_ReadPayloadGeneric+0x60>
			{ //broken packet
				*length = 0;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	2200      	movs	r2, #0
 800e890:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 800e892:	f7ff ffa9 	bl	800e7e8 <nRF24_FlushRX>
 800e896:	e009      	b.n	800e8ac <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	4a0f      	ldr	r2, [pc, #60]	; (800e8d8 <nRF24_ReadPayloadGeneric+0x8c>)
 800e89c:	5cd3      	ldrb	r3, [r2, r3]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff fd1a 	bl	800e2d8 <nRF24_ReadReg>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length)
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d006      	beq.n	800e8c2 <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	68f9      	ldr	r1, [r7, #12]
 800e8bc:	2061      	movs	r0, #97	; 0x61
 800e8be:	f7ff fd67 	bl	800e390 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	e003      	b.n	800e8ce <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800e8cc:	23ff      	movs	r3, #255	; 0xff
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	0801955c 	.word	0x0801955c

0800e8dc <nRF24_ReadPayload>:
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	6839      	ldr	r1, [r7, #0]
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7ff ffae 	bl	800e84c <nRF24_ReadPayloadGeneric>
 800e8f0:	4603      	mov	r3, r0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 800e906:	1df9      	adds	r1, r7, #7
 800e908:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e90c:	2201      	movs	r2, #1
 800e90e:	4803      	ldr	r0, [pc, #12]	; (800e91c <DEV_SPI_WRite+0x20>)
 800e910:	f7fb f8dc 	bl	8009acc <HAL_SPI_Transmit>
}
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	2400a6bc 	.word	0x2400a6bc

0800e920 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800e924:	2201      	movs	r2, #1
 800e926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e92a:	480a      	ldr	r0, [pc, #40]	; (800e954 <DEV_Module_Init+0x34>)
 800e92c:	f7f6 fd66 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 800e930:	2201      	movs	r2, #1
 800e932:	2140      	movs	r1, #64	; 0x40
 800e934:	4807      	ldr	r0, [pc, #28]	; (800e954 <DEV_Module_Init+0x34>)
 800e936:	f7f6 fd61 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800e93a:	2201      	movs	r2, #1
 800e93c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e940:	4805      	ldr	r0, [pc, #20]	; (800e958 <DEV_Module_Init+0x38>)
 800e942:	f7f6 fd5b 	bl	80053fc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800e946:	2100      	movs	r1, #0
 800e948:	4804      	ldr	r0, [pc, #16]	; (800e95c <DEV_Module_Init+0x3c>)
 800e94a:	f7fc f8ff 	bl	800ab4c <HAL_TIM_PWM_Start>
		return 0;
 800e94e:	2300      	movs	r3, #0
}
 800e950:	4618      	mov	r0, r3
 800e952:	bd80      	pop	{r7, pc}
 800e954:	58021800 	.word	0x58021800
 800e958:	58021400 	.word	0x58021400
 800e95c:	2400a7cc 	.word	0x2400a7cc

0800e960 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	4604      	mov	r4, r0
 800e968:	4608      	mov	r0, r1
 800e96a:	4611      	mov	r1, r2
 800e96c:	461a      	mov	r2, r3
 800e96e:	4623      	mov	r3, r4
 800e970:	80fb      	strh	r3, [r7, #6]
 800e972:	4603      	mov	r3, r0
 800e974:	80bb      	strh	r3, [r7, #4]
 800e976:	460b      	mov	r3, r1
 800e978:	807b      	strh	r3, [r7, #2]
 800e97a:	4613      	mov	r3, r2
 800e97c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800e97e:	4a1c      	ldr	r2, [pc, #112]	; (800e9f0 <Paint_NewImage+0x90>)
 800e980:	88fb      	ldrh	r3, [r7, #6]
 800e982:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800e984:	4a1a      	ldr	r2, [pc, #104]	; (800e9f0 <Paint_NewImage+0x90>)
 800e986:	88bb      	ldrh	r3, [r7, #4]
 800e988:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800e98a:	4a19      	ldr	r2, [pc, #100]	; (800e9f0 <Paint_NewImage+0x90>)
 800e98c:	883b      	ldrh	r3, [r7, #0]
 800e98e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800e990:	4a17      	ldr	r2, [pc, #92]	; (800e9f0 <Paint_NewImage+0x90>)
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800e996:	4a16      	ldr	r2, [pc, #88]	; (800e9f0 <Paint_NewImage+0x90>)
 800e998:	88bb      	ldrh	r3, [r7, #4]
 800e99a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800e99c:	4b14      	ldr	r3, [pc, #80]	; (800e9f0 <Paint_NewImage+0x90>)
 800e99e:	8a5b      	ldrh	r3, [r3, #18]
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4b12      	ldr	r3, [pc, #72]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9a6:	8a9b      	ldrh	r3, [r3, #20]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4811      	ldr	r0, [pc, #68]	; (800e9f4 <Paint_NewImage+0x94>)
 800e9ae:	f006 ffc5 	bl	801593c <iprintf>
   
    Paint.Rotate = Rotate;
 800e9b2:	4a0f      	ldr	r2, [pc, #60]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9b4:	887b      	ldrh	r3, [r7, #2]
 800e9b6:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800e9b8:	4b0d      	ldr	r3, [pc, #52]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800e9be:	887b      	ldrh	r3, [r7, #2]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <Paint_NewImage+0x6a>
 800e9c4:	887b      	ldrh	r3, [r7, #2]
 800e9c6:	2bb4      	cmp	r3, #180	; 0xb4
 800e9c8:	d106      	bne.n	800e9d8 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800e9ca:	4a09      	ldr	r2, [pc, #36]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9cc:	88fb      	ldrh	r3, [r7, #6]
 800e9ce:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800e9d0:	4a07      	ldr	r2, [pc, #28]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9d2:	88bb      	ldrh	r3, [r7, #4]
 800e9d4:	80d3      	strh	r3, [r2, #6]
 800e9d6:	e006      	b.n	800e9e6 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800e9d8:	4a05      	ldr	r2, [pc, #20]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9da:	88bb      	ldrh	r3, [r7, #4]
 800e9dc:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800e9de:	4a04      	ldr	r2, [pc, #16]	; (800e9f0 <Paint_NewImage+0x90>)
 800e9e0:	88fb      	ldrh	r3, [r7, #6]
 800e9e2:	80d3      	strh	r3, [r2, #6]
    }
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd90      	pop	{r4, r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	2400ae28 	.word	0x2400ae28
 800e9f4:	0801900c 	.word	0x0801900c

0800e9f8 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800ea00:	4a04      	ldr	r2, [pc, #16]	; (800ea14 <Paint_SetClearFuntion+0x1c>)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6013      	str	r3, [r2, #0]
}
 800ea06:	bf00      	nop
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	2400ae40 	.word	0x2400ae40

0800ea18 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800ea20:	4a04      	ldr	r2, [pc, #16]	; (800ea34 <Paint_SetDisplayFuntion+0x1c>)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6013      	str	r3, [r2, #0]
}
 800ea26:	bf00      	nop
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	2400ae24 	.word	0x2400ae24

0800ea38 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	80fb      	strh	r3, [r7, #6]
 800ea42:	460b      	mov	r3, r1
 800ea44:	80bb      	strh	r3, [r7, #4]
 800ea46:	4613      	mov	r3, r2
 800ea48:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ea4a:	4b50      	ldr	r3, [pc, #320]	; (800eb8c <Paint_SetPixel+0x154>)
 800ea4c:	889b      	ldrh	r3, [r3, #4]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d805      	bhi.n	800ea62 <Paint_SetPixel+0x2a>
 800ea56:	4b4d      	ldr	r3, [pc, #308]	; (800eb8c <Paint_SetPixel+0x154>)
 800ea58:	88db      	ldrh	r3, [r3, #6]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	88ba      	ldrh	r2, [r7, #4]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d903      	bls.n	800ea6a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800ea62:	484b      	ldr	r0, [pc, #300]	; (800eb90 <Paint_SetPixel+0x158>)
 800ea64:	f006 fff0 	bl	8015a48 <puts>
        return;
 800ea68:	e08c      	b.n	800eb84 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800ea6a:	4b48      	ldr	r3, [pc, #288]	; (800eb8c <Paint_SetPixel+0x154>)
 800ea6c:	89db      	ldrh	r3, [r3, #14]
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ea74:	d02d      	beq.n	800ead2 <Paint_SetPixel+0x9a>
 800ea76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ea7a:	f300 8080 	bgt.w	800eb7e <Paint_SetPixel+0x146>
 800ea7e:	2bb4      	cmp	r3, #180	; 0xb4
 800ea80:	d016      	beq.n	800eab0 <Paint_SetPixel+0x78>
 800ea82:	2bb4      	cmp	r3, #180	; 0xb4
 800ea84:	dc7b      	bgt.n	800eb7e <Paint_SetPixel+0x146>
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d002      	beq.n	800ea90 <Paint_SetPixel+0x58>
 800ea8a:	2b5a      	cmp	r3, #90	; 0x5a
 800ea8c:	d005      	beq.n	800ea9a <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800ea8e:	e076      	b.n	800eb7e <Paint_SetPixel+0x146>
        X = Xpoint;
 800ea90:	88fb      	ldrh	r3, [r7, #6]
 800ea92:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800ea94:	88bb      	ldrh	r3, [r7, #4]
 800ea96:	81bb      	strh	r3, [r7, #12]
        break;
 800ea98:	e026      	b.n	800eae8 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800ea9a:	4b3c      	ldr	r3, [pc, #240]	; (800eb8c <Paint_SetPixel+0x154>)
 800ea9c:	891b      	ldrh	r3, [r3, #8]
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	88bb      	ldrh	r3, [r7, #4]
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800eaaa:	88fb      	ldrh	r3, [r7, #6]
 800eaac:	81bb      	strh	r3, [r7, #12]
        break;
 800eaae:	e01b      	b.n	800eae8 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800eab0:	4b36      	ldr	r3, [pc, #216]	; (800eb8c <Paint_SetPixel+0x154>)
 800eab2:	891b      	ldrh	r3, [r3, #8]
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	88fb      	ldrh	r3, [r7, #6]
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	3b01      	subs	r3, #1
 800eabe:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800eac0:	4b32      	ldr	r3, [pc, #200]	; (800eb8c <Paint_SetPixel+0x154>)
 800eac2:	895b      	ldrh	r3, [r3, #10]
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	88bb      	ldrh	r3, [r7, #4]
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	3b01      	subs	r3, #1
 800eace:	81bb      	strh	r3, [r7, #12]
        break;
 800ead0:	e00a      	b.n	800eae8 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800ead2:	88bb      	ldrh	r3, [r7, #4]
 800ead4:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800ead6:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <Paint_SetPixel+0x154>)
 800ead8:	895b      	ldrh	r3, [r3, #10]
 800eada:	b29a      	uxth	r2, r3
 800eadc:	88fb      	ldrh	r3, [r7, #6]
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	3b01      	subs	r3, #1
 800eae4:	81bb      	strh	r3, [r7, #12]
        break;
 800eae6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800eae8:	4b28      	ldr	r3, [pc, #160]	; (800eb8c <Paint_SetPixel+0x154>)
 800eaea:	8a1b      	ldrh	r3, [r3, #16]
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d847      	bhi.n	800eb82 <Paint_SetPixel+0x14a>
 800eaf2:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <Paint_SetPixel+0xc0>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb4f 	.word	0x0800eb4f
 800eafc:	0800eb09 	.word	0x0800eb09
 800eb00:	0800eb1b 	.word	0x0800eb1b
 800eb04:	0800eb2d 	.word	0x0800eb2d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800eb08:	4b20      	ldr	r3, [pc, #128]	; (800eb8c <Paint_SetPixel+0x154>)
 800eb0a:	891b      	ldrh	r3, [r3, #8]
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	89fb      	ldrh	r3, [r7, #14]
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	3b01      	subs	r3, #1
 800eb16:	81fb      	strh	r3, [r7, #14]
        break;
 800eb18:	e01a      	b.n	800eb50 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800eb1a:	4b1c      	ldr	r3, [pc, #112]	; (800eb8c <Paint_SetPixel+0x154>)
 800eb1c:	895b      	ldrh	r3, [r3, #10]
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	89bb      	ldrh	r3, [r7, #12]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	3b01      	subs	r3, #1
 800eb28:	81bb      	strh	r3, [r7, #12]
        break;
 800eb2a:	e011      	b.n	800eb50 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800eb2c:	4b17      	ldr	r3, [pc, #92]	; (800eb8c <Paint_SetPixel+0x154>)
 800eb2e:	891b      	ldrh	r3, [r3, #8]
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	89fb      	ldrh	r3, [r7, #14]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800eb3c:	4b13      	ldr	r3, [pc, #76]	; (800eb8c <Paint_SetPixel+0x154>)
 800eb3e:	895b      	ldrh	r3, [r3, #10]
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	89bb      	ldrh	r3, [r7, #12]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	81bb      	strh	r3, [r7, #12]
        break;
 800eb4c:	e000      	b.n	800eb50 <Paint_SetPixel+0x118>
        break;
 800eb4e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800eb50:	4b0e      	ldr	r3, [pc, #56]	; (800eb8c <Paint_SetPixel+0x154>)
 800eb52:	891b      	ldrh	r3, [r3, #8]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	89fa      	ldrh	r2, [r7, #14]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d805      	bhi.n	800eb68 <Paint_SetPixel+0x130>
 800eb5c:	4b0b      	ldr	r3, [pc, #44]	; (800eb8c <Paint_SetPixel+0x154>)
 800eb5e:	895b      	ldrh	r3, [r3, #10]
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	89ba      	ldrh	r2, [r7, #12]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d903      	bls.n	800eb70 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800eb68:	4809      	ldr	r0, [pc, #36]	; (800eb90 <Paint_SetPixel+0x158>)
 800eb6a:	f006 ff6d 	bl	8015a48 <puts>
        return;
 800eb6e:	e009      	b.n	800eb84 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800eb70:	4b08      	ldr	r3, [pc, #32]	; (800eb94 <Paint_SetPixel+0x15c>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	887a      	ldrh	r2, [r7, #2]
 800eb76:	89b9      	ldrh	r1, [r7, #12]
 800eb78:	89f8      	ldrh	r0, [r7, #14]
 800eb7a:	4798      	blx	r3
 800eb7c:	e002      	b.n	800eb84 <Paint_SetPixel+0x14c>
        return;
 800eb7e:	bf00      	nop
 800eb80:	e000      	b.n	800eb84 <Paint_SetPixel+0x14c>
        return;
 800eb82:	bf00      	nop
}
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	2400ae28 	.word	0x2400ae28
 800eb90:	0801910c 	.word	0x0801910c
 800eb94:	2400ae24 	.word	0x2400ae24

0800eb98 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	4603      	mov	r3, r0
 800eba0:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800eba2:	4b04      	ldr	r3, [pc, #16]	; (800ebb4 <Paint_Clear+0x1c>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	88fa      	ldrh	r2, [r7, #6]
 800eba8:	4610      	mov	r0, r2
 800ebaa:	4798      	blx	r3
}
 800ebac:	bf00      	nop
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	2400ae40 	.word	0x2400ae40

0800ebb8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	607b      	str	r3, [r7, #4]
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	81fb      	strh	r3, [r7, #14]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	81bb      	strh	r3, [r7, #12]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800ebcc:	4b3f      	ldr	r3, [pc, #252]	; (800eccc <Paint_DrawChar+0x114>)
 800ebce:	889b      	ldrh	r3, [r3, #4]
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	89fa      	ldrh	r2, [r7, #14]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d805      	bhi.n	800ebe4 <Paint_DrawChar+0x2c>
 800ebd8:	4b3c      	ldr	r3, [pc, #240]	; (800eccc <Paint_DrawChar+0x114>)
 800ebda:	88db      	ldrh	r3, [r3, #6]
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	89ba      	ldrh	r2, [r7, #12]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d903      	bls.n	800ebec <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800ebe4:	483a      	ldr	r0, [pc, #232]	; (800ecd0 <Paint_DrawChar+0x118>)
 800ebe6:	f006 ff2f 	bl	8015a48 <puts>
        return;
 800ebea:	e06b      	b.n	800ecc4 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800ebec:	7afb      	ldrb	r3, [r7, #11]
 800ebee:	3b20      	subs	r3, #32
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	88d2      	ldrh	r2, [r2, #6]
 800ebf4:	fb02 f303 	mul.w	r3, r2, r3
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	8892      	ldrh	r2, [r2, #4]
 800ebfc:	08d2      	lsrs	r2, r2, #3
 800ebfe:	b292      	uxth	r2, r2
 800ec00:	4611      	mov	r1, r2
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	8892      	ldrh	r2, [r2, #4]
 800ec06:	f002 0207 	and.w	r2, r2, #7
 800ec0a:	b292      	uxth	r2, r2
 800ec0c:	2a00      	cmp	r2, #0
 800ec0e:	bf14      	ite	ne
 800ec10:	2201      	movne	r2, #1
 800ec12:	2200      	moveq	r2, #0
 800ec14:	b2d2      	uxtb	r2, r2
 800ec16:	440a      	add	r2, r1
 800ec18:	fb02 f303 	mul.w	r3, r2, r3
 800ec1c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	4413      	add	r3, r2
 800ec26:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 800ec28:	2300      	movs	r3, #0
 800ec2a:	837b      	strh	r3, [r7, #26]
 800ec2c:	e045      	b.n	800ecba <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 800ec2e:	2300      	movs	r3, #0
 800ec30:	833b      	strh	r3, [r7, #24]
 800ec32:	e030      	b.n	800ec96 <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	8b3b      	ldrh	r3, [r7, #24]
 800ec3c:	f003 0307 	and.w	r3, r3, #7
 800ec40:	2280      	movs	r2, #128	; 0x80
 800ec42:	fa42 f303 	asr.w	r3, r2, r3
 800ec46:	400b      	ands	r3, r1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00c      	beq.n	800ec66 <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800ec4c:	89fa      	ldrh	r2, [r7, #14]
 800ec4e:	8b3b      	ldrh	r3, [r7, #24]
 800ec50:	4413      	add	r3, r2
 800ec52:	b298      	uxth	r0, r3
 800ec54:	89ba      	ldrh	r2, [r7, #12]
 800ec56:	8b7b      	ldrh	r3, [r7, #26]
 800ec58:	4413      	add	r3, r2
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ec5e:	4619      	mov	r1, r3
 800ec60:	f7ff feea 	bl	800ea38 <Paint_SetPixel>
 800ec64:	e00b      	b.n	800ec7e <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800ec66:	89fa      	ldrh	r2, [r7, #14]
 800ec68:	8b3b      	ldrh	r3, [r7, #24]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	b298      	uxth	r0, r3
 800ec6e:	89ba      	ldrh	r2, [r7, #12]
 800ec70:	8b7b      	ldrh	r3, [r7, #26]
 800ec72:	4413      	add	r3, r2
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec78:	4619      	mov	r1, r3
 800ec7a:	f7ff fedd 	bl	800ea38 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800ec7e:	8b3b      	ldrh	r3, [r7, #24]
 800ec80:	f003 0307 	and.w	r3, r3, #7
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	2b07      	cmp	r3, #7
 800ec88:	d102      	bne.n	800ec90 <Paint_DrawChar+0xd8>
            {
                ptr++;
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 800ec90:	8b3b      	ldrh	r3, [r7, #24]
 800ec92:	3301      	adds	r3, #1
 800ec94:	833b      	strh	r3, [r7, #24]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	889b      	ldrh	r3, [r3, #4]
 800ec9a:	8b3a      	ldrh	r2, [r7, #24]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d3c9      	bcc.n	800ec34 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	889b      	ldrh	r3, [r3, #4]
 800eca4:	f003 0307 	and.w	r3, r3, #7
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d002      	beq.n	800ecb4 <Paint_DrawChar+0xfc>
        {
            ptr++;
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 800ecb4:	8b7b      	ldrh	r3, [r7, #26]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	837b      	strh	r3, [r7, #26]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	88db      	ldrh	r3, [r3, #6]
 800ecbe:	8b7a      	ldrh	r2, [r7, #26]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d3b4      	bcc.n	800ec2e <Paint_DrawChar+0x76>
        }
    }// Write all
}
 800ecc4:	3720      	adds	r7, #32
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	2400ae28 	.word	0x2400ae28
 800ecd0:	08019228 	.word	0x08019228

0800ecd4 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	60ba      	str	r2, [r7, #8]
 800ecdc:	607b      	str	r3, [r7, #4]
 800ecde:	4603      	mov	r3, r0
 800ece0:	81fb      	strh	r3, [r7, #14]
 800ece2:	460b      	mov	r3, r1
 800ece4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800ece6:	89fb      	ldrh	r3, [r7, #14]
 800ece8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800ecea:	89bb      	ldrh	r3, [r7, #12]
 800ecec:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800ecee:	4b23      	ldr	r3, [pc, #140]	; (800ed7c <Paint_DrawString_EN+0xa8>)
 800ecf0:	889b      	ldrh	r3, [r3, #4]
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	89fa      	ldrh	r2, [r7, #14]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d805      	bhi.n	800ed06 <Paint_DrawString_EN+0x32>
 800ecfa:	4b20      	ldr	r3, [pc, #128]	; (800ed7c <Paint_DrawString_EN+0xa8>)
 800ecfc:	88db      	ldrh	r3, [r3, #6]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	89ba      	ldrh	r2, [r7, #12]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d933      	bls.n	800ed6e <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800ed06:	481e      	ldr	r0, [pc, #120]	; (800ed80 <Paint_DrawString_EN+0xac>)
 800ed08:	f006 fe9e 	bl	8015a48 <puts>
        return;
 800ed0c:	e033      	b.n	800ed76 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 800ed0e:	8afb      	ldrh	r3, [r7, #22]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	8892      	ldrh	r2, [r2, #4]
 800ed14:	4413      	add	r3, r2
 800ed16:	4a19      	ldr	r2, [pc, #100]	; (800ed7c <Paint_DrawString_EN+0xa8>)
 800ed18:	8892      	ldrh	r2, [r2, #4]
 800ed1a:	b292      	uxth	r2, r2
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	dd06      	ble.n	800ed2e <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 800ed20:	89fb      	ldrh	r3, [r7, #14]
 800ed22:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	88da      	ldrh	r2, [r3, #6]
 800ed28:	8abb      	ldrh	r3, [r7, #20]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 800ed2e:	8abb      	ldrh	r3, [r7, #20]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	88d2      	ldrh	r2, [r2, #6]
 800ed34:	4413      	add	r3, r2
 800ed36:	4a11      	ldr	r2, [pc, #68]	; (800ed7c <Paint_DrawString_EN+0xa8>)
 800ed38:	88d2      	ldrh	r2, [r2, #6]
 800ed3a:	b292      	uxth	r2, r2
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	dd03      	ble.n	800ed48 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 800ed40:	89fb      	ldrh	r3, [r7, #14]
 800ed42:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800ed44:	89bb      	ldrh	r3, [r7, #12]
 800ed46:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	781a      	ldrb	r2, [r3, #0]
 800ed4c:	8ab9      	ldrh	r1, [r7, #20]
 800ed4e:	8af8      	ldrh	r0, [r7, #22]
 800ed50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	8c3b      	ldrh	r3, [r7, #32]
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f7ff ff2d 	bl	800ebb8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	3301      	adds	r3, #1
 800ed62:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	889a      	ldrh	r2, [r3, #4]
 800ed68:	8afb      	ldrh	r3, [r7, #22]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1cb      	bne.n	800ed0e <Paint_DrawString_EN+0x3a>
    }
}
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	2400ae28 	.word	0x2400ae28
 800ed80:	08019268 	.word	0x08019268

0800ed84 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800ed84:	b590      	push	{r4, r7, lr}
 800ed86:	b0cb      	sub	sp, #300	; 0x12c
 800ed88:	af02      	add	r7, sp, #8
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	f107 0108 	add.w	r1, r7, #8
 800ed92:	ed81 0b00 	vstr	d0, [r1]
 800ed96:	4611      	mov	r1, r2
 800ed98:	1d3a      	adds	r2, r7, #4
 800ed9a:	6013      	str	r3, [r2, #0]
 800ed9c:	f107 0316 	add.w	r3, r7, #22
 800eda0:	4622      	mov	r2, r4
 800eda2:	801a      	strh	r2, [r3, #0]
 800eda4:	f107 0314 	add.w	r3, r7, #20
 800eda8:	4602      	mov	r2, r0
 800edaa:	801a      	strh	r2, [r3, #0]
 800edac:	f107 0313 	add.w	r3, r7, #19
 800edb0:	460a      	mov	r2, r1
 800edb2:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 800edb4:	f107 031c 	add.w	r3, r7, #28
 800edb8:	2200      	movs	r2, #0
 800edba:	601a      	str	r2, [r3, #0]
 800edbc:	3304      	adds	r3, #4
 800edbe:	22fb      	movs	r2, #251	; 0xfb
 800edc0:	2100      	movs	r1, #0
 800edc2:	4618      	mov	r0, r3
 800edc4:	f005 fd68 	bl	8014898 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 800edc8:	f107 0313 	add.w	r3, r7, #19
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	1c99      	adds	r1, r3, #2
 800edd0:	f107 001c 	add.w	r0, r7, #28
 800edd4:	f107 0308 	add.w	r3, r7, #8
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	e9cd 2300 	strd	r2, r3, [sp]
 800ede0:	460a      	mov	r2, r1
 800ede2:	4930      	ldr	r1, [pc, #192]	; (800eea4 <Paint_DrawFloatNum+0x120>)
 800ede4:	f006 fe4e 	bl	8015a84 <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 800ede8:	f107 031c 	add.w	r3, r7, #28
 800edec:	4618      	mov	r0, r3
 800edee:	f7f1 fa81 	bl	80002f4 <strlen>
 800edf2:	4603      	mov	r3, r0
 800edf4:	4618      	mov	r0, r3
 800edf6:	f005 fd17 	bl	8014828 <malloc>
 800edfa:	4603      	mov	r3, r0
 800edfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 800ee00:	f107 031c 	add.w	r3, r7, #28
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f1 fa75 	bl	80002f4 <strlen>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	1e9a      	subs	r2, r3, #2
 800ee0e:	f107 031c 	add.w	r3, r7, #28
 800ee12:	4619      	mov	r1, r3
 800ee14:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ee18:	f005 fd16 	bl	8014848 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 800ee1c:	f107 031c 	add.w	r3, r7, #28
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7f1 fa67 	bl	80002f4 <strlen>
 800ee26:	4603      	mov	r3, r0
 800ee28:	3b02      	subs	r3, #2
 800ee2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ee2e:	4413      	add	r3, r2
 800ee30:	2200      	movs	r2, #0
 800ee32:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800ee34:	f107 031c 	add.w	r3, r7, #28
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7f1 fa5b 	bl	80002f4 <strlen>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	3b03      	subs	r3, #3
 800ee42:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ee46:	4413      	add	r3, r2
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee4c:	d10b      	bne.n	800ee66 <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800ee4e:	f107 031c 	add.w	r3, r7, #28
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7f1 fa4e 	bl	80002f4 <strlen>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	3b03      	subs	r3, #3
 800ee5c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ee60:	4413      	add	r3, r2
 800ee62:	2200      	movs	r2, #0
 800ee64:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 800ee66:	1d3b      	adds	r3, r7, #4
 800ee68:	f107 0214 	add.w	r2, r7, #20
 800ee6c:	8811      	ldrh	r1, [r2, #0]
 800ee6e:	f107 0216 	add.w	r2, r7, #22
 800ee72:	8810      	ldrh	r0, [r2, #0]
 800ee74:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 800ee78:	9201      	str	r2, [sp, #4]
 800ee7a:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800ee7e:	9200      	str	r2, [sp, #0]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ee86:	f7ff ff25 	bl	800ecd4 <Paint_DrawString_EN>
    free(pStr);
 800ee8a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ee8e:	f005 fcd3 	bl	8014838 <free>
    pStr=NULL;
 800ee92:	2300      	movs	r3, #0
 800ee94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 800ee98:	bf00      	nop
 800ee9a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd90      	pop	{r4, r7, pc}
 800eea2:	bf00      	nop
 800eea4:	080192ec 	.word	0x080192ec

0800eea8 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800eea8:	b590      	push	{r4, r7, lr}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	817b      	strh	r3, [r7, #10]
 800eeba:	460b      	mov	r3, r1
 800eebc:	813b      	strh	r3, [r7, #8]
 800eebe:	4613      	mov	r3, r2
 800eec0:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 800eec2:	2300      	movs	r3, #0
 800eec4:	613b      	str	r3, [r7, #16]
 800eec6:	e049      	b.n	800ef5c <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 800eec8:	2300      	movs	r3, #0
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	e03f      	b.n	800ef4e <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800eece:	897a      	ldrh	r2, [r7, #10]
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	4413      	add	r3, r2
 800eed4:	4a26      	ldr	r2, [pc, #152]	; (800ef70 <Paint_DrawImage+0xc8>)
 800eed6:	8912      	ldrh	r2, [r2, #8]
 800eed8:	b292      	uxth	r2, r2
 800eeda:	4293      	cmp	r3, r2
 800eedc:	da34      	bge.n	800ef48 <Paint_DrawImage+0xa0>
 800eede:	893a      	ldrh	r2, [r7, #8]
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	4413      	add	r3, r2
 800eee4:	4a22      	ldr	r2, [pc, #136]	; (800ef70 <Paint_DrawImage+0xc8>)
 800eee6:	8952      	ldrh	r2, [r2, #10]
 800eee8:	b292      	uxth	r2, r2
 800eeea:	4293      	cmp	r3, r2
 800eeec:	da2c      	bge.n	800ef48 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	897b      	ldrh	r3, [r7, #10]
 800eef4:	4413      	add	r3, r2
 800eef6:	b298      	uxth	r0, r3
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	893b      	ldrh	r3, [r7, #8]
 800eefe:	4413      	add	r3, r2
 800ef00:	b29c      	uxth	r4, r3
 800ef02:	88fb      	ldrh	r3, [r7, #6]
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	fb02 f303 	mul.w	r3, r2, r3
 800ef0a:	005b      	lsls	r3, r3, #1
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	4413      	add	r3, r2
 800ef14:	3301      	adds	r3, #1
 800ef16:	68fa      	ldr	r2, [r7, #12]
 800ef18:	4413      	add	r3, r2
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	021b      	lsls	r3, r3, #8
 800ef1e:	b21a      	sxth	r2, r3
 800ef20:	88fb      	ldrh	r3, [r7, #6]
 800ef22:	6939      	ldr	r1, [r7, #16]
 800ef24:	fb01 f303 	mul.w	r3, r1, r3
 800ef28:	005b      	lsls	r3, r3, #1
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	440b      	add	r3, r1
 800ef32:	68f9      	ldr	r1, [r7, #12]
 800ef34:	440b      	add	r3, r1
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	b21b      	sxth	r3, r3
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	b21b      	sxth	r3, r3
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	461a      	mov	r2, r3
 800ef42:	4621      	mov	r1, r4
 800ef44:	f7ff fd78 	bl	800ea38 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	617b      	str	r3, [r7, #20]
 800ef4e:	88fb      	ldrh	r3, [r7, #6]
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	dbbb      	blt.n	800eece <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	613b      	str	r3, [r7, #16]
 800ef5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef5e:	693a      	ldr	r2, [r7, #16]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	dbb1      	blt.n	800eec8 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop
 800ef68:	371c      	adds	r7, #28
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd90      	pop	{r4, r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	2400ae28 	.word	0x2400ae28

0800ef74 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 800ef78:	2201      	movs	r2, #1
 800ef7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ef7e:	480d      	ldr	r0, [pc, #52]	; (800efb4 <LCD_1IN8_Reset+0x40>)
 800ef80:	f7f6 fa3c 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800ef84:	2064      	movs	r0, #100	; 0x64
 800ef86:	f7f3 fb9d 	bl	80026c4 <HAL_Delay>
    LCD_1IN8_RST_0;
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ef90:	4808      	ldr	r0, [pc, #32]	; (800efb4 <LCD_1IN8_Reset+0x40>)
 800ef92:	f7f6 fa33 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800ef96:	2064      	movs	r0, #100	; 0x64
 800ef98:	f7f3 fb94 	bl	80026c4 <HAL_Delay>
    LCD_1IN8_RST_1;
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800efa2:	4804      	ldr	r0, [pc, #16]	; (800efb4 <LCD_1IN8_Reset+0x40>)
 800efa4:	f7f6 fa2a 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800efa8:	2064      	movs	r0, #100	; 0x64
 800efaa:	f7f3 fb8b 	bl	80026c4 <HAL_Delay>
}
 800efae:	bf00      	nop
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	58021400 	.word	0x58021400

0800efb8 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800efc2:	2200      	movs	r2, #0
 800efc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800efc8:	4807      	ldr	r0, [pc, #28]	; (800efe8 <LCD_1IN8_WriteReg+0x30>)
 800efca:	f7f6 fa17 	bl	80053fc <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800efce:	2200      	movs	r2, #0
 800efd0:	2140      	movs	r1, #64	; 0x40
 800efd2:	4805      	ldr	r0, [pc, #20]	; (800efe8 <LCD_1IN8_WriteReg+0x30>)
 800efd4:	f7f6 fa12 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800efd8:	79fb      	ldrb	r3, [r7, #7]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7ff fc8e 	bl	800e8fc <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	58021800 	.word	0x58021800

0800efec <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	4603      	mov	r3, r0
 800eff4:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800eff6:	2201      	movs	r2, #1
 800eff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800effc:	480a      	ldr	r0, [pc, #40]	; (800f028 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800effe:	f7f6 f9fd 	bl	80053fc <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800f002:	2200      	movs	r2, #0
 800f004:	2140      	movs	r1, #64	; 0x40
 800f006:	4808      	ldr	r0, [pc, #32]	; (800f028 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f008:	f7f6 f9f8 	bl	80053fc <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff fc74 	bl	800e8fc <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 800f014:	2201      	movs	r2, #1
 800f016:	2140      	movs	r1, #64	; 0x40
 800f018:	4803      	ldr	r0, [pc, #12]	; (800f028 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f01a:	f7f6 f9ef 	bl	80053fc <HAL_GPIO_WritePin>
}
 800f01e:	bf00      	nop
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	58021800 	.word	0x58021800

0800f02c <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	6039      	str	r1, [r7, #0]
 800f036:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 800f038:	2201      	movs	r2, #1
 800f03a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f03e:	480f      	ldr	r0, [pc, #60]	; (800f07c <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 800f040:	f7f6 f9dc 	bl	80053fc <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800f044:	2300      	movs	r3, #0
 800f046:	60fb      	str	r3, [r7, #12]
 800f048:	e00e      	b.n	800f068 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800f04a:	88fb      	ldrh	r3, [r7, #6]
 800f04c:	0a1b      	lsrs	r3, r3, #8
 800f04e:	b29b      	uxth	r3, r3
 800f050:	b2db      	uxtb	r3, r3
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff fc52 	bl	800e8fc <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800f058:	88fb      	ldrh	r3, [r7, #6]
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fc4d 	bl	800e8fc <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	3301      	adds	r3, #1
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d3ec      	bcc.n	800f04a <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 800f070:	bf00      	nop
 800f072:	bf00      	nop
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	58021800 	.word	0x58021800

0800f080 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800f084:	20b1      	movs	r0, #177	; 0xb1
 800f086:	f7ff ff97 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f08a:	2001      	movs	r0, #1
 800f08c:	f7ff ffae 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f090:	202c      	movs	r0, #44	; 0x2c
 800f092:	f7ff ffab 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f096:	202d      	movs	r0, #45	; 0x2d
 800f098:	f7ff ffa8 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 800f09c:	20b2      	movs	r0, #178	; 0xb2
 800f09e:	f7ff ff8b 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f0a2:	2001      	movs	r0, #1
 800f0a4:	f7ff ffa2 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f0a8:	202c      	movs	r0, #44	; 0x2c
 800f0aa:	f7ff ff9f 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f0ae:	202d      	movs	r0, #45	; 0x2d
 800f0b0:	f7ff ff9c 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800f0b4:	20b3      	movs	r0, #179	; 0xb3
 800f0b6:	f7ff ff7f 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	f7ff ff96 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f0c0:	202c      	movs	r0, #44	; 0x2c
 800f0c2:	f7ff ff93 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f0c6:	202d      	movs	r0, #45	; 0x2d
 800f0c8:	f7ff ff90 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	f7ff ff8d 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f0d2:	202c      	movs	r0, #44	; 0x2c
 800f0d4:	f7ff ff8a 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f0d8:	202d      	movs	r0, #45	; 0x2d
 800f0da:	f7ff ff87 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800f0de:	20b4      	movs	r0, #180	; 0xb4
 800f0e0:	f7ff ff6a 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f0e4:	2007      	movs	r0, #7
 800f0e6:	f7ff ff81 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800f0ea:	20c0      	movs	r0, #192	; 0xc0
 800f0ec:	f7ff ff64 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 800f0f0:	20a2      	movs	r0, #162	; 0xa2
 800f0f2:	f7ff ff7b 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800f0f6:	2002      	movs	r0, #2
 800f0f8:	f7ff ff78 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 800f0fc:	2084      	movs	r0, #132	; 0x84
 800f0fe:	f7ff ff75 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800f102:	20c1      	movs	r0, #193	; 0xc1
 800f104:	f7ff ff58 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 800f108:	20c5      	movs	r0, #197	; 0xc5
 800f10a:	f7ff ff6f 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800f10e:	20c2      	movs	r0, #194	; 0xc2
 800f110:	f7ff ff52 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 800f114:	200a      	movs	r0, #10
 800f116:	f7ff ff69 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f11a:	2000      	movs	r0, #0
 800f11c:	f7ff ff66 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 800f120:	20c3      	movs	r0, #195	; 0xc3
 800f122:	f7ff ff49 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800f126:	208a      	movs	r0, #138	; 0x8a
 800f128:	f7ff ff60 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 800f12c:	202a      	movs	r0, #42	; 0x2a
 800f12e:	f7ff ff5d 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800f132:	20c4      	movs	r0, #196	; 0xc4
 800f134:	f7ff ff40 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800f138:	208a      	movs	r0, #138	; 0x8a
 800f13a:	f7ff ff57 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800f13e:	20ee      	movs	r0, #238	; 0xee
 800f140:	f7ff ff54 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 800f144:	20c5      	movs	r0, #197	; 0xc5
 800f146:	f7ff ff37 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800f14a:	200e      	movs	r0, #14
 800f14c:	f7ff ff4e 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 800f150:	20e0      	movs	r0, #224	; 0xe0
 800f152:	f7ff ff31 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f156:	200f      	movs	r0, #15
 800f158:	f7ff ff48 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800f15c:	201a      	movs	r0, #26
 800f15e:	f7ff ff45 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f162:	200f      	movs	r0, #15
 800f164:	f7ff ff42 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 800f168:	2018      	movs	r0, #24
 800f16a:	f7ff ff3f 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 800f16e:	202f      	movs	r0, #47	; 0x2f
 800f170:	f7ff ff3c 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 800f174:	2028      	movs	r0, #40	; 0x28
 800f176:	f7ff ff39 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 800f17a:	2020      	movs	r0, #32
 800f17c:	f7ff ff36 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 800f180:	2022      	movs	r0, #34	; 0x22
 800f182:	f7ff ff33 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800f186:	201f      	movs	r0, #31
 800f188:	f7ff ff30 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800f18c:	201b      	movs	r0, #27
 800f18e:	f7ff ff2d 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800f192:	2023      	movs	r0, #35	; 0x23
 800f194:	f7ff ff2a 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 800f198:	2037      	movs	r0, #55	; 0x37
 800f19a:	f7ff ff27 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f19e:	2000      	movs	r0, #0
 800f1a0:	f7ff ff24 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f1a4:	2007      	movs	r0, #7
 800f1a6:	f7ff ff21 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800f1aa:	2002      	movs	r0, #2
 800f1ac:	f7ff ff1e 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800f1b0:	2010      	movs	r0, #16
 800f1b2:	f7ff ff1b 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800f1b6:	20e1      	movs	r0, #225	; 0xe1
 800f1b8:	f7ff fefe 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f1bc:	200f      	movs	r0, #15
 800f1be:	f7ff ff15 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800f1c2:	201b      	movs	r0, #27
 800f1c4:	f7ff ff12 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f1c8:	200f      	movs	r0, #15
 800f1ca:	f7ff ff0f 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800f1ce:	2017      	movs	r0, #23
 800f1d0:	f7ff ff0c 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 800f1d4:	2033      	movs	r0, #51	; 0x33
 800f1d6:	f7ff ff09 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800f1da:	202c      	movs	r0, #44	; 0x2c
 800f1dc:	f7ff ff06 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 800f1e0:	2029      	movs	r0, #41	; 0x29
 800f1e2:	f7ff ff03 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800f1e6:	202e      	movs	r0, #46	; 0x2e
 800f1e8:	f7ff ff00 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800f1ec:	2030      	movs	r0, #48	; 0x30
 800f1ee:	f7ff fefd 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800f1f2:	2030      	movs	r0, #48	; 0x30
 800f1f4:	f7ff fefa 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 800f1f8:	2039      	movs	r0, #57	; 0x39
 800f1fa:	f7ff fef7 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800f1fe:	203f      	movs	r0, #63	; 0x3f
 800f200:	f7ff fef4 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f204:	2000      	movs	r0, #0
 800f206:	f7ff fef1 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f20a:	2007      	movs	r0, #7
 800f20c:	f7ff feee 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 800f210:	2003      	movs	r0, #3
 800f212:	f7ff feeb 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800f216:	2010      	movs	r0, #16
 800f218:	f7ff fee8 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 800f21c:	20f0      	movs	r0, #240	; 0xf0
 800f21e:	f7ff fecb 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f222:	2001      	movs	r0, #1
 800f224:	f7ff fee2 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 800f228:	20f6      	movs	r0, #246	; 0xf6
 800f22a:	f7ff fec5 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f22e:	2000      	movs	r0, #0
 800f230:	f7ff fedc 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 800f234:	203a      	movs	r0, #58	; 0x3a
 800f236:	f7ff febf 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800f23a:	2005      	movs	r0, #5
 800f23c:	f7ff fed6 	bl	800efec <LCD_1IN8_WriteData_8Bit>

}
 800f240:	bf00      	nop
 800f242:	bd80      	pop	{r7, pc}

0800f244 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	4603      	mov	r3, r0
 800f24c:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800f24e:	4a34      	ldr	r2, [pc, #208]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 800f254:	79fb      	ldrb	r3, [r7, #7]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d008      	beq.n	800f26c <LCD_1IN8_SetGramScanWay+0x28>
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d005      	beq.n	800f26c <LCD_1IN8_SetGramScanWay+0x28>
 800f260:	79fb      	ldrb	r3, [r7, #7]
 800f262:	2b02      	cmp	r3, #2
 800f264:	d002      	beq.n	800f26c <LCD_1IN8_SetGramScanWay+0x28>
 800f266:	79fb      	ldrb	r3, [r7, #7]
 800f268:	2b03      	cmp	r3, #3
 800f26a:	d10c      	bne.n	800f286 <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 800f26c:	4b2c      	ldr	r3, [pc, #176]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f26e:	2280      	movs	r2, #128	; 0x80
 800f270:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 800f272:	4b2b      	ldr	r3, [pc, #172]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f274:	22a0      	movs	r2, #160	; 0xa0
 800f276:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 800f278:	4b29      	ldr	r3, [pc, #164]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f27a:	2202      	movs	r2, #2
 800f27c:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 800f27e:	4b28      	ldr	r3, [pc, #160]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f280:	2201      	movs	r2, #1
 800f282:	811a      	strh	r2, [r3, #8]
 800f284:	e00b      	b.n	800f29e <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800f286:	4b26      	ldr	r3, [pc, #152]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f288:	22a0      	movs	r2, #160	; 0xa0
 800f28a:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 800f28c:	4b24      	ldr	r3, [pc, #144]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f28e:	2280      	movs	r2, #128	; 0x80
 800f290:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800f292:	4b23      	ldr	r3, [pc, #140]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f294:	2201      	movs	r2, #1
 800f296:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 800f298:	4b21      	ldr	r3, [pc, #132]	; (800f320 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f29a:	2202      	movs	r2, #2
 800f29c:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 800f29e:	2300      	movs	r3, #0
 800f2a0:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800f2a2:	79fb      	ldrb	r3, [r7, #7]
 800f2a4:	2b07      	cmp	r3, #7
 800f2a6:	d82b      	bhi.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
 800f2a8:	a201      	add	r2, pc, #4	; (adr r2, 800f2b0 <LCD_1IN8_SetGramScanWay+0x6c>)
 800f2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ae:	bf00      	nop
 800f2b0:	0800f2d1 	.word	0x0800f2d1
 800f2b4:	0800f2d7 	.word	0x0800f2d7
 800f2b8:	0800f2dd 	.word	0x0800f2dd
 800f2bc:	0800f2e3 	.word	0x0800f2e3
 800f2c0:	0800f2e9 	.word	0x0800f2e9
 800f2c4:	0800f2ef 	.word	0x0800f2ef
 800f2c8:	0800f2f5 	.word	0x0800f2f5
 800f2cc:	0800f2fb 	.word	0x0800f2fb
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	81fb      	strh	r3, [r7, #14]
        break;
 800f2d4:	e014      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800f2d6:	2380      	movs	r3, #128	; 0x80
 800f2d8:	81fb      	strh	r3, [r7, #14]
        break;
 800f2da:	e011      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800f2dc:	2340      	movs	r3, #64	; 0x40
 800f2de:	81fb      	strh	r3, [r7, #14]
        break;
 800f2e0:	e00e      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800f2e2:	23c0      	movs	r3, #192	; 0xc0
 800f2e4:	81fb      	strh	r3, [r7, #14]
        break;
 800f2e6:	e00b      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800f2e8:	2320      	movs	r3, #32
 800f2ea:	81fb      	strh	r3, [r7, #14]
        break;
 800f2ec:	e008      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800f2ee:	2360      	movs	r3, #96	; 0x60
 800f2f0:	81fb      	strh	r3, [r7, #14]
        break;
 800f2f2:	e005      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 800f2f4:	23a0      	movs	r3, #160	; 0xa0
 800f2f6:	81fb      	strh	r3, [r7, #14]
        break;
 800f2f8:	e002      	b.n	800f300 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800f2fa:	23e0      	movs	r3, #224	; 0xe0
 800f2fc:	81fb      	strh	r3, [r7, #14]
        break;
 800f2fe:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 800f300:	2036      	movs	r0, #54	; 0x36
 800f302:	f7ff fe59 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800f306:	89fb      	ldrh	r3, [r7, #14]
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	f023 0308 	bic.w	r3, r3, #8
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	4618      	mov	r0, r3
 800f312:	f7ff fe6b 	bl	800efec <LCD_1IN8_WriteData_8Bit>

}
 800f316:	bf00      	nop
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	2400ae44 	.word	0x2400ae44

0800f324 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	4603      	mov	r3, r0
 800f32c:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800f32e:	f7ff fe21 	bl	800ef74 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800f332:	f7ff fea5 	bl	800f080 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800f336:	79fb      	ldrb	r3, [r7, #7]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ff83 	bl	800f244 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800f33e:	20c8      	movs	r0, #200	; 0xc8
 800f340:	f7f3 f9c0 	bl	80026c4 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 800f344:	2011      	movs	r0, #17
 800f346:	f7ff fe37 	bl	800efb8 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800f34a:	2078      	movs	r0, #120	; 0x78
 800f34c:	f7f3 f9ba 	bl	80026c4 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 800f350:	2029      	movs	r0, #41	; 0x29
 800f352:	f7ff fe31 	bl	800efb8 <LCD_1IN8_WriteReg>
}
 800f356:	bf00      	nop
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
	...

0800f360 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 800f360:	b590      	push	{r4, r7, lr}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	4604      	mov	r4, r0
 800f368:	4608      	mov	r0, r1
 800f36a:	4611      	mov	r1, r2
 800f36c:	461a      	mov	r2, r3
 800f36e:	4623      	mov	r3, r4
 800f370:	80fb      	strh	r3, [r7, #6]
 800f372:	4603      	mov	r3, r0
 800f374:	80bb      	strh	r3, [r7, #4]
 800f376:	460b      	mov	r3, r1
 800f378:	807b      	strh	r3, [r7, #2]
 800f37a:	4613      	mov	r3, r2
 800f37c:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 800f37e:	202a      	movs	r0, #42	; 0x2a
 800f380:	f7ff fe1a 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800f384:	2000      	movs	r0, #0
 800f386:	f7ff fe31 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 800f38a:	88fb      	ldrh	r3, [r7, #6]
 800f38c:	b2da      	uxtb	r2, r3
 800f38e:	4b1e      	ldr	r3, [pc, #120]	; (800f408 <LCD_1IN8_SetWindows+0xa8>)
 800f390:	88db      	ldrh	r3, [r3, #6]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	4413      	add	r3, r2
 800f396:	b2db      	uxtb	r3, r3
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff fe27 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 800f39e:	2000      	movs	r0, #0
 800f3a0:	f7ff fe24 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 800f3a4:	887b      	ldrh	r3, [r7, #2]
 800f3a6:	b2da      	uxtb	r2, r3
 800f3a8:	4b17      	ldr	r3, [pc, #92]	; (800f408 <LCD_1IN8_SetWindows+0xa8>)
 800f3aa:	88db      	ldrh	r3, [r3, #6]
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	4413      	add	r3, r2
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7ff fe18 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 800f3bc:	202b      	movs	r0, #43	; 0x2b
 800f3be:	f7ff fdfb 	bl	800efb8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	f7ff fe12 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800f3c8:	88bb      	ldrh	r3, [r7, #4]
 800f3ca:	b2da      	uxtb	r2, r3
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	; (800f408 <LCD_1IN8_SetWindows+0xa8>)
 800f3ce:	891b      	ldrh	r3, [r3, #8]
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	4413      	add	r3, r2
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff fe08 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f7ff fe05 	bl	800efec <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800f3e2:	883b      	ldrh	r3, [r7, #0]
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	4b08      	ldr	r3, [pc, #32]	; (800f408 <LCD_1IN8_SetWindows+0xa8>)
 800f3e8:	891b      	ldrh	r3, [r3, #8]
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	4413      	add	r3, r2
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff fdf9 	bl	800efec <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 800f3fa:	202c      	movs	r0, #44	; 0x2c
 800f3fc:	f7ff fddc 	bl	800efb8 <LCD_1IN8_WriteReg>

}
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	bd90      	pop	{r4, r7, pc}
 800f408:	2400ae44 	.word	0x2400ae44

0800f40c <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	460a      	mov	r2, r1
 800f416:	80fb      	strh	r3, [r7, #6]
 800f418:	4613      	mov	r3, r2
 800f41a:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 800f41c:	88bb      	ldrh	r3, [r7, #4]
 800f41e:	88fa      	ldrh	r2, [r7, #6]
 800f420:	88b9      	ldrh	r1, [r7, #4]
 800f422:	88f8      	ldrh	r0, [r7, #6]
 800f424:	f7ff ff9c 	bl	800f360 <LCD_1IN8_SetWindows>
}
 800f428:	bf00      	nop
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	80fb      	strh	r3, [r7, #6]
 800f43a:	460b      	mov	r3, r1
 800f43c:	80bb      	strh	r3, [r7, #4]
 800f43e:	4613      	mov	r3, r2
 800f440:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 800f442:	88bb      	ldrh	r3, [r7, #4]
 800f444:	887a      	ldrh	r2, [r7, #2]
 800f446:	fb02 f203 	mul.w	r2, r2, r3
 800f44a:	88fb      	ldrh	r3, [r7, #6]
 800f44c:	4611      	mov	r1, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff fdec 	bl	800f02c <LCD_1IN8_WriteData_NLen16Bit>
}
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	4603      	mov	r3, r0
 800f464:	80fb      	strh	r3, [r7, #6]
 800f466:	460b      	mov	r3, r1
 800f468:	80bb      	strh	r3, [r7, #4]
 800f46a:	4613      	mov	r3, r2
 800f46c:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 800f46e:	4b1b      	ldr	r3, [pc, #108]	; (800f4dc <LCD_1IN8_DrawPaint+0x80>)
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	88fa      	ldrh	r2, [r7, #6]
 800f474:	429a      	cmp	r2, r3
 800f476:	d82d      	bhi.n	800f4d4 <LCD_1IN8_DrawPaint+0x78>
 800f478:	4b18      	ldr	r3, [pc, #96]	; (800f4dc <LCD_1IN8_DrawPaint+0x80>)
 800f47a:	885b      	ldrh	r3, [r3, #2]
 800f47c:	88ba      	ldrh	r2, [r7, #4]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d828      	bhi.n	800f4d4 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 800f482:	4b17      	ldr	r3, [pc, #92]	; (800f4e0 <LCD_1IN8_DrawPaint+0x84>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f083 0301 	eor.w	r3, r3, #1
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00c      	beq.n	800f4aa <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 800f490:	88ba      	ldrh	r2, [r7, #4]
 800f492:	88fb      	ldrh	r3, [r7, #6]
 800f494:	4611      	mov	r1, r2
 800f496:	4618      	mov	r0, r3
 800f498:	f7ff ffb8 	bl	800f40c <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 800f49c:	887b      	ldrh	r3, [r7, #2]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	2101      	movs	r1, #1
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff ffc4 	bl	800f430 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 800f4a8:	e014      	b.n	800f4d4 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 800f4aa:	887b      	ldrh	r3, [r7, #2]
 800f4ac:	0a1b      	lsrs	r3, r3, #8
 800f4ae:	b299      	uxth	r1, r3
 800f4b0:	88bb      	ldrh	r3, [r7, #4]
 800f4b2:	01da      	lsls	r2, r3, #7
 800f4b4:	88fb      	ldrh	r3, [r7, #6]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	005b      	lsls	r3, r3, #1
 800f4ba:	b2c9      	uxtb	r1, r1
 800f4bc:	4a09      	ldr	r2, [pc, #36]	; (800f4e4 <LCD_1IN8_DrawPaint+0x88>)
 800f4be:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 800f4c0:	88bb      	ldrh	r3, [r7, #4]
 800f4c2:	01da      	lsls	r2, r3, #7
 800f4c4:	88fb      	ldrh	r3, [r7, #6]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	887a      	ldrh	r2, [r7, #2]
 800f4ce:	b2d1      	uxtb	r1, r2
 800f4d0:	4a04      	ldr	r2, [pc, #16]	; (800f4e4 <LCD_1IN8_DrawPaint+0x88>)
 800f4d2:	54d1      	strb	r1, [r2, r3]
}
 800f4d4:	bf00      	nop
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	2400ae44 	.word	0x2400ae44
 800f4e0:	2400a400 	.word	0x2400a400
 800f4e4:	24000088 	.word	0x24000088

0800f4e8 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 800f4f2:	4b1a      	ldr	r3, [pc, #104]	; (800f55c <LCD_1IN8_Clear+0x74>)
 800f4f4:	881a      	ldrh	r2, [r3, #0]
 800f4f6:	4b19      	ldr	r3, [pc, #100]	; (800f55c <LCD_1IN8_Clear+0x74>)
 800f4f8:	885b      	ldrh	r3, [r3, #2]
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	f7ff ff2f 	bl	800f360 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 800f502:	2201      	movs	r2, #1
 800f504:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f508:	4815      	ldr	r0, [pc, #84]	; (800f560 <LCD_1IN8_Clear+0x78>)
 800f50a:	f7f5 ff77 	bl	80053fc <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800f50e:	2300      	movs	r3, #0
 800f510:	81fb      	strh	r3, [r7, #14]
 800f512:	e019      	b.n	800f548 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800f514:	2300      	movs	r3, #0
 800f516:	81bb      	strh	r3, [r7, #12]
 800f518:	e00e      	b.n	800f538 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 800f51a:	88fb      	ldrh	r3, [r7, #6]
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff f9ec 	bl	800e8fc <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 800f524:	88fb      	ldrh	r3, [r7, #6]
 800f526:	0a1b      	lsrs	r3, r3, #8
 800f528:	b29b      	uxth	r3, r3
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7ff f9e5 	bl	800e8fc <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800f532:	89bb      	ldrh	r3, [r7, #12]
 800f534:	3301      	adds	r3, #1
 800f536:	81bb      	strh	r3, [r7, #12]
 800f538:	4b08      	ldr	r3, [pc, #32]	; (800f55c <LCD_1IN8_Clear+0x74>)
 800f53a:	885b      	ldrh	r3, [r3, #2]
 800f53c:	89ba      	ldrh	r2, [r7, #12]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d3eb      	bcc.n	800f51a <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800f542:	89fb      	ldrh	r3, [r7, #14]
 800f544:	3301      	adds	r3, #1
 800f546:	81fb      	strh	r3, [r7, #14]
 800f548:	4b04      	ldr	r3, [pc, #16]	; (800f55c <LCD_1IN8_Clear+0x74>)
 800f54a:	881b      	ldrh	r3, [r3, #0]
 800f54c:	89fa      	ldrh	r2, [r7, #14]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d3e0      	bcc.n	800f514 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 800f552:	bf00      	nop
 800f554:	bf00      	nop
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	2400ae44 	.word	0x2400ae44
 800f560:	58021800 	.word	0x58021800

0800f564 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 800f56e:	4a04      	ldr	r2, [pc, #16]	; (800f580 <LCD_1IN8_SetBackLight+0x1c>)
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	6353      	str	r3, [r2, #52]	; 0x34
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	40010000 	.word	0x40010000

0800f584 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f584:	b590      	push	{r4, r7, lr}
 800f586:	b089      	sub	sp, #36	; 0x24
 800f588:	af04      	add	r7, sp, #16
 800f58a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f58c:	2301      	movs	r3, #1
 800f58e:	2202      	movs	r2, #2
 800f590:	2102      	movs	r1, #2
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fcb8 	bl	800ff08 <USBH_FindInterface>
 800f598:	4603      	mov	r3, r0
 800f59a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	2bff      	cmp	r3, #255	; 0xff
 800f5a0:	d002      	beq.n	800f5a8 <USBH_CDC_InterfaceInit+0x24>
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d901      	bls.n	800f5ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	e15a      	b.n	800f862 <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 800f5ac:	7bfb      	ldrb	r3, [r7, #15]
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 fc89 	bl	800fec8 <USBH_SelectInterface>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f5ba:	7bbb      	ldrb	r3, [r7, #14]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	e14e      	b.n	800f862 <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f5ca:	4413      	add	r3, r2
 800f5cc:	681c      	ldr	r4, [r3, #0]
 800f5ce:	2050      	movs	r0, #80	; 0x50
 800f5d0:	f005 f92a 	bl	8014828 <malloc>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f5de:	4413      	add	r3, r2
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	69db      	ldr	r3, [r3, #28]
 800f5e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d101      	bne.n	800f5f0 <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	e138      	b.n	800f862 <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f5f0:	2250      	movs	r2, #80	; 0x50
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	68b8      	ldr	r0, [r7, #8]
 800f5f6:	f005 f94f 	bl	8014898 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	211a      	movs	r1, #26
 800f600:	fb01 f303 	mul.w	r3, r1, r3
 800f604:	441a      	add	r2, r3
 800f606:	f643 138e 	movw	r3, #14734	; 0x398e
 800f60a:	4413      	add	r3, r2
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	b25b      	sxtb	r3, r3
 800f610:	2b00      	cmp	r3, #0
 800f612:	da17      	bge.n	800f644 <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f614:	7bfb      	ldrb	r3, [r7, #15]
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	211a      	movs	r1, #26
 800f61a:	fb01 f303 	mul.w	r3, r1, r3
 800f61e:	441a      	add	r2, r3
 800f620:	f643 138e 	movw	r3, #14734	; 0x398e
 800f624:	4413      	add	r3, r2
 800f626:	781a      	ldrb	r2, [r3, #0]
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	211a      	movs	r1, #26
 800f632:	fb01 f303 	mul.w	r3, r1, r3
 800f636:	441a      	add	r2, r3
 800f638:	f643 1390 	movw	r3, #14736	; 0x3990
 800f63c:	4413      	add	r3, r2
 800f63e:	881a      	ldrh	r2, [r3, #0]
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	785b      	ldrb	r3, [r3, #1]
 800f648:	4619      	mov	r1, r3
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f001 f80f 	bl	801066e <USBH_AllocPipe>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	7819      	ldrb	r1, [r3, #0]
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	7858      	ldrb	r0, [r3, #1]
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	f643 135c 	movw	r3, #14684	; 0x395c
 800f666:	4413      	add	r3, r2
 800f668:	781c      	ldrb	r4, [r3, #0]
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	f643 135d 	movw	r3, #14685	; 0x395d
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	8952      	ldrh	r2, [r2, #10]
 800f678:	9202      	str	r2, [sp, #8]
 800f67a:	2203      	movs	r2, #3
 800f67c:	9201      	str	r2, [sp, #4]
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	4623      	mov	r3, r4
 800f682:	4602      	mov	r2, r0
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 ffc3 	bl	8010610 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	2200      	movs	r2, #0
 800f690:	4619      	mov	r1, r3
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f004 fff4 	bl	8014680 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f698:	2300      	movs	r3, #0
 800f69a:	2200      	movs	r2, #0
 800f69c:	210a      	movs	r1, #10
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fc32 	bl	800ff08 <USBH_FindInterface>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	2bff      	cmp	r3, #255	; 0xff
 800f6ac:	d002      	beq.n	800f6b4 <USBH_CDC_InterfaceInit+0x130>
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d901      	bls.n	800f6b8 <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	e0d4      	b.n	800f862 <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f6b8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	211a      	movs	r1, #26
 800f6be:	fb01 f303 	mul.w	r3, r1, r3
 800f6c2:	441a      	add	r2, r3
 800f6c4:	f643 138e 	movw	r3, #14734	; 0x398e
 800f6c8:	4413      	add	r3, r2
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	b25b      	sxtb	r3, r3
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	da18      	bge.n	800f704 <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	211a      	movs	r1, #26
 800f6d8:	fb01 f303 	mul.w	r3, r1, r3
 800f6dc:	441a      	add	r2, r3
 800f6de:	f643 138e 	movw	r3, #14734	; 0x398e
 800f6e2:	4413      	add	r3, r2
 800f6e4:	781a      	ldrb	r2, [r3, #0]
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	211a      	movs	r1, #26
 800f6f0:	fb01 f303 	mul.w	r3, r1, r3
 800f6f4:	441a      	add	r2, r3
 800f6f6:	f643 1390 	movw	r3, #14736	; 0x3990
 800f6fa:	4413      	add	r3, r2
 800f6fc:	881a      	ldrh	r2, [r3, #0]
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	835a      	strh	r2, [r3, #26]
 800f702:	e017      	b.n	800f734 <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f704:	7bfb      	ldrb	r3, [r7, #15]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	211a      	movs	r1, #26
 800f70a:	fb01 f303 	mul.w	r3, r1, r3
 800f70e:	441a      	add	r2, r3
 800f710:	f643 138e 	movw	r3, #14734	; 0x398e
 800f714:	4413      	add	r3, r2
 800f716:	781a      	ldrb	r2, [r3, #0]
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	211a      	movs	r1, #26
 800f722:	fb01 f303 	mul.w	r3, r1, r3
 800f726:	441a      	add	r2, r3
 800f728:	f643 1390 	movw	r3, #14736	; 0x3990
 800f72c:	4413      	add	r3, r2
 800f72e:	881a      	ldrh	r2, [r3, #0]
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f734:	7bfb      	ldrb	r3, [r7, #15]
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	211a      	movs	r1, #26
 800f73a:	fb01 f303 	mul.w	r3, r1, r3
 800f73e:	441a      	add	r2, r3
 800f740:	f643 1396 	movw	r3, #14742	; 0x3996
 800f744:	4413      	add	r3, r2
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	b25b      	sxtb	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	da18      	bge.n	800f780 <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	211a      	movs	r1, #26
 800f754:	fb01 f303 	mul.w	r3, r1, r3
 800f758:	441a      	add	r2, r3
 800f75a:	f643 1396 	movw	r3, #14742	; 0x3996
 800f75e:	4413      	add	r3, r2
 800f760:	781a      	ldrb	r2, [r3, #0]
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f766:	7bfb      	ldrb	r3, [r7, #15]
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	211a      	movs	r1, #26
 800f76c:	fb01 f303 	mul.w	r3, r1, r3
 800f770:	441a      	add	r2, r3
 800f772:	f643 1398 	movw	r3, #14744	; 0x3998
 800f776:	4413      	add	r3, r2
 800f778:	881a      	ldrh	r2, [r3, #0]
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	835a      	strh	r2, [r3, #26]
 800f77e:	e017      	b.n	800f7b0 <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f780:	7bfb      	ldrb	r3, [r7, #15]
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	211a      	movs	r1, #26
 800f786:	fb01 f303 	mul.w	r3, r1, r3
 800f78a:	441a      	add	r2, r3
 800f78c:	f643 1396 	movw	r3, #14742	; 0x3996
 800f790:	4413      	add	r3, r2
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f798:	7bfb      	ldrb	r3, [r7, #15]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	211a      	movs	r1, #26
 800f79e:	fb01 f303 	mul.w	r3, r1, r3
 800f7a2:	441a      	add	r2, r3
 800f7a4:	f643 1398 	movw	r3, #14744	; 0x3998
 800f7a8:	4413      	add	r3, r2
 800f7aa:	881a      	ldrh	r2, [r3, #0]
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	7b9b      	ldrb	r3, [r3, #14]
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 ff59 	bl	801066e <USBH_AllocPipe>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	461a      	mov	r2, r3
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	7bdb      	ldrb	r3, [r3, #15]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 ff4f 	bl	801066e <USBH_AllocPipe>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	7b59      	ldrb	r1, [r3, #13]
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	7b98      	ldrb	r0, [r3, #14]
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	f643 135c 	movw	r3, #14684	; 0x395c
 800f7e6:	4413      	add	r3, r2
 800f7e8:	781c      	ldrb	r4, [r3, #0]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	f643 135d 	movw	r3, #14685	; 0x395d
 800f7f0:	4413      	add	r3, r2
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	8b12      	ldrh	r2, [r2, #24]
 800f7f8:	9202      	str	r2, [sp, #8]
 800f7fa:	2202      	movs	r2, #2
 800f7fc:	9201      	str	r2, [sp, #4]
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	4623      	mov	r3, r4
 800f802:	4602      	mov	r2, r0
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 ff03 	bl	8010610 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	7b19      	ldrb	r1, [r3, #12]
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	7bd8      	ldrb	r0, [r3, #15]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	f643 135c 	movw	r3, #14684	; 0x395c
 800f818:	4413      	add	r3, r2
 800f81a:	781c      	ldrb	r4, [r3, #0]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	f643 135d 	movw	r3, #14685	; 0x395d
 800f822:	4413      	add	r3, r2
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	8b52      	ldrh	r2, [r2, #26]
 800f82a:	9202      	str	r2, [sp, #8]
 800f82c:	2202      	movs	r2, #2
 800f82e:	9201      	str	r2, [sp, #4]
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	4623      	mov	r3, r4
 800f834:	4602      	mov	r2, r0
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 feea 	bl	8010610 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	7b5b      	ldrb	r3, [r3, #13]
 800f848:	2200      	movs	r2, #0
 800f84a:	4619      	mov	r1, r3
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f004 ff17 	bl	8014680 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	7b1b      	ldrb	r3, [r3, #12]
 800f856:	2200      	movs	r2, #0
 800f858:	4619      	mov	r1, r3
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f004 ff10 	bl	8014680 <USBH_LL_SetToggle>

  return USBH_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3714      	adds	r7, #20
 800f866:	46bd      	mov	sp, r7
 800f868:	bd90      	pop	{r4, r7, pc}

0800f86a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b084      	sub	sp, #16
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f878:	4413      	add	r3, r2
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	69db      	ldr	r3, [r3, #28]
 800f87e:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d00e      	beq.n	800f8a6 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	4619      	mov	r1, r3
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 fedd 	bl	801064e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 ff09 	bl	80106b2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	7b1b      	ldrb	r3, [r3, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00e      	beq.n	800f8cc <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	7b1b      	ldrb	r3, [r3, #12]
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 feca 	bl	801064e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	7b1b      	ldrb	r3, [r3, #12]
 800f8be:	4619      	mov	r1, r3
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fef6 	bl	80106b2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	7b5b      	ldrb	r3, [r3, #13]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00e      	beq.n	800f8f2 <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	7b5b      	ldrb	r3, [r3, #13]
 800f8d8:	4619      	mov	r1, r3
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 feb7 	bl	801064e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	7b5b      	ldrb	r3, [r3, #13]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fee3 	bl	80106b2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f8f8:	4413      	add	r3, r2
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	69db      	ldr	r3, [r3, #28]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00f      	beq.n	800f922 <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f908:	4413      	add	r3, r2
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	4618      	mov	r0, r3
 800f910:	f004 ff92 	bl	8014838 <free>
    phost->pActiveClass->pData = 0U;
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f91a:	4413      	add	r3, r2
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2200      	movs	r2, #0
 800f920:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f922:	2300      	movs	r3, #0
}
 800f924:	4618      	mov	r0, r3
 800f926:	3710      	adds	r7, #16
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f93a:	4413      	add	r3, r2
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	69db      	ldr	r3, [r3, #28]
 800f940:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3340      	adds	r3, #64	; 0x40
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 f8b6 	bl	800faba <GetLineCoding>
 800f94e:	4603      	mov	r3, r0
 800f950:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f952:	7afb      	ldrb	r3, [r7, #11]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d107      	bne.n	800f968 <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	f643 2314 	movw	r3, #14868	; 0x3a14
 800f95e:	4413      	add	r3, r2
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2102      	movs	r1, #2
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f968:	7afb      	ldrb	r3, [r7, #11]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
	...

0800f974 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f97c:	2301      	movs	r3, #1
 800f97e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f98a:	4413      	add	r3, r2
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	69db      	ldr	r3, [r3, #28]
 800f990:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f998:	2b04      	cmp	r3, #4
 800f99a:	d877      	bhi.n	800fa8c <USBH_CDC_Process+0x118>
 800f99c:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <USBH_CDC_Process+0x30>)
 800f99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a2:	bf00      	nop
 800f9a4:	0800f9b9 	.word	0x0800f9b9
 800f9a8:	0800f9bf 	.word	0x0800f9bf
 800f9ac:	0800f9ef 	.word	0x0800f9ef
 800f9b0:	0800fa63 	.word	0x0800fa63
 800f9b4:	0800fa71 	.word	0x0800fa71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f9bc:	e06d      	b.n	800fa9a <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f897 	bl	800faf8 <SetLineCoding>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f9ce:	7bbb      	ldrb	r3, [r7, #14]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d104      	bne.n	800f9de <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	2202      	movs	r2, #2
 800f9d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f9dc:	e058      	b.n	800fa90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f9de:	7bbb      	ldrb	r3, [r7, #14]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d055      	beq.n	800fa90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	2204      	movs	r2, #4
 800f9e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f9ec:	e050      	b.n	800fa90 <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	3340      	adds	r3, #64	; 0x40
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 f860 	bl	800faba <GetLineCoding>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f9fe:	7bbb      	ldrb	r3, [r7, #14]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d126      	bne.n	800fa52 <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa16:	791b      	ldrb	r3, [r3, #4]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d13b      	bne.n	800fa94 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d133      	bne.n	800fa94 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d12b      	bne.n	800fa94 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d124      	bne.n	800fa94 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f95c 	bl	800fd08 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fa50:	e020      	b.n	800fa94 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d01d      	beq.n	800fa94 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2204      	movs	r2, #4
 800fa5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fa60:	e018      	b.n	800fa94 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f867 	bl	800fb36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f8dc 	bl	800fc26 <CDC_ProcessReception>
      break;
 800fa6e:	e014      	b.n	800fa9a <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800fa70:	2100      	movs	r1, #0
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fb49 	bl	801010a <USBH_ClrFeature>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10a      	bne.n	800fa98 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2200      	movs	r2, #0
 800fa86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800fa8a:	e005      	b.n	800fa98 <USBH_CDC_Process+0x124>

    default:
      break;
 800fa8c:	bf00      	nop
 800fa8e:	e004      	b.n	800fa9a <USBH_CDC_Process+0x126>
      break;
 800fa90:	bf00      	nop
 800fa92:	e002      	b.n	800fa9a <USBH_CDC_Process+0x126>
      break;
 800fa94:	bf00      	nop
 800fa96:	e000      	b.n	800fa9a <USBH_CDC_Process+0x126>
      break;
 800fa98:	bf00      	nop

  }

  return status;
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr

0800faba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b082      	sub	sp, #8
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	22a1      	movs	r2, #161	; 0xa1
 800fac8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2221      	movs	r2, #33	; 0x21
 800face:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2207      	movs	r2, #7
 800fae0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2207      	movs	r2, #7
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 fb32 	bl	8010152 <USBH_CtlReq>
 800faee:	4603      	mov	r3, r0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2221      	movs	r2, #33	; 0x21
 800fb06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2200      	movs	r2, #0
 800fb18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2207      	movs	r2, #7
 800fb1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2207      	movs	r2, #7
 800fb24:	4619      	mov	r1, r3
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fb13 	bl	8010152 <USBH_CtlReq>
 800fb2c:	4603      	mov	r3, r0
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b086      	sub	sp, #24
 800fb3a:	af02      	add	r7, sp, #8
 800fb3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fb44:	4413      	add	r3, r2
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	69db      	ldr	r3, [r3, #28]
 800fb4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d002      	beq.n	800fb60 <CDC_ProcessTransmission+0x2a>
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d023      	beq.n	800fba6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800fb5e:	e05e      	b.n	800fc1e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	8b12      	ldrh	r2, [r2, #24]
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d90b      	bls.n	800fb84 <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	69d9      	ldr	r1, [r3, #28]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	8b1a      	ldrh	r2, [r3, #24]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	7b5b      	ldrb	r3, [r3, #13]
 800fb78:	2001      	movs	r0, #1
 800fb7a:	9000      	str	r0, [sp, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fd02 	bl	8010586 <USBH_BulkSendData>
 800fb82:	e00b      	b.n	800fb9c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	7b5b      	ldrb	r3, [r3, #13]
 800fb92:	2001      	movs	r0, #1
 800fb94:	9000      	str	r0, [sp, #0]
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fcf5 	bl	8010586 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2202      	movs	r2, #2
 800fba0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fba4:	e03b      	b.n	800fc1e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	7b5b      	ldrb	r3, [r3, #13]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f004 fd39 	bl	8014624 <USBH_LL_GetURBState>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800fbb6:	7afb      	ldrb	r3, [r7, #11]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d128      	bne.n	800fc0e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	8b12      	ldrh	r2, [r2, #24]
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d90e      	bls.n	800fbe6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	8b12      	ldrh	r2, [r2, #24]
 800fbd0:	1a9a      	subs	r2, r3, r2
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	69db      	ldr	r3, [r3, #28]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	8b12      	ldrh	r2, [r2, #24]
 800fbde:	441a      	add	r2, r3
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	61da      	str	r2, [r3, #28]
 800fbe4:	e002      	b.n	800fbec <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d004      	beq.n	800fbfe <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fbfc:	e00e      	b.n	800fc1c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f86a 	bl	800fce0 <USBH_CDC_TransmitCallback>
      break;
 800fc0c:	e006      	b.n	800fc1c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800fc0e:	7afb      	ldrb	r3, [r7, #11]
 800fc10:	2b02      	cmp	r3, #2
 800fc12:	d103      	bne.n	800fc1c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fc1c:	bf00      	nop
  }
}
 800fc1e:	bf00      	nop
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b086      	sub	sp, #24
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fc34:	4413      	add	r3, r2
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	69db      	ldr	r3, [r3, #28]
 800fc3a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800fc46:	2b03      	cmp	r3, #3
 800fc48:	d002      	beq.n	800fc50 <CDC_ProcessReception+0x2a>
 800fc4a:	2b04      	cmp	r3, #4
 800fc4c:	d00e      	beq.n	800fc6c <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 800fc4e:	e043      	b.n	800fcd8 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	6a19      	ldr	r1, [r3, #32]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	8b5a      	ldrh	r2, [r3, #26]
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	7b1b      	ldrb	r3, [r3, #12]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fcb9 	bl	80105d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	2204      	movs	r2, #4
 800fc66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800fc6a:	e035      	b.n	800fcd8 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	7b1b      	ldrb	r3, [r3, #12]
 800fc70:	4619      	mov	r1, r3
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f004 fcd6 	bl	8014624 <USBH_LL_GetURBState>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fc7c:	7cfb      	ldrb	r3, [r7, #19]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d129      	bne.n	800fcd6 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	7b1b      	ldrb	r3, [r3, #12]
 800fc86:	4619      	mov	r1, r3
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f004 fc31 	bl	80144f0 <USBH_LL_GetLastXferSize>
 800fc8e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d016      	beq.n	800fcc8 <CDC_ProcessReception+0xa2>
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	8b5b      	ldrh	r3, [r3, #26]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d910      	bls.n	800fcc8 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	1ad2      	subs	r2, r2, r3
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	6a1a      	ldr	r2, [r3, #32]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	441a      	add	r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	2203      	movs	r2, #3
 800fcc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800fcc6:	e006      	b.n	800fcd6 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 f80f 	bl	800fcf4 <USBH_CDC_ReceiveCallback>
      break;
 800fcd6:	bf00      	nop
  }
}
 800fcd8:	bf00      	nop
 800fcda:	3718      	adds	r7, #24
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fce8:	bf00      	nop
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fcfc:	bf00      	nop
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	4613      	mov	r3, r2
 800fd28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fd30:	2302      	movs	r3, #2
 800fd32:	e038      	b.n	800fda6 <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	f643 230c 	movw	r3, #14860	; 0x3a0c
 800fd3a:	4413      	add	r3, r2
 800fd3c:	79fa      	ldrb	r2, [r7, #7]
 800fd3e:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fd46:	4413      	add	r3, r2
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f000 f829 	bl	800fdae <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	f643 1363 	movw	r3, #14691	; 0x3963
 800fd62:	4413      	add	r3, r2
 800fd64:	2200      	movs	r2, #0
 800fd66:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	f643 1360 	movw	r3, #14688	; 0x3960
 800fd6e:	4413      	add	r3, r2
 800fd70:	2200      	movs	r2, #0
 800fd72:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800fd74:	68fa      	ldr	r2, [r7, #12]
 800fd76:	f643 1361 	movw	r3, #14689	; 0x3961
 800fd7a:	4413      	add	r3, r2
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	f643 1362 	movw	r3, #14690	; 0x3962
 800fd86:	4413      	add	r3, r2
 800fd88:	2200      	movs	r2, #0
 800fd8a:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d005      	beq.n	800fd9e <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 800fd92:	68fa      	ldr	r2, [r7, #12]
 800fd94:	f643 2314 	movw	r3, #14868	; 0x3a14
 800fd98:	4413      	add	r3, r2
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f004 fb2c 	bl	80143fc <USBH_LL_Init>

  return USBH_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fdae:	b480      	push	{r7}
 800fdb0:	b085      	sub	sp, #20
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60fb      	str	r3, [r7, #12]
 800fdbe:	e00a      	b.n	800fdd6 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	2200      	movs	r2, #0
 800fdce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	60fb      	str	r3, [r7, #12]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2b0e      	cmp	r3, #14
 800fdda:	d9f1      	bls.n	800fdc0 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fddc:	2300      	movs	r3, #0
 800fdde:	60fb      	str	r3, [r7, #12]
 800fde0:	e009      	b.n	800fdf6 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4413      	add	r3, r2
 800fde8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fdec:	2200      	movs	r2, #0
 800fdee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	60fb      	str	r3, [r7, #12]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800fdfc:	d3f1      	bcc.n	800fde2 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	f643 2304 	movw	r3, #14852	; 0x3a04
 800fe16:	4413      	add	r3, r2
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2201      	movs	r2, #1
 800fe20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2240      	movs	r2, #64	; 0x40
 800fe26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	f643 135c 	movw	r3, #14684	; 0x395c
 800fe34:	4413      	add	r3, r2
 800fe36:	2200      	movs	r2, #0
 800fe38:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	f643 135d 	movw	r3, #14685	; 0x395d
 800fe40:	4413      	add	r3, r2
 800fe42:	2201      	movs	r2, #1
 800fe44:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	f643 135f 	movw	r3, #14687	; 0x395f
 800fe4c:	4413      	add	r3, r2
 800fe4e:	2200      	movs	r2, #0
 800fe50:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	f643 135e 	movw	r3, #14686	; 0x395e
 800fe58:	4413      	add	r3, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d01a      	beq.n	800feb6 <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d111      	bne.n	800feb0 <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	1c59      	adds	r1, r3, #1
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 800fe9c:	6011      	str	r1, [r2, #0]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 800fea4:	6839      	ldr	r1, [r7, #0]
 800fea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800feaa:	2300      	movs	r3, #0
 800feac:	73fb      	strb	r3, [r7, #15]
 800feae:	e004      	b.n	800feba <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800feb0:	2302      	movs	r3, #2
 800feb2:	73fb      	strb	r3, [r7, #15]
 800feb4:	e001      	b.n	800feba <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800feb6:	2302      	movs	r3, #2
 800feb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800feba:	7bfb      	ldrb	r3, [r7, #15]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3714      	adds	r7, #20
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800fed4:	2300      	movs	r3, #0
 800fed6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	f643 137c 	movw	r3, #14716	; 0x397c
 800fede:	4413      	add	r3, r2
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	78fa      	ldrb	r2, [r7, #3]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d206      	bcs.n	800fef6 <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	f643 1364 	movw	r3, #14692	; 0x3964
 800feee:	4413      	add	r3, r2
 800fef0:	78fa      	ldrb	r2, [r7, #3]
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e001      	b.n	800fefa <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800fef6:	2302      	movs	r3, #2
 800fef8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b087      	sub	sp, #28
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	4608      	mov	r0, r1
 800ff12:	4611      	mov	r1, r2
 800ff14:	461a      	mov	r2, r3
 800ff16:	4603      	mov	r3, r0
 800ff18:	70fb      	strb	r3, [r7, #3]
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	70bb      	strb	r3, [r7, #2]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ff22:	2300      	movs	r3, #0
 800ff24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	f643 1378 	movw	r3, #14712	; 0x3978
 800ff30:	4413      	add	r3, r2
 800ff32:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ff34:	e025      	b.n	800ff82 <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	221a      	movs	r2, #26
 800ff3a:	fb02 f303 	mul.w	r3, r2, r3
 800ff3e:	3308      	adds	r3, #8
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	4413      	add	r3, r2
 800ff44:	3302      	adds	r3, #2
 800ff46:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	795b      	ldrb	r3, [r3, #5]
 800ff4c:	78fa      	ldrb	r2, [r7, #3]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d002      	beq.n	800ff58 <USBH_FindInterface+0x50>
 800ff52:	78fb      	ldrb	r3, [r7, #3]
 800ff54:	2bff      	cmp	r3, #255	; 0xff
 800ff56:	d111      	bne.n	800ff7c <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ff5c:	78ba      	ldrb	r2, [r7, #2]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d002      	beq.n	800ff68 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ff62:	78bb      	ldrb	r3, [r7, #2]
 800ff64:	2bff      	cmp	r3, #255	; 0xff
 800ff66:	d109      	bne.n	800ff7c <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ff6c:	787a      	ldrb	r2, [r7, #1]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d002      	beq.n	800ff78 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ff72:	787b      	ldrb	r3, [r7, #1]
 800ff74:	2bff      	cmp	r3, #255	; 0xff
 800ff76:	d101      	bne.n	800ff7c <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800ff78:	7dfb      	ldrb	r3, [r7, #23]
 800ff7a:	e006      	b.n	800ff8a <USBH_FindInterface+0x82>
    }
    if_ix++;
 800ff7c:	7dfb      	ldrb	r3, [r7, #23]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ff82:	7dfb      	ldrb	r3, [r7, #23]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d9d6      	bls.n	800ff36 <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 800ff88:	23ff      	movs	r3, #255	; 0xff
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	371c      	adds	r7, #28
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b082      	sub	sp, #8
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f004 fa6c 	bl	801447c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f004 fb51 	bl	801464e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b083      	sub	sp, #12
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
 800ffbe:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	f643 2304 	movw	r3, #14852	; 0x3a04
 800ffc6:	4413      	add	r3, r2
 800ffc8:	683a      	ldr	r2, [r7, #0]
 800ffca:	601a      	str	r2, [r3, #0]
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	f643 2304 	movw	r3, #14852	; 0x3a04
 800ffe6:	4413      	add	r3, r2
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	6879      	ldr	r1, [r7, #4]
 800ffee:	f643 2304 	movw	r3, #14852	; 0x3a04
 800fff2:	440b      	add	r3, r1
 800fff4:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 f804 	bl	8010004 <USBH_HandleSof>
}
 800fffc:	bf00      	nop
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	b2db      	uxtb	r3, r3
 8010012:	2b0b      	cmp	r3, #11
 8010014:	d10e      	bne.n	8010034 <USBH_HandleSof+0x30>
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801001c:	4413      	add	r3, r2
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d007      	beq.n	8010034 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801002a:	4413      	add	r3, r2
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	4798      	blx	r3
  }
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	f643 1363 	movw	r3, #14691	; 0x3963
 801004a:	4413      	add	r3, r2
 801004c:	2201      	movs	r2, #1
 801004e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8010050:	bf00      	nop
}
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr

0801005c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	f643 1363 	movw	r3, #14691	; 0x3963
 801006a:	4413      	add	r3, r2
 801006c:	2200      	movs	r2, #0
 801006e:	701a      	strb	r2, [r3, #0]

  return;
 8010070:	bf00      	nop
}
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	f643 1360 	movw	r3, #14688	; 0x3960
 801008a:	4413      	add	r3, r2
 801008c:	2201      	movs	r2, #1
 801008e:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	f643 1361 	movw	r3, #14689	; 0x3961
 8010096:	4413      	add	r3, r2
 8010098:	2200      	movs	r2, #0
 801009a:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	f643 1362 	movw	r3, #14690	; 0x3962
 80100a2:	4413      	add	r3, r2
 80100a4:	2200      	movs	r2, #0
 80100a6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr

080100b6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b082      	sub	sp, #8
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	f643 1361 	movw	r3, #14689	; 0x3961
 80100c4:	4413      	add	r3, r2
 80100c6:	2201      	movs	r2, #1
 80100c8:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	f643 1360 	movw	r3, #14688	; 0x3960
 80100d0:	4413      	add	r3, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	f643 1363 	movw	r3, #14691	; 0x3963
 80100dc:	4413      	add	r3, r2
 80100de:	2200      	movs	r2, #0
 80100e0:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f004 f9e7 	bl	80144b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	791b      	ldrb	r3, [r3, #4]
 80100ec:	4619      	mov	r1, r3
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 fadf 	bl	80106b2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	795b      	ldrb	r3, [r3, #5]
 80100f8:	4619      	mov	r1, r3
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 fad9 	bl	80106b2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	460b      	mov	r3, r1
 8010114:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	789b      	ldrb	r3, [r3, #2]
 801011a:	2b01      	cmp	r3, #1
 801011c:	d10f      	bne.n	801013e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2202      	movs	r2, #2
 8010122:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010130:	78fb      	ldrb	r3, [r7, #3]
 8010132:	b29a      	uxth	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801013e:	2200      	movs	r2, #0
 8010140:	2100      	movs	r1, #0
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f805 	bl	8010152 <USBH_CtlReq>
 8010148:	4603      	mov	r3, r0
}
 801014a:	4618      	mov	r0, r3
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010152:	b580      	push	{r7, lr}
 8010154:	b086      	sub	sp, #24
 8010156:	af00      	add	r7, sp, #0
 8010158:	60f8      	str	r0, [r7, #12]
 801015a:	60b9      	str	r1, [r7, #8]
 801015c:	4613      	mov	r3, r2
 801015e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010160:	2301      	movs	r3, #1
 8010162:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	789b      	ldrb	r3, [r3, #2]
 8010168:	2b01      	cmp	r3, #1
 801016a:	d002      	beq.n	8010172 <USBH_CtlReq+0x20>
 801016c:	2b02      	cmp	r3, #2
 801016e:	d00f      	beq.n	8010190 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010170:	e027      	b.n	80101c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	88fa      	ldrh	r2, [r7, #6]
 801017c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2201      	movs	r2, #1
 8010182:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2202      	movs	r2, #2
 8010188:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801018a:	2301      	movs	r3, #1
 801018c:	75fb      	strb	r3, [r7, #23]
      break;
 801018e:	e018      	b.n	80101c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f000 f81b 	bl	80101cc <USBH_HandleControl>
 8010196:	4603      	mov	r3, r0
 8010198:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801019a:	7dfb      	ldrb	r3, [r7, #23]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d002      	beq.n	80101a6 <USBH_CtlReq+0x54>
 80101a0:	7dfb      	ldrb	r3, [r7, #23]
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d106      	bne.n	80101b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2201      	movs	r2, #1
 80101aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	761a      	strb	r2, [r3, #24]
      break;
 80101b2:	e005      	b.n	80101c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80101b4:	7dfb      	ldrb	r3, [r7, #23]
 80101b6:	2b02      	cmp	r3, #2
 80101b8:	d102      	bne.n	80101c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2201      	movs	r2, #1
 80101be:	709a      	strb	r2, [r3, #2]
      break;
 80101c0:	bf00      	nop
  }
  return status;
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af02      	add	r7, sp, #8
 80101d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80101d4:	2301      	movs	r3, #1
 80101d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80101d8:	2300      	movs	r3, #0
 80101da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	7e1b      	ldrb	r3, [r3, #24]
 80101e0:	3b01      	subs	r3, #1
 80101e2:	2b0a      	cmp	r3, #10
 80101e4:	f200 8160 	bhi.w	80104a8 <USBH_HandleControl+0x2dc>
 80101e8:	a201      	add	r2, pc, #4	; (adr r2, 80101f0 <USBH_HandleControl+0x24>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	0801021d 	.word	0x0801021d
 80101f4:	08010237 	.word	0x08010237
 80101f8:	080102a1 	.word	0x080102a1
 80101fc:	080102cb 	.word	0x080102cb
 8010200:	08010303 	.word	0x08010303
 8010204:	08010331 	.word	0x08010331
 8010208:	08010383 	.word	0x08010383
 801020c:	080103a9 	.word	0x080103a9
 8010210:	080103e5 	.word	0x080103e5
 8010214:	0801040f 	.word	0x0801040f
 8010218:	0801044d 	.word	0x0801044d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f103 0110 	add.w	r1, r3, #16
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	795b      	ldrb	r3, [r3, #5]
 8010226:	461a      	mov	r2, r3
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f94d 	bl	80104c8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2202      	movs	r2, #2
 8010232:	761a      	strb	r2, [r3, #24]
      break;
 8010234:	e143      	b.n	80104be <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	795b      	ldrb	r3, [r3, #5]
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f004 f9f1 	bl	8014624 <USBH_LL_GetURBState>
 8010242:	4603      	mov	r3, r0
 8010244:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010246:	7bbb      	ldrb	r3, [r7, #14]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d11e      	bne.n	801028a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	7c1b      	ldrb	r3, [r3, #16]
 8010250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010254:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	8adb      	ldrh	r3, [r3, #22]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00a      	beq.n	8010274 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801025e:	7b7b      	ldrb	r3, [r7, #13]
 8010260:	2b80      	cmp	r3, #128	; 0x80
 8010262:	d103      	bne.n	801026c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2203      	movs	r2, #3
 8010268:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801026a:	e11f      	b.n	80104ac <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2205      	movs	r2, #5
 8010270:	761a      	strb	r2, [r3, #24]
      break;
 8010272:	e11b      	b.n	80104ac <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 8010274:	7b7b      	ldrb	r3, [r7, #13]
 8010276:	2b80      	cmp	r3, #128	; 0x80
 8010278:	d103      	bne.n	8010282 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2209      	movs	r2, #9
 801027e:	761a      	strb	r2, [r3, #24]
      break;
 8010280:	e114      	b.n	80104ac <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2207      	movs	r2, #7
 8010286:	761a      	strb	r2, [r3, #24]
      break;
 8010288:	e110      	b.n	80104ac <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801028a:	7bbb      	ldrb	r3, [r7, #14]
 801028c:	2b04      	cmp	r3, #4
 801028e:	d003      	beq.n	8010298 <USBH_HandleControl+0xcc>
 8010290:	7bbb      	ldrb	r3, [r7, #14]
 8010292:	2b02      	cmp	r3, #2
 8010294:	f040 810a 	bne.w	80104ac <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	220b      	movs	r2, #11
 801029c:	761a      	strb	r2, [r3, #24]
      break;
 801029e:	e105      	b.n	80104ac <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	f643 2304 	movw	r3, #14852	; 0x3a04
 80102a6:	4413      	add	r3, r2
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6899      	ldr	r1, [r3, #8]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	899a      	ldrh	r2, [r3, #12]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	791b      	ldrb	r3, [r3, #4]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f944 	bl	801054a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2204      	movs	r2, #4
 80102c6:	761a      	strb	r2, [r3, #24]
      break;
 80102c8:	e0f9      	b.n	80104be <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	791b      	ldrb	r3, [r3, #4]
 80102ce:	4619      	mov	r1, r3
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f004 f9a7 	bl	8014624 <USBH_LL_GetURBState>
 80102d6:	4603      	mov	r3, r0
 80102d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80102da:	7bbb      	ldrb	r3, [r7, #14]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d102      	bne.n	80102e6 <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2209      	movs	r2, #9
 80102e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80102e6:	7bbb      	ldrb	r3, [r7, #14]
 80102e8:	2b05      	cmp	r3, #5
 80102ea:	d102      	bne.n	80102f2 <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80102ec:	2303      	movs	r3, #3
 80102ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80102f0:	e0de      	b.n	80104b0 <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 80102f2:	7bbb      	ldrb	r3, [r7, #14]
 80102f4:	2b04      	cmp	r3, #4
 80102f6:	f040 80db 	bne.w	80104b0 <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	220b      	movs	r2, #11
 80102fe:	761a      	strb	r2, [r3, #24]
      break;
 8010300:	e0d6      	b.n	80104b0 <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6899      	ldr	r1, [r3, #8]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	899a      	ldrh	r2, [r3, #12]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	795b      	ldrb	r3, [r3, #5]
 801030e:	2001      	movs	r0, #1
 8010310:	9000      	str	r0, [sp, #0]
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 f8f2 	bl	80104fc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	f643 2304 	movw	r3, #14852	; 0x3a04
 801031e:	4413      	add	r3, r2
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	b29a      	uxth	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2206      	movs	r2, #6
 801032c:	761a      	strb	r2, [r3, #24]
      break;
 801032e:	e0c6      	b.n	80104be <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	795b      	ldrb	r3, [r3, #5]
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f004 f974 	bl	8014624 <USBH_LL_GetURBState>
 801033c:	4603      	mov	r3, r0
 801033e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010340:	7bbb      	ldrb	r3, [r7, #14]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d103      	bne.n	801034e <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2207      	movs	r2, #7
 801034a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801034c:	e0b2      	b.n	80104b4 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 801034e:	7bbb      	ldrb	r3, [r7, #14]
 8010350:	2b05      	cmp	r3, #5
 8010352:	d105      	bne.n	8010360 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	220c      	movs	r2, #12
 8010358:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801035a:	2303      	movs	r3, #3
 801035c:	73fb      	strb	r3, [r7, #15]
      break;
 801035e:	e0a9      	b.n	80104b4 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010360:	7bbb      	ldrb	r3, [r7, #14]
 8010362:	2b02      	cmp	r3, #2
 8010364:	d103      	bne.n	801036e <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2205      	movs	r2, #5
 801036a:	761a      	strb	r2, [r3, #24]
      break;
 801036c:	e0a2      	b.n	80104b4 <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 801036e:	7bbb      	ldrb	r3, [r7, #14]
 8010370:	2b04      	cmp	r3, #4
 8010372:	f040 809f 	bne.w	80104b4 <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	220b      	movs	r2, #11
 801037a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801037c:	2302      	movs	r3, #2
 801037e:	73fb      	strb	r3, [r7, #15]
      break;
 8010380:	e098      	b.n	80104b4 <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	791b      	ldrb	r3, [r3, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	2100      	movs	r1, #0
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 f8dd 	bl	801054a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010396:	4413      	add	r3, r2
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	b29a      	uxth	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2208      	movs	r2, #8
 80103a4:	761a      	strb	r2, [r3, #24]

      break;
 80103a6:	e08a      	b.n	80104be <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	791b      	ldrb	r3, [r3, #4]
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f004 f938 	bl	8014624 <USBH_LL_GetURBState>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80103b8:	7bbb      	ldrb	r3, [r7, #14]
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d105      	bne.n	80103ca <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	220d      	movs	r2, #13
 80103c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80103c4:	2300      	movs	r3, #0
 80103c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80103c8:	e076      	b.n	80104b8 <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 80103ca:	7bbb      	ldrb	r3, [r7, #14]
 80103cc:	2b04      	cmp	r3, #4
 80103ce:	d103      	bne.n	80103d8 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	220b      	movs	r2, #11
 80103d4:	761a      	strb	r2, [r3, #24]
      break;
 80103d6:	e06f      	b.n	80104b8 <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 80103d8:	7bbb      	ldrb	r3, [r7, #14]
 80103da:	2b05      	cmp	r3, #5
 80103dc:	d16c      	bne.n	80104b8 <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 80103de:	2303      	movs	r3, #3
 80103e0:	73fb      	strb	r3, [r7, #15]
      break;
 80103e2:	e069      	b.n	80104b8 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	795b      	ldrb	r3, [r3, #5]
 80103e8:	2201      	movs	r2, #1
 80103ea:	9200      	str	r2, [sp, #0]
 80103ec:	2200      	movs	r2, #0
 80103ee:	2100      	movs	r1, #0
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 f883 	bl	80104fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	f643 2304 	movw	r3, #14852	; 0x3a04
 80103fc:	4413      	add	r3, r2
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	b29a      	uxth	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	220a      	movs	r2, #10
 801040a:	761a      	strb	r2, [r3, #24]
      break;
 801040c:	e057      	b.n	80104be <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	795b      	ldrb	r3, [r3, #5]
 8010412:	4619      	mov	r1, r3
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f004 f905 	bl	8014624 <USBH_LL_GetURBState>
 801041a:	4603      	mov	r3, r0
 801041c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801041e:	7bbb      	ldrb	r3, [r7, #14]
 8010420:	2b01      	cmp	r3, #1
 8010422:	d105      	bne.n	8010430 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 8010424:	2300      	movs	r3, #0
 8010426:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	220d      	movs	r2, #13
 801042c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801042e:	e045      	b.n	80104bc <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010430:	7bbb      	ldrb	r3, [r7, #14]
 8010432:	2b02      	cmp	r3, #2
 8010434:	d103      	bne.n	801043e <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2209      	movs	r2, #9
 801043a:	761a      	strb	r2, [r3, #24]
      break;
 801043c:	e03e      	b.n	80104bc <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 801043e:	7bbb      	ldrb	r3, [r7, #14]
 8010440:	2b04      	cmp	r3, #4
 8010442:	d13b      	bne.n	80104bc <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	220b      	movs	r2, #11
 8010448:	761a      	strb	r2, [r3, #24]
      break;
 801044a:	e037      	b.n	80104bc <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7e5b      	ldrb	r3, [r3, #25]
 8010450:	3301      	adds	r3, #1
 8010452:	b2da      	uxtb	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	765a      	strb	r2, [r3, #25]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	7e5b      	ldrb	r3, [r3, #25]
 801045c:	2b02      	cmp	r3, #2
 801045e:	d806      	bhi.n	801046e <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2201      	movs	r2, #1
 801046a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801046c:	e027      	b.n	80104be <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	f643 2314 	movw	r3, #14868	; 0x3a14
 8010474:	4413      	add	r3, r2
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2106      	movs	r1, #6
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	795b      	ldrb	r3, [r3, #5]
 8010488:	4619      	mov	r1, r3
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f000 f911 	bl	80106b2 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	791b      	ldrb	r3, [r3, #4]
 8010494:	4619      	mov	r1, r3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f90b 	bl	80106b2 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80104a2:	2302      	movs	r3, #2
 80104a4:	73fb      	strb	r3, [r7, #15]
      break;
 80104a6:	e00a      	b.n	80104be <USBH_HandleControl+0x2f2>

    default:
      break;
 80104a8:	bf00      	nop
 80104aa:	e008      	b.n	80104be <USBH_HandleControl+0x2f2>
      break;
 80104ac:	bf00      	nop
 80104ae:	e006      	b.n	80104be <USBH_HandleControl+0x2f2>
      break;
 80104b0:	bf00      	nop
 80104b2:	e004      	b.n	80104be <USBH_HandleControl+0x2f2>
      break;
 80104b4:	bf00      	nop
 80104b6:	e002      	b.n	80104be <USBH_HandleControl+0x2f2>
      break;
 80104b8:	bf00      	nop
 80104ba:	e000      	b.n	80104be <USBH_HandleControl+0x2f2>
      break;
 80104bc:	bf00      	nop
  }

  return status;
 80104be:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3710      	adds	r7, #16
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b088      	sub	sp, #32
 80104cc:	af04      	add	r7, sp, #16
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	4613      	mov	r3, r2
 80104d4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80104d6:	79f9      	ldrb	r1, [r7, #7]
 80104d8:	2300      	movs	r3, #0
 80104da:	9303      	str	r3, [sp, #12]
 80104dc:	2308      	movs	r3, #8
 80104de:	9302      	str	r3, [sp, #8]
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	2300      	movs	r3, #0
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	2300      	movs	r3, #0
 80104ea:	2200      	movs	r2, #0
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f004 f866 	bl	80145be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b088      	sub	sp, #32
 8010500:	af04      	add	r7, sp, #16
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	4611      	mov	r1, r2
 8010508:	461a      	mov	r2, r3
 801050a:	460b      	mov	r3, r1
 801050c:	80fb      	strh	r3, [r7, #6]
 801050e:	4613      	mov	r3, r2
 8010510:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	f643 135d 	movw	r3, #14685	; 0x395d
 8010518:	4413      	add	r3, r2
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d001      	beq.n	8010524 <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 8010520:	2300      	movs	r3, #0
 8010522:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010524:	7979      	ldrb	r1, [r7, #5]
 8010526:	7e3b      	ldrb	r3, [r7, #24]
 8010528:	9303      	str	r3, [sp, #12]
 801052a:	88fb      	ldrh	r3, [r7, #6]
 801052c:	9302      	str	r3, [sp, #8]
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	9301      	str	r3, [sp, #4]
 8010532:	2301      	movs	r3, #1
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	2300      	movs	r3, #0
 8010538:	2200      	movs	r2, #0
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	f004 f83f 	bl	80145be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801054a:	b580      	push	{r7, lr}
 801054c:	b088      	sub	sp, #32
 801054e:	af04      	add	r7, sp, #16
 8010550:	60f8      	str	r0, [r7, #12]
 8010552:	60b9      	str	r1, [r7, #8]
 8010554:	4611      	mov	r1, r2
 8010556:	461a      	mov	r2, r3
 8010558:	460b      	mov	r3, r1
 801055a:	80fb      	strh	r3, [r7, #6]
 801055c:	4613      	mov	r3, r2
 801055e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010560:	7979      	ldrb	r1, [r7, #5]
 8010562:	2300      	movs	r3, #0
 8010564:	9303      	str	r3, [sp, #12]
 8010566:	88fb      	ldrh	r3, [r7, #6]
 8010568:	9302      	str	r3, [sp, #8]
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	2301      	movs	r3, #1
 8010570:	9300      	str	r3, [sp, #0]
 8010572:	2300      	movs	r3, #0
 8010574:	2201      	movs	r2, #1
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f004 f821 	bl	80145be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801057c:	2300      	movs	r3, #0

}
 801057e:	4618      	mov	r0, r3
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b088      	sub	sp, #32
 801058a:	af04      	add	r7, sp, #16
 801058c:	60f8      	str	r0, [r7, #12]
 801058e:	60b9      	str	r1, [r7, #8]
 8010590:	4611      	mov	r1, r2
 8010592:	461a      	mov	r2, r3
 8010594:	460b      	mov	r3, r1
 8010596:	80fb      	strh	r3, [r7, #6]
 8010598:	4613      	mov	r3, r2
 801059a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	f643 135d 	movw	r3, #14685	; 0x395d
 80105a2:	4413      	add	r3, r2
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d001      	beq.n	80105ae <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 80105aa:	2300      	movs	r3, #0
 80105ac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80105ae:	7979      	ldrb	r1, [r7, #5]
 80105b0:	7e3b      	ldrb	r3, [r7, #24]
 80105b2:	9303      	str	r3, [sp, #12]
 80105b4:	88fb      	ldrh	r3, [r7, #6]
 80105b6:	9302      	str	r3, [sp, #8]
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	2301      	movs	r3, #1
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	2302      	movs	r3, #2
 80105c2:	2200      	movs	r2, #0
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f003 fffa 	bl	80145be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80105ca:	2300      	movs	r3, #0
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af04      	add	r7, sp, #16
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	4611      	mov	r1, r2
 80105e0:	461a      	mov	r2, r3
 80105e2:	460b      	mov	r3, r1
 80105e4:	80fb      	strh	r3, [r7, #6]
 80105e6:	4613      	mov	r3, r2
 80105e8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80105ea:	7979      	ldrb	r1, [r7, #5]
 80105ec:	2300      	movs	r3, #0
 80105ee:	9303      	str	r3, [sp, #12]
 80105f0:	88fb      	ldrh	r3, [r7, #6]
 80105f2:	9302      	str	r3, [sp, #8]
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	9301      	str	r3, [sp, #4]
 80105f8:	2301      	movs	r3, #1
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	2302      	movs	r3, #2
 80105fe:	2201      	movs	r2, #1
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f003 ffdc 	bl	80145be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af04      	add	r7, sp, #16
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	4608      	mov	r0, r1
 801061a:	4611      	mov	r1, r2
 801061c:	461a      	mov	r2, r3
 801061e:	4603      	mov	r3, r0
 8010620:	70fb      	strb	r3, [r7, #3]
 8010622:	460b      	mov	r3, r1
 8010624:	70bb      	strb	r3, [r7, #2]
 8010626:	4613      	mov	r3, r2
 8010628:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801062a:	7878      	ldrb	r0, [r7, #1]
 801062c:	78ba      	ldrb	r2, [r7, #2]
 801062e:	78f9      	ldrb	r1, [r7, #3]
 8010630:	8b3b      	ldrh	r3, [r7, #24]
 8010632:	9302      	str	r3, [sp, #8]
 8010634:	7d3b      	ldrb	r3, [r7, #20]
 8010636:	9301      	str	r3, [sp, #4]
 8010638:	7c3b      	ldrb	r3, [r7, #16]
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	4603      	mov	r3, r0
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f003 ff6b 	bl	801451a <USBH_LL_OpenPipe>

  return USBH_OK;
 8010644:	2300      	movs	r3, #0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801065a:	78fb      	ldrb	r3, [r7, #3]
 801065c:	4619      	mov	r1, r3
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f003 ff8c 	bl	801457c <USBH_LL_ClosePipe>

  return USBH_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b084      	sub	sp, #16
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 f839 	bl	80106f2 <USBH_GetFreePipe>
 8010680:	4603      	mov	r3, r0
 8010682:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010684:	89fb      	ldrh	r3, [r7, #14]
 8010686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801068a:	4293      	cmp	r3, r2
 801068c:	d00b      	beq.n	80106a6 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801068e:	78fa      	ldrb	r2, [r7, #3]
 8010690:	89fb      	ldrh	r3, [r7, #14]
 8010692:	f003 030f 	and.w	r3, r3, #15
 8010696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801069a:	6879      	ldr	r1, [r7, #4]
 801069c:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	440b      	add	r3, r1
 80106a4:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80106a6:	89fb      	ldrh	r3, [r7, #14]
 80106a8:	b2db      	uxtb	r3, r3
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80106b2:	b480      	push	{r7}
 80106b4:	b083      	sub	sp, #12
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	460b      	mov	r3, r1
 80106bc:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80106be:	78fb      	ldrb	r3, [r7, #3]
 80106c0:	2b0a      	cmp	r3, #10
 80106c2:	d80f      	bhi.n	80106e4 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80106c4:	78fb      	ldrb	r3, [r7, #3]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	4413      	add	r3, r2
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	78fb      	ldrb	r3, [r7, #3]
 80106d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	440b      	add	r3, r1
 80106e2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80106f2:	b480      	push	{r7}
 80106f4:	b085      	sub	sp, #20
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80106fa:	2300      	movs	r3, #0
 80106fc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]
 8010702:	e010      	b.n	8010726 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	4413      	add	r3, r2
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010716:	2b00      	cmp	r3, #0
 8010718:	d102      	bne.n	8010720 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 801071a:	7bfb      	ldrb	r3, [r7, #15]
 801071c:	b29b      	uxth	r3, r3
 801071e:	e007      	b.n	8010730 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	3301      	adds	r3, #1
 8010724:	73fb      	strb	r3, [r7, #15]
 8010726:	7bfb      	ldrb	r3, [r7, #15]
 8010728:	2b0a      	cmp	r3, #10
 801072a:	d9eb      	bls.n	8010704 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801072c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010746:	79fb      	ldrb	r3, [r7, #7]
 8010748:	4a08      	ldr	r2, [pc, #32]	; (801076c <disk_status+0x30>)
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	4413      	add	r3, r2
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	79fa      	ldrb	r2, [r7, #7]
 8010754:	4905      	ldr	r1, [pc, #20]	; (801076c <disk_status+0x30>)
 8010756:	440a      	add	r2, r1
 8010758:	7a12      	ldrb	r2, [r2, #8]
 801075a:	4610      	mov	r0, r2
 801075c:	4798      	blx	r3
 801075e:	4603      	mov	r3, r0
 8010760:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010762:	7bfb      	ldrb	r3, [r7, #15]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	2400a3f4 	.word	0x2400a3f4

08010770 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	4603      	mov	r3, r0
 8010778:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801077e:	79fb      	ldrb	r3, [r7, #7]
 8010780:	4a0d      	ldr	r2, [pc, #52]	; (80107b8 <disk_initialize+0x48>)
 8010782:	5cd3      	ldrb	r3, [r2, r3]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d111      	bne.n	80107ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010788:	79fb      	ldrb	r3, [r7, #7]
 801078a:	4a0b      	ldr	r2, [pc, #44]	; (80107b8 <disk_initialize+0x48>)
 801078c:	2101      	movs	r1, #1
 801078e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010790:	79fb      	ldrb	r3, [r7, #7]
 8010792:	4a09      	ldr	r2, [pc, #36]	; (80107b8 <disk_initialize+0x48>)
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	4413      	add	r3, r2
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	79fa      	ldrb	r2, [r7, #7]
 801079e:	4906      	ldr	r1, [pc, #24]	; (80107b8 <disk_initialize+0x48>)
 80107a0:	440a      	add	r2, r1
 80107a2:	7a12      	ldrb	r2, [r2, #8]
 80107a4:	4610      	mov	r0, r2
 80107a6:	4798      	blx	r3
 80107a8:	4603      	mov	r3, r0
 80107aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80107ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3710      	adds	r7, #16
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	2400a3f4 	.word	0x2400a3f4

080107bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80107bc:	b590      	push	{r4, r7, lr}
 80107be:	b087      	sub	sp, #28
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60b9      	str	r1, [r7, #8]
 80107c4:	607a      	str	r2, [r7, #4]
 80107c6:	603b      	str	r3, [r7, #0]
 80107c8:	4603      	mov	r3, r0
 80107ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80107cc:	7bfb      	ldrb	r3, [r7, #15]
 80107ce:	4a0a      	ldr	r2, [pc, #40]	; (80107f8 <disk_read+0x3c>)
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	4413      	add	r3, r2
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	689c      	ldr	r4, [r3, #8]
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
 80107da:	4a07      	ldr	r2, [pc, #28]	; (80107f8 <disk_read+0x3c>)
 80107dc:	4413      	add	r3, r2
 80107de:	7a18      	ldrb	r0, [r3, #8]
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	47a0      	blx	r4
 80107e8:	4603      	mov	r3, r0
 80107ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80107ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	371c      	adds	r7, #28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd90      	pop	{r4, r7, pc}
 80107f6:	bf00      	nop
 80107f8:	2400a3f4 	.word	0x2400a3f4

080107fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b087      	sub	sp, #28
 8010800:	af00      	add	r7, sp, #0
 8010802:	60b9      	str	r1, [r7, #8]
 8010804:	607a      	str	r2, [r7, #4]
 8010806:	603b      	str	r3, [r7, #0]
 8010808:	4603      	mov	r3, r0
 801080a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801080c:	7bfb      	ldrb	r3, [r7, #15]
 801080e:	4a0a      	ldr	r2, [pc, #40]	; (8010838 <disk_write+0x3c>)
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4413      	add	r3, r2
 8010814:	685b      	ldr	r3, [r3, #4]
 8010816:	68dc      	ldr	r4, [r3, #12]
 8010818:	7bfb      	ldrb	r3, [r7, #15]
 801081a:	4a07      	ldr	r2, [pc, #28]	; (8010838 <disk_write+0x3c>)
 801081c:	4413      	add	r3, r2
 801081e:	7a18      	ldrb	r0, [r3, #8]
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	68b9      	ldr	r1, [r7, #8]
 8010826:	47a0      	blx	r4
 8010828:	4603      	mov	r3, r0
 801082a:	75fb      	strb	r3, [r7, #23]
  return res;
 801082c:	7dfb      	ldrb	r3, [r7, #23]
}
 801082e:	4618      	mov	r0, r3
 8010830:	371c      	adds	r7, #28
 8010832:	46bd      	mov	sp, r7
 8010834:	bd90      	pop	{r4, r7, pc}
 8010836:	bf00      	nop
 8010838:	2400a3f4 	.word	0x2400a3f4

0801083c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	3301      	adds	r3, #1
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801084c:	89fb      	ldrh	r3, [r7, #14]
 801084e:	021b      	lsls	r3, r3, #8
 8010850:	b21a      	sxth	r2, r3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	b21b      	sxth	r3, r3
 8010858:	4313      	orrs	r3, r2
 801085a:	b21b      	sxth	r3, r3
 801085c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801085e:	89fb      	ldrh	r3, [r7, #14]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3303      	adds	r3, #3
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	021b      	lsls	r3, r3, #8
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	3202      	adds	r2, #2
 8010884:	7812      	ldrb	r2, [r2, #0]
 8010886:	4313      	orrs	r3, r2
 8010888:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	021b      	lsls	r3, r3, #8
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	3201      	adds	r2, #1
 8010892:	7812      	ldrb	r2, [r2, #0]
 8010894:	4313      	orrs	r3, r2
 8010896:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	021b      	lsls	r3, r3, #8
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	7812      	ldrb	r2, [r2, #0]
 80108a0:	4313      	orrs	r3, r2
 80108a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80108a4:	68fb      	ldr	r3, [r7, #12]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3714      	adds	r7, #20
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
	...

080108b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80108bc:	2300      	movs	r3, #0
 80108be:	60fb      	str	r3, [r7, #12]
 80108c0:	e010      	b.n	80108e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80108c2:	4a0d      	ldr	r2, [pc, #52]	; (80108f8 <clear_lock+0x44>)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	011b      	lsls	r3, r3, #4
 80108c8:	4413      	add	r3, r2
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d105      	bne.n	80108de <clear_lock+0x2a>
 80108d2:	4a09      	ldr	r2, [pc, #36]	; (80108f8 <clear_lock+0x44>)
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	011b      	lsls	r3, r3, #4
 80108d8:	4413      	add	r3, r2
 80108da:	2200      	movs	r2, #0
 80108dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	3301      	adds	r3, #1
 80108e2:	60fb      	str	r3, [r7, #12]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d9eb      	bls.n	80108c2 <clear_lock+0xe>
	}
}
 80108ea:	bf00      	nop
 80108ec:	bf00      	nop
 80108ee:	3714      	adds	r7, #20
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr
 80108f8:	2400a3d4 	.word	0x2400a3d4

080108fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b086      	sub	sp, #24
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	78db      	ldrb	r3, [r3, #3]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d034      	beq.n	801097a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	7858      	ldrb	r0, [r3, #1]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010920:	2301      	movs	r3, #1
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	f7ff ff6a 	bl	80107fc <disk_write>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d002      	beq.n	8010934 <sync_window+0x38>
			res = FR_DISK_ERR;
 801092e:	2301      	movs	r3, #1
 8010930:	73fb      	strb	r3, [r7, #15]
 8010932:	e022      	b.n	801097a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a1b      	ldr	r3, [r3, #32]
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	1ad2      	subs	r2, r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	429a      	cmp	r2, r3
 8010948:	d217      	bcs.n	801097a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	789b      	ldrb	r3, [r3, #2]
 801094e:	613b      	str	r3, [r7, #16]
 8010950:	e010      	b.n	8010974 <sync_window+0x78>
					wsect += fs->fsize;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	697a      	ldr	r2, [r7, #20]
 8010958:	4413      	add	r3, r2
 801095a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	7858      	ldrb	r0, [r3, #1]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010966:	2301      	movs	r3, #1
 8010968:	697a      	ldr	r2, [r7, #20]
 801096a:	f7ff ff47 	bl	80107fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	3b01      	subs	r3, #1
 8010972:	613b      	str	r3, [r7, #16]
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d8eb      	bhi.n	8010952 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801097a:	7bfb      	ldrb	r3, [r7, #15]
}
 801097c:	4618      	mov	r0, r3
 801097e:	3718      	adds	r7, #24
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}

08010984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010996:	683a      	ldr	r2, [r7, #0]
 8010998:	429a      	cmp	r2, r3
 801099a:	d01b      	beq.n	80109d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff ffad 	bl	80108fc <sync_window>
 80109a2:	4603      	mov	r3, r0
 80109a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d113      	bne.n	80109d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	7858      	ldrb	r0, [r3, #1]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109b6:	2301      	movs	r3, #1
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	f7ff feff 	bl	80107bc <disk_read>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d004      	beq.n	80109ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80109c4:	f04f 33ff 	mov.w	r3, #4294967295
 80109c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80109ca:	2301      	movs	r3, #1
 80109cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80109d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3710      	adds	r7, #16
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b086      	sub	sp, #24
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d904      	bls.n	80109fe <get_fat+0x20>
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	695b      	ldr	r3, [r3, #20]
 80109f8:	683a      	ldr	r2, [r7, #0]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d302      	bcc.n	8010a04 <get_fat+0x26>
		val = 1;	/* Internal error */
 80109fe:	2301      	movs	r3, #1
 8010a00:	617b      	str	r3, [r7, #20]
 8010a02:	e08f      	b.n	8010b24 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010a04:	f04f 33ff 	mov.w	r3, #4294967295
 8010a08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	2b03      	cmp	r3, #3
 8010a10:	d062      	beq.n	8010ad8 <get_fat+0xfa>
 8010a12:	2b03      	cmp	r3, #3
 8010a14:	dc7c      	bgt.n	8010b10 <get_fat+0x132>
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d002      	beq.n	8010a20 <get_fat+0x42>
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d042      	beq.n	8010aa4 <get_fat+0xc6>
 8010a1e:	e077      	b.n	8010b10 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	60fb      	str	r3, [r7, #12]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	085b      	lsrs	r3, r3, #1
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	6a1a      	ldr	r2, [r3, #32]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	0a5b      	lsrs	r3, r3, #9
 8010a36:	4413      	add	r3, r2
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6938      	ldr	r0, [r7, #16]
 8010a3c:	f7ff ffa2 	bl	8010984 <move_window>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d167      	bne.n	8010b16 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	60fa      	str	r2, [r7, #12]
 8010a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a50:	693a      	ldr	r2, [r7, #16]
 8010a52:	4413      	add	r3, r2
 8010a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	6a1a      	ldr	r2, [r3, #32]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	0a5b      	lsrs	r3, r3, #9
 8010a62:	4413      	add	r3, r2
 8010a64:	4619      	mov	r1, r3
 8010a66:	6938      	ldr	r0, [r7, #16]
 8010a68:	f7ff ff8c 	bl	8010984 <move_window>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d153      	bne.n	8010b1a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a78:	693a      	ldr	r2, [r7, #16]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a80:	021b      	lsls	r3, r3, #8
 8010a82:	461a      	mov	r2, r3
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	4313      	orrs	r3, r2
 8010a88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d002      	beq.n	8010a9a <get_fat+0xbc>
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	091b      	lsrs	r3, r3, #4
 8010a98:	e002      	b.n	8010aa0 <get_fat+0xc2>
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010aa0:	617b      	str	r3, [r7, #20]
			break;
 8010aa2:	e03f      	b.n	8010b24 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	6a1a      	ldr	r2, [r3, #32]
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	0a1b      	lsrs	r3, r3, #8
 8010aac:	4413      	add	r3, r2
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6938      	ldr	r0, [r7, #16]
 8010ab2:	f7ff ff67 	bl	8010984 <move_window>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d130      	bne.n	8010b1e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010aca:	4413      	add	r3, r2
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff feb5 	bl	801083c <ld_word>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	617b      	str	r3, [r7, #20]
			break;
 8010ad6:	e025      	b.n	8010b24 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	6a1a      	ldr	r2, [r3, #32]
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	09db      	lsrs	r3, r3, #7
 8010ae0:	4413      	add	r3, r2
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6938      	ldr	r0, [r7, #16]
 8010ae6:	f7ff ff4d 	bl	8010984 <move_window>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d118      	bne.n	8010b22 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010afe:	4413      	add	r3, r2
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ff feb3 	bl	801086c <ld_dword>
 8010b06:	4603      	mov	r3, r0
 8010b08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010b0c:	617b      	str	r3, [r7, #20]
			break;
 8010b0e:	e009      	b.n	8010b24 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b10:	2301      	movs	r3, #1
 8010b12:	617b      	str	r3, [r7, #20]
 8010b14:	e006      	b.n	8010b24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b16:	bf00      	nop
 8010b18:	e004      	b.n	8010b24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b1a:	bf00      	nop
 8010b1c:	e002      	b.n	8010b24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b1e:	bf00      	nop
 8010b20:	e000      	b.n	8010b24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b22:	bf00      	nop
		}
	}

	return val;
 8010b24:	697b      	ldr	r3, [r7, #20]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b087      	sub	sp, #28
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010b36:	f04f 33ff 	mov.w	r3, #4294967295
 8010b3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d031      	beq.n	8010ba8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	617b      	str	r3, [r7, #20]
 8010b4a:	e002      	b.n	8010b52 <get_ldnumber+0x24>
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	2b20      	cmp	r3, #32
 8010b58:	d903      	bls.n	8010b62 <get_ldnumber+0x34>
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b3a      	cmp	r3, #58	; 0x3a
 8010b60:	d1f4      	bne.n	8010b4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b3a      	cmp	r3, #58	; 0x3a
 8010b68:	d11c      	bne.n	8010ba4 <get_ldnumber+0x76>
			tp = *path;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	60fa      	str	r2, [r7, #12]
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	3b30      	subs	r3, #48	; 0x30
 8010b7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	2b09      	cmp	r3, #9
 8010b80:	d80e      	bhi.n	8010ba0 <get_ldnumber+0x72>
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d10a      	bne.n	8010ba0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d107      	bne.n	8010ba0 <get_ldnumber+0x72>
					vol = (int)i;
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	3301      	adds	r3, #1
 8010b98:	617b      	str	r3, [r7, #20]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	697a      	ldr	r2, [r7, #20]
 8010b9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	e002      	b.n	8010baa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ba8:	693b      	ldr	r3, [r7, #16]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	371c      	adds	r7, #28
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr
	...

08010bb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	70da      	strb	r2, [r3, #3]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f04f 32ff 	mov.w	r2, #4294967295
 8010bce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010bd0:	6839      	ldr	r1, [r7, #0]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff fed6 	bl	8010984 <move_window>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <check_fs+0x2a>
 8010bde:	2304      	movs	r3, #4
 8010be0:	e038      	b.n	8010c54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3330      	adds	r3, #48	; 0x30
 8010be6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff fe26 	bl	801083c <ld_word>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d001      	beq.n	8010c00 <check_fs+0x48>
 8010bfc:	2303      	movs	r3, #3
 8010bfe:	e029      	b.n	8010c54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c06:	2be9      	cmp	r3, #233	; 0xe9
 8010c08:	d009      	beq.n	8010c1e <check_fs+0x66>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c10:	2beb      	cmp	r3, #235	; 0xeb
 8010c12:	d11e      	bne.n	8010c52 <check_fs+0x9a>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010c1a:	2b90      	cmp	r3, #144	; 0x90
 8010c1c:	d119      	bne.n	8010c52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	3330      	adds	r3, #48	; 0x30
 8010c22:	3336      	adds	r3, #54	; 0x36
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7ff fe21 	bl	801086c <ld_dword>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010c30:	4a0a      	ldr	r2, [pc, #40]	; (8010c5c <check_fs+0xa4>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d101      	bne.n	8010c3a <check_fs+0x82>
 8010c36:	2300      	movs	r3, #0
 8010c38:	e00c      	b.n	8010c54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3330      	adds	r3, #48	; 0x30
 8010c3e:	3352      	adds	r3, #82	; 0x52
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff fe13 	bl	801086c <ld_dword>
 8010c46:	4603      	mov	r3, r0
 8010c48:	4a05      	ldr	r2, [pc, #20]	; (8010c60 <check_fs+0xa8>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d101      	bne.n	8010c52 <check_fs+0x9a>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e000      	b.n	8010c54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010c52:	2302      	movs	r3, #2
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	00544146 	.word	0x00544146
 8010c60:	33544146 	.word	0x33544146

08010c64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b096      	sub	sp, #88	; 0x58
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	2200      	movs	r2, #0
 8010c76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f7ff ff58 	bl	8010b2e <get_ldnumber>
 8010c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	da01      	bge.n	8010c8a <find_volume+0x26>
 8010c86:	230b      	movs	r3, #11
 8010c88:	e22e      	b.n	80110e8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c8a:	4aa8      	ldr	r2, [pc, #672]	; (8010f2c <find_volume+0x2c8>)
 8010c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d101      	bne.n	8010c9e <find_volume+0x3a>
 8010c9a:	230c      	movs	r3, #12
 8010c9c:	e224      	b.n	80110e8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ca2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010ca4:	79fb      	ldrb	r3, [r7, #7]
 8010ca6:	f023 0301 	bic.w	r3, r3, #1
 8010caa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d01a      	beq.n	8010cea <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	785b      	ldrb	r3, [r3, #1]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fd3f 	bl	801073c <disk_status>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10c      	bne.n	8010cea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010cd0:	79fb      	ldrb	r3, [r7, #7]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d007      	beq.n	8010ce6 <find_volume+0x82>
 8010cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cda:	f003 0304 	and.w	r3, r3, #4
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d001      	beq.n	8010ce6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010ce2:	230a      	movs	r3, #10
 8010ce4:	e200      	b.n	80110e8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	e1fe      	b.n	80110e8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cec:	2200      	movs	r2, #0
 8010cee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfa:	785b      	ldrb	r3, [r3, #1]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ff fd37 	bl	8010770 <disk_initialize>
 8010d02:	4603      	mov	r3, r0
 8010d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d001      	beq.n	8010d18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010d14:	2303      	movs	r3, #3
 8010d16:	e1e7      	b.n	80110e8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d007      	beq.n	8010d2e <find_volume+0xca>
 8010d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d22:	f003 0304 	and.w	r3, r3, #4
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d001      	beq.n	8010d2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010d2a:	230a      	movs	r3, #10
 8010d2c:	e1dc      	b.n	80110e8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d36:	f7ff ff3f 	bl	8010bb8 <check_fs>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d44:	2b02      	cmp	r3, #2
 8010d46:	d14b      	bne.n	8010de0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d48:	2300      	movs	r3, #0
 8010d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d4c:	e01f      	b.n	8010d8e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d56:	011b      	lsls	r3, r3, #4
 8010d58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010d5c:	4413      	add	r3, r2
 8010d5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d62:	3304      	adds	r3, #4
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <find_volume+0x114>
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	3308      	adds	r3, #8
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7ff fd7c 	bl	801086c <ld_dword>
 8010d74:	4602      	mov	r2, r0
 8010d76:	e000      	b.n	8010d7a <find_volume+0x116>
 8010d78:	2200      	movs	r2, #0
 8010d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010d82:	440b      	add	r3, r1
 8010d84:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8010d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d90:	2b03      	cmp	r3, #3
 8010d92:	d9dc      	bls.n	8010d4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010d94:	2300      	movs	r3, #0
 8010d96:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <find_volume+0x140>
 8010d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da0:	3b01      	subs	r3, #1
 8010da2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010dac:	4413      	add	r3, r2
 8010dae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010db2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d005      	beq.n	8010dc6 <find_volume+0x162>
 8010dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010dbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010dbe:	f7ff fefb 	bl	8010bb8 <check_fs>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	e000      	b.n	8010dc8 <find_volume+0x164>
 8010dc6:	2303      	movs	r3, #3
 8010dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	d905      	bls.n	8010de0 <find_volume+0x17c>
 8010dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8010dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ddc:	2b03      	cmp	r3, #3
 8010dde:	d9e1      	bls.n	8010da4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010de4:	2b04      	cmp	r3, #4
 8010de6:	d101      	bne.n	8010dec <find_volume+0x188>
 8010de8:	2301      	movs	r3, #1
 8010dea:	e17d      	b.n	80110e8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d901      	bls.n	8010df8 <find_volume+0x194>
 8010df4:	230d      	movs	r3, #13
 8010df6:	e177      	b.n	80110e8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfa:	3330      	adds	r3, #48	; 0x30
 8010dfc:	330b      	adds	r3, #11
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff fd1c 	bl	801083c <ld_word>
 8010e04:	4603      	mov	r3, r0
 8010e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e0a:	d001      	beq.n	8010e10 <find_volume+0x1ac>
 8010e0c:	230d      	movs	r3, #13
 8010e0e:	e16b      	b.n	80110e8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e12:	3330      	adds	r3, #48	; 0x30
 8010e14:	3316      	adds	r3, #22
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff fd10 	bl	801083c <ld_word>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <find_volume+0x1d0>
 8010e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e28:	3330      	adds	r3, #48	; 0x30
 8010e2a:	3324      	adds	r3, #36	; 0x24
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff fd1d 	bl	801086c <ld_dword>
 8010e32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e38:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e46:	789b      	ldrb	r3, [r3, #2]
 8010e48:	2b01      	cmp	r3, #1
 8010e4a:	d005      	beq.n	8010e58 <find_volume+0x1f4>
 8010e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4e:	789b      	ldrb	r3, [r3, #2]
 8010e50:	2b02      	cmp	r3, #2
 8010e52:	d001      	beq.n	8010e58 <find_volume+0x1f4>
 8010e54:	230d      	movs	r3, #13
 8010e56:	e147      	b.n	80110e8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5a:	789b      	ldrb	r3, [r3, #2]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e60:	fb02 f303 	mul.w	r3, r2, r3
 8010e64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	895b      	ldrh	r3, [r3, #10]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d008      	beq.n	8010e8c <find_volume+0x228>
 8010e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7c:	895b      	ldrh	r3, [r3, #10]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e82:	895b      	ldrh	r3, [r3, #10]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	4013      	ands	r3, r2
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d001      	beq.n	8010e90 <find_volume+0x22c>
 8010e8c:	230d      	movs	r3, #13
 8010e8e:	e12b      	b.n	80110e8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e92:	3330      	adds	r3, #48	; 0x30
 8010e94:	3311      	adds	r3, #17
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff fcd0 	bl	801083c <ld_word>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	891b      	ldrh	r3, [r3, #8]
 8010ea8:	f003 030f 	and.w	r3, r3, #15
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <find_volume+0x252>
 8010eb2:	230d      	movs	r3, #13
 8010eb4:	e118      	b.n	80110e8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	3330      	adds	r3, #48	; 0x30
 8010eba:	3313      	adds	r3, #19
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff fcbd 	bl	801083c <ld_word>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d106      	bne.n	8010eda <find_volume+0x276>
 8010ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ece:	3330      	adds	r3, #48	; 0x30
 8010ed0:	3320      	adds	r3, #32
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7ff fcca 	bl	801086c <ld_dword>
 8010ed8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	3330      	adds	r3, #48	; 0x30
 8010ede:	330e      	adds	r3, #14
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fcab 	bl	801083c <ld_word>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d101      	bne.n	8010ef4 <find_volume+0x290>
 8010ef0:	230d      	movs	r3, #13
 8010ef2:	e0f9      	b.n	80110e8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010ef4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ef8:	4413      	add	r3, r2
 8010efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010efc:	8912      	ldrh	r2, [r2, #8]
 8010efe:	0912      	lsrs	r2, r2, #4
 8010f00:	b292      	uxth	r2, r2
 8010f02:	4413      	add	r3, r2
 8010f04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d201      	bcs.n	8010f12 <find_volume+0x2ae>
 8010f0e:	230d      	movs	r3, #13
 8010f10:	e0ea      	b.n	80110e8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f1a:	8952      	ldrh	r2, [r2, #10]
 8010f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f20:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d103      	bne.n	8010f30 <find_volume+0x2cc>
 8010f28:	230d      	movs	r3, #13
 8010f2a:	e0dd      	b.n	80110e8 <find_volume+0x484>
 8010f2c:	2400a3cc 	.word	0x2400a3cc
		fmt = FS_FAT32;
 8010f30:	2303      	movs	r3, #3
 8010f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d802      	bhi.n	8010f46 <find_volume+0x2e2>
 8010f40:	2302      	movs	r3, #2
 8010f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f48:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d802      	bhi.n	8010f56 <find_volume+0x2f2>
 8010f50:	2301      	movs	r3, #1
 8010f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f58:	1c9a      	adds	r2, r3, #2
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f62:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f68:	441a      	add	r2, r3
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f72:	441a      	add	r2, r3
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8010f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f7c:	2b03      	cmp	r3, #3
 8010f7e:	d11e      	bne.n	8010fbe <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f82:	3330      	adds	r3, #48	; 0x30
 8010f84:	332a      	adds	r3, #42	; 0x2a
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff fc58 	bl	801083c <ld_word>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d001      	beq.n	8010f96 <find_volume+0x332>
 8010f92:	230d      	movs	r3, #13
 8010f94:	e0a8      	b.n	80110e8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f98:	891b      	ldrh	r3, [r3, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d001      	beq.n	8010fa2 <find_volume+0x33e>
 8010f9e:	230d      	movs	r3, #13
 8010fa0:	e0a2      	b.n	80110e8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa4:	3330      	adds	r3, #48	; 0x30
 8010fa6:	332c      	adds	r3, #44	; 0x2c
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7ff fc5f 	bl	801086c <ld_dword>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb6:	695b      	ldr	r3, [r3, #20]
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	647b      	str	r3, [r7, #68]	; 0x44
 8010fbc:	e01f      	b.n	8010ffe <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc0:	891b      	ldrh	r3, [r3, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <find_volume+0x366>
 8010fc6:	230d      	movs	r3, #13
 8010fc8:	e08e      	b.n	80110e8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fcc:	6a1a      	ldr	r2, [r3, #32]
 8010fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd0:	441a      	add	r2, r3
 8010fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	d103      	bne.n	8010fe6 <find_volume+0x382>
 8010fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	e00a      	b.n	8010ffc <find_volume+0x398>
 8010fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe8:	695a      	ldr	r2, [r3, #20]
 8010fea:	4613      	mov	r3, r2
 8010fec:	005b      	lsls	r3, r3, #1
 8010fee:	4413      	add	r3, r2
 8010ff0:	085a      	lsrs	r2, r3, #1
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	695b      	ldr	r3, [r3, #20]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010ffc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011000:	699a      	ldr	r2, [r3, #24]
 8011002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011004:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011008:	0a5b      	lsrs	r3, r3, #9
 801100a:	429a      	cmp	r2, r3
 801100c:	d201      	bcs.n	8011012 <find_volume+0x3ae>
 801100e:	230d      	movs	r3, #13
 8011010:	e06a      	b.n	80110e8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011014:	f04f 32ff 	mov.w	r2, #4294967295
 8011018:	611a      	str	r2, [r3, #16]
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	691a      	ldr	r2, [r3, #16]
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011024:	2280      	movs	r2, #128	; 0x80
 8011026:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801102c:	2b03      	cmp	r3, #3
 801102e:	d149      	bne.n	80110c4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	3330      	adds	r3, #48	; 0x30
 8011034:	3330      	adds	r3, #48	; 0x30
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff fc00 	bl	801083c <ld_word>
 801103c:	4603      	mov	r3, r0
 801103e:	2b01      	cmp	r3, #1
 8011040:	d140      	bne.n	80110c4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011044:	3301      	adds	r3, #1
 8011046:	4619      	mov	r1, r3
 8011048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801104a:	f7ff fc9b 	bl	8010984 <move_window>
 801104e:	4603      	mov	r3, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	d137      	bne.n	80110c4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011056:	2200      	movs	r2, #0
 8011058:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105c:	3330      	adds	r3, #48	; 0x30
 801105e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff fbea 	bl	801083c <ld_word>
 8011068:	4603      	mov	r3, r0
 801106a:	461a      	mov	r2, r3
 801106c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011070:	429a      	cmp	r2, r3
 8011072:	d127      	bne.n	80110c4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	3330      	adds	r3, #48	; 0x30
 8011078:	4618      	mov	r0, r3
 801107a:	f7ff fbf7 	bl	801086c <ld_dword>
 801107e:	4603      	mov	r3, r0
 8011080:	4a1b      	ldr	r2, [pc, #108]	; (80110f0 <find_volume+0x48c>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d11e      	bne.n	80110c4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011088:	3330      	adds	r3, #48	; 0x30
 801108a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801108e:	4618      	mov	r0, r3
 8011090:	f7ff fbec 	bl	801086c <ld_dword>
 8011094:	4603      	mov	r3, r0
 8011096:	4a17      	ldr	r2, [pc, #92]	; (80110f4 <find_volume+0x490>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d113      	bne.n	80110c4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109e:	3330      	adds	r3, #48	; 0x30
 80110a0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7ff fbe1 	bl	801086c <ld_dword>
 80110aa:	4602      	mov	r2, r0
 80110ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ae:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80110b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b2:	3330      	adds	r3, #48	; 0x30
 80110b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7ff fbd7 	bl	801086c <ld_dword>
 80110be:	4602      	mov	r2, r0
 80110c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80110c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80110ca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80110cc:	4b0a      	ldr	r3, [pc, #40]	; (80110f8 <find_volume+0x494>)
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	3301      	adds	r3, #1
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	4b08      	ldr	r3, [pc, #32]	; (80110f8 <find_volume+0x494>)
 80110d6:	801a      	strh	r2, [r3, #0]
 80110d8:	4b07      	ldr	r3, [pc, #28]	; (80110f8 <find_volume+0x494>)
 80110da:	881a      	ldrh	r2, [r3, #0]
 80110dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110de:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80110e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80110e2:	f7ff fbe7 	bl	80108b4 <clear_lock>
#endif
	return FR_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3758      	adds	r7, #88	; 0x58
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	41615252 	.word	0x41615252
 80110f4:	61417272 	.word	0x61417272
 80110f8:	2400a3d0 	.word	0x2400a3d0

080110fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	4613      	mov	r3, r2
 8011108:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801110e:	f107 0310 	add.w	r3, r7, #16
 8011112:	4618      	mov	r0, r3
 8011114:	f7ff fd0b 	bl	8010b2e <get_ldnumber>
 8011118:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	2b00      	cmp	r3, #0
 801111e:	da01      	bge.n	8011124 <f_mount+0x28>
 8011120:	230b      	movs	r3, #11
 8011122:	e02b      	b.n	801117c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011124:	4a17      	ldr	r2, [pc, #92]	; (8011184 <f_mount+0x88>)
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801112c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d005      	beq.n	8011140 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011134:	69b8      	ldr	r0, [r7, #24]
 8011136:	f7ff fbbd 	bl	80108b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	2200      	movs	r2, #0
 801113e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d002      	beq.n	801114c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	490d      	ldr	r1, [pc, #52]	; (8011184 <f_mount+0x88>)
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d002      	beq.n	8011162 <f_mount+0x66>
 801115c:	79fb      	ldrb	r3, [r7, #7]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d001      	beq.n	8011166 <f_mount+0x6a>
 8011162:	2300      	movs	r3, #0
 8011164:	e00a      	b.n	801117c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011166:	f107 010c 	add.w	r1, r7, #12
 801116a:	f107 0308 	add.w	r3, r7, #8
 801116e:	2200      	movs	r2, #0
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff fd77 	bl	8010c64 <find_volume>
 8011176:	4603      	mov	r3, r0
 8011178:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801117a:	7dfb      	ldrb	r3, [r7, #23]
}
 801117c:	4618      	mov	r0, r3
 801117e:	3720      	adds	r7, #32
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	2400a3cc 	.word	0x2400a3cc

08011188 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b092      	sub	sp, #72	; 0x48
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011194:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011198:	f107 030c 	add.w	r3, r7, #12
 801119c:	2200      	movs	r2, #0
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ff fd60 	bl	8010c64 <find_volume>
 80111a4:	4603      	mov	r3, r0
 80111a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80111aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f040 8099 	bne.w	80112e6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80111b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80111ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111bc:	691a      	ldr	r2, [r3, #16]
 80111be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	3b02      	subs	r3, #2
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d804      	bhi.n	80111d2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80111c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ca:	691a      	ldr	r2, [r3, #16]
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	601a      	str	r2, [r3, #0]
 80111d0:	e089      	b.n	80112e6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80111d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d128      	bne.n	8011230 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80111de:	2302      	movs	r3, #2
 80111e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80111e6:	f107 0314 	add.w	r3, r7, #20
 80111ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7ff fbf6 	bl	80109de <get_fat>
 80111f2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111fa:	d103      	bne.n	8011204 <f_getfree+0x7c>
 80111fc:	2301      	movs	r3, #1
 80111fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011202:	e063      	b.n	80112cc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	2b01      	cmp	r3, #1
 8011208:	d103      	bne.n	8011212 <f_getfree+0x8a>
 801120a:	2302      	movs	r3, #2
 801120c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011210:	e05c      	b.n	80112cc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d102      	bne.n	801121e <f_getfree+0x96>
 8011218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801121a:	3301      	adds	r3, #1
 801121c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801121e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011220:	3301      	adds	r3, #1
 8011222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011226:	695b      	ldr	r3, [r3, #20]
 8011228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801122a:	429a      	cmp	r2, r3
 801122c:	d3db      	bcc.n	80111e6 <f_getfree+0x5e>
 801122e:	e04d      	b.n	80112cc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011232:	695b      	ldr	r3, [r3, #20]
 8011234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801123c:	2300      	movs	r3, #0
 801123e:	637b      	str	r3, [r7, #52]	; 0x34
 8011240:	2300      	movs	r3, #0
 8011242:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8011244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011246:	2b00      	cmp	r3, #0
 8011248:	d113      	bne.n	8011272 <f_getfree+0xea>
							res = move_window(fs, sect++);
 801124a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	1c5a      	adds	r2, r3, #1
 8011250:	63ba      	str	r2, [r7, #56]	; 0x38
 8011252:	4619      	mov	r1, r3
 8011254:	f7ff fb96 	bl	8010984 <move_window>
 8011258:	4603      	mov	r3, r0
 801125a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801125e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011262:	2b00      	cmp	r3, #0
 8011264:	d131      	bne.n	80112ca <f_getfree+0x142>
							p = fs->win;
 8011266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011268:	3330      	adds	r3, #48	; 0x30
 801126a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801126c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011270:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	2b02      	cmp	r3, #2
 8011278:	d10f      	bne.n	801129a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801127a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801127c:	f7ff fade 	bl	801083c <ld_word>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d102      	bne.n	801128c <f_getfree+0x104>
 8011286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011288:	3301      	adds	r3, #1
 801128a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128e:	3302      	adds	r3, #2
 8011290:	633b      	str	r3, [r7, #48]	; 0x30
 8011292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011294:	3b02      	subs	r3, #2
 8011296:	637b      	str	r3, [r7, #52]	; 0x34
 8011298:	e010      	b.n	80112bc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801129a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801129c:	f7ff fae6 	bl	801086c <ld_dword>
 80112a0:	4603      	mov	r3, r0
 80112a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d102      	bne.n	80112b0 <f_getfree+0x128>
 80112aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ac:	3301      	adds	r3, #1
 80112ae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80112b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b2:	3304      	adds	r3, #4
 80112b4:	633b      	str	r3, [r7, #48]	; 0x30
 80112b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b8:	3b04      	subs	r3, #4
 80112ba:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80112bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112be:	3b01      	subs	r3, #1
 80112c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1bd      	bne.n	8011244 <f_getfree+0xbc>
 80112c8:	e000      	b.n	80112cc <f_getfree+0x144>
							if (res != FR_OK) break;
 80112ca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80112d0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80112d6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	791a      	ldrb	r2, [r3, #4]
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	f042 0201 	orr.w	r2, r2, #1
 80112e2:	b2d2      	uxtb	r2, r2
 80112e4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80112e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3748      	adds	r7, #72	; 0x48
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
	...

080112f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	4613      	mov	r3, r2
 8011300:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011302:	2301      	movs	r3, #1
 8011304:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011306:	2300      	movs	r3, #0
 8011308:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801130a:	4b1f      	ldr	r3, [pc, #124]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 801130c:	7a5b      	ldrb	r3, [r3, #9]
 801130e:	b2db      	uxtb	r3, r3
 8011310:	2b00      	cmp	r3, #0
 8011312:	d131      	bne.n	8011378 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011314:	4b1c      	ldr	r3, [pc, #112]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 8011316:	7a5b      	ldrb	r3, [r3, #9]
 8011318:	b2db      	uxtb	r3, r3
 801131a:	461a      	mov	r2, r3
 801131c:	4b1a      	ldr	r3, [pc, #104]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 801131e:	2100      	movs	r1, #0
 8011320:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011322:	4b19      	ldr	r3, [pc, #100]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 8011324:	7a5b      	ldrb	r3, [r3, #9]
 8011326:	b2db      	uxtb	r3, r3
 8011328:	4a17      	ldr	r2, [pc, #92]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	4413      	add	r3, r2
 801132e:	68fa      	ldr	r2, [r7, #12]
 8011330:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011332:	4b15      	ldr	r3, [pc, #84]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 8011334:	7a5b      	ldrb	r3, [r3, #9]
 8011336:	b2db      	uxtb	r3, r3
 8011338:	461a      	mov	r2, r3
 801133a:	4b13      	ldr	r3, [pc, #76]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 801133c:	4413      	add	r3, r2
 801133e:	79fa      	ldrb	r2, [r7, #7]
 8011340:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011342:	4b11      	ldr	r3, [pc, #68]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 8011344:	7a5b      	ldrb	r3, [r3, #9]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	b2d1      	uxtb	r1, r2
 801134c:	4a0e      	ldr	r2, [pc, #56]	; (8011388 <FATFS_LinkDriverEx+0x94>)
 801134e:	7251      	strb	r1, [r2, #9]
 8011350:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011352:	7dbb      	ldrb	r3, [r7, #22]
 8011354:	3330      	adds	r3, #48	; 0x30
 8011356:	b2da      	uxtb	r2, r3
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	3301      	adds	r3, #1
 8011360:	223a      	movs	r2, #58	; 0x3a
 8011362:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	3302      	adds	r3, #2
 8011368:	222f      	movs	r2, #47	; 0x2f
 801136a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	3303      	adds	r3, #3
 8011370:	2200      	movs	r2, #0
 8011372:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011374:	2300      	movs	r3, #0
 8011376:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011378:	7dfb      	ldrb	r3, [r7, #23]
}
 801137a:	4618      	mov	r0, r3
 801137c:	371c      	adds	r7, #28
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop
 8011388:	2400a3f4 	.word	0x2400a3f4

0801138c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011396:	2200      	movs	r2, #0
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7ff ffaa 	bl	80112f4 <FATFS_LinkDriverEx>
 80113a0:	4603      	mov	r3, r0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 80113aa:	b480      	push	{r7}
 80113ac:	b083      	sub	sp, #12
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	605a      	str	r2, [r3, #4]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	685a      	ldr	r2, [r3, #4]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	601a      	str	r2, [r3, #0]
}
 80113c0:	bf00      	nop
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	685a      	ldr	r2, [r3, #4]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	683a      	ldr	r2, [r7, #0]
 80113ea:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	683a      	ldr	r2, [r7, #0]
 80113f2:	601a      	str	r2, [r3, #0]
}
 80113f4:	bf00      	nop
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 801140a:	6839      	ldr	r1, [r7, #0]
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff ffdd 	bl	80113cc <metal_list_add_before>
}
 8011412:	bf00      	nop
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8011424:	6839      	ldr	r1, [r7, #0]
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f001 ff8a 	bl	8013340 <metal_machine_cache_flush>
}
 801142c:	bf00      	nop
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f001 ff88 	bl	8013356 <metal_machine_cache_invalidate>
}
 8011446:	bf00      	nop
 8011448:	3708      	adds	r7, #8
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}

0801144e <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 801144e:	b580      	push	{r7, lr}
 8011450:	b082      	sub	sp, #8
 8011452:	af00      	add	r7, sp, #0
 8011454:	6078      	str	r0, [r7, #4]
 8011456:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7ff ffdd 	bl	801141a <__metal_cache_flush>
}
 8011460:	bf00      	nop
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8011472:	6839      	ldr	r1, [r7, #0]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff ffdd 	bl	8011434 <__metal_cache_invalidate>
}
 801147a:	bf00      	nop
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
	...

08011484 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d008      	beq.n	80114a4 <metal_bus_register+0x20>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d004      	beq.n	80114a4 <metal_bus_register+0x20>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d102      	bne.n	80114aa <metal_bus_register+0x26>
		return -EINVAL;
 80114a4:	f06f 0315 	mvn.w	r3, #21
 80114a8:	e026      	b.n	80114f8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2100      	movs	r1, #0
 80114b0:	4618      	mov	r0, r3
 80114b2:	f000 f82b 	bl	801150c <metal_bus_find>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d102      	bne.n	80114c2 <metal_bus_register+0x3e>
		return -EEXIST;
 80114bc:	f06f 0310 	mvn.w	r3, #16
 80114c0:	e01a      	b.n	80114f8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	331c      	adds	r3, #28
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff ff6f 	bl	80113aa <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	3324      	adds	r3, #36	; 0x24
 80114d0:	4619      	mov	r1, r3
 80114d2:	480b      	ldr	r0, [pc, #44]	; (8011500 <metal_bus_register+0x7c>)
 80114d4:	f7ff ff94 	bl	8011400 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80114d8:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <metal_bus_register+0x80>)
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	2b06      	cmp	r3, #6
 80114de:	d90a      	bls.n	80114f6 <metal_bus_register+0x72>
 80114e0:	4b08      	ldr	r3, [pc, #32]	; (8011504 <metal_bus_register+0x80>)
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d006      	beq.n	80114f6 <metal_bus_register+0x72>
 80114e8:	4b06      	ldr	r3, [pc, #24]	; (8011504 <metal_bus_register+0x80>)
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	6812      	ldr	r2, [r2, #0]
 80114f0:	4905      	ldr	r1, [pc, #20]	; (8011508 <metal_bus_register+0x84>)
 80114f2:	2007      	movs	r0, #7
 80114f4:	4798      	blx	r3
	return 0;
 80114f6:	2300      	movs	r3, #0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3708      	adds	r7, #8
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}
 8011500:	2400ae58 	.word	0x2400ae58
 8011504:	2400ae50 	.word	0x2400ae50
 8011508:	08019304 	.word	0x08019304

0801150c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8011516:	4b13      	ldr	r3, [pc, #76]	; (8011564 <metal_bus_find+0x58>)
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	60fb      	str	r3, [r7, #12]
 801151c:	e017      	b.n	801154e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	3b24      	subs	r3, #36	; 0x24
 8011522:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f7ee fed8 	bl	80002e0 <strcmp>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d003      	beq.n	801153e <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	60fb      	str	r3, [r7, #12]
 801153c:	e007      	b.n	801154e <metal_bus_find+0x42>
			continue;
		if (result)
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d002      	beq.n	801154a <metal_bus_find+0x3e>
			*result = bus;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	68ba      	ldr	r2, [r7, #8]
 8011548:	601a      	str	r2, [r3, #0]
		return 0;
 801154a:	2300      	movs	r3, #0
 801154c:	e005      	b.n	801155a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	4a05      	ldr	r2, [pc, #20]	; (8011568 <metal_bus_find+0x5c>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d1e3      	bne.n	801151e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8011556:	f06f 0301 	mvn.w	r3, #1
}
 801155a:	4618      	mov	r0, r3
 801155c:	3710      	adds	r7, #16
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	2400ae50 	.word	0x2400ae50
 8011568:	2400ae58 	.word	0x2400ae58

0801156c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00d      	beq.n	801159a <metal_device_open+0x2e>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d009      	beq.n	801159a <metal_device_open+0x2e>
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d006      	beq.n	801159a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <metal_device_open+0x2e>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d102      	bne.n	80115a0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 801159a:	f06f 0315 	mvn.w	r3, #21
 801159e:	e01f      	b.n	80115e0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80115a0:	f107 0310 	add.w	r3, r7, #16
 80115a4:	4619      	mov	r1, r3
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f7ff ffb0 	bl	801150c <metal_bus_find>
 80115ac:	6178      	str	r0, [r7, #20]
	if (error)
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <metal_device_open+0x4c>
		return error;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	e013      	b.n	80115e0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d102      	bne.n	80115c6 <metal_device_open+0x5a>
		return -ENODEV;
 80115c0:	f06f 0312 	mvn.w	r3, #18
 80115c4:	e00c      	b.n	80115e0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	6938      	ldr	r0, [r7, #16]
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	68b9      	ldr	r1, [r7, #8]
 80115d0:	4798      	blx	r3
 80115d2:	6178      	str	r0, [r7, #20]
	if (error)
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <metal_device_open+0x72>
		return error;
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	e000      	b.n	80115e0 <metal_device_open+0x74>

	return 0;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3718      	adds	r7, #24
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d008      	beq.n	801160a <metal_register_generic_device+0x22>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d003      	beq.n	801160a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8011606:	2b02      	cmp	r3, #2
 8011608:	d902      	bls.n	8011610 <metal_register_generic_device+0x28>
		return -EINVAL;
 801160a:	f06f 0315 	mvn.w	r3, #21
 801160e:	e009      	b.n	8011624 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4a06      	ldr	r2, [pc, #24]	; (801162c <metal_register_generic_device+0x44>)
 8011614:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	336c      	adds	r3, #108	; 0x6c
 801161a:	4619      	mov	r1, r3
 801161c:	4804      	ldr	r0, [pc, #16]	; (8011630 <metal_register_generic_device+0x48>)
 801161e:	f7ff feef 	bl	8011400 <metal_list_add_tail>
			    &device->node);
	return 0;
 8011622:	2300      	movs	r3, #0
}
 8011624:	4618      	mov	r0, r3
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	24000058 	.word	0x24000058
 8011630:	2400ae68 	.word	0x2400ae68

08011634 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b086      	sub	sp, #24
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8011640:	4b12      	ldr	r3, [pc, #72]	; (801168c <metal_generic_dev_open+0x58>)
 8011642:	699b      	ldr	r3, [r3, #24]
 8011644:	617b      	str	r3, [r7, #20]
 8011646:	e017      	b.n	8011678 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	3b6c      	subs	r3, #108	; 0x6c
 801164c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	68b9      	ldr	r1, [r7, #8]
 8011654:	4618      	mov	r0, r3
 8011656:	f7ee fe43 	bl	80002e0 <strcmp>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d003      	beq.n	8011668 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	617b      	str	r3, [r7, #20]
 8011666:	e007      	b.n	8011678 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	693a      	ldr	r2, [r7, #16]
 801166c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 801166e:	6938      	ldr	r0, [r7, #16]
 8011670:	f000 f88c 	bl	801178c <metal_generic_dev_sys_open>
 8011674:	4603      	mov	r3, r0
 8011676:	e005      	b.n	8011684 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	4a05      	ldr	r2, [pc, #20]	; (8011690 <metal_generic_dev_open+0x5c>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d1e3      	bne.n	8011648 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8011680:	f06f 0312 	mvn.w	r3, #18
}
 8011684:	4618      	mov	r0, r3
 8011686:	3718      	adds	r7, #24
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	2400ae50 	.word	0x2400ae50
 8011690:	2400ae68 	.word	0x2400ae68

08011694 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b086      	sub	sp, #24
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
 80116a0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 80116a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d009      	beq.n	80116be <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 80116aa:	6a3a      	ldr	r2, [r7, #32]
 80116ac:	4613      	mov	r3, r2
 80116ae:	005b      	lsls	r3, r3, #1
 80116b0:	4413      	add	r3, r2
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	461a      	mov	r2, r3
 80116b6:	6839      	ldr	r1, [r7, #0]
 80116b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116ba:	f003 f8c5 	bl	8014848 <memcpy>
	for (i = 0; i < nents_in; i++) {
 80116be:	2300      	movs	r3, #0
 80116c0:	617b      	str	r3, [r7, #20]
 80116c2:	e02f      	b.n	8011724 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	d114      	bne.n	80116f4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	4613      	mov	r3, r2
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	4413      	add	r3, r2
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	461a      	mov	r2, r3
 80116d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d8:	4413      	add	r3, r2
 80116da:	6818      	ldr	r0, [r3, #0]
 80116dc:	697a      	ldr	r2, [r7, #20]
 80116de:	4613      	mov	r3, r2
 80116e0:	005b      	lsls	r3, r3, #1
 80116e2:	4413      	add	r3, r2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	461a      	mov	r2, r3
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	4413      	add	r3, r2
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	4619      	mov	r1, r3
 80116f0:	f7ff fead 	bl	801144e <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 80116f4:	697a      	ldr	r2, [r7, #20]
 80116f6:	4613      	mov	r3, r2
 80116f8:	005b      	lsls	r3, r3, #1
 80116fa:	4413      	add	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	461a      	mov	r2, r3
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	4413      	add	r3, r2
 8011704:	6818      	ldr	r0, [r3, #0]
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	4613      	mov	r3, r2
 801170a:	005b      	lsls	r3, r3, #1
 801170c:	4413      	add	r3, r2
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	461a      	mov	r2, r3
 8011712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011714:	4413      	add	r3, r2
 8011716:	689b      	ldr	r3, [r3, #8]
 8011718:	4619      	mov	r1, r3
 801171a:	f7ff fea5 	bl	8011468 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	3301      	adds	r3, #1
 8011722:	617b      	str	r3, [r7, #20]
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	6a3b      	ldr	r3, [r7, #32]
 8011728:	429a      	cmp	r2, r3
 801172a:	dbcb      	blt.n	80116c4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 801172c:	6a3b      	ldr	r3, [r7, #32]
}
 801172e:	4618      	mov	r0, r3
 8011730:	3718      	adds	r7, #24
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b086      	sub	sp, #24
 801173a:	af00      	add	r7, sp, #0
 801173c:	60f8      	str	r0, [r7, #12]
 801173e:	60b9      	str	r1, [r7, #8]
 8011740:	607a      	str	r2, [r7, #4]
 8011742:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8011744:	2300      	movs	r3, #0
 8011746:	617b      	str	r3, [r7, #20]
 8011748:	e017      	b.n	801177a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	4613      	mov	r3, r2
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	4413      	add	r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	461a      	mov	r2, r3
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	4413      	add	r3, r2
 801175a:	6818      	ldr	r0, [r3, #0]
 801175c:	697a      	ldr	r2, [r7, #20]
 801175e:	4613      	mov	r3, r2
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	4413      	add	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	461a      	mov	r2, r3
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	4413      	add	r3, r2
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	4619      	mov	r1, r3
 8011770:	f7ff fe7a 	bl	8011468 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	3301      	adds	r3, #1
 8011778:	617b      	str	r3, [r7, #20]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	6a3b      	ldr	r3, [r7, #32]
 801177e:	429a      	cmp	r2, r3
 8011780:	dbe3      	blt.n	801174a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8011782:	bf00      	nop
 8011784:	bf00      	nop
 8011786:	3718      	adds	r7, #24
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8011794:	2300      	movs	r3, #0
 8011796:	60fb      	str	r3, [r7, #12]
 8011798:	e013      	b.n	80117c2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 801179a:	68fa      	ldr	r2, [r7, #12]
 801179c:	4613      	mov	r3, r2
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	4413      	add	r3, r2
 80117a2:	011b      	lsls	r3, r3, #4
 80117a4:	3308      	adds	r3, #8
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	3304      	adds	r3, #4
 80117ac:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00b      	beq.n	80117ce <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 80117b6:	68b8      	ldr	r0, [r7, #8]
 80117b8:	f000 f81e 	bl	80117f8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3301      	adds	r3, #1
 80117c0:	60fb      	str	r3, [r7, #12]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	689b      	ldr	r3, [r3, #8]
 80117c6:	68fa      	ldr	r2, [r7, #12]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d3e6      	bcc.n	801179a <metal_generic_dev_sys_open+0xe>
 80117cc:	e000      	b.n	80117d0 <metal_generic_dev_sys_open+0x44>
			break;
 80117ce:	bf00      	nop
	}

	return 0;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3710      	adds	r7, #16
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
	...

080117dc <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 80117e4:	4803      	ldr	r0, [pc, #12]	; (80117f4 <metal_sys_init+0x18>)
 80117e6:	f7ff fe4d 	bl	8011484 <metal_bus_register>
	return 0;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	24000058 	.word	0x24000058

080117f8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	613b      	str	r3, [r7, #16]
	if (psize) {
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d02c      	beq.n	801186c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	693a      	ldr	r2, [r7, #16]
 8011818:	fa22 f303 	lsr.w	r3, r2, r3
 801181c:	2b00      	cmp	r3, #0
 801181e:	d005      	beq.n	801182c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	2201      	movs	r2, #1
 8011826:	fa02 f303 	lsl.w	r3, r2, r3
 801182a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 801182c:	2300      	movs	r3, #0
 801182e:	617b      	str	r3, [r7, #20]
 8011830:	e013      	b.n	801185a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	4413      	add	r3, r2
 801183c:	6819      	ldr	r1, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	695b      	ldr	r3, [r3, #20]
 8011842:	693a      	ldr	r2, [r7, #16]
 8011844:	68f8      	ldr	r0, [r7, #12]
 8011846:	f001 fd91 	bl	801336c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	4413      	add	r3, r2
 8011852:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	3301      	adds	r3, #1
 8011858:	617b      	str	r3, [r7, #20]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	689a      	ldr	r2, [r3, #8]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	fa22 f303 	lsr.w	r3, r2, r3
 8011866:	697a      	ldr	r2, [r7, #20]
 8011868:	429a      	cmp	r2, r3
 801186a:	d9e2      	bls.n	8011832 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 801186c:	bf00      	nop
 801186e:	3718      	adds	r7, #24
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <metal_list_init>:
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	605a      	str	r2, [r3, #4]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	685a      	ldr	r2, [r3, #4]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	601a      	str	r2, [r3, #0]
}
 801188a:	bf00      	nop
 801188c:	370c      	adds	r7, #12
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr
	...

08011898 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
	int error = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 80118a4:	2220      	movs	r2, #32
 80118a6:	2100      	movs	r1, #0
 80118a8:	4810      	ldr	r0, [pc, #64]	; (80118ec <metal_init+0x54>)
 80118aa:	f002 fff5 	bl	8014898 <memset>

	_metal.common.log_handler   = params->log_handler;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	4a0e      	ldr	r2, [pc, #56]	; (80118ec <metal_init+0x54>)
 80118b4:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	791a      	ldrb	r2, [r3, #4]
 80118ba:	4b0c      	ldr	r3, [pc, #48]	; (80118ec <metal_init+0x54>)
 80118bc:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 80118be:	480c      	ldr	r0, [pc, #48]	; (80118f0 <metal_init+0x58>)
 80118c0:	f7ff ffd8 	bl	8011874 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 80118c4:	480b      	ldr	r0, [pc, #44]	; (80118f4 <metal_init+0x5c>)
 80118c6:	f7ff ffd5 	bl	8011874 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 80118ca:	480b      	ldr	r0, [pc, #44]	; (80118f8 <metal_init+0x60>)
 80118cc:	f7ff ffd2 	bl	8011874 <metal_list_init>

	error = metal_sys_init(params);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7ff ff83 	bl	80117dc <metal_sys_init>
 80118d6:	60f8      	str	r0, [r7, #12]
	if (error)
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d001      	beq.n	80118e2 <metal_init+0x4a>
		return error;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	e000      	b.n	80118e4 <metal_init+0x4c>

	return error;
 80118e2:	68fb      	ldr	r3, [r7, #12]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	2400ae50 	.word	0x2400ae50
 80118f0:	2400ae58 	.word	0x2400ae58
 80118f4:	2400ae60 	.word	0x2400ae60
 80118f8:	2400ae68 	.word	0x2400ae68

080118fc <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 801190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801190e:	d009      	beq.n	8011924 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	683a      	ldr	r2, [r7, #0]
 8011916:	429a      	cmp	r2, r3
 8011918:	d804      	bhi.n	8011924 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	4413      	add	r3, r2
 8011922:	e000      	b.n	8011926 <metal_io_virt+0x2a>
 8011924:	2300      	movs	r3, #0
}
 8011926:	4618      	mov	r0, r3
 8011928:	370c      	adds	r7, #12
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr

08011932 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8011932:	b5b0      	push	{r4, r5, r7, lr}
 8011934:	b08a      	sub	sp, #40	; 0x28
 8011936:	af00      	add	r7, sp, #0
 8011938:	60f8      	str	r0, [r7, #12]
 801193a:	60b9      	str	r1, [r7, #8]
 801193c:	607a      	str	r2, [r7, #4]
 801193e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8011940:	f107 0310 	add.w	r3, r7, #16
 8011944:	2200      	movs	r2, #0
 8011946:	601a      	str	r2, [r3, #0]
 8011948:	605a      	str	r2, [r3, #4]
 801194a:	609a      	str	r2, [r3, #8]
 801194c:	60da      	str	r2, [r3, #12]
 801194e:	611a      	str	r2, [r3, #16]
 8011950:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	605a      	str	r2, [r3, #4]
	io->size = size;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	683a      	ldr	r2, [r7, #0]
 8011962:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011968:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 801196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196c:	2b1f      	cmp	r3, #31
 801196e:	d904      	bls.n	801197a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f04f 32ff 	mov.w	r2, #4294967295
 8011976:	611a      	str	r2, [r3, #16]
 8011978:	e006      	b.n	8011988 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 801197a:	2201      	movs	r2, #1
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	fa02 f303 	lsl.w	r3, r2, r3
 8011982:	1e5a      	subs	r2, r3, #1
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801198c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 801198e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00b      	beq.n	80119ac <metal_io_init+0x7a>
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011998:	f103 0418 	add.w	r4, r3, #24
 801199c:	4615      	mov	r5, r2
 801199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80119a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80119aa:	e00a      	b.n	80119c2 <metal_io_init+0x90>
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f103 0418 	add.w	r4, r3, #24
 80119b2:	f107 0510 	add.w	r5, r7, #16
 80119b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80119be:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f7ff ff18 	bl	80117f8 <metal_sys_io_mem_map>
}
 80119c8:	bf00      	nop
 80119ca:	3728      	adds	r7, #40	; 0x28
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bdb0      	pop	{r4, r5, r7, pc}

080119d0 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 80119d0:	b590      	push	{r4, r7, lr}
 80119d2:	b08b      	sub	sp, #44	; 0x2c
 80119d4:	af02      	add	r7, sp, #8
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
 80119dc:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 80119de:	68b9      	ldr	r1, [r7, #8]
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f7ff ff8b 	bl	80118fc <metal_io_virt>
 80119e6:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	68ba      	ldr	r2, [r7, #8]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d902      	bls.n	80119fc <metal_io_block_read+0x2c>
		return -ERANGE;
 80119f6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80119fa:	e05c      	b.n	8011ab6 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 80119fc:	683a      	ldr	r2, [r7, #0]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	441a      	add	r2, r3
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	689b      	ldr	r3, [r3, #8]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d904      	bls.n	8011a14 <metal_io_block_read+0x44>
		len = io->size - offset;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	689a      	ldr	r2, [r3, #8]
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	1ad3      	subs	r3, r2, r3
 8011a12:	603b      	str	r3, [r7, #0]
	retlen = len;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	6a1b      	ldr	r3, [r3, #32]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00a      	beq.n	8011a36 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6a1c      	ldr	r4, [r3, #32]
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	2305      	movs	r3, #5
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	68b9      	ldr	r1, [r7, #8]
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	47a0      	blx	r4
 8011a32:	6178      	str	r0, [r7, #20]
 8011a34:	e03e      	b.n	8011ab4 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8011a36:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8011a3a:	e00c      	b.n	8011a56 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	701a      	strb	r2, [r3, #0]
			dest++;
 8011a44:	69bb      	ldr	r3, [r7, #24]
 8011a46:	3301      	adds	r3, #1
 8011a48:	61bb      	str	r3, [r7, #24]
			ptr++;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	61fb      	str	r3, [r7, #28]
			len--;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	603b      	str	r3, [r7, #0]
		while ( len && (
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d017      	beq.n	8011a8c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1ea      	bne.n	8011a3c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1e5      	bne.n	8011a3c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8011a70:	e00c      	b.n	8011a8c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	3304      	adds	r3, #4
 8011a84:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	3b04      	subs	r3, #4
 8011a8a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	2b03      	cmp	r3, #3
 8011a90:	dcef      	bgt.n	8011a72 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8011a92:	e00c      	b.n	8011aae <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	61bb      	str	r3, [r7, #24]
 8011aa2:	69fb      	ldr	r3, [r7, #28]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	61fb      	str	r3, [r7, #28]
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	603b      	str	r3, [r7, #0]
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d1ef      	bne.n	8011a94 <metal_io_block_read+0xc4>
	}
	return retlen;
 8011ab4:	697b      	ldr	r3, [r7, #20]
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3724      	adds	r7, #36	; 0x24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd90      	pop	{r4, r7, pc}

08011abe <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8011abe:	b590      	push	{r4, r7, lr}
 8011ac0:	b08b      	sub	sp, #44	; 0x2c
 8011ac2:	af02      	add	r7, sp, #8
 8011ac4:	60f8      	str	r0, [r7, #12]
 8011ac6:	60b9      	str	r1, [r7, #8]
 8011ac8:	607a      	str	r2, [r7, #4]
 8011aca:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8011acc:	68b9      	ldr	r1, [r7, #8]
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f7ff ff14 	bl	80118fc <metal_io_virt>
 8011ad4:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d902      	bls.n	8011aea <metal_io_block_write+0x2c>
		return -ERANGE;
 8011ae4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8011ae8:	e05b      	b.n	8011ba2 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8011aea:	683a      	ldr	r2, [r7, #0]
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	441a      	add	r2, r3
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d904      	bls.n	8011b02 <metal_io_block_write+0x44>
		len = io->size - offset;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	689a      	ldr	r2, [r3, #8]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	603b      	str	r3, [r7, #0]
	retlen = len;
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d017      	beq.n	8011b3e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	2305      	movs	r3, #5
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	68b9      	ldr	r1, [r7, #8]
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	47a0      	blx	r4
 8011b20:	6178      	str	r0, [r7, #20]
 8011b22:	e03d      	b.n	8011ba0 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	701a      	strb	r2, [r3, #0]
			ptr++;
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	61fb      	str	r3, [r7, #28]
			source++;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	3301      	adds	r3, #1
 8011b36:	61bb      	str	r3, [r7, #24]
			len--;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	603b      	str	r3, [r7, #0]
		while ( len && (
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d017      	beq.n	8011b74 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d1ea      	bne.n	8011b24 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d1e5      	bne.n	8011b24 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8011b58:	e00c      	b.n	8011b74 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	3304      	adds	r3, #4
 8011b66:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	3304      	adds	r3, #4
 8011b6c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	3b04      	subs	r3, #4
 8011b72:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	dcef      	bgt.n	8011b5a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8011b7a:	e00c      	b.n	8011b96 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	3301      	adds	r3, #1
 8011b88:	61fb      	str	r3, [r7, #28]
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	61bb      	str	r3, [r7, #24]
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	3b01      	subs	r3, #1
 8011b94:	603b      	str	r3, [r7, #0]
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1ef      	bne.n	8011b7c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8011b9c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8011ba0:	697b      	ldr	r3, [r7, #20]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3724      	adds	r7, #36	; 0x24
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd90      	pop	{r4, r7, pc}

08011baa <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8011baa:	b590      	push	{r4, r7, lr}
 8011bac:	b08b      	sub	sp, #44	; 0x2c
 8011bae:	af02      	add	r7, sp, #8
 8011bb0:	60f8      	str	r0, [r7, #12]
 8011bb2:	60b9      	str	r1, [r7, #8]
 8011bb4:	603b      	str	r3, [r7, #0]
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8011bba:	68b9      	ldr	r1, [r7, #8]
 8011bbc:	68f8      	ldr	r0, [r7, #12]
 8011bbe:	f7ff fe9d 	bl	80118fc <metal_io_virt>
 8011bc2:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	689b      	ldr	r3, [r3, #8]
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d902      	bls.n	8011bd8 <metal_io_block_set+0x2e>
		return -ERANGE;
 8011bd2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8011bd6:	e05d      	b.n	8011c94 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8011bd8:	683a      	ldr	r2, [r7, #0]
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	441a      	add	r2, r3
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d904      	bls.n	8011bf0 <metal_io_block_set+0x46>
		len = io->size - offset;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	689a      	ldr	r2, [r3, #8]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	603b      	str	r3, [r7, #0]
	retlen = len;
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d009      	beq.n	8011c10 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8011c00:	79fa      	ldrb	r2, [r7, #7]
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	9300      	str	r3, [sp, #0]
 8011c06:	2305      	movs	r3, #5
 8011c08:	68b9      	ldr	r1, [r7, #8]
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	47a0      	blx	r4
 8011c0e:	e040      	b.n	8011c92 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8011c10:	79fb      	ldrb	r3, [r7, #7]
 8011c12:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8011c14:	2301      	movs	r3, #1
 8011c16:	617b      	str	r3, [r7, #20]
 8011c18:	e00a      	b.n	8011c30 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8011c1a:	79fa      	ldrb	r2, [r7, #7]
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	fa02 f303 	lsl.w	r3, r2, r3
 8011c24:	69ba      	ldr	r2, [r7, #24]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	617b      	str	r3, [r7, #20]
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	2b03      	cmp	r3, #3
 8011c34:	d9f1      	bls.n	8011c1a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8011c36:	e008      	b.n	8011c4a <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	79fa      	ldrb	r2, [r7, #7]
 8011c3c:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	3301      	adds	r3, #1
 8011c42:	61fb      	str	r3, [r7, #28]
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	3b01      	subs	r3, #1
 8011c48:	603b      	str	r3, [r7, #0]
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00e      	beq.n	8011c6e <metal_io_block_set+0xc4>
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	f003 0303 	and.w	r3, r3, #3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d1ee      	bne.n	8011c38 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8011c5a:	e008      	b.n	8011c6e <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	69ba      	ldr	r2, [r7, #24]
 8011c60:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	3304      	adds	r3, #4
 8011c66:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	3b04      	subs	r3, #4
 8011c6c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	2b03      	cmp	r3, #3
 8011c72:	dcf3      	bgt.n	8011c5c <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8011c74:	e008      	b.n	8011c88 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	79fa      	ldrb	r2, [r7, #7]
 8011c7a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8011c7c:	69fb      	ldr	r3, [r7, #28]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	61fb      	str	r3, [r7, #28]
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d1f3      	bne.n	8011c76 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8011c8e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8011c92:	693b      	ldr	r3, [r7, #16]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3724      	adds	r7, #36	; 0x24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd90      	pop	{r4, r7, pc}

08011c9c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8011c9c:	b40e      	push	{r1, r2, r3}
 8011c9e:	b480      	push	{r7}
 8011ca0:	b082      	sub	sp, #8
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8011ca8:	bf00      	nop
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	b003      	add	sp, #12
 8011cb4:	4770      	bx	lr

08011cb6 <metal_io_virt>:
{
 8011cb6:	b480      	push	{r7}
 8011cb8:	b083      	sub	sp, #12
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
 8011cbe:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8011cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc8:	d009      	beq.n	8011cde <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d804      	bhi.n	8011cde <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	4413      	add	r3, r2
 8011cdc:	e000      	b.n	8011ce0 <metal_io_virt+0x2a>
 8011cde:	2300      	movs	r3, #0
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b085      	sub	sp, #20
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	683a      	ldr	r2, [r7, #0]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	68fa      	ldr	r2, [r7, #12]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d201      	bcs.n	8011d0e <metal_io_virt_to_offset+0x22>
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	e001      	b.n	8011d12 <metal_io_virt_to_offset+0x26>
 8011d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3714      	adds	r7, #20
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
	...

08011d20 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8011d20:	b590      	push	{r4, r7, lr}
 8011d22:	b08d      	sub	sp, #52	; 0x34
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	603b      	str	r3, [r7, #0]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8011d30:	68b9      	ldr	r1, [r7, #8]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f7ff ffbf 	bl	8011cb6 <metal_io_virt>
 8011d38:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	699b      	ldr	r3, [r3, #24]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d009      	beq.n	8011d56 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	699c      	ldr	r4, [r3, #24]
 8011d46:	79fa      	ldrb	r2, [r7, #7]
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	68b9      	ldr	r1, [r7, #8]
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	47a0      	blx	r4
 8011d50:	4602      	mov	r2, r0
 8011d52:	460b      	mov	r3, r1
 8011d54:	e057      	b.n	8011e06 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8011d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d011      	beq.n	8011d80 <metal_io_read+0x60>
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d10e      	bne.n	8011d80 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8011d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d68:	f3bf 8f5b 	dmb	ish
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	f3bf 8f5b 	dmb	ish
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	76fb      	strb	r3, [r7, #27]
 8011d76:	7efb      	ldrb	r3, [r7, #27]
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	f04f 0300 	mov.w	r3, #0
 8011d7e:	e042      	b.n	8011e06 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 8011d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d011      	beq.n	8011daa <metal_io_read+0x8a>
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	2b02      	cmp	r3, #2
 8011d8a:	d10e      	bne.n	8011daa <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8011d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d92:	f3bf 8f5b 	dmb	ish
 8011d96:	881b      	ldrh	r3, [r3, #0]
 8011d98:	f3bf 8f5b 	dmb	ish
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	833b      	strh	r3, [r7, #24]
 8011da0:	8b3b      	ldrh	r3, [r7, #24]
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	f04f 0300 	mov.w	r3, #0
 8011da8:	e02d      	b.n	8011e06 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8011daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d010      	beq.n	8011dd2 <metal_io_read+0xb2>
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	d10d      	bne.n	8011dd2 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8011db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db8:	623b      	str	r3, [r7, #32]
 8011dba:	6a3b      	ldr	r3, [r7, #32]
 8011dbc:	f3bf 8f5b 	dmb	ish
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f3bf 8f5b 	dmb	ish
 8011dc6:	617b      	str	r3, [r7, #20]
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f04f 0300 	mov.w	r3, #0
 8011dd0:	e019      	b.n	8011e06 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8011dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d010      	beq.n	8011dfa <metal_io_read+0xda>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b04      	cmp	r3, #4
 8011ddc:	d10d      	bne.n	8011dfa <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8011dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de0:	61fb      	str	r3, [r7, #28]
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	f3bf 8f5b 	dmb	ish
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f3bf 8f5b 	dmb	ish
 8011dee:	613b      	str	r3, [r7, #16]
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	461a      	mov	r2, r3
 8011df4:	f04f 0300 	mov.w	r3, #0
 8011df8:	e005      	b.n	8011e06 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8011dfa:	4b05      	ldr	r3, [pc, #20]	; (8011e10 <metal_io_read+0xf0>)
 8011dfc:	4a05      	ldr	r2, [pc, #20]	; (8011e14 <metal_io_read+0xf4>)
 8011dfe:	21f0      	movs	r1, #240	; 0xf0
 8011e00:	4805      	ldr	r0, [pc, #20]	; (8011e18 <metal_io_read+0xf8>)
 8011e02:	f002 fcb7 	bl	8014774 <__assert_func>
	return 0; /* quiet compiler */
}
 8011e06:	4610      	mov	r0, r2
 8011e08:	4619      	mov	r1, r3
 8011e0a:	3734      	adds	r7, #52	; 0x34
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd90      	pop	{r4, r7, pc}
 8011e10:	080193c0 	.word	0x080193c0
 8011e14:	08021a24 	.word	0x08021a24
 8011e18:	080193c4 	.word	0x080193c4

08011e1c <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b08f      	sub	sp, #60	; 0x3c
 8011e20:	af02      	add	r7, sp, #8
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8011e2a:	68b9      	ldr	r1, [r7, #8]
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f7ff ff42 	bl	8011cb6 <metal_io_virt>
 8011e32:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	69db      	ldr	r3, [r3, #28]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00c      	beq.n	8011e56 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	69dc      	ldr	r4, [r3, #28]
 8011e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e42:	9301      	str	r3, [sp, #4]
 8011e44:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8011e48:	9300      	str	r3, [sp, #0]
 8011e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e4e:	68b9      	ldr	r1, [r7, #8]
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8011e54:	e04e      	b.n	8011ef4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8011e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00e      	beq.n	8011e7a <metal_io_write+0x5e>
 8011e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d10b      	bne.n	8011e7a <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8011e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e66:	783b      	ldrb	r3, [r7, #0]
 8011e68:	76fb      	strb	r3, [r7, #27]
 8011e6a:	7efa      	ldrb	r2, [r7, #27]
 8011e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e6e:	f3bf 8f5b 	dmb	ish
 8011e72:	701a      	strb	r2, [r3, #0]
 8011e74:	f3bf 8f5b 	dmb	ish
 8011e78:	e03c      	b.n	8011ef4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8011e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00e      	beq.n	8011e9e <metal_io_write+0x82>
 8011e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	d10b      	bne.n	8011e9e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8011e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e88:	627b      	str	r3, [r7, #36]	; 0x24
 8011e8a:	883b      	ldrh	r3, [r7, #0]
 8011e8c:	833b      	strh	r3, [r7, #24]
 8011e8e:	8b3a      	ldrh	r2, [r7, #24]
 8011e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e92:	f3bf 8f5b 	dmb	ish
 8011e96:	801a      	strh	r2, [r3, #0]
 8011e98:	f3bf 8f5b 	dmb	ish
 8011e9c:	e02a      	b.n	8011ef4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8011e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d00e      	beq.n	8011ec2 <metal_io_write+0xa6>
 8011ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ea6:	2b04      	cmp	r3, #4
 8011ea8:	d10b      	bne.n	8011ec2 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	623b      	str	r3, [r7, #32]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	617b      	str	r3, [r7, #20]
 8011eb2:	697a      	ldr	r2, [r7, #20]
 8011eb4:	6a3b      	ldr	r3, [r7, #32]
 8011eb6:	f3bf 8f5b 	dmb	ish
 8011eba:	601a      	str	r2, [r3, #0]
 8011ebc:	f3bf 8f5b 	dmb	ish
 8011ec0:	e018      	b.n	8011ef4 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8011ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d00e      	beq.n	8011ee6 <metal_io_write+0xca>
 8011ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d10b      	bne.n	8011ee6 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8011ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed0:	61fb      	str	r3, [r7, #28]
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	613b      	str	r3, [r7, #16]
 8011ed6:	693a      	ldr	r2, [r7, #16]
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	f3bf 8f5b 	dmb	ish
 8011ede:	601a      	str	r2, [r3, #0]
 8011ee0:	f3bf 8f5b 	dmb	ish
 8011ee4:	e006      	b.n	8011ef4 <metal_io_write+0xd8>
		metal_assert (0);
 8011ee6:	4b05      	ldr	r3, [pc, #20]	; (8011efc <metal_io_write+0xe0>)
 8011ee8:	4a05      	ldr	r2, [pc, #20]	; (8011f00 <metal_io_write+0xe4>)
 8011eea:	f44f 7189 	mov.w	r1, #274	; 0x112
 8011eee:	4805      	ldr	r0, [pc, #20]	; (8011f04 <metal_io_write+0xe8>)
 8011ef0:	f002 fc40 	bl	8014774 <__assert_func>
}
 8011ef4:	bf00      	nop
 8011ef6:	3734      	adds	r7, #52	; 0x34
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd90      	pop	{r4, r7, pc}
 8011efc:	080193c0 	.word	0x080193c0
 8011f00:	08021a34 	.word	0x08021a34
 8011f04:	080193c4 	.word	0x080193c4

08011f08 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f002 fc89 	bl	8014828 <malloc>
 8011f16:	4603      	mov	r3, r0
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
	free(ptr);
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f002 fc85 	bl	8014838 <free>
}
 8011f2e:	bf00      	nop
 8011f30:	3708      	adds	r7, #8
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b084      	sub	sp, #16
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	3307      	adds	r3, #7
 8011f42:	00db      	lsls	r3, r3, #3
 8011f44:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f7ff ffde 	bl	8011f08 <metal_allocate_memory>
 8011f4c:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d004      	beq.n	8011f5e <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8011f54:	68fa      	ldr	r2, [r7, #12]
 8011f56:	2100      	movs	r1, #0
 8011f58:	68b8      	ldr	r0, [r7, #8]
 8011f5a:	f002 fc9d 	bl	8014898 <memset>
	}

	return vqs;
 8011f5e:	68bb      	ldr	r3, [r7, #8]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3710      	adds	r7, #16
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b086      	sub	sp, #24
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	891b      	ldrh	r3, [r3, #8]
 8011f74:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	3b18      	subs	r3, #24
 8011f80:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f86:	697a      	ldr	r2, [r7, #20]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d905      	bls.n	8011f98 <rproc_virtio_virtqueue_notify+0x30>
 8011f8c:	4b0d      	ldr	r3, [pc, #52]	; (8011fc4 <rproc_virtio_virtqueue_notify+0x5c>)
 8011f8e:	4a0e      	ldr	r2, [pc, #56]	; (8011fc8 <rproc_virtio_virtqueue_notify+0x60>)
 8011f90:	2133      	movs	r1, #51	; 0x33
 8011f92:	480e      	ldr	r0, [pc, #56]	; (8011fcc <rproc_virtio_virtqueue_notify+0x64>)
 8011f94:	f002 fbee 	bl	8014774 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011f9c:	697a      	ldr	r2, [r7, #20]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	00db      	lsls	r3, r3, #3
 8011fa6:	440b      	add	r3, r1
 8011fa8:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	691b      	ldr	r3, [r3, #16]
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	6810      	ldr	r0, [r2, #0]
 8011fb2:	68ba      	ldr	r2, [r7, #8]
 8011fb4:	6912      	ldr	r2, [r2, #16]
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	4798      	blx	r3
}
 8011fba:	bf00      	nop
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	0801940c 	.word	0x0801940c
 8011fc8:	08021a04 	.word	0x08021a04
 8011fcc:	08019428 	.word	0x08019428

08011fd0 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b086      	sub	sp, #24
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	3b18      	subs	r3, #24
 8011fdc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	3318      	adds	r3, #24
 8011fee:	4619      	mov	r1, r3
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f7ff fe7b 	bl	8011cec <metal_io_virt_to_offset>
 8011ff6:	4601      	mov	r1, r0
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	2205      	movs	r2, #5
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f7ff fe8f 	bl	8011d20 <metal_io_read>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	4613      	mov	r3, r2
 8012008:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 801200a:	7afb      	ldrb	r3, [r7, #11]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b088      	sub	sp, #32
 8012018:	af02      	add	r7, sp, #8
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	460b      	mov	r3, r1
 801201e:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	3b18      	subs	r3, #24
 8012024:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	689b      	ldr	r3, [r3, #8]
 801202a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	3318      	adds	r3, #24
 8012036:	4619      	mov	r1, r3
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f7ff fe57 	bl	8011cec <metal_io_virt_to_offset>
 801203e:	4601      	mov	r1, r0
 8012040:	78fa      	ldrb	r2, [r7, #3]
 8012042:	f04f 0300 	mov.w	r3, #0
 8012046:	2001      	movs	r0, #1
 8012048:	9001      	str	r0, [sp, #4]
 801204a:	2005      	movs	r0, #5
 801204c:	9000      	str	r0, [sp, #0]
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	f7ff fee4 	bl	8011e1c <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	697a      	ldr	r2, [r7, #20]
 801205a:	6810      	ldr	r0, [r2, #0]
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	6812      	ldr	r2, [r2, #0]
 8012060:	4611      	mov	r1, r2
 8012062:	4798      	blx	r3
}
 8012064:	bf00      	nop
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3b18      	subs	r3, #24
 8012078:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	68db      	ldr	r3, [r3, #12]
 8012084:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	330c      	adds	r3, #12
 801208a:	4619      	mov	r1, r3
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f7ff fe2d 	bl	8011cec <metal_io_virt_to_offset>
 8012092:	4601      	mov	r1, r0
 8012094:	2304      	movs	r3, #4
 8012096:	2205      	movs	r2, #5
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f7ff fe41 	bl	8011d20 <metal_io_read>
 801209e:	4602      	mov	r2, r0
 80120a0:	460b      	mov	r3, r1
 80120a2:	4613      	mov	r3, r2
 80120a4:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 80120a6:	68bb      	ldr	r3, [r7, #8]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3718      	adds	r7, #24
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b088      	sub	sp, #32
 80120b4:	af02      	add	r7, sp, #8
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	3b18      	subs	r3, #24
 80120be:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	330c      	adds	r3, #12
 80120d0:	4619      	mov	r1, r3
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f7ff fe0a 	bl	8011cec <metal_io_virt_to_offset>
 80120d8:	4601      	mov	r1, r0
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	461a      	mov	r2, r3
 80120de:	f04f 0300 	mov.w	r3, #0
 80120e2:	2004      	movs	r0, #4
 80120e4:	9001      	str	r0, [sp, #4]
 80120e6:	2005      	movs	r0, #5
 80120e8:	9000      	str	r0, [sp, #0]
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	f7ff fe96 	bl	8011e1c <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	691b      	ldr	r3, [r3, #16]
 80120f4:	697a      	ldr	r2, [r7, #20]
 80120f6:	6810      	ldr	r0, [r2, #0]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	6812      	ldr	r2, [r2, #0]
 80120fc:	4611      	mov	r1, r2
 80120fe:	4798      	blx	r3
}
 8012100:	bf00      	nop
 8012102:	3718      	adds	r7, #24
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8012112:	2300      	movs	r3, #0
}
 8012114:	4618      	mov	r0, r3
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8012120:	b480      	push	{r7}
 8012122:	b085      	sub	sp, #20
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
 801212c:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 801212e:	bf00      	nop
 8012130:	3714      	adds	r7, #20
 8012132:	46bd      	mov	sp, r7
 8012134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012138:	4770      	bx	lr

0801213a <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 801213a:	b480      	push	{r7}
 801213c:	b085      	sub	sp, #20
 801213e:	af00      	add	r7, sp, #0
 8012140:	60f8      	str	r0, [r7, #12]
 8012142:	60b9      	str	r1, [r7, #8]
 8012144:	607a      	str	r2, [r7, #4]
 8012146:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8012148:	bf00      	nop
 801214a:	3714      	adds	r7, #20
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr

08012154 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	699b      	ldr	r3, [r3, #24]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d103      	bne.n	801216c <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8012164:	2140      	movs	r1, #64	; 0x40
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7ff ff54 	bl	8012014 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 801216c:	bf00      	nop
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b08e      	sub	sp, #56	; 0x38
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
 8012180:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8012186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012188:	7e5b      	ldrb	r3, [r3, #25]
 801218a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 801218c:	2050      	movs	r0, #80	; 0x50
 801218e:	f7ff febb 	bl	8011f08 <metal_allocate_memory>
 8012192:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8012194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012196:	2b00      	cmp	r3, #0
 8012198:	d101      	bne.n	801219e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 801219a:	2300      	movs	r3, #0
 801219c:	e092      	b.n	80122c4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 801219e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121a0:	4613      	mov	r3, r2
 80121a2:	005b      	lsls	r3, r3, #1
 80121a4:	4413      	add	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7ff fead 	bl	8011f08 <metal_allocate_memory>
 80121ae:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f000 8081 	beq.w	80122ba <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 80121b8:	2250      	movs	r2, #80	; 0x50
 80121ba:	2100      	movs	r1, #0
 80121bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121be:	f002 fb6b 	bl	8014898 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 80121c2:	2218      	movs	r2, #24
 80121c4:	2100      	movs	r1, #0
 80121c6:	6a38      	ldr	r0, [r7, #32]
 80121c8:	f002 fb66 	bl	8014898 <memset>
	vdev = &rpvdev->vdev;
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	3318      	adds	r3, #24
 80121d0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 80121d2:	2300      	movs	r3, #0
 80121d4:	637b      	str	r3, [r7, #52]	; 0x34
 80121d6:	e025      	b.n	8012224 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 80121d8:	2300      	movs	r3, #0
 80121da:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 80121dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121de:	4613      	mov	r3, r2
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	4413      	add	r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	3318      	adds	r3, #24
 80121e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ea:	4413      	add	r3, r2
 80121ec:	3304      	adds	r3, #4
 80121ee:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d102      	bne.n	80121fc <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	689b      	ldr	r3, [r3, #8]
 80121fa:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 80121fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121fe:	f7ff fe9a 	bl	8011f36 <virtqueue_allocate>
 8012202:	6178      	str	r0, [r7, #20]
		if (!vq)
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d031      	beq.n	801226e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 801220a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801220c:	4613      	mov	r3, r2
 801220e:	005b      	lsls	r3, r3, #1
 8012210:	4413      	add	r3, r2
 8012212:	00db      	lsls	r3, r3, #3
 8012214:	461a      	mov	r2, r3
 8012216:	6a3b      	ldr	r3, [r7, #32]
 8012218:	4413      	add	r3, r2
 801221a:	697a      	ldr	r2, [r7, #20]
 801221c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 801221e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012220:	3301      	adds	r3, #1
 8012222:	637b      	str	r3, [r7, #52]	; 0x34
 8012224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	429a      	cmp	r2, r3
 801222a:	d3d5      	bcc.n	80121d8 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012230:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8012232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012236:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	6a3a      	ldr	r2, [r7, #32]
 801223c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012242:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	68fa      	ldr	r2, [r7, #12]
 8012254:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801225a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012260:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	4a19      	ldr	r2, [pc, #100]	; (80122cc <rproc_virtio_create_vdev+0x158>)
 8012266:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8012268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226a:	3318      	adds	r3, #24
 801226c:	e02a      	b.n	80122c4 <rproc_virtio_create_vdev+0x150>
			goto err1;
 801226e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8012270:	2300      	movs	r3, #0
 8012272:	637b      	str	r3, [r7, #52]	; 0x34
 8012274:	e019      	b.n	80122aa <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8012276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012278:	4613      	mov	r3, r2
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	4413      	add	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	461a      	mov	r2, r3
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	4413      	add	r3, r2
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d00b      	beq.n	80122a4 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 801228c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801228e:	4613      	mov	r3, r2
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	4413      	add	r3, r2
 8012294:	00db      	lsls	r3, r3, #3
 8012296:	461a      	mov	r2, r3
 8012298:	6a3b      	ldr	r3, [r7, #32]
 801229a:	4413      	add	r3, r2
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff fe3e 	bl	8011f20 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 80122a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a6:	3301      	adds	r3, #1
 80122a8:	637b      	str	r3, [r7, #52]	; 0x34
 80122aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d3e1      	bcc.n	8012276 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 80122b2:	6a38      	ldr	r0, [r7, #32]
 80122b4:	f7ff fe34 	bl	8011f20 <metal_free_memory>
 80122b8:	e000      	b.n	80122bc <rproc_virtio_create_vdev+0x148>
		goto err0;
 80122ba:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 80122bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122be:	f7ff fe2f 	bl	8011f20 <metal_free_memory>
	return NULL;
 80122c2:	2300      	movs	r3, #0
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3738      	adds	r7, #56	; 0x38
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	080219e0 	.word	0x080219e0

080122d0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b087      	sub	sp, #28
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	607a      	str	r2, [r7, #4]
 80122dc:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122e2:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 80122e4:	68ba      	ldr	r2, [r7, #8]
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d302      	bcc.n	80122f2 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 80122ec:	f06f 0301 	mvn.w	r3, #1
 80122f0:	e019      	b.n	8012326 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	4613      	mov	r3, r2
 80122fa:	005b      	lsls	r3, r3, #1
 80122fc:	4413      	add	r3, r2
 80122fe:	00db      	lsls	r3, r3, #3
 8012300:	440b      	add	r3, r1
 8012302:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	6a3a      	ldr	r2, [r7, #32]
 8012308:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	687a      	ldr	r2, [r7, #4]
 801230e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	b29a      	uxth	r2, r3
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012322:	609a      	str	r2, [r3, #8]

	return 0;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	371c      	adds	r7, #28
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr

08012332 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b086      	sub	sp, #24
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d102      	bne.n	8012348 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8012342:	f06f 0315 	mvn.w	r3, #21
 8012346:	e02c      	b.n	80123a2 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	429a      	cmp	r2, r3
 8012350:	d101      	bne.n	8012356 <rproc_virtio_notified+0x24>
		return 0;
 8012352:	2300      	movs	r3, #0
 8012354:	e025      	b.n	80123a2 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801235a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 801235c:	2300      	movs	r3, #0
 801235e:	617b      	str	r3, [r7, #20]
 8012360:	e01a      	b.n	8012398 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012366:	697a      	ldr	r2, [r7, #20]
 8012368:	4613      	mov	r3, r2
 801236a:	005b      	lsls	r3, r3, #1
 801236c:	4413      	add	r3, r2
 801236e:	00db      	lsls	r3, r3, #3
 8012370:	440b      	add	r3, r1
 8012372:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	691b      	ldr	r3, [r3, #16]
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	429a      	cmp	r2, r3
 801237c:	d003      	beq.n	8012386 <rproc_virtio_notified+0x54>
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012384:	d105      	bne.n	8012392 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 801238c:	68b8      	ldr	r0, [r7, #8]
 801238e:	f001 fb58 	bl	8013a42 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	3301      	adds	r3, #1
 8012396:	617b      	str	r3, [r7, #20]
 8012398:	697a      	ldr	r2, [r7, #20]
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	429a      	cmp	r2, r3
 801239e:	d3e0      	bcc.n	8012362 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3718      	adds	r7, #24
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b084      	sub	sp, #16
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	699b      	ldr	r3, [r3, #24]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00a      	beq.n	80123d0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f7ff fe08 	bl	8011fd0 <rproc_virtio_get_status>
 80123c0:	4603      	mov	r3, r0
 80123c2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 80123c4:	7bfb      	ldrb	r3, [r7, #15]
 80123c6:	f003 0304 	and.w	r3, r3, #4
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d102      	bne.n	80123d4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 80123ce:	e7f4      	b.n	80123ba <rproc_virtio_wait_remote_ready+0x10>
		return;
 80123d0:	bf00      	nop
 80123d2:	e000      	b.n	80123d6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80123d4:	bf00      	nop
	}
}
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 80123e4:	bf00      	nop
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2201      	movs	r2, #1
 80123ea:	4611      	mov	r1, r2
 80123ec:	f3bf 8f5b 	dmb	ish
 80123f0:	e8d3 2f4f 	ldrexb	r2, [r3]
 80123f4:	e8c3 1f40 	strexb	r0, r1, [r3]
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d1f9      	bne.n	80123f0 <__metal_mutex_acquire+0x14>
 80123fc:	f3bf 8f5b 	dmb	ish
 8012400:	b2d3      	uxtb	r3, r2
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1ef      	bne.n	80123e6 <__metal_mutex_acquire+0xa>
		;
	}
}
 8012406:	bf00      	nop
 8012408:	bf00      	nop
 801240a:	370c      	adds	r7, #12
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8012414:	b480      	push	{r7}
 8012416:	b083      	sub	sp, #12
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f3bf 8f5b 	dmb	ish
 8012422:	2200      	movs	r2, #0
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	f3bf 8f5b 	dmb	ish
}
 801242a:	bf00      	nop
 801242c:	370c      	adds	r7, #12
 801242e:	46bd      	mov	sp, r7
 8012430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012434:	4770      	bx	lr

08012436 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8012436:	b580      	push	{r7, lr}
 8012438:	b082      	sub	sp, #8
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff ffcc 	bl	80123dc <__metal_mutex_acquire>
}
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7ff ffdd 	bl	8012414 <__metal_mutex_release>
}
 801245a:	bf00      	nop
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <metal_list_add_before>:
{
 8012462:	b480      	push	{r7}
 8012464:	b083      	sub	sp, #12
 8012466:	af00      	add	r7, sp, #0
 8012468:	6078      	str	r0, [r7, #4]
 801246a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	685a      	ldr	r2, [r3, #4]
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	683a      	ldr	r2, [r7, #0]
 8012480:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	683a      	ldr	r2, [r7, #0]
 8012488:	601a      	str	r2, [r3, #0]
}
 801248a:	bf00      	nop
 801248c:	370c      	adds	r7, #12
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr

08012496 <metal_list_add_tail>:
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
 801249e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80124a0:	6839      	ldr	r1, [r7, #0]
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7ff ffdd 	bl	8012462 <metal_list_add_before>
}
 80124a8:	bf00      	nop
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	6852      	ldr	r2, [r2, #4]
 80124c0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	6812      	ldr	r2, [r2, #0]
 80124ca:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	605a      	str	r2, [r3, #4]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	685a      	ldr	r2, [r3, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	601a      	str	r2, [r3, #0]
}
 80124da:	bf00      	nop
 80124dc:	370c      	adds	r7, #12
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr

080124e6 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 80124e6:	b480      	push	{r7}
 80124e8:	b083      	sub	sp, #12
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	095b      	lsrs	r3, r3, #5
 80124f4:	009a      	lsls	r2, r3, #2
 80124f6:	6879      	ldr	r1, [r7, #4]
 80124f8:	440a      	add	r2, r1
 80124fa:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	f002 021f 	and.w	r2, r2, #31
 8012502:	2001      	movs	r0, #1
 8012504:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	4403      	add	r3, r0
 801250e:	430a      	orrs	r2, r1
 8012510:	601a      	str	r2, [r3, #0]
}
 8012512:	bf00      	nop
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 801251e:	b480      	push	{r7}
 8012520:	b083      	sub	sp, #12
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
 8012526:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	095b      	lsrs	r3, r3, #5
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	4413      	add	r3, r2
 8012532:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	f003 031f 	and.w	r3, r3, #31
 801253a:	2101      	movs	r1, #1
 801253c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8012540:	4013      	ands	r3, r2
}
 8012542:	4618      	mov	r0, r3
 8012544:	370c      	adds	r7, #12
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr

0801254e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 801254e:	b480      	push	{r7}
 8012550:	b083      	sub	sp, #12
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
 8012556:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	095b      	lsrs	r3, r3, #5
 801255c:	009a      	lsls	r2, r3, #2
 801255e:	6879      	ldr	r1, [r7, #4]
 8012560:	440a      	add	r2, r1
 8012562:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	f002 021f 	and.w	r2, r2, #31
 801256a:	2001      	movs	r0, #1
 801256c:	fa00 f202 	lsl.w	r2, r0, r2
 8012570:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	4403      	add	r3, r0
 8012578:	400a      	ands	r2, r1
 801257a:	601a      	str	r2, [r3, #0]
}
 801257c:	bf00      	nop
 801257e:	370c      	adds	r7, #12
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr

08012588 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8012592:	6839      	ldr	r1, [r7, #0]
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7ff ffc2 	bl	801251e <metal_bitmap_is_bit_set>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	bf0c      	ite	eq
 80125a0:	2301      	moveq	r3, #1
 80125a2:	2300      	movne	r3, #0
 80125a4:	b2db      	uxtb	r3, r3
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b086      	sub	sp, #24
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	60f8      	str	r0, [r7, #12]
 80125b6:	60b9      	str	r1, [r7, #8]
 80125b8:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	617b      	str	r3, [r7, #20]
 80125be:	e002      	b.n	80125c6 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	3301      	adds	r3, #1
 80125c4:	617b      	str	r3, [r7, #20]
	for (bit = start;
 80125c6:	697a      	ldr	r2, [r7, #20]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d207      	bcs.n	80125de <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	4619      	mov	r1, r3
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f7ff ffd8 	bl	8012588 <metal_bitmap_is_bit_clear>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d0f0      	beq.n	80125c0 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 80125de:	697b      	ldr	r3, [r7, #20]
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3718      	adds	r7, #24
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <rpmsg_init_ept>:
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
 80125f4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2220      	movs	r2, #32
 80125fa:	68b9      	ldr	r1, [r7, #8]
 80125fc:	4618      	mov	r0, r3
 80125fe:	f003 fa73 	bl	8015ae8 <strncpy>
	ept->addr = src;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	683a      	ldr	r2, [r7, #0]
 801260c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	69ba      	ldr	r2, [r7, #24]
 8012612:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	69fa      	ldr	r2, [r7, #28]
 8012618:	631a      	str	r2, [r3, #48]	; 0x30
}
 801261a:	bf00      	nop
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b084      	sub	sp, #16
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
 801262a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 801262c:	f04f 33ff 	mov.w	r3, #4294967295
 8012630:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	461a      	mov	r2, r3
 8012636:	2100      	movs	r1, #0
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f7ff ffb8 	bl	80125ae <metal_bitmap_next_clear_bit>
 801263e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	429a      	cmp	r2, r3
 8012646:	d206      	bcs.n	8012656 <rpmsg_get_address+0x34>
		addr = nextbit;
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	4619      	mov	r1, r3
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff ff48 	bl	80124e6 <metal_bitmap_set_bit>
	}

	return addr;
 8012656:	68fb      	ldr	r3, [r7, #12]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3710      	adds	r7, #16
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	60f8      	str	r0, [r7, #12]
 8012668:	60b9      	str	r1, [r7, #8]
 801266a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	429a      	cmp	r2, r3
 8012672:	da03      	bge.n	801267c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8012674:	6879      	ldr	r1, [r7, #4]
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7ff ff69 	bl	801254e <metal_bitmap_clear_bit>
}
 801267c:	bf00      	nop
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	429a      	cmp	r2, r3
 8012696:	da05      	bge.n	80126a4 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8012698:	6879      	ldr	r1, [r7, #4]
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f7ff ff3f 	bl	801251e <metal_bitmap_is_bit_set>
 80126a0:	4603      	mov	r3, r0
 80126a2:	e000      	b.n	80126a6 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 80126a4:	4b02      	ldr	r3, [pc, #8]	; (80126b0 <rpmsg_is_address_set+0x2c>)
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	fffff82d 	.word	0xfffff82d

080126b4 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 80126c0:	687a      	ldr	r2, [r7, #4]
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	da05      	bge.n	80126d4 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 80126c8:	6879      	ldr	r1, [r7, #4]
 80126ca:	68f8      	ldr	r0, [r7, #12]
 80126cc:	f7ff ff0b 	bl	80124e6 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 80126d0:	2300      	movs	r3, #0
 80126d2:	e000      	b.n	80126d6 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 80126d4:	4b02      	ldr	r3, [pc, #8]	; (80126e0 <rpmsg_set_address+0x2c>)
	}
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3710      	adds	r7, #16
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	fffff82d 	.word	0xfffff82d

080126e4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 80126e4:	b590      	push	{r4, r7, lr}
 80126e6:	b089      	sub	sp, #36	; 0x24
 80126e8:	af02      	add	r7, sp, #8
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
 80126f0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d00a      	beq.n	801270e <rpmsg_send_offchannel_raw+0x2a>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	6a1b      	ldr	r3, [r3, #32]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d006      	beq.n	801270e <rpmsg_send_offchannel_raw+0x2a>
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d003      	beq.n	801270e <rpmsg_send_offchannel_raw+0x2a>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801270c:	d101      	bne.n	8012712 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 801270e:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <rpmsg_send_offchannel_raw+0x60>)
 8012710:	e014      	b.n	801273c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	6a1b      	ldr	r3, [r3, #32]
 8012716:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00c      	beq.n	801273a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8012724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012726:	9301      	str	r3, [sp, #4]
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	9300      	str	r3, [sp, #0]
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	687a      	ldr	r2, [r7, #4]
 8012730:	68b9      	ldr	r1, [r7, #8]
 8012732:	6978      	ldr	r0, [r7, #20]
 8012734:	47a0      	blx	r4
 8012736:	4603      	mov	r3, r0
 8012738:	e000      	b.n	801273c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 801273a:	4b02      	ldr	r3, [pc, #8]	; (8012744 <rpmsg_send_offchannel_raw+0x60>)
}
 801273c:	4618      	mov	r0, r3
 801273e:	371c      	adds	r7, #28
 8012740:	46bd      	mov	sp, r7
 8012742:	bd90      	pop	{r4, r7, pc}
 8012744:	fffff82d 	.word	0xfffff82d

08012748 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b090      	sub	sp, #64	; 0x40
 801274c:	af02      	add	r7, sp, #8
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801275a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 801275c:	6879      	ldr	r1, [r7, #4]
 801275e:	f107 030c 	add.w	r3, r7, #12
 8012762:	2220      	movs	r2, #32
 8012764:	4618      	mov	r0, r3
 8012766:	f003 f9bf 	bl	8015ae8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801276e:	f107 030c 	add.w	r3, r7, #12
 8012772:	2201      	movs	r2, #1
 8012774:	9201      	str	r2, [sp, #4]
 8012776:	2228      	movs	r2, #40	; 0x28
 8012778:	9200      	str	r2, [sp, #0]
 801277a:	2235      	movs	r2, #53	; 0x35
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff ffb1 	bl	80126e4 <rpmsg_send_offchannel_raw>
 8012782:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8012784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012786:	2b00      	cmp	r3, #0
 8012788:	da01      	bge.n	801278e <rpmsg_send_ns_message+0x46>
		return ret;
 801278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278c:	e000      	b.n	8012790 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3738      	adds	r7, #56	; 0x38
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b088      	sub	sp, #32
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	61fb      	str	r3, [r7, #28]
 80127ac:	e04b      	b.n	8012846 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 80127ae:	2300      	movs	r3, #0
 80127b0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	3b34      	subs	r3, #52	; 0x34
 80127b6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127be:	d006      	beq.n	80127ce <rpmsg_get_endpoint+0x36>
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d101      	bne.n	80127ce <rpmsg_get_endpoint+0x36>
			return ept;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	e040      	b.n	8012850 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d106      	bne.n	80127e6 <rpmsg_get_endpoint+0x4e>
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127dc:	683a      	ldr	r2, [r7, #0]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d101      	bne.n	80127e6 <rpmsg_get_endpoint+0x4e>
			return ept;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	e034      	b.n	8012850 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00c      	beq.n	8012806 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	2220      	movs	r2, #32
 80127f0:	68b9      	ldr	r1, [r7, #8]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f003 f966 	bl	8015ac4 <strncmp>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	bf0c      	ite	eq
 80127fe:	2301      	moveq	r3, #1
 8012800:	2300      	movne	r3, #0
 8012802:	b2db      	uxtb	r3, r3
 8012804:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d018      	beq.n	801283e <rpmsg_get_endpoint+0xa6>
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d015      	beq.n	801283e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012818:	d006      	beq.n	8012828 <rpmsg_get_endpoint+0x90>
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801281e:	683a      	ldr	r2, [r7, #0]
 8012820:	429a      	cmp	r2, r3
 8012822:	d101      	bne.n	8012828 <rpmsg_get_endpoint+0x90>
			return ept;
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	e013      	b.n	8012850 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801282e:	d107      	bne.n	8012840 <rpmsg_get_endpoint+0xa8>
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012838:	d102      	bne.n	8012840 <rpmsg_get_endpoint+0xa8>
			return ept;
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	e008      	b.n	8012850 <rpmsg_get_endpoint+0xb8>
			continue;
 801283e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	61fb      	str	r3, [r7, #28]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	69fa      	ldr	r2, [r7, #28]
 801284a:	429a      	cmp	r2, r3
 801284c:	d1af      	bne.n	80127ae <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	3720      	adds	r7, #32
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d016      	beq.n	8012894 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6a1b      	ldr	r3, [r3, #32]
 801286a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012874:	d008      	beq.n	8012888 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8012880:	461a      	mov	r2, r3
 8012882:	2180      	movs	r1, #128	; 0x80
 8012884:	f7ff feec 	bl	8012660 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3334      	adds	r3, #52	; 0x34
 801288c:	4618      	mov	r0, r3
 801288e:	f7ff fe0f 	bl	80124b0 <metal_list_del>
 8012892:	e000      	b.n	8012896 <rpmsg_unregister_endpoint+0x3e>
		return;
 8012894:	bf00      	nop
}
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	3334      	adds	r3, #52	; 0x34
 80128b2:	4619      	mov	r1, r3
 80128b4:	4610      	mov	r0, r2
 80128b6:	f7ff fdee 	bl	8012496 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af02      	add	r7, sp, #8
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	613b      	str	r3, [r7, #16]

	if (!ept)
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d101      	bne.n	80128e0 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 80128dc:	4b37      	ldr	r3, [pc, #220]	; (80129bc <rpmsg_create_ept+0xf8>)
 80128de:	e068      	b.n	80129b2 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	3358      	adds	r3, #88	; 0x58
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff fda6 	bl	8012436 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f0:	d018      	beq.n	8012924 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	3348      	adds	r3, #72	; 0x48
 80128f6:	683a      	ldr	r2, [r7, #0]
 80128f8:	2180      	movs	r1, #128	; 0x80
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff fec2 	bl	8012684 <rpmsg_is_address_set>
 8012900:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d107      	bne.n	8012918 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	3348      	adds	r3, #72	; 0x48
 801290c:	683a      	ldr	r2, [r7, #0]
 801290e:	2180      	movs	r1, #128	; 0x80
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff fecf 	bl	80126b4 <rpmsg_set_address>
 8012916:	e00c      	b.n	8012932 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	2b00      	cmp	r3, #0
 801291c:	dd40      	ble.n	80129a0 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 801291e:	2300      	movs	r3, #0
 8012920:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8012922:	e040      	b.n	80129a6 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	3348      	adds	r3, #72	; 0x48
 8012928:	2180      	movs	r1, #128	; 0x80
 801292a:	4618      	mov	r0, r3
 801292c:	f7ff fe79 	bl	8012622 <rpmsg_get_address>
 8012930:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8012932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012934:	9301      	str	r3, [sp, #4]
 8012936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012938:	9300      	str	r3, [sp, #0]
 801293a:	6a3b      	ldr	r3, [r7, #32]
 801293c:	693a      	ldr	r2, [r7, #16]
 801293e:	6879      	ldr	r1, [r7, #4]
 8012940:	68f8      	ldr	r0, [r7, #12]
 8012942:	f7ff fe51 	bl	80125e8 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8012946:	68f9      	ldr	r1, [r7, #12]
 8012948:	68b8      	ldr	r0, [r7, #8]
 801294a:	f7ff ffa7 	bl	801289c <rpmsg_register_endpoint>
 801294e:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	2b00      	cmp	r3, #0
 8012954:	da06      	bge.n	8012964 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	3348      	adds	r3, #72	; 0x48
 801295a:	693a      	ldr	r2, [r7, #16]
 801295c:	2180      	movs	r1, #128	; 0x80
 801295e:	4618      	mov	r0, r3
 8012960:	f7ff fe7e 	bl	8012660 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d11c      	bne.n	80129a4 <rpmsg_create_ept+0xe0>
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012972:	d117      	bne.n	80129a4 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	3358      	adds	r3, #88	; 0x58
 8012978:	4618      	mov	r0, r3
 801297a:	f7ff fd67 	bl	801244c <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 801297e:	2100      	movs	r1, #0
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f7ff fee1 	bl	8012748 <rpmsg_send_ns_message>
 8012986:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	3358      	adds	r3, #88	; 0x58
 801298c:	4618      	mov	r0, r3
 801298e:	f7ff fd52 	bl	8012436 <metal_mutex_acquire>
		if (status)
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d005      	beq.n	80129a4 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8012998:	68f8      	ldr	r0, [r7, #12]
 801299a:	f7ff ff5d 	bl	8012858 <rpmsg_unregister_endpoint>
 801299e:	e002      	b.n	80129a6 <rpmsg_create_ept+0xe2>
			goto ret_status;
 80129a0:	bf00      	nop
 80129a2:	e000      	b.n	80129a6 <rpmsg_create_ept+0xe2>
	}

ret_status:
 80129a4:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	3358      	adds	r3, #88	; 0x58
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff fd4e 	bl	801244c <metal_mutex_release>
	return status;
 80129b0:	697b      	ldr	r3, [r7, #20]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3718      	adds	r7, #24
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	fffff82d 	.word	0xfffff82d

080129c0 <__metal_cache_invalidate>:
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80129ca:	6839      	ldr	r1, [r7, #0]
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f000 fcc2 	bl	8013356 <metal_machine_cache_invalidate>
}
 80129d2:	bf00      	nop
 80129d4:	3708      	adds	r7, #8
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}

080129da <metal_cache_invalidate>:
{
 80129da:	b580      	push	{r7, lr}
 80129dc:	b082      	sub	sp, #8
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
 80129e2:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80129e4:	6839      	ldr	r1, [r7, #0]
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7ff ffea 	bl	80129c0 <__metal_cache_invalidate>
}
 80129ec:	bf00      	nop
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 80129fc:	2300      	movs	r3, #0
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr

08012a0a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b082      	sub	sp, #8
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f7ff ffee 	bl	80129f4 <__metal_sleep_usec>
 8012a18:	4603      	mov	r3, r0
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3708      	adds	r7, #8
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <metal_list_init>:
{
 8012a22:	b480      	push	{r7}
 8012a24:	b083      	sub	sp, #12
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	605a      	str	r2, [r3, #4]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	685a      	ldr	r2, [r3, #4]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	601a      	str	r2, [r3, #0]
}
 8012a38:	bf00      	nop
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <metal_io_virt_to_offset>:
{
 8012a44:	b480      	push	{r7}
 8012a46:	b085      	sub	sp, #20
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	683a      	ldr	r2, [r7, #0]
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	689b      	ldr	r3, [r3, #8]
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d201      	bcs.n	8012a66 <metal_io_virt_to_offset+0x22>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	e001      	b.n	8012a6a <metal_io_virt_to_offset+0x26>
 8012a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3714      	adds	r7, #20
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr

08012a76 <__metal_mutex_init>:
{
 8012a76:	b480      	push	{r7}
 8012a78:	b085      	sub	sp, #20
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	60fb      	str	r3, [r7, #12]
 8012a82:	2300      	movs	r3, #0
 8012a84:	60bb      	str	r3, [r7, #8]
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	461a      	mov	r2, r3
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	f3bf 8f5b 	dmb	ish
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	f3bf 8f5b 	dmb	ish
}
 8012a96:	bf00      	nop
 8012a98:	3714      	adds	r7, #20
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr

08012aa2 <__metal_mutex_acquire>:
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b083      	sub	sp, #12
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8012aaa:	bf00      	nop
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	f3bf 8f5b 	dmb	ish
 8012ab6:	e8d3 2f4f 	ldrexb	r2, [r3]
 8012aba:	e8c3 1f40 	strexb	r0, r1, [r3]
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d1f9      	bne.n	8012ab6 <__metal_mutex_acquire+0x14>
 8012ac2:	f3bf 8f5b 	dmb	ish
 8012ac6:	b2d3      	uxtb	r3, r2
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d1ef      	bne.n	8012aac <__metal_mutex_acquire+0xa>
}
 8012acc:	bf00      	nop
 8012ace:	bf00      	nop
 8012ad0:	370c      	adds	r7, #12
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr

08012ada <__metal_mutex_release>:
{
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f3bf 8f5b 	dmb	ish
 8012ae8:	2200      	movs	r2, #0
 8012aea:	701a      	strb	r2, [r3, #0]
 8012aec:	f3bf 8f5b 	dmb	ish
}
 8012af0:	bf00      	nop
 8012af2:	370c      	adds	r7, #12
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <metal_mutex_init>:
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff ffb6 	bl	8012a76 <__metal_mutex_init>
}
 8012b0a:	bf00      	nop
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <metal_mutex_acquire>:
{
 8012b12:	b580      	push	{r7, lr}
 8012b14:	b082      	sub	sp, #8
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7ff ffc1 	bl	8012aa2 <__metal_mutex_acquire>
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <metal_mutex_release>:
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff ffd2 	bl	8012ada <__metal_mutex_release>
}
 8012b36:	bf00      	nop
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}

08012b3e <rpmsg_init_ept>:
{
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b084      	sub	sp, #16
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	60f8      	str	r0, [r7, #12]
 8012b46:	60b9      	str	r1, [r7, #8]
 8012b48:	607a      	str	r2, [r7, #4]
 8012b4a:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2220      	movs	r2, #32
 8012b50:	68b9      	ldr	r1, [r7, #8]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f002 ffc8 	bl	8015ae8 <strncpy>
	ept->addr = src;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	683a      	ldr	r2, [r7, #0]
 8012b62:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	69ba      	ldr	r2, [r7, #24]
 8012b68:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	69fa      	ldr	r2, [r7, #28]
 8012b6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012b70:	bf00      	nop
 8012b72:	3710      	adds	r7, #16
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b84:	699b      	ldr	r3, [r3, #24]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	370c      	adds	r7, #12
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr

08012b92 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8012b92:	b580      	push	{r7, lr}
 8012b94:	b082      	sub	sp, #8
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ba2:	6a1b      	ldr	r3, [r3, #32]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012baa:	78f9      	ldrb	r1, [r7, #3]
 8012bac:	4610      	mov	r0, r2
 8012bae:	4798      	blx	r3
}
 8012bb0:	bf00      	nop
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012bc4:	6a1b      	ldr	r3, [r3, #32]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012bcc:	4610      	mov	r0, r2
 8012bce:	4798      	blx	r3
 8012bd0:	4603      	mov	r3, r0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b082      	sub	sp, #8
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012be6:	6a1b      	ldr	r3, [r3, #32]
 8012be8:	689b      	ldr	r3, [r3, #8]
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012bee:	4610      	mov	r0, r2
 8012bf0:	4798      	blx	r3
 8012bf2:	4603      	mov	r3, r0
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b086      	sub	sp, #24
 8012c00:	af02      	add	r7, sp, #8
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
 8012c08:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8012c0e:	68b9      	ldr	r1, [r7, #8]
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	f000 fbf2 	bl	8013400 <virtio_create_virtqueues>
 8012c1c:	4603      	mov	r3, r0
					callbacks);
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b082      	sub	sp, #8
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
 8012c2e:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8012c30:	f04f 33ff 	mov.w	r3, #4294967295
 8012c34:	683a      	ldr	r2, [r7, #0]
 8012c36:	2100      	movs	r1, #0
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f7ff fdad 	bl	8012798 <rpmsg_get_endpoint>
 8012c3e:	4603      	mov	r3, r0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	683a      	ldr	r2, [r7, #0]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d901      	bls.n	8012c60 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	e00f      	b.n	8012c80 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6899      	ldr	r1, [r3, #8]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	1acb      	subs	r3, r1, r3
 8012c6e:	4413      	add	r3, r2
 8012c70:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	685a      	ldr	r2, [r3, #4]
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	1ad2      	subs	r2, r2, r3
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	605a      	str	r2, [r3, #4]

	return buffer;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3714      	adds	r7, #20
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d01d      	beq.n	8012cda <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f003 0303 	and.w	r3, r3, #3
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d004      	beq.n	8012cb8 <rpmsg_virtio_init_shm_pool+0x2c>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f023 0303 	bic.w	r3, r3, #3
 8012cb4:	3304      	adds	r3, #4
 8012cb6:	e000      	b.n	8012cba <rpmsg_virtio_init_shm_pool+0x2e>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f003 0303 	and.w	r3, r3, #3
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d004      	beq.n	8012cd2 <rpmsg_virtio_init_shm_pool+0x46>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f023 0303 	bic.w	r3, r3, #3
 8012cce:	3304      	adds	r3, #4
 8012cd0:	e000      	b.n	8012cd4 <rpmsg_virtio_init_shm_pool+0x48>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	68fa      	ldr	r2, [r7, #12]
 8012cd6:	6053      	str	r3, [r2, #4]
 8012cd8:	e000      	b.n	8012cdc <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8012cda:	bf00      	nop
}
 8012cdc:	3714      	adds	r7, #20
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr

08012ce6 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b08a      	sub	sp, #40	; 0x28
 8012cea:	af02      	add	r7, sp, #8
 8012cec:	60f8      	str	r0, [r7, #12]
 8012cee:	60b9      	str	r1, [r7, #8]
 8012cf0:	607a      	str	r2, [r7, #4]
 8012cf2:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8012cf4:	68f8      	ldr	r0, [r7, #12]
 8012cf6:	f7ff ff3f 	bl	8012b78 <rpmsg_virtio_get_role>
 8012cfa:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d10d      	bne.n	8012d1e <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012d0e:	f107 0114 	add.w	r1, r7, #20
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	2301      	movs	r3, #1
 8012d18:	2200      	movs	r2, #0
 8012d1a:	f000 fcc0 	bl	801369e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8012d1e:	bf00      	nop
 8012d20:	3720      	adds	r7, #32
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b08a      	sub	sp, #40	; 0x28
 8012d2a:	af02      	add	r7, sp, #8
 8012d2c:	60f8      	str	r0, [r7, #12]
 8012d2e:	60b9      	str	r1, [r7, #8]
 8012d30:	607a      	str	r2, [r7, #4]
 8012d32:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f7ff ff1f 	bl	8012b78 <rpmsg_virtio_get_role>
 8012d3a:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8012d3c:	69fb      	ldr	r3, [r7, #28]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d10f      	bne.n	8012d62 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012d4e:	f107 0114 	add.w	r1, r7, #20
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	2301      	movs	r3, #1
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f000 fca0 	bl	801369e <virtqueue_add_buffer>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	e000      	b.n	8012d64 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8012d62:	2300      	movs	r3, #0
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3720      	adds	r7, #32
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b086      	sub	sp, #24
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f7ff fefd 	bl	8012b78 <rpmsg_virtio_get_role>
 8012d7e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8012d80:	2300      	movs	r3, #0
 8012d82:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d116      	bne.n	8012db8 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	68b9      	ldr	r1, [r7, #8]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f000 fcc7 	bl	8013726 <virtqueue_get_buffer>
 8012d98:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d10b      	bne.n	8012db8 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7ff ff4d 	bl	8012c48 <rpmsg_virtio_shm_pool_get_buffer>
 8012dae:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012db6:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8012db8:	697b      	ldr	r3, [r7, #20]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b086      	sub	sp, #24
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	60f8      	str	r0, [r7, #12]
 8012dca:	60b9      	str	r1, [r7, #8]
 8012dcc:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f7ff fed2 	bl	8012b78 <rpmsg_virtio_get_role>
 8012dd4:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d107      	bne.n	8012df0 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 fc9c 	bl	8013726 <virtqueue_get_buffer>
 8012dee:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d005      	beq.n	8012e02 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	6978      	ldr	r0, [r7, #20]
 8012dfe:	f7ff fdec 	bl	80129da <metal_cache_invalidate>
	}

	return data;
 8012e02:	697b      	ldr	r3, [r7, #20]
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3718      	adds	r7, #24
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f7ff feaf 	bl	8012b78 <rpmsg_virtio_get_role>
 8012e1a:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d102      	bne.n	8012e2c <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8012e26:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8012e2a:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
	...

08012e38 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b090      	sub	sp, #64	; 0x40
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
 8012e44:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8012e46:	2300      	movs	r3, #0
 8012e48:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8012e52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e54:	f7ff feb0 	bl	8012bb8 <rpmsg_virtio_get_status>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5e:	f003 0304 	and.w	r3, r3, #4
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d101      	bne.n	8012e6a <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8012e66:	4b45      	ldr	r3, [pc, #276]	; (8012f7c <rpmsg_virtio_send_offchannel_raw+0x144>)
 8012e68:	e083      	b.n	8012f72 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8012e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d003      	beq.n	8012e78 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8012e70:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8012e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e76:	e001      	b.n	8012e7c <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	3358      	adds	r3, #88	; 0x58
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7ff fe46 	bl	8012b12 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8012e86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e88:	f7ff ffc0 	bl	8012e0c <_rpmsg_virtio_get_buffer_size>
 8012e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8012e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e92:	429a      	cmp	r2, r3
 8012e94:	dc08      	bgt.n	8012ea8 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8012e96:	f107 0216 	add.w	r2, r7, #22
 8012e9a:	f107 0310 	add.w	r3, r7, #16
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012ea2:	f7ff ff63 	bl	8012d6c <rpmsg_virtio_get_tx_buffer>
 8012ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	3358      	adds	r3, #88	; 0x58
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fe3b 	bl	8012b28 <metal_mutex_release>
		if (buffer || !tick_count)
 8012eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d10e      	bne.n	8012ed6 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8012eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00b      	beq.n	8012ed6 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8012ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d001      	beq.n	8012ec8 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8012ec4:	4b2e      	ldr	r3, [pc, #184]	; (8012f80 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8012ec6:	e054      	b.n	8012f72 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8012ec8:	200a      	movs	r0, #10
 8012eca:	f7ff fd9e 	bl	8012a0a <metal_sleep_usec>
		tick_count--;
 8012ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8012ed4:	e7d2      	b.n	8012e7c <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8012ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8012edc:	4b29      	ldr	r3, [pc, #164]	; (8012f84 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8012ede:	e048      	b.n	8012f72 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8012ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8012ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8012ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012efc:	f7ff fda2 	bl	8012a44 <metal_io_virt_to_offset>
 8012f00:	4601      	mov	r1, r0
 8012f02:	f107 0218 	add.w	r2, r7, #24
 8012f06:	2310      	movs	r3, #16
 8012f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f0a:	f7fe fdd8 	bl	8011abe <metal_io_block_write>
 8012f0e:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8012f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f12:	2b10      	cmp	r3, #16
 8012f14:	d000      	beq.n	8012f18 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8012f16:	e7fe      	b.n	8012f16 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8012f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f1a:	3310      	adds	r3, #16
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f20:	f7ff fd90 	bl	8012a44 <metal_io_virt_to_offset>
 8012f24:	4601      	mov	r1, r0
 8012f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f28:	683a      	ldr	r2, [r7, #0]
 8012f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f2c:	f7fe fdc7 	bl	8011abe <metal_io_block_write>
 8012f30:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8012f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d000      	beq.n	8012f3c <rpmsg_virtio_send_offchannel_raw+0x104>
 8012f3a:	e7fe      	b.n	8012f3a <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	3358      	adds	r3, #88	; 0x58
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff fde6 	bl	8012b12 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8012f46:	693a      	ldr	r2, [r7, #16]
 8012f48:	8afb      	ldrh	r3, [r7, #22]
 8012f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012f4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012f4e:	f7ff feea 	bl	8012d26 <rpmsg_virtio_enqueue_buffer>
 8012f52:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8012f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d000      	beq.n	8012f5c <rpmsg_virtio_send_offchannel_raw+0x124>
 8012f5a:	e7fe      	b.n	8012f5a <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8012f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f60:	4618      	mov	r0, r3
 8012f62:	f000 fc5a 	bl	801381a <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	3358      	adds	r3, #88	; 0x58
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7ff fddc 	bl	8012b28 <metal_mutex_release>

	return size;
 8012f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3740      	adds	r7, #64	; 0x40
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	fffff82c 	.word	0xfffff82c
 8012f80:	fffff82b 	.word	0xfffff82b
 8012f84:	fffff82e 	.word	0xfffff82e

08012f88 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8012f90:	bf00      	nop
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8012f9c:	b590      	push	{r4, r7, lr}
 8012f9e:	b08d      	sub	sp, #52	; 0x34
 8012fa0:	af02      	add	r7, sp, #8
 8012fa2:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8012faa:	6a3b      	ldr	r3, [r7, #32]
 8012fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fae:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8012fb0:	69fb      	ldr	r3, [r7, #28]
 8012fb2:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	3358      	adds	r3, #88	; 0x58
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7ff fdaa 	bl	8012b12 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8012fbe:	f107 020a 	add.w	r2, r7, #10
 8012fc2:	f107 030c 	add.w	r3, r7, #12
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	69f8      	ldr	r0, [r7, #28]
 8012fca:	f7ff fefa 	bl	8012dc2 <rpmsg_virtio_get_rx_buffer>
 8012fce:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8012fd0:	69bb      	ldr	r3, [r7, #24]
 8012fd2:	3358      	adds	r3, #88	; 0x58
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff fda7 	bl	8012b28 <metal_mutex_release>

	while (rp_hdr) {
 8012fda:	e04c      	b.n	8013076 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	3358      	adds	r3, #88	; 0x58
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7ff fd96 	bl	8012b12 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8012fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	4619      	mov	r1, r3
 8012fec:	69b8      	ldr	r0, [r7, #24]
 8012fee:	f7ff fe1a 	bl	8012c26 <rpmsg_get_ept_from_addr>
 8012ff2:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	3358      	adds	r3, #88	; 0x58
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7ff fd95 	bl	8012b28 <metal_mutex_release>

		if (!ept)
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d03c      	beq.n	801307e <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801300c:	d103      	bne.n	8013016 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 801300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301c:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8013020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013022:	899b      	ldrh	r3, [r3, #12]
 8013024:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8013026:	4618      	mov	r0, r3
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013030:	9300      	str	r3, [sp, #0]
 8013032:	4613      	mov	r3, r2
 8013034:	4602      	mov	r2, r0
 8013036:	6978      	ldr	r0, [r7, #20]
 8013038:	47a0      	blx	r4
 801303a:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d000      	beq.n	8013044 <rpmsg_virtio_rx_callback+0xa8>
 8013042:	e7fe      	b.n	8013042 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8013044:	69bb      	ldr	r3, [r7, #24]
 8013046:	3358      	adds	r3, #88	; 0x58
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff fd62 	bl	8012b12 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 801304e:	68fa      	ldr	r2, [r7, #12]
 8013050:	897b      	ldrh	r3, [r7, #10]
 8013052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013054:	69f8      	ldr	r0, [r7, #28]
 8013056:	f7ff fe46 	bl	8012ce6 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 801305a:	f107 020a 	add.w	r2, r7, #10
 801305e:	f107 030c 	add.w	r3, r7, #12
 8013062:	4619      	mov	r1, r3
 8013064:	69f8      	ldr	r0, [r7, #28]
 8013066:	f7ff feac 	bl	8012dc2 <rpmsg_virtio_get_rx_buffer>
 801306a:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	3358      	adds	r3, #88	; 0x58
 8013070:	4618      	mov	r0, r3
 8013072:	f7ff fd59 	bl	8012b28 <metal_mutex_release>
	while (rp_hdr) {
 8013076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013078:	2b00      	cmp	r3, #0
 801307a:	d1af      	bne.n	8012fdc <rpmsg_virtio_rx_callback+0x40>
 801307c:	e000      	b.n	8013080 <rpmsg_virtio_rx_callback+0xe4>
			return;
 801307e:	bf00      	nop
	}
}
 8013080:	372c      	adds	r7, #44	; 0x2c
 8013082:	46bd      	mov	sp, r7
 8013084:	bd90      	pop	{r4, r7, pc}

08013086 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8013086:	b580      	push	{r7, lr}
 8013088:	b092      	sub	sp, #72	; 0x48
 801308a:	af00      	add	r7, sp, #0
 801308c:	60f8      	str	r0, [r7, #12]
 801308e:	60b9      	str	r1, [r7, #8]
 8013090:	607a      	str	r2, [r7, #4]
 8013092:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	6a1b      	ldr	r3, [r3, #32]
 8013098:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 801309a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801309c:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 801309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b28      	cmp	r3, #40	; 0x28
 80130ac:	d001      	beq.n	80130b2 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e057      	b.n	8013162 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80130b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 80130b4:	4619      	mov	r1, r3
 80130b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130b8:	f7ff fcc4 	bl	8012a44 <metal_io_virt_to_offset>
 80130bc:	4601      	mov	r1, r0
 80130be:	f107 0210 	add.w	r2, r7, #16
 80130c2:	2320      	movs	r3, #32
 80130c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130c6:	f7fe fc83 	bl	80119d0 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 80130ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130cc:	6a1b      	ldr	r3, [r3, #32]
 80130ce:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 80130d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130d2:	3358      	adds	r3, #88	; 0x58
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff fd1c 	bl	8012b12 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 80130da:	f107 0110 	add.w	r1, r7, #16
 80130de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e0:	f04f 32ff 	mov.w	r2, #4294967295
 80130e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80130e6:	f7ff fb57 	bl	8012798 <rpmsg_get_endpoint>
 80130ea:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 80130ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f0:	f003 0301 	and.w	r3, r3, #1
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d017      	beq.n	8013128 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 80130f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d003      	beq.n	8013106 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 80130fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013100:	f04f 32ff 	mov.w	r2, #4294967295
 8013104:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8013106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013108:	3358      	adds	r3, #88	; 0x58
 801310a:	4618      	mov	r0, r3
 801310c:	f7ff fd0c 	bl	8012b28 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8013110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013112:	2b00      	cmp	r3, #0
 8013114:	d024      	beq.n	8013160 <rpmsg_virtio_ns_callback+0xda>
 8013116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801311a:	2b00      	cmp	r3, #0
 801311c:	d020      	beq.n	8013160 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 801311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013122:	68f8      	ldr	r0, [r7, #12]
 8013124:	4798      	blx	r3
 8013126:	e01b      	b.n	8013160 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8013128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801312a:	2b00      	cmp	r3, #0
 801312c:	d110      	bne.n	8013150 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 801312e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013130:	3358      	adds	r3, #88	; 0x58
 8013132:	4618      	mov	r0, r3
 8013134:	f7ff fcf8 	bl	8012b28 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8013138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801313c:	2b00      	cmp	r3, #0
 801313e:	d00f      	beq.n	8013160 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8013140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013144:	f107 0110 	add.w	r1, r7, #16
 8013148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801314a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801314c:	4798      	blx	r3
 801314e:	e007      	b.n	8013160 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8013150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013154:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8013156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013158:	3358      	adds	r3, #88	; 0x58
 801315a:	4618      	mov	r0, r3
 801315c:	f7ff fce4 	bl	8012b28 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	3748      	adds	r7, #72	; 0x48
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b094      	sub	sp, #80	; 0x50
 8013170:	af02      	add	r7, sp, #8
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 801317e:	2264      	movs	r2, #100	; 0x64
 8013180:	2100      	movs	r1, #0
 8013182:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013184:	f001 fb88 	bl	8014898 <memset>
	metal_mutex_init(&rdev->lock);
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	3358      	adds	r3, #88	; 0x58
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fcb5 	bl	8012afc <metal_mutex_init>
	rvdev->vdev = vdev;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8013198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	4a5d      	ldr	r2, [pc, #372]	; (801331c <rpmsg_init_vdev+0x1b0>)
 80131a8:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 80131aa:	68f8      	ldr	r0, [r7, #12]
 80131ac:	f7ff fce4 	bl	8012b78 <rpmsg_virtio_get_role>
 80131b0:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80131b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d120      	bne.n	80131fa <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 80131b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d101      	bne.n	80131c2 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 80131be:	4b58      	ldr	r3, [pc, #352]	; (8013320 <rpmsg_init_vdev+0x1b4>)
 80131c0:	e0a7      	b.n	8013312 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 80131c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c4:	689b      	ldr	r3, [r3, #8]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d101      	bne.n	80131ce <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 80131ca:	4b56      	ldr	r3, [pc, #344]	; (8013324 <rpmsg_init_vdev+0x1b8>)
 80131cc:	e0a1      	b.n	8013312 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131d2:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 80131d4:	4b54      	ldr	r3, [pc, #336]	; (8013328 <rpmsg_init_vdev+0x1bc>)
 80131d6:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 80131d8:	4b54      	ldr	r3, [pc, #336]	; (801332c <rpmsg_init_vdev+0x1c0>)
 80131da:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 80131dc:	4b54      	ldr	r3, [pc, #336]	; (8013330 <rpmsg_init_vdev+0x1c4>)
 80131de:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 80131e0:	4b54      	ldr	r3, [pc, #336]	; (8013334 <rpmsg_init_vdev+0x1c8>)
 80131e2:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e8:	681a      	ldr	r2, [r3, #0]
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f2:	3318      	adds	r3, #24
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8013200:	f107 0220 	add.w	r2, r7, #32
 8013204:	f107 0318 	add.w	r3, r7, #24
 8013208:	9300      	str	r3, [sp, #0]
 801320a:	4613      	mov	r3, r2
 801320c:	2202      	movs	r2, #2
 801320e:	2100      	movs	r1, #0
 8013210:	68f8      	ldr	r0, [r7, #12]
 8013212:	f7ff fcf3 	bl	8012bfc <rpmsg_virtio_create_virtqueues>
 8013216:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8013218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801321a:	2b00      	cmp	r3, #0
 801321c:	d001      	beq.n	8013222 <rpmsg_init_vdev+0xb6>
		return status;
 801321e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013220:	e077      	b.n	8013312 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8013222:	2300      	movs	r3, #0
 8013224:	643b      	str	r3, [r7, #64]	; 0x40
 8013226:	e00f      	b.n	8013248 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801322c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801322e:	4613      	mov	r3, r2
 8013230:	005b      	lsls	r3, r3, #1
 8013232:	4413      	add	r3, r2
 8013234:	00db      	lsls	r3, r3, #3
 8013236:	440b      	add	r3, r1
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 801323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8013242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013244:	3301      	adds	r3, #1
 8013246:	643b      	str	r3, [r7, #64]	; 0x40
 8013248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801324a:	2b01      	cmp	r3, #1
 801324c:	d9ec      	bls.n	8013228 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013250:	2b00      	cmp	r3, #0
 8013252:	d137      	bne.n	80132c4 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8013254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013258:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 801325a:	2300      	movs	r3, #0
 801325c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801325e:	e02a      	b.n	80132b6 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8013260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013264:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013266:	f7ff fcef 	bl	8012c48 <rpmsg_virtio_shm_pool_get_buffer>
 801326a:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 801326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801326e:	2b00      	cmp	r3, #0
 8013270:	d101      	bne.n	8013276 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8013272:	4b2c      	ldr	r3, [pc, #176]	; (8013324 <rpmsg_init_vdev+0x1b8>)
 8013274:	e04d      	b.n	8013312 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8013276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013278:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 801327a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801327c:	6838      	ldr	r0, [r7, #0]
 801327e:	f7ff fbe1 	bl	8012a44 <metal_io_virt_to_offset>
 8013282:	4601      	mov	r1, r0
 8013284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013288:	2200      	movs	r2, #0
 801328a:	6838      	ldr	r0, [r7, #0]
 801328c:	f7fe fc8d 	bl	8011baa <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013294:	f107 0110 	add.w	r1, r7, #16
 8013298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329a:	9300      	str	r3, [sp, #0]
 801329c:	2301      	movs	r3, #1
 801329e:	2200      	movs	r2, #0
 80132a0:	f000 f9fd 	bl	801369e <virtqueue_add_buffer>
 80132a4:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 80132a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d001      	beq.n	80132b0 <rpmsg_init_vdev+0x144>
				return status;
 80132ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ae:	e030      	b.n	8013312 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80132b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132b2:	3301      	adds	r3, #1
 80132b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132ba:	895b      	ldrh	r3, [r3, #10]
 80132bc:	461a      	mov	r2, r3
 80132be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132c0:	4293      	cmp	r3, r2
 80132c2:	d3cd      	bcc.n	8013260 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80132c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff fbab 	bl	8012a22 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80132cc:	68f8      	ldr	r0, [r7, #12]
 80132ce:	f7ff fc84 	bl	8012bda <rpmsg_virtio_get_features>
 80132d2:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	f003 0301 	and.w	r3, r3, #1
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d011      	beq.n	8013302 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 80132de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e0:	f103 0008 	add.w	r0, r3, #8
 80132e4:	2300      	movs	r3, #0
 80132e6:	9301      	str	r3, [sp, #4]
 80132e8:	4b13      	ldr	r3, [pc, #76]	; (8013338 <rpmsg_init_vdev+0x1cc>)
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	2335      	movs	r3, #53	; 0x35
 80132ee:	2235      	movs	r2, #53	; 0x35
 80132f0:	4912      	ldr	r1, [pc, #72]	; (801333c <rpmsg_init_vdev+0x1d0>)
 80132f2:	f7ff fc24 	bl	8012b3e <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 80132f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f8:	3308      	adds	r3, #8
 80132fa:	4619      	mov	r1, r3
 80132fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132fe:	f7ff facd 	bl	801289c <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8013302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013304:	2b00      	cmp	r3, #0
 8013306:	d103      	bne.n	8013310 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8013308:	2104      	movs	r1, #4
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	f7ff fc41 	bl	8012b92 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8013310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013312:	4618      	mov	r0, r3
 8013314:	3748      	adds	r7, #72	; 0x48
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	08012e39 	.word	0x08012e39
 8013320:	fffff82d 	.word	0xfffff82d
 8013324:	fffff82e 	.word	0xfffff82e
 8013328:	080194ac 	.word	0x080194ac
 801332c:	080194b4 	.word	0x080194b4
 8013330:	08012f9d 	.word	0x08012f9d
 8013334:	08012f89 	.word	0x08012f89
 8013338:	08013087 	.word	0x08013087
 801333c:	080194bc 	.word	0x080194bc

08013340 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 801334a:	bf00      	nop
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr

08013356 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8013356:	b480      	push	{r7}
 8013358:	b083      	sub	sp, #12
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
 801335e:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8013360:	bf00      	nop
 8013362:	370c      	adds	r7, #12
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr

0801336c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 801337a:	68fb      	ldr	r3, [r7, #12]
}
 801337c:	4618      	mov	r0, r3
 801337e:	3714      	adds	r7, #20
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	011b      	lsls	r3, r3, #4
 8013396:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	3303      	adds	r3, #3
 801339c:	005a      	lsls	r2, r3, #1
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	4413      	add	r3, r2
 80133a2:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 80133a4:	68fa      	ldr	r2, [r7, #12]
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	4413      	add	r3, r2
 80133aa:	1e5a      	subs	r2, r3, #1
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	425b      	negs	r3, r3
 80133b0:	4013      	ands	r3, r2
 80133b2:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	4413      	add	r3, r2
 80133bc:	3306      	adds	r3, #6
 80133be:	60fb      	str	r3, [r7, #12]

	return size;
 80133c0:	68fb      	ldr	r3, [r7, #12]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3714      	adds	r7, #20
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <metal_io_virt_to_offset>:
{
 80133ce:	b480      	push	{r7}
 80133d0:	b085      	sub	sp, #20
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	6078      	str	r0, [r7, #4]
 80133d6:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	683a      	ldr	r2, [r7, #0]
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	689b      	ldr	r3, [r3, #8]
 80133e6:	68fa      	ldr	r2, [r7, #12]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d201      	bcs.n	80133f0 <metal_io_virt_to_offset+0x22>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	e001      	b.n	80133f4 <metal_io_virt_to_offset+0x26>
 80133f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8013400:	b590      	push	{r4, r7, lr}
 8013402:	b091      	sub	sp, #68	; 0x44
 8013404:	af04      	add	r7, sp, #16
 8013406:	60f8      	str	r0, [r7, #12]
 8013408:	60b9      	str	r1, [r7, #8]
 801340a:	607a      	str	r2, [r7, #4]
 801340c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013412:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013418:	429a      	cmp	r2, r3
 801341a:	d902      	bls.n	8013422 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 801341c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8013420:	e053      	b.n	80134ca <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8013422:	2300      	movs	r3, #0
 8013424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013426:	e04b      	b.n	80134c0 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801342c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801342e:	4613      	mov	r3, r2
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	4413      	add	r3, r2
 8013434:	00db      	lsls	r3, r3, #3
 8013436:	440b      	add	r3, r1
 8013438:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	3304      	adds	r3, #4
 801343e:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	699b      	ldr	r3, [r3, #24]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d118      	bne.n	801347a <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8013448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344a:	695b      	ldr	r3, [r3, #20]
 801344c:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 801344e:	6a3b      	ldr	r3, [r7, #32]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	4619      	mov	r1, r3
 8013454:	69f8      	ldr	r0, [r7, #28]
 8013456:	f7ff ffba 	bl	80133ce <metal_io_virt_to_offset>
 801345a:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 801345c:	6a3b      	ldr	r3, [r7, #32]
 801345e:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8013460:	461a      	mov	r2, r3
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	4619      	mov	r1, r3
 8013468:	4610      	mov	r0, r2
 801346a:	f7ff ff8d 	bl	8013388 <vring_size>
 801346e:	4603      	mov	r3, r0
 8013470:	2200      	movs	r2, #0
 8013472:	69b9      	ldr	r1, [r7, #24]
 8013474:	69f8      	ldr	r0, [r7, #28]
 8013476:	f7fe fb98 	bl	8011baa <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 801347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347c:	b298      	uxth	r0, r3
 801347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	683a      	ldr	r2, [r7, #0]
 8013484:	4413      	add	r3, r2
 8013486:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8013488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801348e:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8013490:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8013496:	6a12      	ldr	r2, [r2, #32]
 8013498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801349a:	6809      	ldr	r1, [r1, #0]
 801349c:	9102      	str	r1, [sp, #8]
 801349e:	9201      	str	r2, [sp, #4]
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	6a3b      	ldr	r3, [r7, #32]
 80134a4:	4622      	mov	r2, r4
 80134a6:	4601      	mov	r1, r0
 80134a8:	68f8      	ldr	r0, [r7, #12]
 80134aa:	f000 f8c4 	bl	8013636 <virtqueue_create>
 80134ae:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d001      	beq.n	80134ba <virtio_create_virtqueues+0xba>
			return ret;
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	e007      	b.n	80134ca <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 80134ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134bc:	3301      	adds	r3, #1
 80134be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d3af      	bcc.n	8013428 <virtio_create_virtqueues+0x28>
	}
	return 0;
 80134c8:	2300      	movs	r3, #0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3734      	adds	r7, #52	; 0x34
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd90      	pop	{r4, r7, pc}

080134d2 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 80134d2:	b480      	push	{r7}
 80134d4:	b085      	sub	sp, #20
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	60f8      	str	r0, [r7, #12]
 80134da:	60b9      	str	r1, [r7, #8]
 80134dc:	607a      	str	r2, [r7, #4]
 80134de:	603b      	str	r3, [r7, #0]
	vr->num = num;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	68ba      	ldr	r2, [r7, #8]
 80134e4:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	011b      	lsls	r3, r3, #4
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	441a      	add	r2, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	689a      	ldr	r2, [r3, #8]
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	005b      	lsls	r3, r3, #1
 8013500:	4413      	add	r3, r2
 8013502:	3304      	adds	r3, #4
 8013504:	461a      	mov	r2, r3
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 801350a:	1c5a      	adds	r2, r3, #1
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	425b      	negs	r3, r3
 8013510:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8013512:	461a      	mov	r2, r3
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	60da      	str	r2, [r3, #12]
}
 8013518:	bf00      	nop
 801351a:	3714      	adds	r7, #20
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr

08013524 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	80fb      	strh	r3, [r7, #6]
 801352e:	460b      	mov	r3, r1
 8013530:	80bb      	strh	r3, [r7, #4]
 8013532:	4613      	mov	r3, r2
 8013534:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8013536:	88ba      	ldrh	r2, [r7, #4]
 8013538:	88fb      	ldrh	r3, [r7, #6]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	b29b      	uxth	r3, r3
 801353e:	3b01      	subs	r3, #1
 8013540:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8013542:	88b9      	ldrh	r1, [r7, #4]
 8013544:	887b      	ldrh	r3, [r7, #2]
 8013546:	1acb      	subs	r3, r1, r3
 8013548:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 801354a:	429a      	cmp	r2, r3
 801354c:	bf34      	ite	cc
 801354e:	2301      	movcc	r3, #1
 8013550:	2300      	movcs	r3, #0
 8013552:	b2db      	uxtb	r3, r3
}
 8013554:	4618      	mov	r0, r3
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <metal_io_virt_to_offset>:
{
 8013560:	b480      	push	{r7}
 8013562:	b085      	sub	sp, #20
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	683a      	ldr	r2, [r7, #0]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	429a      	cmp	r2, r3
 801357c:	d201      	bcs.n	8013582 <metal_io_virt_to_offset+0x22>
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	e001      	b.n	8013586 <metal_io_virt_to_offset+0x26>
 8013582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013586:	4618      	mov	r0, r3
 8013588:	3714      	adds	r7, #20
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr

08013592 <metal_io_phys>:
{
 8013592:	b480      	push	{r7}
 8013594:	b085      	sub	sp, #20
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
 801359a:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 80135a0:	2b1f      	cmp	r3, #31
 80135a2:	d805      	bhi.n	80135b0 <metal_io_phys+0x1e>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	68db      	ldr	r3, [r3, #12]
 80135a8:	683a      	ldr	r2, [r7, #0]
 80135aa:	fa22 f303 	lsr.w	r3, r2, r3
 80135ae:	e000      	b.n	80135b2 <metal_io_phys+0x20>
 80135b0:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 80135b2:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d010      	beq.n	80135de <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	689b      	ldr	r3, [r3, #8]
 80135c0:	683a      	ldr	r2, [r7, #0]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d80b      	bhi.n	80135de <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	685a      	ldr	r2, [r3, #4]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	009b      	lsls	r3, r3, #2
 80135ce:	4413      	add	r3, r2
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6919      	ldr	r1, [r3, #16]
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 80135da:	4413      	add	r3, r2
 80135dc:	e001      	b.n	80135e2 <metal_io_phys+0x50>
 80135de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3714      	adds	r7, #20
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr

080135ee <metal_io_virt_to_phys>:
{
 80135ee:	b580      	push	{r7, lr}
 80135f0:	b082      	sub	sp, #8
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
 80135f6:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 80135f8:	6839      	ldr	r1, [r7, #0]
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7ff ffb0 	bl	8013560 <metal_io_virt_to_offset>
 8013600:	4603      	mov	r3, r0
 8013602:	4619      	mov	r1, r3
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7ff ffc4 	bl	8013592 <metal_io_phys>
 801360a:	4603      	mov	r3, r0
}
 801360c:	4618      	mov	r0, r3
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013622:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8013624:	6839      	ldr	r1, [r7, #0]
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f7ff ffe1 	bl	80135ee <metal_io_virt_to_phys>
 801362c:	4603      	mov	r3, r0
}
 801362e:	4618      	mov	r0, r3
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b086      	sub	sp, #24
 801363a:	af00      	add	r7, sp, #0
 801363c:	60f8      	str	r0, [r7, #12]
 801363e:	607a      	str	r2, [r7, #4]
 8013640:	603b      	str	r3, [r7, #0]
 8013642:	460b      	mov	r3, r1
 8013644:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8013646:	2300      	movs	r3, #0
 8013648:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d121      	bne.n	8013694 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8013650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8013656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	897a      	ldrh	r2, [r7, #10]
 8013660:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	891a      	ldrh	r2, [r3, #8]
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 801366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366c:	895a      	ldrh	r2, [r3, #10]
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8013672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013674:	6a3a      	ldr	r2, [r7, #32]
 8013676:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8013678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801367c:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	6819      	ldr	r1, [r3, #0]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	461a      	mov	r2, r3
 8013688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801368a:	f000 f97a 	bl	8013982 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 801368e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013690:	f000 f899 	bl	80137c6 <virtqueue_disable_cb>
	}

	return (status);
 8013694:	697b      	ldr	r3, [r7, #20]
}
 8013696:	4618      	mov	r0, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 801369e:	b580      	push	{r7, lr}
 80136a0:	b08a      	sub	sp, #40	; 0x28
 80136a2:	af02      	add	r7, sp, #8
 80136a4:	60f8      	str	r0, [r7, #12]
 80136a6:	60b9      	str	r1, [r7, #8]
 80136a8:	607a      	str	r2, [r7, #4]
 80136aa:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 80136ac:	2300      	movs	r3, #0
 80136ae:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 80136b0:	2300      	movs	r3, #0
 80136b2:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 80136b4:	687a      	ldr	r2, [r7, #4]
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	4413      	add	r3, r2
 80136ba:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d12c      	bne.n	801371c <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80136c6:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 80136c8:	8a7b      	ldrh	r3, [r7, #18]
 80136ca:	3307      	adds	r3, #7
 80136cc:	00db      	lsls	r3, r3, #3
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	4413      	add	r3, r2
 80136d2:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136d8:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	b29a      	uxth	r2, r3
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	69d9      	ldr	r1, [r3, #28]
 80136e6:	8a7a      	ldrh	r2, [r7, #18]
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	9301      	str	r3, [sp, #4]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f000 f8a7 	bl	8013846 <vq_ring_add_buffer>
 80136f8:	4603      	mov	r3, r0
 80136fa:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	8a3a      	ldrh	r2, [r7, #16]
 8013700:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	b29b      	uxth	r3, r3
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	b29a      	uxth	r2, r3
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8013712:	8a7b      	ldrh	r3, [r7, #18]
 8013714:	4619      	mov	r1, r3
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f000 f966 	bl	80139e8 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 801371c:	69bb      	ldr	r3, [r7, #24]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3720      	adds	r7, #32
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b088      	sub	sp, #32
 801372a:	af00      	add	r7, sp, #0
 801372c:	60f8      	str	r0, [r7, #12]
 801372e:	60b9      	str	r1, [r7, #8]
 8013730:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d006      	beq.n	8013746 <virtqueue_get_buffer+0x20>
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013740:	885b      	ldrh	r3, [r3, #2]
 8013742:	429a      	cmp	r2, r3
 8013744:	d101      	bne.n	801374a <virtqueue_get_buffer+0x24>
		return (NULL);
 8013746:	2300      	movs	r3, #0
 8013748:	e039      	b.n	80137be <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801374e:	1c5a      	adds	r2, r3, #1
 8013750:	b291      	uxth	r1, r2
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	8651      	strh	r1, [r2, #50]	; 0x32
 8013756:	b21a      	sxth	r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	895b      	ldrh	r3, [r3, #10]
 801375c:	3b01      	subs	r3, #1
 801375e:	b29b      	uxth	r3, r3
 8013760:	b21b      	sxth	r3, r3
 8013762:	4013      	ands	r3, r2
 8013764:	b21b      	sxth	r3, r3
 8013766:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801376c:	8bfb      	ldrh	r3, [r7, #30]
 801376e:	00db      	lsls	r3, r3, #3
 8013770:	4413      	add	r3, r2
 8013772:	3304      	adds	r3, #4
 8013774:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8013776:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	82fb      	strh	r3, [r7, #22]
	if (len)
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d003      	beq.n	801378e <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	685a      	ldr	r2, [r3, #4]
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 801378e:	8afb      	ldrh	r3, [r7, #22]
 8013790:	4619      	mov	r1, r3
 8013792:	68f8      	ldr	r0, [r7, #12]
 8013794:	f000 f8ae 	bl	80138f4 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8013798:	8afa      	ldrh	r2, [r7, #22]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	3207      	adds	r2, #7
 801379e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80137a2:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 80137a4:	8afa      	ldrh	r2, [r7, #22]
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	3207      	adds	r2, #7
 80137aa:	2100      	movs	r1, #0
 80137ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d002      	beq.n	80137bc <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	8bfa      	ldrh	r2, [r7, #30]
 80137ba:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 80137bc:	693b      	ldr	r3, [r7, #16]
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3720      	adds	r7, #32
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 80137c6:	b480      	push	{r7}
 80137c8:	b083      	sub	sp, #12
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	f003 0302 	and.w	r3, r3, #2
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d010      	beq.n	80137fc <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	895b      	ldrh	r3, [r3, #10]
 80137e2:	1ad3      	subs	r3, r2, r3
 80137e4:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6a1a      	ldr	r2, [r3, #32]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 80137ee:	3901      	subs	r1, #1
 80137f0:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 80137f2:	005b      	lsls	r3, r3, #1
 80137f4:	4413      	add	r3, r2
 80137f6:	460a      	mov	r2, r1
 80137f8:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 80137fa:	e008      	b.n	801380e <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6a1b      	ldr	r3, [r3, #32]
 8013800:	881a      	ldrh	r2, [r3, #0]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6a1b      	ldr	r3, [r3, #32]
 8013806:	f042 0201 	orr.w	r2, r2, #1
 801380a:	b292      	uxth	r2, r2
 801380c:	801a      	strh	r2, [r3, #0]
}
 801380e:	bf00      	nop
 8013810:	370c      	adds	r7, #12
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr

0801381a <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 801381a:	b580      	push	{r7, lr}
 801381c:	b082      	sub	sp, #8
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8013822:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f000 f91d 	bl	8013a66 <vq_ring_must_notify_host>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d002      	beq.n	8013838 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 f94d 	bl	8013ad2 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2200      	movs	r2, #0
 801383c:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 801383e:	bf00      	nop
 8013840:	3708      	adds	r7, #8
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}

08013846 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8013846:	b580      	push	{r7, lr}
 8013848:	b088      	sub	sp, #32
 801384a:	af00      	add	r7, sp, #0
 801384c:	60f8      	str	r0, [r7, #12]
 801384e:	60b9      	str	r1, [r7, #8]
 8013850:	603b      	str	r3, [r7, #0]
 8013852:	4613      	mov	r3, r2
 8013854:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8013856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385a:	4413      	add	r3, r2
 801385c:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 801385e:	2300      	movs	r3, #0
 8013860:	61fb      	str	r3, [r7, #28]
 8013862:	88fb      	ldrh	r3, [r7, #6]
 8013864:	837b      	strh	r3, [r7, #26]
 8013866:	e03c      	b.n	80138e2 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8013868:	8b7b      	ldrh	r3, [r7, #26]
 801386a:	011b      	lsls	r3, r3, #4
 801386c:	68ba      	ldr	r2, [r7, #8]
 801386e:	4413      	add	r3, r2
 8013870:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	683a      	ldr	r2, [r7, #0]
 8013878:	4413      	add	r3, r2
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4619      	mov	r1, r3
 801387e:	68f8      	ldr	r0, [r7, #12]
 8013880:	f7ff fec8 	bl	8013614 <virtqueue_virt_to_phys>
 8013884:	4603      	mov	r3, r0
 8013886:	461a      	mov	r2, r3
 8013888:	f04f 0300 	mov.w	r3, #0
 801388c:	6939      	ldr	r1, [r7, #16]
 801388e:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	00db      	lsls	r3, r3, #3
 8013896:	683a      	ldr	r2, [r7, #0]
 8013898:	4413      	add	r3, r2
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	461a      	mov	r2, r3
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	2200      	movs	r2, #0
 80138a6:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	3b01      	subs	r3, #1
 80138ac:	69fa      	ldr	r2, [r7, #28]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	da06      	bge.n	80138c0 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	899b      	ldrh	r3, [r3, #12]
 80138b6:	f043 0301 	orr.w	r3, r3, #1
 80138ba:	b29a      	uxth	r2, r3
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c4:	429a      	cmp	r2, r3
 80138c6:	db06      	blt.n	80138d6 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	899b      	ldrh	r3, [r3, #12]
 80138cc:	f043 0302 	orr.w	r3, r3, #2
 80138d0:	b29a      	uxth	r2, r3
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	3301      	adds	r3, #1
 80138da:	61fb      	str	r3, [r7, #28]
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	89db      	ldrh	r3, [r3, #14]
 80138e0:	837b      	strh	r3, [r7, #26]
 80138e2:	69fa      	ldr	r2, [r7, #28]
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	dbbe      	blt.n	8013868 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 80138ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3720      	adds	r7, #32
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	69da      	ldr	r2, [r3, #28]
 8013904:	887b      	ldrh	r3, [r7, #2]
 8013906:	011b      	lsls	r3, r3, #4
 8013908:	4413      	add	r3, r2
 801390a:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 801390c:	887b      	ldrh	r3, [r7, #2]
 801390e:	3307      	adds	r3, #7
 8013910:	00db      	lsls	r3, r3, #3
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	4413      	add	r3, r2
 8013916:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	889b      	ldrh	r3, [r3, #4]
 8013920:	4413      	add	r3, r2
 8013922:	b29a      	uxth	r2, r3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	889b      	ldrh	r3, [r3, #4]
 801392c:	3b01      	subs	r3, #1
 801392e:	b29a      	uxth	r2, r3
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	899b      	ldrh	r3, [r3, #12]
 8013938:	f003 0304 	and.w	r3, r3, #4
 801393c:	2b00      	cmp	r3, #0
 801393e:	d113      	bne.n	8013968 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8013940:	e00c      	b.n	801395c <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	69da      	ldr	r2, [r3, #28]
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	89db      	ldrh	r3, [r3, #14]
 801394a:	011b      	lsls	r3, r3, #4
 801394c:	4413      	add	r3, r2
 801394e:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	889b      	ldrh	r3, [r3, #4]
 8013954:	3b01      	subs	r3, #1
 8013956:	b29a      	uxth	r2, r3
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	899b      	ldrh	r3, [r3, #12]
 8013960:	f003 0301 	and.w	r3, r3, #1
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1ec      	bne.n	8013942 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	887a      	ldrh	r2, [r7, #2]
 8013974:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8013976:	bf00      	nop
 8013978:	3714      	adds	r7, #20
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8013982:	b580      	push	{r7, lr}
 8013984:	b088      	sub	sp, #32
 8013986:	af00      	add	r7, sp, #0
 8013988:	60f8      	str	r0, [r7, #12]
 801398a:	60b9      	str	r1, [r7, #8]
 801398c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	895b      	ldrh	r3, [r3, #10]
 8013992:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3318      	adds	r3, #24
 8013998:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 801399a:	69b9      	ldr	r1, [r7, #24]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	6978      	ldr	r0, [r7, #20]
 80139a2:	f7ff fd96 	bl	80134d2 <vring_init>

	for (i = 0; i < size - 1; i++)
 80139a6:	2300      	movs	r3, #0
 80139a8:	61fb      	str	r3, [r7, #28]
 80139aa:	e00c      	b.n	80139c6 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	6859      	ldr	r1, [r3, #4]
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	011b      	lsls	r3, r3, #4
 80139b8:	440b      	add	r3, r1
 80139ba:	3201      	adds	r2, #1
 80139bc:	b292      	uxth	r2, r2
 80139be:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	3301      	adds	r3, #1
 80139c4:	61fb      	str	r3, [r7, #28]
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	3b01      	subs	r3, #1
 80139ca:	69fa      	ldr	r2, [r7, #28]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	dbed      	blt.n	80139ac <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	685a      	ldr	r2, [r3, #4]
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	011b      	lsls	r3, r3, #4
 80139d8:	4413      	add	r3, r2
 80139da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80139de:	81da      	strh	r2, [r3, #14]
}
 80139e0:	bf00      	nop
 80139e2:	3720      	adds	r7, #32
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 80139e8:	b480      	push	{r7}
 80139ea:	b085      	sub	sp, #20
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	460b      	mov	r3, r1
 80139f2:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	885b      	ldrh	r3, [r3, #2]
 80139fa:	b21a      	sxth	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	895b      	ldrh	r3, [r3, #10]
 8013a00:	3b01      	subs	r3, #1
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	b21b      	sxth	r3, r3
 8013a06:	4013      	ands	r3, r2
 8013a08:	b21b      	sxth	r3, r3
 8013a0a:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a1a      	ldr	r2, [r3, #32]
 8013a10:	89fb      	ldrh	r3, [r7, #14]
 8013a12:	005b      	lsls	r3, r3, #1
 8013a14:	4413      	add	r3, r2
 8013a16:	887a      	ldrh	r2, [r7, #2]
 8013a18:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8013a1a:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a1b      	ldr	r3, [r3, #32]
 8013a22:	885a      	ldrh	r2, [r3, #2]
 8013a24:	3201      	adds	r2, #1
 8013a26:	b292      	uxth	r2, r2
 8013a28:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a2e:	3301      	adds	r3, #1
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013a36:	bf00      	nop
 8013a38:	3714      	adds	r7, #20
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr

08013a42 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b082      	sub	sp, #8
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8013a4a:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	691b      	ldr	r3, [r3, #16]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d003      	beq.n	8013a5e <virtqueue_notification+0x1c>
		vq->callback(vq);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	691b      	ldr	r3, [r3, #16]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	4798      	blx	r3
}
 8013a5e:	bf00      	nop
 8013a60:	3708      	adds	r7, #8
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8013a66:	b580      	push	{r7, lr}
 8013a68:	b084      	sub	sp, #16
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	68db      	ldr	r3, [r3, #12]
 8013a72:	f003 0302 	and.w	r3, r3, #2
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d01d      	beq.n	8013ab6 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6a1b      	ldr	r3, [r3, #32]
 8013a7e:	885b      	ldrh	r3, [r3, #2]
 8013a80:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a86:	89fa      	ldrh	r2, [r7, #14]
 8013a88:	1ad3      	subs	r3, r2, r3
 8013a8a:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	699b      	ldr	r3, [r3, #24]
 8013a94:	00db      	lsls	r3, r3, #3
 8013a96:	4413      	add	r3, r2
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8013a9c:	89ba      	ldrh	r2, [r7, #12]
 8013a9e:	89f9      	ldrh	r1, [r7, #14]
 8013aa0:	897b      	ldrh	r3, [r7, #10]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff fd3e 	bl	8013524 <vring_need_event>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	bf14      	ite	ne
 8013aae:	2301      	movne	r3, #1
 8013ab0:	2300      	moveq	r3, #0
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	e009      	b.n	8013aca <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aba:	881b      	ldrh	r3, [r3, #0]
 8013abc:	f003 0301 	and.w	r3, r3, #1
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	bf0c      	ite	eq
 8013ac4:	2301      	moveq	r3, #1
 8013ac6:	2300      	movne	r3, #0
 8013ac8:	b2db      	uxtb	r3, r3
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b082      	sub	sp, #8
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	695b      	ldr	r3, [r3, #20]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d003      	beq.n	8013aea <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	695b      	ldr	r3, [r3, #20]
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	4798      	blx	r3
}
 8013aea:	bf00      	nop
 8013aec:	3708      	adds	r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
	...

08013af4 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af02      	add	r7, sp, #8
	isPortrait = true;
 8013afa:	4b63      	ldr	r3, [pc, #396]	; (8013c88 <screenInit+0x194>)
 8013afc:	2201      	movs	r2, #1
 8013afe:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 8013b00:	f7fa ff0e 	bl	800e920 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 8013b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013b08:	f7fb fd2c 	bl	800f564 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 8013b0c:	4b5e      	ldr	r3, [pc, #376]	; (8013c88 <screenInit+0x194>)
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d00d      	beq.n	8013b30 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 8013b14:	2000      	movs	r0, #0
 8013b16:	f7fb fc05 	bl	800f324 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	f7fb fce4 	bl	800f4e8 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8013b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b24:	2200      	movs	r2, #0
 8013b26:	21a0      	movs	r1, #160	; 0xa0
 8013b28:	2080      	movs	r0, #128	; 0x80
 8013b2a:	f7fa ff19 	bl	800e960 <Paint_NewImage>
 8013b2e:	e00c      	b.n	8013b4a <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 8013b30:	2005      	movs	r0, #5
 8013b32:	f7fb fbf7 	bl	800f324 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8013b36:	2000      	movs	r0, #0
 8013b38:	f7fb fcd6 	bl	800f4e8 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8013b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b40:	2200      	movs	r2, #0
 8013b42:	2180      	movs	r1, #128	; 0x80
 8013b44:	20a0      	movs	r0, #160	; 0xa0
 8013b46:	f7fa ff0b 	bl	800e960 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 8013b4a:	4850      	ldr	r0, [pc, #320]	; (8013c8c <screenInit+0x198>)
 8013b4c:	f7fa ff54 	bl	800e9f8 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8013b50:	484f      	ldr	r0, [pc, #316]	; (8013c90 <screenInit+0x19c>)
 8013b52:	f7fa ff61 	bl	800ea18 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 8013b56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013b5a:	f7fb f81d 	bl	800eb98 <Paint_Clear>
	DEV_Delay_ms(1000);
 8013b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013b62:	f7ee fdaf 	bl	80026c4 <HAL_Delay>

	if (isPortrait)
 8013b66:	4b48      	ldr	r3, [pc, #288]	; (8013c88 <screenInit+0x194>)
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d042      	beq.n	8013bf4 <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 8013b6e:	2380      	movs	r3, #128	; 0x80
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	2380      	movs	r3, #128	; 0x80
 8013b74:	2200      	movs	r2, #0
 8013b76:	2100      	movs	r1, #0
 8013b78:	4846      	ldr	r0, [pc, #280]	; (8013c94 <screenInit+0x1a0>)
 8013b7a:	f7fb f995 	bl	800eea8 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 8013b7e:	2300      	movs	r3, #0
 8013b80:	9301      	str	r3, [sp, #4]
 8013b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	4b43      	ldr	r3, [pc, #268]	; (8013c98 <screenInit+0x1a4>)
 8013b8a:	4a44      	ldr	r2, [pc, #272]	; (8013c9c <screenInit+0x1a8>)
 8013b8c:	2182      	movs	r1, #130	; 0x82
 8013b8e:	2001      	movs	r0, #1
 8013b90:	f7fb f8a0 	bl	800ecd4 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 8013b94:	4b42      	ldr	r3, [pc, #264]	; (8013ca0 <screenInit+0x1ac>)
 8013b96:	edd3 7a00 	vldr	s15, [r3]
 8013b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ba2:	9301      	str	r3, [sp, #4]
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	9300      	str	r3, [sp, #0]
 8013ba8:	4b3b      	ldr	r3, [pc, #236]	; (8013c98 <screenInit+0x1a4>)
 8013baa:	2202      	movs	r2, #2
 8013bac:	eeb0 0b47 	vmov.f64	d0, d7
 8013bb0:	218e      	movs	r1, #142	; 0x8e
 8013bb2:	2001      	movs	r0, #1
 8013bb4:	f7fb f8e6 	bl	800ed84 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 8013bb8:	2300      	movs	r3, #0
 8013bba:	9301      	str	r3, [sp, #4]
 8013bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013bc0:	9300      	str	r3, [sp, #0]
 8013bc2:	4b35      	ldr	r3, [pc, #212]	; (8013c98 <screenInit+0x1a4>)
 8013bc4:	4a37      	ldr	r2, [pc, #220]	; (8013ca4 <screenInit+0x1b0>)
 8013bc6:	2182      	movs	r1, #130	; 0x82
 8013bc8:	2046      	movs	r0, #70	; 0x46
 8013bca:	f7fb f883 	bl	800ecd4 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 8013bce:	4b36      	ldr	r3, [pc, #216]	; (8013ca8 <screenInit+0x1b4>)
 8013bd0:	edd3 7a00 	vldr	s15, [r3]
 8013bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013bdc:	9301      	str	r3, [sp, #4]
 8013bde:	2300      	movs	r3, #0
 8013be0:	9300      	str	r3, [sp, #0]
 8013be2:	4b2d      	ldr	r3, [pc, #180]	; (8013c98 <screenInit+0x1a4>)
 8013be4:	2202      	movs	r2, #2
 8013be6:	eeb0 0b47 	vmov.f64	d0, d7
 8013bea:	218e      	movs	r1, #142	; 0x8e
 8013bec:	2046      	movs	r0, #70	; 0x46
 8013bee:	f7fb f8c9 	bl	800ed84 <Paint_DrawFloatNum>
 8013bf2:	e041      	b.n	8013c78 <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 8013bf4:	2380      	movs	r3, #128	; 0x80
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	2380      	movs	r3, #128	; 0x80
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	2110      	movs	r1, #16
 8013bfe:	4825      	ldr	r0, [pc, #148]	; (8013c94 <screenInit+0x1a0>)
 8013c00:	f7fb f952 	bl	800eea8 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 8013c04:	2300      	movs	r3, #0
 8013c06:	9301      	str	r3, [sp, #4]
 8013c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	4b22      	ldr	r3, [pc, #136]	; (8013c98 <screenInit+0x1a4>)
 8013c10:	4a22      	ldr	r2, [pc, #136]	; (8013c9c <screenInit+0x1a8>)
 8013c12:	2162      	movs	r1, #98	; 0x62
 8013c14:	2001      	movs	r0, #1
 8013c16:	f7fb f85d 	bl	800ecd4 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 8013c1a:	4b21      	ldr	r3, [pc, #132]	; (8013ca0 <screenInit+0x1ac>)
 8013c1c:	edd3 7a00 	vldr	s15, [r3]
 8013c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c28:	9301      	str	r3, [sp, #4]
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	4b1a      	ldr	r3, [pc, #104]	; (8013c98 <screenInit+0x1a4>)
 8013c30:	2202      	movs	r2, #2
 8013c32:	eeb0 0b47 	vmov.f64	d0, d7
 8013c36:	216e      	movs	r1, #110	; 0x6e
 8013c38:	2001      	movs	r0, #1
 8013c3a:	f7fb f8a3 	bl	800ed84 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 8013c3e:	2300      	movs	r3, #0
 8013c40:	9301      	str	r3, [sp, #4]
 8013c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c46:	9300      	str	r3, [sp, #0]
 8013c48:	4b13      	ldr	r3, [pc, #76]	; (8013c98 <screenInit+0x1a4>)
 8013c4a:	4a16      	ldr	r2, [pc, #88]	; (8013ca4 <screenInit+0x1b0>)
 8013c4c:	2162      	movs	r1, #98	; 0x62
 8013c4e:	2068      	movs	r0, #104	; 0x68
 8013c50:	f7fb f840 	bl	800ecd4 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 8013c54:	4b14      	ldr	r3, [pc, #80]	; (8013ca8 <screenInit+0x1b4>)
 8013c56:	edd3 7a00 	vldr	s15, [r3]
 8013c5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c62:	9301      	str	r3, [sp, #4]
 8013c64:	2300      	movs	r3, #0
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	4b0b      	ldr	r3, [pc, #44]	; (8013c98 <screenInit+0x1a4>)
 8013c6a:	2202      	movs	r2, #2
 8013c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8013c70:	216e      	movs	r1, #110	; 0x6e
 8013c72:	207c      	movs	r0, #124	; 0x7c
 8013c74:	f7fb f886 	bl	800ed84 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 8013c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013c7c:	f7ee fd22 	bl	80026c4 <HAL_Delay>
}
 8013c80:	bf00      	nop
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	24000084 	.word	0x24000084
 8013c8c:	0800f4e9 	.word	0x0800f4e9
 8013c90:	0800f45d 	.word	0x0800f45d
 8013c94:	080199e0 	.word	0x080199e0
 8013c98:	24000030 	.word	0x24000030
 8013c9c:	080194c0 	.word	0x080194c0
 8013ca0:	24000008 	.word	0x24000008
 8013ca4:	080194c8 	.word	0x080194c8
 8013ca8:	2400000c 	.word	0x2400000c

08013cac <screenClear>:

void screenClear(void)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	af00      	add	r7, sp, #0
	if (isPortrait)
 8013cb0:	4b0e      	ldr	r3, [pc, #56]	; (8013cec <screenClear+0x40>)
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d007      	beq.n	8013cc8 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8013cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	21a0      	movs	r1, #160	; 0xa0
 8013cc0:	2080      	movs	r0, #128	; 0x80
 8013cc2:	f7fa fe4d 	bl	800e960 <Paint_NewImage>
 8013cc6:	e006      	b.n	8013cd6 <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8013cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ccc:	2200      	movs	r2, #0
 8013cce:	2180      	movs	r1, #128	; 0x80
 8013cd0:	20a0      	movs	r0, #160	; 0xa0
 8013cd2:	f7fa fe45 	bl	800e960 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 8013cd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013cda:	f7fa ff5d 	bl	800eb98 <Paint_Clear>
	DEV_Delay_ms(1000);
 8013cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013ce2:	f7ee fcef 	bl	80026c4 <HAL_Delay>
}
 8013ce6:	bf00      	nop
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	24000084 	.word	0x24000084

08013cf0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8013cf8:	4b04      	ldr	r3, [pc, #16]	; (8013d0c <HAL_HSEM_FreeCallback+0x1c>)
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8013cfe:	2002      	movs	r0, #2
 8013d00:	f7f3 f90c 	bl	8006f1c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8013d04:	bf00      	nop
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	2400a404 	.word	0x2400a404

08013d10 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8013d16:	4b0b      	ldr	r3, [pc, #44]	; (8013d44 <MAILBOX_Init+0x34>)
 8013d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013d1c:	4a09      	ldr	r2, [pc, #36]	; (8013d44 <MAILBOX_Init+0x34>)
 8013d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013d26:	4b07      	ldr	r3, [pc, #28]	; (8013d44 <MAILBOX_Init+0x34>)
 8013d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d30:	607b      	str	r3, [r7, #4]
 8013d32:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8013d34:	2002      	movs	r0, #2
 8013d36:	f7f3 f8f1 	bl	8006f1c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8013d3a:	2300      	movs	r3, #0
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	58024400 	.word	0x58024400

08013d48 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8013d50:	4b09      	ldr	r3, [pc, #36]	; (8013d78 <MAILBOX_Poll+0x30>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d108      	bne.n	8013d6a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8013d58:	2100      	movs	r1, #0
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f7fe fae9 	bl	8012332 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8013d60:	4b05      	ldr	r3, [pc, #20]	; (8013d78 <MAILBOX_Poll+0x30>)
 8013d62:	2200      	movs	r2, #0
 8013d64:	601a      	str	r2, [r3, #0]
    return 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	e001      	b.n	8013d6e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8013d6a:	f06f 030a 	mvn.w	r3, #10
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	2400a404 	.word	0x2400a404

08013d7c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8013d86:	2000      	movs	r0, #0
 8013d88:	f7f3 f89a 	bl	8006ec0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	2000      	movs	r0, #0
 8013d90:	f7f3 f8b0 	bl	8006ef4 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8013d94:	2300      	movs	r3, #0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3708      	adds	r7, #8
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}

08013d9e <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8013d9e:	b480      	push	{r7}
 8013da0:	b083      	sub	sp, #12
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dae:	d006      	beq.n	8013dbe <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8013db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db8:	d001      	beq.n	8013dbe <is_rpmsg_ept_ready+0x20>
 8013dba:	2301      	movs	r3, #1
 8013dbc:	e000      	b.n	8013dc0 <is_rpmsg_ept_ready+0x22>
 8013dbe:	2300      	movs	r3, #0
}
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	370c      	adds	r7, #12
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr

08013dcc <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d209      	bcs.n	8013df4 <metal_device_io_region+0x28>
 8013de0:	683a      	ldr	r2, [r7, #0]
 8013de2:	4613      	mov	r3, r2
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	011b      	lsls	r3, r3, #4
 8013dea:	3308      	adds	r3, #8
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	4413      	add	r3, r2
 8013df0:	3304      	adds	r3, #4
 8013df2:	e000      	b.n	8013df6 <metal_device_io_region+0x2a>
 8013df4:	2300      	movs	r3, #0
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	370c      	adds	r7, #12
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr
	...

08013e04 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8013e04:	b590      	push	{r4, r7, lr}
 8013e06:	b08d      	sub	sp, #52	; 0x34
 8013e08:	af04      	add	r7, sp, #16
 8013e0a:	6078      	str	r0, [r7, #4]
  int status = 0;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8013e10:	2300      	movs	r3, #0
 8013e12:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8013e14:	4a41      	ldr	r2, [pc, #260]	; (8013f1c <OPENAMP_shmem_init+0x118>)
 8013e16:	f107 0310 	add.w	r3, r7, #16
 8013e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e1e:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8013e22:	2300      	movs	r3, #0
 8013e24:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8013e26:	2300      	movs	r3, #0
 8013e28:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8013e2a:	f107 0310 	add.w	r3, r7, #16
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fd fd32 	bl	8011898 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8013e34:	483a      	ldr	r0, [pc, #232]	; (8013f20 <OPENAMP_shmem_init+0x11c>)
 8013e36:	f7fd fbd7 	bl	80115e8 <metal_register_generic_device>
 8013e3a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d001      	beq.n	8013e46 <OPENAMP_shmem_init+0x42>
    return status;
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	e066      	b.n	8013f14 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8013e46:	f107 0318 	add.w	r3, r7, #24
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	4935      	ldr	r1, [pc, #212]	; (8013f24 <OPENAMP_shmem_init+0x120>)
 8013e4e:	4836      	ldr	r0, [pc, #216]	; (8013f28 <OPENAMP_shmem_init+0x124>)
 8013e50:	f7fd fb8c 	bl	801156c <metal_device_open>
 8013e54:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <OPENAMP_shmem_init+0x5c>
    return status;
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	e059      	b.n	8013f14 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8013e60:	4a32      	ldr	r2, [pc, #200]	; (8013f2c <OPENAMP_shmem_init+0x128>)
 8013e62:	4b33      	ldr	r3, [pc, #204]	; (8013f30 <OPENAMP_shmem_init+0x12c>)
 8013e64:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8013e6c:	4a31      	ldr	r2, [pc, #196]	; (8013f34 <OPENAMP_shmem_init+0x130>)
 8013e6e:	4b2f      	ldr	r3, [pc, #188]	; (8013f2c <OPENAMP_shmem_init+0x128>)
 8013e70:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8013e72:	461a      	mov	r2, r3
 8013e74:	2300      	movs	r3, #0
 8013e76:	9302      	str	r3, [sp, #8]
 8013e78:	2300      	movs	r3, #0
 8013e7a:	9301      	str	r3, [sp, #4]
 8013e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	4613      	mov	r3, r2
 8013e84:	4a2a      	ldr	r2, [pc, #168]	; (8013f30 <OPENAMP_shmem_init+0x12c>)
 8013e86:	4929      	ldr	r1, [pc, #164]	; (8013f2c <OPENAMP_shmem_init+0x128>)
 8013e88:	f7fd fd53 	bl	8011932 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	2100      	movs	r1, #0
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7ff ff9b 	bl	8013dcc <metal_device_io_region>
 8013e96:	4603      	mov	r3, r0
 8013e98:	4a27      	ldr	r2, [pc, #156]	; (8013f38 <OPENAMP_shmem_init+0x134>)
 8013e9a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8013e9c:	4b26      	ldr	r3, [pc, #152]	; (8013f38 <OPENAMP_shmem_init+0x134>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d102      	bne.n	8013eaa <OPENAMP_shmem_init+0xa6>
    return -1;
 8013ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea8:	e034      	b.n	8013f14 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8013eaa:	f107 0208 	add.w	r2, r7, #8
 8013eae:	f107 030c 	add.w	r3, r7, #12
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 f91d 	bl	80140f4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	4a1f      	ldr	r2, [pc, #124]	; (8013f3c <OPENAMP_shmem_init+0x138>)
 8013ebe:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8013ec0:	4b1e      	ldr	r3, [pc, #120]	; (8013f3c <OPENAMP_shmem_init+0x138>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d102      	bne.n	8013ece <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8013ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ecc:	e022      	b.n	8013f14 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8013ed4:	4b19      	ldr	r3, [pc, #100]	; (8013f3c <OPENAMP_shmem_init+0x138>)
 8013ed6:	6819      	ldr	r1, [r3, #0]
 8013ed8:	4b18      	ldr	r3, [pc, #96]	; (8013f3c <OPENAMP_shmem_init+0x138>)
 8013eda:	681a      	ldr	r2, [r3, #0]
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	461c      	mov	r4, r3
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	9302      	str	r3, [sp, #8]
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	9301      	str	r3, [sp, #4]
 8013ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	4623      	mov	r3, r4
 8013ef0:	f7fd fd1f 	bl	8011932 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	2101      	movs	r1, #1
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7ff ff67 	bl	8013dcc <metal_device_io_region>
 8013efe:	4603      	mov	r3, r0
 8013f00:	4a0f      	ldr	r2, [pc, #60]	; (8013f40 <OPENAMP_shmem_init+0x13c>)
 8013f02:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8013f04:	4b0e      	ldr	r3, [pc, #56]	; (8013f40 <OPENAMP_shmem_init+0x13c>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d102      	bne.n	8013f12 <OPENAMP_shmem_init+0x10e>
    return -1;
 8013f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f10:	e000      	b.n	8013f14 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8013f12:	2300      	movs	r3, #0
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3724      	adds	r7, #36	; 0x24
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd90      	pop	{r4, r7, pc}
 8013f1c:	08019508 	.word	0x08019508
 8013f20:	2400a088 	.word	0x2400a088
 8013f24:	080194f4 	.word	0x080194f4
 8013f28:	08019500 	.word	0x08019500
 8013f2c:	38000400 	.word	0x38000400
 8013f30:	2400a498 	.word	0x2400a498
 8013f34:	38010000 	.word	0x38010000
 8013f38:	2400a408 	.word	0x2400a408
 8013f3c:	2400a410 	.word	0x2400a410
 8013f40:	2400a40c 	.word	0x2400a40c

08013f44 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8013f44:	b590      	push	{r4, r7, lr}
 8013f46:	b08b      	sub	sp, #44	; 0x2c
 8013f48:	af04      	add	r7, sp, #16
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8013f52:	2300      	movs	r3, #0
 8013f54:	613b      	str	r3, [r7, #16]
  int status = 0;
 8013f56:	2300      	movs	r3, #0
 8013f58:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8013f5a:	f7ff fed9 	bl	8013d10 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7ff ff50 	bl	8013e04 <OPENAMP_shmem_init>
 8013f64:	60f8      	str	r0, [r7, #12]
  if(status)
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	e06a      	b.n	8014046 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	4b37      	ldr	r3, [pc, #220]	; (8014050 <MX_OPENAMP_Init+0x10c>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f103 0218 	add.w	r2, r3, #24
 8013f7a:	4b36      	ldr	r3, [pc, #216]	; (8014054 <MX_OPENAMP_Init+0x110>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	2100      	movs	r1, #0
 8013f80:	9102      	str	r1, [sp, #8]
 8013f82:	4935      	ldr	r1, [pc, #212]	; (8014058 <MX_OPENAMP_Init+0x114>)
 8013f84:	9101      	str	r1, [sp, #4]
 8013f86:	2100      	movs	r1, #0
 8013f88:	9100      	str	r1, [sp, #0]
 8013f8a:	21ff      	movs	r1, #255	; 0xff
 8013f8c:	f7fe f8f2 	bl	8012174 <rproc_virtio_create_vdev>
 8013f90:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d102      	bne.n	8013f9e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8013f98:	f04f 33ff 	mov.w	r3, #4294967295
 8013f9c:	e053      	b.n	8014046 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8013f9e:	6938      	ldr	r0, [r7, #16]
 8013fa0:	f7fe fa03 	bl	80123aa <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8013fa4:	4b2a      	ldr	r3, [pc, #168]	; (8014050 <MX_OPENAMP_Init+0x10c>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	3334      	adds	r3, #52	; 0x34
 8013faa:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8013fb4:	461c      	mov	r4, r3
 8013fb6:	4b29      	ldr	r3, [pc, #164]	; (801405c <MX_OPENAMP_Init+0x118>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8013fba:	697a      	ldr	r2, [r7, #20]
 8013fbc:	6892      	ldr	r2, [r2, #8]
 8013fbe:	6979      	ldr	r1, [r7, #20]
 8013fc0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8013fc2:	9102      	str	r1, [sp, #8]
 8013fc4:	9201      	str	r2, [sp, #4]
 8013fc6:	9300      	str	r3, [sp, #0]
 8013fc8:	4623      	mov	r3, r4
 8013fca:	4602      	mov	r2, r0
 8013fcc:	2100      	movs	r1, #0
 8013fce:	6938      	ldr	r0, [r7, #16]
 8013fd0:	f7fe f97e 	bl	80122d0 <rproc_virtio_init_vring>
 8013fd4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d001      	beq.n	8013fe0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	e032      	b.n	8014046 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8013fe0:	4b1b      	ldr	r3, [pc, #108]	; (8014050 <MX_OPENAMP_Init+0x10c>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	3348      	adds	r3, #72	; 0x48
 8013fe6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8013ff0:	461c      	mov	r4, r3
 8013ff2:	4b1a      	ldr	r3, [pc, #104]	; (801405c <MX_OPENAMP_Init+0x118>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8013ff6:	697a      	ldr	r2, [r7, #20]
 8013ff8:	6892      	ldr	r2, [r2, #8]
 8013ffa:	6979      	ldr	r1, [r7, #20]
 8013ffc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8013ffe:	9102      	str	r1, [sp, #8]
 8014000:	9201      	str	r2, [sp, #4]
 8014002:	9300      	str	r3, [sp, #0]
 8014004:	4623      	mov	r3, r4
 8014006:	4602      	mov	r2, r0
 8014008:	2101      	movs	r1, #1
 801400a:	6938      	ldr	r0, [r7, #16]
 801400c:	f7fe f960 	bl	80122d0 <rproc_virtio_init_vring>
 8014010:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d001      	beq.n	801401c <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	e014      	b.n	8014046 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 801401c:	4b10      	ldr	r3, [pc, #64]	; (8014060 <MX_OPENAMP_Init+0x11c>)
 801401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014022:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8014024:	4a0f      	ldr	r2, [pc, #60]	; (8014064 <MX_OPENAMP_Init+0x120>)
 8014026:	4b0e      	ldr	r3, [pc, #56]	; (8014060 <MX_OPENAMP_Init+0x11c>)
 8014028:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 801402a:	461a      	mov	r2, r3
 801402c:	480e      	ldr	r0, [pc, #56]	; (8014068 <MX_OPENAMP_Init+0x124>)
 801402e:	f7fe fe2d 	bl	8012c8c <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8014032:	4b0a      	ldr	r3, [pc, #40]	; (801405c <MX_OPENAMP_Init+0x118>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	4a0c      	ldr	r2, [pc, #48]	; (8014068 <MX_OPENAMP_Init+0x124>)
 8014038:	9200      	str	r2, [sp, #0]
 801403a:	683a      	ldr	r2, [r7, #0]
 801403c:	6939      	ldr	r1, [r7, #16]
 801403e:	480b      	ldr	r0, [pc, #44]	; (801406c <MX_OPENAMP_Init+0x128>)
 8014040:	f7ff f894 	bl	801316c <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8014044:	2300      	movs	r3, #0
}
 8014046:	4618      	mov	r0, r3
 8014048:	371c      	adds	r7, #28
 801404a:	46bd      	mov	sp, r7
 801404c:	bd90      	pop	{r4, r7, pc}
 801404e:	bf00      	nop
 8014050:	2400a410 	.word	0x2400a410
 8014054:	2400a40c 	.word	0x2400a40c
 8014058:	08013d7d 	.word	0x08013d7d
 801405c:	2400a408 	.word	0x2400a408
 8014060:	38000400 	.word	0x38000400
 8014064:	38010000 	.word	0x38010000
 8014068:	2400a414 	.word	0x2400a414
 801406c:	2400a420 	.word	0x2400a420

08014070 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b08a      	sub	sp, #40	; 0x28
 8014074:	af04      	add	r7, sp, #16
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
 801407c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8014082:	6a3b      	ldr	r3, [r7, #32]
 8014084:	9302      	str	r3, [sp, #8]
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	9301      	str	r3, [sp, #4]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	f04f 33ff 	mov.w	r3, #4294967295
 8014092:	68ba      	ldr	r2, [r7, #8]
 8014094:	4904      	ldr	r1, [pc, #16]	; (80140a8 <OPENAMP_create_endpoint+0x38>)
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f7fe fc14 	bl	80128c4 <rpmsg_create_ept>
 801409c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 801409e:	697b      	ldr	r3, [r7, #20]
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3718      	adds	r7, #24
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	2400a420 	.word	0x2400a420

080140ac <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 80140b0:	4b03      	ldr	r3, [pc, #12]	; (80140c0 <OPENAMP_check_for_message+0x14>)
 80140b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7ff fe47 	bl	8013d48 <MAILBOX_Poll>
}
 80140ba:	bf00      	nop
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	2400a420 	.word	0x2400a420

080140c4 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 80140cc:	e004      	b.n	80140d8 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 80140ce:	4b08      	ldr	r3, [pc, #32]	; (80140f0 <OPENAMP_Wait_EndPointready+0x2c>)
 80140d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7ff fe38 	bl	8013d48 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f7ff fe60 	bl	8013d9e <is_rpmsg_ept_ready>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d0f4      	beq.n	80140ce <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 80140e4:	bf00      	nop
 80140e6:	bf00      	nop
 80140e8:	3708      	adds	r7, #8
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	2400a420 	.word	0x2400a420

080140f4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8014100:	228c      	movs	r2, #140	; 0x8c
 8014102:	2100      	movs	r1, #0
 8014104:	481e      	ldr	r0, [pc, #120]	; (8014180 <resource_table_init+0x8c>)
 8014106:	f000 fbc7 	bl	8014898 <memset>
	resource_table.num = 1;
 801410a:	4b1d      	ldr	r3, [pc, #116]	; (8014180 <resource_table_init+0x8c>)
 801410c:	2201      	movs	r2, #1
 801410e:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8014110:	4b1b      	ldr	r3, [pc, #108]	; (8014180 <resource_table_init+0x8c>)
 8014112:	2201      	movs	r2, #1
 8014114:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 8014116:	4b1a      	ldr	r3, [pc, #104]	; (8014180 <resource_table_init+0x8c>)
 8014118:	2218      	movs	r2, #24
 801411a:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 801411c:	4b19      	ldr	r3, [pc, #100]	; (8014184 <resource_table_init+0x90>)
 801411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014122:	4a17      	ldr	r2, [pc, #92]	; (8014180 <resource_table_init+0x8c>)
 8014124:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 8014126:	4b16      	ldr	r3, [pc, #88]	; (8014180 <resource_table_init+0x8c>)
 8014128:	2204      	movs	r2, #4
 801412a:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 801412c:	4b14      	ldr	r3, [pc, #80]	; (8014180 <resource_table_init+0x8c>)
 801412e:	2204      	movs	r2, #4
 8014130:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 8014132:	4b13      	ldr	r3, [pc, #76]	; (8014180 <resource_table_init+0x8c>)
 8014134:	2200      	movs	r2, #0
 8014136:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 8014138:	4a12      	ldr	r2, [pc, #72]	; (8014184 <resource_table_init+0x90>)
 801413a:	4b11      	ldr	r3, [pc, #68]	; (8014180 <resource_table_init+0x8c>)
 801413c:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 801413e:	4b10      	ldr	r3, [pc, #64]	; (8014180 <resource_table_init+0x8c>)
 8014140:	2204      	movs	r2, #4
 8014142:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8014144:	4b0e      	ldr	r3, [pc, #56]	; (8014180 <resource_table_init+0x8c>)
 8014146:	2204      	movs	r2, #4
 8014148:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 801414a:	4b0d      	ldr	r3, [pc, #52]	; (8014180 <resource_table_init+0x8c>)
 801414c:	2201      	movs	r2, #1
 801414e:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 8014150:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <resource_table_init+0x8c>)
 8014152:	2203      	movs	r2, #3
 8014154:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 8014156:	4b0a      	ldr	r3, [pc, #40]	; (8014180 <resource_table_init+0x8c>)
 8014158:	2207      	movs	r2, #7
 801415a:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 801415c:	4b08      	ldr	r3, [pc, #32]	; (8014180 <resource_table_init+0x8c>)
 801415e:	2202      	movs	r2, #2
 8014160:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8014164:	4b06      	ldr	r3, [pc, #24]	; (8014180 <resource_table_init+0x8c>)
 8014166:	2201      	movs	r2, #1
 8014168:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	228c      	movs	r2, #140	; 0x8c
 801416e:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	4a03      	ldr	r2, [pc, #12]	; (8014180 <resource_table_init+0x8c>)
 8014174:	601a      	str	r2, [r3, #0]
}
 8014176:	bf00      	nop
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	38000000 	.word	0x38000000
 8014184:	38000400 	.word	0x38000400

08014188 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801418c:	2201      	movs	r2, #1
 801418e:	490e      	ldr	r1, [pc, #56]	; (80141c8 <MX_USB_HOST_Init+0x40>)
 8014190:	480e      	ldr	r0, [pc, #56]	; (80141cc <MX_USB_HOST_Init+0x44>)
 8014192:	f7fb fdc3 	bl	800fd1c <USBH_Init>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801419c:	f7ed fb4b 	bl	8001836 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80141a0:	490b      	ldr	r1, [pc, #44]	; (80141d0 <MX_USB_HOST_Init+0x48>)
 80141a2:	480a      	ldr	r0, [pc, #40]	; (80141cc <MX_USB_HOST_Init+0x44>)
 80141a4:	f7fb fe62 	bl	800fe6c <USBH_RegisterClass>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d001      	beq.n	80141b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80141ae:	f7ed fb42 	bl	8001836 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80141b2:	4806      	ldr	r0, [pc, #24]	; (80141cc <MX_USB_HOST_Init+0x44>)
 80141b4:	f7fb feef 	bl	800ff96 <USBH_Start>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d001      	beq.n	80141c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80141be:	f7ed fb3a 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80141c2:	bf00      	nop
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	080141d5 	.word	0x080141d5
 80141cc:	2400aeb4 	.word	0x2400aeb4
 80141d0:	24000038 	.word	0x24000038

080141d4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80141d4:	b480      	push	{r7}
 80141d6:	b083      	sub	sp, #12
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	460b      	mov	r3, r1
 80141de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80141e0:	78fb      	ldrb	r3, [r7, #3]
 80141e2:	3b01      	subs	r3, #1
 80141e4:	2b04      	cmp	r3, #4
 80141e6:	d819      	bhi.n	801421c <USBH_UserProcess+0x48>
 80141e8:	a201      	add	r2, pc, #4	; (adr r2, 80141f0 <USBH_UserProcess+0x1c>)
 80141ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ee:	bf00      	nop
 80141f0:	0801421d 	.word	0x0801421d
 80141f4:	0801420d 	.word	0x0801420d
 80141f8:	0801421d 	.word	0x0801421d
 80141fc:	08014215 	.word	0x08014215
 8014200:	08014205 	.word	0x08014205
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014204:	4b09      	ldr	r3, [pc, #36]	; (801422c <USBH_UserProcess+0x58>)
 8014206:	2203      	movs	r2, #3
 8014208:	701a      	strb	r2, [r3, #0]
  break;
 801420a:	e008      	b.n	801421e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801420c:	4b07      	ldr	r3, [pc, #28]	; (801422c <USBH_UserProcess+0x58>)
 801420e:	2202      	movs	r2, #2
 8014210:	701a      	strb	r2, [r3, #0]
  break;
 8014212:	e004      	b.n	801421e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014214:	4b05      	ldr	r3, [pc, #20]	; (801422c <USBH_UserProcess+0x58>)
 8014216:	2201      	movs	r2, #1
 8014218:	701a      	strb	r2, [r3, #0]
  break;
 801421a:	e000      	b.n	801421e <USBH_UserProcess+0x4a>

  default:
  break;
 801421c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801421e:	bf00      	nop
 8014220:	370c      	adds	r7, #12
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	2400a49c 	.word	0x2400a49c

08014230 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b0b8      	sub	sp, #224	; 0xe0
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014238:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801423c:	2200      	movs	r2, #0
 801423e:	601a      	str	r2, [r3, #0]
 8014240:	605a      	str	r2, [r3, #4]
 8014242:	609a      	str	r2, [r3, #8]
 8014244:	60da      	str	r2, [r3, #12]
 8014246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014248:	f107 0310 	add.w	r3, r7, #16
 801424c:	22bc      	movs	r2, #188	; 0xbc
 801424e:	2100      	movs	r1, #0
 8014250:	4618      	mov	r0, r3
 8014252:	f000 fb21 	bl	8014898 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	4a3b      	ldr	r2, [pc, #236]	; (8014348 <HAL_HCD_MspInit+0x118>)
 801425c:	4293      	cmp	r3, r2
 801425e:	d16e      	bne.n	801433e <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014260:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014264:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8014266:	2301      	movs	r3, #1
 8014268:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 801426a:	2312      	movs	r3, #18
 801426c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801426e:	2302      	movs	r3, #2
 8014270:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8014272:	2303      	movs	r3, #3
 8014274:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8014276:	2302      	movs	r3, #2
 8014278:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801427a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801427e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8014280:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014284:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8014286:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801428a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801428e:	f107 0310 	add.w	r3, r7, #16
 8014292:	4618      	mov	r0, r3
 8014294:	f7f3 ffb6 	bl	8008204 <HAL_RCCEx_PeriphCLKConfig>
 8014298:	4603      	mov	r3, r0
 801429a:	2b00      	cmp	r3, #0
 801429c:	d001      	beq.n	80142a2 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 801429e:	f7ed faca 	bl	8001836 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80142a2:	f7f3 f803 	bl	80072ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80142a6:	4b29      	ldr	r3, [pc, #164]	; (801434c <HAL_HCD_MspInit+0x11c>)
 80142a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80142ac:	4a27      	ldr	r2, [pc, #156]	; (801434c <HAL_HCD_MspInit+0x11c>)
 80142ae:	f043 0301 	orr.w	r3, r3, #1
 80142b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80142b6:	4b25      	ldr	r3, [pc, #148]	; (801434c <HAL_HCD_MspInit+0x11c>)
 80142b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80142bc:	f003 0301 	and.w	r3, r3, #1
 80142c0:	60fb      	str	r3, [r7, #12]
 80142c2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80142c4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80142c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142cc:	2302      	movs	r3, #2
 80142ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142d2:	2300      	movs	r3, #0
 80142d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80142d8:	2300      	movs	r3, #0
 80142da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80142de:	230a      	movs	r3, #10
 80142e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80142e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80142e8:	4619      	mov	r1, r3
 80142ea:	4819      	ldr	r0, [pc, #100]	; (8014350 <HAL_HCD_MspInit+0x120>)
 80142ec:	f7f0 fed6 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80142f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80142f8:	2300      	movs	r3, #0
 80142fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142fe:	2300      	movs	r3, #0
 8014300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014304:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014308:	4619      	mov	r1, r3
 801430a:	4811      	ldr	r0, [pc, #68]	; (8014350 <HAL_HCD_MspInit+0x120>)
 801430c:	f7f0 fec6 	bl	800509c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014310:	4b0e      	ldr	r3, [pc, #56]	; (801434c <HAL_HCD_MspInit+0x11c>)
 8014312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014316:	4a0d      	ldr	r2, [pc, #52]	; (801434c <HAL_HCD_MspInit+0x11c>)
 8014318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801431c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014320:	4b0a      	ldr	r3, [pc, #40]	; (801434c <HAL_HCD_MspInit+0x11c>)
 8014322:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801432a:	60bb      	str	r3, [r7, #8]
 801432c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801432e:	2200      	movs	r2, #0
 8014330:	2100      	movs	r1, #0
 8014332:	2065      	movs	r0, #101	; 0x65
 8014334:	f7ee fae5 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014338:	2065      	movs	r0, #101	; 0x65
 801433a:	f7ee fafc 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801433e:	bf00      	nop
 8014340:	37e0      	adds	r7, #224	; 0xe0
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	40080000 	.word	0x40080000
 801434c:	58024400 	.word	0x58024400
 8014350:	58020000 	.word	0x58020000

08014354 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8014362:	4618      	mov	r0, r3
 8014364:	f7fb fe38 	bl	800ffd8 <USBH_LL_IncTimer>
}
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801437e:	4618      	mov	r0, r3
 8014380:	f7fb fe7c 	bl	801007c <USBH_LL_Connect>
}
 8014384:	bf00      	nop
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801439a:	4618      	mov	r0, r3
 801439c:	f7fb fe8b 	bl	80100b6 <USBH_LL_Disconnect>
}
 80143a0:	bf00      	nop
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80143a8:	b480      	push	{r7}
 80143aa:	b083      	sub	sp, #12
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	460b      	mov	r3, r1
 80143b2:	70fb      	strb	r3, [r7, #3]
 80143b4:	4613      	mov	r3, r2
 80143b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80143b8:	bf00      	nop
 80143ba:	370c      	adds	r7, #12
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr

080143c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fb fe32 	bl	801003c <USBH_LL_PortEnabled>
}
 80143d8:	bf00      	nop
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fb fe34 	bl	801005c <USBH_LL_PortDisabled>
}
 80143f4:	bf00      	nop
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801440a:	4413      	add	r3, r2
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b01      	cmp	r3, #1
 8014410:	d12b      	bne.n	801446a <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8014412:	4a18      	ldr	r2, [pc, #96]	; (8014474 <USBH_LL_Init+0x78>)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014420:	4413      	add	r3, r2
 8014422:	4a14      	ldr	r2, [pc, #80]	; (8014474 <USBH_LL_Init+0x78>)
 8014424:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014426:	4b13      	ldr	r3, [pc, #76]	; (8014474 <USBH_LL_Init+0x78>)
 8014428:	4a13      	ldr	r2, [pc, #76]	; (8014478 <USBH_LL_Init+0x7c>)
 801442a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 801442c:	4b11      	ldr	r3, [pc, #68]	; (8014474 <USBH_LL_Init+0x78>)
 801442e:	2210      	movs	r2, #16
 8014430:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014432:	4b10      	ldr	r3, [pc, #64]	; (8014474 <USBH_LL_Init+0x78>)
 8014434:	2201      	movs	r2, #1
 8014436:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014438:	4b0e      	ldr	r3, [pc, #56]	; (8014474 <USBH_LL_Init+0x78>)
 801443a:	2200      	movs	r2, #0
 801443c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801443e:	4b0d      	ldr	r3, [pc, #52]	; (8014474 <USBH_LL_Init+0x78>)
 8014440:	2202      	movs	r2, #2
 8014442:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014444:	4b0b      	ldr	r3, [pc, #44]	; (8014474 <USBH_LL_Init+0x78>)
 8014446:	2200      	movs	r2, #0
 8014448:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801444a:	480a      	ldr	r0, [pc, #40]	; (8014474 <USBH_LL_Init+0x78>)
 801444c:	f7f0 ffef 	bl	800542e <HAL_HCD_Init>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d001      	beq.n	801445a <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 8014456:	f7ed f9ee 	bl	8001836 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801445a:	4806      	ldr	r0, [pc, #24]	; (8014474 <USBH_LL_Init+0x78>)
 801445c:	f7f1 fbbe 	bl	8005bdc <HAL_HCD_GetCurrentFrame>
 8014460:	4603      	mov	r3, r0
 8014462:	4619      	mov	r1, r3
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f7fb fda6 	bl	800ffb6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801446a:	2300      	movs	r3, #0
}
 801446c:	4618      	mov	r0, r3
 801446e:	3708      	adds	r7, #8
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	2400e90c 	.word	0x2400e90c
 8014478:	40080000 	.word	0x40080000

0801447c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014484:	2300      	movs	r3, #0
 8014486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014488:	2300      	movs	r3, #0
 801448a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014492:	4413      	add	r3, r2
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4618      	mov	r0, r3
 8014498:	f7f1 fb38 	bl	8005b0c <HAL_HCD_Start>
 801449c:	4603      	mov	r3, r0
 801449e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80144a0:	7bfb      	ldrb	r3, [r7, #15]
 80144a2:	4618      	mov	r0, r3
 80144a4:	f000 f91e 	bl	80146e4 <USBH_Get_USB_Status>
 80144a8:	4603      	mov	r3, r0
 80144aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3710      	adds	r7, #16
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b084      	sub	sp, #16
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144be:	2300      	movs	r3, #0
 80144c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144c2:	2300      	movs	r3, #0
 80144c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	f643 2310 	movw	r3, #14864	; 0x3a10
 80144cc:	4413      	add	r3, r2
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f1 fb3e 	bl	8005b52 <HAL_HCD_Stop>
 80144d6:	4603      	mov	r3, r0
 80144d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80144da:	7bfb      	ldrb	r3, [r7, #15]
 80144dc:	4618      	mov	r0, r3
 80144de:	f000 f901 	bl	80146e4 <USBH_Get_USB_Status>
 80144e2:	4603      	mov	r3, r0
 80144e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	460b      	mov	r3, r1
 80144fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014502:	4413      	add	r3, r2
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	78fa      	ldrb	r2, [r7, #3]
 8014508:	4611      	mov	r1, r2
 801450a:	4618      	mov	r0, r3
 801450c:	f7f1 fb52 	bl	8005bb4 <HAL_HCD_HC_GetXferCount>
 8014510:	4603      	mov	r3, r0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801451a:	b590      	push	{r4, r7, lr}
 801451c:	b089      	sub	sp, #36	; 0x24
 801451e:	af04      	add	r7, sp, #16
 8014520:	6078      	str	r0, [r7, #4]
 8014522:	4608      	mov	r0, r1
 8014524:	4611      	mov	r1, r2
 8014526:	461a      	mov	r2, r3
 8014528:	4603      	mov	r3, r0
 801452a:	70fb      	strb	r3, [r7, #3]
 801452c:	460b      	mov	r3, r1
 801452e:	70bb      	strb	r3, [r7, #2]
 8014530:	4613      	mov	r3, r2
 8014532:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014534:	2300      	movs	r3, #0
 8014536:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014542:	4413      	add	r3, r2
 8014544:	6818      	ldr	r0, [r3, #0]
 8014546:	787c      	ldrb	r4, [r7, #1]
 8014548:	78ba      	ldrb	r2, [r7, #2]
 801454a:	78f9      	ldrb	r1, [r7, #3]
 801454c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801454e:	9302      	str	r3, [sp, #8]
 8014550:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	f897 3020 	ldrb.w	r3, [r7, #32]
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	4623      	mov	r3, r4
 801455e:	f7f0 ffc8 	bl	80054f2 <HAL_HCD_HC_Init>
 8014562:	4603      	mov	r3, r0
 8014564:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8014566:	7bfb      	ldrb	r3, [r7, #15]
 8014568:	4618      	mov	r0, r3
 801456a:	f000 f8bb 	bl	80146e4 <USBH_Get_USB_Status>
 801456e:	4603      	mov	r3, r0
 8014570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014572:	7bbb      	ldrb	r3, [r7, #14]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3714      	adds	r7, #20
 8014578:	46bd      	mov	sp, r7
 801457a:	bd90      	pop	{r4, r7, pc}

0801457c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	460b      	mov	r3, r1
 8014586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014588:	2300      	movs	r3, #0
 801458a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801458c:	2300      	movs	r3, #0
 801458e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014590:	687a      	ldr	r2, [r7, #4]
 8014592:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014596:	4413      	add	r3, r2
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	78fa      	ldrb	r2, [r7, #3]
 801459c:	4611      	mov	r1, r2
 801459e:	4618      	mov	r0, r3
 80145a0:	f7f1 f836 	bl	8005610 <HAL_HCD_HC_Halt>
 80145a4:	4603      	mov	r3, r0
 80145a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80145a8:	7bfb      	ldrb	r3, [r7, #15]
 80145aa:	4618      	mov	r0, r3
 80145ac:	f000 f89a 	bl	80146e4 <USBH_Get_USB_Status>
 80145b0:	4603      	mov	r3, r0
 80145b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80145b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}

080145be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80145be:	b590      	push	{r4, r7, lr}
 80145c0:	b089      	sub	sp, #36	; 0x24
 80145c2:	af04      	add	r7, sp, #16
 80145c4:	6078      	str	r0, [r7, #4]
 80145c6:	4608      	mov	r0, r1
 80145c8:	4611      	mov	r1, r2
 80145ca:	461a      	mov	r2, r3
 80145cc:	4603      	mov	r3, r0
 80145ce:	70fb      	strb	r3, [r7, #3]
 80145d0:	460b      	mov	r3, r1
 80145d2:	70bb      	strb	r3, [r7, #2]
 80145d4:	4613      	mov	r3, r2
 80145d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145d8:	2300      	movs	r3, #0
 80145da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80145dc:	2300      	movs	r3, #0
 80145de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80145e0:	687a      	ldr	r2, [r7, #4]
 80145e2:	f643 2310 	movw	r3, #14864	; 0x3a10
 80145e6:	4413      	add	r3, r2
 80145e8:	6818      	ldr	r0, [r3, #0]
 80145ea:	787c      	ldrb	r4, [r7, #1]
 80145ec:	78ba      	ldrb	r2, [r7, #2]
 80145ee:	78f9      	ldrb	r1, [r7, #3]
 80145f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80145f4:	9303      	str	r3, [sp, #12]
 80145f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80145f8:	9302      	str	r3, [sp, #8]
 80145fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fc:	9301      	str	r3, [sp, #4]
 80145fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	4623      	mov	r3, r4
 8014606:	f7f1 f827 	bl	8005658 <HAL_HCD_HC_SubmitRequest>
 801460a:	4603      	mov	r3, r0
 801460c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801460e:	7bfb      	ldrb	r3, [r7, #15]
 8014610:	4618      	mov	r0, r3
 8014612:	f000 f867 	bl	80146e4 <USBH_Get_USB_Status>
 8014616:	4603      	mov	r3, r0
 8014618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801461a:	7bbb      	ldrb	r3, [r7, #14]
}
 801461c:	4618      	mov	r0, r3
 801461e:	3714      	adds	r7, #20
 8014620:	46bd      	mov	sp, r7
 8014622:	bd90      	pop	{r4, r7, pc}

08014624 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	460b      	mov	r3, r1
 801462e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014636:	4413      	add	r3, r2
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	78fa      	ldrb	r2, [r7, #3]
 801463c:	4611      	mov	r1, r2
 801463e:	4618      	mov	r0, r3
 8014640:	f7f1 faa4 	bl	8005b8c <HAL_HCD_HC_GetURBState>
 8014644:	4603      	mov	r3, r0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3708      	adds	r7, #8
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}

0801464e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801464e:	b580      	push	{r7, lr}
 8014650:	b082      	sub	sp, #8
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
 8014656:	460b      	mov	r3, r1
 8014658:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	f643 230c 	movw	r3, #14860	; 0x3a0c
 8014660:	4413      	add	r3, r2
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	2b01      	cmp	r3, #1
 8014666:	d103      	bne.n	8014670 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 8014668:	78fb      	ldrb	r3, [r7, #3]
 801466a:	4618      	mov	r0, r3
 801466c:	f000 f866 	bl	801473c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014670:	20c8      	movs	r0, #200	; 0xc8
 8014672:	f7ee f827 	bl	80026c4 <HAL_Delay>
  return USBH_OK;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014680:	b480      	push	{r7}
 8014682:	b085      	sub	sp, #20
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	460b      	mov	r3, r1
 801468a:	70fb      	strb	r3, [r7, #3]
 801468c:	4613      	mov	r3, r2
 801468e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	f643 2310 	movw	r3, #14864	; 0x3a10
 8014696:	4413      	add	r3, r2
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801469c:	78fb      	ldrb	r3, [r7, #3]
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	212c      	movs	r1, #44	; 0x2c
 80146a2:	fb01 f303 	mul.w	r3, r1, r3
 80146a6:	4413      	add	r3, r2
 80146a8:	333b      	adds	r3, #59	; 0x3b
 80146aa:	781b      	ldrb	r3, [r3, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d009      	beq.n	80146c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80146b0:	78fb      	ldrb	r3, [r7, #3]
 80146b2:	68fa      	ldr	r2, [r7, #12]
 80146b4:	212c      	movs	r1, #44	; 0x2c
 80146b6:	fb01 f303 	mul.w	r3, r1, r3
 80146ba:	4413      	add	r3, r2
 80146bc:	3354      	adds	r3, #84	; 0x54
 80146be:	78ba      	ldrb	r2, [r7, #2]
 80146c0:	701a      	strb	r2, [r3, #0]
 80146c2:	e008      	b.n	80146d6 <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80146c4:	78fb      	ldrb	r3, [r7, #3]
 80146c6:	68fa      	ldr	r2, [r7, #12]
 80146c8:	212c      	movs	r1, #44	; 0x2c
 80146ca:	fb01 f303 	mul.w	r3, r1, r3
 80146ce:	4413      	add	r3, r2
 80146d0:	3355      	adds	r3, #85	; 0x55
 80146d2:	78ba      	ldrb	r2, [r7, #2]
 80146d4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80146d6:	2300      	movs	r3, #0
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3714      	adds	r7, #20
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80146ee:	2300      	movs	r3, #0
 80146f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80146f2:	79fb      	ldrb	r3, [r7, #7]
 80146f4:	2b03      	cmp	r3, #3
 80146f6:	d817      	bhi.n	8014728 <USBH_Get_USB_Status+0x44>
 80146f8:	a201      	add	r2, pc, #4	; (adr r2, 8014700 <USBH_Get_USB_Status+0x1c>)
 80146fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146fe:	bf00      	nop
 8014700:	08014711 	.word	0x08014711
 8014704:	08014717 	.word	0x08014717
 8014708:	0801471d 	.word	0x0801471d
 801470c:	08014723 	.word	0x08014723
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014710:	2300      	movs	r3, #0
 8014712:	73fb      	strb	r3, [r7, #15]
    break;
 8014714:	e00b      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014716:	2302      	movs	r3, #2
 8014718:	73fb      	strb	r3, [r7, #15]
    break;
 801471a:	e008      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801471c:	2301      	movs	r3, #1
 801471e:	73fb      	strb	r3, [r7, #15]
    break;
 8014720:	e005      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014722:	2302      	movs	r3, #2
 8014724:	73fb      	strb	r3, [r7, #15]
    break;
 8014726:	e002      	b.n	801472e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014728:	2302      	movs	r3, #2
 801472a:	73fb      	strb	r3, [r7, #15]
    break;
 801472c:	bf00      	nop
  }
  return usb_status;
 801472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014730:	4618      	mov	r0, r3
 8014732:	3714      	adds	r7, #20
 8014734:	46bd      	mov	sp, r7
 8014736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473a:	4770      	bx	lr

0801473c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801474a:	79fb      	ldrb	r3, [r7, #7]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d102      	bne.n	8014756 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014750:	2301      	movs	r3, #1
 8014752:	73fb      	strb	r3, [r7, #15]
 8014754:	e001      	b.n	801475a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8014756:	2300      	movs	r3, #0
 8014758:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 801475a:	7bfb      	ldrb	r3, [r7, #15]
 801475c:	461a      	mov	r2, r3
 801475e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014762:	4803      	ldr	r0, [pc, #12]	; (8014770 <MX_DriverVbusFS+0x34>)
 8014764:	f7f0 fe4a 	bl	80053fc <HAL_GPIO_WritePin>
}
 8014768:	bf00      	nop
 801476a:	3710      	adds	r7, #16
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	58020000 	.word	0x58020000

08014774 <__assert_func>:
 8014774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014776:	4614      	mov	r4, r2
 8014778:	461a      	mov	r2, r3
 801477a:	4b09      	ldr	r3, [pc, #36]	; (80147a0 <__assert_func+0x2c>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	4605      	mov	r5, r0
 8014780:	68d8      	ldr	r0, [r3, #12]
 8014782:	b14c      	cbz	r4, 8014798 <__assert_func+0x24>
 8014784:	4b07      	ldr	r3, [pc, #28]	; (80147a4 <__assert_func+0x30>)
 8014786:	9100      	str	r1, [sp, #0]
 8014788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801478c:	4906      	ldr	r1, [pc, #24]	; (80147a8 <__assert_func+0x34>)
 801478e:	462b      	mov	r3, r5
 8014790:	f000 f814 	bl	80147bc <fiprintf>
 8014794:	f002 f8fa 	bl	801698c <abort>
 8014798:	4b04      	ldr	r3, [pc, #16]	; (80147ac <__assert_func+0x38>)
 801479a:	461c      	mov	r4, r3
 801479c:	e7f3      	b.n	8014786 <__assert_func+0x12>
 801479e:	bf00      	nop
 80147a0:	2400a104 	.word	0x2400a104
 80147a4:	08021a43 	.word	0x08021a43
 80147a8:	08021a50 	.word	0x08021a50
 80147ac:	08021a7e 	.word	0x08021a7e

080147b0 <__errno>:
 80147b0:	4b01      	ldr	r3, [pc, #4]	; (80147b8 <__errno+0x8>)
 80147b2:	6818      	ldr	r0, [r3, #0]
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	2400a104 	.word	0x2400a104

080147bc <fiprintf>:
 80147bc:	b40e      	push	{r1, r2, r3}
 80147be:	b503      	push	{r0, r1, lr}
 80147c0:	4601      	mov	r1, r0
 80147c2:	ab03      	add	r3, sp, #12
 80147c4:	4805      	ldr	r0, [pc, #20]	; (80147dc <fiprintf+0x20>)
 80147c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80147ca:	6800      	ldr	r0, [r0, #0]
 80147cc:	9301      	str	r3, [sp, #4]
 80147ce:	f000 f93f 	bl	8014a50 <_vfiprintf_r>
 80147d2:	b002      	add	sp, #8
 80147d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80147d8:	b003      	add	sp, #12
 80147da:	4770      	bx	lr
 80147dc:	2400a104 	.word	0x2400a104

080147e0 <__libc_init_array>:
 80147e0:	b570      	push	{r4, r5, r6, lr}
 80147e2:	4d0d      	ldr	r5, [pc, #52]	; (8014818 <__libc_init_array+0x38>)
 80147e4:	4c0d      	ldr	r4, [pc, #52]	; (801481c <__libc_init_array+0x3c>)
 80147e6:	1b64      	subs	r4, r4, r5
 80147e8:	10a4      	asrs	r4, r4, #2
 80147ea:	2600      	movs	r6, #0
 80147ec:	42a6      	cmp	r6, r4
 80147ee:	d109      	bne.n	8014804 <__libc_init_array+0x24>
 80147f0:	4d0b      	ldr	r5, [pc, #44]	; (8014820 <__libc_init_array+0x40>)
 80147f2:	4c0c      	ldr	r4, [pc, #48]	; (8014824 <__libc_init_array+0x44>)
 80147f4:	f004 fbe8 	bl	8018fc8 <_init>
 80147f8:	1b64      	subs	r4, r4, r5
 80147fa:	10a4      	asrs	r4, r4, #2
 80147fc:	2600      	movs	r6, #0
 80147fe:	42a6      	cmp	r6, r4
 8014800:	d105      	bne.n	801480e <__libc_init_array+0x2e>
 8014802:	bd70      	pop	{r4, r5, r6, pc}
 8014804:	f855 3b04 	ldr.w	r3, [r5], #4
 8014808:	4798      	blx	r3
 801480a:	3601      	adds	r6, #1
 801480c:	e7ee      	b.n	80147ec <__libc_init_array+0xc>
 801480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014812:	4798      	blx	r3
 8014814:	3601      	adds	r6, #1
 8014816:	e7f2      	b.n	80147fe <__libc_init_array+0x1e>
 8014818:	08021efc 	.word	0x08021efc
 801481c:	08021efc 	.word	0x08021efc
 8014820:	08021efc 	.word	0x08021efc
 8014824:	08021f00 	.word	0x08021f00

08014828 <malloc>:
 8014828:	4b02      	ldr	r3, [pc, #8]	; (8014834 <malloc+0xc>)
 801482a:	4601      	mov	r1, r0
 801482c:	6818      	ldr	r0, [r3, #0]
 801482e:	f000 b88b 	b.w	8014948 <_malloc_r>
 8014832:	bf00      	nop
 8014834:	2400a104 	.word	0x2400a104

08014838 <free>:
 8014838:	4b02      	ldr	r3, [pc, #8]	; (8014844 <free+0xc>)
 801483a:	4601      	mov	r1, r0
 801483c:	6818      	ldr	r0, [r3, #0]
 801483e:	f000 b833 	b.w	80148a8 <_free_r>
 8014842:	bf00      	nop
 8014844:	2400a104 	.word	0x2400a104

08014848 <memcpy>:
 8014848:	440a      	add	r2, r1
 801484a:	4291      	cmp	r1, r2
 801484c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014850:	d100      	bne.n	8014854 <memcpy+0xc>
 8014852:	4770      	bx	lr
 8014854:	b510      	push	{r4, lr}
 8014856:	f811 4b01 	ldrb.w	r4, [r1], #1
 801485a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801485e:	4291      	cmp	r1, r2
 8014860:	d1f9      	bne.n	8014856 <memcpy+0xe>
 8014862:	bd10      	pop	{r4, pc}

08014864 <memmove>:
 8014864:	4288      	cmp	r0, r1
 8014866:	b510      	push	{r4, lr}
 8014868:	eb01 0402 	add.w	r4, r1, r2
 801486c:	d902      	bls.n	8014874 <memmove+0x10>
 801486e:	4284      	cmp	r4, r0
 8014870:	4623      	mov	r3, r4
 8014872:	d807      	bhi.n	8014884 <memmove+0x20>
 8014874:	1e43      	subs	r3, r0, #1
 8014876:	42a1      	cmp	r1, r4
 8014878:	d008      	beq.n	801488c <memmove+0x28>
 801487a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801487e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014882:	e7f8      	b.n	8014876 <memmove+0x12>
 8014884:	4402      	add	r2, r0
 8014886:	4601      	mov	r1, r0
 8014888:	428a      	cmp	r2, r1
 801488a:	d100      	bne.n	801488e <memmove+0x2a>
 801488c:	bd10      	pop	{r4, pc}
 801488e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014896:	e7f7      	b.n	8014888 <memmove+0x24>

08014898 <memset>:
 8014898:	4402      	add	r2, r0
 801489a:	4603      	mov	r3, r0
 801489c:	4293      	cmp	r3, r2
 801489e:	d100      	bne.n	80148a2 <memset+0xa>
 80148a0:	4770      	bx	lr
 80148a2:	f803 1b01 	strb.w	r1, [r3], #1
 80148a6:	e7f9      	b.n	801489c <memset+0x4>

080148a8 <_free_r>:
 80148a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148aa:	2900      	cmp	r1, #0
 80148ac:	d048      	beq.n	8014940 <_free_r+0x98>
 80148ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148b2:	9001      	str	r0, [sp, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f1a1 0404 	sub.w	r4, r1, #4
 80148ba:	bfb8      	it	lt
 80148bc:	18e4      	addlt	r4, r4, r3
 80148be:	f003 fc1d 	bl	80180fc <__malloc_lock>
 80148c2:	4a20      	ldr	r2, [pc, #128]	; (8014944 <_free_r+0x9c>)
 80148c4:	9801      	ldr	r0, [sp, #4]
 80148c6:	6813      	ldr	r3, [r2, #0]
 80148c8:	4615      	mov	r5, r2
 80148ca:	b933      	cbnz	r3, 80148da <_free_r+0x32>
 80148cc:	6063      	str	r3, [r4, #4]
 80148ce:	6014      	str	r4, [r2, #0]
 80148d0:	b003      	add	sp, #12
 80148d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148d6:	f003 bc17 	b.w	8018108 <__malloc_unlock>
 80148da:	42a3      	cmp	r3, r4
 80148dc:	d90b      	bls.n	80148f6 <_free_r+0x4e>
 80148de:	6821      	ldr	r1, [r4, #0]
 80148e0:	1862      	adds	r2, r4, r1
 80148e2:	4293      	cmp	r3, r2
 80148e4:	bf04      	itt	eq
 80148e6:	681a      	ldreq	r2, [r3, #0]
 80148e8:	685b      	ldreq	r3, [r3, #4]
 80148ea:	6063      	str	r3, [r4, #4]
 80148ec:	bf04      	itt	eq
 80148ee:	1852      	addeq	r2, r2, r1
 80148f0:	6022      	streq	r2, [r4, #0]
 80148f2:	602c      	str	r4, [r5, #0]
 80148f4:	e7ec      	b.n	80148d0 <_free_r+0x28>
 80148f6:	461a      	mov	r2, r3
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	b10b      	cbz	r3, 8014900 <_free_r+0x58>
 80148fc:	42a3      	cmp	r3, r4
 80148fe:	d9fa      	bls.n	80148f6 <_free_r+0x4e>
 8014900:	6811      	ldr	r1, [r2, #0]
 8014902:	1855      	adds	r5, r2, r1
 8014904:	42a5      	cmp	r5, r4
 8014906:	d10b      	bne.n	8014920 <_free_r+0x78>
 8014908:	6824      	ldr	r4, [r4, #0]
 801490a:	4421      	add	r1, r4
 801490c:	1854      	adds	r4, r2, r1
 801490e:	42a3      	cmp	r3, r4
 8014910:	6011      	str	r1, [r2, #0]
 8014912:	d1dd      	bne.n	80148d0 <_free_r+0x28>
 8014914:	681c      	ldr	r4, [r3, #0]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	6053      	str	r3, [r2, #4]
 801491a:	4421      	add	r1, r4
 801491c:	6011      	str	r1, [r2, #0]
 801491e:	e7d7      	b.n	80148d0 <_free_r+0x28>
 8014920:	d902      	bls.n	8014928 <_free_r+0x80>
 8014922:	230c      	movs	r3, #12
 8014924:	6003      	str	r3, [r0, #0]
 8014926:	e7d3      	b.n	80148d0 <_free_r+0x28>
 8014928:	6825      	ldr	r5, [r4, #0]
 801492a:	1961      	adds	r1, r4, r5
 801492c:	428b      	cmp	r3, r1
 801492e:	bf04      	itt	eq
 8014930:	6819      	ldreq	r1, [r3, #0]
 8014932:	685b      	ldreq	r3, [r3, #4]
 8014934:	6063      	str	r3, [r4, #4]
 8014936:	bf04      	itt	eq
 8014938:	1949      	addeq	r1, r1, r5
 801493a:	6021      	streq	r1, [r4, #0]
 801493c:	6054      	str	r4, [r2, #4]
 801493e:	e7c7      	b.n	80148d0 <_free_r+0x28>
 8014940:	b003      	add	sp, #12
 8014942:	bd30      	pop	{r4, r5, pc}
 8014944:	2400a4a0 	.word	0x2400a4a0

08014948 <_malloc_r>:
 8014948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801494a:	1ccd      	adds	r5, r1, #3
 801494c:	f025 0503 	bic.w	r5, r5, #3
 8014950:	3508      	adds	r5, #8
 8014952:	2d0c      	cmp	r5, #12
 8014954:	bf38      	it	cc
 8014956:	250c      	movcc	r5, #12
 8014958:	2d00      	cmp	r5, #0
 801495a:	4606      	mov	r6, r0
 801495c:	db01      	blt.n	8014962 <_malloc_r+0x1a>
 801495e:	42a9      	cmp	r1, r5
 8014960:	d903      	bls.n	801496a <_malloc_r+0x22>
 8014962:	230c      	movs	r3, #12
 8014964:	6033      	str	r3, [r6, #0]
 8014966:	2000      	movs	r0, #0
 8014968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801496a:	f003 fbc7 	bl	80180fc <__malloc_lock>
 801496e:	4921      	ldr	r1, [pc, #132]	; (80149f4 <_malloc_r+0xac>)
 8014970:	680a      	ldr	r2, [r1, #0]
 8014972:	4614      	mov	r4, r2
 8014974:	b99c      	cbnz	r4, 801499e <_malloc_r+0x56>
 8014976:	4f20      	ldr	r7, [pc, #128]	; (80149f8 <_malloc_r+0xb0>)
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	b923      	cbnz	r3, 8014986 <_malloc_r+0x3e>
 801497c:	4621      	mov	r1, r4
 801497e:	4630      	mov	r0, r6
 8014980:	f001 f86a 	bl	8015a58 <_sbrk_r>
 8014984:	6038      	str	r0, [r7, #0]
 8014986:	4629      	mov	r1, r5
 8014988:	4630      	mov	r0, r6
 801498a:	f001 f865 	bl	8015a58 <_sbrk_r>
 801498e:	1c43      	adds	r3, r0, #1
 8014990:	d123      	bne.n	80149da <_malloc_r+0x92>
 8014992:	230c      	movs	r3, #12
 8014994:	6033      	str	r3, [r6, #0]
 8014996:	4630      	mov	r0, r6
 8014998:	f003 fbb6 	bl	8018108 <__malloc_unlock>
 801499c:	e7e3      	b.n	8014966 <_malloc_r+0x1e>
 801499e:	6823      	ldr	r3, [r4, #0]
 80149a0:	1b5b      	subs	r3, r3, r5
 80149a2:	d417      	bmi.n	80149d4 <_malloc_r+0x8c>
 80149a4:	2b0b      	cmp	r3, #11
 80149a6:	d903      	bls.n	80149b0 <_malloc_r+0x68>
 80149a8:	6023      	str	r3, [r4, #0]
 80149aa:	441c      	add	r4, r3
 80149ac:	6025      	str	r5, [r4, #0]
 80149ae:	e004      	b.n	80149ba <_malloc_r+0x72>
 80149b0:	6863      	ldr	r3, [r4, #4]
 80149b2:	42a2      	cmp	r2, r4
 80149b4:	bf0c      	ite	eq
 80149b6:	600b      	streq	r3, [r1, #0]
 80149b8:	6053      	strne	r3, [r2, #4]
 80149ba:	4630      	mov	r0, r6
 80149bc:	f003 fba4 	bl	8018108 <__malloc_unlock>
 80149c0:	f104 000b 	add.w	r0, r4, #11
 80149c4:	1d23      	adds	r3, r4, #4
 80149c6:	f020 0007 	bic.w	r0, r0, #7
 80149ca:	1ac2      	subs	r2, r0, r3
 80149cc:	d0cc      	beq.n	8014968 <_malloc_r+0x20>
 80149ce:	1a1b      	subs	r3, r3, r0
 80149d0:	50a3      	str	r3, [r4, r2]
 80149d2:	e7c9      	b.n	8014968 <_malloc_r+0x20>
 80149d4:	4622      	mov	r2, r4
 80149d6:	6864      	ldr	r4, [r4, #4]
 80149d8:	e7cc      	b.n	8014974 <_malloc_r+0x2c>
 80149da:	1cc4      	adds	r4, r0, #3
 80149dc:	f024 0403 	bic.w	r4, r4, #3
 80149e0:	42a0      	cmp	r0, r4
 80149e2:	d0e3      	beq.n	80149ac <_malloc_r+0x64>
 80149e4:	1a21      	subs	r1, r4, r0
 80149e6:	4630      	mov	r0, r6
 80149e8:	f001 f836 	bl	8015a58 <_sbrk_r>
 80149ec:	3001      	adds	r0, #1
 80149ee:	d1dd      	bne.n	80149ac <_malloc_r+0x64>
 80149f0:	e7cf      	b.n	8014992 <_malloc_r+0x4a>
 80149f2:	bf00      	nop
 80149f4:	2400a4a0 	.word	0x2400a4a0
 80149f8:	2400a4a4 	.word	0x2400a4a4

080149fc <__sfputc_r>:
 80149fc:	6893      	ldr	r3, [r2, #8]
 80149fe:	3b01      	subs	r3, #1
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	b410      	push	{r4}
 8014a04:	6093      	str	r3, [r2, #8]
 8014a06:	da08      	bge.n	8014a1a <__sfputc_r+0x1e>
 8014a08:	6994      	ldr	r4, [r2, #24]
 8014a0a:	42a3      	cmp	r3, r4
 8014a0c:	db01      	blt.n	8014a12 <__sfputc_r+0x16>
 8014a0e:	290a      	cmp	r1, #10
 8014a10:	d103      	bne.n	8014a1a <__sfputc_r+0x1e>
 8014a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a16:	f001 bef9 	b.w	801680c <__swbuf_r>
 8014a1a:	6813      	ldr	r3, [r2, #0]
 8014a1c:	1c58      	adds	r0, r3, #1
 8014a1e:	6010      	str	r0, [r2, #0]
 8014a20:	7019      	strb	r1, [r3, #0]
 8014a22:	4608      	mov	r0, r1
 8014a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a28:	4770      	bx	lr

08014a2a <__sfputs_r>:
 8014a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a2c:	4606      	mov	r6, r0
 8014a2e:	460f      	mov	r7, r1
 8014a30:	4614      	mov	r4, r2
 8014a32:	18d5      	adds	r5, r2, r3
 8014a34:	42ac      	cmp	r4, r5
 8014a36:	d101      	bne.n	8014a3c <__sfputs_r+0x12>
 8014a38:	2000      	movs	r0, #0
 8014a3a:	e007      	b.n	8014a4c <__sfputs_r+0x22>
 8014a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a40:	463a      	mov	r2, r7
 8014a42:	4630      	mov	r0, r6
 8014a44:	f7ff ffda 	bl	80149fc <__sfputc_r>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	d1f3      	bne.n	8014a34 <__sfputs_r+0xa>
 8014a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a50 <_vfiprintf_r>:
 8014a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a54:	460d      	mov	r5, r1
 8014a56:	b09d      	sub	sp, #116	; 0x74
 8014a58:	4614      	mov	r4, r2
 8014a5a:	4698      	mov	r8, r3
 8014a5c:	4606      	mov	r6, r0
 8014a5e:	b118      	cbz	r0, 8014a68 <_vfiprintf_r+0x18>
 8014a60:	6983      	ldr	r3, [r0, #24]
 8014a62:	b90b      	cbnz	r3, 8014a68 <_vfiprintf_r+0x18>
 8014a64:	f002 fec0 	bl	80177e8 <__sinit>
 8014a68:	4b89      	ldr	r3, [pc, #548]	; (8014c90 <_vfiprintf_r+0x240>)
 8014a6a:	429d      	cmp	r5, r3
 8014a6c:	d11b      	bne.n	8014aa6 <_vfiprintf_r+0x56>
 8014a6e:	6875      	ldr	r5, [r6, #4]
 8014a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a72:	07d9      	lsls	r1, r3, #31
 8014a74:	d405      	bmi.n	8014a82 <_vfiprintf_r+0x32>
 8014a76:	89ab      	ldrh	r3, [r5, #12]
 8014a78:	059a      	lsls	r2, r3, #22
 8014a7a:	d402      	bmi.n	8014a82 <_vfiprintf_r+0x32>
 8014a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a7e:	f003 fac4 	bl	801800a <__retarget_lock_acquire_recursive>
 8014a82:	89ab      	ldrh	r3, [r5, #12]
 8014a84:	071b      	lsls	r3, r3, #28
 8014a86:	d501      	bpl.n	8014a8c <_vfiprintf_r+0x3c>
 8014a88:	692b      	ldr	r3, [r5, #16]
 8014a8a:	b9eb      	cbnz	r3, 8014ac8 <_vfiprintf_r+0x78>
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f001 ff0e 	bl	80168b0 <__swsetup_r>
 8014a94:	b1c0      	cbz	r0, 8014ac8 <_vfiprintf_r+0x78>
 8014a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a98:	07dc      	lsls	r4, r3, #31
 8014a9a:	d50e      	bpl.n	8014aba <_vfiprintf_r+0x6a>
 8014a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014aa0:	b01d      	add	sp, #116	; 0x74
 8014aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa6:	4b7b      	ldr	r3, [pc, #492]	; (8014c94 <_vfiprintf_r+0x244>)
 8014aa8:	429d      	cmp	r5, r3
 8014aaa:	d101      	bne.n	8014ab0 <_vfiprintf_r+0x60>
 8014aac:	68b5      	ldr	r5, [r6, #8]
 8014aae:	e7df      	b.n	8014a70 <_vfiprintf_r+0x20>
 8014ab0:	4b79      	ldr	r3, [pc, #484]	; (8014c98 <_vfiprintf_r+0x248>)
 8014ab2:	429d      	cmp	r5, r3
 8014ab4:	bf08      	it	eq
 8014ab6:	68f5      	ldreq	r5, [r6, #12]
 8014ab8:	e7da      	b.n	8014a70 <_vfiprintf_r+0x20>
 8014aba:	89ab      	ldrh	r3, [r5, #12]
 8014abc:	0598      	lsls	r0, r3, #22
 8014abe:	d4ed      	bmi.n	8014a9c <_vfiprintf_r+0x4c>
 8014ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ac2:	f003 faa3 	bl	801800c <__retarget_lock_release_recursive>
 8014ac6:	e7e9      	b.n	8014a9c <_vfiprintf_r+0x4c>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	9309      	str	r3, [sp, #36]	; 0x24
 8014acc:	2320      	movs	r3, #32
 8014ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ad6:	2330      	movs	r3, #48	; 0x30
 8014ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014c9c <_vfiprintf_r+0x24c>
 8014adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ae0:	f04f 0901 	mov.w	r9, #1
 8014ae4:	4623      	mov	r3, r4
 8014ae6:	469a      	mov	sl, r3
 8014ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014aec:	b10a      	cbz	r2, 8014af2 <_vfiprintf_r+0xa2>
 8014aee:	2a25      	cmp	r2, #37	; 0x25
 8014af0:	d1f9      	bne.n	8014ae6 <_vfiprintf_r+0x96>
 8014af2:	ebba 0b04 	subs.w	fp, sl, r4
 8014af6:	d00b      	beq.n	8014b10 <_vfiprintf_r+0xc0>
 8014af8:	465b      	mov	r3, fp
 8014afa:	4622      	mov	r2, r4
 8014afc:	4629      	mov	r1, r5
 8014afe:	4630      	mov	r0, r6
 8014b00:	f7ff ff93 	bl	8014a2a <__sfputs_r>
 8014b04:	3001      	adds	r0, #1
 8014b06:	f000 80aa 	beq.w	8014c5e <_vfiprintf_r+0x20e>
 8014b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b0c:	445a      	add	r2, fp
 8014b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8014b10:	f89a 3000 	ldrb.w	r3, [sl]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	f000 80a2 	beq.w	8014c5e <_vfiprintf_r+0x20e>
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b24:	f10a 0a01 	add.w	sl, sl, #1
 8014b28:	9304      	str	r3, [sp, #16]
 8014b2a:	9307      	str	r3, [sp, #28]
 8014b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b30:	931a      	str	r3, [sp, #104]	; 0x68
 8014b32:	4654      	mov	r4, sl
 8014b34:	2205      	movs	r2, #5
 8014b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b3a:	4858      	ldr	r0, [pc, #352]	; (8014c9c <_vfiprintf_r+0x24c>)
 8014b3c:	f7eb fbe8 	bl	8000310 <memchr>
 8014b40:	9a04      	ldr	r2, [sp, #16]
 8014b42:	b9d8      	cbnz	r0, 8014b7c <_vfiprintf_r+0x12c>
 8014b44:	06d1      	lsls	r1, r2, #27
 8014b46:	bf44      	itt	mi
 8014b48:	2320      	movmi	r3, #32
 8014b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b4e:	0713      	lsls	r3, r2, #28
 8014b50:	bf44      	itt	mi
 8014b52:	232b      	movmi	r3, #43	; 0x2b
 8014b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b58:	f89a 3000 	ldrb.w	r3, [sl]
 8014b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b5e:	d015      	beq.n	8014b8c <_vfiprintf_r+0x13c>
 8014b60:	9a07      	ldr	r2, [sp, #28]
 8014b62:	4654      	mov	r4, sl
 8014b64:	2000      	movs	r0, #0
 8014b66:	f04f 0c0a 	mov.w	ip, #10
 8014b6a:	4621      	mov	r1, r4
 8014b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b70:	3b30      	subs	r3, #48	; 0x30
 8014b72:	2b09      	cmp	r3, #9
 8014b74:	d94e      	bls.n	8014c14 <_vfiprintf_r+0x1c4>
 8014b76:	b1b0      	cbz	r0, 8014ba6 <_vfiprintf_r+0x156>
 8014b78:	9207      	str	r2, [sp, #28]
 8014b7a:	e014      	b.n	8014ba6 <_vfiprintf_r+0x156>
 8014b7c:	eba0 0308 	sub.w	r3, r0, r8
 8014b80:	fa09 f303 	lsl.w	r3, r9, r3
 8014b84:	4313      	orrs	r3, r2
 8014b86:	9304      	str	r3, [sp, #16]
 8014b88:	46a2      	mov	sl, r4
 8014b8a:	e7d2      	b.n	8014b32 <_vfiprintf_r+0xe2>
 8014b8c:	9b03      	ldr	r3, [sp, #12]
 8014b8e:	1d19      	adds	r1, r3, #4
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	9103      	str	r1, [sp, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	bfbb      	ittet	lt
 8014b98:	425b      	neglt	r3, r3
 8014b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8014b9e:	9307      	strge	r3, [sp, #28]
 8014ba0:	9307      	strlt	r3, [sp, #28]
 8014ba2:	bfb8      	it	lt
 8014ba4:	9204      	strlt	r2, [sp, #16]
 8014ba6:	7823      	ldrb	r3, [r4, #0]
 8014ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8014baa:	d10c      	bne.n	8014bc6 <_vfiprintf_r+0x176>
 8014bac:	7863      	ldrb	r3, [r4, #1]
 8014bae:	2b2a      	cmp	r3, #42	; 0x2a
 8014bb0:	d135      	bne.n	8014c1e <_vfiprintf_r+0x1ce>
 8014bb2:	9b03      	ldr	r3, [sp, #12]
 8014bb4:	1d1a      	adds	r2, r3, #4
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	9203      	str	r2, [sp, #12]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	bfb8      	it	lt
 8014bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bc2:	3402      	adds	r4, #2
 8014bc4:	9305      	str	r3, [sp, #20]
 8014bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014cac <_vfiprintf_r+0x25c>
 8014bca:	7821      	ldrb	r1, [r4, #0]
 8014bcc:	2203      	movs	r2, #3
 8014bce:	4650      	mov	r0, sl
 8014bd0:	f7eb fb9e 	bl	8000310 <memchr>
 8014bd4:	b140      	cbz	r0, 8014be8 <_vfiprintf_r+0x198>
 8014bd6:	2340      	movs	r3, #64	; 0x40
 8014bd8:	eba0 000a 	sub.w	r0, r0, sl
 8014bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8014be0:	9b04      	ldr	r3, [sp, #16]
 8014be2:	4303      	orrs	r3, r0
 8014be4:	3401      	adds	r4, #1
 8014be6:	9304      	str	r3, [sp, #16]
 8014be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bec:	482c      	ldr	r0, [pc, #176]	; (8014ca0 <_vfiprintf_r+0x250>)
 8014bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bf2:	2206      	movs	r2, #6
 8014bf4:	f7eb fb8c 	bl	8000310 <memchr>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d03f      	beq.n	8014c7c <_vfiprintf_r+0x22c>
 8014bfc:	4b29      	ldr	r3, [pc, #164]	; (8014ca4 <_vfiprintf_r+0x254>)
 8014bfe:	bb1b      	cbnz	r3, 8014c48 <_vfiprintf_r+0x1f8>
 8014c00:	9b03      	ldr	r3, [sp, #12]
 8014c02:	3307      	adds	r3, #7
 8014c04:	f023 0307 	bic.w	r3, r3, #7
 8014c08:	3308      	adds	r3, #8
 8014c0a:	9303      	str	r3, [sp, #12]
 8014c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c0e:	443b      	add	r3, r7
 8014c10:	9309      	str	r3, [sp, #36]	; 0x24
 8014c12:	e767      	b.n	8014ae4 <_vfiprintf_r+0x94>
 8014c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c18:	460c      	mov	r4, r1
 8014c1a:	2001      	movs	r0, #1
 8014c1c:	e7a5      	b.n	8014b6a <_vfiprintf_r+0x11a>
 8014c1e:	2300      	movs	r3, #0
 8014c20:	3401      	adds	r4, #1
 8014c22:	9305      	str	r3, [sp, #20]
 8014c24:	4619      	mov	r1, r3
 8014c26:	f04f 0c0a 	mov.w	ip, #10
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c30:	3a30      	subs	r2, #48	; 0x30
 8014c32:	2a09      	cmp	r2, #9
 8014c34:	d903      	bls.n	8014c3e <_vfiprintf_r+0x1ee>
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d0c5      	beq.n	8014bc6 <_vfiprintf_r+0x176>
 8014c3a:	9105      	str	r1, [sp, #20]
 8014c3c:	e7c3      	b.n	8014bc6 <_vfiprintf_r+0x176>
 8014c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c42:	4604      	mov	r4, r0
 8014c44:	2301      	movs	r3, #1
 8014c46:	e7f0      	b.n	8014c2a <_vfiprintf_r+0x1da>
 8014c48:	ab03      	add	r3, sp, #12
 8014c4a:	9300      	str	r3, [sp, #0]
 8014c4c:	462a      	mov	r2, r5
 8014c4e:	4b16      	ldr	r3, [pc, #88]	; (8014ca8 <_vfiprintf_r+0x258>)
 8014c50:	a904      	add	r1, sp, #16
 8014c52:	4630      	mov	r0, r6
 8014c54:	f000 f8bc 	bl	8014dd0 <_printf_float>
 8014c58:	4607      	mov	r7, r0
 8014c5a:	1c78      	adds	r0, r7, #1
 8014c5c:	d1d6      	bne.n	8014c0c <_vfiprintf_r+0x1bc>
 8014c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c60:	07d9      	lsls	r1, r3, #31
 8014c62:	d405      	bmi.n	8014c70 <_vfiprintf_r+0x220>
 8014c64:	89ab      	ldrh	r3, [r5, #12]
 8014c66:	059a      	lsls	r2, r3, #22
 8014c68:	d402      	bmi.n	8014c70 <_vfiprintf_r+0x220>
 8014c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c6c:	f003 f9ce 	bl	801800c <__retarget_lock_release_recursive>
 8014c70:	89ab      	ldrh	r3, [r5, #12]
 8014c72:	065b      	lsls	r3, r3, #25
 8014c74:	f53f af12 	bmi.w	8014a9c <_vfiprintf_r+0x4c>
 8014c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c7a:	e711      	b.n	8014aa0 <_vfiprintf_r+0x50>
 8014c7c:	ab03      	add	r3, sp, #12
 8014c7e:	9300      	str	r3, [sp, #0]
 8014c80:	462a      	mov	r2, r5
 8014c82:	4b09      	ldr	r3, [pc, #36]	; (8014ca8 <_vfiprintf_r+0x258>)
 8014c84:	a904      	add	r1, sp, #16
 8014c86:	4630      	mov	r0, r6
 8014c88:	f000 fb2e 	bl	80152e8 <_printf_i>
 8014c8c:	e7e4      	b.n	8014c58 <_vfiprintf_r+0x208>
 8014c8e:	bf00      	nop
 8014c90:	08021cd8 	.word	0x08021cd8
 8014c94:	08021cf8 	.word	0x08021cf8
 8014c98:	08021cb8 	.word	0x08021cb8
 8014c9c:	08021a84 	.word	0x08021a84
 8014ca0:	08021a8e 	.word	0x08021a8e
 8014ca4:	08014dd1 	.word	0x08014dd1
 8014ca8:	08014a2b 	.word	0x08014a2b
 8014cac:	08021a8a 	.word	0x08021a8a

08014cb0 <__cvt>:
 8014cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cb2:	ed2d 8b02 	vpush	{d8}
 8014cb6:	eeb0 8b40 	vmov.f64	d8, d0
 8014cba:	b085      	sub	sp, #20
 8014cbc:	4617      	mov	r7, r2
 8014cbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014cc0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014cc2:	ee18 2a90 	vmov	r2, s17
 8014cc6:	f025 0520 	bic.w	r5, r5, #32
 8014cca:	2a00      	cmp	r2, #0
 8014ccc:	bfb6      	itet	lt
 8014cce:	222d      	movlt	r2, #45	; 0x2d
 8014cd0:	2200      	movge	r2, #0
 8014cd2:	eeb1 8b40 	vneglt.f64	d8, d0
 8014cd6:	2d46      	cmp	r5, #70	; 0x46
 8014cd8:	460c      	mov	r4, r1
 8014cda:	701a      	strb	r2, [r3, #0]
 8014cdc:	d004      	beq.n	8014ce8 <__cvt+0x38>
 8014cde:	2d45      	cmp	r5, #69	; 0x45
 8014ce0:	d100      	bne.n	8014ce4 <__cvt+0x34>
 8014ce2:	3401      	adds	r4, #1
 8014ce4:	2102      	movs	r1, #2
 8014ce6:	e000      	b.n	8014cea <__cvt+0x3a>
 8014ce8:	2103      	movs	r1, #3
 8014cea:	ab03      	add	r3, sp, #12
 8014cec:	9301      	str	r3, [sp, #4]
 8014cee:	ab02      	add	r3, sp, #8
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	4622      	mov	r2, r4
 8014cf4:	4633      	mov	r3, r6
 8014cf6:	eeb0 0b48 	vmov.f64	d0, d8
 8014cfa:	f001 fed9 	bl	8016ab0 <_dtoa_r>
 8014cfe:	2d47      	cmp	r5, #71	; 0x47
 8014d00:	d109      	bne.n	8014d16 <__cvt+0x66>
 8014d02:	07fb      	lsls	r3, r7, #31
 8014d04:	d407      	bmi.n	8014d16 <__cvt+0x66>
 8014d06:	9b03      	ldr	r3, [sp, #12]
 8014d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d0a:	1a1b      	subs	r3, r3, r0
 8014d0c:	6013      	str	r3, [r2, #0]
 8014d0e:	b005      	add	sp, #20
 8014d10:	ecbd 8b02 	vpop	{d8}
 8014d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d16:	2d46      	cmp	r5, #70	; 0x46
 8014d18:	eb00 0204 	add.w	r2, r0, r4
 8014d1c:	d10c      	bne.n	8014d38 <__cvt+0x88>
 8014d1e:	7803      	ldrb	r3, [r0, #0]
 8014d20:	2b30      	cmp	r3, #48	; 0x30
 8014d22:	d107      	bne.n	8014d34 <__cvt+0x84>
 8014d24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2c:	bf1c      	itt	ne
 8014d2e:	f1c4 0401 	rsbne	r4, r4, #1
 8014d32:	6034      	strne	r4, [r6, #0]
 8014d34:	6833      	ldr	r3, [r6, #0]
 8014d36:	441a      	add	r2, r3
 8014d38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d40:	bf08      	it	eq
 8014d42:	9203      	streq	r2, [sp, #12]
 8014d44:	2130      	movs	r1, #48	; 0x30
 8014d46:	9b03      	ldr	r3, [sp, #12]
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d2dc      	bcs.n	8014d06 <__cvt+0x56>
 8014d4c:	1c5c      	adds	r4, r3, #1
 8014d4e:	9403      	str	r4, [sp, #12]
 8014d50:	7019      	strb	r1, [r3, #0]
 8014d52:	e7f8      	b.n	8014d46 <__cvt+0x96>

08014d54 <__exponent>:
 8014d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d56:	4603      	mov	r3, r0
 8014d58:	2900      	cmp	r1, #0
 8014d5a:	bfb8      	it	lt
 8014d5c:	4249      	neglt	r1, r1
 8014d5e:	f803 2b02 	strb.w	r2, [r3], #2
 8014d62:	bfb4      	ite	lt
 8014d64:	222d      	movlt	r2, #45	; 0x2d
 8014d66:	222b      	movge	r2, #43	; 0x2b
 8014d68:	2909      	cmp	r1, #9
 8014d6a:	7042      	strb	r2, [r0, #1]
 8014d6c:	dd2a      	ble.n	8014dc4 <__exponent+0x70>
 8014d6e:	f10d 0407 	add.w	r4, sp, #7
 8014d72:	46a4      	mov	ip, r4
 8014d74:	270a      	movs	r7, #10
 8014d76:	46a6      	mov	lr, r4
 8014d78:	460a      	mov	r2, r1
 8014d7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8014d7e:	fb07 1516 	mls	r5, r7, r6, r1
 8014d82:	3530      	adds	r5, #48	; 0x30
 8014d84:	2a63      	cmp	r2, #99	; 0x63
 8014d86:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014d8e:	4631      	mov	r1, r6
 8014d90:	dcf1      	bgt.n	8014d76 <__exponent+0x22>
 8014d92:	3130      	adds	r1, #48	; 0x30
 8014d94:	f1ae 0502 	sub.w	r5, lr, #2
 8014d98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014d9c:	1c44      	adds	r4, r0, #1
 8014d9e:	4629      	mov	r1, r5
 8014da0:	4561      	cmp	r1, ip
 8014da2:	d30a      	bcc.n	8014dba <__exponent+0x66>
 8014da4:	f10d 0209 	add.w	r2, sp, #9
 8014da8:	eba2 020e 	sub.w	r2, r2, lr
 8014dac:	4565      	cmp	r5, ip
 8014dae:	bf88      	it	hi
 8014db0:	2200      	movhi	r2, #0
 8014db2:	4413      	add	r3, r2
 8014db4:	1a18      	subs	r0, r3, r0
 8014db6:	b003      	add	sp, #12
 8014db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dbe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014dc2:	e7ed      	b.n	8014da0 <__exponent+0x4c>
 8014dc4:	2330      	movs	r3, #48	; 0x30
 8014dc6:	3130      	adds	r1, #48	; 0x30
 8014dc8:	7083      	strb	r3, [r0, #2]
 8014dca:	70c1      	strb	r1, [r0, #3]
 8014dcc:	1d03      	adds	r3, r0, #4
 8014dce:	e7f1      	b.n	8014db4 <__exponent+0x60>

08014dd0 <_printf_float>:
 8014dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd4:	b08b      	sub	sp, #44	; 0x2c
 8014dd6:	460c      	mov	r4, r1
 8014dd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014ddc:	4616      	mov	r6, r2
 8014dde:	461f      	mov	r7, r3
 8014de0:	4605      	mov	r5, r0
 8014de2:	f003 f90d 	bl	8018000 <_localeconv_r>
 8014de6:	f8d0 b000 	ldr.w	fp, [r0]
 8014dea:	4658      	mov	r0, fp
 8014dec:	f7eb fa82 	bl	80002f4 <strlen>
 8014df0:	2300      	movs	r3, #0
 8014df2:	9308      	str	r3, [sp, #32]
 8014df4:	f8d8 3000 	ldr.w	r3, [r8]
 8014df8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014dfc:	6822      	ldr	r2, [r4, #0]
 8014dfe:	3307      	adds	r3, #7
 8014e00:	f023 0307 	bic.w	r3, r3, #7
 8014e04:	f103 0108 	add.w	r1, r3, #8
 8014e08:	f8c8 1000 	str.w	r1, [r8]
 8014e0c:	4682      	mov	sl, r0
 8014e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014e12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8014e16:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8015078 <_printf_float+0x2a8>
 8014e1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014e1e:	eeb0 6bc0 	vabs.f64	d6, d0
 8014e22:	eeb4 6b47 	vcmp.f64	d6, d7
 8014e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2a:	dd24      	ble.n	8014e76 <_printf_float+0xa6>
 8014e2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e34:	d502      	bpl.n	8014e3c <_printf_float+0x6c>
 8014e36:	232d      	movs	r3, #45	; 0x2d
 8014e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e3c:	4b90      	ldr	r3, [pc, #576]	; (8015080 <_printf_float+0x2b0>)
 8014e3e:	4891      	ldr	r0, [pc, #580]	; (8015084 <_printf_float+0x2b4>)
 8014e40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014e44:	bf94      	ite	ls
 8014e46:	4698      	movls	r8, r3
 8014e48:	4680      	movhi	r8, r0
 8014e4a:	2303      	movs	r3, #3
 8014e4c:	6123      	str	r3, [r4, #16]
 8014e4e:	f022 0204 	bic.w	r2, r2, #4
 8014e52:	2300      	movs	r3, #0
 8014e54:	6022      	str	r2, [r4, #0]
 8014e56:	9304      	str	r3, [sp, #16]
 8014e58:	9700      	str	r7, [sp, #0]
 8014e5a:	4633      	mov	r3, r6
 8014e5c:	aa09      	add	r2, sp, #36	; 0x24
 8014e5e:	4621      	mov	r1, r4
 8014e60:	4628      	mov	r0, r5
 8014e62:	f000 f9d3 	bl	801520c <_printf_common>
 8014e66:	3001      	adds	r0, #1
 8014e68:	f040 808a 	bne.w	8014f80 <_printf_float+0x1b0>
 8014e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e70:	b00b      	add	sp, #44	; 0x2c
 8014e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e76:	eeb4 0b40 	vcmp.f64	d0, d0
 8014e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e7e:	d709      	bvc.n	8014e94 <_printf_float+0xc4>
 8014e80:	ee10 3a90 	vmov	r3, s1
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	bfbc      	itt	lt
 8014e88:	232d      	movlt	r3, #45	; 0x2d
 8014e8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014e8e:	487e      	ldr	r0, [pc, #504]	; (8015088 <_printf_float+0x2b8>)
 8014e90:	4b7e      	ldr	r3, [pc, #504]	; (801508c <_printf_float+0x2bc>)
 8014e92:	e7d5      	b.n	8014e40 <_printf_float+0x70>
 8014e94:	6863      	ldr	r3, [r4, #4]
 8014e96:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014e9a:	9104      	str	r1, [sp, #16]
 8014e9c:	1c59      	adds	r1, r3, #1
 8014e9e:	d13c      	bne.n	8014f1a <_printf_float+0x14a>
 8014ea0:	2306      	movs	r3, #6
 8014ea2:	6063      	str	r3, [r4, #4]
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	9303      	str	r3, [sp, #12]
 8014ea8:	ab08      	add	r3, sp, #32
 8014eaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014eae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014eb2:	ab07      	add	r3, sp, #28
 8014eb4:	6861      	ldr	r1, [r4, #4]
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	6022      	str	r2, [r4, #0]
 8014eba:	f10d 031b 	add.w	r3, sp, #27
 8014ebe:	4628      	mov	r0, r5
 8014ec0:	f7ff fef6 	bl	8014cb0 <__cvt>
 8014ec4:	9b04      	ldr	r3, [sp, #16]
 8014ec6:	9907      	ldr	r1, [sp, #28]
 8014ec8:	2b47      	cmp	r3, #71	; 0x47
 8014eca:	4680      	mov	r8, r0
 8014ecc:	d108      	bne.n	8014ee0 <_printf_float+0x110>
 8014ece:	1cc8      	adds	r0, r1, #3
 8014ed0:	db02      	blt.n	8014ed8 <_printf_float+0x108>
 8014ed2:	6863      	ldr	r3, [r4, #4]
 8014ed4:	4299      	cmp	r1, r3
 8014ed6:	dd41      	ble.n	8014f5c <_printf_float+0x18c>
 8014ed8:	f1a9 0902 	sub.w	r9, r9, #2
 8014edc:	fa5f f989 	uxtb.w	r9, r9
 8014ee0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014ee4:	d820      	bhi.n	8014f28 <_printf_float+0x158>
 8014ee6:	3901      	subs	r1, #1
 8014ee8:	464a      	mov	r2, r9
 8014eea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014eee:	9107      	str	r1, [sp, #28]
 8014ef0:	f7ff ff30 	bl	8014d54 <__exponent>
 8014ef4:	9a08      	ldr	r2, [sp, #32]
 8014ef6:	9004      	str	r0, [sp, #16]
 8014ef8:	1813      	adds	r3, r2, r0
 8014efa:	2a01      	cmp	r2, #1
 8014efc:	6123      	str	r3, [r4, #16]
 8014efe:	dc02      	bgt.n	8014f06 <_printf_float+0x136>
 8014f00:	6822      	ldr	r2, [r4, #0]
 8014f02:	07d2      	lsls	r2, r2, #31
 8014f04:	d501      	bpl.n	8014f0a <_printf_float+0x13a>
 8014f06:	3301      	adds	r3, #1
 8014f08:	6123      	str	r3, [r4, #16]
 8014f0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d0a2      	beq.n	8014e58 <_printf_float+0x88>
 8014f12:	232d      	movs	r3, #45	; 0x2d
 8014f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f18:	e79e      	b.n	8014e58 <_printf_float+0x88>
 8014f1a:	9904      	ldr	r1, [sp, #16]
 8014f1c:	2947      	cmp	r1, #71	; 0x47
 8014f1e:	d1c1      	bne.n	8014ea4 <_printf_float+0xd4>
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d1bf      	bne.n	8014ea4 <_printf_float+0xd4>
 8014f24:	2301      	movs	r3, #1
 8014f26:	e7bc      	b.n	8014ea2 <_printf_float+0xd2>
 8014f28:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014f2c:	d118      	bne.n	8014f60 <_printf_float+0x190>
 8014f2e:	2900      	cmp	r1, #0
 8014f30:	6863      	ldr	r3, [r4, #4]
 8014f32:	dd0b      	ble.n	8014f4c <_printf_float+0x17c>
 8014f34:	6121      	str	r1, [r4, #16]
 8014f36:	b913      	cbnz	r3, 8014f3e <_printf_float+0x16e>
 8014f38:	6822      	ldr	r2, [r4, #0]
 8014f3a:	07d0      	lsls	r0, r2, #31
 8014f3c:	d502      	bpl.n	8014f44 <_printf_float+0x174>
 8014f3e:	3301      	adds	r3, #1
 8014f40:	440b      	add	r3, r1
 8014f42:	6123      	str	r3, [r4, #16]
 8014f44:	2300      	movs	r3, #0
 8014f46:	65a1      	str	r1, [r4, #88]	; 0x58
 8014f48:	9304      	str	r3, [sp, #16]
 8014f4a:	e7de      	b.n	8014f0a <_printf_float+0x13a>
 8014f4c:	b913      	cbnz	r3, 8014f54 <_printf_float+0x184>
 8014f4e:	6822      	ldr	r2, [r4, #0]
 8014f50:	07d2      	lsls	r2, r2, #31
 8014f52:	d501      	bpl.n	8014f58 <_printf_float+0x188>
 8014f54:	3302      	adds	r3, #2
 8014f56:	e7f4      	b.n	8014f42 <_printf_float+0x172>
 8014f58:	2301      	movs	r3, #1
 8014f5a:	e7f2      	b.n	8014f42 <_printf_float+0x172>
 8014f5c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014f60:	9b08      	ldr	r3, [sp, #32]
 8014f62:	4299      	cmp	r1, r3
 8014f64:	db05      	blt.n	8014f72 <_printf_float+0x1a2>
 8014f66:	6823      	ldr	r3, [r4, #0]
 8014f68:	6121      	str	r1, [r4, #16]
 8014f6a:	07d8      	lsls	r0, r3, #31
 8014f6c:	d5ea      	bpl.n	8014f44 <_printf_float+0x174>
 8014f6e:	1c4b      	adds	r3, r1, #1
 8014f70:	e7e7      	b.n	8014f42 <_printf_float+0x172>
 8014f72:	2900      	cmp	r1, #0
 8014f74:	bfd4      	ite	le
 8014f76:	f1c1 0202 	rsble	r2, r1, #2
 8014f7a:	2201      	movgt	r2, #1
 8014f7c:	4413      	add	r3, r2
 8014f7e:	e7e0      	b.n	8014f42 <_printf_float+0x172>
 8014f80:	6823      	ldr	r3, [r4, #0]
 8014f82:	055a      	lsls	r2, r3, #21
 8014f84:	d407      	bmi.n	8014f96 <_printf_float+0x1c6>
 8014f86:	6923      	ldr	r3, [r4, #16]
 8014f88:	4642      	mov	r2, r8
 8014f8a:	4631      	mov	r1, r6
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	47b8      	blx	r7
 8014f90:	3001      	adds	r0, #1
 8014f92:	d12a      	bne.n	8014fea <_printf_float+0x21a>
 8014f94:	e76a      	b.n	8014e6c <_printf_float+0x9c>
 8014f96:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014f9a:	f240 80e2 	bls.w	8015162 <_printf_float+0x392>
 8014f9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014fa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014faa:	d133      	bne.n	8015014 <_printf_float+0x244>
 8014fac:	4a38      	ldr	r2, [pc, #224]	; (8015090 <_printf_float+0x2c0>)
 8014fae:	2301      	movs	r3, #1
 8014fb0:	4631      	mov	r1, r6
 8014fb2:	4628      	mov	r0, r5
 8014fb4:	47b8      	blx	r7
 8014fb6:	3001      	adds	r0, #1
 8014fb8:	f43f af58 	beq.w	8014e6c <_printf_float+0x9c>
 8014fbc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	db02      	blt.n	8014fca <_printf_float+0x1fa>
 8014fc4:	6823      	ldr	r3, [r4, #0]
 8014fc6:	07d8      	lsls	r0, r3, #31
 8014fc8:	d50f      	bpl.n	8014fea <_printf_float+0x21a>
 8014fca:	4653      	mov	r3, sl
 8014fcc:	465a      	mov	r2, fp
 8014fce:	4631      	mov	r1, r6
 8014fd0:	4628      	mov	r0, r5
 8014fd2:	47b8      	blx	r7
 8014fd4:	3001      	adds	r0, #1
 8014fd6:	f43f af49 	beq.w	8014e6c <_printf_float+0x9c>
 8014fda:	f04f 0800 	mov.w	r8, #0
 8014fde:	f104 091a 	add.w	r9, r4, #26
 8014fe2:	9b08      	ldr	r3, [sp, #32]
 8014fe4:	3b01      	subs	r3, #1
 8014fe6:	4543      	cmp	r3, r8
 8014fe8:	dc09      	bgt.n	8014ffe <_printf_float+0x22e>
 8014fea:	6823      	ldr	r3, [r4, #0]
 8014fec:	079b      	lsls	r3, r3, #30
 8014fee:	f100 8108 	bmi.w	8015202 <_printf_float+0x432>
 8014ff2:	68e0      	ldr	r0, [r4, #12]
 8014ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ff6:	4298      	cmp	r0, r3
 8014ff8:	bfb8      	it	lt
 8014ffa:	4618      	movlt	r0, r3
 8014ffc:	e738      	b.n	8014e70 <_printf_float+0xa0>
 8014ffe:	2301      	movs	r3, #1
 8015000:	464a      	mov	r2, r9
 8015002:	4631      	mov	r1, r6
 8015004:	4628      	mov	r0, r5
 8015006:	47b8      	blx	r7
 8015008:	3001      	adds	r0, #1
 801500a:	f43f af2f 	beq.w	8014e6c <_printf_float+0x9c>
 801500e:	f108 0801 	add.w	r8, r8, #1
 8015012:	e7e6      	b.n	8014fe2 <_printf_float+0x212>
 8015014:	9b07      	ldr	r3, [sp, #28]
 8015016:	2b00      	cmp	r3, #0
 8015018:	dc3c      	bgt.n	8015094 <_printf_float+0x2c4>
 801501a:	4a1d      	ldr	r2, [pc, #116]	; (8015090 <_printf_float+0x2c0>)
 801501c:	2301      	movs	r3, #1
 801501e:	4631      	mov	r1, r6
 8015020:	4628      	mov	r0, r5
 8015022:	47b8      	blx	r7
 8015024:	3001      	adds	r0, #1
 8015026:	f43f af21 	beq.w	8014e6c <_printf_float+0x9c>
 801502a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801502e:	4313      	orrs	r3, r2
 8015030:	d102      	bne.n	8015038 <_printf_float+0x268>
 8015032:	6823      	ldr	r3, [r4, #0]
 8015034:	07d9      	lsls	r1, r3, #31
 8015036:	d5d8      	bpl.n	8014fea <_printf_float+0x21a>
 8015038:	4653      	mov	r3, sl
 801503a:	465a      	mov	r2, fp
 801503c:	4631      	mov	r1, r6
 801503e:	4628      	mov	r0, r5
 8015040:	47b8      	blx	r7
 8015042:	3001      	adds	r0, #1
 8015044:	f43f af12 	beq.w	8014e6c <_printf_float+0x9c>
 8015048:	f04f 0900 	mov.w	r9, #0
 801504c:	f104 0a1a 	add.w	sl, r4, #26
 8015050:	9b07      	ldr	r3, [sp, #28]
 8015052:	425b      	negs	r3, r3
 8015054:	454b      	cmp	r3, r9
 8015056:	dc01      	bgt.n	801505c <_printf_float+0x28c>
 8015058:	9b08      	ldr	r3, [sp, #32]
 801505a:	e795      	b.n	8014f88 <_printf_float+0x1b8>
 801505c:	2301      	movs	r3, #1
 801505e:	4652      	mov	r2, sl
 8015060:	4631      	mov	r1, r6
 8015062:	4628      	mov	r0, r5
 8015064:	47b8      	blx	r7
 8015066:	3001      	adds	r0, #1
 8015068:	f43f af00 	beq.w	8014e6c <_printf_float+0x9c>
 801506c:	f109 0901 	add.w	r9, r9, #1
 8015070:	e7ee      	b.n	8015050 <_printf_float+0x280>
 8015072:	bf00      	nop
 8015074:	f3af 8000 	nop.w
 8015078:	ffffffff 	.word	0xffffffff
 801507c:	7fefffff 	.word	0x7fefffff
 8015080:	08021a95 	.word	0x08021a95
 8015084:	08021a99 	.word	0x08021a99
 8015088:	08021aa1 	.word	0x08021aa1
 801508c:	08021a9d 	.word	0x08021a9d
 8015090:	08021aa5 	.word	0x08021aa5
 8015094:	9a08      	ldr	r2, [sp, #32]
 8015096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015098:	429a      	cmp	r2, r3
 801509a:	bfa8      	it	ge
 801509c:	461a      	movge	r2, r3
 801509e:	2a00      	cmp	r2, #0
 80150a0:	4691      	mov	r9, r2
 80150a2:	dc38      	bgt.n	8015116 <_printf_float+0x346>
 80150a4:	2300      	movs	r3, #0
 80150a6:	9305      	str	r3, [sp, #20]
 80150a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ac:	f104 021a 	add.w	r2, r4, #26
 80150b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80150b2:	9905      	ldr	r1, [sp, #20]
 80150b4:	9304      	str	r3, [sp, #16]
 80150b6:	eba3 0309 	sub.w	r3, r3, r9
 80150ba:	428b      	cmp	r3, r1
 80150bc:	dc33      	bgt.n	8015126 <_printf_float+0x356>
 80150be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	db3c      	blt.n	8015140 <_printf_float+0x370>
 80150c6:	6823      	ldr	r3, [r4, #0]
 80150c8:	07da      	lsls	r2, r3, #31
 80150ca:	d439      	bmi.n	8015140 <_printf_float+0x370>
 80150cc:	9a08      	ldr	r2, [sp, #32]
 80150ce:	9b04      	ldr	r3, [sp, #16]
 80150d0:	9907      	ldr	r1, [sp, #28]
 80150d2:	1ad3      	subs	r3, r2, r3
 80150d4:	eba2 0901 	sub.w	r9, r2, r1
 80150d8:	4599      	cmp	r9, r3
 80150da:	bfa8      	it	ge
 80150dc:	4699      	movge	r9, r3
 80150de:	f1b9 0f00 	cmp.w	r9, #0
 80150e2:	dc35      	bgt.n	8015150 <_printf_float+0x380>
 80150e4:	f04f 0800 	mov.w	r8, #0
 80150e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ec:	f104 0a1a 	add.w	sl, r4, #26
 80150f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80150f4:	1a9b      	subs	r3, r3, r2
 80150f6:	eba3 0309 	sub.w	r3, r3, r9
 80150fa:	4543      	cmp	r3, r8
 80150fc:	f77f af75 	ble.w	8014fea <_printf_float+0x21a>
 8015100:	2301      	movs	r3, #1
 8015102:	4652      	mov	r2, sl
 8015104:	4631      	mov	r1, r6
 8015106:	4628      	mov	r0, r5
 8015108:	47b8      	blx	r7
 801510a:	3001      	adds	r0, #1
 801510c:	f43f aeae 	beq.w	8014e6c <_printf_float+0x9c>
 8015110:	f108 0801 	add.w	r8, r8, #1
 8015114:	e7ec      	b.n	80150f0 <_printf_float+0x320>
 8015116:	4613      	mov	r3, r2
 8015118:	4631      	mov	r1, r6
 801511a:	4642      	mov	r2, r8
 801511c:	4628      	mov	r0, r5
 801511e:	47b8      	blx	r7
 8015120:	3001      	adds	r0, #1
 8015122:	d1bf      	bne.n	80150a4 <_printf_float+0x2d4>
 8015124:	e6a2      	b.n	8014e6c <_printf_float+0x9c>
 8015126:	2301      	movs	r3, #1
 8015128:	4631      	mov	r1, r6
 801512a:	4628      	mov	r0, r5
 801512c:	9204      	str	r2, [sp, #16]
 801512e:	47b8      	blx	r7
 8015130:	3001      	adds	r0, #1
 8015132:	f43f ae9b 	beq.w	8014e6c <_printf_float+0x9c>
 8015136:	9b05      	ldr	r3, [sp, #20]
 8015138:	9a04      	ldr	r2, [sp, #16]
 801513a:	3301      	adds	r3, #1
 801513c:	9305      	str	r3, [sp, #20]
 801513e:	e7b7      	b.n	80150b0 <_printf_float+0x2e0>
 8015140:	4653      	mov	r3, sl
 8015142:	465a      	mov	r2, fp
 8015144:	4631      	mov	r1, r6
 8015146:	4628      	mov	r0, r5
 8015148:	47b8      	blx	r7
 801514a:	3001      	adds	r0, #1
 801514c:	d1be      	bne.n	80150cc <_printf_float+0x2fc>
 801514e:	e68d      	b.n	8014e6c <_printf_float+0x9c>
 8015150:	9a04      	ldr	r2, [sp, #16]
 8015152:	464b      	mov	r3, r9
 8015154:	4442      	add	r2, r8
 8015156:	4631      	mov	r1, r6
 8015158:	4628      	mov	r0, r5
 801515a:	47b8      	blx	r7
 801515c:	3001      	adds	r0, #1
 801515e:	d1c1      	bne.n	80150e4 <_printf_float+0x314>
 8015160:	e684      	b.n	8014e6c <_printf_float+0x9c>
 8015162:	9a08      	ldr	r2, [sp, #32]
 8015164:	2a01      	cmp	r2, #1
 8015166:	dc01      	bgt.n	801516c <_printf_float+0x39c>
 8015168:	07db      	lsls	r3, r3, #31
 801516a:	d537      	bpl.n	80151dc <_printf_float+0x40c>
 801516c:	2301      	movs	r3, #1
 801516e:	4642      	mov	r2, r8
 8015170:	4631      	mov	r1, r6
 8015172:	4628      	mov	r0, r5
 8015174:	47b8      	blx	r7
 8015176:	3001      	adds	r0, #1
 8015178:	f43f ae78 	beq.w	8014e6c <_printf_float+0x9c>
 801517c:	4653      	mov	r3, sl
 801517e:	465a      	mov	r2, fp
 8015180:	4631      	mov	r1, r6
 8015182:	4628      	mov	r0, r5
 8015184:	47b8      	blx	r7
 8015186:	3001      	adds	r0, #1
 8015188:	f43f ae70 	beq.w	8014e6c <_printf_float+0x9c>
 801518c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015190:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015198:	d01b      	beq.n	80151d2 <_printf_float+0x402>
 801519a:	9b08      	ldr	r3, [sp, #32]
 801519c:	f108 0201 	add.w	r2, r8, #1
 80151a0:	3b01      	subs	r3, #1
 80151a2:	4631      	mov	r1, r6
 80151a4:	4628      	mov	r0, r5
 80151a6:	47b8      	blx	r7
 80151a8:	3001      	adds	r0, #1
 80151aa:	d10e      	bne.n	80151ca <_printf_float+0x3fa>
 80151ac:	e65e      	b.n	8014e6c <_printf_float+0x9c>
 80151ae:	2301      	movs	r3, #1
 80151b0:	464a      	mov	r2, r9
 80151b2:	4631      	mov	r1, r6
 80151b4:	4628      	mov	r0, r5
 80151b6:	47b8      	blx	r7
 80151b8:	3001      	adds	r0, #1
 80151ba:	f43f ae57 	beq.w	8014e6c <_printf_float+0x9c>
 80151be:	f108 0801 	add.w	r8, r8, #1
 80151c2:	9b08      	ldr	r3, [sp, #32]
 80151c4:	3b01      	subs	r3, #1
 80151c6:	4543      	cmp	r3, r8
 80151c8:	dcf1      	bgt.n	80151ae <_printf_float+0x3de>
 80151ca:	9b04      	ldr	r3, [sp, #16]
 80151cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80151d0:	e6db      	b.n	8014f8a <_printf_float+0x1ba>
 80151d2:	f04f 0800 	mov.w	r8, #0
 80151d6:	f104 091a 	add.w	r9, r4, #26
 80151da:	e7f2      	b.n	80151c2 <_printf_float+0x3f2>
 80151dc:	2301      	movs	r3, #1
 80151de:	4642      	mov	r2, r8
 80151e0:	e7df      	b.n	80151a2 <_printf_float+0x3d2>
 80151e2:	2301      	movs	r3, #1
 80151e4:	464a      	mov	r2, r9
 80151e6:	4631      	mov	r1, r6
 80151e8:	4628      	mov	r0, r5
 80151ea:	47b8      	blx	r7
 80151ec:	3001      	adds	r0, #1
 80151ee:	f43f ae3d 	beq.w	8014e6c <_printf_float+0x9c>
 80151f2:	f108 0801 	add.w	r8, r8, #1
 80151f6:	68e3      	ldr	r3, [r4, #12]
 80151f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151fa:	1a5b      	subs	r3, r3, r1
 80151fc:	4543      	cmp	r3, r8
 80151fe:	dcf0      	bgt.n	80151e2 <_printf_float+0x412>
 8015200:	e6f7      	b.n	8014ff2 <_printf_float+0x222>
 8015202:	f04f 0800 	mov.w	r8, #0
 8015206:	f104 0919 	add.w	r9, r4, #25
 801520a:	e7f4      	b.n	80151f6 <_printf_float+0x426>

0801520c <_printf_common>:
 801520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015210:	4616      	mov	r6, r2
 8015212:	4699      	mov	r9, r3
 8015214:	688a      	ldr	r2, [r1, #8]
 8015216:	690b      	ldr	r3, [r1, #16]
 8015218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801521c:	4293      	cmp	r3, r2
 801521e:	bfb8      	it	lt
 8015220:	4613      	movlt	r3, r2
 8015222:	6033      	str	r3, [r6, #0]
 8015224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015228:	4607      	mov	r7, r0
 801522a:	460c      	mov	r4, r1
 801522c:	b10a      	cbz	r2, 8015232 <_printf_common+0x26>
 801522e:	3301      	adds	r3, #1
 8015230:	6033      	str	r3, [r6, #0]
 8015232:	6823      	ldr	r3, [r4, #0]
 8015234:	0699      	lsls	r1, r3, #26
 8015236:	bf42      	ittt	mi
 8015238:	6833      	ldrmi	r3, [r6, #0]
 801523a:	3302      	addmi	r3, #2
 801523c:	6033      	strmi	r3, [r6, #0]
 801523e:	6825      	ldr	r5, [r4, #0]
 8015240:	f015 0506 	ands.w	r5, r5, #6
 8015244:	d106      	bne.n	8015254 <_printf_common+0x48>
 8015246:	f104 0a19 	add.w	sl, r4, #25
 801524a:	68e3      	ldr	r3, [r4, #12]
 801524c:	6832      	ldr	r2, [r6, #0]
 801524e:	1a9b      	subs	r3, r3, r2
 8015250:	42ab      	cmp	r3, r5
 8015252:	dc26      	bgt.n	80152a2 <_printf_common+0x96>
 8015254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015258:	1e13      	subs	r3, r2, #0
 801525a:	6822      	ldr	r2, [r4, #0]
 801525c:	bf18      	it	ne
 801525e:	2301      	movne	r3, #1
 8015260:	0692      	lsls	r2, r2, #26
 8015262:	d42b      	bmi.n	80152bc <_printf_common+0xb0>
 8015264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015268:	4649      	mov	r1, r9
 801526a:	4638      	mov	r0, r7
 801526c:	47c0      	blx	r8
 801526e:	3001      	adds	r0, #1
 8015270:	d01e      	beq.n	80152b0 <_printf_common+0xa4>
 8015272:	6823      	ldr	r3, [r4, #0]
 8015274:	68e5      	ldr	r5, [r4, #12]
 8015276:	6832      	ldr	r2, [r6, #0]
 8015278:	f003 0306 	and.w	r3, r3, #6
 801527c:	2b04      	cmp	r3, #4
 801527e:	bf08      	it	eq
 8015280:	1aad      	subeq	r5, r5, r2
 8015282:	68a3      	ldr	r3, [r4, #8]
 8015284:	6922      	ldr	r2, [r4, #16]
 8015286:	bf0c      	ite	eq
 8015288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801528c:	2500      	movne	r5, #0
 801528e:	4293      	cmp	r3, r2
 8015290:	bfc4      	itt	gt
 8015292:	1a9b      	subgt	r3, r3, r2
 8015294:	18ed      	addgt	r5, r5, r3
 8015296:	2600      	movs	r6, #0
 8015298:	341a      	adds	r4, #26
 801529a:	42b5      	cmp	r5, r6
 801529c:	d11a      	bne.n	80152d4 <_printf_common+0xc8>
 801529e:	2000      	movs	r0, #0
 80152a0:	e008      	b.n	80152b4 <_printf_common+0xa8>
 80152a2:	2301      	movs	r3, #1
 80152a4:	4652      	mov	r2, sl
 80152a6:	4649      	mov	r1, r9
 80152a8:	4638      	mov	r0, r7
 80152aa:	47c0      	blx	r8
 80152ac:	3001      	adds	r0, #1
 80152ae:	d103      	bne.n	80152b8 <_printf_common+0xac>
 80152b0:	f04f 30ff 	mov.w	r0, #4294967295
 80152b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152b8:	3501      	adds	r5, #1
 80152ba:	e7c6      	b.n	801524a <_printf_common+0x3e>
 80152bc:	18e1      	adds	r1, r4, r3
 80152be:	1c5a      	adds	r2, r3, #1
 80152c0:	2030      	movs	r0, #48	; 0x30
 80152c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152c6:	4422      	add	r2, r4
 80152c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152d0:	3302      	adds	r3, #2
 80152d2:	e7c7      	b.n	8015264 <_printf_common+0x58>
 80152d4:	2301      	movs	r3, #1
 80152d6:	4622      	mov	r2, r4
 80152d8:	4649      	mov	r1, r9
 80152da:	4638      	mov	r0, r7
 80152dc:	47c0      	blx	r8
 80152de:	3001      	adds	r0, #1
 80152e0:	d0e6      	beq.n	80152b0 <_printf_common+0xa4>
 80152e2:	3601      	adds	r6, #1
 80152e4:	e7d9      	b.n	801529a <_printf_common+0x8e>
	...

080152e8 <_printf_i>:
 80152e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152ec:	460c      	mov	r4, r1
 80152ee:	4691      	mov	r9, r2
 80152f0:	7e27      	ldrb	r7, [r4, #24]
 80152f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80152f4:	2f78      	cmp	r7, #120	; 0x78
 80152f6:	4680      	mov	r8, r0
 80152f8:	469a      	mov	sl, r3
 80152fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80152fe:	d807      	bhi.n	8015310 <_printf_i+0x28>
 8015300:	2f62      	cmp	r7, #98	; 0x62
 8015302:	d80a      	bhi.n	801531a <_printf_i+0x32>
 8015304:	2f00      	cmp	r7, #0
 8015306:	f000 80d8 	beq.w	80154ba <_printf_i+0x1d2>
 801530a:	2f58      	cmp	r7, #88	; 0x58
 801530c:	f000 80a3 	beq.w	8015456 <_printf_i+0x16e>
 8015310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015318:	e03a      	b.n	8015390 <_printf_i+0xa8>
 801531a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801531e:	2b15      	cmp	r3, #21
 8015320:	d8f6      	bhi.n	8015310 <_printf_i+0x28>
 8015322:	a001      	add	r0, pc, #4	; (adr r0, 8015328 <_printf_i+0x40>)
 8015324:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015328:	08015381 	.word	0x08015381
 801532c:	08015395 	.word	0x08015395
 8015330:	08015311 	.word	0x08015311
 8015334:	08015311 	.word	0x08015311
 8015338:	08015311 	.word	0x08015311
 801533c:	08015311 	.word	0x08015311
 8015340:	08015395 	.word	0x08015395
 8015344:	08015311 	.word	0x08015311
 8015348:	08015311 	.word	0x08015311
 801534c:	08015311 	.word	0x08015311
 8015350:	08015311 	.word	0x08015311
 8015354:	080154a1 	.word	0x080154a1
 8015358:	080153c5 	.word	0x080153c5
 801535c:	08015483 	.word	0x08015483
 8015360:	08015311 	.word	0x08015311
 8015364:	08015311 	.word	0x08015311
 8015368:	080154c3 	.word	0x080154c3
 801536c:	08015311 	.word	0x08015311
 8015370:	080153c5 	.word	0x080153c5
 8015374:	08015311 	.word	0x08015311
 8015378:	08015311 	.word	0x08015311
 801537c:	0801548b 	.word	0x0801548b
 8015380:	680b      	ldr	r3, [r1, #0]
 8015382:	1d1a      	adds	r2, r3, #4
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	600a      	str	r2, [r1, #0]
 8015388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801538c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015390:	2301      	movs	r3, #1
 8015392:	e0a3      	b.n	80154dc <_printf_i+0x1f4>
 8015394:	6825      	ldr	r5, [r4, #0]
 8015396:	6808      	ldr	r0, [r1, #0]
 8015398:	062e      	lsls	r6, r5, #24
 801539a:	f100 0304 	add.w	r3, r0, #4
 801539e:	d50a      	bpl.n	80153b6 <_printf_i+0xce>
 80153a0:	6805      	ldr	r5, [r0, #0]
 80153a2:	600b      	str	r3, [r1, #0]
 80153a4:	2d00      	cmp	r5, #0
 80153a6:	da03      	bge.n	80153b0 <_printf_i+0xc8>
 80153a8:	232d      	movs	r3, #45	; 0x2d
 80153aa:	426d      	negs	r5, r5
 80153ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153b0:	485e      	ldr	r0, [pc, #376]	; (801552c <_printf_i+0x244>)
 80153b2:	230a      	movs	r3, #10
 80153b4:	e019      	b.n	80153ea <_printf_i+0x102>
 80153b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80153ba:	6805      	ldr	r5, [r0, #0]
 80153bc:	600b      	str	r3, [r1, #0]
 80153be:	bf18      	it	ne
 80153c0:	b22d      	sxthne	r5, r5
 80153c2:	e7ef      	b.n	80153a4 <_printf_i+0xbc>
 80153c4:	680b      	ldr	r3, [r1, #0]
 80153c6:	6825      	ldr	r5, [r4, #0]
 80153c8:	1d18      	adds	r0, r3, #4
 80153ca:	6008      	str	r0, [r1, #0]
 80153cc:	0628      	lsls	r0, r5, #24
 80153ce:	d501      	bpl.n	80153d4 <_printf_i+0xec>
 80153d0:	681d      	ldr	r5, [r3, #0]
 80153d2:	e002      	b.n	80153da <_printf_i+0xf2>
 80153d4:	0669      	lsls	r1, r5, #25
 80153d6:	d5fb      	bpl.n	80153d0 <_printf_i+0xe8>
 80153d8:	881d      	ldrh	r5, [r3, #0]
 80153da:	4854      	ldr	r0, [pc, #336]	; (801552c <_printf_i+0x244>)
 80153dc:	2f6f      	cmp	r7, #111	; 0x6f
 80153de:	bf0c      	ite	eq
 80153e0:	2308      	moveq	r3, #8
 80153e2:	230a      	movne	r3, #10
 80153e4:	2100      	movs	r1, #0
 80153e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153ea:	6866      	ldr	r6, [r4, #4]
 80153ec:	60a6      	str	r6, [r4, #8]
 80153ee:	2e00      	cmp	r6, #0
 80153f0:	bfa2      	ittt	ge
 80153f2:	6821      	ldrge	r1, [r4, #0]
 80153f4:	f021 0104 	bicge.w	r1, r1, #4
 80153f8:	6021      	strge	r1, [r4, #0]
 80153fa:	b90d      	cbnz	r5, 8015400 <_printf_i+0x118>
 80153fc:	2e00      	cmp	r6, #0
 80153fe:	d04d      	beq.n	801549c <_printf_i+0x1b4>
 8015400:	4616      	mov	r6, r2
 8015402:	fbb5 f1f3 	udiv	r1, r5, r3
 8015406:	fb03 5711 	mls	r7, r3, r1, r5
 801540a:	5dc7      	ldrb	r7, [r0, r7]
 801540c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015410:	462f      	mov	r7, r5
 8015412:	42bb      	cmp	r3, r7
 8015414:	460d      	mov	r5, r1
 8015416:	d9f4      	bls.n	8015402 <_printf_i+0x11a>
 8015418:	2b08      	cmp	r3, #8
 801541a:	d10b      	bne.n	8015434 <_printf_i+0x14c>
 801541c:	6823      	ldr	r3, [r4, #0]
 801541e:	07df      	lsls	r7, r3, #31
 8015420:	d508      	bpl.n	8015434 <_printf_i+0x14c>
 8015422:	6923      	ldr	r3, [r4, #16]
 8015424:	6861      	ldr	r1, [r4, #4]
 8015426:	4299      	cmp	r1, r3
 8015428:	bfde      	ittt	le
 801542a:	2330      	movle	r3, #48	; 0x30
 801542c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015434:	1b92      	subs	r2, r2, r6
 8015436:	6122      	str	r2, [r4, #16]
 8015438:	f8cd a000 	str.w	sl, [sp]
 801543c:	464b      	mov	r3, r9
 801543e:	aa03      	add	r2, sp, #12
 8015440:	4621      	mov	r1, r4
 8015442:	4640      	mov	r0, r8
 8015444:	f7ff fee2 	bl	801520c <_printf_common>
 8015448:	3001      	adds	r0, #1
 801544a:	d14c      	bne.n	80154e6 <_printf_i+0x1fe>
 801544c:	f04f 30ff 	mov.w	r0, #4294967295
 8015450:	b004      	add	sp, #16
 8015452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015456:	4835      	ldr	r0, [pc, #212]	; (801552c <_printf_i+0x244>)
 8015458:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801545c:	6823      	ldr	r3, [r4, #0]
 801545e:	680e      	ldr	r6, [r1, #0]
 8015460:	061f      	lsls	r7, r3, #24
 8015462:	f856 5b04 	ldr.w	r5, [r6], #4
 8015466:	600e      	str	r6, [r1, #0]
 8015468:	d514      	bpl.n	8015494 <_printf_i+0x1ac>
 801546a:	07d9      	lsls	r1, r3, #31
 801546c:	bf44      	itt	mi
 801546e:	f043 0320 	orrmi.w	r3, r3, #32
 8015472:	6023      	strmi	r3, [r4, #0]
 8015474:	b91d      	cbnz	r5, 801547e <_printf_i+0x196>
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	f023 0320 	bic.w	r3, r3, #32
 801547c:	6023      	str	r3, [r4, #0]
 801547e:	2310      	movs	r3, #16
 8015480:	e7b0      	b.n	80153e4 <_printf_i+0xfc>
 8015482:	6823      	ldr	r3, [r4, #0]
 8015484:	f043 0320 	orr.w	r3, r3, #32
 8015488:	6023      	str	r3, [r4, #0]
 801548a:	2378      	movs	r3, #120	; 0x78
 801548c:	4828      	ldr	r0, [pc, #160]	; (8015530 <_printf_i+0x248>)
 801548e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015492:	e7e3      	b.n	801545c <_printf_i+0x174>
 8015494:	065e      	lsls	r6, r3, #25
 8015496:	bf48      	it	mi
 8015498:	b2ad      	uxthmi	r5, r5
 801549a:	e7e6      	b.n	801546a <_printf_i+0x182>
 801549c:	4616      	mov	r6, r2
 801549e:	e7bb      	b.n	8015418 <_printf_i+0x130>
 80154a0:	680b      	ldr	r3, [r1, #0]
 80154a2:	6826      	ldr	r6, [r4, #0]
 80154a4:	6960      	ldr	r0, [r4, #20]
 80154a6:	1d1d      	adds	r5, r3, #4
 80154a8:	600d      	str	r5, [r1, #0]
 80154aa:	0635      	lsls	r5, r6, #24
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	d501      	bpl.n	80154b4 <_printf_i+0x1cc>
 80154b0:	6018      	str	r0, [r3, #0]
 80154b2:	e002      	b.n	80154ba <_printf_i+0x1d2>
 80154b4:	0671      	lsls	r1, r6, #25
 80154b6:	d5fb      	bpl.n	80154b0 <_printf_i+0x1c8>
 80154b8:	8018      	strh	r0, [r3, #0]
 80154ba:	2300      	movs	r3, #0
 80154bc:	6123      	str	r3, [r4, #16]
 80154be:	4616      	mov	r6, r2
 80154c0:	e7ba      	b.n	8015438 <_printf_i+0x150>
 80154c2:	680b      	ldr	r3, [r1, #0]
 80154c4:	1d1a      	adds	r2, r3, #4
 80154c6:	600a      	str	r2, [r1, #0]
 80154c8:	681e      	ldr	r6, [r3, #0]
 80154ca:	6862      	ldr	r2, [r4, #4]
 80154cc:	2100      	movs	r1, #0
 80154ce:	4630      	mov	r0, r6
 80154d0:	f7ea ff1e 	bl	8000310 <memchr>
 80154d4:	b108      	cbz	r0, 80154da <_printf_i+0x1f2>
 80154d6:	1b80      	subs	r0, r0, r6
 80154d8:	6060      	str	r0, [r4, #4]
 80154da:	6863      	ldr	r3, [r4, #4]
 80154dc:	6123      	str	r3, [r4, #16]
 80154de:	2300      	movs	r3, #0
 80154e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154e4:	e7a8      	b.n	8015438 <_printf_i+0x150>
 80154e6:	6923      	ldr	r3, [r4, #16]
 80154e8:	4632      	mov	r2, r6
 80154ea:	4649      	mov	r1, r9
 80154ec:	4640      	mov	r0, r8
 80154ee:	47d0      	blx	sl
 80154f0:	3001      	adds	r0, #1
 80154f2:	d0ab      	beq.n	801544c <_printf_i+0x164>
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	079b      	lsls	r3, r3, #30
 80154f8:	d413      	bmi.n	8015522 <_printf_i+0x23a>
 80154fa:	68e0      	ldr	r0, [r4, #12]
 80154fc:	9b03      	ldr	r3, [sp, #12]
 80154fe:	4298      	cmp	r0, r3
 8015500:	bfb8      	it	lt
 8015502:	4618      	movlt	r0, r3
 8015504:	e7a4      	b.n	8015450 <_printf_i+0x168>
 8015506:	2301      	movs	r3, #1
 8015508:	4632      	mov	r2, r6
 801550a:	4649      	mov	r1, r9
 801550c:	4640      	mov	r0, r8
 801550e:	47d0      	blx	sl
 8015510:	3001      	adds	r0, #1
 8015512:	d09b      	beq.n	801544c <_printf_i+0x164>
 8015514:	3501      	adds	r5, #1
 8015516:	68e3      	ldr	r3, [r4, #12]
 8015518:	9903      	ldr	r1, [sp, #12]
 801551a:	1a5b      	subs	r3, r3, r1
 801551c:	42ab      	cmp	r3, r5
 801551e:	dcf2      	bgt.n	8015506 <_printf_i+0x21e>
 8015520:	e7eb      	b.n	80154fa <_printf_i+0x212>
 8015522:	2500      	movs	r5, #0
 8015524:	f104 0619 	add.w	r6, r4, #25
 8015528:	e7f5      	b.n	8015516 <_printf_i+0x22e>
 801552a:	bf00      	nop
 801552c:	08021aa7 	.word	0x08021aa7
 8015530:	08021ab8 	.word	0x08021ab8

08015534 <_scanf_float>:
 8015534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015538:	b087      	sub	sp, #28
 801553a:	4617      	mov	r7, r2
 801553c:	9303      	str	r3, [sp, #12]
 801553e:	688b      	ldr	r3, [r1, #8]
 8015540:	1e5a      	subs	r2, r3, #1
 8015542:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015546:	bf83      	ittte	hi
 8015548:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801554c:	195b      	addhi	r3, r3, r5
 801554e:	9302      	strhi	r3, [sp, #8]
 8015550:	2300      	movls	r3, #0
 8015552:	bf86      	itte	hi
 8015554:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015558:	608b      	strhi	r3, [r1, #8]
 801555a:	9302      	strls	r3, [sp, #8]
 801555c:	680b      	ldr	r3, [r1, #0]
 801555e:	468b      	mov	fp, r1
 8015560:	2500      	movs	r5, #0
 8015562:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015566:	f84b 3b1c 	str.w	r3, [fp], #28
 801556a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801556e:	4680      	mov	r8, r0
 8015570:	460c      	mov	r4, r1
 8015572:	465e      	mov	r6, fp
 8015574:	46aa      	mov	sl, r5
 8015576:	46a9      	mov	r9, r5
 8015578:	9501      	str	r5, [sp, #4]
 801557a:	68a2      	ldr	r2, [r4, #8]
 801557c:	b152      	cbz	r2, 8015594 <_scanf_float+0x60>
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	2b4e      	cmp	r3, #78	; 0x4e
 8015584:	d864      	bhi.n	8015650 <_scanf_float+0x11c>
 8015586:	2b40      	cmp	r3, #64	; 0x40
 8015588:	d83c      	bhi.n	8015604 <_scanf_float+0xd0>
 801558a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801558e:	b2c8      	uxtb	r0, r1
 8015590:	280e      	cmp	r0, #14
 8015592:	d93a      	bls.n	801560a <_scanf_float+0xd6>
 8015594:	f1b9 0f00 	cmp.w	r9, #0
 8015598:	d003      	beq.n	80155a2 <_scanf_float+0x6e>
 801559a:	6823      	ldr	r3, [r4, #0]
 801559c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80155a0:	6023      	str	r3, [r4, #0]
 80155a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80155a6:	f1ba 0f01 	cmp.w	sl, #1
 80155aa:	f200 8113 	bhi.w	80157d4 <_scanf_float+0x2a0>
 80155ae:	455e      	cmp	r6, fp
 80155b0:	f200 8105 	bhi.w	80157be <_scanf_float+0x28a>
 80155b4:	2501      	movs	r5, #1
 80155b6:	4628      	mov	r0, r5
 80155b8:	b007      	add	sp, #28
 80155ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80155c2:	2a0d      	cmp	r2, #13
 80155c4:	d8e6      	bhi.n	8015594 <_scanf_float+0x60>
 80155c6:	a101      	add	r1, pc, #4	; (adr r1, 80155cc <_scanf_float+0x98>)
 80155c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80155cc:	0801570b 	.word	0x0801570b
 80155d0:	08015595 	.word	0x08015595
 80155d4:	08015595 	.word	0x08015595
 80155d8:	08015595 	.word	0x08015595
 80155dc:	0801576b 	.word	0x0801576b
 80155e0:	08015743 	.word	0x08015743
 80155e4:	08015595 	.word	0x08015595
 80155e8:	08015595 	.word	0x08015595
 80155ec:	08015719 	.word	0x08015719
 80155f0:	08015595 	.word	0x08015595
 80155f4:	08015595 	.word	0x08015595
 80155f8:	08015595 	.word	0x08015595
 80155fc:	08015595 	.word	0x08015595
 8015600:	080156d1 	.word	0x080156d1
 8015604:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015608:	e7db      	b.n	80155c2 <_scanf_float+0x8e>
 801560a:	290e      	cmp	r1, #14
 801560c:	d8c2      	bhi.n	8015594 <_scanf_float+0x60>
 801560e:	a001      	add	r0, pc, #4	; (adr r0, 8015614 <_scanf_float+0xe0>)
 8015610:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015614:	080156c3 	.word	0x080156c3
 8015618:	08015595 	.word	0x08015595
 801561c:	080156c3 	.word	0x080156c3
 8015620:	08015757 	.word	0x08015757
 8015624:	08015595 	.word	0x08015595
 8015628:	08015671 	.word	0x08015671
 801562c:	080156ad 	.word	0x080156ad
 8015630:	080156ad 	.word	0x080156ad
 8015634:	080156ad 	.word	0x080156ad
 8015638:	080156ad 	.word	0x080156ad
 801563c:	080156ad 	.word	0x080156ad
 8015640:	080156ad 	.word	0x080156ad
 8015644:	080156ad 	.word	0x080156ad
 8015648:	080156ad 	.word	0x080156ad
 801564c:	080156ad 	.word	0x080156ad
 8015650:	2b6e      	cmp	r3, #110	; 0x6e
 8015652:	d809      	bhi.n	8015668 <_scanf_float+0x134>
 8015654:	2b60      	cmp	r3, #96	; 0x60
 8015656:	d8b2      	bhi.n	80155be <_scanf_float+0x8a>
 8015658:	2b54      	cmp	r3, #84	; 0x54
 801565a:	d077      	beq.n	801574c <_scanf_float+0x218>
 801565c:	2b59      	cmp	r3, #89	; 0x59
 801565e:	d199      	bne.n	8015594 <_scanf_float+0x60>
 8015660:	2d07      	cmp	r5, #7
 8015662:	d197      	bne.n	8015594 <_scanf_float+0x60>
 8015664:	2508      	movs	r5, #8
 8015666:	e029      	b.n	80156bc <_scanf_float+0x188>
 8015668:	2b74      	cmp	r3, #116	; 0x74
 801566a:	d06f      	beq.n	801574c <_scanf_float+0x218>
 801566c:	2b79      	cmp	r3, #121	; 0x79
 801566e:	e7f6      	b.n	801565e <_scanf_float+0x12a>
 8015670:	6821      	ldr	r1, [r4, #0]
 8015672:	05c8      	lsls	r0, r1, #23
 8015674:	d51a      	bpl.n	80156ac <_scanf_float+0x178>
 8015676:	9b02      	ldr	r3, [sp, #8]
 8015678:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801567c:	6021      	str	r1, [r4, #0]
 801567e:	f109 0901 	add.w	r9, r9, #1
 8015682:	b11b      	cbz	r3, 801568c <_scanf_float+0x158>
 8015684:	3b01      	subs	r3, #1
 8015686:	3201      	adds	r2, #1
 8015688:	9302      	str	r3, [sp, #8]
 801568a:	60a2      	str	r2, [r4, #8]
 801568c:	68a3      	ldr	r3, [r4, #8]
 801568e:	3b01      	subs	r3, #1
 8015690:	60a3      	str	r3, [r4, #8]
 8015692:	6923      	ldr	r3, [r4, #16]
 8015694:	3301      	adds	r3, #1
 8015696:	6123      	str	r3, [r4, #16]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	3b01      	subs	r3, #1
 801569c:	2b00      	cmp	r3, #0
 801569e:	607b      	str	r3, [r7, #4]
 80156a0:	f340 8084 	ble.w	80157ac <_scanf_float+0x278>
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	3301      	adds	r3, #1
 80156a8:	603b      	str	r3, [r7, #0]
 80156aa:	e766      	b.n	801557a <_scanf_float+0x46>
 80156ac:	eb1a 0f05 	cmn.w	sl, r5
 80156b0:	f47f af70 	bne.w	8015594 <_scanf_float+0x60>
 80156b4:	6822      	ldr	r2, [r4, #0]
 80156b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80156ba:	6022      	str	r2, [r4, #0]
 80156bc:	f806 3b01 	strb.w	r3, [r6], #1
 80156c0:	e7e4      	b.n	801568c <_scanf_float+0x158>
 80156c2:	6822      	ldr	r2, [r4, #0]
 80156c4:	0610      	lsls	r0, r2, #24
 80156c6:	f57f af65 	bpl.w	8015594 <_scanf_float+0x60>
 80156ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80156ce:	e7f4      	b.n	80156ba <_scanf_float+0x186>
 80156d0:	f1ba 0f00 	cmp.w	sl, #0
 80156d4:	d10e      	bne.n	80156f4 <_scanf_float+0x1c0>
 80156d6:	f1b9 0f00 	cmp.w	r9, #0
 80156da:	d10e      	bne.n	80156fa <_scanf_float+0x1c6>
 80156dc:	6822      	ldr	r2, [r4, #0]
 80156de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80156e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80156e6:	d108      	bne.n	80156fa <_scanf_float+0x1c6>
 80156e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80156ec:	6022      	str	r2, [r4, #0]
 80156ee:	f04f 0a01 	mov.w	sl, #1
 80156f2:	e7e3      	b.n	80156bc <_scanf_float+0x188>
 80156f4:	f1ba 0f02 	cmp.w	sl, #2
 80156f8:	d055      	beq.n	80157a6 <_scanf_float+0x272>
 80156fa:	2d01      	cmp	r5, #1
 80156fc:	d002      	beq.n	8015704 <_scanf_float+0x1d0>
 80156fe:	2d04      	cmp	r5, #4
 8015700:	f47f af48 	bne.w	8015594 <_scanf_float+0x60>
 8015704:	3501      	adds	r5, #1
 8015706:	b2ed      	uxtb	r5, r5
 8015708:	e7d8      	b.n	80156bc <_scanf_float+0x188>
 801570a:	f1ba 0f01 	cmp.w	sl, #1
 801570e:	f47f af41 	bne.w	8015594 <_scanf_float+0x60>
 8015712:	f04f 0a02 	mov.w	sl, #2
 8015716:	e7d1      	b.n	80156bc <_scanf_float+0x188>
 8015718:	b97d      	cbnz	r5, 801573a <_scanf_float+0x206>
 801571a:	f1b9 0f00 	cmp.w	r9, #0
 801571e:	f47f af3c 	bne.w	801559a <_scanf_float+0x66>
 8015722:	6822      	ldr	r2, [r4, #0]
 8015724:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015728:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801572c:	f47f af39 	bne.w	80155a2 <_scanf_float+0x6e>
 8015730:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015734:	6022      	str	r2, [r4, #0]
 8015736:	2501      	movs	r5, #1
 8015738:	e7c0      	b.n	80156bc <_scanf_float+0x188>
 801573a:	2d03      	cmp	r5, #3
 801573c:	d0e2      	beq.n	8015704 <_scanf_float+0x1d0>
 801573e:	2d05      	cmp	r5, #5
 8015740:	e7de      	b.n	8015700 <_scanf_float+0x1cc>
 8015742:	2d02      	cmp	r5, #2
 8015744:	f47f af26 	bne.w	8015594 <_scanf_float+0x60>
 8015748:	2503      	movs	r5, #3
 801574a:	e7b7      	b.n	80156bc <_scanf_float+0x188>
 801574c:	2d06      	cmp	r5, #6
 801574e:	f47f af21 	bne.w	8015594 <_scanf_float+0x60>
 8015752:	2507      	movs	r5, #7
 8015754:	e7b2      	b.n	80156bc <_scanf_float+0x188>
 8015756:	6822      	ldr	r2, [r4, #0]
 8015758:	0591      	lsls	r1, r2, #22
 801575a:	f57f af1b 	bpl.w	8015594 <_scanf_float+0x60>
 801575e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015762:	6022      	str	r2, [r4, #0]
 8015764:	f8cd 9004 	str.w	r9, [sp, #4]
 8015768:	e7a8      	b.n	80156bc <_scanf_float+0x188>
 801576a:	6822      	ldr	r2, [r4, #0]
 801576c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015770:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015774:	d006      	beq.n	8015784 <_scanf_float+0x250>
 8015776:	0550      	lsls	r0, r2, #21
 8015778:	f57f af0c 	bpl.w	8015594 <_scanf_float+0x60>
 801577c:	f1b9 0f00 	cmp.w	r9, #0
 8015780:	f43f af0f 	beq.w	80155a2 <_scanf_float+0x6e>
 8015784:	0591      	lsls	r1, r2, #22
 8015786:	bf58      	it	pl
 8015788:	9901      	ldrpl	r1, [sp, #4]
 801578a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801578e:	bf58      	it	pl
 8015790:	eba9 0101 	subpl.w	r1, r9, r1
 8015794:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015798:	bf58      	it	pl
 801579a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801579e:	6022      	str	r2, [r4, #0]
 80157a0:	f04f 0900 	mov.w	r9, #0
 80157a4:	e78a      	b.n	80156bc <_scanf_float+0x188>
 80157a6:	f04f 0a03 	mov.w	sl, #3
 80157aa:	e787      	b.n	80156bc <_scanf_float+0x188>
 80157ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80157b0:	4639      	mov	r1, r7
 80157b2:	4640      	mov	r0, r8
 80157b4:	4798      	blx	r3
 80157b6:	2800      	cmp	r0, #0
 80157b8:	f43f aedf 	beq.w	801557a <_scanf_float+0x46>
 80157bc:	e6ea      	b.n	8015594 <_scanf_float+0x60>
 80157be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80157c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80157c6:	463a      	mov	r2, r7
 80157c8:	4640      	mov	r0, r8
 80157ca:	4798      	blx	r3
 80157cc:	6923      	ldr	r3, [r4, #16]
 80157ce:	3b01      	subs	r3, #1
 80157d0:	6123      	str	r3, [r4, #16]
 80157d2:	e6ec      	b.n	80155ae <_scanf_float+0x7a>
 80157d4:	1e6b      	subs	r3, r5, #1
 80157d6:	2b06      	cmp	r3, #6
 80157d8:	d825      	bhi.n	8015826 <_scanf_float+0x2f2>
 80157da:	2d02      	cmp	r5, #2
 80157dc:	d836      	bhi.n	801584c <_scanf_float+0x318>
 80157de:	455e      	cmp	r6, fp
 80157e0:	f67f aee8 	bls.w	80155b4 <_scanf_float+0x80>
 80157e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80157e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80157ec:	463a      	mov	r2, r7
 80157ee:	4640      	mov	r0, r8
 80157f0:	4798      	blx	r3
 80157f2:	6923      	ldr	r3, [r4, #16]
 80157f4:	3b01      	subs	r3, #1
 80157f6:	6123      	str	r3, [r4, #16]
 80157f8:	e7f1      	b.n	80157de <_scanf_float+0x2aa>
 80157fa:	9802      	ldr	r0, [sp, #8]
 80157fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015800:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015804:	9002      	str	r0, [sp, #8]
 8015806:	463a      	mov	r2, r7
 8015808:	4640      	mov	r0, r8
 801580a:	4798      	blx	r3
 801580c:	6923      	ldr	r3, [r4, #16]
 801580e:	3b01      	subs	r3, #1
 8015810:	6123      	str	r3, [r4, #16]
 8015812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015816:	fa5f fa8a 	uxtb.w	sl, sl
 801581a:	f1ba 0f02 	cmp.w	sl, #2
 801581e:	d1ec      	bne.n	80157fa <_scanf_float+0x2c6>
 8015820:	3d03      	subs	r5, #3
 8015822:	b2ed      	uxtb	r5, r5
 8015824:	1b76      	subs	r6, r6, r5
 8015826:	6823      	ldr	r3, [r4, #0]
 8015828:	05da      	lsls	r2, r3, #23
 801582a:	d52f      	bpl.n	801588c <_scanf_float+0x358>
 801582c:	055b      	lsls	r3, r3, #21
 801582e:	d510      	bpl.n	8015852 <_scanf_float+0x31e>
 8015830:	455e      	cmp	r6, fp
 8015832:	f67f aebf 	bls.w	80155b4 <_scanf_float+0x80>
 8015836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801583a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801583e:	463a      	mov	r2, r7
 8015840:	4640      	mov	r0, r8
 8015842:	4798      	blx	r3
 8015844:	6923      	ldr	r3, [r4, #16]
 8015846:	3b01      	subs	r3, #1
 8015848:	6123      	str	r3, [r4, #16]
 801584a:	e7f1      	b.n	8015830 <_scanf_float+0x2fc>
 801584c:	46aa      	mov	sl, r5
 801584e:	9602      	str	r6, [sp, #8]
 8015850:	e7df      	b.n	8015812 <_scanf_float+0x2de>
 8015852:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015856:	6923      	ldr	r3, [r4, #16]
 8015858:	2965      	cmp	r1, #101	; 0x65
 801585a:	f103 33ff 	add.w	r3, r3, #4294967295
 801585e:	f106 35ff 	add.w	r5, r6, #4294967295
 8015862:	6123      	str	r3, [r4, #16]
 8015864:	d00c      	beq.n	8015880 <_scanf_float+0x34c>
 8015866:	2945      	cmp	r1, #69	; 0x45
 8015868:	d00a      	beq.n	8015880 <_scanf_float+0x34c>
 801586a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801586e:	463a      	mov	r2, r7
 8015870:	4640      	mov	r0, r8
 8015872:	4798      	blx	r3
 8015874:	6923      	ldr	r3, [r4, #16]
 8015876:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801587a:	3b01      	subs	r3, #1
 801587c:	1eb5      	subs	r5, r6, #2
 801587e:	6123      	str	r3, [r4, #16]
 8015880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015884:	463a      	mov	r2, r7
 8015886:	4640      	mov	r0, r8
 8015888:	4798      	blx	r3
 801588a:	462e      	mov	r6, r5
 801588c:	6825      	ldr	r5, [r4, #0]
 801588e:	f015 0510 	ands.w	r5, r5, #16
 8015892:	d14d      	bne.n	8015930 <_scanf_float+0x3fc>
 8015894:	7035      	strb	r5, [r6, #0]
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801589c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80158a0:	d11a      	bne.n	80158d8 <_scanf_float+0x3a4>
 80158a2:	9b01      	ldr	r3, [sp, #4]
 80158a4:	454b      	cmp	r3, r9
 80158a6:	eba3 0209 	sub.w	r2, r3, r9
 80158aa:	d122      	bne.n	80158f2 <_scanf_float+0x3be>
 80158ac:	2200      	movs	r2, #0
 80158ae:	4659      	mov	r1, fp
 80158b0:	4640      	mov	r0, r8
 80158b2:	f000 ff1f 	bl	80166f4 <_strtod_r>
 80158b6:	9b03      	ldr	r3, [sp, #12]
 80158b8:	6821      	ldr	r1, [r4, #0]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	f011 0f02 	tst.w	r1, #2
 80158c0:	f103 0204 	add.w	r2, r3, #4
 80158c4:	d020      	beq.n	8015908 <_scanf_float+0x3d4>
 80158c6:	9903      	ldr	r1, [sp, #12]
 80158c8:	600a      	str	r2, [r1, #0]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	ed83 0b00 	vstr	d0, [r3]
 80158d0:	68e3      	ldr	r3, [r4, #12]
 80158d2:	3301      	adds	r3, #1
 80158d4:	60e3      	str	r3, [r4, #12]
 80158d6:	e66e      	b.n	80155b6 <_scanf_float+0x82>
 80158d8:	9b04      	ldr	r3, [sp, #16]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d0e6      	beq.n	80158ac <_scanf_float+0x378>
 80158de:	9905      	ldr	r1, [sp, #20]
 80158e0:	230a      	movs	r3, #10
 80158e2:	462a      	mov	r2, r5
 80158e4:	3101      	adds	r1, #1
 80158e6:	4640      	mov	r0, r8
 80158e8:	f000 ff8e 	bl	8016808 <_strtol_r>
 80158ec:	9b04      	ldr	r3, [sp, #16]
 80158ee:	9e05      	ldr	r6, [sp, #20]
 80158f0:	1ac2      	subs	r2, r0, r3
 80158f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80158f6:	429e      	cmp	r6, r3
 80158f8:	bf28      	it	cs
 80158fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80158fe:	490d      	ldr	r1, [pc, #52]	; (8015934 <_scanf_float+0x400>)
 8015900:	4630      	mov	r0, r6
 8015902:	f000 f8bf 	bl	8015a84 <siprintf>
 8015906:	e7d1      	b.n	80158ac <_scanf_float+0x378>
 8015908:	f011 0f04 	tst.w	r1, #4
 801590c:	9903      	ldr	r1, [sp, #12]
 801590e:	600a      	str	r2, [r1, #0]
 8015910:	d1db      	bne.n	80158ca <_scanf_float+0x396>
 8015912:	eeb4 0b40 	vcmp.f64	d0, d0
 8015916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591a:	681e      	ldr	r6, [r3, #0]
 801591c:	d705      	bvc.n	801592a <_scanf_float+0x3f6>
 801591e:	4806      	ldr	r0, [pc, #24]	; (8015938 <_scanf_float+0x404>)
 8015920:	f000 f8aa 	bl	8015a78 <nanf>
 8015924:	ed86 0a00 	vstr	s0, [r6]
 8015928:	e7d2      	b.n	80158d0 <_scanf_float+0x39c>
 801592a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801592e:	e7f9      	b.n	8015924 <_scanf_float+0x3f0>
 8015930:	2500      	movs	r5, #0
 8015932:	e640      	b.n	80155b6 <_scanf_float+0x82>
 8015934:	08021ac9 	.word	0x08021ac9
 8015938:	08021a7e 	.word	0x08021a7e

0801593c <iprintf>:
 801593c:	b40f      	push	{r0, r1, r2, r3}
 801593e:	4b0a      	ldr	r3, [pc, #40]	; (8015968 <iprintf+0x2c>)
 8015940:	b513      	push	{r0, r1, r4, lr}
 8015942:	681c      	ldr	r4, [r3, #0]
 8015944:	b124      	cbz	r4, 8015950 <iprintf+0x14>
 8015946:	69a3      	ldr	r3, [r4, #24]
 8015948:	b913      	cbnz	r3, 8015950 <iprintf+0x14>
 801594a:	4620      	mov	r0, r4
 801594c:	f001 ff4c 	bl	80177e8 <__sinit>
 8015950:	ab05      	add	r3, sp, #20
 8015952:	9a04      	ldr	r2, [sp, #16]
 8015954:	68a1      	ldr	r1, [r4, #8]
 8015956:	9301      	str	r3, [sp, #4]
 8015958:	4620      	mov	r0, r4
 801595a:	f7ff f879 	bl	8014a50 <_vfiprintf_r>
 801595e:	b002      	add	sp, #8
 8015960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015964:	b004      	add	sp, #16
 8015966:	4770      	bx	lr
 8015968:	2400a104 	.word	0x2400a104

0801596c <_puts_r>:
 801596c:	b570      	push	{r4, r5, r6, lr}
 801596e:	460e      	mov	r6, r1
 8015970:	4605      	mov	r5, r0
 8015972:	b118      	cbz	r0, 801597c <_puts_r+0x10>
 8015974:	6983      	ldr	r3, [r0, #24]
 8015976:	b90b      	cbnz	r3, 801597c <_puts_r+0x10>
 8015978:	f001 ff36 	bl	80177e8 <__sinit>
 801597c:	69ab      	ldr	r3, [r5, #24]
 801597e:	68ac      	ldr	r4, [r5, #8]
 8015980:	b913      	cbnz	r3, 8015988 <_puts_r+0x1c>
 8015982:	4628      	mov	r0, r5
 8015984:	f001 ff30 	bl	80177e8 <__sinit>
 8015988:	4b2c      	ldr	r3, [pc, #176]	; (8015a3c <_puts_r+0xd0>)
 801598a:	429c      	cmp	r4, r3
 801598c:	d120      	bne.n	80159d0 <_puts_r+0x64>
 801598e:	686c      	ldr	r4, [r5, #4]
 8015990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015992:	07db      	lsls	r3, r3, #31
 8015994:	d405      	bmi.n	80159a2 <_puts_r+0x36>
 8015996:	89a3      	ldrh	r3, [r4, #12]
 8015998:	0598      	lsls	r0, r3, #22
 801599a:	d402      	bmi.n	80159a2 <_puts_r+0x36>
 801599c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801599e:	f002 fb34 	bl	801800a <__retarget_lock_acquire_recursive>
 80159a2:	89a3      	ldrh	r3, [r4, #12]
 80159a4:	0719      	lsls	r1, r3, #28
 80159a6:	d51d      	bpl.n	80159e4 <_puts_r+0x78>
 80159a8:	6923      	ldr	r3, [r4, #16]
 80159aa:	b1db      	cbz	r3, 80159e4 <_puts_r+0x78>
 80159ac:	3e01      	subs	r6, #1
 80159ae:	68a3      	ldr	r3, [r4, #8]
 80159b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80159b4:	3b01      	subs	r3, #1
 80159b6:	60a3      	str	r3, [r4, #8]
 80159b8:	bb39      	cbnz	r1, 8015a0a <_puts_r+0x9e>
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	da38      	bge.n	8015a30 <_puts_r+0xc4>
 80159be:	4622      	mov	r2, r4
 80159c0:	210a      	movs	r1, #10
 80159c2:	4628      	mov	r0, r5
 80159c4:	f000 ff22 	bl	801680c <__swbuf_r>
 80159c8:	3001      	adds	r0, #1
 80159ca:	d011      	beq.n	80159f0 <_puts_r+0x84>
 80159cc:	250a      	movs	r5, #10
 80159ce:	e011      	b.n	80159f4 <_puts_r+0x88>
 80159d0:	4b1b      	ldr	r3, [pc, #108]	; (8015a40 <_puts_r+0xd4>)
 80159d2:	429c      	cmp	r4, r3
 80159d4:	d101      	bne.n	80159da <_puts_r+0x6e>
 80159d6:	68ac      	ldr	r4, [r5, #8]
 80159d8:	e7da      	b.n	8015990 <_puts_r+0x24>
 80159da:	4b1a      	ldr	r3, [pc, #104]	; (8015a44 <_puts_r+0xd8>)
 80159dc:	429c      	cmp	r4, r3
 80159de:	bf08      	it	eq
 80159e0:	68ec      	ldreq	r4, [r5, #12]
 80159e2:	e7d5      	b.n	8015990 <_puts_r+0x24>
 80159e4:	4621      	mov	r1, r4
 80159e6:	4628      	mov	r0, r5
 80159e8:	f000 ff62 	bl	80168b0 <__swsetup_r>
 80159ec:	2800      	cmp	r0, #0
 80159ee:	d0dd      	beq.n	80159ac <_puts_r+0x40>
 80159f0:	f04f 35ff 	mov.w	r5, #4294967295
 80159f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159f6:	07da      	lsls	r2, r3, #31
 80159f8:	d405      	bmi.n	8015a06 <_puts_r+0x9a>
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	059b      	lsls	r3, r3, #22
 80159fe:	d402      	bmi.n	8015a06 <_puts_r+0x9a>
 8015a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a02:	f002 fb03 	bl	801800c <__retarget_lock_release_recursive>
 8015a06:	4628      	mov	r0, r5
 8015a08:	bd70      	pop	{r4, r5, r6, pc}
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	da04      	bge.n	8015a18 <_puts_r+0xac>
 8015a0e:	69a2      	ldr	r2, [r4, #24]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	dc06      	bgt.n	8015a22 <_puts_r+0xb6>
 8015a14:	290a      	cmp	r1, #10
 8015a16:	d004      	beq.n	8015a22 <_puts_r+0xb6>
 8015a18:	6823      	ldr	r3, [r4, #0]
 8015a1a:	1c5a      	adds	r2, r3, #1
 8015a1c:	6022      	str	r2, [r4, #0]
 8015a1e:	7019      	strb	r1, [r3, #0]
 8015a20:	e7c5      	b.n	80159ae <_puts_r+0x42>
 8015a22:	4622      	mov	r2, r4
 8015a24:	4628      	mov	r0, r5
 8015a26:	f000 fef1 	bl	801680c <__swbuf_r>
 8015a2a:	3001      	adds	r0, #1
 8015a2c:	d1bf      	bne.n	80159ae <_puts_r+0x42>
 8015a2e:	e7df      	b.n	80159f0 <_puts_r+0x84>
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	250a      	movs	r5, #10
 8015a34:	1c5a      	adds	r2, r3, #1
 8015a36:	6022      	str	r2, [r4, #0]
 8015a38:	701d      	strb	r5, [r3, #0]
 8015a3a:	e7db      	b.n	80159f4 <_puts_r+0x88>
 8015a3c:	08021cd8 	.word	0x08021cd8
 8015a40:	08021cf8 	.word	0x08021cf8
 8015a44:	08021cb8 	.word	0x08021cb8

08015a48 <puts>:
 8015a48:	4b02      	ldr	r3, [pc, #8]	; (8015a54 <puts+0xc>)
 8015a4a:	4601      	mov	r1, r0
 8015a4c:	6818      	ldr	r0, [r3, #0]
 8015a4e:	f7ff bf8d 	b.w	801596c <_puts_r>
 8015a52:	bf00      	nop
 8015a54:	2400a104 	.word	0x2400a104

08015a58 <_sbrk_r>:
 8015a58:	b538      	push	{r3, r4, r5, lr}
 8015a5a:	4d06      	ldr	r5, [pc, #24]	; (8015a74 <_sbrk_r+0x1c>)
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	4604      	mov	r4, r0
 8015a60:	4608      	mov	r0, r1
 8015a62:	602b      	str	r3, [r5, #0]
 8015a64:	f7ec fa8e 	bl	8001f84 <_sbrk>
 8015a68:	1c43      	adds	r3, r0, #1
 8015a6a:	d102      	bne.n	8015a72 <_sbrk_r+0x1a>
 8015a6c:	682b      	ldr	r3, [r5, #0]
 8015a6e:	b103      	cbz	r3, 8015a72 <_sbrk_r+0x1a>
 8015a70:	6023      	str	r3, [r4, #0]
 8015a72:	bd38      	pop	{r3, r4, r5, pc}
 8015a74:	2400ec1c 	.word	0x2400ec1c

08015a78 <nanf>:
 8015a78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015a80 <nanf+0x8>
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	7fc00000 	.word	0x7fc00000

08015a84 <siprintf>:
 8015a84:	b40e      	push	{r1, r2, r3}
 8015a86:	b500      	push	{lr}
 8015a88:	b09c      	sub	sp, #112	; 0x70
 8015a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8015a8c:	9002      	str	r0, [sp, #8]
 8015a8e:	9006      	str	r0, [sp, #24]
 8015a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a94:	4809      	ldr	r0, [pc, #36]	; (8015abc <siprintf+0x38>)
 8015a96:	9107      	str	r1, [sp, #28]
 8015a98:	9104      	str	r1, [sp, #16]
 8015a9a:	4909      	ldr	r1, [pc, #36]	; (8015ac0 <siprintf+0x3c>)
 8015a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015aa0:	9105      	str	r1, [sp, #20]
 8015aa2:	6800      	ldr	r0, [r0, #0]
 8015aa4:	9301      	str	r3, [sp, #4]
 8015aa6:	a902      	add	r1, sp, #8
 8015aa8:	f003 f880 	bl	8018bac <_svfiprintf_r>
 8015aac:	9b02      	ldr	r3, [sp, #8]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	701a      	strb	r2, [r3, #0]
 8015ab2:	b01c      	add	sp, #112	; 0x70
 8015ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ab8:	b003      	add	sp, #12
 8015aba:	4770      	bx	lr
 8015abc:	2400a104 	.word	0x2400a104
 8015ac0:	ffff0208 	.word	0xffff0208

08015ac4 <strncmp>:
 8015ac4:	b510      	push	{r4, lr}
 8015ac6:	b16a      	cbz	r2, 8015ae4 <strncmp+0x20>
 8015ac8:	3901      	subs	r1, #1
 8015aca:	1884      	adds	r4, r0, r2
 8015acc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015ad0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015ad4:	4293      	cmp	r3, r2
 8015ad6:	d103      	bne.n	8015ae0 <strncmp+0x1c>
 8015ad8:	42a0      	cmp	r0, r4
 8015ada:	d001      	beq.n	8015ae0 <strncmp+0x1c>
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d1f5      	bne.n	8015acc <strncmp+0x8>
 8015ae0:	1a98      	subs	r0, r3, r2
 8015ae2:	bd10      	pop	{r4, pc}
 8015ae4:	4610      	mov	r0, r2
 8015ae6:	e7fc      	b.n	8015ae2 <strncmp+0x1e>

08015ae8 <strncpy>:
 8015ae8:	b510      	push	{r4, lr}
 8015aea:	3901      	subs	r1, #1
 8015aec:	4603      	mov	r3, r0
 8015aee:	b132      	cbz	r2, 8015afe <strncpy+0x16>
 8015af0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015af4:	f803 4b01 	strb.w	r4, [r3], #1
 8015af8:	3a01      	subs	r2, #1
 8015afa:	2c00      	cmp	r4, #0
 8015afc:	d1f7      	bne.n	8015aee <strncpy+0x6>
 8015afe:	441a      	add	r2, r3
 8015b00:	2100      	movs	r1, #0
 8015b02:	4293      	cmp	r3, r2
 8015b04:	d100      	bne.n	8015b08 <strncpy+0x20>
 8015b06:	bd10      	pop	{r4, pc}
 8015b08:	f803 1b01 	strb.w	r1, [r3], #1
 8015b0c:	e7f9      	b.n	8015b02 <strncpy+0x1a>

08015b0e <sulp>:
 8015b0e:	b570      	push	{r4, r5, r6, lr}
 8015b10:	4604      	mov	r4, r0
 8015b12:	460d      	mov	r5, r1
 8015b14:	4616      	mov	r6, r2
 8015b16:	ec45 4b10 	vmov	d0, r4, r5
 8015b1a:	f002 fe67 	bl	80187ec <__ulp>
 8015b1e:	b17e      	cbz	r6, 8015b40 <sulp+0x32>
 8015b20:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015b24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	dd09      	ble.n	8015b40 <sulp+0x32>
 8015b2c:	051b      	lsls	r3, r3, #20
 8015b2e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8015b32:	2000      	movs	r0, #0
 8015b34:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8015b38:	ec41 0b17 	vmov	d7, r0, r1
 8015b3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015b40:	bd70      	pop	{r4, r5, r6, pc}
 8015b42:	0000      	movs	r0, r0
 8015b44:	0000      	movs	r0, r0
	...

08015b48 <_strtod_l>:
 8015b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b4c:	ed2d 8b0c 	vpush	{d8-d13}
 8015b50:	b09d      	sub	sp, #116	; 0x74
 8015b52:	461f      	mov	r7, r3
 8015b54:	2300      	movs	r3, #0
 8015b56:	9318      	str	r3, [sp, #96]	; 0x60
 8015b58:	4ba6      	ldr	r3, [pc, #664]	; (8015df4 <_strtod_l+0x2ac>)
 8015b5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	9308      	str	r3, [sp, #32]
 8015b60:	4604      	mov	r4, r0
 8015b62:	4618      	mov	r0, r3
 8015b64:	468a      	mov	sl, r1
 8015b66:	f7ea fbc5 	bl	80002f4 <strlen>
 8015b6a:	f04f 0800 	mov.w	r8, #0
 8015b6e:	4605      	mov	r5, r0
 8015b70:	f04f 0900 	mov.w	r9, #0
 8015b74:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8015b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b7a:	781a      	ldrb	r2, [r3, #0]
 8015b7c:	2a2b      	cmp	r2, #43	; 0x2b
 8015b7e:	d04d      	beq.n	8015c1c <_strtod_l+0xd4>
 8015b80:	d83a      	bhi.n	8015bf8 <_strtod_l+0xb0>
 8015b82:	2a0d      	cmp	r2, #13
 8015b84:	d833      	bhi.n	8015bee <_strtod_l+0xa6>
 8015b86:	2a08      	cmp	r2, #8
 8015b88:	d833      	bhi.n	8015bf2 <_strtod_l+0xaa>
 8015b8a:	2a00      	cmp	r2, #0
 8015b8c:	d03d      	beq.n	8015c0a <_strtod_l+0xc2>
 8015b8e:	2300      	movs	r3, #0
 8015b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015b94:	7833      	ldrb	r3, [r6, #0]
 8015b96:	2b30      	cmp	r3, #48	; 0x30
 8015b98:	f040 80b6 	bne.w	8015d08 <_strtod_l+0x1c0>
 8015b9c:	7873      	ldrb	r3, [r6, #1]
 8015b9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015ba2:	2b58      	cmp	r3, #88	; 0x58
 8015ba4:	d16d      	bne.n	8015c82 <_strtod_l+0x13a>
 8015ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ba8:	9301      	str	r3, [sp, #4]
 8015baa:	ab18      	add	r3, sp, #96	; 0x60
 8015bac:	9702      	str	r7, [sp, #8]
 8015bae:	9300      	str	r3, [sp, #0]
 8015bb0:	4a91      	ldr	r2, [pc, #580]	; (8015df8 <_strtod_l+0x2b0>)
 8015bb2:	ab19      	add	r3, sp, #100	; 0x64
 8015bb4:	a917      	add	r1, sp, #92	; 0x5c
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f001 ff1a 	bl	80179f0 <__gethex>
 8015bbc:	f010 0507 	ands.w	r5, r0, #7
 8015bc0:	4607      	mov	r7, r0
 8015bc2:	d005      	beq.n	8015bd0 <_strtod_l+0x88>
 8015bc4:	2d06      	cmp	r5, #6
 8015bc6:	d12b      	bne.n	8015c20 <_strtod_l+0xd8>
 8015bc8:	3601      	adds	r6, #1
 8015bca:	2300      	movs	r3, #0
 8015bcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8015bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8015bd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	f040 856e 	bne.w	80166b4 <_strtod_l+0xb6c>
 8015bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bda:	b1e3      	cbz	r3, 8015c16 <_strtod_l+0xce>
 8015bdc:	ec49 8b17 	vmov	d7, r8, r9
 8015be0:	eeb1 0b47 	vneg.f64	d0, d7
 8015be4:	b01d      	add	sp, #116	; 0x74
 8015be6:	ecbd 8b0c 	vpop	{d8-d13}
 8015bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bee:	2a20      	cmp	r2, #32
 8015bf0:	d1cd      	bne.n	8015b8e <_strtod_l+0x46>
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bf6:	e7bf      	b.n	8015b78 <_strtod_l+0x30>
 8015bf8:	2a2d      	cmp	r2, #45	; 0x2d
 8015bfa:	d1c8      	bne.n	8015b8e <_strtod_l+0x46>
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	920b      	str	r2, [sp, #44]	; 0x2c
 8015c00:	1c5a      	adds	r2, r3, #1
 8015c02:	9217      	str	r2, [sp, #92]	; 0x5c
 8015c04:	785b      	ldrb	r3, [r3, #1]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d1c3      	bne.n	8015b92 <_strtod_l+0x4a>
 8015c0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c0c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f040 854d 	bne.w	80166b0 <_strtod_l+0xb68>
 8015c16:	ec49 8b10 	vmov	d0, r8, r9
 8015c1a:	e7e3      	b.n	8015be4 <_strtod_l+0x9c>
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	e7ee      	b.n	8015bfe <_strtod_l+0xb6>
 8015c20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015c22:	b13a      	cbz	r2, 8015c34 <_strtod_l+0xec>
 8015c24:	2135      	movs	r1, #53	; 0x35
 8015c26:	a81a      	add	r0, sp, #104	; 0x68
 8015c28:	f002 feec 	bl	8018a04 <__copybits>
 8015c2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015c2e:	4620      	mov	r0, r4
 8015c30:	f002 fab0 	bl	8018194 <_Bfree>
 8015c34:	3d01      	subs	r5, #1
 8015c36:	2d05      	cmp	r5, #5
 8015c38:	d807      	bhi.n	8015c4a <_strtod_l+0x102>
 8015c3a:	e8df f005 	tbb	[pc, r5]
 8015c3e:	0b0e      	.short	0x0b0e
 8015c40:	030e1d18 	.word	0x030e1d18
 8015c44:	f04f 0900 	mov.w	r9, #0
 8015c48:	46c8      	mov	r8, r9
 8015c4a:	073b      	lsls	r3, r7, #28
 8015c4c:	d5c0      	bpl.n	8015bd0 <_strtod_l+0x88>
 8015c4e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8015c52:	e7bd      	b.n	8015bd0 <_strtod_l+0x88>
 8015c54:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8015c58:	e7f7      	b.n	8015c4a <_strtod_l+0x102>
 8015c5a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8015c5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015c60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015c64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015c68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015c6c:	e7ed      	b.n	8015c4a <_strtod_l+0x102>
 8015c6e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8015dfc <_strtod_l+0x2b4>
 8015c72:	f04f 0800 	mov.w	r8, #0
 8015c76:	e7e8      	b.n	8015c4a <_strtod_l+0x102>
 8015c78:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015c7c:	f04f 38ff 	mov.w	r8, #4294967295
 8015c80:	e7e3      	b.n	8015c4a <_strtod_l+0x102>
 8015c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c84:	1c5a      	adds	r2, r3, #1
 8015c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8015c88:	785b      	ldrb	r3, [r3, #1]
 8015c8a:	2b30      	cmp	r3, #48	; 0x30
 8015c8c:	d0f9      	beq.n	8015c82 <_strtod_l+0x13a>
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d09e      	beq.n	8015bd0 <_strtod_l+0x88>
 8015c92:	2301      	movs	r3, #1
 8015c94:	9306      	str	r3, [sp, #24]
 8015c96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c98:	930c      	str	r3, [sp, #48]	; 0x30
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	9304      	str	r3, [sp, #16]
 8015c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8015ca0:	461e      	mov	r6, r3
 8015ca2:	220a      	movs	r2, #10
 8015ca4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015ca6:	f890 b000 	ldrb.w	fp, [r0]
 8015caa:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8015cae:	b2d9      	uxtb	r1, r3
 8015cb0:	2909      	cmp	r1, #9
 8015cb2:	d92b      	bls.n	8015d0c <_strtod_l+0x1c4>
 8015cb4:	9908      	ldr	r1, [sp, #32]
 8015cb6:	462a      	mov	r2, r5
 8015cb8:	f7ff ff04 	bl	8015ac4 <strncmp>
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	d035      	beq.n	8015d2c <_strtod_l+0x1e4>
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	465a      	mov	r2, fp
 8015cc4:	4633      	mov	r3, r6
 8015cc6:	4683      	mov	fp, r0
 8015cc8:	4601      	mov	r1, r0
 8015cca:	2a65      	cmp	r2, #101	; 0x65
 8015ccc:	d001      	beq.n	8015cd2 <_strtod_l+0x18a>
 8015cce:	2a45      	cmp	r2, #69	; 0x45
 8015cd0:	d118      	bne.n	8015d04 <_strtod_l+0x1bc>
 8015cd2:	b91b      	cbnz	r3, 8015cdc <_strtod_l+0x194>
 8015cd4:	9b06      	ldr	r3, [sp, #24]
 8015cd6:	4303      	orrs	r3, r0
 8015cd8:	d097      	beq.n	8015c0a <_strtod_l+0xc2>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8015ce0:	f10a 0201 	add.w	r2, sl, #1
 8015ce4:	9217      	str	r2, [sp, #92]	; 0x5c
 8015ce6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8015cea:	2a2b      	cmp	r2, #43	; 0x2b
 8015cec:	d077      	beq.n	8015dde <_strtod_l+0x296>
 8015cee:	2a2d      	cmp	r2, #45	; 0x2d
 8015cf0:	d07d      	beq.n	8015dee <_strtod_l+0x2a6>
 8015cf2:	f04f 0e00 	mov.w	lr, #0
 8015cf6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8015cfa:	2d09      	cmp	r5, #9
 8015cfc:	f240 8084 	bls.w	8015e08 <_strtod_l+0x2c0>
 8015d00:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8015d04:	2500      	movs	r5, #0
 8015d06:	e09f      	b.n	8015e48 <_strtod_l+0x300>
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e7c3      	b.n	8015c94 <_strtod_l+0x14c>
 8015d0c:	2e08      	cmp	r6, #8
 8015d0e:	bfd5      	itete	le
 8015d10:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8015d12:	9904      	ldrgt	r1, [sp, #16]
 8015d14:	fb02 3301 	mlale	r3, r2, r1, r3
 8015d18:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015d1c:	f100 0001 	add.w	r0, r0, #1
 8015d20:	bfd4      	ite	le
 8015d22:	930a      	strle	r3, [sp, #40]	; 0x28
 8015d24:	9304      	strgt	r3, [sp, #16]
 8015d26:	3601      	adds	r6, #1
 8015d28:	9017      	str	r0, [sp, #92]	; 0x5c
 8015d2a:	e7bb      	b.n	8015ca4 <_strtod_l+0x15c>
 8015d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d2e:	195a      	adds	r2, r3, r5
 8015d30:	9217      	str	r2, [sp, #92]	; 0x5c
 8015d32:	5d5a      	ldrb	r2, [r3, r5]
 8015d34:	b3ae      	cbz	r6, 8015da2 <_strtod_l+0x25a>
 8015d36:	4683      	mov	fp, r0
 8015d38:	4633      	mov	r3, r6
 8015d3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015d3e:	2909      	cmp	r1, #9
 8015d40:	d912      	bls.n	8015d68 <_strtod_l+0x220>
 8015d42:	2101      	movs	r1, #1
 8015d44:	e7c1      	b.n	8015cca <_strtod_l+0x182>
 8015d46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d48:	1c5a      	adds	r2, r3, #1
 8015d4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8015d4c:	785a      	ldrb	r2, [r3, #1]
 8015d4e:	3001      	adds	r0, #1
 8015d50:	2a30      	cmp	r2, #48	; 0x30
 8015d52:	d0f8      	beq.n	8015d46 <_strtod_l+0x1fe>
 8015d54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015d58:	2b08      	cmp	r3, #8
 8015d5a:	f200 84b0 	bhi.w	80166be <_strtod_l+0xb76>
 8015d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d60:	930c      	str	r3, [sp, #48]	; 0x30
 8015d62:	4683      	mov	fp, r0
 8015d64:	2000      	movs	r0, #0
 8015d66:	4603      	mov	r3, r0
 8015d68:	3a30      	subs	r2, #48	; 0x30
 8015d6a:	f100 0101 	add.w	r1, r0, #1
 8015d6e:	d012      	beq.n	8015d96 <_strtod_l+0x24e>
 8015d70:	448b      	add	fp, r1
 8015d72:	eb00 0c03 	add.w	ip, r0, r3
 8015d76:	4619      	mov	r1, r3
 8015d78:	250a      	movs	r5, #10
 8015d7a:	4561      	cmp	r1, ip
 8015d7c:	d113      	bne.n	8015da6 <_strtod_l+0x25e>
 8015d7e:	1819      	adds	r1, r3, r0
 8015d80:	2908      	cmp	r1, #8
 8015d82:	f103 0301 	add.w	r3, r3, #1
 8015d86:	4403      	add	r3, r0
 8015d88:	dc1d      	bgt.n	8015dc6 <_strtod_l+0x27e>
 8015d8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d8c:	210a      	movs	r1, #10
 8015d8e:	fb01 2200 	mla	r2, r1, r0, r2
 8015d92:	920a      	str	r2, [sp, #40]	; 0x28
 8015d94:	2100      	movs	r1, #0
 8015d96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015d98:	1c50      	adds	r0, r2, #1
 8015d9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8015d9c:	7852      	ldrb	r2, [r2, #1]
 8015d9e:	4608      	mov	r0, r1
 8015da0:	e7cb      	b.n	8015d3a <_strtod_l+0x1f2>
 8015da2:	4630      	mov	r0, r6
 8015da4:	e7d4      	b.n	8015d50 <_strtod_l+0x208>
 8015da6:	2908      	cmp	r1, #8
 8015da8:	dc04      	bgt.n	8015db4 <_strtod_l+0x26c>
 8015daa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015dac:	436f      	muls	r7, r5
 8015dae:	970a      	str	r7, [sp, #40]	; 0x28
 8015db0:	3101      	adds	r1, #1
 8015db2:	e7e2      	b.n	8015d7a <_strtod_l+0x232>
 8015db4:	f101 0e01 	add.w	lr, r1, #1
 8015db8:	f1be 0f10 	cmp.w	lr, #16
 8015dbc:	bfde      	ittt	le
 8015dbe:	9f04      	ldrle	r7, [sp, #16]
 8015dc0:	436f      	mulle	r7, r5
 8015dc2:	9704      	strle	r7, [sp, #16]
 8015dc4:	e7f4      	b.n	8015db0 <_strtod_l+0x268>
 8015dc6:	2b10      	cmp	r3, #16
 8015dc8:	bfdf      	itttt	le
 8015dca:	9804      	ldrle	r0, [sp, #16]
 8015dcc:	210a      	movle	r1, #10
 8015dce:	fb01 2200 	mlale	r2, r1, r0, r2
 8015dd2:	9204      	strle	r2, [sp, #16]
 8015dd4:	e7de      	b.n	8015d94 <_strtod_l+0x24c>
 8015dd6:	f04f 0b00 	mov.w	fp, #0
 8015dda:	2101      	movs	r1, #1
 8015ddc:	e77a      	b.n	8015cd4 <_strtod_l+0x18c>
 8015dde:	f04f 0e00 	mov.w	lr, #0
 8015de2:	f10a 0202 	add.w	r2, sl, #2
 8015de6:	9217      	str	r2, [sp, #92]	; 0x5c
 8015de8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8015dec:	e783      	b.n	8015cf6 <_strtod_l+0x1ae>
 8015dee:	f04f 0e01 	mov.w	lr, #1
 8015df2:	e7f6      	b.n	8015de2 <_strtod_l+0x29a>
 8015df4:	08021d84 	.word	0x08021d84
 8015df8:	08021ad0 	.word	0x08021ad0
 8015dfc:	7ff00000 	.word	0x7ff00000
 8015e00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e02:	1c55      	adds	r5, r2, #1
 8015e04:	9517      	str	r5, [sp, #92]	; 0x5c
 8015e06:	7852      	ldrb	r2, [r2, #1]
 8015e08:	2a30      	cmp	r2, #48	; 0x30
 8015e0a:	d0f9      	beq.n	8015e00 <_strtod_l+0x2b8>
 8015e0c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8015e10:	2d08      	cmp	r5, #8
 8015e12:	f63f af77 	bhi.w	8015d04 <_strtod_l+0x1bc>
 8015e16:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8015e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e1c:	9208      	str	r2, [sp, #32]
 8015e1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e20:	1c55      	adds	r5, r2, #1
 8015e22:	9517      	str	r5, [sp, #92]	; 0x5c
 8015e24:	7852      	ldrb	r2, [r2, #1]
 8015e26:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8015e2a:	2f09      	cmp	r7, #9
 8015e2c:	d937      	bls.n	8015e9e <_strtod_l+0x356>
 8015e2e:	9f08      	ldr	r7, [sp, #32]
 8015e30:	1bed      	subs	r5, r5, r7
 8015e32:	2d08      	cmp	r5, #8
 8015e34:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8015e38:	dc02      	bgt.n	8015e40 <_strtod_l+0x2f8>
 8015e3a:	4565      	cmp	r5, ip
 8015e3c:	bfa8      	it	ge
 8015e3e:	4665      	movge	r5, ip
 8015e40:	f1be 0f00 	cmp.w	lr, #0
 8015e44:	d000      	beq.n	8015e48 <_strtod_l+0x300>
 8015e46:	426d      	negs	r5, r5
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d14f      	bne.n	8015eec <_strtod_l+0x3a4>
 8015e4c:	9b06      	ldr	r3, [sp, #24]
 8015e4e:	4303      	orrs	r3, r0
 8015e50:	f47f aebe 	bne.w	8015bd0 <_strtod_l+0x88>
 8015e54:	2900      	cmp	r1, #0
 8015e56:	f47f aed8 	bne.w	8015c0a <_strtod_l+0xc2>
 8015e5a:	2a69      	cmp	r2, #105	; 0x69
 8015e5c:	d027      	beq.n	8015eae <_strtod_l+0x366>
 8015e5e:	dc24      	bgt.n	8015eaa <_strtod_l+0x362>
 8015e60:	2a49      	cmp	r2, #73	; 0x49
 8015e62:	d024      	beq.n	8015eae <_strtod_l+0x366>
 8015e64:	2a4e      	cmp	r2, #78	; 0x4e
 8015e66:	f47f aed0 	bne.w	8015c0a <_strtod_l+0xc2>
 8015e6a:	499b      	ldr	r1, [pc, #620]	; (80160d8 <_strtod_l+0x590>)
 8015e6c:	a817      	add	r0, sp, #92	; 0x5c
 8015e6e:	f002 f817 	bl	8017ea0 <__match>
 8015e72:	2800      	cmp	r0, #0
 8015e74:	f43f aec9 	beq.w	8015c0a <_strtod_l+0xc2>
 8015e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2b28      	cmp	r3, #40	; 0x28
 8015e7e:	d12d      	bne.n	8015edc <_strtod_l+0x394>
 8015e80:	4996      	ldr	r1, [pc, #600]	; (80160dc <_strtod_l+0x594>)
 8015e82:	aa1a      	add	r2, sp, #104	; 0x68
 8015e84:	a817      	add	r0, sp, #92	; 0x5c
 8015e86:	f002 f81f 	bl	8017ec8 <__hexnan>
 8015e8a:	2805      	cmp	r0, #5
 8015e8c:	d126      	bne.n	8015edc <_strtod_l+0x394>
 8015e8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8015e94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015e98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015e9c:	e698      	b.n	8015bd0 <_strtod_l+0x88>
 8015e9e:	250a      	movs	r5, #10
 8015ea0:	fb05 250c 	mla	r5, r5, ip, r2
 8015ea4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8015ea8:	e7b9      	b.n	8015e1e <_strtod_l+0x2d6>
 8015eaa:	2a6e      	cmp	r2, #110	; 0x6e
 8015eac:	e7db      	b.n	8015e66 <_strtod_l+0x31e>
 8015eae:	498c      	ldr	r1, [pc, #560]	; (80160e0 <_strtod_l+0x598>)
 8015eb0:	a817      	add	r0, sp, #92	; 0x5c
 8015eb2:	f001 fff5 	bl	8017ea0 <__match>
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	f43f aea7 	beq.w	8015c0a <_strtod_l+0xc2>
 8015ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ebe:	4989      	ldr	r1, [pc, #548]	; (80160e4 <_strtod_l+0x59c>)
 8015ec0:	3b01      	subs	r3, #1
 8015ec2:	a817      	add	r0, sp, #92	; 0x5c
 8015ec4:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ec6:	f001 ffeb 	bl	8017ea0 <__match>
 8015eca:	b910      	cbnz	r0, 8015ed2 <_strtod_l+0x38a>
 8015ecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ece:	3301      	adds	r3, #1
 8015ed0:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ed2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80160f8 <_strtod_l+0x5b0>
 8015ed6:	f04f 0800 	mov.w	r8, #0
 8015eda:	e679      	b.n	8015bd0 <_strtod_l+0x88>
 8015edc:	4882      	ldr	r0, [pc, #520]	; (80160e8 <_strtod_l+0x5a0>)
 8015ede:	f002 ff67 	bl	8018db0 <nan>
 8015ee2:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015ee6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015eea:	e671      	b.n	8015bd0 <_strtod_l+0x88>
 8015eec:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8015ef0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015ef4:	eba5 020b 	sub.w	r2, r5, fp
 8015ef8:	2e00      	cmp	r6, #0
 8015efa:	bf08      	it	eq
 8015efc:	461e      	moveq	r6, r3
 8015efe:	2b10      	cmp	r3, #16
 8015f00:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015f04:	9206      	str	r2, [sp, #24]
 8015f06:	461a      	mov	r2, r3
 8015f08:	bfa8      	it	ge
 8015f0a:	2210      	movge	r2, #16
 8015f0c:	2b09      	cmp	r3, #9
 8015f0e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8015f12:	dd0e      	ble.n	8015f32 <_strtod_l+0x3ea>
 8015f14:	4975      	ldr	r1, [pc, #468]	; (80160ec <_strtod_l+0x5a4>)
 8015f16:	eddd 7a04 	vldr	s15, [sp, #16]
 8015f1a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015f1e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8015f22:	ed9d 5b08 	vldr	d5, [sp, #32]
 8015f26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015f2a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015f2e:	ec59 8b17 	vmov	r8, r9, d7
 8015f32:	2b0f      	cmp	r3, #15
 8015f34:	dc37      	bgt.n	8015fa6 <_strtod_l+0x45e>
 8015f36:	9906      	ldr	r1, [sp, #24]
 8015f38:	2900      	cmp	r1, #0
 8015f3a:	f43f ae49 	beq.w	8015bd0 <_strtod_l+0x88>
 8015f3e:	dd23      	ble.n	8015f88 <_strtod_l+0x440>
 8015f40:	2916      	cmp	r1, #22
 8015f42:	dc0b      	bgt.n	8015f5c <_strtod_l+0x414>
 8015f44:	4b69      	ldr	r3, [pc, #420]	; (80160ec <_strtod_l+0x5a4>)
 8015f46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8015f4a:	ed93 7b00 	vldr	d7, [r3]
 8015f4e:	ec49 8b16 	vmov	d6, r8, r9
 8015f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f56:	ec59 8b17 	vmov	r8, r9, d7
 8015f5a:	e639      	b.n	8015bd0 <_strtod_l+0x88>
 8015f5c:	9806      	ldr	r0, [sp, #24]
 8015f5e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8015f62:	4281      	cmp	r1, r0
 8015f64:	db1f      	blt.n	8015fa6 <_strtod_l+0x45e>
 8015f66:	4a61      	ldr	r2, [pc, #388]	; (80160ec <_strtod_l+0x5a4>)
 8015f68:	f1c3 030f 	rsb	r3, r3, #15
 8015f6c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015f70:	ed91 7b00 	vldr	d7, [r1]
 8015f74:	ec49 8b16 	vmov	d6, r8, r9
 8015f78:	1ac3      	subs	r3, r0, r3
 8015f7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015f7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f82:	ed92 6b00 	vldr	d6, [r2]
 8015f86:	e7e4      	b.n	8015f52 <_strtod_l+0x40a>
 8015f88:	9906      	ldr	r1, [sp, #24]
 8015f8a:	3116      	adds	r1, #22
 8015f8c:	db0b      	blt.n	8015fa6 <_strtod_l+0x45e>
 8015f8e:	4b57      	ldr	r3, [pc, #348]	; (80160ec <_strtod_l+0x5a4>)
 8015f90:	ebab 0505 	sub.w	r5, fp, r5
 8015f94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015f98:	ed95 7b00 	vldr	d7, [r5]
 8015f9c:	ec49 8b16 	vmov	d6, r8, r9
 8015fa0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015fa4:	e7d7      	b.n	8015f56 <_strtod_l+0x40e>
 8015fa6:	9906      	ldr	r1, [sp, #24]
 8015fa8:	1a9a      	subs	r2, r3, r2
 8015faa:	440a      	add	r2, r1
 8015fac:	2a00      	cmp	r2, #0
 8015fae:	dd74      	ble.n	801609a <_strtod_l+0x552>
 8015fb0:	f012 000f 	ands.w	r0, r2, #15
 8015fb4:	d00a      	beq.n	8015fcc <_strtod_l+0x484>
 8015fb6:	494d      	ldr	r1, [pc, #308]	; (80160ec <_strtod_l+0x5a4>)
 8015fb8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015fbc:	ed91 7b00 	vldr	d7, [r1]
 8015fc0:	ec49 8b16 	vmov	d6, r8, r9
 8015fc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015fc8:	ec59 8b17 	vmov	r8, r9, d7
 8015fcc:	f032 020f 	bics.w	r2, r2, #15
 8015fd0:	d04f      	beq.n	8016072 <_strtod_l+0x52a>
 8015fd2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8015fd6:	dd22      	ble.n	801601e <_strtod_l+0x4d6>
 8015fd8:	2500      	movs	r5, #0
 8015fda:	462e      	mov	r6, r5
 8015fdc:	950a      	str	r5, [sp, #40]	; 0x28
 8015fde:	462f      	mov	r7, r5
 8015fe0:	2322      	movs	r3, #34	; 0x22
 8015fe2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80160f8 <_strtod_l+0x5b0>
 8015fe6:	6023      	str	r3, [r4, #0]
 8015fe8:	f04f 0800 	mov.w	r8, #0
 8015fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	f43f adee 	beq.w	8015bd0 <_strtod_l+0x88>
 8015ff4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	f002 f8cc 	bl	8018194 <_Bfree>
 8015ffc:	4639      	mov	r1, r7
 8015ffe:	4620      	mov	r0, r4
 8016000:	f002 f8c8 	bl	8018194 <_Bfree>
 8016004:	4631      	mov	r1, r6
 8016006:	4620      	mov	r0, r4
 8016008:	f002 f8c4 	bl	8018194 <_Bfree>
 801600c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801600e:	4620      	mov	r0, r4
 8016010:	f002 f8c0 	bl	8018194 <_Bfree>
 8016014:	4629      	mov	r1, r5
 8016016:	4620      	mov	r0, r4
 8016018:	f002 f8bc 	bl	8018194 <_Bfree>
 801601c:	e5d8      	b.n	8015bd0 <_strtod_l+0x88>
 801601e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8016022:	2000      	movs	r0, #0
 8016024:	4f32      	ldr	r7, [pc, #200]	; (80160f0 <_strtod_l+0x5a8>)
 8016026:	1112      	asrs	r2, r2, #4
 8016028:	4601      	mov	r1, r0
 801602a:	2a01      	cmp	r2, #1
 801602c:	dc24      	bgt.n	8016078 <_strtod_l+0x530>
 801602e:	b108      	cbz	r0, 8016034 <_strtod_l+0x4ec>
 8016030:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016034:	4a2e      	ldr	r2, [pc, #184]	; (80160f0 <_strtod_l+0x5a8>)
 8016036:	482f      	ldr	r0, [pc, #188]	; (80160f4 <_strtod_l+0x5ac>)
 8016038:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801603c:	ed91 7b00 	vldr	d7, [r1]
 8016040:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016044:	ec49 8b16 	vmov	d6, r8, r9
 8016048:	ee27 7b06 	vmul.f64	d7, d7, d6
 801604c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016050:	9905      	ldr	r1, [sp, #20]
 8016052:	4a29      	ldr	r2, [pc, #164]	; (80160f8 <_strtod_l+0x5b0>)
 8016054:	400a      	ands	r2, r1
 8016056:	4282      	cmp	r2, r0
 8016058:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801605c:	d8bc      	bhi.n	8015fd8 <_strtod_l+0x490>
 801605e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016062:	4282      	cmp	r2, r0
 8016064:	bf86      	itte	hi
 8016066:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80160fc <_strtod_l+0x5b4>
 801606a:	f04f 38ff 	movhi.w	r8, #4294967295
 801606e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016072:	2200      	movs	r2, #0
 8016074:	9204      	str	r2, [sp, #16]
 8016076:	e07f      	b.n	8016178 <_strtod_l+0x630>
 8016078:	f012 0f01 	tst.w	r2, #1
 801607c:	d00a      	beq.n	8016094 <_strtod_l+0x54c>
 801607e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8016082:	ed90 7b00 	vldr	d7, [r0]
 8016086:	ed9d 6b04 	vldr	d6, [sp, #16]
 801608a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801608e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016092:	2001      	movs	r0, #1
 8016094:	3101      	adds	r1, #1
 8016096:	1052      	asrs	r2, r2, #1
 8016098:	e7c7      	b.n	801602a <_strtod_l+0x4e2>
 801609a:	d0ea      	beq.n	8016072 <_strtod_l+0x52a>
 801609c:	4252      	negs	r2, r2
 801609e:	f012 000f 	ands.w	r0, r2, #15
 80160a2:	d00a      	beq.n	80160ba <_strtod_l+0x572>
 80160a4:	4911      	ldr	r1, [pc, #68]	; (80160ec <_strtod_l+0x5a4>)
 80160a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80160aa:	ed91 7b00 	vldr	d7, [r1]
 80160ae:	ec49 8b16 	vmov	d6, r8, r9
 80160b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80160b6:	ec59 8b17 	vmov	r8, r9, d7
 80160ba:	1112      	asrs	r2, r2, #4
 80160bc:	d0d9      	beq.n	8016072 <_strtod_l+0x52a>
 80160be:	2a1f      	cmp	r2, #31
 80160c0:	dd1e      	ble.n	8016100 <_strtod_l+0x5b8>
 80160c2:	2500      	movs	r5, #0
 80160c4:	462e      	mov	r6, r5
 80160c6:	950a      	str	r5, [sp, #40]	; 0x28
 80160c8:	462f      	mov	r7, r5
 80160ca:	2322      	movs	r3, #34	; 0x22
 80160cc:	f04f 0800 	mov.w	r8, #0
 80160d0:	f04f 0900 	mov.w	r9, #0
 80160d4:	6023      	str	r3, [r4, #0]
 80160d6:	e789      	b.n	8015fec <_strtod_l+0x4a4>
 80160d8:	08021aa2 	.word	0x08021aa2
 80160dc:	08021ae4 	.word	0x08021ae4
 80160e0:	08021a9a 	.word	0x08021a9a
 80160e4:	08021c24 	.word	0x08021c24
 80160e8:	08021a7e 	.word	0x08021a7e
 80160ec:	08021e20 	.word	0x08021e20
 80160f0:	08021df8 	.word	0x08021df8
 80160f4:	7ca00000 	.word	0x7ca00000
 80160f8:	7ff00000 	.word	0x7ff00000
 80160fc:	7fefffff 	.word	0x7fefffff
 8016100:	f012 0110 	ands.w	r1, r2, #16
 8016104:	bf18      	it	ne
 8016106:	216a      	movne	r1, #106	; 0x6a
 8016108:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801610c:	9104      	str	r1, [sp, #16]
 801610e:	49c0      	ldr	r1, [pc, #768]	; (8016410 <_strtod_l+0x8c8>)
 8016110:	2000      	movs	r0, #0
 8016112:	07d7      	lsls	r7, r2, #31
 8016114:	d508      	bpl.n	8016128 <_strtod_l+0x5e0>
 8016116:	ed9d 6b08 	vldr	d6, [sp, #32]
 801611a:	ed91 7b00 	vldr	d7, [r1]
 801611e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016122:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016126:	2001      	movs	r0, #1
 8016128:	1052      	asrs	r2, r2, #1
 801612a:	f101 0108 	add.w	r1, r1, #8
 801612e:	d1f0      	bne.n	8016112 <_strtod_l+0x5ca>
 8016130:	b108      	cbz	r0, 8016136 <_strtod_l+0x5ee>
 8016132:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8016136:	9a04      	ldr	r2, [sp, #16]
 8016138:	b1ba      	cbz	r2, 801616a <_strtod_l+0x622>
 801613a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801613e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8016142:	2a00      	cmp	r2, #0
 8016144:	4649      	mov	r1, r9
 8016146:	dd10      	ble.n	801616a <_strtod_l+0x622>
 8016148:	2a1f      	cmp	r2, #31
 801614a:	f340 8132 	ble.w	80163b2 <_strtod_l+0x86a>
 801614e:	2a34      	cmp	r2, #52	; 0x34
 8016150:	bfde      	ittt	le
 8016152:	3a20      	suble	r2, #32
 8016154:	f04f 30ff 	movle.w	r0, #4294967295
 8016158:	fa00 f202 	lslle.w	r2, r0, r2
 801615c:	f04f 0800 	mov.w	r8, #0
 8016160:	bfcc      	ite	gt
 8016162:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016166:	ea02 0901 	andle.w	r9, r2, r1
 801616a:	ec49 8b17 	vmov	d7, r8, r9
 801616e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016176:	d0a4      	beq.n	80160c2 <_strtod_l+0x57a>
 8016178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801617a:	9200      	str	r2, [sp, #0]
 801617c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801617e:	4632      	mov	r2, r6
 8016180:	4620      	mov	r0, r4
 8016182:	f002 f873 	bl	801826c <__s2b>
 8016186:	900a      	str	r0, [sp, #40]	; 0x28
 8016188:	2800      	cmp	r0, #0
 801618a:	f43f af25 	beq.w	8015fd8 <_strtod_l+0x490>
 801618e:	9b06      	ldr	r3, [sp, #24]
 8016190:	ebab 0505 	sub.w	r5, fp, r5
 8016194:	2b00      	cmp	r3, #0
 8016196:	bfb4      	ite	lt
 8016198:	462b      	movlt	r3, r5
 801619a:	2300      	movge	r3, #0
 801619c:	930c      	str	r3, [sp, #48]	; 0x30
 801619e:	9b06      	ldr	r3, [sp, #24]
 80161a0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80163f8 <_strtod_l+0x8b0>
 80161a4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8016400 <_strtod_l+0x8b8>
 80161a8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8016408 <_strtod_l+0x8c0>
 80161ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161b0:	2500      	movs	r5, #0
 80161b2:	9312      	str	r3, [sp, #72]	; 0x48
 80161b4:	462e      	mov	r6, r5
 80161b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b8:	4620      	mov	r0, r4
 80161ba:	6859      	ldr	r1, [r3, #4]
 80161bc:	f001 ffaa 	bl	8018114 <_Balloc>
 80161c0:	4607      	mov	r7, r0
 80161c2:	2800      	cmp	r0, #0
 80161c4:	f43f af0c 	beq.w	8015fe0 <_strtod_l+0x498>
 80161c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ca:	691a      	ldr	r2, [r3, #16]
 80161cc:	3202      	adds	r2, #2
 80161ce:	f103 010c 	add.w	r1, r3, #12
 80161d2:	0092      	lsls	r2, r2, #2
 80161d4:	300c      	adds	r0, #12
 80161d6:	f7fe fb37 	bl	8014848 <memcpy>
 80161da:	ec49 8b10 	vmov	d0, r8, r9
 80161de:	aa1a      	add	r2, sp, #104	; 0x68
 80161e0:	a919      	add	r1, sp, #100	; 0x64
 80161e2:	4620      	mov	r0, r4
 80161e4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80161e8:	f002 fb7c 	bl	80188e4 <__d2b>
 80161ec:	9018      	str	r0, [sp, #96]	; 0x60
 80161ee:	2800      	cmp	r0, #0
 80161f0:	f43f aef6 	beq.w	8015fe0 <_strtod_l+0x498>
 80161f4:	2101      	movs	r1, #1
 80161f6:	4620      	mov	r0, r4
 80161f8:	f002 f8d2 	bl	80183a0 <__i2b>
 80161fc:	4606      	mov	r6, r0
 80161fe:	2800      	cmp	r0, #0
 8016200:	f43f aeee 	beq.w	8015fe0 <_strtod_l+0x498>
 8016204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016206:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016208:	2b00      	cmp	r3, #0
 801620a:	bfab      	itete	ge
 801620c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801620e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8016210:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8016214:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8016218:	bfac      	ite	ge
 801621a:	eb03 0b02 	addge.w	fp, r3, r2
 801621e:	eba2 0a03 	sublt.w	sl, r2, r3
 8016222:	9a04      	ldr	r2, [sp, #16]
 8016224:	1a9b      	subs	r3, r3, r2
 8016226:	440b      	add	r3, r1
 8016228:	4a7a      	ldr	r2, [pc, #488]	; (8016414 <_strtod_l+0x8cc>)
 801622a:	3b01      	subs	r3, #1
 801622c:	4293      	cmp	r3, r2
 801622e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8016232:	f280 80d1 	bge.w	80163d8 <_strtod_l+0x890>
 8016236:	1ad2      	subs	r2, r2, r3
 8016238:	2a1f      	cmp	r2, #31
 801623a:	eba1 0102 	sub.w	r1, r1, r2
 801623e:	f04f 0001 	mov.w	r0, #1
 8016242:	f300 80bd 	bgt.w	80163c0 <_strtod_l+0x878>
 8016246:	fa00 f302 	lsl.w	r3, r0, r2
 801624a:	930e      	str	r3, [sp, #56]	; 0x38
 801624c:	2300      	movs	r3, #0
 801624e:	930d      	str	r3, [sp, #52]	; 0x34
 8016250:	eb0b 0301 	add.w	r3, fp, r1
 8016254:	9a04      	ldr	r2, [sp, #16]
 8016256:	459b      	cmp	fp, r3
 8016258:	448a      	add	sl, r1
 801625a:	4492      	add	sl, r2
 801625c:	465a      	mov	r2, fp
 801625e:	bfa8      	it	ge
 8016260:	461a      	movge	r2, r3
 8016262:	4552      	cmp	r2, sl
 8016264:	bfa8      	it	ge
 8016266:	4652      	movge	r2, sl
 8016268:	2a00      	cmp	r2, #0
 801626a:	bfc2      	ittt	gt
 801626c:	1a9b      	subgt	r3, r3, r2
 801626e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016272:	ebab 0b02 	subgt.w	fp, fp, r2
 8016276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016278:	2a00      	cmp	r2, #0
 801627a:	dd18      	ble.n	80162ae <_strtod_l+0x766>
 801627c:	4631      	mov	r1, r6
 801627e:	4620      	mov	r0, r4
 8016280:	9315      	str	r3, [sp, #84]	; 0x54
 8016282:	f002 f949 	bl	8018518 <__pow5mult>
 8016286:	4606      	mov	r6, r0
 8016288:	2800      	cmp	r0, #0
 801628a:	f43f aea9 	beq.w	8015fe0 <_strtod_l+0x498>
 801628e:	4601      	mov	r1, r0
 8016290:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016292:	4620      	mov	r0, r4
 8016294:	f002 f89a 	bl	80183cc <__multiply>
 8016298:	9014      	str	r0, [sp, #80]	; 0x50
 801629a:	2800      	cmp	r0, #0
 801629c:	f43f aea0 	beq.w	8015fe0 <_strtod_l+0x498>
 80162a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80162a2:	4620      	mov	r0, r4
 80162a4:	f001 ff76 	bl	8018194 <_Bfree>
 80162a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80162aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162ac:	9218      	str	r2, [sp, #96]	; 0x60
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	f300 8097 	bgt.w	80163e2 <_strtod_l+0x89a>
 80162b4:	9b06      	ldr	r3, [sp, #24]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	dd08      	ble.n	80162cc <_strtod_l+0x784>
 80162ba:	4639      	mov	r1, r7
 80162bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162be:	4620      	mov	r0, r4
 80162c0:	f002 f92a 	bl	8018518 <__pow5mult>
 80162c4:	4607      	mov	r7, r0
 80162c6:	2800      	cmp	r0, #0
 80162c8:	f43f ae8a 	beq.w	8015fe0 <_strtod_l+0x498>
 80162cc:	f1ba 0f00 	cmp.w	sl, #0
 80162d0:	dd08      	ble.n	80162e4 <_strtod_l+0x79c>
 80162d2:	4639      	mov	r1, r7
 80162d4:	4652      	mov	r2, sl
 80162d6:	4620      	mov	r0, r4
 80162d8:	f002 f978 	bl	80185cc <__lshift>
 80162dc:	4607      	mov	r7, r0
 80162de:	2800      	cmp	r0, #0
 80162e0:	f43f ae7e 	beq.w	8015fe0 <_strtod_l+0x498>
 80162e4:	f1bb 0f00 	cmp.w	fp, #0
 80162e8:	dd08      	ble.n	80162fc <_strtod_l+0x7b4>
 80162ea:	4631      	mov	r1, r6
 80162ec:	465a      	mov	r2, fp
 80162ee:	4620      	mov	r0, r4
 80162f0:	f002 f96c 	bl	80185cc <__lshift>
 80162f4:	4606      	mov	r6, r0
 80162f6:	2800      	cmp	r0, #0
 80162f8:	f43f ae72 	beq.w	8015fe0 <_strtod_l+0x498>
 80162fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80162fe:	463a      	mov	r2, r7
 8016300:	4620      	mov	r0, r4
 8016302:	f002 f9eb 	bl	80186dc <__mdiff>
 8016306:	4605      	mov	r5, r0
 8016308:	2800      	cmp	r0, #0
 801630a:	f43f ae69 	beq.w	8015fe0 <_strtod_l+0x498>
 801630e:	2300      	movs	r3, #0
 8016310:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8016314:	60c3      	str	r3, [r0, #12]
 8016316:	4631      	mov	r1, r6
 8016318:	f002 f9c4 	bl	80186a4 <__mcmp>
 801631c:	2800      	cmp	r0, #0
 801631e:	da7f      	bge.n	8016420 <_strtod_l+0x8d8>
 8016320:	ea5a 0308 	orrs.w	r3, sl, r8
 8016324:	f040 80a5 	bne.w	8016472 <_strtod_l+0x92a>
 8016328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801632c:	2b00      	cmp	r3, #0
 801632e:	f040 80a0 	bne.w	8016472 <_strtod_l+0x92a>
 8016332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016336:	0d1b      	lsrs	r3, r3, #20
 8016338:	051b      	lsls	r3, r3, #20
 801633a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801633e:	f240 8098 	bls.w	8016472 <_strtod_l+0x92a>
 8016342:	696b      	ldr	r3, [r5, #20]
 8016344:	b91b      	cbnz	r3, 801634e <_strtod_l+0x806>
 8016346:	692b      	ldr	r3, [r5, #16]
 8016348:	2b01      	cmp	r3, #1
 801634a:	f340 8092 	ble.w	8016472 <_strtod_l+0x92a>
 801634e:	4629      	mov	r1, r5
 8016350:	2201      	movs	r2, #1
 8016352:	4620      	mov	r0, r4
 8016354:	f002 f93a 	bl	80185cc <__lshift>
 8016358:	4631      	mov	r1, r6
 801635a:	4605      	mov	r5, r0
 801635c:	f002 f9a2 	bl	80186a4 <__mcmp>
 8016360:	2800      	cmp	r0, #0
 8016362:	f340 8086 	ble.w	8016472 <_strtod_l+0x92a>
 8016366:	9904      	ldr	r1, [sp, #16]
 8016368:	4a2b      	ldr	r2, [pc, #172]	; (8016418 <_strtod_l+0x8d0>)
 801636a:	464b      	mov	r3, r9
 801636c:	2900      	cmp	r1, #0
 801636e:	f000 80a1 	beq.w	80164b4 <_strtod_l+0x96c>
 8016372:	ea02 0109 	and.w	r1, r2, r9
 8016376:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801637a:	f300 809b 	bgt.w	80164b4 <_strtod_l+0x96c>
 801637e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016382:	f77f aea2 	ble.w	80160ca <_strtod_l+0x582>
 8016386:	4a25      	ldr	r2, [pc, #148]	; (801641c <_strtod_l+0x8d4>)
 8016388:	2300      	movs	r3, #0
 801638a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801638e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8016392:	ec49 8b17 	vmov	d7, r8, r9
 8016396:	ee27 7b06 	vmul.f64	d7, d7, d6
 801639a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801639e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80163a2:	4313      	orrs	r3, r2
 80163a4:	bf08      	it	eq
 80163a6:	2322      	moveq	r3, #34	; 0x22
 80163a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80163ac:	bf08      	it	eq
 80163ae:	6023      	streq	r3, [r4, #0]
 80163b0:	e620      	b.n	8015ff4 <_strtod_l+0x4ac>
 80163b2:	f04f 31ff 	mov.w	r1, #4294967295
 80163b6:	fa01 f202 	lsl.w	r2, r1, r2
 80163ba:	ea02 0808 	and.w	r8, r2, r8
 80163be:	e6d4      	b.n	801616a <_strtod_l+0x622>
 80163c0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80163c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80163c8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80163cc:	33e2      	adds	r3, #226	; 0xe2
 80163ce:	fa00 f303 	lsl.w	r3, r0, r3
 80163d2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80163d6:	e73b      	b.n	8016250 <_strtod_l+0x708>
 80163d8:	2000      	movs	r0, #0
 80163da:	2301      	movs	r3, #1
 80163dc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80163e0:	e736      	b.n	8016250 <_strtod_l+0x708>
 80163e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80163e4:	461a      	mov	r2, r3
 80163e6:	4620      	mov	r0, r4
 80163e8:	f002 f8f0 	bl	80185cc <__lshift>
 80163ec:	9018      	str	r0, [sp, #96]	; 0x60
 80163ee:	2800      	cmp	r0, #0
 80163f0:	f47f af60 	bne.w	80162b4 <_strtod_l+0x76c>
 80163f4:	e5f4      	b.n	8015fe0 <_strtod_l+0x498>
 80163f6:	bf00      	nop
 80163f8:	94a03595 	.word	0x94a03595
 80163fc:	3fcfffff 	.word	0x3fcfffff
 8016400:	94a03595 	.word	0x94a03595
 8016404:	3fdfffff 	.word	0x3fdfffff
 8016408:	35afe535 	.word	0x35afe535
 801640c:	3fe00000 	.word	0x3fe00000
 8016410:	08021af8 	.word	0x08021af8
 8016414:	fffffc02 	.word	0xfffffc02
 8016418:	7ff00000 	.word	0x7ff00000
 801641c:	39500000 	.word	0x39500000
 8016420:	46cb      	mov	fp, r9
 8016422:	d165      	bne.n	80164f0 <_strtod_l+0x9a8>
 8016424:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016428:	f1ba 0f00 	cmp.w	sl, #0
 801642c:	d02a      	beq.n	8016484 <_strtod_l+0x93c>
 801642e:	4aaa      	ldr	r2, [pc, #680]	; (80166d8 <_strtod_l+0xb90>)
 8016430:	4293      	cmp	r3, r2
 8016432:	d12b      	bne.n	801648c <_strtod_l+0x944>
 8016434:	9b04      	ldr	r3, [sp, #16]
 8016436:	4641      	mov	r1, r8
 8016438:	b1fb      	cbz	r3, 801647a <_strtod_l+0x932>
 801643a:	4aa8      	ldr	r2, [pc, #672]	; (80166dc <_strtod_l+0xb94>)
 801643c:	ea09 0202 	and.w	r2, r9, r2
 8016440:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016444:	f04f 30ff 	mov.w	r0, #4294967295
 8016448:	d81a      	bhi.n	8016480 <_strtod_l+0x938>
 801644a:	0d12      	lsrs	r2, r2, #20
 801644c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016450:	fa00 f303 	lsl.w	r3, r0, r3
 8016454:	4299      	cmp	r1, r3
 8016456:	d119      	bne.n	801648c <_strtod_l+0x944>
 8016458:	4ba1      	ldr	r3, [pc, #644]	; (80166e0 <_strtod_l+0xb98>)
 801645a:	459b      	cmp	fp, r3
 801645c:	d102      	bne.n	8016464 <_strtod_l+0x91c>
 801645e:	3101      	adds	r1, #1
 8016460:	f43f adbe 	beq.w	8015fe0 <_strtod_l+0x498>
 8016464:	4b9d      	ldr	r3, [pc, #628]	; (80166dc <_strtod_l+0xb94>)
 8016466:	ea0b 0303 	and.w	r3, fp, r3
 801646a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801646e:	f04f 0800 	mov.w	r8, #0
 8016472:	9b04      	ldr	r3, [sp, #16]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d186      	bne.n	8016386 <_strtod_l+0x83e>
 8016478:	e5bc      	b.n	8015ff4 <_strtod_l+0x4ac>
 801647a:	f04f 33ff 	mov.w	r3, #4294967295
 801647e:	e7e9      	b.n	8016454 <_strtod_l+0x90c>
 8016480:	4603      	mov	r3, r0
 8016482:	e7e7      	b.n	8016454 <_strtod_l+0x90c>
 8016484:	ea53 0308 	orrs.w	r3, r3, r8
 8016488:	f43f af6d 	beq.w	8016366 <_strtod_l+0x81e>
 801648c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801648e:	b1db      	cbz	r3, 80164c8 <_strtod_l+0x980>
 8016490:	ea13 0f0b 	tst.w	r3, fp
 8016494:	d0ed      	beq.n	8016472 <_strtod_l+0x92a>
 8016496:	9a04      	ldr	r2, [sp, #16]
 8016498:	4640      	mov	r0, r8
 801649a:	4649      	mov	r1, r9
 801649c:	f1ba 0f00 	cmp.w	sl, #0
 80164a0:	d016      	beq.n	80164d0 <_strtod_l+0x988>
 80164a2:	f7ff fb34 	bl	8015b0e <sulp>
 80164a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80164aa:	ee37 7b00 	vadd.f64	d7, d7, d0
 80164ae:	ec59 8b17 	vmov	r8, r9, d7
 80164b2:	e7de      	b.n	8016472 <_strtod_l+0x92a>
 80164b4:	4013      	ands	r3, r2
 80164b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80164ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80164be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80164c2:	f04f 38ff 	mov.w	r8, #4294967295
 80164c6:	e7d4      	b.n	8016472 <_strtod_l+0x92a>
 80164c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164ca:	ea13 0f08 	tst.w	r3, r8
 80164ce:	e7e1      	b.n	8016494 <_strtod_l+0x94c>
 80164d0:	f7ff fb1d 	bl	8015b0e <sulp>
 80164d4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80164d8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80164dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80164e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80164e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80164ec:	d1c1      	bne.n	8016472 <_strtod_l+0x92a>
 80164ee:	e5ec      	b.n	80160ca <_strtod_l+0x582>
 80164f0:	4631      	mov	r1, r6
 80164f2:	4628      	mov	r0, r5
 80164f4:	f002 fa52 	bl	801899c <__ratio>
 80164f8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80164fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016504:	d867      	bhi.n	80165d6 <_strtod_l+0xa8e>
 8016506:	f1ba 0f00 	cmp.w	sl, #0
 801650a:	d044      	beq.n	8016596 <_strtod_l+0xa4e>
 801650c:	4b75      	ldr	r3, [pc, #468]	; (80166e4 <_strtod_l+0xb9c>)
 801650e:	2200      	movs	r2, #0
 8016510:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8016514:	4971      	ldr	r1, [pc, #452]	; (80166dc <_strtod_l+0xb94>)
 8016516:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80166f0 <_strtod_l+0xba8>
 801651a:	ea0b 0001 	and.w	r0, fp, r1
 801651e:	4560      	cmp	r0, ip
 8016520:	900d      	str	r0, [sp, #52]	; 0x34
 8016522:	f040 808b 	bne.w	801663c <_strtod_l+0xaf4>
 8016526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801652a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801652e:	ec49 8b10 	vmov	d0, r8, r9
 8016532:	ec43 2b1c 	vmov	d12, r2, r3
 8016536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801653a:	f002 f957 	bl	80187ec <__ulp>
 801653e:	ec49 8b1d 	vmov	d13, r8, r9
 8016542:	eeac db00 	vfma.f64	d13, d12, d0
 8016546:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801654a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801654c:	4963      	ldr	r1, [pc, #396]	; (80166dc <_strtod_l+0xb94>)
 801654e:	4a66      	ldr	r2, [pc, #408]	; (80166e8 <_strtod_l+0xba0>)
 8016550:	4019      	ands	r1, r3
 8016552:	4291      	cmp	r1, r2
 8016554:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8016558:	d947      	bls.n	80165ea <_strtod_l+0xaa2>
 801655a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801655c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016560:	4293      	cmp	r3, r2
 8016562:	d103      	bne.n	801656c <_strtod_l+0xa24>
 8016564:	9b08      	ldr	r3, [sp, #32]
 8016566:	3301      	adds	r3, #1
 8016568:	f43f ad3a 	beq.w	8015fe0 <_strtod_l+0x498>
 801656c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80166e0 <_strtod_l+0xb98>
 8016570:	f04f 38ff 	mov.w	r8, #4294967295
 8016574:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016576:	4620      	mov	r0, r4
 8016578:	f001 fe0c 	bl	8018194 <_Bfree>
 801657c:	4639      	mov	r1, r7
 801657e:	4620      	mov	r0, r4
 8016580:	f001 fe08 	bl	8018194 <_Bfree>
 8016584:	4631      	mov	r1, r6
 8016586:	4620      	mov	r0, r4
 8016588:	f001 fe04 	bl	8018194 <_Bfree>
 801658c:	4629      	mov	r1, r5
 801658e:	4620      	mov	r0, r4
 8016590:	f001 fe00 	bl	8018194 <_Bfree>
 8016594:	e60f      	b.n	80161b6 <_strtod_l+0x66e>
 8016596:	f1b8 0f00 	cmp.w	r8, #0
 801659a:	d112      	bne.n	80165c2 <_strtod_l+0xa7a>
 801659c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165a0:	b9b3      	cbnz	r3, 80165d0 <_strtod_l+0xa88>
 80165a2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80165a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80165aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80165b2:	d401      	bmi.n	80165b8 <_strtod_l+0xa70>
 80165b4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80165b8:	eeb1 7b48 	vneg.f64	d7, d8
 80165bc:	ec53 2b17 	vmov	r2, r3, d7
 80165c0:	e7a8      	b.n	8016514 <_strtod_l+0x9cc>
 80165c2:	f1b8 0f01 	cmp.w	r8, #1
 80165c6:	d103      	bne.n	80165d0 <_strtod_l+0xa88>
 80165c8:	f1b9 0f00 	cmp.w	r9, #0
 80165cc:	f43f ad7d 	beq.w	80160ca <_strtod_l+0x582>
 80165d0:	4b46      	ldr	r3, [pc, #280]	; (80166ec <_strtod_l+0xba4>)
 80165d2:	2200      	movs	r2, #0
 80165d4:	e79c      	b.n	8016510 <_strtod_l+0x9c8>
 80165d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80165da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80165de:	f1ba 0f00 	cmp.w	sl, #0
 80165e2:	d0e9      	beq.n	80165b8 <_strtod_l+0xa70>
 80165e4:	ec53 2b18 	vmov	r2, r3, d8
 80165e8:	e794      	b.n	8016514 <_strtod_l+0x9cc>
 80165ea:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80165ee:	9b04      	ldr	r3, [sp, #16]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d1bf      	bne.n	8016574 <_strtod_l+0xa2c>
 80165f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80165f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165fa:	0d1b      	lsrs	r3, r3, #20
 80165fc:	051b      	lsls	r3, r3, #20
 80165fe:	429a      	cmp	r2, r3
 8016600:	d1b8      	bne.n	8016574 <_strtod_l+0xa2c>
 8016602:	ec51 0b18 	vmov	r0, r1, d8
 8016606:	f7ea f8a7 	bl	8000758 <__aeabi_d2lz>
 801660a:	f7ea f85f 	bl	80006cc <__aeabi_l2d>
 801660e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016612:	ec41 0b17 	vmov	d7, r0, r1
 8016616:	ea43 0308 	orr.w	r3, r3, r8
 801661a:	ea53 030a 	orrs.w	r3, r3, sl
 801661e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016622:	d03e      	beq.n	80166a2 <_strtod_l+0xb5a>
 8016624:	eeb4 8bca 	vcmpe.f64	d8, d10
 8016628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801662c:	f53f ace2 	bmi.w	8015ff4 <_strtod_l+0x4ac>
 8016630:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016638:	dd9c      	ble.n	8016574 <_strtod_l+0xa2c>
 801663a:	e4db      	b.n	8015ff4 <_strtod_l+0x4ac>
 801663c:	9904      	ldr	r1, [sp, #16]
 801663e:	b301      	cbz	r1, 8016682 <_strtod_l+0xb3a>
 8016640:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016642:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8016646:	d81c      	bhi.n	8016682 <_strtod_l+0xb3a>
 8016648:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80166d0 <_strtod_l+0xb88>
 801664c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016654:	d811      	bhi.n	801667a <_strtod_l+0xb32>
 8016656:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801665a:	ee18 3a10 	vmov	r3, s16
 801665e:	2b01      	cmp	r3, #1
 8016660:	bf38      	it	cc
 8016662:	2301      	movcc	r3, #1
 8016664:	ee08 3a10 	vmov	s16, r3
 8016668:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801666c:	f1ba 0f00 	cmp.w	sl, #0
 8016670:	d114      	bne.n	801669c <_strtod_l+0xb54>
 8016672:	eeb1 7b48 	vneg.f64	d7, d8
 8016676:	ec53 2b17 	vmov	r2, r3, d7
 801667a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801667c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8016680:	1a0b      	subs	r3, r1, r0
 8016682:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016686:	ec43 2b1c 	vmov	d12, r2, r3
 801668a:	f002 f8af 	bl	80187ec <__ulp>
 801668e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8016692:	eeac 7b00 	vfma.f64	d7, d12, d0
 8016696:	ec59 8b17 	vmov	r8, r9, d7
 801669a:	e7a8      	b.n	80165ee <_strtod_l+0xaa6>
 801669c:	ec53 2b18 	vmov	r2, r3, d8
 80166a0:	e7eb      	b.n	801667a <_strtod_l+0xb32>
 80166a2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80166a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166aa:	f57f af63 	bpl.w	8016574 <_strtod_l+0xa2c>
 80166ae:	e4a1      	b.n	8015ff4 <_strtod_l+0x4ac>
 80166b0:	2300      	movs	r3, #0
 80166b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80166b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80166b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166b8:	6013      	str	r3, [r2, #0]
 80166ba:	f7ff ba8d 	b.w	8015bd8 <_strtod_l+0x90>
 80166be:	2a65      	cmp	r2, #101	; 0x65
 80166c0:	f43f ab89 	beq.w	8015dd6 <_strtod_l+0x28e>
 80166c4:	2a45      	cmp	r2, #69	; 0x45
 80166c6:	f43f ab86 	beq.w	8015dd6 <_strtod_l+0x28e>
 80166ca:	2101      	movs	r1, #1
 80166cc:	f7ff bbbe 	b.w	8015e4c <_strtod_l+0x304>
 80166d0:	ffc00000 	.word	0xffc00000
 80166d4:	41dfffff 	.word	0x41dfffff
 80166d8:	000fffff 	.word	0x000fffff
 80166dc:	7ff00000 	.word	0x7ff00000
 80166e0:	7fefffff 	.word	0x7fefffff
 80166e4:	3ff00000 	.word	0x3ff00000
 80166e8:	7c9fffff 	.word	0x7c9fffff
 80166ec:	bff00000 	.word	0xbff00000
 80166f0:	7fe00000 	.word	0x7fe00000

080166f4 <_strtod_r>:
 80166f4:	4b01      	ldr	r3, [pc, #4]	; (80166fc <_strtod_r+0x8>)
 80166f6:	f7ff ba27 	b.w	8015b48 <_strtod_l>
 80166fa:	bf00      	nop
 80166fc:	2400a16c 	.word	0x2400a16c

08016700 <_strtol_l.isra.0>:
 8016700:	2b01      	cmp	r3, #1
 8016702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016706:	d001      	beq.n	801670c <_strtol_l.isra.0+0xc>
 8016708:	2b24      	cmp	r3, #36	; 0x24
 801670a:	d906      	bls.n	801671a <_strtol_l.isra.0+0x1a>
 801670c:	f7fe f850 	bl	80147b0 <__errno>
 8016710:	2316      	movs	r3, #22
 8016712:	6003      	str	r3, [r0, #0]
 8016714:	2000      	movs	r0, #0
 8016716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671a:	4f3a      	ldr	r7, [pc, #232]	; (8016804 <_strtol_l.isra.0+0x104>)
 801671c:	468e      	mov	lr, r1
 801671e:	4676      	mov	r6, lr
 8016720:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016724:	5de5      	ldrb	r5, [r4, r7]
 8016726:	f015 0508 	ands.w	r5, r5, #8
 801672a:	d1f8      	bne.n	801671e <_strtol_l.isra.0+0x1e>
 801672c:	2c2d      	cmp	r4, #45	; 0x2d
 801672e:	d134      	bne.n	801679a <_strtol_l.isra.0+0x9a>
 8016730:	f89e 4000 	ldrb.w	r4, [lr]
 8016734:	f04f 0801 	mov.w	r8, #1
 8016738:	f106 0e02 	add.w	lr, r6, #2
 801673c:	2b00      	cmp	r3, #0
 801673e:	d05c      	beq.n	80167fa <_strtol_l.isra.0+0xfa>
 8016740:	2b10      	cmp	r3, #16
 8016742:	d10c      	bne.n	801675e <_strtol_l.isra.0+0x5e>
 8016744:	2c30      	cmp	r4, #48	; 0x30
 8016746:	d10a      	bne.n	801675e <_strtol_l.isra.0+0x5e>
 8016748:	f89e 4000 	ldrb.w	r4, [lr]
 801674c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016750:	2c58      	cmp	r4, #88	; 0x58
 8016752:	d14d      	bne.n	80167f0 <_strtol_l.isra.0+0xf0>
 8016754:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016758:	2310      	movs	r3, #16
 801675a:	f10e 0e02 	add.w	lr, lr, #2
 801675e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016762:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016766:	2600      	movs	r6, #0
 8016768:	fbbc f9f3 	udiv	r9, ip, r3
 801676c:	4635      	mov	r5, r6
 801676e:	fb03 ca19 	mls	sl, r3, r9, ip
 8016772:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016776:	2f09      	cmp	r7, #9
 8016778:	d818      	bhi.n	80167ac <_strtol_l.isra.0+0xac>
 801677a:	463c      	mov	r4, r7
 801677c:	42a3      	cmp	r3, r4
 801677e:	dd24      	ble.n	80167ca <_strtol_l.isra.0+0xca>
 8016780:	2e00      	cmp	r6, #0
 8016782:	db1f      	blt.n	80167c4 <_strtol_l.isra.0+0xc4>
 8016784:	45a9      	cmp	r9, r5
 8016786:	d31d      	bcc.n	80167c4 <_strtol_l.isra.0+0xc4>
 8016788:	d101      	bne.n	801678e <_strtol_l.isra.0+0x8e>
 801678a:	45a2      	cmp	sl, r4
 801678c:	db1a      	blt.n	80167c4 <_strtol_l.isra.0+0xc4>
 801678e:	fb05 4503 	mla	r5, r5, r3, r4
 8016792:	2601      	movs	r6, #1
 8016794:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016798:	e7eb      	b.n	8016772 <_strtol_l.isra.0+0x72>
 801679a:	2c2b      	cmp	r4, #43	; 0x2b
 801679c:	bf08      	it	eq
 801679e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80167a2:	46a8      	mov	r8, r5
 80167a4:	bf08      	it	eq
 80167a6:	f106 0e02 	addeq.w	lr, r6, #2
 80167aa:	e7c7      	b.n	801673c <_strtol_l.isra.0+0x3c>
 80167ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80167b0:	2f19      	cmp	r7, #25
 80167b2:	d801      	bhi.n	80167b8 <_strtol_l.isra.0+0xb8>
 80167b4:	3c37      	subs	r4, #55	; 0x37
 80167b6:	e7e1      	b.n	801677c <_strtol_l.isra.0+0x7c>
 80167b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80167bc:	2f19      	cmp	r7, #25
 80167be:	d804      	bhi.n	80167ca <_strtol_l.isra.0+0xca>
 80167c0:	3c57      	subs	r4, #87	; 0x57
 80167c2:	e7db      	b.n	801677c <_strtol_l.isra.0+0x7c>
 80167c4:	f04f 36ff 	mov.w	r6, #4294967295
 80167c8:	e7e4      	b.n	8016794 <_strtol_l.isra.0+0x94>
 80167ca:	2e00      	cmp	r6, #0
 80167cc:	da05      	bge.n	80167da <_strtol_l.isra.0+0xda>
 80167ce:	2322      	movs	r3, #34	; 0x22
 80167d0:	6003      	str	r3, [r0, #0]
 80167d2:	4665      	mov	r5, ip
 80167d4:	b942      	cbnz	r2, 80167e8 <_strtol_l.isra.0+0xe8>
 80167d6:	4628      	mov	r0, r5
 80167d8:	e79d      	b.n	8016716 <_strtol_l.isra.0+0x16>
 80167da:	f1b8 0f00 	cmp.w	r8, #0
 80167de:	d000      	beq.n	80167e2 <_strtol_l.isra.0+0xe2>
 80167e0:	426d      	negs	r5, r5
 80167e2:	2a00      	cmp	r2, #0
 80167e4:	d0f7      	beq.n	80167d6 <_strtol_l.isra.0+0xd6>
 80167e6:	b10e      	cbz	r6, 80167ec <_strtol_l.isra.0+0xec>
 80167e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80167ec:	6011      	str	r1, [r2, #0]
 80167ee:	e7f2      	b.n	80167d6 <_strtol_l.isra.0+0xd6>
 80167f0:	2430      	movs	r4, #48	; 0x30
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d1b3      	bne.n	801675e <_strtol_l.isra.0+0x5e>
 80167f6:	2308      	movs	r3, #8
 80167f8:	e7b1      	b.n	801675e <_strtol_l.isra.0+0x5e>
 80167fa:	2c30      	cmp	r4, #48	; 0x30
 80167fc:	d0a4      	beq.n	8016748 <_strtol_l.isra.0+0x48>
 80167fe:	230a      	movs	r3, #10
 8016800:	e7ad      	b.n	801675e <_strtol_l.isra.0+0x5e>
 8016802:	bf00      	nop
 8016804:	08021b21 	.word	0x08021b21

08016808 <_strtol_r>:
 8016808:	f7ff bf7a 	b.w	8016700 <_strtol_l.isra.0>

0801680c <__swbuf_r>:
 801680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801680e:	460e      	mov	r6, r1
 8016810:	4614      	mov	r4, r2
 8016812:	4605      	mov	r5, r0
 8016814:	b118      	cbz	r0, 801681e <__swbuf_r+0x12>
 8016816:	6983      	ldr	r3, [r0, #24]
 8016818:	b90b      	cbnz	r3, 801681e <__swbuf_r+0x12>
 801681a:	f000 ffe5 	bl	80177e8 <__sinit>
 801681e:	4b21      	ldr	r3, [pc, #132]	; (80168a4 <__swbuf_r+0x98>)
 8016820:	429c      	cmp	r4, r3
 8016822:	d12b      	bne.n	801687c <__swbuf_r+0x70>
 8016824:	686c      	ldr	r4, [r5, #4]
 8016826:	69a3      	ldr	r3, [r4, #24]
 8016828:	60a3      	str	r3, [r4, #8]
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	071a      	lsls	r2, r3, #28
 801682e:	d52f      	bpl.n	8016890 <__swbuf_r+0x84>
 8016830:	6923      	ldr	r3, [r4, #16]
 8016832:	b36b      	cbz	r3, 8016890 <__swbuf_r+0x84>
 8016834:	6923      	ldr	r3, [r4, #16]
 8016836:	6820      	ldr	r0, [r4, #0]
 8016838:	1ac0      	subs	r0, r0, r3
 801683a:	6963      	ldr	r3, [r4, #20]
 801683c:	b2f6      	uxtb	r6, r6
 801683e:	4283      	cmp	r3, r0
 8016840:	4637      	mov	r7, r6
 8016842:	dc04      	bgt.n	801684e <__swbuf_r+0x42>
 8016844:	4621      	mov	r1, r4
 8016846:	4628      	mov	r0, r5
 8016848:	f000 ff3a 	bl	80176c0 <_fflush_r>
 801684c:	bb30      	cbnz	r0, 801689c <__swbuf_r+0x90>
 801684e:	68a3      	ldr	r3, [r4, #8]
 8016850:	3b01      	subs	r3, #1
 8016852:	60a3      	str	r3, [r4, #8]
 8016854:	6823      	ldr	r3, [r4, #0]
 8016856:	1c5a      	adds	r2, r3, #1
 8016858:	6022      	str	r2, [r4, #0]
 801685a:	701e      	strb	r6, [r3, #0]
 801685c:	6963      	ldr	r3, [r4, #20]
 801685e:	3001      	adds	r0, #1
 8016860:	4283      	cmp	r3, r0
 8016862:	d004      	beq.n	801686e <__swbuf_r+0x62>
 8016864:	89a3      	ldrh	r3, [r4, #12]
 8016866:	07db      	lsls	r3, r3, #31
 8016868:	d506      	bpl.n	8016878 <__swbuf_r+0x6c>
 801686a:	2e0a      	cmp	r6, #10
 801686c:	d104      	bne.n	8016878 <__swbuf_r+0x6c>
 801686e:	4621      	mov	r1, r4
 8016870:	4628      	mov	r0, r5
 8016872:	f000 ff25 	bl	80176c0 <_fflush_r>
 8016876:	b988      	cbnz	r0, 801689c <__swbuf_r+0x90>
 8016878:	4638      	mov	r0, r7
 801687a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801687c:	4b0a      	ldr	r3, [pc, #40]	; (80168a8 <__swbuf_r+0x9c>)
 801687e:	429c      	cmp	r4, r3
 8016880:	d101      	bne.n	8016886 <__swbuf_r+0x7a>
 8016882:	68ac      	ldr	r4, [r5, #8]
 8016884:	e7cf      	b.n	8016826 <__swbuf_r+0x1a>
 8016886:	4b09      	ldr	r3, [pc, #36]	; (80168ac <__swbuf_r+0xa0>)
 8016888:	429c      	cmp	r4, r3
 801688a:	bf08      	it	eq
 801688c:	68ec      	ldreq	r4, [r5, #12]
 801688e:	e7ca      	b.n	8016826 <__swbuf_r+0x1a>
 8016890:	4621      	mov	r1, r4
 8016892:	4628      	mov	r0, r5
 8016894:	f000 f80c 	bl	80168b0 <__swsetup_r>
 8016898:	2800      	cmp	r0, #0
 801689a:	d0cb      	beq.n	8016834 <__swbuf_r+0x28>
 801689c:	f04f 37ff 	mov.w	r7, #4294967295
 80168a0:	e7ea      	b.n	8016878 <__swbuf_r+0x6c>
 80168a2:	bf00      	nop
 80168a4:	08021cd8 	.word	0x08021cd8
 80168a8:	08021cf8 	.word	0x08021cf8
 80168ac:	08021cb8 	.word	0x08021cb8

080168b0 <__swsetup_r>:
 80168b0:	4b32      	ldr	r3, [pc, #200]	; (801697c <__swsetup_r+0xcc>)
 80168b2:	b570      	push	{r4, r5, r6, lr}
 80168b4:	681d      	ldr	r5, [r3, #0]
 80168b6:	4606      	mov	r6, r0
 80168b8:	460c      	mov	r4, r1
 80168ba:	b125      	cbz	r5, 80168c6 <__swsetup_r+0x16>
 80168bc:	69ab      	ldr	r3, [r5, #24]
 80168be:	b913      	cbnz	r3, 80168c6 <__swsetup_r+0x16>
 80168c0:	4628      	mov	r0, r5
 80168c2:	f000 ff91 	bl	80177e8 <__sinit>
 80168c6:	4b2e      	ldr	r3, [pc, #184]	; (8016980 <__swsetup_r+0xd0>)
 80168c8:	429c      	cmp	r4, r3
 80168ca:	d10f      	bne.n	80168ec <__swsetup_r+0x3c>
 80168cc:	686c      	ldr	r4, [r5, #4]
 80168ce:	89a3      	ldrh	r3, [r4, #12]
 80168d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168d4:	0719      	lsls	r1, r3, #28
 80168d6:	d42c      	bmi.n	8016932 <__swsetup_r+0x82>
 80168d8:	06dd      	lsls	r5, r3, #27
 80168da:	d411      	bmi.n	8016900 <__swsetup_r+0x50>
 80168dc:	2309      	movs	r3, #9
 80168de:	6033      	str	r3, [r6, #0]
 80168e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80168e4:	81a3      	strh	r3, [r4, #12]
 80168e6:	f04f 30ff 	mov.w	r0, #4294967295
 80168ea:	e03e      	b.n	801696a <__swsetup_r+0xba>
 80168ec:	4b25      	ldr	r3, [pc, #148]	; (8016984 <__swsetup_r+0xd4>)
 80168ee:	429c      	cmp	r4, r3
 80168f0:	d101      	bne.n	80168f6 <__swsetup_r+0x46>
 80168f2:	68ac      	ldr	r4, [r5, #8]
 80168f4:	e7eb      	b.n	80168ce <__swsetup_r+0x1e>
 80168f6:	4b24      	ldr	r3, [pc, #144]	; (8016988 <__swsetup_r+0xd8>)
 80168f8:	429c      	cmp	r4, r3
 80168fa:	bf08      	it	eq
 80168fc:	68ec      	ldreq	r4, [r5, #12]
 80168fe:	e7e6      	b.n	80168ce <__swsetup_r+0x1e>
 8016900:	0758      	lsls	r0, r3, #29
 8016902:	d512      	bpl.n	801692a <__swsetup_r+0x7a>
 8016904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016906:	b141      	cbz	r1, 801691a <__swsetup_r+0x6a>
 8016908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801690c:	4299      	cmp	r1, r3
 801690e:	d002      	beq.n	8016916 <__swsetup_r+0x66>
 8016910:	4630      	mov	r0, r6
 8016912:	f7fd ffc9 	bl	80148a8 <_free_r>
 8016916:	2300      	movs	r3, #0
 8016918:	6363      	str	r3, [r4, #52]	; 0x34
 801691a:	89a3      	ldrh	r3, [r4, #12]
 801691c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016920:	81a3      	strh	r3, [r4, #12]
 8016922:	2300      	movs	r3, #0
 8016924:	6063      	str	r3, [r4, #4]
 8016926:	6923      	ldr	r3, [r4, #16]
 8016928:	6023      	str	r3, [r4, #0]
 801692a:	89a3      	ldrh	r3, [r4, #12]
 801692c:	f043 0308 	orr.w	r3, r3, #8
 8016930:	81a3      	strh	r3, [r4, #12]
 8016932:	6923      	ldr	r3, [r4, #16]
 8016934:	b94b      	cbnz	r3, 801694a <__swsetup_r+0x9a>
 8016936:	89a3      	ldrh	r3, [r4, #12]
 8016938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801693c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016940:	d003      	beq.n	801694a <__swsetup_r+0x9a>
 8016942:	4621      	mov	r1, r4
 8016944:	4630      	mov	r0, r6
 8016946:	f001 fb87 	bl	8018058 <__smakebuf_r>
 801694a:	89a0      	ldrh	r0, [r4, #12]
 801694c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016950:	f010 0301 	ands.w	r3, r0, #1
 8016954:	d00a      	beq.n	801696c <__swsetup_r+0xbc>
 8016956:	2300      	movs	r3, #0
 8016958:	60a3      	str	r3, [r4, #8]
 801695a:	6963      	ldr	r3, [r4, #20]
 801695c:	425b      	negs	r3, r3
 801695e:	61a3      	str	r3, [r4, #24]
 8016960:	6923      	ldr	r3, [r4, #16]
 8016962:	b943      	cbnz	r3, 8016976 <__swsetup_r+0xc6>
 8016964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016968:	d1ba      	bne.n	80168e0 <__swsetup_r+0x30>
 801696a:	bd70      	pop	{r4, r5, r6, pc}
 801696c:	0781      	lsls	r1, r0, #30
 801696e:	bf58      	it	pl
 8016970:	6963      	ldrpl	r3, [r4, #20]
 8016972:	60a3      	str	r3, [r4, #8]
 8016974:	e7f4      	b.n	8016960 <__swsetup_r+0xb0>
 8016976:	2000      	movs	r0, #0
 8016978:	e7f7      	b.n	801696a <__swsetup_r+0xba>
 801697a:	bf00      	nop
 801697c:	2400a104 	.word	0x2400a104
 8016980:	08021cd8 	.word	0x08021cd8
 8016984:	08021cf8 	.word	0x08021cf8
 8016988:	08021cb8 	.word	0x08021cb8

0801698c <abort>:
 801698c:	b508      	push	{r3, lr}
 801698e:	2006      	movs	r0, #6
 8016990:	f002 fa3e 	bl	8018e10 <raise>
 8016994:	2001      	movs	r0, #1
 8016996:	f7eb fa7e 	bl	8001e96 <_exit>

0801699a <quorem>:
 801699a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699e:	6903      	ldr	r3, [r0, #16]
 80169a0:	690c      	ldr	r4, [r1, #16]
 80169a2:	42a3      	cmp	r3, r4
 80169a4:	4607      	mov	r7, r0
 80169a6:	f2c0 8081 	blt.w	8016aac <quorem+0x112>
 80169aa:	3c01      	subs	r4, #1
 80169ac:	f101 0814 	add.w	r8, r1, #20
 80169b0:	f100 0514 	add.w	r5, r0, #20
 80169b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80169b8:	9301      	str	r3, [sp, #4]
 80169ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80169be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80169c2:	3301      	adds	r3, #1
 80169c4:	429a      	cmp	r2, r3
 80169c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80169ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80169ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80169d2:	d331      	bcc.n	8016a38 <quorem+0x9e>
 80169d4:	f04f 0e00 	mov.w	lr, #0
 80169d8:	4640      	mov	r0, r8
 80169da:	46ac      	mov	ip, r5
 80169dc:	46f2      	mov	sl, lr
 80169de:	f850 2b04 	ldr.w	r2, [r0], #4
 80169e2:	b293      	uxth	r3, r2
 80169e4:	fb06 e303 	mla	r3, r6, r3, lr
 80169e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	ebaa 0303 	sub.w	r3, sl, r3
 80169f2:	0c12      	lsrs	r2, r2, #16
 80169f4:	f8dc a000 	ldr.w	sl, [ip]
 80169f8:	fb06 e202 	mla	r2, r6, r2, lr
 80169fc:	fa13 f38a 	uxtah	r3, r3, sl
 8016a00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016a04:	fa1f fa82 	uxth.w	sl, r2
 8016a08:	f8dc 2000 	ldr.w	r2, [ip]
 8016a0c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8016a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a1a:	4581      	cmp	r9, r0
 8016a1c:	f84c 3b04 	str.w	r3, [ip], #4
 8016a20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016a24:	d2db      	bcs.n	80169de <quorem+0x44>
 8016a26:	f855 300b 	ldr.w	r3, [r5, fp]
 8016a2a:	b92b      	cbnz	r3, 8016a38 <quorem+0x9e>
 8016a2c:	9b01      	ldr	r3, [sp, #4]
 8016a2e:	3b04      	subs	r3, #4
 8016a30:	429d      	cmp	r5, r3
 8016a32:	461a      	mov	r2, r3
 8016a34:	d32e      	bcc.n	8016a94 <quorem+0xfa>
 8016a36:	613c      	str	r4, [r7, #16]
 8016a38:	4638      	mov	r0, r7
 8016a3a:	f001 fe33 	bl	80186a4 <__mcmp>
 8016a3e:	2800      	cmp	r0, #0
 8016a40:	db24      	blt.n	8016a8c <quorem+0xf2>
 8016a42:	3601      	adds	r6, #1
 8016a44:	4628      	mov	r0, r5
 8016a46:	f04f 0c00 	mov.w	ip, #0
 8016a4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8016a4e:	f8d0 e000 	ldr.w	lr, [r0]
 8016a52:	b293      	uxth	r3, r2
 8016a54:	ebac 0303 	sub.w	r3, ip, r3
 8016a58:	0c12      	lsrs	r2, r2, #16
 8016a5a:	fa13 f38e 	uxtah	r3, r3, lr
 8016a5e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016a62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a66:	b29b      	uxth	r3, r3
 8016a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a6c:	45c1      	cmp	r9, r8
 8016a6e:	f840 3b04 	str.w	r3, [r0], #4
 8016a72:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016a76:	d2e8      	bcs.n	8016a4a <quorem+0xb0>
 8016a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016a7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016a80:	b922      	cbnz	r2, 8016a8c <quorem+0xf2>
 8016a82:	3b04      	subs	r3, #4
 8016a84:	429d      	cmp	r5, r3
 8016a86:	461a      	mov	r2, r3
 8016a88:	d30a      	bcc.n	8016aa0 <quorem+0x106>
 8016a8a:	613c      	str	r4, [r7, #16]
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	b003      	add	sp, #12
 8016a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a94:	6812      	ldr	r2, [r2, #0]
 8016a96:	3b04      	subs	r3, #4
 8016a98:	2a00      	cmp	r2, #0
 8016a9a:	d1cc      	bne.n	8016a36 <quorem+0x9c>
 8016a9c:	3c01      	subs	r4, #1
 8016a9e:	e7c7      	b.n	8016a30 <quorem+0x96>
 8016aa0:	6812      	ldr	r2, [r2, #0]
 8016aa2:	3b04      	subs	r3, #4
 8016aa4:	2a00      	cmp	r2, #0
 8016aa6:	d1f0      	bne.n	8016a8a <quorem+0xf0>
 8016aa8:	3c01      	subs	r4, #1
 8016aaa:	e7eb      	b.n	8016a84 <quorem+0xea>
 8016aac:	2000      	movs	r0, #0
 8016aae:	e7ee      	b.n	8016a8e <quorem+0xf4>

08016ab0 <_dtoa_r>:
 8016ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab4:	ec59 8b10 	vmov	r8, r9, d0
 8016ab8:	b095      	sub	sp, #84	; 0x54
 8016aba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016abc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8016abe:	9107      	str	r1, [sp, #28]
 8016ac0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016ac4:	4606      	mov	r6, r0
 8016ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8016ac8:	9310      	str	r3, [sp, #64]	; 0x40
 8016aca:	b975      	cbnz	r5, 8016aea <_dtoa_r+0x3a>
 8016acc:	2010      	movs	r0, #16
 8016ace:	f7fd feab 	bl	8014828 <malloc>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8016ad6:	b920      	cbnz	r0, 8016ae2 <_dtoa_r+0x32>
 8016ad8:	4bab      	ldr	r3, [pc, #684]	; (8016d88 <_dtoa_r+0x2d8>)
 8016ada:	21ea      	movs	r1, #234	; 0xea
 8016adc:	48ab      	ldr	r0, [pc, #684]	; (8016d8c <_dtoa_r+0x2dc>)
 8016ade:	f7fd fe49 	bl	8014774 <__assert_func>
 8016ae2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ae6:	6005      	str	r5, [r0, #0]
 8016ae8:	60c5      	str	r5, [r0, #12]
 8016aea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016aec:	6819      	ldr	r1, [r3, #0]
 8016aee:	b151      	cbz	r1, 8016b06 <_dtoa_r+0x56>
 8016af0:	685a      	ldr	r2, [r3, #4]
 8016af2:	604a      	str	r2, [r1, #4]
 8016af4:	2301      	movs	r3, #1
 8016af6:	4093      	lsls	r3, r2
 8016af8:	608b      	str	r3, [r1, #8]
 8016afa:	4630      	mov	r0, r6
 8016afc:	f001 fb4a 	bl	8018194 <_Bfree>
 8016b00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016b02:	2200      	movs	r2, #0
 8016b04:	601a      	str	r2, [r3, #0]
 8016b06:	f1b9 0300 	subs.w	r3, r9, #0
 8016b0a:	bfbb      	ittet	lt
 8016b0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016b10:	9303      	strlt	r3, [sp, #12]
 8016b12:	2300      	movge	r3, #0
 8016b14:	2201      	movlt	r2, #1
 8016b16:	bfac      	ite	ge
 8016b18:	6023      	strge	r3, [r4, #0]
 8016b1a:	6022      	strlt	r2, [r4, #0]
 8016b1c:	4b9c      	ldr	r3, [pc, #624]	; (8016d90 <_dtoa_r+0x2e0>)
 8016b1e:	9c03      	ldr	r4, [sp, #12]
 8016b20:	43a3      	bics	r3, r4
 8016b22:	d11a      	bne.n	8016b5a <_dtoa_r+0xaa>
 8016b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b26:	f242 730f 	movw	r3, #9999	; 0x270f
 8016b2a:	6013      	str	r3, [r2, #0]
 8016b2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8016b30:	ea53 0308 	orrs.w	r3, r3, r8
 8016b34:	f000 8512 	beq.w	801755c <_dtoa_r+0xaac>
 8016b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b3a:	b953      	cbnz	r3, 8016b52 <_dtoa_r+0xa2>
 8016b3c:	4b95      	ldr	r3, [pc, #596]	; (8016d94 <_dtoa_r+0x2e4>)
 8016b3e:	e01f      	b.n	8016b80 <_dtoa_r+0xd0>
 8016b40:	4b95      	ldr	r3, [pc, #596]	; (8016d98 <_dtoa_r+0x2e8>)
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	3308      	adds	r3, #8
 8016b46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016b48:	6013      	str	r3, [r2, #0]
 8016b4a:	9800      	ldr	r0, [sp, #0]
 8016b4c:	b015      	add	sp, #84	; 0x54
 8016b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b52:	4b90      	ldr	r3, [pc, #576]	; (8016d94 <_dtoa_r+0x2e4>)
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	3303      	adds	r3, #3
 8016b58:	e7f5      	b.n	8016b46 <_dtoa_r+0x96>
 8016b5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8016b6a:	d10b      	bne.n	8016b84 <_dtoa_r+0xd4>
 8016b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b6e:	2301      	movs	r3, #1
 8016b70:	6013      	str	r3, [r2, #0]
 8016b72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f000 84ee 	beq.w	8017556 <_dtoa_r+0xaa6>
 8016b7a:	4888      	ldr	r0, [pc, #544]	; (8016d9c <_dtoa_r+0x2ec>)
 8016b7c:	6018      	str	r0, [r3, #0]
 8016b7e:	1e43      	subs	r3, r0, #1
 8016b80:	9300      	str	r3, [sp, #0]
 8016b82:	e7e2      	b.n	8016b4a <_dtoa_r+0x9a>
 8016b84:	a913      	add	r1, sp, #76	; 0x4c
 8016b86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016b8a:	aa12      	add	r2, sp, #72	; 0x48
 8016b8c:	4630      	mov	r0, r6
 8016b8e:	f001 fea9 	bl	80188e4 <__d2b>
 8016b92:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8016b96:	4605      	mov	r5, r0
 8016b98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016b9a:	2900      	cmp	r1, #0
 8016b9c:	d047      	beq.n	8016c2e <_dtoa_r+0x17e>
 8016b9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016ba0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016ba8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8016bac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016bb0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016bb4:	2400      	movs	r4, #0
 8016bb6:	ec43 2b16 	vmov	d6, r2, r3
 8016bba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8016bbe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8016d70 <_dtoa_r+0x2c0>
 8016bc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016bc6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8016d78 <_dtoa_r+0x2c8>
 8016bca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016bce:	eeb0 7b46 	vmov.f64	d7, d6
 8016bd2:	ee06 1a90 	vmov	s13, r1
 8016bd6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8016bda:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016d80 <_dtoa_r+0x2d0>
 8016bde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016be2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8016be6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bee:	ee16 ba90 	vmov	fp, s13
 8016bf2:	9411      	str	r4, [sp, #68]	; 0x44
 8016bf4:	d508      	bpl.n	8016c08 <_dtoa_r+0x158>
 8016bf6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016bfa:	eeb4 6b47 	vcmp.f64	d6, d7
 8016bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c02:	bf18      	it	ne
 8016c04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8016c08:	f1bb 0f16 	cmp.w	fp, #22
 8016c0c:	d832      	bhi.n	8016c74 <_dtoa_r+0x1c4>
 8016c0e:	4b64      	ldr	r3, [pc, #400]	; (8016da0 <_dtoa_r+0x2f0>)
 8016c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016c14:	ed93 7b00 	vldr	d7, [r3]
 8016c18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8016c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c24:	d501      	bpl.n	8016c2a <_dtoa_r+0x17a>
 8016c26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	e023      	b.n	8016c76 <_dtoa_r+0x1c6>
 8016c2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016c30:	4401      	add	r1, r0
 8016c32:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8016c36:	2b20      	cmp	r3, #32
 8016c38:	bfc3      	ittte	gt
 8016c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016c3e:	fa04 f303 	lslgt.w	r3, r4, r3
 8016c42:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8016c46:	f1c3 0320 	rsble	r3, r3, #32
 8016c4a:	bfc6      	itte	gt
 8016c4c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8016c50:	ea43 0308 	orrgt.w	r3, r3, r8
 8016c54:	fa08 f303 	lslle.w	r3, r8, r3
 8016c58:	ee07 3a90 	vmov	s15, r3
 8016c5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016c60:	3901      	subs	r1, #1
 8016c62:	ed8d 7b00 	vstr	d7, [sp]
 8016c66:	9c01      	ldr	r4, [sp, #4]
 8016c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8016c70:	2401      	movs	r4, #1
 8016c72:	e7a0      	b.n	8016bb6 <_dtoa_r+0x106>
 8016c74:	2301      	movs	r3, #1
 8016c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c78:	1a43      	subs	r3, r0, r1
 8016c7a:	1e5a      	subs	r2, r3, #1
 8016c7c:	bf45      	ittet	mi
 8016c7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8016c82:	9305      	strmi	r3, [sp, #20]
 8016c84:	2300      	movpl	r3, #0
 8016c86:	2300      	movmi	r3, #0
 8016c88:	9206      	str	r2, [sp, #24]
 8016c8a:	bf54      	ite	pl
 8016c8c:	9305      	strpl	r3, [sp, #20]
 8016c8e:	9306      	strmi	r3, [sp, #24]
 8016c90:	f1bb 0f00 	cmp.w	fp, #0
 8016c94:	db18      	blt.n	8016cc8 <_dtoa_r+0x218>
 8016c96:	9b06      	ldr	r3, [sp, #24]
 8016c98:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8016c9c:	445b      	add	r3, fp
 8016c9e:	9306      	str	r3, [sp, #24]
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	9a07      	ldr	r2, [sp, #28]
 8016ca4:	2a09      	cmp	r2, #9
 8016ca6:	d849      	bhi.n	8016d3c <_dtoa_r+0x28c>
 8016ca8:	2a05      	cmp	r2, #5
 8016caa:	bfc4      	itt	gt
 8016cac:	3a04      	subgt	r2, #4
 8016cae:	9207      	strgt	r2, [sp, #28]
 8016cb0:	9a07      	ldr	r2, [sp, #28]
 8016cb2:	f1a2 0202 	sub.w	r2, r2, #2
 8016cb6:	bfcc      	ite	gt
 8016cb8:	2400      	movgt	r4, #0
 8016cba:	2401      	movle	r4, #1
 8016cbc:	2a03      	cmp	r2, #3
 8016cbe:	d848      	bhi.n	8016d52 <_dtoa_r+0x2a2>
 8016cc0:	e8df f002 	tbb	[pc, r2]
 8016cc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8016cc8:	9b05      	ldr	r3, [sp, #20]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	eba3 030b 	sub.w	r3, r3, fp
 8016cd0:	9305      	str	r3, [sp, #20]
 8016cd2:	920e      	str	r2, [sp, #56]	; 0x38
 8016cd4:	f1cb 0300 	rsb	r3, fp, #0
 8016cd8:	e7e3      	b.n	8016ca2 <_dtoa_r+0x1f2>
 8016cda:	2200      	movs	r2, #0
 8016cdc:	9208      	str	r2, [sp, #32]
 8016cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ce0:	2a00      	cmp	r2, #0
 8016ce2:	dc39      	bgt.n	8016d58 <_dtoa_r+0x2a8>
 8016ce4:	f04f 0a01 	mov.w	sl, #1
 8016ce8:	46d1      	mov	r9, sl
 8016cea:	4652      	mov	r2, sl
 8016cec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016cf0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8016cf2:	2100      	movs	r1, #0
 8016cf4:	6079      	str	r1, [r7, #4]
 8016cf6:	2004      	movs	r0, #4
 8016cf8:	f100 0c14 	add.w	ip, r0, #20
 8016cfc:	4594      	cmp	ip, r2
 8016cfe:	6879      	ldr	r1, [r7, #4]
 8016d00:	d92f      	bls.n	8016d62 <_dtoa_r+0x2b2>
 8016d02:	4630      	mov	r0, r6
 8016d04:	930c      	str	r3, [sp, #48]	; 0x30
 8016d06:	f001 fa05 	bl	8018114 <_Balloc>
 8016d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d0c:	9000      	str	r0, [sp, #0]
 8016d0e:	4602      	mov	r2, r0
 8016d10:	2800      	cmp	r0, #0
 8016d12:	d149      	bne.n	8016da8 <_dtoa_r+0x2f8>
 8016d14:	4b23      	ldr	r3, [pc, #140]	; (8016da4 <_dtoa_r+0x2f4>)
 8016d16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016d1a:	e6df      	b.n	8016adc <_dtoa_r+0x2c>
 8016d1c:	2201      	movs	r2, #1
 8016d1e:	e7dd      	b.n	8016cdc <_dtoa_r+0x22c>
 8016d20:	2200      	movs	r2, #0
 8016d22:	9208      	str	r2, [sp, #32]
 8016d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d26:	eb0b 0a02 	add.w	sl, fp, r2
 8016d2a:	f10a 0901 	add.w	r9, sl, #1
 8016d2e:	464a      	mov	r2, r9
 8016d30:	2a01      	cmp	r2, #1
 8016d32:	bfb8      	it	lt
 8016d34:	2201      	movlt	r2, #1
 8016d36:	e7db      	b.n	8016cf0 <_dtoa_r+0x240>
 8016d38:	2201      	movs	r2, #1
 8016d3a:	e7f2      	b.n	8016d22 <_dtoa_r+0x272>
 8016d3c:	2401      	movs	r4, #1
 8016d3e:	2200      	movs	r2, #0
 8016d40:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016d44:	f04f 3aff 	mov.w	sl, #4294967295
 8016d48:	2100      	movs	r1, #0
 8016d4a:	46d1      	mov	r9, sl
 8016d4c:	2212      	movs	r2, #18
 8016d4e:	9109      	str	r1, [sp, #36]	; 0x24
 8016d50:	e7ce      	b.n	8016cf0 <_dtoa_r+0x240>
 8016d52:	2201      	movs	r2, #1
 8016d54:	9208      	str	r2, [sp, #32]
 8016d56:	e7f5      	b.n	8016d44 <_dtoa_r+0x294>
 8016d58:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8016d5c:	46d1      	mov	r9, sl
 8016d5e:	4652      	mov	r2, sl
 8016d60:	e7c6      	b.n	8016cf0 <_dtoa_r+0x240>
 8016d62:	3101      	adds	r1, #1
 8016d64:	6079      	str	r1, [r7, #4]
 8016d66:	0040      	lsls	r0, r0, #1
 8016d68:	e7c6      	b.n	8016cf8 <_dtoa_r+0x248>
 8016d6a:	bf00      	nop
 8016d6c:	f3af 8000 	nop.w
 8016d70:	636f4361 	.word	0x636f4361
 8016d74:	3fd287a7 	.word	0x3fd287a7
 8016d78:	8b60c8b3 	.word	0x8b60c8b3
 8016d7c:	3fc68a28 	.word	0x3fc68a28
 8016d80:	509f79fb 	.word	0x509f79fb
 8016d84:	3fd34413 	.word	0x3fd34413
 8016d88:	08021c2e 	.word	0x08021c2e
 8016d8c:	08021c45 	.word	0x08021c45
 8016d90:	7ff00000 	.word	0x7ff00000
 8016d94:	08021c2a 	.word	0x08021c2a
 8016d98:	08021c21 	.word	0x08021c21
 8016d9c:	08021aa6 	.word	0x08021aa6
 8016da0:	08021e20 	.word	0x08021e20
 8016da4:	08021ca4 	.word	0x08021ca4
 8016da8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8016daa:	9900      	ldr	r1, [sp, #0]
 8016dac:	6011      	str	r1, [r2, #0]
 8016dae:	f1b9 0f0e 	cmp.w	r9, #14
 8016db2:	d872      	bhi.n	8016e9a <_dtoa_r+0x3ea>
 8016db4:	2c00      	cmp	r4, #0
 8016db6:	d070      	beq.n	8016e9a <_dtoa_r+0x3ea>
 8016db8:	f1bb 0f00 	cmp.w	fp, #0
 8016dbc:	f340 80a6 	ble.w	8016f0c <_dtoa_r+0x45c>
 8016dc0:	49ca      	ldr	r1, [pc, #808]	; (80170ec <_dtoa_r+0x63c>)
 8016dc2:	f00b 020f 	and.w	r2, fp, #15
 8016dc6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8016dca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016dce:	ed92 7b00 	vldr	d7, [r2]
 8016dd2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8016dd6:	f000 808d 	beq.w	8016ef4 <_dtoa_r+0x444>
 8016dda:	4ac5      	ldr	r2, [pc, #788]	; (80170f0 <_dtoa_r+0x640>)
 8016ddc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8016de0:	ed92 6b08 	vldr	d6, [r2, #32]
 8016de4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8016de8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016dec:	f001 010f 	and.w	r1, r1, #15
 8016df0:	2203      	movs	r2, #3
 8016df2:	48bf      	ldr	r0, [pc, #764]	; (80170f0 <_dtoa_r+0x640>)
 8016df4:	2900      	cmp	r1, #0
 8016df6:	d17f      	bne.n	8016ef8 <_dtoa_r+0x448>
 8016df8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016dfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016e04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e06:	2900      	cmp	r1, #0
 8016e08:	f000 80b2 	beq.w	8016f70 <_dtoa_r+0x4c0>
 8016e0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e1c:	f140 80a8 	bpl.w	8016f70 <_dtoa_r+0x4c0>
 8016e20:	f1b9 0f00 	cmp.w	r9, #0
 8016e24:	f000 80a4 	beq.w	8016f70 <_dtoa_r+0x4c0>
 8016e28:	f1ba 0f00 	cmp.w	sl, #0
 8016e2c:	dd31      	ble.n	8016e92 <_dtoa_r+0x3e2>
 8016e2e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8016e32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016e3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016e3e:	3201      	adds	r2, #1
 8016e40:	4650      	mov	r0, sl
 8016e42:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016e46:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8016e4a:	ee07 2a90 	vmov	s15, r2
 8016e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016e52:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016e56:	ed8d 5b02 	vstr	d5, [sp, #8]
 8016e5a:	9c03      	ldr	r4, [sp, #12]
 8016e5c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016e60:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8016e64:	2800      	cmp	r0, #0
 8016e66:	f040 8086 	bne.w	8016f76 <_dtoa_r+0x4c6>
 8016e6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8016e6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016e72:	ec42 1b17 	vmov	d7, r1, r2
 8016e76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e7e:	f300 8272 	bgt.w	8017366 <_dtoa_r+0x8b6>
 8016e82:	eeb1 7b47 	vneg.f64	d7, d7
 8016e86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8e:	f100 8267 	bmi.w	8017360 <_dtoa_r+0x8b0>
 8016e92:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016e96:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8016e9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016e9c:	2a00      	cmp	r2, #0
 8016e9e:	f2c0 8129 	blt.w	80170f4 <_dtoa_r+0x644>
 8016ea2:	f1bb 0f0e 	cmp.w	fp, #14
 8016ea6:	f300 8125 	bgt.w	80170f4 <_dtoa_r+0x644>
 8016eaa:	4b90      	ldr	r3, [pc, #576]	; (80170ec <_dtoa_r+0x63c>)
 8016eac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016eb0:	ed93 6b00 	vldr	d6, [r3]
 8016eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	f280 80c3 	bge.w	8017042 <_dtoa_r+0x592>
 8016ebc:	f1b9 0f00 	cmp.w	r9, #0
 8016ec0:	f300 80bf 	bgt.w	8017042 <_dtoa_r+0x592>
 8016ec4:	f040 824c 	bne.w	8017360 <_dtoa_r+0x8b0>
 8016ec8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8016ecc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016edc:	464c      	mov	r4, r9
 8016ede:	464f      	mov	r7, r9
 8016ee0:	f280 8222 	bge.w	8017328 <_dtoa_r+0x878>
 8016ee4:	f8dd 8000 	ldr.w	r8, [sp]
 8016ee8:	2331      	movs	r3, #49	; 0x31
 8016eea:	f808 3b01 	strb.w	r3, [r8], #1
 8016eee:	f10b 0b01 	add.w	fp, fp, #1
 8016ef2:	e21e      	b.n	8017332 <_dtoa_r+0x882>
 8016ef4:	2202      	movs	r2, #2
 8016ef6:	e77c      	b.n	8016df2 <_dtoa_r+0x342>
 8016ef8:	07cc      	lsls	r4, r1, #31
 8016efa:	d504      	bpl.n	8016f06 <_dtoa_r+0x456>
 8016efc:	ed90 6b00 	vldr	d6, [r0]
 8016f00:	3201      	adds	r2, #1
 8016f02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f06:	1049      	asrs	r1, r1, #1
 8016f08:	3008      	adds	r0, #8
 8016f0a:	e773      	b.n	8016df4 <_dtoa_r+0x344>
 8016f0c:	d02e      	beq.n	8016f6c <_dtoa_r+0x4bc>
 8016f0e:	f1cb 0100 	rsb	r1, fp, #0
 8016f12:	4a76      	ldr	r2, [pc, #472]	; (80170ec <_dtoa_r+0x63c>)
 8016f14:	f001 000f 	and.w	r0, r1, #15
 8016f18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016f1c:	ed92 7b00 	vldr	d7, [r2]
 8016f20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8016f24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016f28:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8016f2c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8016f30:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016f34:	486e      	ldr	r0, [pc, #440]	; (80170f0 <_dtoa_r+0x640>)
 8016f36:	1109      	asrs	r1, r1, #4
 8016f38:	2400      	movs	r4, #0
 8016f3a:	2202      	movs	r2, #2
 8016f3c:	b939      	cbnz	r1, 8016f4e <_dtoa_r+0x49e>
 8016f3e:	2c00      	cmp	r4, #0
 8016f40:	f43f af60 	beq.w	8016e04 <_dtoa_r+0x354>
 8016f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f4c:	e75a      	b.n	8016e04 <_dtoa_r+0x354>
 8016f4e:	07cf      	lsls	r7, r1, #31
 8016f50:	d509      	bpl.n	8016f66 <_dtoa_r+0x4b6>
 8016f52:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8016f56:	ed90 7b00 	vldr	d7, [r0]
 8016f5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016f5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8016f62:	3201      	adds	r2, #1
 8016f64:	2401      	movs	r4, #1
 8016f66:	1049      	asrs	r1, r1, #1
 8016f68:	3008      	adds	r0, #8
 8016f6a:	e7e7      	b.n	8016f3c <_dtoa_r+0x48c>
 8016f6c:	2202      	movs	r2, #2
 8016f6e:	e749      	b.n	8016e04 <_dtoa_r+0x354>
 8016f70:	465f      	mov	r7, fp
 8016f72:	4648      	mov	r0, r9
 8016f74:	e765      	b.n	8016e42 <_dtoa_r+0x392>
 8016f76:	ec42 1b17 	vmov	d7, r1, r2
 8016f7a:	4a5c      	ldr	r2, [pc, #368]	; (80170ec <_dtoa_r+0x63c>)
 8016f7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016f80:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016f84:	9a00      	ldr	r2, [sp, #0]
 8016f86:	1814      	adds	r4, r2, r0
 8016f88:	9a08      	ldr	r2, [sp, #32]
 8016f8a:	b352      	cbz	r2, 8016fe2 <_dtoa_r+0x532>
 8016f8c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8016f90:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8016f94:	f8dd 8000 	ldr.w	r8, [sp]
 8016f98:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016f9c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016fa0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016fa4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016fa8:	ee14 2a90 	vmov	r2, s9
 8016fac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016fb0:	3230      	adds	r2, #48	; 0x30
 8016fb2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016fb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fbe:	f808 2b01 	strb.w	r2, [r8], #1
 8016fc2:	d439      	bmi.n	8017038 <_dtoa_r+0x588>
 8016fc4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016fc8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd0:	d472      	bmi.n	80170b8 <_dtoa_r+0x608>
 8016fd2:	45a0      	cmp	r8, r4
 8016fd4:	f43f af5d 	beq.w	8016e92 <_dtoa_r+0x3e2>
 8016fd8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016fdc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016fe0:	e7e0      	b.n	8016fa4 <_dtoa_r+0x4f4>
 8016fe2:	f8dd 8000 	ldr.w	r8, [sp]
 8016fe6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016fea:	4621      	mov	r1, r4
 8016fec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016ff0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016ff4:	ee14 2a90 	vmov	r2, s9
 8016ff8:	3230      	adds	r2, #48	; 0x30
 8016ffa:	f808 2b01 	strb.w	r2, [r8], #1
 8016ffe:	45a0      	cmp	r8, r4
 8017000:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017004:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017008:	d118      	bne.n	801703c <_dtoa_r+0x58c>
 801700a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801700e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017012:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801701a:	dc4d      	bgt.n	80170b8 <_dtoa_r+0x608>
 801701c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017028:	f57f af33 	bpl.w	8016e92 <_dtoa_r+0x3e2>
 801702c:	4688      	mov	r8, r1
 801702e:	3901      	subs	r1, #1
 8017030:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017034:	2b30      	cmp	r3, #48	; 0x30
 8017036:	d0f9      	beq.n	801702c <_dtoa_r+0x57c>
 8017038:	46bb      	mov	fp, r7
 801703a:	e02a      	b.n	8017092 <_dtoa_r+0x5e2>
 801703c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017040:	e7d6      	b.n	8016ff0 <_dtoa_r+0x540>
 8017042:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017046:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801704a:	f8dd 8000 	ldr.w	r8, [sp]
 801704e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017052:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017056:	ee15 3a10 	vmov	r3, s10
 801705a:	3330      	adds	r3, #48	; 0x30
 801705c:	f808 3b01 	strb.w	r3, [r8], #1
 8017060:	9b00      	ldr	r3, [sp, #0]
 8017062:	eba8 0303 	sub.w	r3, r8, r3
 8017066:	4599      	cmp	r9, r3
 8017068:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801706c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017070:	d133      	bne.n	80170da <_dtoa_r+0x62a>
 8017072:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017076:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801707e:	dc1a      	bgt.n	80170b6 <_dtoa_r+0x606>
 8017080:	eeb4 7b46 	vcmp.f64	d7, d6
 8017084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017088:	d103      	bne.n	8017092 <_dtoa_r+0x5e2>
 801708a:	ee15 3a10 	vmov	r3, s10
 801708e:	07d9      	lsls	r1, r3, #31
 8017090:	d411      	bmi.n	80170b6 <_dtoa_r+0x606>
 8017092:	4629      	mov	r1, r5
 8017094:	4630      	mov	r0, r6
 8017096:	f001 f87d 	bl	8018194 <_Bfree>
 801709a:	2300      	movs	r3, #0
 801709c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801709e:	f888 3000 	strb.w	r3, [r8]
 80170a2:	f10b 0301 	add.w	r3, fp, #1
 80170a6:	6013      	str	r3, [r2, #0]
 80170a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f43f ad4d 	beq.w	8016b4a <_dtoa_r+0x9a>
 80170b0:	f8c3 8000 	str.w	r8, [r3]
 80170b4:	e549      	b.n	8016b4a <_dtoa_r+0x9a>
 80170b6:	465f      	mov	r7, fp
 80170b8:	4643      	mov	r3, r8
 80170ba:	4698      	mov	r8, r3
 80170bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80170c0:	2a39      	cmp	r2, #57	; 0x39
 80170c2:	d106      	bne.n	80170d2 <_dtoa_r+0x622>
 80170c4:	9a00      	ldr	r2, [sp, #0]
 80170c6:	429a      	cmp	r2, r3
 80170c8:	d1f7      	bne.n	80170ba <_dtoa_r+0x60a>
 80170ca:	9900      	ldr	r1, [sp, #0]
 80170cc:	2230      	movs	r2, #48	; 0x30
 80170ce:	3701      	adds	r7, #1
 80170d0:	700a      	strb	r2, [r1, #0]
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	3201      	adds	r2, #1
 80170d6:	701a      	strb	r2, [r3, #0]
 80170d8:	e7ae      	b.n	8017038 <_dtoa_r+0x588>
 80170da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80170de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80170e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e6:	d1b2      	bne.n	801704e <_dtoa_r+0x59e>
 80170e8:	e7d3      	b.n	8017092 <_dtoa_r+0x5e2>
 80170ea:	bf00      	nop
 80170ec:	08021e20 	.word	0x08021e20
 80170f0:	08021df8 	.word	0x08021df8
 80170f4:	9908      	ldr	r1, [sp, #32]
 80170f6:	2900      	cmp	r1, #0
 80170f8:	f000 80d1 	beq.w	801729e <_dtoa_r+0x7ee>
 80170fc:	9907      	ldr	r1, [sp, #28]
 80170fe:	2901      	cmp	r1, #1
 8017100:	f300 80b4 	bgt.w	801726c <_dtoa_r+0x7bc>
 8017104:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017106:	2900      	cmp	r1, #0
 8017108:	f000 80ac 	beq.w	8017264 <_dtoa_r+0x7b4>
 801710c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017110:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017114:	461c      	mov	r4, r3
 8017116:	930a      	str	r3, [sp, #40]	; 0x28
 8017118:	9b05      	ldr	r3, [sp, #20]
 801711a:	4413      	add	r3, r2
 801711c:	9305      	str	r3, [sp, #20]
 801711e:	9b06      	ldr	r3, [sp, #24]
 8017120:	2101      	movs	r1, #1
 8017122:	4413      	add	r3, r2
 8017124:	4630      	mov	r0, r6
 8017126:	9306      	str	r3, [sp, #24]
 8017128:	f001 f93a 	bl	80183a0 <__i2b>
 801712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801712e:	4607      	mov	r7, r0
 8017130:	f1b8 0f00 	cmp.w	r8, #0
 8017134:	dd0d      	ble.n	8017152 <_dtoa_r+0x6a2>
 8017136:	9a06      	ldr	r2, [sp, #24]
 8017138:	2a00      	cmp	r2, #0
 801713a:	dd0a      	ble.n	8017152 <_dtoa_r+0x6a2>
 801713c:	4542      	cmp	r2, r8
 801713e:	9905      	ldr	r1, [sp, #20]
 8017140:	bfa8      	it	ge
 8017142:	4642      	movge	r2, r8
 8017144:	1a89      	subs	r1, r1, r2
 8017146:	9105      	str	r1, [sp, #20]
 8017148:	9906      	ldr	r1, [sp, #24]
 801714a:	eba8 0802 	sub.w	r8, r8, r2
 801714e:	1a8a      	subs	r2, r1, r2
 8017150:	9206      	str	r2, [sp, #24]
 8017152:	b303      	cbz	r3, 8017196 <_dtoa_r+0x6e6>
 8017154:	9a08      	ldr	r2, [sp, #32]
 8017156:	2a00      	cmp	r2, #0
 8017158:	f000 80a6 	beq.w	80172a8 <_dtoa_r+0x7f8>
 801715c:	2c00      	cmp	r4, #0
 801715e:	dd13      	ble.n	8017188 <_dtoa_r+0x6d8>
 8017160:	4639      	mov	r1, r7
 8017162:	4622      	mov	r2, r4
 8017164:	4630      	mov	r0, r6
 8017166:	930c      	str	r3, [sp, #48]	; 0x30
 8017168:	f001 f9d6 	bl	8018518 <__pow5mult>
 801716c:	462a      	mov	r2, r5
 801716e:	4601      	mov	r1, r0
 8017170:	4607      	mov	r7, r0
 8017172:	4630      	mov	r0, r6
 8017174:	f001 f92a 	bl	80183cc <__multiply>
 8017178:	4629      	mov	r1, r5
 801717a:	900a      	str	r0, [sp, #40]	; 0x28
 801717c:	4630      	mov	r0, r6
 801717e:	f001 f809 	bl	8018194 <_Bfree>
 8017182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017186:	4615      	mov	r5, r2
 8017188:	1b1a      	subs	r2, r3, r4
 801718a:	d004      	beq.n	8017196 <_dtoa_r+0x6e6>
 801718c:	4629      	mov	r1, r5
 801718e:	4630      	mov	r0, r6
 8017190:	f001 f9c2 	bl	8018518 <__pow5mult>
 8017194:	4605      	mov	r5, r0
 8017196:	2101      	movs	r1, #1
 8017198:	4630      	mov	r0, r6
 801719a:	f001 f901 	bl	80183a0 <__i2b>
 801719e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	4604      	mov	r4, r0
 80171a4:	f340 8082 	ble.w	80172ac <_dtoa_r+0x7fc>
 80171a8:	461a      	mov	r2, r3
 80171aa:	4601      	mov	r1, r0
 80171ac:	4630      	mov	r0, r6
 80171ae:	f001 f9b3 	bl	8018518 <__pow5mult>
 80171b2:	9b07      	ldr	r3, [sp, #28]
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	4604      	mov	r4, r0
 80171b8:	dd7b      	ble.n	80172b2 <_dtoa_r+0x802>
 80171ba:	2300      	movs	r3, #0
 80171bc:	930a      	str	r3, [sp, #40]	; 0x28
 80171be:	6922      	ldr	r2, [r4, #16]
 80171c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80171c4:	6910      	ldr	r0, [r2, #16]
 80171c6:	f001 f89b 	bl	8018300 <__hi0bits>
 80171ca:	f1c0 0020 	rsb	r0, r0, #32
 80171ce:	9b06      	ldr	r3, [sp, #24]
 80171d0:	4418      	add	r0, r3
 80171d2:	f010 001f 	ands.w	r0, r0, #31
 80171d6:	f000 808d 	beq.w	80172f4 <_dtoa_r+0x844>
 80171da:	f1c0 0220 	rsb	r2, r0, #32
 80171de:	2a04      	cmp	r2, #4
 80171e0:	f340 8086 	ble.w	80172f0 <_dtoa_r+0x840>
 80171e4:	f1c0 001c 	rsb	r0, r0, #28
 80171e8:	9b05      	ldr	r3, [sp, #20]
 80171ea:	4403      	add	r3, r0
 80171ec:	9305      	str	r3, [sp, #20]
 80171ee:	9b06      	ldr	r3, [sp, #24]
 80171f0:	4403      	add	r3, r0
 80171f2:	4480      	add	r8, r0
 80171f4:	9306      	str	r3, [sp, #24]
 80171f6:	9b05      	ldr	r3, [sp, #20]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	dd05      	ble.n	8017208 <_dtoa_r+0x758>
 80171fc:	4629      	mov	r1, r5
 80171fe:	461a      	mov	r2, r3
 8017200:	4630      	mov	r0, r6
 8017202:	f001 f9e3 	bl	80185cc <__lshift>
 8017206:	4605      	mov	r5, r0
 8017208:	9b06      	ldr	r3, [sp, #24]
 801720a:	2b00      	cmp	r3, #0
 801720c:	dd05      	ble.n	801721a <_dtoa_r+0x76a>
 801720e:	4621      	mov	r1, r4
 8017210:	461a      	mov	r2, r3
 8017212:	4630      	mov	r0, r6
 8017214:	f001 f9da 	bl	80185cc <__lshift>
 8017218:	4604      	mov	r4, r0
 801721a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801721c:	2b00      	cmp	r3, #0
 801721e:	d06b      	beq.n	80172f8 <_dtoa_r+0x848>
 8017220:	4621      	mov	r1, r4
 8017222:	4628      	mov	r0, r5
 8017224:	f001 fa3e 	bl	80186a4 <__mcmp>
 8017228:	2800      	cmp	r0, #0
 801722a:	da65      	bge.n	80172f8 <_dtoa_r+0x848>
 801722c:	2300      	movs	r3, #0
 801722e:	4629      	mov	r1, r5
 8017230:	220a      	movs	r2, #10
 8017232:	4630      	mov	r0, r6
 8017234:	f000 ffd0 	bl	80181d8 <__multadd>
 8017238:	9b08      	ldr	r3, [sp, #32]
 801723a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801723e:	4605      	mov	r5, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	f000 8192 	beq.w	801756a <_dtoa_r+0xaba>
 8017246:	4639      	mov	r1, r7
 8017248:	2300      	movs	r3, #0
 801724a:	220a      	movs	r2, #10
 801724c:	4630      	mov	r0, r6
 801724e:	f000 ffc3 	bl	80181d8 <__multadd>
 8017252:	f1ba 0f00 	cmp.w	sl, #0
 8017256:	4607      	mov	r7, r0
 8017258:	f300 808e 	bgt.w	8017378 <_dtoa_r+0x8c8>
 801725c:	9b07      	ldr	r3, [sp, #28]
 801725e:	2b02      	cmp	r3, #2
 8017260:	dc51      	bgt.n	8017306 <_dtoa_r+0x856>
 8017262:	e089      	b.n	8017378 <_dtoa_r+0x8c8>
 8017264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017266:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801726a:	e751      	b.n	8017110 <_dtoa_r+0x660>
 801726c:	f109 34ff 	add.w	r4, r9, #4294967295
 8017270:	42a3      	cmp	r3, r4
 8017272:	bfbf      	itttt	lt
 8017274:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8017276:	1ae3      	sublt	r3, r4, r3
 8017278:	18d2      	addlt	r2, r2, r3
 801727a:	4613      	movlt	r3, r2
 801727c:	bfb7      	itett	lt
 801727e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017280:	1b1c      	subge	r4, r3, r4
 8017282:	4623      	movlt	r3, r4
 8017284:	2400      	movlt	r4, #0
 8017286:	f1b9 0f00 	cmp.w	r9, #0
 801728a:	bfb5      	itete	lt
 801728c:	9a05      	ldrlt	r2, [sp, #20]
 801728e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8017292:	eba2 0809 	sublt.w	r8, r2, r9
 8017296:	464a      	movge	r2, r9
 8017298:	bfb8      	it	lt
 801729a:	2200      	movlt	r2, #0
 801729c:	e73b      	b.n	8017116 <_dtoa_r+0x666>
 801729e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80172a2:	9f08      	ldr	r7, [sp, #32]
 80172a4:	461c      	mov	r4, r3
 80172a6:	e743      	b.n	8017130 <_dtoa_r+0x680>
 80172a8:	461a      	mov	r2, r3
 80172aa:	e76f      	b.n	801718c <_dtoa_r+0x6dc>
 80172ac:	9b07      	ldr	r3, [sp, #28]
 80172ae:	2b01      	cmp	r3, #1
 80172b0:	dc18      	bgt.n	80172e4 <_dtoa_r+0x834>
 80172b2:	9b02      	ldr	r3, [sp, #8]
 80172b4:	b9b3      	cbnz	r3, 80172e4 <_dtoa_r+0x834>
 80172b6:	9b03      	ldr	r3, [sp, #12]
 80172b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80172bc:	b9a2      	cbnz	r2, 80172e8 <_dtoa_r+0x838>
 80172be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80172c2:	0d12      	lsrs	r2, r2, #20
 80172c4:	0512      	lsls	r2, r2, #20
 80172c6:	b18a      	cbz	r2, 80172ec <_dtoa_r+0x83c>
 80172c8:	9b05      	ldr	r3, [sp, #20]
 80172ca:	3301      	adds	r3, #1
 80172cc:	9305      	str	r3, [sp, #20]
 80172ce:	9b06      	ldr	r3, [sp, #24]
 80172d0:	3301      	adds	r3, #1
 80172d2:	9306      	str	r3, [sp, #24]
 80172d4:	2301      	movs	r3, #1
 80172d6:	930a      	str	r3, [sp, #40]	; 0x28
 80172d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f47f af6f 	bne.w	80171be <_dtoa_r+0x70e>
 80172e0:	2001      	movs	r0, #1
 80172e2:	e774      	b.n	80171ce <_dtoa_r+0x71e>
 80172e4:	2300      	movs	r3, #0
 80172e6:	e7f6      	b.n	80172d6 <_dtoa_r+0x826>
 80172e8:	9b02      	ldr	r3, [sp, #8]
 80172ea:	e7f4      	b.n	80172d6 <_dtoa_r+0x826>
 80172ec:	920a      	str	r2, [sp, #40]	; 0x28
 80172ee:	e7f3      	b.n	80172d8 <_dtoa_r+0x828>
 80172f0:	d081      	beq.n	80171f6 <_dtoa_r+0x746>
 80172f2:	4610      	mov	r0, r2
 80172f4:	301c      	adds	r0, #28
 80172f6:	e777      	b.n	80171e8 <_dtoa_r+0x738>
 80172f8:	f1b9 0f00 	cmp.w	r9, #0
 80172fc:	dc37      	bgt.n	801736e <_dtoa_r+0x8be>
 80172fe:	9b07      	ldr	r3, [sp, #28]
 8017300:	2b02      	cmp	r3, #2
 8017302:	dd34      	ble.n	801736e <_dtoa_r+0x8be>
 8017304:	46ca      	mov	sl, r9
 8017306:	f1ba 0f00 	cmp.w	sl, #0
 801730a:	d10d      	bne.n	8017328 <_dtoa_r+0x878>
 801730c:	4621      	mov	r1, r4
 801730e:	4653      	mov	r3, sl
 8017310:	2205      	movs	r2, #5
 8017312:	4630      	mov	r0, r6
 8017314:	f000 ff60 	bl	80181d8 <__multadd>
 8017318:	4601      	mov	r1, r0
 801731a:	4604      	mov	r4, r0
 801731c:	4628      	mov	r0, r5
 801731e:	f001 f9c1 	bl	80186a4 <__mcmp>
 8017322:	2800      	cmp	r0, #0
 8017324:	f73f adde 	bgt.w	8016ee4 <_dtoa_r+0x434>
 8017328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801732a:	f8dd 8000 	ldr.w	r8, [sp]
 801732e:	ea6f 0b03 	mvn.w	fp, r3
 8017332:	f04f 0900 	mov.w	r9, #0
 8017336:	4621      	mov	r1, r4
 8017338:	4630      	mov	r0, r6
 801733a:	f000 ff2b 	bl	8018194 <_Bfree>
 801733e:	2f00      	cmp	r7, #0
 8017340:	f43f aea7 	beq.w	8017092 <_dtoa_r+0x5e2>
 8017344:	f1b9 0f00 	cmp.w	r9, #0
 8017348:	d005      	beq.n	8017356 <_dtoa_r+0x8a6>
 801734a:	45b9      	cmp	r9, r7
 801734c:	d003      	beq.n	8017356 <_dtoa_r+0x8a6>
 801734e:	4649      	mov	r1, r9
 8017350:	4630      	mov	r0, r6
 8017352:	f000 ff1f 	bl	8018194 <_Bfree>
 8017356:	4639      	mov	r1, r7
 8017358:	4630      	mov	r0, r6
 801735a:	f000 ff1b 	bl	8018194 <_Bfree>
 801735e:	e698      	b.n	8017092 <_dtoa_r+0x5e2>
 8017360:	2400      	movs	r4, #0
 8017362:	4627      	mov	r7, r4
 8017364:	e7e0      	b.n	8017328 <_dtoa_r+0x878>
 8017366:	46bb      	mov	fp, r7
 8017368:	4604      	mov	r4, r0
 801736a:	4607      	mov	r7, r0
 801736c:	e5ba      	b.n	8016ee4 <_dtoa_r+0x434>
 801736e:	9b08      	ldr	r3, [sp, #32]
 8017370:	46ca      	mov	sl, r9
 8017372:	2b00      	cmp	r3, #0
 8017374:	f000 8100 	beq.w	8017578 <_dtoa_r+0xac8>
 8017378:	f1b8 0f00 	cmp.w	r8, #0
 801737c:	dd05      	ble.n	801738a <_dtoa_r+0x8da>
 801737e:	4639      	mov	r1, r7
 8017380:	4642      	mov	r2, r8
 8017382:	4630      	mov	r0, r6
 8017384:	f001 f922 	bl	80185cc <__lshift>
 8017388:	4607      	mov	r7, r0
 801738a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801738c:	2b00      	cmp	r3, #0
 801738e:	d05d      	beq.n	801744c <_dtoa_r+0x99c>
 8017390:	6879      	ldr	r1, [r7, #4]
 8017392:	4630      	mov	r0, r6
 8017394:	f000 febe 	bl	8018114 <_Balloc>
 8017398:	4680      	mov	r8, r0
 801739a:	b928      	cbnz	r0, 80173a8 <_dtoa_r+0x8f8>
 801739c:	4b82      	ldr	r3, [pc, #520]	; (80175a8 <_dtoa_r+0xaf8>)
 801739e:	4602      	mov	r2, r0
 80173a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80173a4:	f7ff bb9a 	b.w	8016adc <_dtoa_r+0x2c>
 80173a8:	693a      	ldr	r2, [r7, #16]
 80173aa:	3202      	adds	r2, #2
 80173ac:	0092      	lsls	r2, r2, #2
 80173ae:	f107 010c 	add.w	r1, r7, #12
 80173b2:	300c      	adds	r0, #12
 80173b4:	f7fd fa48 	bl	8014848 <memcpy>
 80173b8:	2201      	movs	r2, #1
 80173ba:	4641      	mov	r1, r8
 80173bc:	4630      	mov	r0, r6
 80173be:	f001 f905 	bl	80185cc <__lshift>
 80173c2:	9b00      	ldr	r3, [sp, #0]
 80173c4:	3301      	adds	r3, #1
 80173c6:	9305      	str	r3, [sp, #20]
 80173c8:	9b00      	ldr	r3, [sp, #0]
 80173ca:	4453      	add	r3, sl
 80173cc:	9309      	str	r3, [sp, #36]	; 0x24
 80173ce:	9b02      	ldr	r3, [sp, #8]
 80173d0:	f003 0301 	and.w	r3, r3, #1
 80173d4:	46b9      	mov	r9, r7
 80173d6:	9308      	str	r3, [sp, #32]
 80173d8:	4607      	mov	r7, r0
 80173da:	9b05      	ldr	r3, [sp, #20]
 80173dc:	4621      	mov	r1, r4
 80173de:	3b01      	subs	r3, #1
 80173e0:	4628      	mov	r0, r5
 80173e2:	9302      	str	r3, [sp, #8]
 80173e4:	f7ff fad9 	bl	801699a <quorem>
 80173e8:	4603      	mov	r3, r0
 80173ea:	3330      	adds	r3, #48	; 0x30
 80173ec:	9006      	str	r0, [sp, #24]
 80173ee:	4649      	mov	r1, r9
 80173f0:	4628      	mov	r0, r5
 80173f2:	930a      	str	r3, [sp, #40]	; 0x28
 80173f4:	f001 f956 	bl	80186a4 <__mcmp>
 80173f8:	463a      	mov	r2, r7
 80173fa:	4682      	mov	sl, r0
 80173fc:	4621      	mov	r1, r4
 80173fe:	4630      	mov	r0, r6
 8017400:	f001 f96c 	bl	80186dc <__mdiff>
 8017404:	68c2      	ldr	r2, [r0, #12]
 8017406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017408:	4680      	mov	r8, r0
 801740a:	bb0a      	cbnz	r2, 8017450 <_dtoa_r+0x9a0>
 801740c:	4601      	mov	r1, r0
 801740e:	4628      	mov	r0, r5
 8017410:	f001 f948 	bl	80186a4 <__mcmp>
 8017414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017416:	4602      	mov	r2, r0
 8017418:	4641      	mov	r1, r8
 801741a:	4630      	mov	r0, r6
 801741c:	920e      	str	r2, [sp, #56]	; 0x38
 801741e:	930a      	str	r3, [sp, #40]	; 0x28
 8017420:	f000 feb8 	bl	8018194 <_Bfree>
 8017424:	9b07      	ldr	r3, [sp, #28]
 8017426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017428:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801742c:	ea43 0102 	orr.w	r1, r3, r2
 8017430:	9b08      	ldr	r3, [sp, #32]
 8017432:	430b      	orrs	r3, r1
 8017434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017436:	d10d      	bne.n	8017454 <_dtoa_r+0x9a4>
 8017438:	2b39      	cmp	r3, #57	; 0x39
 801743a:	d029      	beq.n	8017490 <_dtoa_r+0x9e0>
 801743c:	f1ba 0f00 	cmp.w	sl, #0
 8017440:	dd01      	ble.n	8017446 <_dtoa_r+0x996>
 8017442:	9b06      	ldr	r3, [sp, #24]
 8017444:	3331      	adds	r3, #49	; 0x31
 8017446:	9a02      	ldr	r2, [sp, #8]
 8017448:	7013      	strb	r3, [r2, #0]
 801744a:	e774      	b.n	8017336 <_dtoa_r+0x886>
 801744c:	4638      	mov	r0, r7
 801744e:	e7b8      	b.n	80173c2 <_dtoa_r+0x912>
 8017450:	2201      	movs	r2, #1
 8017452:	e7e1      	b.n	8017418 <_dtoa_r+0x968>
 8017454:	f1ba 0f00 	cmp.w	sl, #0
 8017458:	db06      	blt.n	8017468 <_dtoa_r+0x9b8>
 801745a:	9907      	ldr	r1, [sp, #28]
 801745c:	ea41 0a0a 	orr.w	sl, r1, sl
 8017460:	9908      	ldr	r1, [sp, #32]
 8017462:	ea5a 0101 	orrs.w	r1, sl, r1
 8017466:	d120      	bne.n	80174aa <_dtoa_r+0x9fa>
 8017468:	2a00      	cmp	r2, #0
 801746a:	ddec      	ble.n	8017446 <_dtoa_r+0x996>
 801746c:	4629      	mov	r1, r5
 801746e:	2201      	movs	r2, #1
 8017470:	4630      	mov	r0, r6
 8017472:	9305      	str	r3, [sp, #20]
 8017474:	f001 f8aa 	bl	80185cc <__lshift>
 8017478:	4621      	mov	r1, r4
 801747a:	4605      	mov	r5, r0
 801747c:	f001 f912 	bl	80186a4 <__mcmp>
 8017480:	2800      	cmp	r0, #0
 8017482:	9b05      	ldr	r3, [sp, #20]
 8017484:	dc02      	bgt.n	801748c <_dtoa_r+0x9dc>
 8017486:	d1de      	bne.n	8017446 <_dtoa_r+0x996>
 8017488:	07da      	lsls	r2, r3, #31
 801748a:	d5dc      	bpl.n	8017446 <_dtoa_r+0x996>
 801748c:	2b39      	cmp	r3, #57	; 0x39
 801748e:	d1d8      	bne.n	8017442 <_dtoa_r+0x992>
 8017490:	9a02      	ldr	r2, [sp, #8]
 8017492:	2339      	movs	r3, #57	; 0x39
 8017494:	7013      	strb	r3, [r2, #0]
 8017496:	4643      	mov	r3, r8
 8017498:	4698      	mov	r8, r3
 801749a:	3b01      	subs	r3, #1
 801749c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80174a0:	2a39      	cmp	r2, #57	; 0x39
 80174a2:	d051      	beq.n	8017548 <_dtoa_r+0xa98>
 80174a4:	3201      	adds	r2, #1
 80174a6:	701a      	strb	r2, [r3, #0]
 80174a8:	e745      	b.n	8017336 <_dtoa_r+0x886>
 80174aa:	2a00      	cmp	r2, #0
 80174ac:	dd03      	ble.n	80174b6 <_dtoa_r+0xa06>
 80174ae:	2b39      	cmp	r3, #57	; 0x39
 80174b0:	d0ee      	beq.n	8017490 <_dtoa_r+0x9e0>
 80174b2:	3301      	adds	r3, #1
 80174b4:	e7c7      	b.n	8017446 <_dtoa_r+0x996>
 80174b6:	9a05      	ldr	r2, [sp, #20]
 80174b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80174ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80174be:	428a      	cmp	r2, r1
 80174c0:	d02b      	beq.n	801751a <_dtoa_r+0xa6a>
 80174c2:	4629      	mov	r1, r5
 80174c4:	2300      	movs	r3, #0
 80174c6:	220a      	movs	r2, #10
 80174c8:	4630      	mov	r0, r6
 80174ca:	f000 fe85 	bl	80181d8 <__multadd>
 80174ce:	45b9      	cmp	r9, r7
 80174d0:	4605      	mov	r5, r0
 80174d2:	f04f 0300 	mov.w	r3, #0
 80174d6:	f04f 020a 	mov.w	r2, #10
 80174da:	4649      	mov	r1, r9
 80174dc:	4630      	mov	r0, r6
 80174de:	d107      	bne.n	80174f0 <_dtoa_r+0xa40>
 80174e0:	f000 fe7a 	bl	80181d8 <__multadd>
 80174e4:	4681      	mov	r9, r0
 80174e6:	4607      	mov	r7, r0
 80174e8:	9b05      	ldr	r3, [sp, #20]
 80174ea:	3301      	adds	r3, #1
 80174ec:	9305      	str	r3, [sp, #20]
 80174ee:	e774      	b.n	80173da <_dtoa_r+0x92a>
 80174f0:	f000 fe72 	bl	80181d8 <__multadd>
 80174f4:	4639      	mov	r1, r7
 80174f6:	4681      	mov	r9, r0
 80174f8:	2300      	movs	r3, #0
 80174fa:	220a      	movs	r2, #10
 80174fc:	4630      	mov	r0, r6
 80174fe:	f000 fe6b 	bl	80181d8 <__multadd>
 8017502:	4607      	mov	r7, r0
 8017504:	e7f0      	b.n	80174e8 <_dtoa_r+0xa38>
 8017506:	f1ba 0f00 	cmp.w	sl, #0
 801750a:	9a00      	ldr	r2, [sp, #0]
 801750c:	bfcc      	ite	gt
 801750e:	46d0      	movgt	r8, sl
 8017510:	f04f 0801 	movle.w	r8, #1
 8017514:	4490      	add	r8, r2
 8017516:	f04f 0900 	mov.w	r9, #0
 801751a:	4629      	mov	r1, r5
 801751c:	2201      	movs	r2, #1
 801751e:	4630      	mov	r0, r6
 8017520:	9302      	str	r3, [sp, #8]
 8017522:	f001 f853 	bl	80185cc <__lshift>
 8017526:	4621      	mov	r1, r4
 8017528:	4605      	mov	r5, r0
 801752a:	f001 f8bb 	bl	80186a4 <__mcmp>
 801752e:	2800      	cmp	r0, #0
 8017530:	dcb1      	bgt.n	8017496 <_dtoa_r+0x9e6>
 8017532:	d102      	bne.n	801753a <_dtoa_r+0xa8a>
 8017534:	9b02      	ldr	r3, [sp, #8]
 8017536:	07db      	lsls	r3, r3, #31
 8017538:	d4ad      	bmi.n	8017496 <_dtoa_r+0x9e6>
 801753a:	4643      	mov	r3, r8
 801753c:	4698      	mov	r8, r3
 801753e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017542:	2a30      	cmp	r2, #48	; 0x30
 8017544:	d0fa      	beq.n	801753c <_dtoa_r+0xa8c>
 8017546:	e6f6      	b.n	8017336 <_dtoa_r+0x886>
 8017548:	9a00      	ldr	r2, [sp, #0]
 801754a:	429a      	cmp	r2, r3
 801754c:	d1a4      	bne.n	8017498 <_dtoa_r+0x9e8>
 801754e:	f10b 0b01 	add.w	fp, fp, #1
 8017552:	2331      	movs	r3, #49	; 0x31
 8017554:	e778      	b.n	8017448 <_dtoa_r+0x998>
 8017556:	4b15      	ldr	r3, [pc, #84]	; (80175ac <_dtoa_r+0xafc>)
 8017558:	f7ff bb12 	b.w	8016b80 <_dtoa_r+0xd0>
 801755c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801755e:	2b00      	cmp	r3, #0
 8017560:	f47f aaee 	bne.w	8016b40 <_dtoa_r+0x90>
 8017564:	4b12      	ldr	r3, [pc, #72]	; (80175b0 <_dtoa_r+0xb00>)
 8017566:	f7ff bb0b 	b.w	8016b80 <_dtoa_r+0xd0>
 801756a:	f1ba 0f00 	cmp.w	sl, #0
 801756e:	dc03      	bgt.n	8017578 <_dtoa_r+0xac8>
 8017570:	9b07      	ldr	r3, [sp, #28]
 8017572:	2b02      	cmp	r3, #2
 8017574:	f73f aec7 	bgt.w	8017306 <_dtoa_r+0x856>
 8017578:	f8dd 8000 	ldr.w	r8, [sp]
 801757c:	4621      	mov	r1, r4
 801757e:	4628      	mov	r0, r5
 8017580:	f7ff fa0b 	bl	801699a <quorem>
 8017584:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017588:	f808 3b01 	strb.w	r3, [r8], #1
 801758c:	9a00      	ldr	r2, [sp, #0]
 801758e:	eba8 0202 	sub.w	r2, r8, r2
 8017592:	4592      	cmp	sl, r2
 8017594:	ddb7      	ble.n	8017506 <_dtoa_r+0xa56>
 8017596:	4629      	mov	r1, r5
 8017598:	2300      	movs	r3, #0
 801759a:	220a      	movs	r2, #10
 801759c:	4630      	mov	r0, r6
 801759e:	f000 fe1b 	bl	80181d8 <__multadd>
 80175a2:	4605      	mov	r5, r0
 80175a4:	e7ea      	b.n	801757c <_dtoa_r+0xacc>
 80175a6:	bf00      	nop
 80175a8:	08021ca4 	.word	0x08021ca4
 80175ac:	08021aa5 	.word	0x08021aa5
 80175b0:	08021c21 	.word	0x08021c21

080175b4 <__sflush_r>:
 80175b4:	898a      	ldrh	r2, [r1, #12]
 80175b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ba:	4605      	mov	r5, r0
 80175bc:	0710      	lsls	r0, r2, #28
 80175be:	460c      	mov	r4, r1
 80175c0:	d458      	bmi.n	8017674 <__sflush_r+0xc0>
 80175c2:	684b      	ldr	r3, [r1, #4]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	dc05      	bgt.n	80175d4 <__sflush_r+0x20>
 80175c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	dc02      	bgt.n	80175d4 <__sflush_r+0x20>
 80175ce:	2000      	movs	r0, #0
 80175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175d6:	2e00      	cmp	r6, #0
 80175d8:	d0f9      	beq.n	80175ce <__sflush_r+0x1a>
 80175da:	2300      	movs	r3, #0
 80175dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80175e0:	682f      	ldr	r7, [r5, #0]
 80175e2:	602b      	str	r3, [r5, #0]
 80175e4:	d032      	beq.n	801764c <__sflush_r+0x98>
 80175e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80175e8:	89a3      	ldrh	r3, [r4, #12]
 80175ea:	075a      	lsls	r2, r3, #29
 80175ec:	d505      	bpl.n	80175fa <__sflush_r+0x46>
 80175ee:	6863      	ldr	r3, [r4, #4]
 80175f0:	1ac0      	subs	r0, r0, r3
 80175f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175f4:	b10b      	cbz	r3, 80175fa <__sflush_r+0x46>
 80175f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80175f8:	1ac0      	subs	r0, r0, r3
 80175fa:	2300      	movs	r3, #0
 80175fc:	4602      	mov	r2, r0
 80175fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017600:	6a21      	ldr	r1, [r4, #32]
 8017602:	4628      	mov	r0, r5
 8017604:	47b0      	blx	r6
 8017606:	1c43      	adds	r3, r0, #1
 8017608:	89a3      	ldrh	r3, [r4, #12]
 801760a:	d106      	bne.n	801761a <__sflush_r+0x66>
 801760c:	6829      	ldr	r1, [r5, #0]
 801760e:	291d      	cmp	r1, #29
 8017610:	d82c      	bhi.n	801766c <__sflush_r+0xb8>
 8017612:	4a2a      	ldr	r2, [pc, #168]	; (80176bc <__sflush_r+0x108>)
 8017614:	40ca      	lsrs	r2, r1
 8017616:	07d6      	lsls	r6, r2, #31
 8017618:	d528      	bpl.n	801766c <__sflush_r+0xb8>
 801761a:	2200      	movs	r2, #0
 801761c:	6062      	str	r2, [r4, #4]
 801761e:	04d9      	lsls	r1, r3, #19
 8017620:	6922      	ldr	r2, [r4, #16]
 8017622:	6022      	str	r2, [r4, #0]
 8017624:	d504      	bpl.n	8017630 <__sflush_r+0x7c>
 8017626:	1c42      	adds	r2, r0, #1
 8017628:	d101      	bne.n	801762e <__sflush_r+0x7a>
 801762a:	682b      	ldr	r3, [r5, #0]
 801762c:	b903      	cbnz	r3, 8017630 <__sflush_r+0x7c>
 801762e:	6560      	str	r0, [r4, #84]	; 0x54
 8017630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017632:	602f      	str	r7, [r5, #0]
 8017634:	2900      	cmp	r1, #0
 8017636:	d0ca      	beq.n	80175ce <__sflush_r+0x1a>
 8017638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801763c:	4299      	cmp	r1, r3
 801763e:	d002      	beq.n	8017646 <__sflush_r+0x92>
 8017640:	4628      	mov	r0, r5
 8017642:	f7fd f931 	bl	80148a8 <_free_r>
 8017646:	2000      	movs	r0, #0
 8017648:	6360      	str	r0, [r4, #52]	; 0x34
 801764a:	e7c1      	b.n	80175d0 <__sflush_r+0x1c>
 801764c:	6a21      	ldr	r1, [r4, #32]
 801764e:	2301      	movs	r3, #1
 8017650:	4628      	mov	r0, r5
 8017652:	47b0      	blx	r6
 8017654:	1c41      	adds	r1, r0, #1
 8017656:	d1c7      	bne.n	80175e8 <__sflush_r+0x34>
 8017658:	682b      	ldr	r3, [r5, #0]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d0c4      	beq.n	80175e8 <__sflush_r+0x34>
 801765e:	2b1d      	cmp	r3, #29
 8017660:	d001      	beq.n	8017666 <__sflush_r+0xb2>
 8017662:	2b16      	cmp	r3, #22
 8017664:	d101      	bne.n	801766a <__sflush_r+0xb6>
 8017666:	602f      	str	r7, [r5, #0]
 8017668:	e7b1      	b.n	80175ce <__sflush_r+0x1a>
 801766a:	89a3      	ldrh	r3, [r4, #12]
 801766c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017670:	81a3      	strh	r3, [r4, #12]
 8017672:	e7ad      	b.n	80175d0 <__sflush_r+0x1c>
 8017674:	690f      	ldr	r7, [r1, #16]
 8017676:	2f00      	cmp	r7, #0
 8017678:	d0a9      	beq.n	80175ce <__sflush_r+0x1a>
 801767a:	0793      	lsls	r3, r2, #30
 801767c:	680e      	ldr	r6, [r1, #0]
 801767e:	bf08      	it	eq
 8017680:	694b      	ldreq	r3, [r1, #20]
 8017682:	600f      	str	r7, [r1, #0]
 8017684:	bf18      	it	ne
 8017686:	2300      	movne	r3, #0
 8017688:	eba6 0807 	sub.w	r8, r6, r7
 801768c:	608b      	str	r3, [r1, #8]
 801768e:	f1b8 0f00 	cmp.w	r8, #0
 8017692:	dd9c      	ble.n	80175ce <__sflush_r+0x1a>
 8017694:	6a21      	ldr	r1, [r4, #32]
 8017696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017698:	4643      	mov	r3, r8
 801769a:	463a      	mov	r2, r7
 801769c:	4628      	mov	r0, r5
 801769e:	47b0      	blx	r6
 80176a0:	2800      	cmp	r0, #0
 80176a2:	dc06      	bgt.n	80176b2 <__sflush_r+0xfe>
 80176a4:	89a3      	ldrh	r3, [r4, #12]
 80176a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176aa:	81a3      	strh	r3, [r4, #12]
 80176ac:	f04f 30ff 	mov.w	r0, #4294967295
 80176b0:	e78e      	b.n	80175d0 <__sflush_r+0x1c>
 80176b2:	4407      	add	r7, r0
 80176b4:	eba8 0800 	sub.w	r8, r8, r0
 80176b8:	e7e9      	b.n	801768e <__sflush_r+0xda>
 80176ba:	bf00      	nop
 80176bc:	20400001 	.word	0x20400001

080176c0 <_fflush_r>:
 80176c0:	b538      	push	{r3, r4, r5, lr}
 80176c2:	690b      	ldr	r3, [r1, #16]
 80176c4:	4605      	mov	r5, r0
 80176c6:	460c      	mov	r4, r1
 80176c8:	b913      	cbnz	r3, 80176d0 <_fflush_r+0x10>
 80176ca:	2500      	movs	r5, #0
 80176cc:	4628      	mov	r0, r5
 80176ce:	bd38      	pop	{r3, r4, r5, pc}
 80176d0:	b118      	cbz	r0, 80176da <_fflush_r+0x1a>
 80176d2:	6983      	ldr	r3, [r0, #24]
 80176d4:	b90b      	cbnz	r3, 80176da <_fflush_r+0x1a>
 80176d6:	f000 f887 	bl	80177e8 <__sinit>
 80176da:	4b14      	ldr	r3, [pc, #80]	; (801772c <_fflush_r+0x6c>)
 80176dc:	429c      	cmp	r4, r3
 80176de:	d11b      	bne.n	8017718 <_fflush_r+0x58>
 80176e0:	686c      	ldr	r4, [r5, #4]
 80176e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d0ef      	beq.n	80176ca <_fflush_r+0xa>
 80176ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80176ec:	07d0      	lsls	r0, r2, #31
 80176ee:	d404      	bmi.n	80176fa <_fflush_r+0x3a>
 80176f0:	0599      	lsls	r1, r3, #22
 80176f2:	d402      	bmi.n	80176fa <_fflush_r+0x3a>
 80176f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176f6:	f000 fc88 	bl	801800a <__retarget_lock_acquire_recursive>
 80176fa:	4628      	mov	r0, r5
 80176fc:	4621      	mov	r1, r4
 80176fe:	f7ff ff59 	bl	80175b4 <__sflush_r>
 8017702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017704:	07da      	lsls	r2, r3, #31
 8017706:	4605      	mov	r5, r0
 8017708:	d4e0      	bmi.n	80176cc <_fflush_r+0xc>
 801770a:	89a3      	ldrh	r3, [r4, #12]
 801770c:	059b      	lsls	r3, r3, #22
 801770e:	d4dd      	bmi.n	80176cc <_fflush_r+0xc>
 8017710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017712:	f000 fc7b 	bl	801800c <__retarget_lock_release_recursive>
 8017716:	e7d9      	b.n	80176cc <_fflush_r+0xc>
 8017718:	4b05      	ldr	r3, [pc, #20]	; (8017730 <_fflush_r+0x70>)
 801771a:	429c      	cmp	r4, r3
 801771c:	d101      	bne.n	8017722 <_fflush_r+0x62>
 801771e:	68ac      	ldr	r4, [r5, #8]
 8017720:	e7df      	b.n	80176e2 <_fflush_r+0x22>
 8017722:	4b04      	ldr	r3, [pc, #16]	; (8017734 <_fflush_r+0x74>)
 8017724:	429c      	cmp	r4, r3
 8017726:	bf08      	it	eq
 8017728:	68ec      	ldreq	r4, [r5, #12]
 801772a:	e7da      	b.n	80176e2 <_fflush_r+0x22>
 801772c:	08021cd8 	.word	0x08021cd8
 8017730:	08021cf8 	.word	0x08021cf8
 8017734:	08021cb8 	.word	0x08021cb8

08017738 <std>:
 8017738:	2300      	movs	r3, #0
 801773a:	b510      	push	{r4, lr}
 801773c:	4604      	mov	r4, r0
 801773e:	e9c0 3300 	strd	r3, r3, [r0]
 8017742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017746:	6083      	str	r3, [r0, #8]
 8017748:	8181      	strh	r1, [r0, #12]
 801774a:	6643      	str	r3, [r0, #100]	; 0x64
 801774c:	81c2      	strh	r2, [r0, #14]
 801774e:	6183      	str	r3, [r0, #24]
 8017750:	4619      	mov	r1, r3
 8017752:	2208      	movs	r2, #8
 8017754:	305c      	adds	r0, #92	; 0x5c
 8017756:	f7fd f89f 	bl	8014898 <memset>
 801775a:	4b05      	ldr	r3, [pc, #20]	; (8017770 <std+0x38>)
 801775c:	6263      	str	r3, [r4, #36]	; 0x24
 801775e:	4b05      	ldr	r3, [pc, #20]	; (8017774 <std+0x3c>)
 8017760:	62a3      	str	r3, [r4, #40]	; 0x28
 8017762:	4b05      	ldr	r3, [pc, #20]	; (8017778 <std+0x40>)
 8017764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017766:	4b05      	ldr	r3, [pc, #20]	; (801777c <std+0x44>)
 8017768:	6224      	str	r4, [r4, #32]
 801776a:	6323      	str	r3, [r4, #48]	; 0x30
 801776c:	bd10      	pop	{r4, pc}
 801776e:	bf00      	nop
 8017770:	08018e49 	.word	0x08018e49
 8017774:	08018e6b 	.word	0x08018e6b
 8017778:	08018ea3 	.word	0x08018ea3
 801777c:	08018ec7 	.word	0x08018ec7

08017780 <_cleanup_r>:
 8017780:	4901      	ldr	r1, [pc, #4]	; (8017788 <_cleanup_r+0x8>)
 8017782:	f000 b8af 	b.w	80178e4 <_fwalk_reent>
 8017786:	bf00      	nop
 8017788:	080176c1 	.word	0x080176c1

0801778c <__sfmoreglue>:
 801778c:	b570      	push	{r4, r5, r6, lr}
 801778e:	1e4a      	subs	r2, r1, #1
 8017790:	2568      	movs	r5, #104	; 0x68
 8017792:	4355      	muls	r5, r2
 8017794:	460e      	mov	r6, r1
 8017796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801779a:	f7fd f8d5 	bl	8014948 <_malloc_r>
 801779e:	4604      	mov	r4, r0
 80177a0:	b140      	cbz	r0, 80177b4 <__sfmoreglue+0x28>
 80177a2:	2100      	movs	r1, #0
 80177a4:	e9c0 1600 	strd	r1, r6, [r0]
 80177a8:	300c      	adds	r0, #12
 80177aa:	60a0      	str	r0, [r4, #8]
 80177ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80177b0:	f7fd f872 	bl	8014898 <memset>
 80177b4:	4620      	mov	r0, r4
 80177b6:	bd70      	pop	{r4, r5, r6, pc}

080177b8 <__sfp_lock_acquire>:
 80177b8:	4801      	ldr	r0, [pc, #4]	; (80177c0 <__sfp_lock_acquire+0x8>)
 80177ba:	f000 bc26 	b.w	801800a <__retarget_lock_acquire_recursive>
 80177be:	bf00      	nop
 80177c0:	2400ec18 	.word	0x2400ec18

080177c4 <__sfp_lock_release>:
 80177c4:	4801      	ldr	r0, [pc, #4]	; (80177cc <__sfp_lock_release+0x8>)
 80177c6:	f000 bc21 	b.w	801800c <__retarget_lock_release_recursive>
 80177ca:	bf00      	nop
 80177cc:	2400ec18 	.word	0x2400ec18

080177d0 <__sinit_lock_acquire>:
 80177d0:	4801      	ldr	r0, [pc, #4]	; (80177d8 <__sinit_lock_acquire+0x8>)
 80177d2:	f000 bc1a 	b.w	801800a <__retarget_lock_acquire_recursive>
 80177d6:	bf00      	nop
 80177d8:	2400ec13 	.word	0x2400ec13

080177dc <__sinit_lock_release>:
 80177dc:	4801      	ldr	r0, [pc, #4]	; (80177e4 <__sinit_lock_release+0x8>)
 80177de:	f000 bc15 	b.w	801800c <__retarget_lock_release_recursive>
 80177e2:	bf00      	nop
 80177e4:	2400ec13 	.word	0x2400ec13

080177e8 <__sinit>:
 80177e8:	b510      	push	{r4, lr}
 80177ea:	4604      	mov	r4, r0
 80177ec:	f7ff fff0 	bl	80177d0 <__sinit_lock_acquire>
 80177f0:	69a3      	ldr	r3, [r4, #24]
 80177f2:	b11b      	cbz	r3, 80177fc <__sinit+0x14>
 80177f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f8:	f7ff bff0 	b.w	80177dc <__sinit_lock_release>
 80177fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017800:	6523      	str	r3, [r4, #80]	; 0x50
 8017802:	4b13      	ldr	r3, [pc, #76]	; (8017850 <__sinit+0x68>)
 8017804:	4a13      	ldr	r2, [pc, #76]	; (8017854 <__sinit+0x6c>)
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	62a2      	str	r2, [r4, #40]	; 0x28
 801780a:	42a3      	cmp	r3, r4
 801780c:	bf04      	itt	eq
 801780e:	2301      	moveq	r3, #1
 8017810:	61a3      	streq	r3, [r4, #24]
 8017812:	4620      	mov	r0, r4
 8017814:	f000 f820 	bl	8017858 <__sfp>
 8017818:	6060      	str	r0, [r4, #4]
 801781a:	4620      	mov	r0, r4
 801781c:	f000 f81c 	bl	8017858 <__sfp>
 8017820:	60a0      	str	r0, [r4, #8]
 8017822:	4620      	mov	r0, r4
 8017824:	f000 f818 	bl	8017858 <__sfp>
 8017828:	2200      	movs	r2, #0
 801782a:	60e0      	str	r0, [r4, #12]
 801782c:	2104      	movs	r1, #4
 801782e:	6860      	ldr	r0, [r4, #4]
 8017830:	f7ff ff82 	bl	8017738 <std>
 8017834:	68a0      	ldr	r0, [r4, #8]
 8017836:	2201      	movs	r2, #1
 8017838:	2109      	movs	r1, #9
 801783a:	f7ff ff7d 	bl	8017738 <std>
 801783e:	68e0      	ldr	r0, [r4, #12]
 8017840:	2202      	movs	r2, #2
 8017842:	2112      	movs	r1, #18
 8017844:	f7ff ff78 	bl	8017738 <std>
 8017848:	2301      	movs	r3, #1
 801784a:	61a3      	str	r3, [r4, #24]
 801784c:	e7d2      	b.n	80177f4 <__sinit+0xc>
 801784e:	bf00      	nop
 8017850:	08021a80 	.word	0x08021a80
 8017854:	08017781 	.word	0x08017781

08017858 <__sfp>:
 8017858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801785a:	4607      	mov	r7, r0
 801785c:	f7ff ffac 	bl	80177b8 <__sfp_lock_acquire>
 8017860:	4b1e      	ldr	r3, [pc, #120]	; (80178dc <__sfp+0x84>)
 8017862:	681e      	ldr	r6, [r3, #0]
 8017864:	69b3      	ldr	r3, [r6, #24]
 8017866:	b913      	cbnz	r3, 801786e <__sfp+0x16>
 8017868:	4630      	mov	r0, r6
 801786a:	f7ff ffbd 	bl	80177e8 <__sinit>
 801786e:	3648      	adds	r6, #72	; 0x48
 8017870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017874:	3b01      	subs	r3, #1
 8017876:	d503      	bpl.n	8017880 <__sfp+0x28>
 8017878:	6833      	ldr	r3, [r6, #0]
 801787a:	b30b      	cbz	r3, 80178c0 <__sfp+0x68>
 801787c:	6836      	ldr	r6, [r6, #0]
 801787e:	e7f7      	b.n	8017870 <__sfp+0x18>
 8017880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017884:	b9d5      	cbnz	r5, 80178bc <__sfp+0x64>
 8017886:	4b16      	ldr	r3, [pc, #88]	; (80178e0 <__sfp+0x88>)
 8017888:	60e3      	str	r3, [r4, #12]
 801788a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801788e:	6665      	str	r5, [r4, #100]	; 0x64
 8017890:	f000 fbba 	bl	8018008 <__retarget_lock_init_recursive>
 8017894:	f7ff ff96 	bl	80177c4 <__sfp_lock_release>
 8017898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801789c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80178a0:	6025      	str	r5, [r4, #0]
 80178a2:	61a5      	str	r5, [r4, #24]
 80178a4:	2208      	movs	r2, #8
 80178a6:	4629      	mov	r1, r5
 80178a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80178ac:	f7fc fff4 	bl	8014898 <memset>
 80178b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80178b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80178b8:	4620      	mov	r0, r4
 80178ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178bc:	3468      	adds	r4, #104	; 0x68
 80178be:	e7d9      	b.n	8017874 <__sfp+0x1c>
 80178c0:	2104      	movs	r1, #4
 80178c2:	4638      	mov	r0, r7
 80178c4:	f7ff ff62 	bl	801778c <__sfmoreglue>
 80178c8:	4604      	mov	r4, r0
 80178ca:	6030      	str	r0, [r6, #0]
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d1d5      	bne.n	801787c <__sfp+0x24>
 80178d0:	f7ff ff78 	bl	80177c4 <__sfp_lock_release>
 80178d4:	230c      	movs	r3, #12
 80178d6:	603b      	str	r3, [r7, #0]
 80178d8:	e7ee      	b.n	80178b8 <__sfp+0x60>
 80178da:	bf00      	nop
 80178dc:	08021a80 	.word	0x08021a80
 80178e0:	ffff0001 	.word	0xffff0001

080178e4 <_fwalk_reent>:
 80178e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178e8:	4606      	mov	r6, r0
 80178ea:	4688      	mov	r8, r1
 80178ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80178f0:	2700      	movs	r7, #0
 80178f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178f6:	f1b9 0901 	subs.w	r9, r9, #1
 80178fa:	d505      	bpl.n	8017908 <_fwalk_reent+0x24>
 80178fc:	6824      	ldr	r4, [r4, #0]
 80178fe:	2c00      	cmp	r4, #0
 8017900:	d1f7      	bne.n	80178f2 <_fwalk_reent+0xe>
 8017902:	4638      	mov	r0, r7
 8017904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017908:	89ab      	ldrh	r3, [r5, #12]
 801790a:	2b01      	cmp	r3, #1
 801790c:	d907      	bls.n	801791e <_fwalk_reent+0x3a>
 801790e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017912:	3301      	adds	r3, #1
 8017914:	d003      	beq.n	801791e <_fwalk_reent+0x3a>
 8017916:	4629      	mov	r1, r5
 8017918:	4630      	mov	r0, r6
 801791a:	47c0      	blx	r8
 801791c:	4307      	orrs	r7, r0
 801791e:	3568      	adds	r5, #104	; 0x68
 8017920:	e7e9      	b.n	80178f6 <_fwalk_reent+0x12>

08017922 <rshift>:
 8017922:	6903      	ldr	r3, [r0, #16]
 8017924:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801792c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017930:	f100 0414 	add.w	r4, r0, #20
 8017934:	dd45      	ble.n	80179c2 <rshift+0xa0>
 8017936:	f011 011f 	ands.w	r1, r1, #31
 801793a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801793e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017942:	d10c      	bne.n	801795e <rshift+0x3c>
 8017944:	f100 0710 	add.w	r7, r0, #16
 8017948:	4629      	mov	r1, r5
 801794a:	42b1      	cmp	r1, r6
 801794c:	d334      	bcc.n	80179b8 <rshift+0x96>
 801794e:	1a9b      	subs	r3, r3, r2
 8017950:	009b      	lsls	r3, r3, #2
 8017952:	1eea      	subs	r2, r5, #3
 8017954:	4296      	cmp	r6, r2
 8017956:	bf38      	it	cc
 8017958:	2300      	movcc	r3, #0
 801795a:	4423      	add	r3, r4
 801795c:	e015      	b.n	801798a <rshift+0x68>
 801795e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017962:	f1c1 0820 	rsb	r8, r1, #32
 8017966:	40cf      	lsrs	r7, r1
 8017968:	f105 0e04 	add.w	lr, r5, #4
 801796c:	46a1      	mov	r9, r4
 801796e:	4576      	cmp	r6, lr
 8017970:	46f4      	mov	ip, lr
 8017972:	d815      	bhi.n	80179a0 <rshift+0x7e>
 8017974:	1a9b      	subs	r3, r3, r2
 8017976:	009a      	lsls	r2, r3, #2
 8017978:	3a04      	subs	r2, #4
 801797a:	3501      	adds	r5, #1
 801797c:	42ae      	cmp	r6, r5
 801797e:	bf38      	it	cc
 8017980:	2200      	movcc	r2, #0
 8017982:	18a3      	adds	r3, r4, r2
 8017984:	50a7      	str	r7, [r4, r2]
 8017986:	b107      	cbz	r7, 801798a <rshift+0x68>
 8017988:	3304      	adds	r3, #4
 801798a:	1b1a      	subs	r2, r3, r4
 801798c:	42a3      	cmp	r3, r4
 801798e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017992:	bf08      	it	eq
 8017994:	2300      	moveq	r3, #0
 8017996:	6102      	str	r2, [r0, #16]
 8017998:	bf08      	it	eq
 801799a:	6143      	streq	r3, [r0, #20]
 801799c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179a0:	f8dc c000 	ldr.w	ip, [ip]
 80179a4:	fa0c fc08 	lsl.w	ip, ip, r8
 80179a8:	ea4c 0707 	orr.w	r7, ip, r7
 80179ac:	f849 7b04 	str.w	r7, [r9], #4
 80179b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80179b4:	40cf      	lsrs	r7, r1
 80179b6:	e7da      	b.n	801796e <rshift+0x4c>
 80179b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80179bc:	f847 cf04 	str.w	ip, [r7, #4]!
 80179c0:	e7c3      	b.n	801794a <rshift+0x28>
 80179c2:	4623      	mov	r3, r4
 80179c4:	e7e1      	b.n	801798a <rshift+0x68>

080179c6 <__hexdig_fun>:
 80179c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80179ca:	2b09      	cmp	r3, #9
 80179cc:	d802      	bhi.n	80179d4 <__hexdig_fun+0xe>
 80179ce:	3820      	subs	r0, #32
 80179d0:	b2c0      	uxtb	r0, r0
 80179d2:	4770      	bx	lr
 80179d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80179d8:	2b05      	cmp	r3, #5
 80179da:	d801      	bhi.n	80179e0 <__hexdig_fun+0x1a>
 80179dc:	3847      	subs	r0, #71	; 0x47
 80179de:	e7f7      	b.n	80179d0 <__hexdig_fun+0xa>
 80179e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80179e4:	2b05      	cmp	r3, #5
 80179e6:	d801      	bhi.n	80179ec <__hexdig_fun+0x26>
 80179e8:	3827      	subs	r0, #39	; 0x27
 80179ea:	e7f1      	b.n	80179d0 <__hexdig_fun+0xa>
 80179ec:	2000      	movs	r0, #0
 80179ee:	4770      	bx	lr

080179f0 <__gethex>:
 80179f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f4:	ed2d 8b02 	vpush	{d8}
 80179f8:	b089      	sub	sp, #36	; 0x24
 80179fa:	ee08 0a10 	vmov	s16, r0
 80179fe:	9304      	str	r3, [sp, #16]
 8017a00:	4bbc      	ldr	r3, [pc, #752]	; (8017cf4 <__gethex+0x304>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	9301      	str	r3, [sp, #4]
 8017a06:	4618      	mov	r0, r3
 8017a08:	468b      	mov	fp, r1
 8017a0a:	4690      	mov	r8, r2
 8017a0c:	f7e8 fc72 	bl	80002f4 <strlen>
 8017a10:	9b01      	ldr	r3, [sp, #4]
 8017a12:	f8db 2000 	ldr.w	r2, [fp]
 8017a16:	4403      	add	r3, r0
 8017a18:	4682      	mov	sl, r0
 8017a1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017a1e:	9305      	str	r3, [sp, #20]
 8017a20:	1c93      	adds	r3, r2, #2
 8017a22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017a26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017a2a:	32fe      	adds	r2, #254	; 0xfe
 8017a2c:	18d1      	adds	r1, r2, r3
 8017a2e:	461f      	mov	r7, r3
 8017a30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017a34:	9100      	str	r1, [sp, #0]
 8017a36:	2830      	cmp	r0, #48	; 0x30
 8017a38:	d0f8      	beq.n	8017a2c <__gethex+0x3c>
 8017a3a:	f7ff ffc4 	bl	80179c6 <__hexdig_fun>
 8017a3e:	4604      	mov	r4, r0
 8017a40:	2800      	cmp	r0, #0
 8017a42:	d13a      	bne.n	8017aba <__gethex+0xca>
 8017a44:	9901      	ldr	r1, [sp, #4]
 8017a46:	4652      	mov	r2, sl
 8017a48:	4638      	mov	r0, r7
 8017a4a:	f7fe f83b 	bl	8015ac4 <strncmp>
 8017a4e:	4605      	mov	r5, r0
 8017a50:	2800      	cmp	r0, #0
 8017a52:	d168      	bne.n	8017b26 <__gethex+0x136>
 8017a54:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017a58:	eb07 060a 	add.w	r6, r7, sl
 8017a5c:	f7ff ffb3 	bl	80179c6 <__hexdig_fun>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	d062      	beq.n	8017b2a <__gethex+0x13a>
 8017a64:	4633      	mov	r3, r6
 8017a66:	7818      	ldrb	r0, [r3, #0]
 8017a68:	2830      	cmp	r0, #48	; 0x30
 8017a6a:	461f      	mov	r7, r3
 8017a6c:	f103 0301 	add.w	r3, r3, #1
 8017a70:	d0f9      	beq.n	8017a66 <__gethex+0x76>
 8017a72:	f7ff ffa8 	bl	80179c6 <__hexdig_fun>
 8017a76:	2301      	movs	r3, #1
 8017a78:	fab0 f480 	clz	r4, r0
 8017a7c:	0964      	lsrs	r4, r4, #5
 8017a7e:	4635      	mov	r5, r6
 8017a80:	9300      	str	r3, [sp, #0]
 8017a82:	463a      	mov	r2, r7
 8017a84:	4616      	mov	r6, r2
 8017a86:	3201      	adds	r2, #1
 8017a88:	7830      	ldrb	r0, [r6, #0]
 8017a8a:	f7ff ff9c 	bl	80179c6 <__hexdig_fun>
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	d1f8      	bne.n	8017a84 <__gethex+0x94>
 8017a92:	9901      	ldr	r1, [sp, #4]
 8017a94:	4652      	mov	r2, sl
 8017a96:	4630      	mov	r0, r6
 8017a98:	f7fe f814 	bl	8015ac4 <strncmp>
 8017a9c:	b980      	cbnz	r0, 8017ac0 <__gethex+0xd0>
 8017a9e:	b94d      	cbnz	r5, 8017ab4 <__gethex+0xc4>
 8017aa0:	eb06 050a 	add.w	r5, r6, sl
 8017aa4:	462a      	mov	r2, r5
 8017aa6:	4616      	mov	r6, r2
 8017aa8:	3201      	adds	r2, #1
 8017aaa:	7830      	ldrb	r0, [r6, #0]
 8017aac:	f7ff ff8b 	bl	80179c6 <__hexdig_fun>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d1f8      	bne.n	8017aa6 <__gethex+0xb6>
 8017ab4:	1bad      	subs	r5, r5, r6
 8017ab6:	00ad      	lsls	r5, r5, #2
 8017ab8:	e004      	b.n	8017ac4 <__gethex+0xd4>
 8017aba:	2400      	movs	r4, #0
 8017abc:	4625      	mov	r5, r4
 8017abe:	e7e0      	b.n	8017a82 <__gethex+0x92>
 8017ac0:	2d00      	cmp	r5, #0
 8017ac2:	d1f7      	bne.n	8017ab4 <__gethex+0xc4>
 8017ac4:	7833      	ldrb	r3, [r6, #0]
 8017ac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017aca:	2b50      	cmp	r3, #80	; 0x50
 8017acc:	d13b      	bne.n	8017b46 <__gethex+0x156>
 8017ace:	7873      	ldrb	r3, [r6, #1]
 8017ad0:	2b2b      	cmp	r3, #43	; 0x2b
 8017ad2:	d02c      	beq.n	8017b2e <__gethex+0x13e>
 8017ad4:	2b2d      	cmp	r3, #45	; 0x2d
 8017ad6:	d02e      	beq.n	8017b36 <__gethex+0x146>
 8017ad8:	1c71      	adds	r1, r6, #1
 8017ada:	f04f 0900 	mov.w	r9, #0
 8017ade:	7808      	ldrb	r0, [r1, #0]
 8017ae0:	f7ff ff71 	bl	80179c6 <__hexdig_fun>
 8017ae4:	1e43      	subs	r3, r0, #1
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	2b18      	cmp	r3, #24
 8017aea:	d82c      	bhi.n	8017b46 <__gethex+0x156>
 8017aec:	f1a0 0210 	sub.w	r2, r0, #16
 8017af0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017af4:	f7ff ff67 	bl	80179c6 <__hexdig_fun>
 8017af8:	1e43      	subs	r3, r0, #1
 8017afa:	b2db      	uxtb	r3, r3
 8017afc:	2b18      	cmp	r3, #24
 8017afe:	d91d      	bls.n	8017b3c <__gethex+0x14c>
 8017b00:	f1b9 0f00 	cmp.w	r9, #0
 8017b04:	d000      	beq.n	8017b08 <__gethex+0x118>
 8017b06:	4252      	negs	r2, r2
 8017b08:	4415      	add	r5, r2
 8017b0a:	f8cb 1000 	str.w	r1, [fp]
 8017b0e:	b1e4      	cbz	r4, 8017b4a <__gethex+0x15a>
 8017b10:	9b00      	ldr	r3, [sp, #0]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	bf14      	ite	ne
 8017b16:	2700      	movne	r7, #0
 8017b18:	2706      	moveq	r7, #6
 8017b1a:	4638      	mov	r0, r7
 8017b1c:	b009      	add	sp, #36	; 0x24
 8017b1e:	ecbd 8b02 	vpop	{d8}
 8017b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b26:	463e      	mov	r6, r7
 8017b28:	4625      	mov	r5, r4
 8017b2a:	2401      	movs	r4, #1
 8017b2c:	e7ca      	b.n	8017ac4 <__gethex+0xd4>
 8017b2e:	f04f 0900 	mov.w	r9, #0
 8017b32:	1cb1      	adds	r1, r6, #2
 8017b34:	e7d3      	b.n	8017ade <__gethex+0xee>
 8017b36:	f04f 0901 	mov.w	r9, #1
 8017b3a:	e7fa      	b.n	8017b32 <__gethex+0x142>
 8017b3c:	230a      	movs	r3, #10
 8017b3e:	fb03 0202 	mla	r2, r3, r2, r0
 8017b42:	3a10      	subs	r2, #16
 8017b44:	e7d4      	b.n	8017af0 <__gethex+0x100>
 8017b46:	4631      	mov	r1, r6
 8017b48:	e7df      	b.n	8017b0a <__gethex+0x11a>
 8017b4a:	1bf3      	subs	r3, r6, r7
 8017b4c:	3b01      	subs	r3, #1
 8017b4e:	4621      	mov	r1, r4
 8017b50:	2b07      	cmp	r3, #7
 8017b52:	dc0b      	bgt.n	8017b6c <__gethex+0x17c>
 8017b54:	ee18 0a10 	vmov	r0, s16
 8017b58:	f000 fadc 	bl	8018114 <_Balloc>
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	b940      	cbnz	r0, 8017b72 <__gethex+0x182>
 8017b60:	4b65      	ldr	r3, [pc, #404]	; (8017cf8 <__gethex+0x308>)
 8017b62:	4602      	mov	r2, r0
 8017b64:	21de      	movs	r1, #222	; 0xde
 8017b66:	4865      	ldr	r0, [pc, #404]	; (8017cfc <__gethex+0x30c>)
 8017b68:	f7fc fe04 	bl	8014774 <__assert_func>
 8017b6c:	3101      	adds	r1, #1
 8017b6e:	105b      	asrs	r3, r3, #1
 8017b70:	e7ee      	b.n	8017b50 <__gethex+0x160>
 8017b72:	f100 0914 	add.w	r9, r0, #20
 8017b76:	f04f 0b00 	mov.w	fp, #0
 8017b7a:	f1ca 0301 	rsb	r3, sl, #1
 8017b7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017b82:	f8cd b000 	str.w	fp, [sp]
 8017b86:	9306      	str	r3, [sp, #24]
 8017b88:	42b7      	cmp	r7, r6
 8017b8a:	d340      	bcc.n	8017c0e <__gethex+0x21e>
 8017b8c:	9802      	ldr	r0, [sp, #8]
 8017b8e:	9b00      	ldr	r3, [sp, #0]
 8017b90:	f840 3b04 	str.w	r3, [r0], #4
 8017b94:	eba0 0009 	sub.w	r0, r0, r9
 8017b98:	1080      	asrs	r0, r0, #2
 8017b9a:	0146      	lsls	r6, r0, #5
 8017b9c:	6120      	str	r0, [r4, #16]
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f000 fbae 	bl	8018300 <__hi0bits>
 8017ba4:	1a30      	subs	r0, r6, r0
 8017ba6:	f8d8 6000 	ldr.w	r6, [r8]
 8017baa:	42b0      	cmp	r0, r6
 8017bac:	dd63      	ble.n	8017c76 <__gethex+0x286>
 8017bae:	1b87      	subs	r7, r0, r6
 8017bb0:	4639      	mov	r1, r7
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f000 ff49 	bl	8018a4a <__any_on>
 8017bb8:	4682      	mov	sl, r0
 8017bba:	b1a8      	cbz	r0, 8017be8 <__gethex+0x1f8>
 8017bbc:	1e7b      	subs	r3, r7, #1
 8017bbe:	1159      	asrs	r1, r3, #5
 8017bc0:	f003 021f 	and.w	r2, r3, #31
 8017bc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017bc8:	f04f 0a01 	mov.w	sl, #1
 8017bcc:	fa0a f202 	lsl.w	r2, sl, r2
 8017bd0:	420a      	tst	r2, r1
 8017bd2:	d009      	beq.n	8017be8 <__gethex+0x1f8>
 8017bd4:	4553      	cmp	r3, sl
 8017bd6:	dd05      	ble.n	8017be4 <__gethex+0x1f4>
 8017bd8:	1eb9      	subs	r1, r7, #2
 8017bda:	4620      	mov	r0, r4
 8017bdc:	f000 ff35 	bl	8018a4a <__any_on>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	d145      	bne.n	8017c70 <__gethex+0x280>
 8017be4:	f04f 0a02 	mov.w	sl, #2
 8017be8:	4639      	mov	r1, r7
 8017bea:	4620      	mov	r0, r4
 8017bec:	f7ff fe99 	bl	8017922 <rshift>
 8017bf0:	443d      	add	r5, r7
 8017bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017bf6:	42ab      	cmp	r3, r5
 8017bf8:	da4c      	bge.n	8017c94 <__gethex+0x2a4>
 8017bfa:	ee18 0a10 	vmov	r0, s16
 8017bfe:	4621      	mov	r1, r4
 8017c00:	f000 fac8 	bl	8018194 <_Bfree>
 8017c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c06:	2300      	movs	r3, #0
 8017c08:	6013      	str	r3, [r2, #0]
 8017c0a:	27a3      	movs	r7, #163	; 0xa3
 8017c0c:	e785      	b.n	8017b1a <__gethex+0x12a>
 8017c0e:	1e73      	subs	r3, r6, #1
 8017c10:	9a05      	ldr	r2, [sp, #20]
 8017c12:	9303      	str	r3, [sp, #12]
 8017c14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017c18:	4293      	cmp	r3, r2
 8017c1a:	d019      	beq.n	8017c50 <__gethex+0x260>
 8017c1c:	f1bb 0f20 	cmp.w	fp, #32
 8017c20:	d107      	bne.n	8017c32 <__gethex+0x242>
 8017c22:	9b02      	ldr	r3, [sp, #8]
 8017c24:	9a00      	ldr	r2, [sp, #0]
 8017c26:	f843 2b04 	str.w	r2, [r3], #4
 8017c2a:	9302      	str	r3, [sp, #8]
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	9300      	str	r3, [sp, #0]
 8017c30:	469b      	mov	fp, r3
 8017c32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017c36:	f7ff fec6 	bl	80179c6 <__hexdig_fun>
 8017c3a:	9b00      	ldr	r3, [sp, #0]
 8017c3c:	f000 000f 	and.w	r0, r0, #15
 8017c40:	fa00 f00b 	lsl.w	r0, r0, fp
 8017c44:	4303      	orrs	r3, r0
 8017c46:	9300      	str	r3, [sp, #0]
 8017c48:	f10b 0b04 	add.w	fp, fp, #4
 8017c4c:	9b03      	ldr	r3, [sp, #12]
 8017c4e:	e00d      	b.n	8017c6c <__gethex+0x27c>
 8017c50:	9b03      	ldr	r3, [sp, #12]
 8017c52:	9a06      	ldr	r2, [sp, #24]
 8017c54:	4413      	add	r3, r2
 8017c56:	42bb      	cmp	r3, r7
 8017c58:	d3e0      	bcc.n	8017c1c <__gethex+0x22c>
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	9901      	ldr	r1, [sp, #4]
 8017c5e:	9307      	str	r3, [sp, #28]
 8017c60:	4652      	mov	r2, sl
 8017c62:	f7fd ff2f 	bl	8015ac4 <strncmp>
 8017c66:	9b07      	ldr	r3, [sp, #28]
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	d1d7      	bne.n	8017c1c <__gethex+0x22c>
 8017c6c:	461e      	mov	r6, r3
 8017c6e:	e78b      	b.n	8017b88 <__gethex+0x198>
 8017c70:	f04f 0a03 	mov.w	sl, #3
 8017c74:	e7b8      	b.n	8017be8 <__gethex+0x1f8>
 8017c76:	da0a      	bge.n	8017c8e <__gethex+0x29e>
 8017c78:	1a37      	subs	r7, r6, r0
 8017c7a:	4621      	mov	r1, r4
 8017c7c:	ee18 0a10 	vmov	r0, s16
 8017c80:	463a      	mov	r2, r7
 8017c82:	f000 fca3 	bl	80185cc <__lshift>
 8017c86:	1bed      	subs	r5, r5, r7
 8017c88:	4604      	mov	r4, r0
 8017c8a:	f100 0914 	add.w	r9, r0, #20
 8017c8e:	f04f 0a00 	mov.w	sl, #0
 8017c92:	e7ae      	b.n	8017bf2 <__gethex+0x202>
 8017c94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017c98:	42a8      	cmp	r0, r5
 8017c9a:	dd72      	ble.n	8017d82 <__gethex+0x392>
 8017c9c:	1b45      	subs	r5, r0, r5
 8017c9e:	42ae      	cmp	r6, r5
 8017ca0:	dc36      	bgt.n	8017d10 <__gethex+0x320>
 8017ca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ca6:	2b02      	cmp	r3, #2
 8017ca8:	d02a      	beq.n	8017d00 <__gethex+0x310>
 8017caa:	2b03      	cmp	r3, #3
 8017cac:	d02c      	beq.n	8017d08 <__gethex+0x318>
 8017cae:	2b01      	cmp	r3, #1
 8017cb0:	d115      	bne.n	8017cde <__gethex+0x2ee>
 8017cb2:	42ae      	cmp	r6, r5
 8017cb4:	d113      	bne.n	8017cde <__gethex+0x2ee>
 8017cb6:	2e01      	cmp	r6, #1
 8017cb8:	d10b      	bne.n	8017cd2 <__gethex+0x2e2>
 8017cba:	9a04      	ldr	r2, [sp, #16]
 8017cbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017cc0:	6013      	str	r3, [r2, #0]
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	6123      	str	r3, [r4, #16]
 8017cc6:	f8c9 3000 	str.w	r3, [r9]
 8017cca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ccc:	2762      	movs	r7, #98	; 0x62
 8017cce:	601c      	str	r4, [r3, #0]
 8017cd0:	e723      	b.n	8017b1a <__gethex+0x12a>
 8017cd2:	1e71      	subs	r1, r6, #1
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	f000 feb8 	bl	8018a4a <__any_on>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	d1ed      	bne.n	8017cba <__gethex+0x2ca>
 8017cde:	ee18 0a10 	vmov	r0, s16
 8017ce2:	4621      	mov	r1, r4
 8017ce4:	f000 fa56 	bl	8018194 <_Bfree>
 8017ce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cea:	2300      	movs	r3, #0
 8017cec:	6013      	str	r3, [r2, #0]
 8017cee:	2750      	movs	r7, #80	; 0x50
 8017cf0:	e713      	b.n	8017b1a <__gethex+0x12a>
 8017cf2:	bf00      	nop
 8017cf4:	08021d84 	.word	0x08021d84
 8017cf8:	08021ca4 	.word	0x08021ca4
 8017cfc:	08021d18 	.word	0x08021d18
 8017d00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d1eb      	bne.n	8017cde <__gethex+0x2ee>
 8017d06:	e7d8      	b.n	8017cba <__gethex+0x2ca>
 8017d08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d1d5      	bne.n	8017cba <__gethex+0x2ca>
 8017d0e:	e7e6      	b.n	8017cde <__gethex+0x2ee>
 8017d10:	1e6f      	subs	r7, r5, #1
 8017d12:	f1ba 0f00 	cmp.w	sl, #0
 8017d16:	d131      	bne.n	8017d7c <__gethex+0x38c>
 8017d18:	b127      	cbz	r7, 8017d24 <__gethex+0x334>
 8017d1a:	4639      	mov	r1, r7
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	f000 fe94 	bl	8018a4a <__any_on>
 8017d22:	4682      	mov	sl, r0
 8017d24:	117b      	asrs	r3, r7, #5
 8017d26:	2101      	movs	r1, #1
 8017d28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017d2c:	f007 071f 	and.w	r7, r7, #31
 8017d30:	fa01 f707 	lsl.w	r7, r1, r7
 8017d34:	421f      	tst	r7, r3
 8017d36:	4629      	mov	r1, r5
 8017d38:	4620      	mov	r0, r4
 8017d3a:	bf18      	it	ne
 8017d3c:	f04a 0a02 	orrne.w	sl, sl, #2
 8017d40:	1b76      	subs	r6, r6, r5
 8017d42:	f7ff fdee 	bl	8017922 <rshift>
 8017d46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017d4a:	2702      	movs	r7, #2
 8017d4c:	f1ba 0f00 	cmp.w	sl, #0
 8017d50:	d048      	beq.n	8017de4 <__gethex+0x3f4>
 8017d52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d56:	2b02      	cmp	r3, #2
 8017d58:	d015      	beq.n	8017d86 <__gethex+0x396>
 8017d5a:	2b03      	cmp	r3, #3
 8017d5c:	d017      	beq.n	8017d8e <__gethex+0x39e>
 8017d5e:	2b01      	cmp	r3, #1
 8017d60:	d109      	bne.n	8017d76 <__gethex+0x386>
 8017d62:	f01a 0f02 	tst.w	sl, #2
 8017d66:	d006      	beq.n	8017d76 <__gethex+0x386>
 8017d68:	f8d9 0000 	ldr.w	r0, [r9]
 8017d6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8017d70:	f01a 0f01 	tst.w	sl, #1
 8017d74:	d10e      	bne.n	8017d94 <__gethex+0x3a4>
 8017d76:	f047 0710 	orr.w	r7, r7, #16
 8017d7a:	e033      	b.n	8017de4 <__gethex+0x3f4>
 8017d7c:	f04f 0a01 	mov.w	sl, #1
 8017d80:	e7d0      	b.n	8017d24 <__gethex+0x334>
 8017d82:	2701      	movs	r7, #1
 8017d84:	e7e2      	b.n	8017d4c <__gethex+0x35c>
 8017d86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d88:	f1c3 0301 	rsb	r3, r3, #1
 8017d8c:	9315      	str	r3, [sp, #84]	; 0x54
 8017d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d0f0      	beq.n	8017d76 <__gethex+0x386>
 8017d94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017d98:	f104 0314 	add.w	r3, r4, #20
 8017d9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017da0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017da4:	f04f 0c00 	mov.w	ip, #0
 8017da8:	4618      	mov	r0, r3
 8017daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dae:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017db2:	d01c      	beq.n	8017dee <__gethex+0x3fe>
 8017db4:	3201      	adds	r2, #1
 8017db6:	6002      	str	r2, [r0, #0]
 8017db8:	2f02      	cmp	r7, #2
 8017dba:	f104 0314 	add.w	r3, r4, #20
 8017dbe:	d13f      	bne.n	8017e40 <__gethex+0x450>
 8017dc0:	f8d8 2000 	ldr.w	r2, [r8]
 8017dc4:	3a01      	subs	r2, #1
 8017dc6:	42b2      	cmp	r2, r6
 8017dc8:	d10a      	bne.n	8017de0 <__gethex+0x3f0>
 8017dca:	1171      	asrs	r1, r6, #5
 8017dcc:	2201      	movs	r2, #1
 8017dce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017dd2:	f006 061f 	and.w	r6, r6, #31
 8017dd6:	fa02 f606 	lsl.w	r6, r2, r6
 8017dda:	421e      	tst	r6, r3
 8017ddc:	bf18      	it	ne
 8017dde:	4617      	movne	r7, r2
 8017de0:	f047 0720 	orr.w	r7, r7, #32
 8017de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017de6:	601c      	str	r4, [r3, #0]
 8017de8:	9b04      	ldr	r3, [sp, #16]
 8017dea:	601d      	str	r5, [r3, #0]
 8017dec:	e695      	b.n	8017b1a <__gethex+0x12a>
 8017dee:	4299      	cmp	r1, r3
 8017df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8017df4:	d8d8      	bhi.n	8017da8 <__gethex+0x3b8>
 8017df6:	68a3      	ldr	r3, [r4, #8]
 8017df8:	459b      	cmp	fp, r3
 8017dfa:	db19      	blt.n	8017e30 <__gethex+0x440>
 8017dfc:	6861      	ldr	r1, [r4, #4]
 8017dfe:	ee18 0a10 	vmov	r0, s16
 8017e02:	3101      	adds	r1, #1
 8017e04:	f000 f986 	bl	8018114 <_Balloc>
 8017e08:	4681      	mov	r9, r0
 8017e0a:	b918      	cbnz	r0, 8017e14 <__gethex+0x424>
 8017e0c:	4b1a      	ldr	r3, [pc, #104]	; (8017e78 <__gethex+0x488>)
 8017e0e:	4602      	mov	r2, r0
 8017e10:	2184      	movs	r1, #132	; 0x84
 8017e12:	e6a8      	b.n	8017b66 <__gethex+0x176>
 8017e14:	6922      	ldr	r2, [r4, #16]
 8017e16:	3202      	adds	r2, #2
 8017e18:	f104 010c 	add.w	r1, r4, #12
 8017e1c:	0092      	lsls	r2, r2, #2
 8017e1e:	300c      	adds	r0, #12
 8017e20:	f7fc fd12 	bl	8014848 <memcpy>
 8017e24:	4621      	mov	r1, r4
 8017e26:	ee18 0a10 	vmov	r0, s16
 8017e2a:	f000 f9b3 	bl	8018194 <_Bfree>
 8017e2e:	464c      	mov	r4, r9
 8017e30:	6923      	ldr	r3, [r4, #16]
 8017e32:	1c5a      	adds	r2, r3, #1
 8017e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017e38:	6122      	str	r2, [r4, #16]
 8017e3a:	2201      	movs	r2, #1
 8017e3c:	615a      	str	r2, [r3, #20]
 8017e3e:	e7bb      	b.n	8017db8 <__gethex+0x3c8>
 8017e40:	6922      	ldr	r2, [r4, #16]
 8017e42:	455a      	cmp	r2, fp
 8017e44:	dd0b      	ble.n	8017e5e <__gethex+0x46e>
 8017e46:	2101      	movs	r1, #1
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f7ff fd6a 	bl	8017922 <rshift>
 8017e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e52:	3501      	adds	r5, #1
 8017e54:	42ab      	cmp	r3, r5
 8017e56:	f6ff aed0 	blt.w	8017bfa <__gethex+0x20a>
 8017e5a:	2701      	movs	r7, #1
 8017e5c:	e7c0      	b.n	8017de0 <__gethex+0x3f0>
 8017e5e:	f016 061f 	ands.w	r6, r6, #31
 8017e62:	d0fa      	beq.n	8017e5a <__gethex+0x46a>
 8017e64:	449a      	add	sl, r3
 8017e66:	f1c6 0620 	rsb	r6, r6, #32
 8017e6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017e6e:	f000 fa47 	bl	8018300 <__hi0bits>
 8017e72:	42b0      	cmp	r0, r6
 8017e74:	dbe7      	blt.n	8017e46 <__gethex+0x456>
 8017e76:	e7f0      	b.n	8017e5a <__gethex+0x46a>
 8017e78:	08021ca4 	.word	0x08021ca4

08017e7c <L_shift>:
 8017e7c:	f1c2 0208 	rsb	r2, r2, #8
 8017e80:	0092      	lsls	r2, r2, #2
 8017e82:	b570      	push	{r4, r5, r6, lr}
 8017e84:	f1c2 0620 	rsb	r6, r2, #32
 8017e88:	6843      	ldr	r3, [r0, #4]
 8017e8a:	6804      	ldr	r4, [r0, #0]
 8017e8c:	fa03 f506 	lsl.w	r5, r3, r6
 8017e90:	432c      	orrs	r4, r5
 8017e92:	40d3      	lsrs	r3, r2
 8017e94:	6004      	str	r4, [r0, #0]
 8017e96:	f840 3f04 	str.w	r3, [r0, #4]!
 8017e9a:	4288      	cmp	r0, r1
 8017e9c:	d3f4      	bcc.n	8017e88 <L_shift+0xc>
 8017e9e:	bd70      	pop	{r4, r5, r6, pc}

08017ea0 <__match>:
 8017ea0:	b530      	push	{r4, r5, lr}
 8017ea2:	6803      	ldr	r3, [r0, #0]
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017eaa:	b914      	cbnz	r4, 8017eb2 <__match+0x12>
 8017eac:	6003      	str	r3, [r0, #0]
 8017eae:	2001      	movs	r0, #1
 8017eb0:	bd30      	pop	{r4, r5, pc}
 8017eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017eb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017eba:	2d19      	cmp	r5, #25
 8017ebc:	bf98      	it	ls
 8017ebe:	3220      	addls	r2, #32
 8017ec0:	42a2      	cmp	r2, r4
 8017ec2:	d0f0      	beq.n	8017ea6 <__match+0x6>
 8017ec4:	2000      	movs	r0, #0
 8017ec6:	e7f3      	b.n	8017eb0 <__match+0x10>

08017ec8 <__hexnan>:
 8017ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ecc:	680b      	ldr	r3, [r1, #0]
 8017ece:	6801      	ldr	r1, [r0, #0]
 8017ed0:	115e      	asrs	r6, r3, #5
 8017ed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017ed6:	f013 031f 	ands.w	r3, r3, #31
 8017eda:	b087      	sub	sp, #28
 8017edc:	bf18      	it	ne
 8017ede:	3604      	addne	r6, #4
 8017ee0:	2500      	movs	r5, #0
 8017ee2:	1f37      	subs	r7, r6, #4
 8017ee4:	4682      	mov	sl, r0
 8017ee6:	4690      	mov	r8, r2
 8017ee8:	9301      	str	r3, [sp, #4]
 8017eea:	f846 5c04 	str.w	r5, [r6, #-4]
 8017eee:	46b9      	mov	r9, r7
 8017ef0:	463c      	mov	r4, r7
 8017ef2:	9502      	str	r5, [sp, #8]
 8017ef4:	46ab      	mov	fp, r5
 8017ef6:	784a      	ldrb	r2, [r1, #1]
 8017ef8:	1c4b      	adds	r3, r1, #1
 8017efa:	9303      	str	r3, [sp, #12]
 8017efc:	b342      	cbz	r2, 8017f50 <__hexnan+0x88>
 8017efe:	4610      	mov	r0, r2
 8017f00:	9105      	str	r1, [sp, #20]
 8017f02:	9204      	str	r2, [sp, #16]
 8017f04:	f7ff fd5f 	bl	80179c6 <__hexdig_fun>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	d14f      	bne.n	8017fac <__hexnan+0xe4>
 8017f0c:	9a04      	ldr	r2, [sp, #16]
 8017f0e:	9905      	ldr	r1, [sp, #20]
 8017f10:	2a20      	cmp	r2, #32
 8017f12:	d818      	bhi.n	8017f46 <__hexnan+0x7e>
 8017f14:	9b02      	ldr	r3, [sp, #8]
 8017f16:	459b      	cmp	fp, r3
 8017f18:	dd13      	ble.n	8017f42 <__hexnan+0x7a>
 8017f1a:	454c      	cmp	r4, r9
 8017f1c:	d206      	bcs.n	8017f2c <__hexnan+0x64>
 8017f1e:	2d07      	cmp	r5, #7
 8017f20:	dc04      	bgt.n	8017f2c <__hexnan+0x64>
 8017f22:	462a      	mov	r2, r5
 8017f24:	4649      	mov	r1, r9
 8017f26:	4620      	mov	r0, r4
 8017f28:	f7ff ffa8 	bl	8017e7c <L_shift>
 8017f2c:	4544      	cmp	r4, r8
 8017f2e:	d950      	bls.n	8017fd2 <__hexnan+0x10a>
 8017f30:	2300      	movs	r3, #0
 8017f32:	f1a4 0904 	sub.w	r9, r4, #4
 8017f36:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8017f3e:	464c      	mov	r4, r9
 8017f40:	461d      	mov	r5, r3
 8017f42:	9903      	ldr	r1, [sp, #12]
 8017f44:	e7d7      	b.n	8017ef6 <__hexnan+0x2e>
 8017f46:	2a29      	cmp	r2, #41	; 0x29
 8017f48:	d156      	bne.n	8017ff8 <__hexnan+0x130>
 8017f4a:	3102      	adds	r1, #2
 8017f4c:	f8ca 1000 	str.w	r1, [sl]
 8017f50:	f1bb 0f00 	cmp.w	fp, #0
 8017f54:	d050      	beq.n	8017ff8 <__hexnan+0x130>
 8017f56:	454c      	cmp	r4, r9
 8017f58:	d206      	bcs.n	8017f68 <__hexnan+0xa0>
 8017f5a:	2d07      	cmp	r5, #7
 8017f5c:	dc04      	bgt.n	8017f68 <__hexnan+0xa0>
 8017f5e:	462a      	mov	r2, r5
 8017f60:	4649      	mov	r1, r9
 8017f62:	4620      	mov	r0, r4
 8017f64:	f7ff ff8a 	bl	8017e7c <L_shift>
 8017f68:	4544      	cmp	r4, r8
 8017f6a:	d934      	bls.n	8017fd6 <__hexnan+0x10e>
 8017f6c:	f1a8 0204 	sub.w	r2, r8, #4
 8017f70:	4623      	mov	r3, r4
 8017f72:	f853 1b04 	ldr.w	r1, [r3], #4
 8017f76:	f842 1f04 	str.w	r1, [r2, #4]!
 8017f7a:	429f      	cmp	r7, r3
 8017f7c:	d2f9      	bcs.n	8017f72 <__hexnan+0xaa>
 8017f7e:	1b3b      	subs	r3, r7, r4
 8017f80:	f023 0303 	bic.w	r3, r3, #3
 8017f84:	3304      	adds	r3, #4
 8017f86:	3401      	adds	r4, #1
 8017f88:	3e03      	subs	r6, #3
 8017f8a:	42b4      	cmp	r4, r6
 8017f8c:	bf88      	it	hi
 8017f8e:	2304      	movhi	r3, #4
 8017f90:	4443      	add	r3, r8
 8017f92:	2200      	movs	r2, #0
 8017f94:	f843 2b04 	str.w	r2, [r3], #4
 8017f98:	429f      	cmp	r7, r3
 8017f9a:	d2fb      	bcs.n	8017f94 <__hexnan+0xcc>
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	b91b      	cbnz	r3, 8017fa8 <__hexnan+0xe0>
 8017fa0:	4547      	cmp	r7, r8
 8017fa2:	d127      	bne.n	8017ff4 <__hexnan+0x12c>
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	603b      	str	r3, [r7, #0]
 8017fa8:	2005      	movs	r0, #5
 8017faa:	e026      	b.n	8017ffa <__hexnan+0x132>
 8017fac:	3501      	adds	r5, #1
 8017fae:	2d08      	cmp	r5, #8
 8017fb0:	f10b 0b01 	add.w	fp, fp, #1
 8017fb4:	dd06      	ble.n	8017fc4 <__hexnan+0xfc>
 8017fb6:	4544      	cmp	r4, r8
 8017fb8:	d9c3      	bls.n	8017f42 <__hexnan+0x7a>
 8017fba:	2300      	movs	r3, #0
 8017fbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8017fc0:	2501      	movs	r5, #1
 8017fc2:	3c04      	subs	r4, #4
 8017fc4:	6822      	ldr	r2, [r4, #0]
 8017fc6:	f000 000f 	and.w	r0, r0, #15
 8017fca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017fce:	6022      	str	r2, [r4, #0]
 8017fd0:	e7b7      	b.n	8017f42 <__hexnan+0x7a>
 8017fd2:	2508      	movs	r5, #8
 8017fd4:	e7b5      	b.n	8017f42 <__hexnan+0x7a>
 8017fd6:	9b01      	ldr	r3, [sp, #4]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d0df      	beq.n	8017f9c <__hexnan+0xd4>
 8017fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8017fe0:	f1c3 0320 	rsb	r3, r3, #32
 8017fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8017fe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017fec:	401a      	ands	r2, r3
 8017fee:	f846 2c04 	str.w	r2, [r6, #-4]
 8017ff2:	e7d3      	b.n	8017f9c <__hexnan+0xd4>
 8017ff4:	3f04      	subs	r7, #4
 8017ff6:	e7d1      	b.n	8017f9c <__hexnan+0xd4>
 8017ff8:	2004      	movs	r0, #4
 8017ffa:	b007      	add	sp, #28
 8017ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018000 <_localeconv_r>:
 8018000:	4800      	ldr	r0, [pc, #0]	; (8018004 <_localeconv_r+0x4>)
 8018002:	4770      	bx	lr
 8018004:	2400a25c 	.word	0x2400a25c

08018008 <__retarget_lock_init_recursive>:
 8018008:	4770      	bx	lr

0801800a <__retarget_lock_acquire_recursive>:
 801800a:	4770      	bx	lr

0801800c <__retarget_lock_release_recursive>:
 801800c:	4770      	bx	lr

0801800e <__swhatbuf_r>:
 801800e:	b570      	push	{r4, r5, r6, lr}
 8018010:	460e      	mov	r6, r1
 8018012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018016:	2900      	cmp	r1, #0
 8018018:	b096      	sub	sp, #88	; 0x58
 801801a:	4614      	mov	r4, r2
 801801c:	461d      	mov	r5, r3
 801801e:	da07      	bge.n	8018030 <__swhatbuf_r+0x22>
 8018020:	2300      	movs	r3, #0
 8018022:	602b      	str	r3, [r5, #0]
 8018024:	89b3      	ldrh	r3, [r6, #12]
 8018026:	061a      	lsls	r2, r3, #24
 8018028:	d410      	bmi.n	801804c <__swhatbuf_r+0x3e>
 801802a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801802e:	e00e      	b.n	801804e <__swhatbuf_r+0x40>
 8018030:	466a      	mov	r2, sp
 8018032:	f000 ff7b 	bl	8018f2c <_fstat_r>
 8018036:	2800      	cmp	r0, #0
 8018038:	dbf2      	blt.n	8018020 <__swhatbuf_r+0x12>
 801803a:	9a01      	ldr	r2, [sp, #4]
 801803c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018040:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018044:	425a      	negs	r2, r3
 8018046:	415a      	adcs	r2, r3
 8018048:	602a      	str	r2, [r5, #0]
 801804a:	e7ee      	b.n	801802a <__swhatbuf_r+0x1c>
 801804c:	2340      	movs	r3, #64	; 0x40
 801804e:	2000      	movs	r0, #0
 8018050:	6023      	str	r3, [r4, #0]
 8018052:	b016      	add	sp, #88	; 0x58
 8018054:	bd70      	pop	{r4, r5, r6, pc}
	...

08018058 <__smakebuf_r>:
 8018058:	898b      	ldrh	r3, [r1, #12]
 801805a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801805c:	079d      	lsls	r5, r3, #30
 801805e:	4606      	mov	r6, r0
 8018060:	460c      	mov	r4, r1
 8018062:	d507      	bpl.n	8018074 <__smakebuf_r+0x1c>
 8018064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018068:	6023      	str	r3, [r4, #0]
 801806a:	6123      	str	r3, [r4, #16]
 801806c:	2301      	movs	r3, #1
 801806e:	6163      	str	r3, [r4, #20]
 8018070:	b002      	add	sp, #8
 8018072:	bd70      	pop	{r4, r5, r6, pc}
 8018074:	ab01      	add	r3, sp, #4
 8018076:	466a      	mov	r2, sp
 8018078:	f7ff ffc9 	bl	801800e <__swhatbuf_r>
 801807c:	9900      	ldr	r1, [sp, #0]
 801807e:	4605      	mov	r5, r0
 8018080:	4630      	mov	r0, r6
 8018082:	f7fc fc61 	bl	8014948 <_malloc_r>
 8018086:	b948      	cbnz	r0, 801809c <__smakebuf_r+0x44>
 8018088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801808c:	059a      	lsls	r2, r3, #22
 801808e:	d4ef      	bmi.n	8018070 <__smakebuf_r+0x18>
 8018090:	f023 0303 	bic.w	r3, r3, #3
 8018094:	f043 0302 	orr.w	r3, r3, #2
 8018098:	81a3      	strh	r3, [r4, #12]
 801809a:	e7e3      	b.n	8018064 <__smakebuf_r+0xc>
 801809c:	4b0d      	ldr	r3, [pc, #52]	; (80180d4 <__smakebuf_r+0x7c>)
 801809e:	62b3      	str	r3, [r6, #40]	; 0x28
 80180a0:	89a3      	ldrh	r3, [r4, #12]
 80180a2:	6020      	str	r0, [r4, #0]
 80180a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180a8:	81a3      	strh	r3, [r4, #12]
 80180aa:	9b00      	ldr	r3, [sp, #0]
 80180ac:	6163      	str	r3, [r4, #20]
 80180ae:	9b01      	ldr	r3, [sp, #4]
 80180b0:	6120      	str	r0, [r4, #16]
 80180b2:	b15b      	cbz	r3, 80180cc <__smakebuf_r+0x74>
 80180b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180b8:	4630      	mov	r0, r6
 80180ba:	f000 ff49 	bl	8018f50 <_isatty_r>
 80180be:	b128      	cbz	r0, 80180cc <__smakebuf_r+0x74>
 80180c0:	89a3      	ldrh	r3, [r4, #12]
 80180c2:	f023 0303 	bic.w	r3, r3, #3
 80180c6:	f043 0301 	orr.w	r3, r3, #1
 80180ca:	81a3      	strh	r3, [r4, #12]
 80180cc:	89a0      	ldrh	r0, [r4, #12]
 80180ce:	4305      	orrs	r5, r0
 80180d0:	81a5      	strh	r5, [r4, #12]
 80180d2:	e7cd      	b.n	8018070 <__smakebuf_r+0x18>
 80180d4:	08017781 	.word	0x08017781

080180d8 <__ascii_mbtowc>:
 80180d8:	b082      	sub	sp, #8
 80180da:	b901      	cbnz	r1, 80180de <__ascii_mbtowc+0x6>
 80180dc:	a901      	add	r1, sp, #4
 80180de:	b142      	cbz	r2, 80180f2 <__ascii_mbtowc+0x1a>
 80180e0:	b14b      	cbz	r3, 80180f6 <__ascii_mbtowc+0x1e>
 80180e2:	7813      	ldrb	r3, [r2, #0]
 80180e4:	600b      	str	r3, [r1, #0]
 80180e6:	7812      	ldrb	r2, [r2, #0]
 80180e8:	1e10      	subs	r0, r2, #0
 80180ea:	bf18      	it	ne
 80180ec:	2001      	movne	r0, #1
 80180ee:	b002      	add	sp, #8
 80180f0:	4770      	bx	lr
 80180f2:	4610      	mov	r0, r2
 80180f4:	e7fb      	b.n	80180ee <__ascii_mbtowc+0x16>
 80180f6:	f06f 0001 	mvn.w	r0, #1
 80180fa:	e7f8      	b.n	80180ee <__ascii_mbtowc+0x16>

080180fc <__malloc_lock>:
 80180fc:	4801      	ldr	r0, [pc, #4]	; (8018104 <__malloc_lock+0x8>)
 80180fe:	f7ff bf84 	b.w	801800a <__retarget_lock_acquire_recursive>
 8018102:	bf00      	nop
 8018104:	2400ec14 	.word	0x2400ec14

08018108 <__malloc_unlock>:
 8018108:	4801      	ldr	r0, [pc, #4]	; (8018110 <__malloc_unlock+0x8>)
 801810a:	f7ff bf7f 	b.w	801800c <__retarget_lock_release_recursive>
 801810e:	bf00      	nop
 8018110:	2400ec14 	.word	0x2400ec14

08018114 <_Balloc>:
 8018114:	b570      	push	{r4, r5, r6, lr}
 8018116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018118:	4604      	mov	r4, r0
 801811a:	460d      	mov	r5, r1
 801811c:	b976      	cbnz	r6, 801813c <_Balloc+0x28>
 801811e:	2010      	movs	r0, #16
 8018120:	f7fc fb82 	bl	8014828 <malloc>
 8018124:	4602      	mov	r2, r0
 8018126:	6260      	str	r0, [r4, #36]	; 0x24
 8018128:	b920      	cbnz	r0, 8018134 <_Balloc+0x20>
 801812a:	4b18      	ldr	r3, [pc, #96]	; (801818c <_Balloc+0x78>)
 801812c:	4818      	ldr	r0, [pc, #96]	; (8018190 <_Balloc+0x7c>)
 801812e:	2166      	movs	r1, #102	; 0x66
 8018130:	f7fc fb20 	bl	8014774 <__assert_func>
 8018134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018138:	6006      	str	r6, [r0, #0]
 801813a:	60c6      	str	r6, [r0, #12]
 801813c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801813e:	68f3      	ldr	r3, [r6, #12]
 8018140:	b183      	cbz	r3, 8018164 <_Balloc+0x50>
 8018142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018144:	68db      	ldr	r3, [r3, #12]
 8018146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801814a:	b9b8      	cbnz	r0, 801817c <_Balloc+0x68>
 801814c:	2101      	movs	r1, #1
 801814e:	fa01 f605 	lsl.w	r6, r1, r5
 8018152:	1d72      	adds	r2, r6, #5
 8018154:	0092      	lsls	r2, r2, #2
 8018156:	4620      	mov	r0, r4
 8018158:	f000 fc98 	bl	8018a8c <_calloc_r>
 801815c:	b160      	cbz	r0, 8018178 <_Balloc+0x64>
 801815e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018162:	e00e      	b.n	8018182 <_Balloc+0x6e>
 8018164:	2221      	movs	r2, #33	; 0x21
 8018166:	2104      	movs	r1, #4
 8018168:	4620      	mov	r0, r4
 801816a:	f000 fc8f 	bl	8018a8c <_calloc_r>
 801816e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018170:	60f0      	str	r0, [r6, #12]
 8018172:	68db      	ldr	r3, [r3, #12]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d1e4      	bne.n	8018142 <_Balloc+0x2e>
 8018178:	2000      	movs	r0, #0
 801817a:	bd70      	pop	{r4, r5, r6, pc}
 801817c:	6802      	ldr	r2, [r0, #0]
 801817e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018182:	2300      	movs	r3, #0
 8018184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018188:	e7f7      	b.n	801817a <_Balloc+0x66>
 801818a:	bf00      	nop
 801818c:	08021c2e 	.word	0x08021c2e
 8018190:	08021d98 	.word	0x08021d98

08018194 <_Bfree>:
 8018194:	b570      	push	{r4, r5, r6, lr}
 8018196:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018198:	4605      	mov	r5, r0
 801819a:	460c      	mov	r4, r1
 801819c:	b976      	cbnz	r6, 80181bc <_Bfree+0x28>
 801819e:	2010      	movs	r0, #16
 80181a0:	f7fc fb42 	bl	8014828 <malloc>
 80181a4:	4602      	mov	r2, r0
 80181a6:	6268      	str	r0, [r5, #36]	; 0x24
 80181a8:	b920      	cbnz	r0, 80181b4 <_Bfree+0x20>
 80181aa:	4b09      	ldr	r3, [pc, #36]	; (80181d0 <_Bfree+0x3c>)
 80181ac:	4809      	ldr	r0, [pc, #36]	; (80181d4 <_Bfree+0x40>)
 80181ae:	218a      	movs	r1, #138	; 0x8a
 80181b0:	f7fc fae0 	bl	8014774 <__assert_func>
 80181b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80181b8:	6006      	str	r6, [r0, #0]
 80181ba:	60c6      	str	r6, [r0, #12]
 80181bc:	b13c      	cbz	r4, 80181ce <_Bfree+0x3a>
 80181be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80181c0:	6862      	ldr	r2, [r4, #4]
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80181c8:	6021      	str	r1, [r4, #0]
 80181ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80181ce:	bd70      	pop	{r4, r5, r6, pc}
 80181d0:	08021c2e 	.word	0x08021c2e
 80181d4:	08021d98 	.word	0x08021d98

080181d8 <__multadd>:
 80181d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181dc:	690e      	ldr	r6, [r1, #16]
 80181de:	4607      	mov	r7, r0
 80181e0:	4698      	mov	r8, r3
 80181e2:	460c      	mov	r4, r1
 80181e4:	f101 0014 	add.w	r0, r1, #20
 80181e8:	2300      	movs	r3, #0
 80181ea:	6805      	ldr	r5, [r0, #0]
 80181ec:	b2a9      	uxth	r1, r5
 80181ee:	fb02 8101 	mla	r1, r2, r1, r8
 80181f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80181f6:	0c2d      	lsrs	r5, r5, #16
 80181f8:	fb02 c505 	mla	r5, r2, r5, ip
 80181fc:	b289      	uxth	r1, r1
 80181fe:	3301      	adds	r3, #1
 8018200:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018204:	429e      	cmp	r6, r3
 8018206:	f840 1b04 	str.w	r1, [r0], #4
 801820a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801820e:	dcec      	bgt.n	80181ea <__multadd+0x12>
 8018210:	f1b8 0f00 	cmp.w	r8, #0
 8018214:	d022      	beq.n	801825c <__multadd+0x84>
 8018216:	68a3      	ldr	r3, [r4, #8]
 8018218:	42b3      	cmp	r3, r6
 801821a:	dc19      	bgt.n	8018250 <__multadd+0x78>
 801821c:	6861      	ldr	r1, [r4, #4]
 801821e:	4638      	mov	r0, r7
 8018220:	3101      	adds	r1, #1
 8018222:	f7ff ff77 	bl	8018114 <_Balloc>
 8018226:	4605      	mov	r5, r0
 8018228:	b928      	cbnz	r0, 8018236 <__multadd+0x5e>
 801822a:	4602      	mov	r2, r0
 801822c:	4b0d      	ldr	r3, [pc, #52]	; (8018264 <__multadd+0x8c>)
 801822e:	480e      	ldr	r0, [pc, #56]	; (8018268 <__multadd+0x90>)
 8018230:	21b5      	movs	r1, #181	; 0xb5
 8018232:	f7fc fa9f 	bl	8014774 <__assert_func>
 8018236:	6922      	ldr	r2, [r4, #16]
 8018238:	3202      	adds	r2, #2
 801823a:	f104 010c 	add.w	r1, r4, #12
 801823e:	0092      	lsls	r2, r2, #2
 8018240:	300c      	adds	r0, #12
 8018242:	f7fc fb01 	bl	8014848 <memcpy>
 8018246:	4621      	mov	r1, r4
 8018248:	4638      	mov	r0, r7
 801824a:	f7ff ffa3 	bl	8018194 <_Bfree>
 801824e:	462c      	mov	r4, r5
 8018250:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018254:	3601      	adds	r6, #1
 8018256:	f8c3 8014 	str.w	r8, [r3, #20]
 801825a:	6126      	str	r6, [r4, #16]
 801825c:	4620      	mov	r0, r4
 801825e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018262:	bf00      	nop
 8018264:	08021ca4 	.word	0x08021ca4
 8018268:	08021d98 	.word	0x08021d98

0801826c <__s2b>:
 801826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018270:	460c      	mov	r4, r1
 8018272:	4615      	mov	r5, r2
 8018274:	461f      	mov	r7, r3
 8018276:	2209      	movs	r2, #9
 8018278:	3308      	adds	r3, #8
 801827a:	4606      	mov	r6, r0
 801827c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018280:	2100      	movs	r1, #0
 8018282:	2201      	movs	r2, #1
 8018284:	429a      	cmp	r2, r3
 8018286:	db09      	blt.n	801829c <__s2b+0x30>
 8018288:	4630      	mov	r0, r6
 801828a:	f7ff ff43 	bl	8018114 <_Balloc>
 801828e:	b940      	cbnz	r0, 80182a2 <__s2b+0x36>
 8018290:	4602      	mov	r2, r0
 8018292:	4b19      	ldr	r3, [pc, #100]	; (80182f8 <__s2b+0x8c>)
 8018294:	4819      	ldr	r0, [pc, #100]	; (80182fc <__s2b+0x90>)
 8018296:	21ce      	movs	r1, #206	; 0xce
 8018298:	f7fc fa6c 	bl	8014774 <__assert_func>
 801829c:	0052      	lsls	r2, r2, #1
 801829e:	3101      	adds	r1, #1
 80182a0:	e7f0      	b.n	8018284 <__s2b+0x18>
 80182a2:	9b08      	ldr	r3, [sp, #32]
 80182a4:	6143      	str	r3, [r0, #20]
 80182a6:	2d09      	cmp	r5, #9
 80182a8:	f04f 0301 	mov.w	r3, #1
 80182ac:	6103      	str	r3, [r0, #16]
 80182ae:	dd16      	ble.n	80182de <__s2b+0x72>
 80182b0:	f104 0909 	add.w	r9, r4, #9
 80182b4:	46c8      	mov	r8, r9
 80182b6:	442c      	add	r4, r5
 80182b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80182bc:	4601      	mov	r1, r0
 80182be:	3b30      	subs	r3, #48	; 0x30
 80182c0:	220a      	movs	r2, #10
 80182c2:	4630      	mov	r0, r6
 80182c4:	f7ff ff88 	bl	80181d8 <__multadd>
 80182c8:	45a0      	cmp	r8, r4
 80182ca:	d1f5      	bne.n	80182b8 <__s2b+0x4c>
 80182cc:	f1a5 0408 	sub.w	r4, r5, #8
 80182d0:	444c      	add	r4, r9
 80182d2:	1b2d      	subs	r5, r5, r4
 80182d4:	1963      	adds	r3, r4, r5
 80182d6:	42bb      	cmp	r3, r7
 80182d8:	db04      	blt.n	80182e4 <__s2b+0x78>
 80182da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182de:	340a      	adds	r4, #10
 80182e0:	2509      	movs	r5, #9
 80182e2:	e7f6      	b.n	80182d2 <__s2b+0x66>
 80182e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80182e8:	4601      	mov	r1, r0
 80182ea:	3b30      	subs	r3, #48	; 0x30
 80182ec:	220a      	movs	r2, #10
 80182ee:	4630      	mov	r0, r6
 80182f0:	f7ff ff72 	bl	80181d8 <__multadd>
 80182f4:	e7ee      	b.n	80182d4 <__s2b+0x68>
 80182f6:	bf00      	nop
 80182f8:	08021ca4 	.word	0x08021ca4
 80182fc:	08021d98 	.word	0x08021d98

08018300 <__hi0bits>:
 8018300:	0c03      	lsrs	r3, r0, #16
 8018302:	041b      	lsls	r3, r3, #16
 8018304:	b9d3      	cbnz	r3, 801833c <__hi0bits+0x3c>
 8018306:	0400      	lsls	r0, r0, #16
 8018308:	2310      	movs	r3, #16
 801830a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801830e:	bf04      	itt	eq
 8018310:	0200      	lsleq	r0, r0, #8
 8018312:	3308      	addeq	r3, #8
 8018314:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018318:	bf04      	itt	eq
 801831a:	0100      	lsleq	r0, r0, #4
 801831c:	3304      	addeq	r3, #4
 801831e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018322:	bf04      	itt	eq
 8018324:	0080      	lsleq	r0, r0, #2
 8018326:	3302      	addeq	r3, #2
 8018328:	2800      	cmp	r0, #0
 801832a:	db05      	blt.n	8018338 <__hi0bits+0x38>
 801832c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018330:	f103 0301 	add.w	r3, r3, #1
 8018334:	bf08      	it	eq
 8018336:	2320      	moveq	r3, #32
 8018338:	4618      	mov	r0, r3
 801833a:	4770      	bx	lr
 801833c:	2300      	movs	r3, #0
 801833e:	e7e4      	b.n	801830a <__hi0bits+0xa>

08018340 <__lo0bits>:
 8018340:	6803      	ldr	r3, [r0, #0]
 8018342:	f013 0207 	ands.w	r2, r3, #7
 8018346:	4601      	mov	r1, r0
 8018348:	d00b      	beq.n	8018362 <__lo0bits+0x22>
 801834a:	07da      	lsls	r2, r3, #31
 801834c:	d424      	bmi.n	8018398 <__lo0bits+0x58>
 801834e:	0798      	lsls	r0, r3, #30
 8018350:	bf49      	itett	mi
 8018352:	085b      	lsrmi	r3, r3, #1
 8018354:	089b      	lsrpl	r3, r3, #2
 8018356:	2001      	movmi	r0, #1
 8018358:	600b      	strmi	r3, [r1, #0]
 801835a:	bf5c      	itt	pl
 801835c:	600b      	strpl	r3, [r1, #0]
 801835e:	2002      	movpl	r0, #2
 8018360:	4770      	bx	lr
 8018362:	b298      	uxth	r0, r3
 8018364:	b9b0      	cbnz	r0, 8018394 <__lo0bits+0x54>
 8018366:	0c1b      	lsrs	r3, r3, #16
 8018368:	2010      	movs	r0, #16
 801836a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801836e:	bf04      	itt	eq
 8018370:	0a1b      	lsreq	r3, r3, #8
 8018372:	3008      	addeq	r0, #8
 8018374:	071a      	lsls	r2, r3, #28
 8018376:	bf04      	itt	eq
 8018378:	091b      	lsreq	r3, r3, #4
 801837a:	3004      	addeq	r0, #4
 801837c:	079a      	lsls	r2, r3, #30
 801837e:	bf04      	itt	eq
 8018380:	089b      	lsreq	r3, r3, #2
 8018382:	3002      	addeq	r0, #2
 8018384:	07da      	lsls	r2, r3, #31
 8018386:	d403      	bmi.n	8018390 <__lo0bits+0x50>
 8018388:	085b      	lsrs	r3, r3, #1
 801838a:	f100 0001 	add.w	r0, r0, #1
 801838e:	d005      	beq.n	801839c <__lo0bits+0x5c>
 8018390:	600b      	str	r3, [r1, #0]
 8018392:	4770      	bx	lr
 8018394:	4610      	mov	r0, r2
 8018396:	e7e8      	b.n	801836a <__lo0bits+0x2a>
 8018398:	2000      	movs	r0, #0
 801839a:	4770      	bx	lr
 801839c:	2020      	movs	r0, #32
 801839e:	4770      	bx	lr

080183a0 <__i2b>:
 80183a0:	b510      	push	{r4, lr}
 80183a2:	460c      	mov	r4, r1
 80183a4:	2101      	movs	r1, #1
 80183a6:	f7ff feb5 	bl	8018114 <_Balloc>
 80183aa:	4602      	mov	r2, r0
 80183ac:	b928      	cbnz	r0, 80183ba <__i2b+0x1a>
 80183ae:	4b05      	ldr	r3, [pc, #20]	; (80183c4 <__i2b+0x24>)
 80183b0:	4805      	ldr	r0, [pc, #20]	; (80183c8 <__i2b+0x28>)
 80183b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80183b6:	f7fc f9dd 	bl	8014774 <__assert_func>
 80183ba:	2301      	movs	r3, #1
 80183bc:	6144      	str	r4, [r0, #20]
 80183be:	6103      	str	r3, [r0, #16]
 80183c0:	bd10      	pop	{r4, pc}
 80183c2:	bf00      	nop
 80183c4:	08021ca4 	.word	0x08021ca4
 80183c8:	08021d98 	.word	0x08021d98

080183cc <__multiply>:
 80183cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d0:	4614      	mov	r4, r2
 80183d2:	690a      	ldr	r2, [r1, #16]
 80183d4:	6923      	ldr	r3, [r4, #16]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	bfb8      	it	lt
 80183da:	460b      	movlt	r3, r1
 80183dc:	460d      	mov	r5, r1
 80183de:	bfbc      	itt	lt
 80183e0:	4625      	movlt	r5, r4
 80183e2:	461c      	movlt	r4, r3
 80183e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80183e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80183ec:	68ab      	ldr	r3, [r5, #8]
 80183ee:	6869      	ldr	r1, [r5, #4]
 80183f0:	eb0a 0709 	add.w	r7, sl, r9
 80183f4:	42bb      	cmp	r3, r7
 80183f6:	b085      	sub	sp, #20
 80183f8:	bfb8      	it	lt
 80183fa:	3101      	addlt	r1, #1
 80183fc:	f7ff fe8a 	bl	8018114 <_Balloc>
 8018400:	b930      	cbnz	r0, 8018410 <__multiply+0x44>
 8018402:	4602      	mov	r2, r0
 8018404:	4b42      	ldr	r3, [pc, #264]	; (8018510 <__multiply+0x144>)
 8018406:	4843      	ldr	r0, [pc, #268]	; (8018514 <__multiply+0x148>)
 8018408:	f240 115d 	movw	r1, #349	; 0x15d
 801840c:	f7fc f9b2 	bl	8014774 <__assert_func>
 8018410:	f100 0614 	add.w	r6, r0, #20
 8018414:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018418:	4633      	mov	r3, r6
 801841a:	2200      	movs	r2, #0
 801841c:	4543      	cmp	r3, r8
 801841e:	d31e      	bcc.n	801845e <__multiply+0x92>
 8018420:	f105 0c14 	add.w	ip, r5, #20
 8018424:	f104 0314 	add.w	r3, r4, #20
 8018428:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801842c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018430:	9202      	str	r2, [sp, #8]
 8018432:	ebac 0205 	sub.w	r2, ip, r5
 8018436:	3a15      	subs	r2, #21
 8018438:	f022 0203 	bic.w	r2, r2, #3
 801843c:	3204      	adds	r2, #4
 801843e:	f105 0115 	add.w	r1, r5, #21
 8018442:	458c      	cmp	ip, r1
 8018444:	bf38      	it	cc
 8018446:	2204      	movcc	r2, #4
 8018448:	9201      	str	r2, [sp, #4]
 801844a:	9a02      	ldr	r2, [sp, #8]
 801844c:	9303      	str	r3, [sp, #12]
 801844e:	429a      	cmp	r2, r3
 8018450:	d808      	bhi.n	8018464 <__multiply+0x98>
 8018452:	2f00      	cmp	r7, #0
 8018454:	dc55      	bgt.n	8018502 <__multiply+0x136>
 8018456:	6107      	str	r7, [r0, #16]
 8018458:	b005      	add	sp, #20
 801845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845e:	f843 2b04 	str.w	r2, [r3], #4
 8018462:	e7db      	b.n	801841c <__multiply+0x50>
 8018464:	f8b3 a000 	ldrh.w	sl, [r3]
 8018468:	f1ba 0f00 	cmp.w	sl, #0
 801846c:	d020      	beq.n	80184b0 <__multiply+0xe4>
 801846e:	f105 0e14 	add.w	lr, r5, #20
 8018472:	46b1      	mov	r9, r6
 8018474:	2200      	movs	r2, #0
 8018476:	f85e 4b04 	ldr.w	r4, [lr], #4
 801847a:	f8d9 b000 	ldr.w	fp, [r9]
 801847e:	b2a1      	uxth	r1, r4
 8018480:	fa1f fb8b 	uxth.w	fp, fp
 8018484:	fb0a b101 	mla	r1, sl, r1, fp
 8018488:	4411      	add	r1, r2
 801848a:	f8d9 2000 	ldr.w	r2, [r9]
 801848e:	0c24      	lsrs	r4, r4, #16
 8018490:	0c12      	lsrs	r2, r2, #16
 8018492:	fb0a 2404 	mla	r4, sl, r4, r2
 8018496:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801849a:	b289      	uxth	r1, r1
 801849c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80184a0:	45f4      	cmp	ip, lr
 80184a2:	f849 1b04 	str.w	r1, [r9], #4
 80184a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80184aa:	d8e4      	bhi.n	8018476 <__multiply+0xaa>
 80184ac:	9901      	ldr	r1, [sp, #4]
 80184ae:	5072      	str	r2, [r6, r1]
 80184b0:	9a03      	ldr	r2, [sp, #12]
 80184b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80184b6:	3304      	adds	r3, #4
 80184b8:	f1b9 0f00 	cmp.w	r9, #0
 80184bc:	d01f      	beq.n	80184fe <__multiply+0x132>
 80184be:	6834      	ldr	r4, [r6, #0]
 80184c0:	f105 0114 	add.w	r1, r5, #20
 80184c4:	46b6      	mov	lr, r6
 80184c6:	f04f 0a00 	mov.w	sl, #0
 80184ca:	880a      	ldrh	r2, [r1, #0]
 80184cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80184d0:	fb09 b202 	mla	r2, r9, r2, fp
 80184d4:	4492      	add	sl, r2
 80184d6:	b2a4      	uxth	r4, r4
 80184d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80184dc:	f84e 4b04 	str.w	r4, [lr], #4
 80184e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80184e4:	f8be 2000 	ldrh.w	r2, [lr]
 80184e8:	0c24      	lsrs	r4, r4, #16
 80184ea:	fb09 2404 	mla	r4, r9, r4, r2
 80184ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80184f2:	458c      	cmp	ip, r1
 80184f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80184f8:	d8e7      	bhi.n	80184ca <__multiply+0xfe>
 80184fa:	9a01      	ldr	r2, [sp, #4]
 80184fc:	50b4      	str	r4, [r6, r2]
 80184fe:	3604      	adds	r6, #4
 8018500:	e7a3      	b.n	801844a <__multiply+0x7e>
 8018502:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018506:	2b00      	cmp	r3, #0
 8018508:	d1a5      	bne.n	8018456 <__multiply+0x8a>
 801850a:	3f01      	subs	r7, #1
 801850c:	e7a1      	b.n	8018452 <__multiply+0x86>
 801850e:	bf00      	nop
 8018510:	08021ca4 	.word	0x08021ca4
 8018514:	08021d98 	.word	0x08021d98

08018518 <__pow5mult>:
 8018518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801851c:	4615      	mov	r5, r2
 801851e:	f012 0203 	ands.w	r2, r2, #3
 8018522:	4606      	mov	r6, r0
 8018524:	460f      	mov	r7, r1
 8018526:	d007      	beq.n	8018538 <__pow5mult+0x20>
 8018528:	4c25      	ldr	r4, [pc, #148]	; (80185c0 <__pow5mult+0xa8>)
 801852a:	3a01      	subs	r2, #1
 801852c:	2300      	movs	r3, #0
 801852e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018532:	f7ff fe51 	bl	80181d8 <__multadd>
 8018536:	4607      	mov	r7, r0
 8018538:	10ad      	asrs	r5, r5, #2
 801853a:	d03d      	beq.n	80185b8 <__pow5mult+0xa0>
 801853c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801853e:	b97c      	cbnz	r4, 8018560 <__pow5mult+0x48>
 8018540:	2010      	movs	r0, #16
 8018542:	f7fc f971 	bl	8014828 <malloc>
 8018546:	4602      	mov	r2, r0
 8018548:	6270      	str	r0, [r6, #36]	; 0x24
 801854a:	b928      	cbnz	r0, 8018558 <__pow5mult+0x40>
 801854c:	4b1d      	ldr	r3, [pc, #116]	; (80185c4 <__pow5mult+0xac>)
 801854e:	481e      	ldr	r0, [pc, #120]	; (80185c8 <__pow5mult+0xb0>)
 8018550:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018554:	f7fc f90e 	bl	8014774 <__assert_func>
 8018558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801855c:	6004      	str	r4, [r0, #0]
 801855e:	60c4      	str	r4, [r0, #12]
 8018560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018568:	b94c      	cbnz	r4, 801857e <__pow5mult+0x66>
 801856a:	f240 2171 	movw	r1, #625	; 0x271
 801856e:	4630      	mov	r0, r6
 8018570:	f7ff ff16 	bl	80183a0 <__i2b>
 8018574:	2300      	movs	r3, #0
 8018576:	f8c8 0008 	str.w	r0, [r8, #8]
 801857a:	4604      	mov	r4, r0
 801857c:	6003      	str	r3, [r0, #0]
 801857e:	f04f 0900 	mov.w	r9, #0
 8018582:	07eb      	lsls	r3, r5, #31
 8018584:	d50a      	bpl.n	801859c <__pow5mult+0x84>
 8018586:	4639      	mov	r1, r7
 8018588:	4622      	mov	r2, r4
 801858a:	4630      	mov	r0, r6
 801858c:	f7ff ff1e 	bl	80183cc <__multiply>
 8018590:	4639      	mov	r1, r7
 8018592:	4680      	mov	r8, r0
 8018594:	4630      	mov	r0, r6
 8018596:	f7ff fdfd 	bl	8018194 <_Bfree>
 801859a:	4647      	mov	r7, r8
 801859c:	106d      	asrs	r5, r5, #1
 801859e:	d00b      	beq.n	80185b8 <__pow5mult+0xa0>
 80185a0:	6820      	ldr	r0, [r4, #0]
 80185a2:	b938      	cbnz	r0, 80185b4 <__pow5mult+0x9c>
 80185a4:	4622      	mov	r2, r4
 80185a6:	4621      	mov	r1, r4
 80185a8:	4630      	mov	r0, r6
 80185aa:	f7ff ff0f 	bl	80183cc <__multiply>
 80185ae:	6020      	str	r0, [r4, #0]
 80185b0:	f8c0 9000 	str.w	r9, [r0]
 80185b4:	4604      	mov	r4, r0
 80185b6:	e7e4      	b.n	8018582 <__pow5mult+0x6a>
 80185b8:	4638      	mov	r0, r7
 80185ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185be:	bf00      	nop
 80185c0:	08021ee8 	.word	0x08021ee8
 80185c4:	08021c2e 	.word	0x08021c2e
 80185c8:	08021d98 	.word	0x08021d98

080185cc <__lshift>:
 80185cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d0:	460c      	mov	r4, r1
 80185d2:	6849      	ldr	r1, [r1, #4]
 80185d4:	6923      	ldr	r3, [r4, #16]
 80185d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80185da:	68a3      	ldr	r3, [r4, #8]
 80185dc:	4607      	mov	r7, r0
 80185de:	4691      	mov	r9, r2
 80185e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80185e4:	f108 0601 	add.w	r6, r8, #1
 80185e8:	42b3      	cmp	r3, r6
 80185ea:	db0b      	blt.n	8018604 <__lshift+0x38>
 80185ec:	4638      	mov	r0, r7
 80185ee:	f7ff fd91 	bl	8018114 <_Balloc>
 80185f2:	4605      	mov	r5, r0
 80185f4:	b948      	cbnz	r0, 801860a <__lshift+0x3e>
 80185f6:	4602      	mov	r2, r0
 80185f8:	4b28      	ldr	r3, [pc, #160]	; (801869c <__lshift+0xd0>)
 80185fa:	4829      	ldr	r0, [pc, #164]	; (80186a0 <__lshift+0xd4>)
 80185fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018600:	f7fc f8b8 	bl	8014774 <__assert_func>
 8018604:	3101      	adds	r1, #1
 8018606:	005b      	lsls	r3, r3, #1
 8018608:	e7ee      	b.n	80185e8 <__lshift+0x1c>
 801860a:	2300      	movs	r3, #0
 801860c:	f100 0114 	add.w	r1, r0, #20
 8018610:	f100 0210 	add.w	r2, r0, #16
 8018614:	4618      	mov	r0, r3
 8018616:	4553      	cmp	r3, sl
 8018618:	db33      	blt.n	8018682 <__lshift+0xb6>
 801861a:	6920      	ldr	r0, [r4, #16]
 801861c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018620:	f104 0314 	add.w	r3, r4, #20
 8018624:	f019 091f 	ands.w	r9, r9, #31
 8018628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801862c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018630:	d02b      	beq.n	801868a <__lshift+0xbe>
 8018632:	f1c9 0e20 	rsb	lr, r9, #32
 8018636:	468a      	mov	sl, r1
 8018638:	2200      	movs	r2, #0
 801863a:	6818      	ldr	r0, [r3, #0]
 801863c:	fa00 f009 	lsl.w	r0, r0, r9
 8018640:	4302      	orrs	r2, r0
 8018642:	f84a 2b04 	str.w	r2, [sl], #4
 8018646:	f853 2b04 	ldr.w	r2, [r3], #4
 801864a:	459c      	cmp	ip, r3
 801864c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018650:	d8f3      	bhi.n	801863a <__lshift+0x6e>
 8018652:	ebac 0304 	sub.w	r3, ip, r4
 8018656:	3b15      	subs	r3, #21
 8018658:	f023 0303 	bic.w	r3, r3, #3
 801865c:	3304      	adds	r3, #4
 801865e:	f104 0015 	add.w	r0, r4, #21
 8018662:	4584      	cmp	ip, r0
 8018664:	bf38      	it	cc
 8018666:	2304      	movcc	r3, #4
 8018668:	50ca      	str	r2, [r1, r3]
 801866a:	b10a      	cbz	r2, 8018670 <__lshift+0xa4>
 801866c:	f108 0602 	add.w	r6, r8, #2
 8018670:	3e01      	subs	r6, #1
 8018672:	4638      	mov	r0, r7
 8018674:	612e      	str	r6, [r5, #16]
 8018676:	4621      	mov	r1, r4
 8018678:	f7ff fd8c 	bl	8018194 <_Bfree>
 801867c:	4628      	mov	r0, r5
 801867e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018682:	f842 0f04 	str.w	r0, [r2, #4]!
 8018686:	3301      	adds	r3, #1
 8018688:	e7c5      	b.n	8018616 <__lshift+0x4a>
 801868a:	3904      	subs	r1, #4
 801868c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018690:	f841 2f04 	str.w	r2, [r1, #4]!
 8018694:	459c      	cmp	ip, r3
 8018696:	d8f9      	bhi.n	801868c <__lshift+0xc0>
 8018698:	e7ea      	b.n	8018670 <__lshift+0xa4>
 801869a:	bf00      	nop
 801869c:	08021ca4 	.word	0x08021ca4
 80186a0:	08021d98 	.word	0x08021d98

080186a4 <__mcmp>:
 80186a4:	b530      	push	{r4, r5, lr}
 80186a6:	6902      	ldr	r2, [r0, #16]
 80186a8:	690c      	ldr	r4, [r1, #16]
 80186aa:	1b12      	subs	r2, r2, r4
 80186ac:	d10e      	bne.n	80186cc <__mcmp+0x28>
 80186ae:	f100 0314 	add.w	r3, r0, #20
 80186b2:	3114      	adds	r1, #20
 80186b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80186b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80186bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80186c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80186c4:	42a5      	cmp	r5, r4
 80186c6:	d003      	beq.n	80186d0 <__mcmp+0x2c>
 80186c8:	d305      	bcc.n	80186d6 <__mcmp+0x32>
 80186ca:	2201      	movs	r2, #1
 80186cc:	4610      	mov	r0, r2
 80186ce:	bd30      	pop	{r4, r5, pc}
 80186d0:	4283      	cmp	r3, r0
 80186d2:	d3f3      	bcc.n	80186bc <__mcmp+0x18>
 80186d4:	e7fa      	b.n	80186cc <__mcmp+0x28>
 80186d6:	f04f 32ff 	mov.w	r2, #4294967295
 80186da:	e7f7      	b.n	80186cc <__mcmp+0x28>

080186dc <__mdiff>:
 80186dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e0:	460c      	mov	r4, r1
 80186e2:	4606      	mov	r6, r0
 80186e4:	4611      	mov	r1, r2
 80186e6:	4620      	mov	r0, r4
 80186e8:	4617      	mov	r7, r2
 80186ea:	f7ff ffdb 	bl	80186a4 <__mcmp>
 80186ee:	1e05      	subs	r5, r0, #0
 80186f0:	d110      	bne.n	8018714 <__mdiff+0x38>
 80186f2:	4629      	mov	r1, r5
 80186f4:	4630      	mov	r0, r6
 80186f6:	f7ff fd0d 	bl	8018114 <_Balloc>
 80186fa:	b930      	cbnz	r0, 801870a <__mdiff+0x2e>
 80186fc:	4b39      	ldr	r3, [pc, #228]	; (80187e4 <__mdiff+0x108>)
 80186fe:	4602      	mov	r2, r0
 8018700:	f240 2132 	movw	r1, #562	; 0x232
 8018704:	4838      	ldr	r0, [pc, #224]	; (80187e8 <__mdiff+0x10c>)
 8018706:	f7fc f835 	bl	8014774 <__assert_func>
 801870a:	2301      	movs	r3, #1
 801870c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018714:	bfa4      	itt	ge
 8018716:	463b      	movge	r3, r7
 8018718:	4627      	movge	r7, r4
 801871a:	4630      	mov	r0, r6
 801871c:	6879      	ldr	r1, [r7, #4]
 801871e:	bfa6      	itte	ge
 8018720:	461c      	movge	r4, r3
 8018722:	2500      	movge	r5, #0
 8018724:	2501      	movlt	r5, #1
 8018726:	f7ff fcf5 	bl	8018114 <_Balloc>
 801872a:	b920      	cbnz	r0, 8018736 <__mdiff+0x5a>
 801872c:	4b2d      	ldr	r3, [pc, #180]	; (80187e4 <__mdiff+0x108>)
 801872e:	4602      	mov	r2, r0
 8018730:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018734:	e7e6      	b.n	8018704 <__mdiff+0x28>
 8018736:	693e      	ldr	r6, [r7, #16]
 8018738:	60c5      	str	r5, [r0, #12]
 801873a:	6925      	ldr	r5, [r4, #16]
 801873c:	f107 0114 	add.w	r1, r7, #20
 8018740:	f104 0914 	add.w	r9, r4, #20
 8018744:	f100 0e14 	add.w	lr, r0, #20
 8018748:	f107 0210 	add.w	r2, r7, #16
 801874c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018750:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018754:	46f2      	mov	sl, lr
 8018756:	2700      	movs	r7, #0
 8018758:	f859 3b04 	ldr.w	r3, [r9], #4
 801875c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018760:	fa1f f883 	uxth.w	r8, r3
 8018764:	fa17 f78b 	uxtah	r7, r7, fp
 8018768:	0c1b      	lsrs	r3, r3, #16
 801876a:	eba7 0808 	sub.w	r8, r7, r8
 801876e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018776:	fa1f f888 	uxth.w	r8, r8
 801877a:	141f      	asrs	r7, r3, #16
 801877c:	454d      	cmp	r5, r9
 801877e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018782:	f84a 3b04 	str.w	r3, [sl], #4
 8018786:	d8e7      	bhi.n	8018758 <__mdiff+0x7c>
 8018788:	1b2b      	subs	r3, r5, r4
 801878a:	3b15      	subs	r3, #21
 801878c:	f023 0303 	bic.w	r3, r3, #3
 8018790:	3304      	adds	r3, #4
 8018792:	3415      	adds	r4, #21
 8018794:	42a5      	cmp	r5, r4
 8018796:	bf38      	it	cc
 8018798:	2304      	movcc	r3, #4
 801879a:	4419      	add	r1, r3
 801879c:	4473      	add	r3, lr
 801879e:	469e      	mov	lr, r3
 80187a0:	460d      	mov	r5, r1
 80187a2:	4565      	cmp	r5, ip
 80187a4:	d30e      	bcc.n	80187c4 <__mdiff+0xe8>
 80187a6:	f10c 0203 	add.w	r2, ip, #3
 80187aa:	1a52      	subs	r2, r2, r1
 80187ac:	f022 0203 	bic.w	r2, r2, #3
 80187b0:	3903      	subs	r1, #3
 80187b2:	458c      	cmp	ip, r1
 80187b4:	bf38      	it	cc
 80187b6:	2200      	movcc	r2, #0
 80187b8:	441a      	add	r2, r3
 80187ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80187be:	b17b      	cbz	r3, 80187e0 <__mdiff+0x104>
 80187c0:	6106      	str	r6, [r0, #16]
 80187c2:	e7a5      	b.n	8018710 <__mdiff+0x34>
 80187c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80187c8:	fa17 f488 	uxtah	r4, r7, r8
 80187cc:	1422      	asrs	r2, r4, #16
 80187ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80187d2:	b2a4      	uxth	r4, r4
 80187d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80187d8:	f84e 4b04 	str.w	r4, [lr], #4
 80187dc:	1417      	asrs	r7, r2, #16
 80187de:	e7e0      	b.n	80187a2 <__mdiff+0xc6>
 80187e0:	3e01      	subs	r6, #1
 80187e2:	e7ea      	b.n	80187ba <__mdiff+0xde>
 80187e4:	08021ca4 	.word	0x08021ca4
 80187e8:	08021d98 	.word	0x08021d98

080187ec <__ulp>:
 80187ec:	b082      	sub	sp, #8
 80187ee:	ed8d 0b00 	vstr	d0, [sp]
 80187f2:	9b01      	ldr	r3, [sp, #4]
 80187f4:	4912      	ldr	r1, [pc, #72]	; (8018840 <__ulp+0x54>)
 80187f6:	4019      	ands	r1, r3
 80187f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80187fc:	2900      	cmp	r1, #0
 80187fe:	dd05      	ble.n	801880c <__ulp+0x20>
 8018800:	2200      	movs	r2, #0
 8018802:	460b      	mov	r3, r1
 8018804:	ec43 2b10 	vmov	d0, r2, r3
 8018808:	b002      	add	sp, #8
 801880a:	4770      	bx	lr
 801880c:	4249      	negs	r1, r1
 801880e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018812:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018816:	f04f 0200 	mov.w	r2, #0
 801881a:	f04f 0300 	mov.w	r3, #0
 801881e:	da04      	bge.n	801882a <__ulp+0x3e>
 8018820:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018824:	fa41 f300 	asr.w	r3, r1, r0
 8018828:	e7ec      	b.n	8018804 <__ulp+0x18>
 801882a:	f1a0 0114 	sub.w	r1, r0, #20
 801882e:	291e      	cmp	r1, #30
 8018830:	bfda      	itte	le
 8018832:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018836:	fa20 f101 	lsrle.w	r1, r0, r1
 801883a:	2101      	movgt	r1, #1
 801883c:	460a      	mov	r2, r1
 801883e:	e7e1      	b.n	8018804 <__ulp+0x18>
 8018840:	7ff00000 	.word	0x7ff00000

08018844 <__b2d>:
 8018844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018846:	6905      	ldr	r5, [r0, #16]
 8018848:	f100 0714 	add.w	r7, r0, #20
 801884c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018850:	1f2e      	subs	r6, r5, #4
 8018852:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018856:	4620      	mov	r0, r4
 8018858:	f7ff fd52 	bl	8018300 <__hi0bits>
 801885c:	f1c0 0320 	rsb	r3, r0, #32
 8018860:	280a      	cmp	r0, #10
 8018862:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80188e0 <__b2d+0x9c>
 8018866:	600b      	str	r3, [r1, #0]
 8018868:	dc14      	bgt.n	8018894 <__b2d+0x50>
 801886a:	f1c0 0e0b 	rsb	lr, r0, #11
 801886e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018872:	42b7      	cmp	r7, r6
 8018874:	ea41 030c 	orr.w	r3, r1, ip
 8018878:	bf34      	ite	cc
 801887a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801887e:	2100      	movcs	r1, #0
 8018880:	3015      	adds	r0, #21
 8018882:	fa04 f000 	lsl.w	r0, r4, r0
 8018886:	fa21 f10e 	lsr.w	r1, r1, lr
 801888a:	ea40 0201 	orr.w	r2, r0, r1
 801888e:	ec43 2b10 	vmov	d0, r2, r3
 8018892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018894:	42b7      	cmp	r7, r6
 8018896:	bf3a      	itte	cc
 8018898:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801889c:	f1a5 0608 	subcc.w	r6, r5, #8
 80188a0:	2100      	movcs	r1, #0
 80188a2:	380b      	subs	r0, #11
 80188a4:	d017      	beq.n	80188d6 <__b2d+0x92>
 80188a6:	f1c0 0c20 	rsb	ip, r0, #32
 80188aa:	fa04 f500 	lsl.w	r5, r4, r0
 80188ae:	42be      	cmp	r6, r7
 80188b0:	fa21 f40c 	lsr.w	r4, r1, ip
 80188b4:	ea45 0504 	orr.w	r5, r5, r4
 80188b8:	bf8c      	ite	hi
 80188ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80188be:	2400      	movls	r4, #0
 80188c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80188c4:	fa01 f000 	lsl.w	r0, r1, r0
 80188c8:	fa24 f40c 	lsr.w	r4, r4, ip
 80188cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80188d0:	ea40 0204 	orr.w	r2, r0, r4
 80188d4:	e7db      	b.n	801888e <__b2d+0x4a>
 80188d6:	ea44 030c 	orr.w	r3, r4, ip
 80188da:	460a      	mov	r2, r1
 80188dc:	e7d7      	b.n	801888e <__b2d+0x4a>
 80188de:	bf00      	nop
 80188e0:	3ff00000 	.word	0x3ff00000

080188e4 <__d2b>:
 80188e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80188e8:	4689      	mov	r9, r1
 80188ea:	2101      	movs	r1, #1
 80188ec:	ec57 6b10 	vmov	r6, r7, d0
 80188f0:	4690      	mov	r8, r2
 80188f2:	f7ff fc0f 	bl	8018114 <_Balloc>
 80188f6:	4604      	mov	r4, r0
 80188f8:	b930      	cbnz	r0, 8018908 <__d2b+0x24>
 80188fa:	4602      	mov	r2, r0
 80188fc:	4b25      	ldr	r3, [pc, #148]	; (8018994 <__d2b+0xb0>)
 80188fe:	4826      	ldr	r0, [pc, #152]	; (8018998 <__d2b+0xb4>)
 8018900:	f240 310a 	movw	r1, #778	; 0x30a
 8018904:	f7fb ff36 	bl	8014774 <__assert_func>
 8018908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801890c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018910:	bb35      	cbnz	r5, 8018960 <__d2b+0x7c>
 8018912:	2e00      	cmp	r6, #0
 8018914:	9301      	str	r3, [sp, #4]
 8018916:	d028      	beq.n	801896a <__d2b+0x86>
 8018918:	4668      	mov	r0, sp
 801891a:	9600      	str	r6, [sp, #0]
 801891c:	f7ff fd10 	bl	8018340 <__lo0bits>
 8018920:	9900      	ldr	r1, [sp, #0]
 8018922:	b300      	cbz	r0, 8018966 <__d2b+0x82>
 8018924:	9a01      	ldr	r2, [sp, #4]
 8018926:	f1c0 0320 	rsb	r3, r0, #32
 801892a:	fa02 f303 	lsl.w	r3, r2, r3
 801892e:	430b      	orrs	r3, r1
 8018930:	40c2      	lsrs	r2, r0
 8018932:	6163      	str	r3, [r4, #20]
 8018934:	9201      	str	r2, [sp, #4]
 8018936:	9b01      	ldr	r3, [sp, #4]
 8018938:	61a3      	str	r3, [r4, #24]
 801893a:	2b00      	cmp	r3, #0
 801893c:	bf14      	ite	ne
 801893e:	2202      	movne	r2, #2
 8018940:	2201      	moveq	r2, #1
 8018942:	6122      	str	r2, [r4, #16]
 8018944:	b1d5      	cbz	r5, 801897c <__d2b+0x98>
 8018946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801894a:	4405      	add	r5, r0
 801894c:	f8c9 5000 	str.w	r5, [r9]
 8018950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018954:	f8c8 0000 	str.w	r0, [r8]
 8018958:	4620      	mov	r0, r4
 801895a:	b003      	add	sp, #12
 801895c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018964:	e7d5      	b.n	8018912 <__d2b+0x2e>
 8018966:	6161      	str	r1, [r4, #20]
 8018968:	e7e5      	b.n	8018936 <__d2b+0x52>
 801896a:	a801      	add	r0, sp, #4
 801896c:	f7ff fce8 	bl	8018340 <__lo0bits>
 8018970:	9b01      	ldr	r3, [sp, #4]
 8018972:	6163      	str	r3, [r4, #20]
 8018974:	2201      	movs	r2, #1
 8018976:	6122      	str	r2, [r4, #16]
 8018978:	3020      	adds	r0, #32
 801897a:	e7e3      	b.n	8018944 <__d2b+0x60>
 801897c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018984:	f8c9 0000 	str.w	r0, [r9]
 8018988:	6918      	ldr	r0, [r3, #16]
 801898a:	f7ff fcb9 	bl	8018300 <__hi0bits>
 801898e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018992:	e7df      	b.n	8018954 <__d2b+0x70>
 8018994:	08021ca4 	.word	0x08021ca4
 8018998:	08021d98 	.word	0x08021d98

0801899c <__ratio>:
 801899c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a0:	468a      	mov	sl, r1
 80189a2:	4669      	mov	r1, sp
 80189a4:	4683      	mov	fp, r0
 80189a6:	f7ff ff4d 	bl	8018844 <__b2d>
 80189aa:	a901      	add	r1, sp, #4
 80189ac:	4650      	mov	r0, sl
 80189ae:	ec59 8b10 	vmov	r8, r9, d0
 80189b2:	ee10 6a10 	vmov	r6, s0
 80189b6:	f7ff ff45 	bl	8018844 <__b2d>
 80189ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80189be:	f8da 2010 	ldr.w	r2, [sl, #16]
 80189c2:	eba3 0c02 	sub.w	ip, r3, r2
 80189c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80189ca:	1a9b      	subs	r3, r3, r2
 80189cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80189d0:	ec55 4b10 	vmov	r4, r5, d0
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	ee10 0a10 	vmov	r0, s0
 80189da:	bfce      	itee	gt
 80189dc:	464a      	movgt	r2, r9
 80189de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80189e2:	462a      	movle	r2, r5
 80189e4:	464f      	mov	r7, r9
 80189e6:	4629      	mov	r1, r5
 80189e8:	bfcc      	ite	gt
 80189ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80189ee:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80189f2:	ec47 6b17 	vmov	d7, r6, r7
 80189f6:	ec41 0b16 	vmov	d6, r0, r1
 80189fa:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80189fe:	b003      	add	sp, #12
 8018a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a04 <__copybits>:
 8018a04:	3901      	subs	r1, #1
 8018a06:	b570      	push	{r4, r5, r6, lr}
 8018a08:	1149      	asrs	r1, r1, #5
 8018a0a:	6914      	ldr	r4, [r2, #16]
 8018a0c:	3101      	adds	r1, #1
 8018a0e:	f102 0314 	add.w	r3, r2, #20
 8018a12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018a16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018a1a:	1f05      	subs	r5, r0, #4
 8018a1c:	42a3      	cmp	r3, r4
 8018a1e:	d30c      	bcc.n	8018a3a <__copybits+0x36>
 8018a20:	1aa3      	subs	r3, r4, r2
 8018a22:	3b11      	subs	r3, #17
 8018a24:	f023 0303 	bic.w	r3, r3, #3
 8018a28:	3211      	adds	r2, #17
 8018a2a:	42a2      	cmp	r2, r4
 8018a2c:	bf88      	it	hi
 8018a2e:	2300      	movhi	r3, #0
 8018a30:	4418      	add	r0, r3
 8018a32:	2300      	movs	r3, #0
 8018a34:	4288      	cmp	r0, r1
 8018a36:	d305      	bcc.n	8018a44 <__copybits+0x40>
 8018a38:	bd70      	pop	{r4, r5, r6, pc}
 8018a3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8018a3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8018a42:	e7eb      	b.n	8018a1c <__copybits+0x18>
 8018a44:	f840 3b04 	str.w	r3, [r0], #4
 8018a48:	e7f4      	b.n	8018a34 <__copybits+0x30>

08018a4a <__any_on>:
 8018a4a:	f100 0214 	add.w	r2, r0, #20
 8018a4e:	6900      	ldr	r0, [r0, #16]
 8018a50:	114b      	asrs	r3, r1, #5
 8018a52:	4298      	cmp	r0, r3
 8018a54:	b510      	push	{r4, lr}
 8018a56:	db11      	blt.n	8018a7c <__any_on+0x32>
 8018a58:	dd0a      	ble.n	8018a70 <__any_on+0x26>
 8018a5a:	f011 011f 	ands.w	r1, r1, #31
 8018a5e:	d007      	beq.n	8018a70 <__any_on+0x26>
 8018a60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018a64:	fa24 f001 	lsr.w	r0, r4, r1
 8018a68:	fa00 f101 	lsl.w	r1, r0, r1
 8018a6c:	428c      	cmp	r4, r1
 8018a6e:	d10b      	bne.n	8018a88 <__any_on+0x3e>
 8018a70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018a74:	4293      	cmp	r3, r2
 8018a76:	d803      	bhi.n	8018a80 <__any_on+0x36>
 8018a78:	2000      	movs	r0, #0
 8018a7a:	bd10      	pop	{r4, pc}
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	e7f7      	b.n	8018a70 <__any_on+0x26>
 8018a80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018a84:	2900      	cmp	r1, #0
 8018a86:	d0f5      	beq.n	8018a74 <__any_on+0x2a>
 8018a88:	2001      	movs	r0, #1
 8018a8a:	e7f6      	b.n	8018a7a <__any_on+0x30>

08018a8c <_calloc_r>:
 8018a8c:	b513      	push	{r0, r1, r4, lr}
 8018a8e:	434a      	muls	r2, r1
 8018a90:	4611      	mov	r1, r2
 8018a92:	9201      	str	r2, [sp, #4]
 8018a94:	f7fb ff58 	bl	8014948 <_malloc_r>
 8018a98:	4604      	mov	r4, r0
 8018a9a:	b118      	cbz	r0, 8018aa4 <_calloc_r+0x18>
 8018a9c:	9a01      	ldr	r2, [sp, #4]
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	f7fb fefa 	bl	8014898 <memset>
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	b002      	add	sp, #8
 8018aa8:	bd10      	pop	{r4, pc}

08018aaa <_realloc_r>:
 8018aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aac:	4607      	mov	r7, r0
 8018aae:	4614      	mov	r4, r2
 8018ab0:	460e      	mov	r6, r1
 8018ab2:	b921      	cbnz	r1, 8018abe <_realloc_r+0x14>
 8018ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018ab8:	4611      	mov	r1, r2
 8018aba:	f7fb bf45 	b.w	8014948 <_malloc_r>
 8018abe:	b922      	cbnz	r2, 8018aca <_realloc_r+0x20>
 8018ac0:	f7fb fef2 	bl	80148a8 <_free_r>
 8018ac4:	4625      	mov	r5, r4
 8018ac6:	4628      	mov	r0, r5
 8018ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018aca:	f000 fa63 	bl	8018f94 <_malloc_usable_size_r>
 8018ace:	42a0      	cmp	r0, r4
 8018ad0:	d20f      	bcs.n	8018af2 <_realloc_r+0x48>
 8018ad2:	4621      	mov	r1, r4
 8018ad4:	4638      	mov	r0, r7
 8018ad6:	f7fb ff37 	bl	8014948 <_malloc_r>
 8018ada:	4605      	mov	r5, r0
 8018adc:	2800      	cmp	r0, #0
 8018ade:	d0f2      	beq.n	8018ac6 <_realloc_r+0x1c>
 8018ae0:	4631      	mov	r1, r6
 8018ae2:	4622      	mov	r2, r4
 8018ae4:	f7fb feb0 	bl	8014848 <memcpy>
 8018ae8:	4631      	mov	r1, r6
 8018aea:	4638      	mov	r0, r7
 8018aec:	f7fb fedc 	bl	80148a8 <_free_r>
 8018af0:	e7e9      	b.n	8018ac6 <_realloc_r+0x1c>
 8018af2:	4635      	mov	r5, r6
 8018af4:	e7e7      	b.n	8018ac6 <_realloc_r+0x1c>

08018af6 <__ssputs_r>:
 8018af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018afa:	688e      	ldr	r6, [r1, #8]
 8018afc:	429e      	cmp	r6, r3
 8018afe:	4682      	mov	sl, r0
 8018b00:	460c      	mov	r4, r1
 8018b02:	4690      	mov	r8, r2
 8018b04:	461f      	mov	r7, r3
 8018b06:	d838      	bhi.n	8018b7a <__ssputs_r+0x84>
 8018b08:	898a      	ldrh	r2, [r1, #12]
 8018b0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b0e:	d032      	beq.n	8018b76 <__ssputs_r+0x80>
 8018b10:	6825      	ldr	r5, [r4, #0]
 8018b12:	6909      	ldr	r1, [r1, #16]
 8018b14:	eba5 0901 	sub.w	r9, r5, r1
 8018b18:	6965      	ldr	r5, [r4, #20]
 8018b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b22:	3301      	adds	r3, #1
 8018b24:	444b      	add	r3, r9
 8018b26:	106d      	asrs	r5, r5, #1
 8018b28:	429d      	cmp	r5, r3
 8018b2a:	bf38      	it	cc
 8018b2c:	461d      	movcc	r5, r3
 8018b2e:	0553      	lsls	r3, r2, #21
 8018b30:	d531      	bpl.n	8018b96 <__ssputs_r+0xa0>
 8018b32:	4629      	mov	r1, r5
 8018b34:	f7fb ff08 	bl	8014948 <_malloc_r>
 8018b38:	4606      	mov	r6, r0
 8018b3a:	b950      	cbnz	r0, 8018b52 <__ssputs_r+0x5c>
 8018b3c:	230c      	movs	r3, #12
 8018b3e:	f8ca 3000 	str.w	r3, [sl]
 8018b42:	89a3      	ldrh	r3, [r4, #12]
 8018b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b48:	81a3      	strh	r3, [r4, #12]
 8018b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8018b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b52:	6921      	ldr	r1, [r4, #16]
 8018b54:	464a      	mov	r2, r9
 8018b56:	f7fb fe77 	bl	8014848 <memcpy>
 8018b5a:	89a3      	ldrh	r3, [r4, #12]
 8018b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b64:	81a3      	strh	r3, [r4, #12]
 8018b66:	6126      	str	r6, [r4, #16]
 8018b68:	6165      	str	r5, [r4, #20]
 8018b6a:	444e      	add	r6, r9
 8018b6c:	eba5 0509 	sub.w	r5, r5, r9
 8018b70:	6026      	str	r6, [r4, #0]
 8018b72:	60a5      	str	r5, [r4, #8]
 8018b74:	463e      	mov	r6, r7
 8018b76:	42be      	cmp	r6, r7
 8018b78:	d900      	bls.n	8018b7c <__ssputs_r+0x86>
 8018b7a:	463e      	mov	r6, r7
 8018b7c:	4632      	mov	r2, r6
 8018b7e:	6820      	ldr	r0, [r4, #0]
 8018b80:	4641      	mov	r1, r8
 8018b82:	f7fb fe6f 	bl	8014864 <memmove>
 8018b86:	68a3      	ldr	r3, [r4, #8]
 8018b88:	6822      	ldr	r2, [r4, #0]
 8018b8a:	1b9b      	subs	r3, r3, r6
 8018b8c:	4432      	add	r2, r6
 8018b8e:	60a3      	str	r3, [r4, #8]
 8018b90:	6022      	str	r2, [r4, #0]
 8018b92:	2000      	movs	r0, #0
 8018b94:	e7db      	b.n	8018b4e <__ssputs_r+0x58>
 8018b96:	462a      	mov	r2, r5
 8018b98:	f7ff ff87 	bl	8018aaa <_realloc_r>
 8018b9c:	4606      	mov	r6, r0
 8018b9e:	2800      	cmp	r0, #0
 8018ba0:	d1e1      	bne.n	8018b66 <__ssputs_r+0x70>
 8018ba2:	6921      	ldr	r1, [r4, #16]
 8018ba4:	4650      	mov	r0, sl
 8018ba6:	f7fb fe7f 	bl	80148a8 <_free_r>
 8018baa:	e7c7      	b.n	8018b3c <__ssputs_r+0x46>

08018bac <_svfiprintf_r>:
 8018bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb0:	4698      	mov	r8, r3
 8018bb2:	898b      	ldrh	r3, [r1, #12]
 8018bb4:	061b      	lsls	r3, r3, #24
 8018bb6:	b09d      	sub	sp, #116	; 0x74
 8018bb8:	4607      	mov	r7, r0
 8018bba:	460d      	mov	r5, r1
 8018bbc:	4614      	mov	r4, r2
 8018bbe:	d50e      	bpl.n	8018bde <_svfiprintf_r+0x32>
 8018bc0:	690b      	ldr	r3, [r1, #16]
 8018bc2:	b963      	cbnz	r3, 8018bde <_svfiprintf_r+0x32>
 8018bc4:	2140      	movs	r1, #64	; 0x40
 8018bc6:	f7fb febf 	bl	8014948 <_malloc_r>
 8018bca:	6028      	str	r0, [r5, #0]
 8018bcc:	6128      	str	r0, [r5, #16]
 8018bce:	b920      	cbnz	r0, 8018bda <_svfiprintf_r+0x2e>
 8018bd0:	230c      	movs	r3, #12
 8018bd2:	603b      	str	r3, [r7, #0]
 8018bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8018bd8:	e0d1      	b.n	8018d7e <_svfiprintf_r+0x1d2>
 8018bda:	2340      	movs	r3, #64	; 0x40
 8018bdc:	616b      	str	r3, [r5, #20]
 8018bde:	2300      	movs	r3, #0
 8018be0:	9309      	str	r3, [sp, #36]	; 0x24
 8018be2:	2320      	movs	r3, #32
 8018be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bec:	2330      	movs	r3, #48	; 0x30
 8018bee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018d98 <_svfiprintf_r+0x1ec>
 8018bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018bf6:	f04f 0901 	mov.w	r9, #1
 8018bfa:	4623      	mov	r3, r4
 8018bfc:	469a      	mov	sl, r3
 8018bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c02:	b10a      	cbz	r2, 8018c08 <_svfiprintf_r+0x5c>
 8018c04:	2a25      	cmp	r2, #37	; 0x25
 8018c06:	d1f9      	bne.n	8018bfc <_svfiprintf_r+0x50>
 8018c08:	ebba 0b04 	subs.w	fp, sl, r4
 8018c0c:	d00b      	beq.n	8018c26 <_svfiprintf_r+0x7a>
 8018c0e:	465b      	mov	r3, fp
 8018c10:	4622      	mov	r2, r4
 8018c12:	4629      	mov	r1, r5
 8018c14:	4638      	mov	r0, r7
 8018c16:	f7ff ff6e 	bl	8018af6 <__ssputs_r>
 8018c1a:	3001      	adds	r0, #1
 8018c1c:	f000 80aa 	beq.w	8018d74 <_svfiprintf_r+0x1c8>
 8018c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c22:	445a      	add	r2, fp
 8018c24:	9209      	str	r2, [sp, #36]	; 0x24
 8018c26:	f89a 3000 	ldrb.w	r3, [sl]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	f000 80a2 	beq.w	8018d74 <_svfiprintf_r+0x1c8>
 8018c30:	2300      	movs	r3, #0
 8018c32:	f04f 32ff 	mov.w	r2, #4294967295
 8018c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c3a:	f10a 0a01 	add.w	sl, sl, #1
 8018c3e:	9304      	str	r3, [sp, #16]
 8018c40:	9307      	str	r3, [sp, #28]
 8018c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018c46:	931a      	str	r3, [sp, #104]	; 0x68
 8018c48:	4654      	mov	r4, sl
 8018c4a:	2205      	movs	r2, #5
 8018c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c50:	4851      	ldr	r0, [pc, #324]	; (8018d98 <_svfiprintf_r+0x1ec>)
 8018c52:	f7e7 fb5d 	bl	8000310 <memchr>
 8018c56:	9a04      	ldr	r2, [sp, #16]
 8018c58:	b9d8      	cbnz	r0, 8018c92 <_svfiprintf_r+0xe6>
 8018c5a:	06d0      	lsls	r0, r2, #27
 8018c5c:	bf44      	itt	mi
 8018c5e:	2320      	movmi	r3, #32
 8018c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c64:	0711      	lsls	r1, r2, #28
 8018c66:	bf44      	itt	mi
 8018c68:	232b      	movmi	r3, #43	; 0x2b
 8018c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8018c72:	2b2a      	cmp	r3, #42	; 0x2a
 8018c74:	d015      	beq.n	8018ca2 <_svfiprintf_r+0xf6>
 8018c76:	9a07      	ldr	r2, [sp, #28]
 8018c78:	4654      	mov	r4, sl
 8018c7a:	2000      	movs	r0, #0
 8018c7c:	f04f 0c0a 	mov.w	ip, #10
 8018c80:	4621      	mov	r1, r4
 8018c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c86:	3b30      	subs	r3, #48	; 0x30
 8018c88:	2b09      	cmp	r3, #9
 8018c8a:	d94e      	bls.n	8018d2a <_svfiprintf_r+0x17e>
 8018c8c:	b1b0      	cbz	r0, 8018cbc <_svfiprintf_r+0x110>
 8018c8e:	9207      	str	r2, [sp, #28]
 8018c90:	e014      	b.n	8018cbc <_svfiprintf_r+0x110>
 8018c92:	eba0 0308 	sub.w	r3, r0, r8
 8018c96:	fa09 f303 	lsl.w	r3, r9, r3
 8018c9a:	4313      	orrs	r3, r2
 8018c9c:	9304      	str	r3, [sp, #16]
 8018c9e:	46a2      	mov	sl, r4
 8018ca0:	e7d2      	b.n	8018c48 <_svfiprintf_r+0x9c>
 8018ca2:	9b03      	ldr	r3, [sp, #12]
 8018ca4:	1d19      	adds	r1, r3, #4
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	9103      	str	r1, [sp, #12]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	bfbb      	ittet	lt
 8018cae:	425b      	neglt	r3, r3
 8018cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8018cb4:	9307      	strge	r3, [sp, #28]
 8018cb6:	9307      	strlt	r3, [sp, #28]
 8018cb8:	bfb8      	it	lt
 8018cba:	9204      	strlt	r2, [sp, #16]
 8018cbc:	7823      	ldrb	r3, [r4, #0]
 8018cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8018cc0:	d10c      	bne.n	8018cdc <_svfiprintf_r+0x130>
 8018cc2:	7863      	ldrb	r3, [r4, #1]
 8018cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8018cc6:	d135      	bne.n	8018d34 <_svfiprintf_r+0x188>
 8018cc8:	9b03      	ldr	r3, [sp, #12]
 8018cca:	1d1a      	adds	r2, r3, #4
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	9203      	str	r2, [sp, #12]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	bfb8      	it	lt
 8018cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018cd8:	3402      	adds	r4, #2
 8018cda:	9305      	str	r3, [sp, #20]
 8018cdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018da8 <_svfiprintf_r+0x1fc>
 8018ce0:	7821      	ldrb	r1, [r4, #0]
 8018ce2:	2203      	movs	r2, #3
 8018ce4:	4650      	mov	r0, sl
 8018ce6:	f7e7 fb13 	bl	8000310 <memchr>
 8018cea:	b140      	cbz	r0, 8018cfe <_svfiprintf_r+0x152>
 8018cec:	2340      	movs	r3, #64	; 0x40
 8018cee:	eba0 000a 	sub.w	r0, r0, sl
 8018cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8018cf6:	9b04      	ldr	r3, [sp, #16]
 8018cf8:	4303      	orrs	r3, r0
 8018cfa:	3401      	adds	r4, #1
 8018cfc:	9304      	str	r3, [sp, #16]
 8018cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d02:	4826      	ldr	r0, [pc, #152]	; (8018d9c <_svfiprintf_r+0x1f0>)
 8018d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d08:	2206      	movs	r2, #6
 8018d0a:	f7e7 fb01 	bl	8000310 <memchr>
 8018d0e:	2800      	cmp	r0, #0
 8018d10:	d038      	beq.n	8018d84 <_svfiprintf_r+0x1d8>
 8018d12:	4b23      	ldr	r3, [pc, #140]	; (8018da0 <_svfiprintf_r+0x1f4>)
 8018d14:	bb1b      	cbnz	r3, 8018d5e <_svfiprintf_r+0x1b2>
 8018d16:	9b03      	ldr	r3, [sp, #12]
 8018d18:	3307      	adds	r3, #7
 8018d1a:	f023 0307 	bic.w	r3, r3, #7
 8018d1e:	3308      	adds	r3, #8
 8018d20:	9303      	str	r3, [sp, #12]
 8018d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d24:	4433      	add	r3, r6
 8018d26:	9309      	str	r3, [sp, #36]	; 0x24
 8018d28:	e767      	b.n	8018bfa <_svfiprintf_r+0x4e>
 8018d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d2e:	460c      	mov	r4, r1
 8018d30:	2001      	movs	r0, #1
 8018d32:	e7a5      	b.n	8018c80 <_svfiprintf_r+0xd4>
 8018d34:	2300      	movs	r3, #0
 8018d36:	3401      	adds	r4, #1
 8018d38:	9305      	str	r3, [sp, #20]
 8018d3a:	4619      	mov	r1, r3
 8018d3c:	f04f 0c0a 	mov.w	ip, #10
 8018d40:	4620      	mov	r0, r4
 8018d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d46:	3a30      	subs	r2, #48	; 0x30
 8018d48:	2a09      	cmp	r2, #9
 8018d4a:	d903      	bls.n	8018d54 <_svfiprintf_r+0x1a8>
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d0c5      	beq.n	8018cdc <_svfiprintf_r+0x130>
 8018d50:	9105      	str	r1, [sp, #20]
 8018d52:	e7c3      	b.n	8018cdc <_svfiprintf_r+0x130>
 8018d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d58:	4604      	mov	r4, r0
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	e7f0      	b.n	8018d40 <_svfiprintf_r+0x194>
 8018d5e:	ab03      	add	r3, sp, #12
 8018d60:	9300      	str	r3, [sp, #0]
 8018d62:	462a      	mov	r2, r5
 8018d64:	4b0f      	ldr	r3, [pc, #60]	; (8018da4 <_svfiprintf_r+0x1f8>)
 8018d66:	a904      	add	r1, sp, #16
 8018d68:	4638      	mov	r0, r7
 8018d6a:	f7fc f831 	bl	8014dd0 <_printf_float>
 8018d6e:	1c42      	adds	r2, r0, #1
 8018d70:	4606      	mov	r6, r0
 8018d72:	d1d6      	bne.n	8018d22 <_svfiprintf_r+0x176>
 8018d74:	89ab      	ldrh	r3, [r5, #12]
 8018d76:	065b      	lsls	r3, r3, #25
 8018d78:	f53f af2c 	bmi.w	8018bd4 <_svfiprintf_r+0x28>
 8018d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d7e:	b01d      	add	sp, #116	; 0x74
 8018d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d84:	ab03      	add	r3, sp, #12
 8018d86:	9300      	str	r3, [sp, #0]
 8018d88:	462a      	mov	r2, r5
 8018d8a:	4b06      	ldr	r3, [pc, #24]	; (8018da4 <_svfiprintf_r+0x1f8>)
 8018d8c:	a904      	add	r1, sp, #16
 8018d8e:	4638      	mov	r0, r7
 8018d90:	f7fc faaa 	bl	80152e8 <_printf_i>
 8018d94:	e7eb      	b.n	8018d6e <_svfiprintf_r+0x1c2>
 8018d96:	bf00      	nop
 8018d98:	08021a84 	.word	0x08021a84
 8018d9c:	08021a8e 	.word	0x08021a8e
 8018da0:	08014dd1 	.word	0x08014dd1
 8018da4:	08018af7 	.word	0x08018af7
 8018da8:	08021a8a 	.word	0x08021a8a
 8018dac:	00000000 	.word	0x00000000

08018db0 <nan>:
 8018db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018db8 <nan+0x8>
 8018db4:	4770      	bx	lr
 8018db6:	bf00      	nop
 8018db8:	00000000 	.word	0x00000000
 8018dbc:	7ff80000 	.word	0x7ff80000

08018dc0 <_raise_r>:
 8018dc0:	291f      	cmp	r1, #31
 8018dc2:	b538      	push	{r3, r4, r5, lr}
 8018dc4:	4604      	mov	r4, r0
 8018dc6:	460d      	mov	r5, r1
 8018dc8:	d904      	bls.n	8018dd4 <_raise_r+0x14>
 8018dca:	2316      	movs	r3, #22
 8018dcc:	6003      	str	r3, [r0, #0]
 8018dce:	f04f 30ff 	mov.w	r0, #4294967295
 8018dd2:	bd38      	pop	{r3, r4, r5, pc}
 8018dd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018dd6:	b112      	cbz	r2, 8018dde <_raise_r+0x1e>
 8018dd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ddc:	b94b      	cbnz	r3, 8018df2 <_raise_r+0x32>
 8018dde:	4620      	mov	r0, r4
 8018de0:	f000 f830 	bl	8018e44 <_getpid_r>
 8018de4:	462a      	mov	r2, r5
 8018de6:	4601      	mov	r1, r0
 8018de8:	4620      	mov	r0, r4
 8018dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018dee:	f000 b817 	b.w	8018e20 <_kill_r>
 8018df2:	2b01      	cmp	r3, #1
 8018df4:	d00a      	beq.n	8018e0c <_raise_r+0x4c>
 8018df6:	1c59      	adds	r1, r3, #1
 8018df8:	d103      	bne.n	8018e02 <_raise_r+0x42>
 8018dfa:	2316      	movs	r3, #22
 8018dfc:	6003      	str	r3, [r0, #0]
 8018dfe:	2001      	movs	r0, #1
 8018e00:	e7e7      	b.n	8018dd2 <_raise_r+0x12>
 8018e02:	2400      	movs	r4, #0
 8018e04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018e08:	4628      	mov	r0, r5
 8018e0a:	4798      	blx	r3
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	e7e0      	b.n	8018dd2 <_raise_r+0x12>

08018e10 <raise>:
 8018e10:	4b02      	ldr	r3, [pc, #8]	; (8018e1c <raise+0xc>)
 8018e12:	4601      	mov	r1, r0
 8018e14:	6818      	ldr	r0, [r3, #0]
 8018e16:	f7ff bfd3 	b.w	8018dc0 <_raise_r>
 8018e1a:	bf00      	nop
 8018e1c:	2400a104 	.word	0x2400a104

08018e20 <_kill_r>:
 8018e20:	b538      	push	{r3, r4, r5, lr}
 8018e22:	4d07      	ldr	r5, [pc, #28]	; (8018e40 <_kill_r+0x20>)
 8018e24:	2300      	movs	r3, #0
 8018e26:	4604      	mov	r4, r0
 8018e28:	4608      	mov	r0, r1
 8018e2a:	4611      	mov	r1, r2
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	f7e9 f822 	bl	8001e76 <_kill>
 8018e32:	1c43      	adds	r3, r0, #1
 8018e34:	d102      	bne.n	8018e3c <_kill_r+0x1c>
 8018e36:	682b      	ldr	r3, [r5, #0]
 8018e38:	b103      	cbz	r3, 8018e3c <_kill_r+0x1c>
 8018e3a:	6023      	str	r3, [r4, #0]
 8018e3c:	bd38      	pop	{r3, r4, r5, pc}
 8018e3e:	bf00      	nop
 8018e40:	2400ec1c 	.word	0x2400ec1c

08018e44 <_getpid_r>:
 8018e44:	f7e9 b80f 	b.w	8001e66 <_getpid>

08018e48 <__sread>:
 8018e48:	b510      	push	{r4, lr}
 8018e4a:	460c      	mov	r4, r1
 8018e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e50:	f000 f8a8 	bl	8018fa4 <_read_r>
 8018e54:	2800      	cmp	r0, #0
 8018e56:	bfab      	itete	ge
 8018e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8018e5c:	181b      	addge	r3, r3, r0
 8018e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018e62:	bfac      	ite	ge
 8018e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8018e66:	81a3      	strhlt	r3, [r4, #12]
 8018e68:	bd10      	pop	{r4, pc}

08018e6a <__swrite>:
 8018e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e6e:	461f      	mov	r7, r3
 8018e70:	898b      	ldrh	r3, [r1, #12]
 8018e72:	05db      	lsls	r3, r3, #23
 8018e74:	4605      	mov	r5, r0
 8018e76:	460c      	mov	r4, r1
 8018e78:	4616      	mov	r6, r2
 8018e7a:	d505      	bpl.n	8018e88 <__swrite+0x1e>
 8018e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e80:	2302      	movs	r3, #2
 8018e82:	2200      	movs	r2, #0
 8018e84:	f000 f874 	bl	8018f70 <_lseek_r>
 8018e88:	89a3      	ldrh	r3, [r4, #12]
 8018e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018e92:	81a3      	strh	r3, [r4, #12]
 8018e94:	4632      	mov	r2, r6
 8018e96:	463b      	mov	r3, r7
 8018e98:	4628      	mov	r0, r5
 8018e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e9e:	f000 b823 	b.w	8018ee8 <_write_r>

08018ea2 <__sseek>:
 8018ea2:	b510      	push	{r4, lr}
 8018ea4:	460c      	mov	r4, r1
 8018ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eaa:	f000 f861 	bl	8018f70 <_lseek_r>
 8018eae:	1c43      	adds	r3, r0, #1
 8018eb0:	89a3      	ldrh	r3, [r4, #12]
 8018eb2:	bf15      	itete	ne
 8018eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8018eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018ebe:	81a3      	strheq	r3, [r4, #12]
 8018ec0:	bf18      	it	ne
 8018ec2:	81a3      	strhne	r3, [r4, #12]
 8018ec4:	bd10      	pop	{r4, pc}

08018ec6 <__sclose>:
 8018ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eca:	f000 b81f 	b.w	8018f0c <_close_r>

08018ece <__ascii_wctomb>:
 8018ece:	b149      	cbz	r1, 8018ee4 <__ascii_wctomb+0x16>
 8018ed0:	2aff      	cmp	r2, #255	; 0xff
 8018ed2:	bf85      	ittet	hi
 8018ed4:	238a      	movhi	r3, #138	; 0x8a
 8018ed6:	6003      	strhi	r3, [r0, #0]
 8018ed8:	700a      	strbls	r2, [r1, #0]
 8018eda:	f04f 30ff 	movhi.w	r0, #4294967295
 8018ede:	bf98      	it	ls
 8018ee0:	2001      	movls	r0, #1
 8018ee2:	4770      	bx	lr
 8018ee4:	4608      	mov	r0, r1
 8018ee6:	4770      	bx	lr

08018ee8 <_write_r>:
 8018ee8:	b538      	push	{r3, r4, r5, lr}
 8018eea:	4d07      	ldr	r5, [pc, #28]	; (8018f08 <_write_r+0x20>)
 8018eec:	4604      	mov	r4, r0
 8018eee:	4608      	mov	r0, r1
 8018ef0:	4611      	mov	r1, r2
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	602a      	str	r2, [r5, #0]
 8018ef6:	461a      	mov	r2, r3
 8018ef8:	f7e8 fff4 	bl	8001ee4 <_write>
 8018efc:	1c43      	adds	r3, r0, #1
 8018efe:	d102      	bne.n	8018f06 <_write_r+0x1e>
 8018f00:	682b      	ldr	r3, [r5, #0]
 8018f02:	b103      	cbz	r3, 8018f06 <_write_r+0x1e>
 8018f04:	6023      	str	r3, [r4, #0]
 8018f06:	bd38      	pop	{r3, r4, r5, pc}
 8018f08:	2400ec1c 	.word	0x2400ec1c

08018f0c <_close_r>:
 8018f0c:	b538      	push	{r3, r4, r5, lr}
 8018f0e:	4d06      	ldr	r5, [pc, #24]	; (8018f28 <_close_r+0x1c>)
 8018f10:	2300      	movs	r3, #0
 8018f12:	4604      	mov	r4, r0
 8018f14:	4608      	mov	r0, r1
 8018f16:	602b      	str	r3, [r5, #0]
 8018f18:	f7e9 f800 	bl	8001f1c <_close>
 8018f1c:	1c43      	adds	r3, r0, #1
 8018f1e:	d102      	bne.n	8018f26 <_close_r+0x1a>
 8018f20:	682b      	ldr	r3, [r5, #0]
 8018f22:	b103      	cbz	r3, 8018f26 <_close_r+0x1a>
 8018f24:	6023      	str	r3, [r4, #0]
 8018f26:	bd38      	pop	{r3, r4, r5, pc}
 8018f28:	2400ec1c 	.word	0x2400ec1c

08018f2c <_fstat_r>:
 8018f2c:	b538      	push	{r3, r4, r5, lr}
 8018f2e:	4d07      	ldr	r5, [pc, #28]	; (8018f4c <_fstat_r+0x20>)
 8018f30:	2300      	movs	r3, #0
 8018f32:	4604      	mov	r4, r0
 8018f34:	4608      	mov	r0, r1
 8018f36:	4611      	mov	r1, r2
 8018f38:	602b      	str	r3, [r5, #0]
 8018f3a:	f7e8 fffb 	bl	8001f34 <_fstat>
 8018f3e:	1c43      	adds	r3, r0, #1
 8018f40:	d102      	bne.n	8018f48 <_fstat_r+0x1c>
 8018f42:	682b      	ldr	r3, [r5, #0]
 8018f44:	b103      	cbz	r3, 8018f48 <_fstat_r+0x1c>
 8018f46:	6023      	str	r3, [r4, #0]
 8018f48:	bd38      	pop	{r3, r4, r5, pc}
 8018f4a:	bf00      	nop
 8018f4c:	2400ec1c 	.word	0x2400ec1c

08018f50 <_isatty_r>:
 8018f50:	b538      	push	{r3, r4, r5, lr}
 8018f52:	4d06      	ldr	r5, [pc, #24]	; (8018f6c <_isatty_r+0x1c>)
 8018f54:	2300      	movs	r3, #0
 8018f56:	4604      	mov	r4, r0
 8018f58:	4608      	mov	r0, r1
 8018f5a:	602b      	str	r3, [r5, #0]
 8018f5c:	f7e8 fffa 	bl	8001f54 <_isatty>
 8018f60:	1c43      	adds	r3, r0, #1
 8018f62:	d102      	bne.n	8018f6a <_isatty_r+0x1a>
 8018f64:	682b      	ldr	r3, [r5, #0]
 8018f66:	b103      	cbz	r3, 8018f6a <_isatty_r+0x1a>
 8018f68:	6023      	str	r3, [r4, #0]
 8018f6a:	bd38      	pop	{r3, r4, r5, pc}
 8018f6c:	2400ec1c 	.word	0x2400ec1c

08018f70 <_lseek_r>:
 8018f70:	b538      	push	{r3, r4, r5, lr}
 8018f72:	4d07      	ldr	r5, [pc, #28]	; (8018f90 <_lseek_r+0x20>)
 8018f74:	4604      	mov	r4, r0
 8018f76:	4608      	mov	r0, r1
 8018f78:	4611      	mov	r1, r2
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	602a      	str	r2, [r5, #0]
 8018f7e:	461a      	mov	r2, r3
 8018f80:	f7e8 fff3 	bl	8001f6a <_lseek>
 8018f84:	1c43      	adds	r3, r0, #1
 8018f86:	d102      	bne.n	8018f8e <_lseek_r+0x1e>
 8018f88:	682b      	ldr	r3, [r5, #0]
 8018f8a:	b103      	cbz	r3, 8018f8e <_lseek_r+0x1e>
 8018f8c:	6023      	str	r3, [r4, #0]
 8018f8e:	bd38      	pop	{r3, r4, r5, pc}
 8018f90:	2400ec1c 	.word	0x2400ec1c

08018f94 <_malloc_usable_size_r>:
 8018f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f98:	1f18      	subs	r0, r3, #4
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	bfbc      	itt	lt
 8018f9e:	580b      	ldrlt	r3, [r1, r0]
 8018fa0:	18c0      	addlt	r0, r0, r3
 8018fa2:	4770      	bx	lr

08018fa4 <_read_r>:
 8018fa4:	b538      	push	{r3, r4, r5, lr}
 8018fa6:	4d07      	ldr	r5, [pc, #28]	; (8018fc4 <_read_r+0x20>)
 8018fa8:	4604      	mov	r4, r0
 8018faa:	4608      	mov	r0, r1
 8018fac:	4611      	mov	r1, r2
 8018fae:	2200      	movs	r2, #0
 8018fb0:	602a      	str	r2, [r5, #0]
 8018fb2:	461a      	mov	r2, r3
 8018fb4:	f7e8 ff79 	bl	8001eaa <_read>
 8018fb8:	1c43      	adds	r3, r0, #1
 8018fba:	d102      	bne.n	8018fc2 <_read_r+0x1e>
 8018fbc:	682b      	ldr	r3, [r5, #0]
 8018fbe:	b103      	cbz	r3, 8018fc2 <_read_r+0x1e>
 8018fc0:	6023      	str	r3, [r4, #0]
 8018fc2:	bd38      	pop	{r3, r4, r5, pc}
 8018fc4:	2400ec1c 	.word	0x2400ec1c

08018fc8 <_init>:
 8018fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fca:	bf00      	nop
 8018fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fce:	bc08      	pop	{r3}
 8018fd0:	469e      	mov	lr, r3
 8018fd2:	4770      	bx	lr

08018fd4 <_fini>:
 8018fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fd6:	bf00      	nop
 8018fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fda:	bc08      	pop	{r3}
 8018fdc:	469e      	mov	lr, r3
 8018fde:	4770      	bx	lr
