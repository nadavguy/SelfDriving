
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cd4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ed8c  08010f78  08010f78  00020f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fd04  0801fd04  0003a35c  2**0
                  CONTENTS
  4 .ARM          00000008  0801fd04  0801fd04  0002fd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fd0c  0801fd0c  0003a35c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fd0c  0801fd0c  0002fd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fd10  0801fd10  0002fd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a29c  24000000  0801fd14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a29c  08029fb0  0003a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a2fc  0802a010  0003a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000804  2400a35c  0802a070  0003a35c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400ab60  0802a070  0003ab60  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  0802a070  00040000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0003a35c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00069b38  00000000  00000000  0003a38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009a8b  00000000  00000000  000a3ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025b0  00000000  00000000  000ad950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002260  00000000  00000000  000aff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004935d  00000000  00000000  000b2160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003f0c4  00000000  00000000  000fb4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00199e86  00000000  00000000  0013a581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  002d4407  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b08c  00000000  00000000  002d445c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a35c 	.word	0x2400a35c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010f5c 	.word	0x08010f5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a360 	.word	0x2400a360
 80002dc:	08010f5c 	.word	0x08010f5c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400a538 	.word	0x2400a538
 8000acc:	2400a378 	.word	0x2400a378
 8000ad0:	2400a580 	.word	0x2400a580

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f00b fcc9 	bl	800c470 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400a580 	.word	0x2400a580
 8000b00:	2400a53c 	.word	0x2400a53c
 8000b04:	2400a538 	.word	0x2400a538

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400a53c 	.word	0x2400a53c

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f00b fc78 	bl	800c434 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400a540 	.word	0x2400a540
 8000b60:	2400a53c 	.word	0x2400a53c

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00b fdb1 	bl	800c6e8 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400a534 	.word	0x2400a534
 8000b94:	2400a378 	.word	0x2400a378

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_ETH_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ETH_Init+0x90>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	22e1      	movs	r2, #225	; 0xe1
 8000cf0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_ETH_Init+0x98>)
 8000d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_ETH_Init+0x9c>)
 8000d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d2c:	f001 fbf0 	bl	8002510 <HAL_ETH_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fcde 	bl	80016f6 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3a:	2234      	movs	r2, #52	; 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d40:	f00b fcfa 	bl	800c738 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2400a42c 	.word	0x2400a42c
 8000d60:	40028000 	.word	0x40028000
 8000d64:	2400a2fc 	.word	0x2400a2fc
 8000d68:	2400a29c 	.word	0x2400a29c
 8000d6c:	2400a4b4 	.word	0x2400a4b4

08000d70 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <HAL_ETH_MspInit+0x184>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 80ab 	bne.w	8000eea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9a:	4a57      	ldr	r2, [pc, #348]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd6:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a40      	ldr	r2, [pc, #256]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_ETH_MspInit+0x18c>)
 8000e82:	f001 ff5b 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e86:	2386      	movs	r3, #134	; 0x86
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e96:	230b      	movs	r3, #11
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_ETH_MspInit+0x190>)
 8000ea2:	f001 ff4b 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <HAL_ETH_MspInit+0x194>)
 8000ec4:	f001 ff3a 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000ee6:	f001 ff29 	bl	8002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	; 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40028000 	.word	0x40028000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020800 	.word	0x58020800
 8000f00:	58020000 	.word	0x58020000
 8000f04:	58020400 	.word	0x58020400
 8000f08:	58021800 	.word	0x58021800

08000f0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b47      	ldr	r3, [pc, #284]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a42      	ldr	r2, [pc, #264]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a33      	ldr	r2, [pc, #204]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0x164>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <MX_GPIO_Init+0x168>)
 800101a:	f002 f83f 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001026:	f002 f839 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x168>)
 8001044:	f001 fe7a 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001048:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001062:	f001 fe6b 	bl	8002d3c <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58021400 	.word	0x58021400
 8001078:	58021800 	.word	0x58021800

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_I2C1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x7c>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001094:	2201      	movs	r2, #1
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b8:	f002 f864 	bl	8003184 <HAL_I2C_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010c2:	f000 fb18 	bl	80016f6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ca:	f002 f905 	bl	80032d8 <HAL_I2CEx_ConfigAnalogFilter>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d4:	f000 fb0f 	bl	80016f6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d8:	2100      	movs	r1, #0
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010dc:	f002 f947 	bl	800336e <HAL_I2CEx_ConfigDigitalFilter>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 fb06 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400a4e8 	.word	0x2400a4e8
 80010f4:	40005400 	.word	0x40005400
 80010f8:	00301242 	.word	0x00301242

080010fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b8      	sub	sp, #224	; 0xe0
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22bc      	movs	r2, #188	; 0xbc
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00b fb0b 	bl	800c738 <memset>
  if(i2cHandle->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d149      	bne.n	80011c0 <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800112c:	2308      	movs	r3, #8
 800112e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fab2 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001146:	f000 fad6 	bl	80016f6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL___ChassisMPU_Pin|I2C1_SDA___ChassisMPU_Pin;
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001180:	2304      	movs	r3, #4
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <HAL_I2C_MspInit+0xd4>)
 800118e:	f001 fdd5 	bl	8002d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 80011a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	201f      	movs	r0, #31
 80011b6:	f001 f8fa 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ba:	201f      	movs	r0, #31
 80011bc:	f001 f911 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37e0      	adds	r7, #224	; 0xe0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020400 	.word	0x58020400

080011d4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d101      	bne.n	80011ee <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <rpmsg_send+0x3c>)
 80011ec:	e00c      	b.n	8001208 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f6:	2301      	movs	r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f009 fb7d 	bl	800a900 <rpmsg_send_offchannel_raw>
 8001206:	4603      	mov	r3, r0
					 len, true);
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	fffff829 	.word	0xfffff829

08001214 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2220      	movs	r2, #32
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f00c fbe1 	bl	800d9f0 <strncpy>
	ept->addr = src;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	; 0x40
 8001254:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 8001256:	f000 fa27 	bl	80016a8 <MPU_Config>
	CPU_CACHE_Enable();
 800125a:	f000 f9b7 	bl	80015cc <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800125e:	e000      	b.n	8001262 <main+0x12>
	{
		asm("nop");
 8001260:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001262:	4b8a      	ldr	r3, [pc, #552]	; (800148c <main+0x23c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f8      	bne.n	8001260 <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 feed 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f925 	bl	80014c0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <main+0x23c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a83      	ldr	r2, [pc, #524]	; (800148c <main+0x23c>)
 800127e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b81      	ldr	r3, [pc, #516]	; (800148c <main+0x23c>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 ff1b 	bl	80030d0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f001 ff31 	bl	8003104 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f7ff fe33 	bl	8000f0c <MX_GPIO_Init>
  MX_ETH_Init();
 80012a6:	f7ff fd11 	bl	8000ccc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012aa:	f000 fd37 	bl	8001d1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012ae:	f000 fde7 	bl	8001e80 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012b2:	f7ff fee3 	bl	800107c <MX_I2C1_Init>
  MX_SPI3_Init();
 80012b6:	f000 fa23 	bl	8001700 <MX_SPI3_Init>
  MX_TIM1_Init();
 80012ba:	f000 fc41 	bl	8001b40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	MAILBOX_Init();
 80012be:	f00a ff01 	bl	800c0c4 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295
 80012d2:	496f      	ldr	r1, [pc, #444]	; (8001490 <main+0x240>)
 80012d4:	486f      	ldr	r0, [pc, #444]	; (8001494 <main+0x244>)
 80012d6:	f7ff ff9d 	bl	8001214 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80012da:	496f      	ldr	r1, [pc, #444]	; (8001498 <main+0x248>)
 80012dc:	2000      	movs	r0, #0
 80012de:	f00b f813 	bl	800c308 <MX_OPENAMP_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <main+0x9c>
	{
		Error_Handler();
 80012e8:	f000 fa05 	bl	80016f6 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 80012ec:	4869      	ldr	r0, [pc, #420]	; (8001494 <main+0x244>)
 80012ee:	f00b f8cb 	bl	800c488 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80012f2:	2204      	movs	r2, #4
 80012f4:	4969      	ldr	r1, [pc, #420]	; (800149c <main+0x24c>)
 80012f6:	4867      	ldr	r0, [pc, #412]	; (8001494 <main+0x244>)
 80012f8:	f7ff ff6c 	bl	80011d4 <rpmsg_send>
 80012fc:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (status < 0)
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	da01      	bge.n	8001308 <main+0xb8>
	{
		Error_Handler();
 8001304:	f000 f9f7 	bl	80016f6 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (message < 100)
 800130e:	e025      	b.n	800135c <main+0x10c>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 8001310:	f7ff fbe0 	bl	8000ad4 <receive_message>
 8001314:	4603      	mov	r3, r0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		char localT[32] = "";
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%d",message);
 8001334:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001338:	1d38      	adds	r0, r7, #4
 800133a:	4a59      	ldr	r2, [pc, #356]	; (80014a0 <main+0x250>)
 800133c:	2120      	movs	r1, #32
 800133e:	f00c faf1 	bl	800d924 <sniprintf>
//		ssd1306_SetCursor(0, 0);
//		ssd1306_WriteString(localT, Font_7x10, White);
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001342:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	4852      	ldr	r0, [pc, #328]	; (8001494 <main+0x244>)
 800134c:	f7ff ff42 	bl	80011d4 <rpmsg_send>
 8001350:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status < 0)
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	da01      	bge.n	800135c <main+0x10c>
		{
			Error_Handler();
 8001358:	f000 f9cd 	bl	80016f6 <Error_Handler>
	while (message < 100)
 800135c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001360:	2b63      	cmp	r3, #99	; 0x63
 8001362:	d9d5      	bls.n	8001310 <main+0xc0>
		}
	}

//	isPortrait = true;
	  screenInit();
 8001364:	f00a fcd4 	bl	800bd10 <screenInit>
	  screenClear();
 8001368:	f00a fda2 	bl	800beb0 <screenClear>
	renderCompleteFrame = true;
 800136c:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <main+0x254>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 8001372:	f7ff fbaf 	bl	8000ad4 <receive_message>
 8001376:	4603      	mov	r3, r0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		char localT[32] = "Test";
 800137e:	4a4a      	ldr	r2, [pc, #296]	; (80014a8 <main+0x258>)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001386:	6018      	str	r0, [r3, #0]
 8001388:	3304      	adds	r3, #4
 800138a:	7019      	strb	r1, [r3, #0]
 800138c:	f107 0309 	add.w	r3, r7, #9
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	f8c3 2017 	str.w	r2, [r3, #23]
//		snprintf(localT,sizeof(localT),"%03d",message);
		createEmptyFrame(false);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f00b f8d2 	bl	800c54c <createEmptyFrame>
//		centeredString(64, 50, (char *)localT, BLACK, WHITE, 32, Font12);
		snprintf(localT,sizeof(localT),"R: %3.3f", receivedAnglesData->bodyAngles.Roll);
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <main+0x25c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80013b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	ed8d 7b00 	vstr	d7, [sp]
 80013ba:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <main+0x260>)
 80013bc:	2120      	movs	r1, #32
 80013be:	4618      	mov	r0, r3
 80013c0:	f00c fab0 	bl	800d924 <sniprintf>
		//			createEmptyFrame(false);
		centeredString(64, 50, (char *)localT, BLACK, WHITE, 16, Font12);
 80013c4:	1d3a      	adds	r2, r7, #4
 80013c6:	493b      	ldr	r1, [pc, #236]	; (80014b4 <main+0x264>)
 80013c8:	ab02      	add	r3, sp, #8
 80013ca:	c903      	ldmia	r1, {r0, r1}
 80013cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80013d0:	2310      	movs	r3, #16
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2132      	movs	r1, #50	; 0x32
 80013de:	2040      	movs	r0, #64	; 0x40
 80013e0:	f00a fd8a 	bl	800bef8 <centeredString>
		//			createEmptyFrame(false);
		memset(localT,0,32);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2220      	movs	r2, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00b f9a4 	bl	800c738 <memset>
		snprintf(localT,sizeof(localT),"P: %3.3f", receivedAnglesData->bodyAngles.Pitch);
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <main+0x25c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	ed8d 7b00 	vstr	d7, [sp]
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <main+0x268>)
 8001404:	2120      	movs	r1, #32
 8001406:	4618      	mov	r0, r3
 8001408:	f00c fa8c 	bl	800d924 <sniprintf>
		centeredString(64, 64, (char *)localT, BLACK, WHITE, 16, Font12);
 800140c:	1d3a      	adds	r2, r7, #4
 800140e:	4929      	ldr	r1, [pc, #164]	; (80014b4 <main+0x264>)
 8001410:	ab02      	add	r3, sp, #8
 8001412:	c903      	ldmia	r1, {r0, r1}
 8001414:	e883 0003 	stmia.w	r3, {r0, r1}
 8001418:	2310      	movs	r3, #16
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2040      	movs	r0, #64	; 0x40
 8001428:	f00a fd66 	bl	800bef8 <centeredString>
		//			createEmptyFrame(false);
		memset(localT,0,32);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2220      	movs	r2, #32
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f00b f980 	bl	800c738 <memset>
		snprintf(localT,sizeof(localT),"Y: %3.3f", receivedAnglesData->bodyAngles.Yaw);
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <main+0x25c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001440:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	ed8d 7b00 	vstr	d7, [sp]
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <main+0x26c>)
 800144c:	2120      	movs	r1, #32
 800144e:	4618      	mov	r0, r3
 8001450:	f00c fa68 	bl	800d924 <sniprintf>
		centeredString(64, 76, (char *)localT, BLACK, WHITE, 16, Font12);
 8001454:	1d3a      	adds	r2, r7, #4
 8001456:	4917      	ldr	r1, [pc, #92]	; (80014b4 <main+0x264>)
 8001458:	ab02      	add	r3, sp, #8
 800145a:	c903      	ldmia	r1, {r0, r1}
 800145c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001460:	2310      	movs	r3, #16
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	214c      	movs	r1, #76	; 0x4c
 800146e:	2040      	movs	r0, #64	; 0x40
 8001470:	f00a fd42 	bl	800bef8 <centeredString>
		memset(localT,0,32);
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2220      	movs	r2, #32
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00b f95c 	bl	800c738 <memset>
		updateNextFrame();
 8001480:	f00b f8a6 	bl	800c5d0 <updateNextFrame>
		message = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	{
 800148a:	e772      	b.n	8001372 <main+0x122>
 800148c:	58024400 	.word	0x58024400
 8001490:	08010f78 	.word	0x08010f78
 8001494:	2400a540 	.word	0x2400a540
 8001498:	08000b29 	.word	0x08000b29
 800149c:	2400a37c 	.word	0x2400a37c
 80014a0:	08010f90 	.word	0x08010f90
 80014a4:	2400a386 	.word	0x2400a386
 80014a8:	08010fb8 	.word	0x08010fb8
 80014ac:	2400a534 	.word	0x2400a534
 80014b0:	08010f94 	.word	0x08010f94
 80014b4:	24000010 	.word	0x24000010
 80014b8:	08010fa0 	.word	0x08010fa0
 80014bc:	08010fac 	.word	0x08010fac

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09c      	sub	sp, #112	; 0x70
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	224c      	movs	r2, #76	; 0x4c
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00b f932 	bl	800c738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2220      	movs	r2, #32
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f00b f92c 	bl	800c738 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014e0:	2004      	movs	r0, #4
 80014e2:	f002 f8d9 	bl	8003698 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <SystemClock_Config+0x100>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <SystemClock_Config+0x100>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014f6:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <SystemClock_Config+0x100>)
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <SystemClock_Config+0x104>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001508:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <SystemClock_Config+0x104>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <SystemClock_Config+0x104>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800151c:	bf00      	nop
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <SystemClock_Config+0x104>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152a:	d1f8      	bne.n	800151e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <SystemClock_Config+0x108>)
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f023 0303 	bic.w	r3, r3, #3
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <SystemClock_Config+0x108>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001540:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	2302      	movs	r3, #2
 800154c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001552:	2312      	movs	r3, #18
 8001554:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800155e:	2302      	movs	r3, #2
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001562:	230c      	movs	r3, #12
 8001564:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001566:	2302      	movs	r3, #2
 8001568:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800156a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800156e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	4618      	mov	r0, r3
 8001576:	f002 f8f9 	bl	800376c <HAL_RCC_OscConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001580:	f000 f8b9 	bl	80016f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001584:	233f      	movs	r3, #63	; 0x3f
 8001586:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001588:	2303      	movs	r3, #3
 800158a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2101      	movs	r1, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fcef 	bl	8003f8c <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80015b4:	f000 f89f 	bl	80016f6 <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3770      	adds	r7, #112	; 0x70
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	58000400 	.word	0x58000400
 80015c4:	58024800 	.word	0x58024800
 80015c8:	58024400 	.word	0x58024400

080015cc <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11b      	bne.n	8001616 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015de:	f3bf 8f4f 	dsb	sy
}
 80015e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e4:	f3bf 8f6f 	isb	sy
}
 80015e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015ea:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015f2:	f3bf 8f4f 	dsb	sy
}
 80015f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f8:	f3bf 8f6f 	isb	sy
}
 80015fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800160a:	f3bf 8f4f 	dsb	sy
}
 800160e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001610:	f3bf 8f6f 	isb	sy
}
 8001614:	e000      	b.n	8001618 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001616:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d138      	bne.n	8001696 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 8001626:	2200      	movs	r2, #0
 8001628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800162c:	f3bf 8f4f 	dsb	sy
}
 8001630:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 8001634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001638:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	0b5b      	lsrs	r3, r3, #13
 800163e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001642:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800164c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001656:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800165c:	4911      	ldr	r1, [pc, #68]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 800165e:	4313      	orrs	r3, r2
 8001660:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	60ba      	str	r2, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e5      	bne.n	8001644 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001678:	f3bf 8f4f 	dsb	sy
}
 800167c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <CPU_CACHE_Enable+0xd8>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800168a:	f3bf 8f4f 	dsb	sy
}
 800168e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001690:	f3bf 8f6f 	isb	sy
}
 8001694:	e000      	b.n	8001698 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001696:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 80016ae:	f000 feb3 	bl	8002418 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 80016b6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80016ba:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80016bc:	230f      	movs	r3, #15
 80016be:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80016c0:	2303      	movs	r3, #3
 80016c2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80016d8:	2300      	movs	r3, #0
 80016da:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016e0:	463b      	mov	r3, r7
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fed0 	bl	8002488 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016e8:	2004      	movs	r0, #4
 80016ea:	f000 fead 	bl	8002448 <HAL_MPU_Enable>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016fa:	b672      	cpsid	i
}
 80016fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016fe:	e7fe      	b.n	80016fe <Error_Handler+0x8>

08001700 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001706:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800171a:	2207      	movs	r2, #7
 800171c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800172c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001730:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001734:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001738:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SPI3_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_SPI3_Init+0xa4>)
 8001792:	f004 fae9 	bl	8005d68 <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800179c:	f7ff ffab 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2400a594 	.word	0x2400a594
 80017a8:	40003c00 	.word	0x40003c00

080017ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0ba      	sub	sp, #232	; 0xe8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	22bc      	movs	r2, #188	; 0xbc
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00a ffb3 	bl	800c738 <memset>
  if(spiHandle->Instance==SPI3)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d166      	bne.n	80018aa <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 ff5a 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80017f6:	f7ff ff7e 	bl	80016f6 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 80017fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 800180c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001854:	2304      	movs	r3, #4
 8001856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800186c:	2307      	movs	r3, #7
 800186e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001876:	4619      	mov	r1, r3
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <HAL_SPI_MspInit+0x110>)
 800187a:	f001 fa5f 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800187e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001898:	2306      	movs	r3, #6
 800189a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_SPI_MspInit+0x114>)
 80018a6:	f001 fa49 	bl	8002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	37e8      	adds	r7, #232	; 0xe8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40003c00 	.word	0x40003c00
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020400 	.word	0x58020400
 80018c0:	58020800 	.word	0x58020800

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_MspInit+0x5c>)
 80018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <HAL_MspInit+0x5c>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_MspInit+0x5c>)
 80018dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2104      	movs	r1, #4
 80018ec:	2041      	movs	r0, #65	; 0x41
 80018ee:	f000 fd5e 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80018f2:	2041      	movs	r0, #65	; 0x41
 80018f4:	f000 fd75 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2104      	movs	r1, #4
 80018fc:	207d      	movs	r0, #125	; 0x7d
 80018fe:	f000 fd56 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001902:	207d      	movs	r0, #125	; 0x7d
 8001904:	f000 fd6d 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2104      	movs	r1, #4
 800190c:	2094      	movs	r0, #148	; 0x94
 800190e:	f000 fd4e 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8001912:	2094      	movs	r0, #148	; 0x94
 8001914:	f000 fd65 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	58024400 	.word	0x58024400

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 fbde 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <I2C1_EV_IRQHandler+0x10>)
 800197e:	f001 fc91 	bl	80032a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2400a4e8 	.word	0x2400a4e8

0800198c <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800199e:	f001 fbd7 	bl	8003150 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_kill>:

int _kill(int pid, int sig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ce:	f00a fe3f 	bl	800c650 <__errno>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2216      	movs	r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
	return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_exit>:

void _exit (int status)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffe7 	bl	80019c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019f6:	e7fe      	b.n	80019f6 <_exit+0x12>

080019f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e00a      	b.n	8001a20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a0a:	f3af 8000 	nop.w
 8001a0e:	4601      	mov	r1, r0
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	b2ca      	uxtb	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf0      	blt.n	8001a0a <_read+0x12>
	}

return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e009      	b.n	8001a58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbf1      	blt.n	8001a44 <_write+0x12>
	}
	return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_close>:

int _close(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a92:	605a      	str	r2, [r3, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_isatty>:

int _isatty(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
	return 1;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f00a fda4 	bl	800c650 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	24040000 	.word	0x24040000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	2400a380 	.word	0x2400a380
 8001b3c:	2400ab60 	.word	0x2400ab60

08001b40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b096      	sub	sp, #88	; 0x58
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	222c      	movs	r2, #44	; 0x2c
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00a fde3 	bl	800c738 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b74:	4a39      	ldr	r2, [pc, #228]	; (8001c5c <MX_TIM1_Init+0x11c>)
 8001b76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b7a:	224b      	movs	r2, #75	; 0x4b
 8001b7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b84:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b9e:	482e      	ldr	r0, [pc, #184]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001ba0:	f004 fcbf 	bl	8006522 <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001baa:	f7ff fda4 	bl	80016f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4825      	ldr	r0, [pc, #148]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001bc2:	f005 faab 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bcc:	f7ff fd93 	bl	80016f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd0:	2360      	movs	r3, #96	; 0x60
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bde:	2300      	movs	r3, #0
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4818      	ldr	r0, [pc, #96]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001bf8:	f004 fdf2 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c02:	f7ff fd78 	bl	80016f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001c3c:	f005 faf6 	bl	800722c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001c46:	f7ff fd56 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM1_Init+0x118>)
 8001c4c:	f000 f82a 	bl	8001ca4 <HAL_TIM_MspPostInit>

}
 8001c50:	bf00      	nop
 8001c52:	3758      	adds	r7, #88	; 0x58
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2400a61c 	.word	0x2400a61c
 8001c5c:	40010000 	.word	0x40010000

08001c60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x40>)
 8001c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x40>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x40>)
 8001c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <HAL_TIM_MspPostInit+0x6c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11f      	bne.n	8001d06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_TIM_MspPostInit+0x70>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_TIM_MspPostInit+0x70>)
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_TIM_MspPostInit+0x70>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin;
 8001ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_CH1___LCD_Brightness_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_TIM_MspPostInit+0x74>)
 8001d02:	f001 f81b 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d06:	bf00      	nop
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	58024400 	.word	0x58024400
 8001d18:	58021000 	.word	0x58021000

08001d1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <MX_USART3_UART_Init+0x94>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d66:	f005 fadf 	bl	8007328 <HAL_UART_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d70:	f7ff fcc1 	bl	80016f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d74:	2100      	movs	r1, #0
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d78:	f006 fa2c 	bl	80081d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d82:	f7ff fcb8 	bl	80016f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d86:	2100      	movs	r1, #0
 8001d88:	4808      	ldr	r0, [pc, #32]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d8a:	f006 fa61 	bl	8008250 <HAL_UARTEx_SetRxFifoThreshold>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d94:	f7ff fcaf 	bl	80016f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_USART3_UART_Init+0x90>)
 8001d9a:	f006 f9e2 	bl	8008162 <HAL_UARTEx_DisableFifoMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f7ff fca7 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2400a668 	.word	0x2400a668
 8001db0:	40004800 	.word	0x40004800

08001db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0b8      	sub	sp, #224	; 0xe0
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	22bc      	movs	r2, #188	; 0xbc
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00a fcaf 	bl	800c738 <memset>
  if(uartHandle->Instance==USART3)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_UART_MspInit+0xc0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d142      	bne.n	8001e6a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fc56 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dfe:	f7ff fc7a 	bl	80016f6 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_UART_MspInit+0xc4>)
 8001e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_UART_MspInit+0xc4>)
 8001e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_UART_MspInit+0xc4>)
 8001e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_UART_MspInit+0xc4>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_UART_MspInit+0xc4>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_UART_MspInit+0xc4>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_UART_MspInit+0xc8>)
 8001e66:	f000 ff69 	bl	8002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	37e0      	adds	r7, #224	; 0xe0
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40004800 	.word	0x40004800
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58020c00 	.word	0x58020c00

08001e80 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e8c:	2209      	movs	r2, #9
 8001e8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec8:	f001 fa9d 	bl	8003406 <HAL_PCD_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001ed2:	f7ff fc10 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2400a6f8 	.word	0x2400a6f8
 8001ee0:	40080000 	.word	0x40080000

08001ee4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0b8      	sub	sp, #224	; 0xe0
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	22bc      	movs	r2, #188	; 0xbc
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00a fc17 	bl	800c738 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a37      	ldr	r2, [pc, #220]	; (8001fec <HAL_PCD_MspInit+0x108>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d166      	bne.n	8001fe2 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f22:	2302      	movs	r3, #2
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001f26:	2303      	movs	r3, #3
 8001f28:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001f2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f32:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001f34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f38:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001f3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 fbac 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001f52:	f7ff fbd0 	bl	80016f6 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f56:	f001 fbf9 	bl	800374c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_PCD_MspInit+0x10c>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_PCD_MspInit+0x10c>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_PCD_MspInit+0x10c>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f78:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f92:	230a      	movs	r3, #10
 8001f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4815      	ldr	r0, [pc, #84]	; (8001ff4 <HAL_PCD_MspInit+0x110>)
 8001fa0:	f000 fecc 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <HAL_PCD_MspInit+0x110>)
 8001fc0:	f000 febc 	bl	8002d3c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_PCD_MspInit+0x10c>)
 8001fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_PCD_MspInit+0x10c>)
 8001fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_PCD_MspInit+0x10c>)
 8001fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	37e0      	adds	r7, #224	; 0xe0
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40080000 	.word	0x40080000
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	58020000 	.word	0x58020000

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ffc:	f7fe fdcc 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002002:	490d      	ldr	r1, [pc, #52]	; (8002038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002018:	4c0a      	ldr	r4, [pc, #40]	; (8002044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f00a fb2b 	bl	800c680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7ff f911 	bl	8001250 <main>
  bx  lr
 800202e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002030:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8002034:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002038:	2400a29c 	.word	0x2400a29c
  ldr r2, =_sidata
 800203c:	0801fd14 	.word	0x0801fd14
  ldr r2, =_sbss
 8002040:	2400a35c 	.word	0x2400a35c
  ldr r4, =_ebss
 8002044:	2400ab60 	.word	0x2400ab60

08002048 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC3_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002052:	2003      	movs	r0, #3
 8002054:	f000 f9a0 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002058:	f002 f94e 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_Init+0x68>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	4913      	ldr	r1, [pc, #76]	; (80020b8 <HAL_Init+0x6c>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_Init+0x68>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_Init+0x6c>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_Init+0x70>)
 800208e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_Init+0x74>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f814 	bl	80020c4 <HAL_InitTick>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e002      	b.n	80020ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020a6:	f7ff fc0d 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	58024400 	.word	0x58024400
 80020b8:	080114b8 	.word	0x080114b8
 80020bc:	24000004 	.word	0x24000004
 80020c0:	24000000 	.word	0x24000000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_InitTick+0x60>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e021      	b.n	800211c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_InitTick+0x64>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_InitTick+0x60>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f985 	bl	80023fe <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 f94f 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x68>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2400000c 	.word	0x2400000c
 8002128:	24000000 	.word	0x24000000
 800212c:	24000008 	.word	0x24000008

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	2400000c 	.word	0x2400000c
 8002154:	2400ab00 	.word	0x2400ab00

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2400ab00 	.word	0x2400ab00

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2400000c 	.word	0x2400000c

080021b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetREVID+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0c1b      	lsrs	r3, r3, #16
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	5c001000 	.word	0x5c001000

080021d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58000400 	.word	0x58000400

080021f8 <__NVIC_SetPriorityGrouping>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <__NVIC_SetPriorityGrouping+0x40>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	4313      	orrs	r3, r2
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x40>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	05fa0000 	.word	0x05fa0000

08002240 <__NVIC_GetPriorityGrouping>:
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff40 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff90 	bl	80022ec <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5f 	bl	8002298 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff33 	bl	800225c <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa4 	bl	8002354 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800241c:	f3bf 8f5f 	dmb	sy
}
 8002420:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_MPU_Disable+0x28>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_MPU_Disable+0x28>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_MPU_Disable+0x2c>)
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00
 8002444:	e000ed90 	.word	0xe000ed90

08002448 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002450:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <HAL_MPU_Enable+0x38>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_MPU_Enable+0x3c>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_MPU_Enable+0x3c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002466:	f3bf 8f4f 	dsb	sy
}
 800246a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800246c:	f3bf 8f6f 	isb	sy
}
 8002470:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed90 	.word	0xe000ed90
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	785a      	ldrb	r2, [r3, #1]
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_MPU_ConfigRegion+0x84>)
 8002496:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d029      	beq.n	80024f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_MPU_ConfigRegion+0x84>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7b1b      	ldrb	r3, [r3, #12]
 80024ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7adb      	ldrb	r3, [r3, #11]
 80024b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7a9b      	ldrb	r3, [r3, #10]
 80024ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7b5b      	ldrb	r3, [r3, #13]
 80024c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7b9b      	ldrb	r3, [r3, #14]
 80024ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7bdb      	ldrb	r3, [r3, #15]
 80024d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7a5b      	ldrb	r3, [r3, #9]
 80024da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7a1b      	ldrb	r3, [r3, #8]
 80024e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024f2:	e005      	b.n	8002500 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_MPU_ConfigRegion+0x84>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_MPU_ConfigRegion+0x84>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed90 	.word	0xe000ed90

08002510 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0c6      	b.n	80026b0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fc20 	bl	8000d70 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2223      	movs	r2, #35	; 0x23
 8002534:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <HAL_ETH_Init+0x1a8>)
 8002538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800253c:	4a5e      	ldr	r2, [pc, #376]	; (80026b8 <HAL_ETH_Init+0x1a8>)
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <HAL_ETH_Init+0x1a8>)
 8002548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7a1b      	ldrb	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fe37 	bl	80021d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8002562:	e003      	b.n	800256c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002564:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002568:	f7ff fe32 	bl	80021d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002584:	f7ff fde8 	bl	8002158 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800258a:	e00f      	b.n	80025ac <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800258c:	f7ff fde4 	bl	8002158 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800259a:	d907      	bls.n	80025ac <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2204      	movs	r2, #4
 80025a0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	22e0      	movs	r2, #224	; 0xe0
 80025a6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e081      	b.n	80026b0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e6      	bne.n	800258c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fac0 	bl	8002b44 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80025c4:	f002 f812 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <HAL_ETH_Init+0x1ac>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9a      	lsrs	r2, r3, #18
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3a01      	subs	r2, #1
 80025d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa13 	bl	8002a08 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80025f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80025fc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	22e0      	movs	r2, #224	; 0xe0
 8002614:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e04a      	b.n	80026b0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002622:	4413      	add	r3, r2
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_ETH_Init+0x1b0>)
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6952      	ldr	r2, [r2, #20]
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6809      	ldr	r1, [r1, #0]
 8002634:	431a      	orrs	r2, r3
 8002636:	f241 1308 	movw	r3, #4360	; 0x1108
 800263a:	440b      	add	r3, r1
 800263c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fad8 	bl	8002bf4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fb1c 	bl	8002c82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	3305      	adds	r3, #5
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	021a      	lsls	r2, r3, #8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	3303      	adds	r3, #3
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	061a      	lsls	r2, r3, #24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	3302      	adds	r3, #2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002688:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002696:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002698:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2210      	movs	r2, #16
 80026a6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2210      	movs	r2, #16
 80026ac:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	ffff8001 	.word	0xffff8001

080026c4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80026d6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	791b      	ldrb	r3, [r3, #4]
 80026dc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80026de:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	7b1b      	ldrb	r3, [r3, #12]
 80026e4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80026e6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	7b5b      	ldrb	r3, [r3, #13]
 80026ec:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026ee:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7b9b      	ldrb	r3, [r3, #14]
 80026f4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80026f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	7bdb      	ldrb	r3, [r3, #15]
 80026fc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026fe:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	7c12      	ldrb	r2, [r2, #16]
 8002704:	2a00      	cmp	r2, #0
 8002706:	d102      	bne.n	800270e <ETH_SetMACConfig+0x4a>
 8002708:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800270c:	e000      	b.n	8002710 <ETH_SetMACConfig+0x4c>
 800270e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002710:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	7c52      	ldrb	r2, [r2, #17]
 8002716:	2a00      	cmp	r2, #0
 8002718:	d102      	bne.n	8002720 <ETH_SetMACConfig+0x5c>
 800271a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800271e:	e000      	b.n	8002722 <ETH_SetMACConfig+0x5e>
 8002720:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002722:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	7c9b      	ldrb	r3, [r3, #18]
 8002728:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800272a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002730:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002736:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800273e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	7f5b      	ldrb	r3, [r3, #29]
 8002744:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002746:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	7f92      	ldrb	r2, [r2, #30]
 800274c:	2a00      	cmp	r2, #0
 800274e:	d102      	bne.n	8002756 <ETH_SetMACConfig+0x92>
 8002750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002754:	e000      	b.n	8002758 <ETH_SetMACConfig+0x94>
 8002756:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002758:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7fdb      	ldrb	r3, [r3, #31]
 800275e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002760:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002768:	2a00      	cmp	r2, #0
 800276a:	d102      	bne.n	8002772 <ETH_SetMACConfig+0xae>
 800276c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0xb0>
 8002772:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002774:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800277a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002782:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002784:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <ETH_SetMACConfig+0x22c>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	430b      	orrs	r3, r1
 80027a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80027b0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80027ba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80027c2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80027c4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80027cc:	2a00      	cmp	r2, #0
 80027ce:	d102      	bne.n	80027d6 <ETH_SetMACConfig+0x112>
 80027d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027d4:	e000      	b.n	80027d8 <ETH_SetMACConfig+0x114>
 80027d6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80027d8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <ETH_SetMACConfig+0x230>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <ETH_SetMACConfig+0x234>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	430b      	orrs	r3, r1
 8002818:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002820:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002826:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800282e:	2a00      	cmp	r2, #0
 8002830:	d101      	bne.n	8002836 <ETH_SetMACConfig+0x172>
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	e000      	b.n	8002838 <ETH_SetMACConfig+0x174>
 8002836:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002838:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800284a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	430b      	orrs	r3, r1
 8002858:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002860:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002868:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f023 0103 	bic.w	r1, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	430a      	orrs	r2, r1
 8002882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800288e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80028aa:	2a00      	cmp	r2, #0
 80028ac:	d101      	bne.n	80028b2 <ETH_SetMACConfig+0x1ee>
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	e000      	b.n	80028b4 <ETH_SetMACConfig+0x1f0>
 80028b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80028b4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80028bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028be:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80028c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	430a      	orrs	r2, r1
 80028e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	00048083 	.word	0x00048083
 80028f4:	c0f88000 	.word	0xc0f88000
 80028f8:	fffffef0 	.word	0xfffffef0

080028fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <ETH_SetDMAConfig+0xf8>)
 8002912:	4013      	ands	r3, r2
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	431a      	orrs	r2, r3
 800291e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002922:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	791b      	ldrb	r3, [r3, #4]
 8002928:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800292e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	7b1b      	ldrb	r3, [r3, #12]
 8002934:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002942:	4413      	add	r3, r2
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <ETH_SetDMAConfig+0xfc>)
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6811      	ldr	r1, [r2, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	f241 0304 	movw	r3, #4100	; 0x1004
 8002956:	440b      	add	r3, r1
 8002958:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7b5b      	ldrb	r3, [r3, #13]
 800295e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <ETH_SetDMAConfig+0x100>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6811      	ldr	r1, [r2, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	431a      	orrs	r2, r3
 800297e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002982:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7d1b      	ldrb	r3, [r3, #20]
 800298c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800298e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	7f5b      	ldrb	r3, [r3, #29]
 8002994:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f241 1304 	movw	r3, #4356	; 0x1104
 80029a2:	4413      	add	r3, r2
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <ETH_SetDMAConfig+0x104>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6811      	ldr	r1, [r2, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80029b6:	440b      	add	r3, r1
 80029b8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	7f1b      	ldrb	r3, [r3, #28]
 80029be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80029d0:	4413      	add	r3, r2
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <ETH_SetDMAConfig+0x108>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6811      	ldr	r1, [r2, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	431a      	orrs	r2, r3
 80029e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80029e4:	440b      	add	r3, r1
 80029e6:	601a      	str	r2, [r3, #0]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	ffff87fd 	.word	0xffff87fd
 80029f8:	ffff2ffe 	.word	0xffff2ffe
 80029fc:	fffec000 	.word	0xfffec000
 8002a00:	ffc0efef 	.word	0xffc0efef
 8002a04:	7fc0ffff 	.word	0x7fc0ffff

08002a08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0a4      	sub	sp, #144	; 0x90
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a16:	2300      	movs	r3, #0
 8002a18:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002a60:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002a64:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a82:	2300      	movs	r3, #0
 8002a84:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002ab2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002abc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fde6 	bl	80026c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002afc:	2301      	movs	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002b28:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff fee1 	bl	80028fc <ETH_SetDMAConfig>
}
 8002b3a:	bf00      	nop
 8002b3c:	3790      	adds	r7, #144	; 0x90
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b5e:	f001 fd45 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8002b62:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d908      	bls.n	8002b7e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d804      	bhi.n	8002b7e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e027      	b.n	8002bce <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d908      	bls.n	8002b98 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d204      	bcs.n	8002b98 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e01a      	b.n	8002bce <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d303      	bcc.n	8002ba8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4a12      	ldr	r2, [pc, #72]	; (8002bec <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d911      	bls.n	8002bcc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d908      	bls.n	8002bc2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4a0f      	ldr	r2, [pc, #60]	; (8002bf0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d804      	bhi.n	8002bc2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e005      	b.n	8002bce <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e000      	b.n	8002bce <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002bcc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	01312cff 	.word	0x01312cff
 8002be4:	02160ebf 	.word	0x02160ebf
 8002be8:	03938700 	.word	0x03938700
 8002bec:	05f5e0ff 	.word	0x05f5e0ff
 8002bf0:	08f0d17f 	.word	0x08f0d17f

08002bf4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e01d      	b.n	8002c3e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	3206      	adds	r2, #6
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d9de      	bls.n	8002c02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f241 132c 	movw	r3, #4396	; 0x112c
 8002c52:	4413      	add	r3, r2
 8002c54:	2203      	movs	r2, #3
 8002c56:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68d9      	ldr	r1, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f241 1314 	movw	r3, #4372	; 0x1114
 8002c64:	4413      	add	r3, r2
 8002c66:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002c74:	601a      	str	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e024      	b.n	8002cda <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6919      	ldr	r1, [r3, #16]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3310      	adds	r3, #16
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d9d7      	bls.n	8002c90 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	f241 1330 	movw	r3, #4400	; 0x1130
 8002d06:	4413      	add	r3, r2
 8002d08:	2203      	movs	r2, #3
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6919      	ldr	r1, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	f241 131c 	movw	r3, #4380	; 0x111c
 8002d18:	4413      	add	r3, r2
 8002d1a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	f241 1328 	movw	r3, #4392	; 0x1128
 8002d2c:	4413      	add	r3, r2
 8002d2e:	6019      	str	r1, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d4a:	4b89      	ldr	r3, [pc, #548]	; (8002f70 <HAL_GPIO_Init+0x234>)
 8002d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d4e:	e194      	b.n	800307a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8186 	beq.w	8003074 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d00b      	beq.n	8002d88 <HAL_GPIO_Init+0x4c>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d7c:	2b11      	cmp	r3, #17
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d130      	bne.n	8002dea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0201 	and.w	r2, r3, #1
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0xee>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b12      	cmp	r3, #18
 8002e28:	d123      	bne.n	8002e72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	69b9      	ldr	r1, [r7, #24]
 8002e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0203 	and.w	r2, r3, #3
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80e0 	beq.w	8003074 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <HAL_GPIO_Init+0x238>)
 8002eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eba:	4a2e      	ldr	r2, [pc, #184]	; (8002f74 <HAL_GPIO_Init+0x238>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_GPIO_Init+0x238>)
 8002ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <HAL_GPIO_Init+0x23c>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <HAL_GPIO_Init+0x240>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d052      	beq.n	8002fa4 <HAL_GPIO_Init+0x268>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_GPIO_Init+0x244>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d031      	beq.n	8002f6a <HAL_GPIO_Init+0x22e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_GPIO_Init+0x248>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02b      	beq.n	8002f66 <HAL_GPIO_Init+0x22a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_GPIO_Init+0x24c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d025      	beq.n	8002f62 <HAL_GPIO_Init+0x226>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_GPIO_Init+0x250>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01f      	beq.n	8002f5e <HAL_GPIO_Init+0x222>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_GPIO_Init+0x254>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d019      	beq.n	8002f5a <HAL_GPIO_Init+0x21e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_GPIO_Init+0x258>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_GPIO_Init+0x25c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00d      	beq.n	8002f52 <HAL_GPIO_Init+0x216>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_GPIO_Init+0x260>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <HAL_GPIO_Init+0x212>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_GPIO_Init+0x264>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_GPIO_Init+0x20e>
 8002f46:	2309      	movs	r3, #9
 8002f48:	e02d      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f4a:	230a      	movs	r3, #10
 8002f4c:	e02b      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	e029      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e027      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f56:	2306      	movs	r3, #6
 8002f58:	e025      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f5a:	2305      	movs	r3, #5
 8002f5c:	e023      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e021      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f62:	2303      	movs	r3, #3
 8002f64:	e01f      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e01d      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01b      	b.n	8002fa6 <HAL_GPIO_Init+0x26a>
 8002f6e:	bf00      	nop
 8002f70:	58000080 	.word	0x58000080
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58000400 	.word	0x58000400
 8002f7c:	58020000 	.word	0x58020000
 8002f80:	58020400 	.word	0x58020400
 8002f84:	58020800 	.word	0x58020800
 8002f88:	58020c00 	.word	0x58020c00
 8002f8c:	58021000 	.word	0x58021000
 8002f90:	58021400 	.word	0x58021400
 8002f94:	58021800 	.word	0x58021800
 8002f98:	58021c00 	.word	0x58021c00
 8002f9c:	58022000 	.word	0x58022000
 8002fa0:	58022400 	.word	0x58022400
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	f002 0203 	and.w	r2, r2, #3
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	4093      	lsls	r3, r2
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb6:	4938      	ldr	r1, [pc, #224]	; (8003098 <HAL_GPIO_Init+0x35c>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800303e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800306c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	3301      	adds	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	f47f ae63 	bne.w	8002d50 <HAL_GPIO_Init+0x14>
  }
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	3724      	adds	r7, #36	; 0x24
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	58000400 	.word	0x58000400

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80030d8:	4a08      	ldr	r2, [pc, #32]	; (80030fc <HAL_HSEM_FastTake+0x2c>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3320      	adds	r3, #32
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <HAL_HSEM_FastTake+0x30>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	58026400 	.word	0x58026400
 8003100:	80000300 	.word	0x80000300

08003104 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800310e:	4906      	ldr	r1, [pc, #24]	; (8003128 <HAL_HSEM_Release+0x24>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	58026400 	.word	0x58026400

0800312c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_HSEM_ActivateNotification+0x20>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_HSEM_ActivateNotification+0x20>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
#endif
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58026500 	.word	0x58026500

08003150 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_HSEM_IRQHandler+0x30>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_HSEM_IRQHandler+0x30>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	43db      	mvns	r3, r3
 8003164:	4906      	ldr	r1, [pc, #24]	; (8003180 <HAL_HSEM_IRQHandler+0x30>)
 8003166:	4013      	ands	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <HAL_HSEM_IRQHandler+0x30>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f008 ff97 	bl	800c0a4 <HAL_HSEM_FreeCallback>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	58026500 	.word	0x58026500

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd ffa6 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e006      	b.n	800320c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800320a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d104      	bne.n	800321e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800321c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_I2C_Init+0x11c>)
 800322a:	430b      	orrs	r3, r1
 800322c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	ea42 0103 	orr.w	r1, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	021a      	lsls	r2, r3, #8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69d9      	ldr	r1, [r3, #28]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1a      	ldr	r2, [r3, #32]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	02008000 	.word	0x02008000

080032a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
  }
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d138      	bne.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e032      	b.n	8003362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	; 0x24
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800332a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6819      	ldr	r1, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	d139      	bne.n	80033f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800338e:	2302      	movs	r3, #2
 8003390:	e033      	b.n	80033fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2224      	movs	r2, #36	; 0x24
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003408:	b08f      	sub	sp, #60	; 0x3c
 800340a:	af0a      	add	r7, sp, #40	; 0x28
 800340c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e116      	b.n	8003646 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fd56 	bl	8001ee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2203      	movs	r2, #3
 800343c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f004 fff4 	bl	8008444 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	687e      	ldr	r6, [r7, #4]
 8003464:	466d      	mov	r5, sp
 8003466:	f106 0410 	add.w	r4, r6, #16
 800346a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800346e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003476:	e885 0003 	stmia.w	r5, {r0, r1}
 800347a:	1d33      	adds	r3, r6, #4
 800347c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	f004 ff72 	bl	8008368 <USB_CoreInit>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0d7      	b.n	8003646 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f004 ffe2 	bl	8008466 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e04a      	b.n	800353e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	333d      	adds	r3, #61	; 0x3d
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	333c      	adds	r3, #60	; 0x3c
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	b298      	uxth	r0, r3
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3342      	adds	r3, #66	; 0x42
 80034e4:	4602      	mov	r2, r0
 80034e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	333f      	adds	r3, #63	; 0x3f
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3344      	adds	r3, #68	; 0x44
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3348      	adds	r3, #72	; 0x48
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3350      	adds	r3, #80	; 0x50
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	3301      	adds	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d3af      	bcc.n	80034a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	e044      	b.n	80035d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3301      	adds	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3b5      	bcc.n	800354e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	687e      	ldr	r6, [r7, #4]
 80035ea:	466d      	mov	r5, sp
 80035ec:	f106 0410 	add.w	r4, r6, #16
 80035f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003600:	1d33      	adds	r3, r6, #4
 8003602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f004 ff59 	bl	80084bc <USB_DevInit>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e014      	b.n	8003646 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2b01      	cmp	r3, #1
 8003632:	d102      	bne.n	800363a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f80b 	bl	8003650 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f005 f8fb 	bl	800883a <USB_DevDisconnect>

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003650 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_PCDEx_ActivateLPM+0x44>)
 8003680:	4313      	orrs	r3, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	10000003 	.word	0x10000003

08003698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_PWREx_ConfigSupply+0xb0>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d00a      	beq.n	80036c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e040      	b.n	8003740 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e03e      	b.n	8003740 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036c2:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_PWREx_ConfigSupply+0xb0>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036ca:	491f      	ldr	r1, [pc, #124]	; (8003748 <HAL_PWREx_ConfigSupply+0xb0>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036d2:	f7fe fd41 	bl	8002158 <HAL_GetTick>
 80036d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036d8:	e009      	b.n	80036ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036da:	f7fe fd3d 	bl	8002158 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e8:	d901      	bls.n	80036ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e028      	b.n	8003740 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_PWREx_ConfigSupply+0xb0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fa:	d1ee      	bne.n	80036da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b1e      	cmp	r3, #30
 8003700:	d008      	beq.n	8003714 <HAL_PWREx_ConfigSupply+0x7c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b2e      	cmp	r3, #46	; 0x2e
 8003706:	d005      	beq.n	8003714 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b1d      	cmp	r3, #29
 800370c:	d002      	beq.n	8003714 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b2d      	cmp	r3, #45	; 0x2d
 8003712:	d114      	bne.n	800373e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003714:	f7fe fd20 	bl	8002158 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800371a:	e009      	b.n	8003730 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800371c:	f7fe fd1c 	bl	8002158 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800372a:	d901      	bls.n	8003730 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_PWREx_ConfigSupply+0xb0>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d1ee      	bne.n	800371c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	58024800 	.word	0x58024800

0800374c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	58024800 	.word	0x58024800

0800376c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	; 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e3ff      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8087 	beq.w	800389a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378c:	4b99      	ldr	r3, [pc, #612]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003796:	4b97      	ldr	r3, [pc, #604]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d007      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46>
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b18      	cmp	r3, #24
 80037a6:	d110      	bne.n	80037ca <HAL_RCC_OscConfig+0x5e>
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d10b      	bne.n	80037ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d06c      	beq.n	8003898 <HAL_RCC_OscConfig+0x12c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d168      	bne.n	8003898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e3d9      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x76>
 80037d4:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a86      	ldr	r2, [pc, #536]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e02e      	b.n	8003840 <HAL_RCC_OscConfig+0xd4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x98>
 80037ea:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a81      	ldr	r2, [pc, #516]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7e      	ldr	r2, [pc, #504]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80037fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xd4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0xbc>
 800380e:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a78      	ldr	r2, [pc, #480]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a75      	ldr	r2, [pc, #468]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xd4>
 8003828:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a71      	ldr	r2, [pc, #452]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe fc86 	bl	8002158 <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe fc82 	bl	8002158 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e38d      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003862:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xe4>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe fc72 	bl	8002158 <HAL_GetTick>
 8003874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fc6e 	bl	8002158 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e379      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800388a:	4b5a      	ldr	r3, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x10c>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80ae 	beq.w	8003a04 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b2:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_RCC_OscConfig+0x162>
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	2b18      	cmp	r3, #24
 80038c2:	d13a      	bne.n	800393a <HAL_RCC_OscConfig+0x1ce>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d135      	bne.n	800393a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ce:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e34b      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	f7fe fc67 	bl	80021b8 <HAL_GetREVID>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d817      	bhi.n	8003924 <HAL_RCC_OscConfig+0x1b8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d108      	bne.n	800390e <HAL_RCC_OscConfig+0x1a2>
 80038fc:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003904:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390c:	e07a      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	031b      	lsls	r3, r3, #12
 800391c:	4935      	ldr	r1, [pc, #212]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003922:	e06f      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	4930      	ldr	r1, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003938:	e064      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d045      	beq.n	80039ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 0219 	bic.w	r2, r3, #25
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4929      	ldr	r1, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fc00 	bl	8002158 <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe fbfc 	bl	8002158 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e307      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	f7fe fc1d 	bl	80021b8 <HAL_GetREVID>
 800397e:	4603      	mov	r3, r0
 8003980:	f241 0203 	movw	r2, #4099	; 0x1003
 8003984:	4293      	cmp	r3, r2
 8003986:	d817      	bhi.n	80039b8 <HAL_RCC_OscConfig+0x24c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d108      	bne.n	80039a2 <HAL_RCC_OscConfig+0x236>
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003998:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	6053      	str	r3, [r2, #4]
 80039a0:	e030      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	031b      	lsls	r3, r3, #12
 80039b0:	4910      	ldr	r1, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 80039b6:	e025      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	490b      	ldr	r1, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
 80039cc:	e01a      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_RCC_OscConfig+0x288>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fe fbbd 	bl	8002158 <HAL_GetTick>
 80039de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe fbb9 	bl	8002158 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d903      	bls.n	80039f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e2c4      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
 80039f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039f8:	4ba4      	ldr	r3, [pc, #656]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ee      	bne.n	80039e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a9 	beq.w	8003b64 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a12:	4b9e      	ldr	r3, [pc, #632]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a1c:	4b9b      	ldr	r3, [pc, #620]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d007      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2cc>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b18      	cmp	r3, #24
 8003a2c:	d13a      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x338>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d135      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a38:	4b94      	ldr	r3, [pc, #592]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2e4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e296      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a50:	f7fe fbb2 	bl	80021b8 <HAL_GetREVID>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d817      	bhi.n	8003a8e <HAL_RCC_OscConfig+0x322>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d108      	bne.n	8003a78 <HAL_RCC_OscConfig+0x30c>
 8003a66:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a6e:	4a87      	ldr	r2, [pc, #540]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a76:	e075      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a78:	4b84      	ldr	r3, [pc, #528]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	4981      	ldr	r1, [pc, #516]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a8c:	e06a      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	061b      	lsls	r3, r3, #24
 8003a9c:	497b      	ldr	r1, [pc, #492]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aa2:	e05f      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d042      	beq.n	8003b32 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003aac:	4b77      	ldr	r3, [pc, #476]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fb4e 	bl	8002158 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fb4a 	bl	8002158 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e255      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ad2:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ade:	f7fe fb6b 	bl	80021b8 <HAL_GetREVID>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d817      	bhi.n	8003b1c <HAL_RCC_OscConfig+0x3b0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d108      	bne.n	8003b06 <HAL_RCC_OscConfig+0x39a>
 8003af4:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003afc:	4a63      	ldr	r2, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b02:	6053      	str	r3, [r2, #4]
 8003b04:	e02e      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f8>
 8003b06:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	069b      	lsls	r3, r3, #26
 8003b14:	495d      	ldr	r1, [pc, #372]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
 8003b1a:	e023      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f8>
 8003b1c:	4b5b      	ldr	r3, [pc, #364]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4958      	ldr	r1, [pc, #352]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e018      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b32:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a55      	ldr	r2, [pc, #340]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fb0b 	bl	8002158 <HAL_GetTick>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b46:	f7fe fb07 	bl	8002158 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e212      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b58:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d036      	beq.n	8003bde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d019      	beq.n	8003bac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b78:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fe fae8 	bl	8002158 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7fe fae4 	bl	8002158 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1ef      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x420>
 8003baa:	e018      	b.n	8003bde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	4a36      	ldr	r2, [pc, #216]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fe face 	bl	8002158 <HAL_GetTick>
 8003bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7fe faca 	bl	8002158 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1d5      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d036      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d019      	beq.n	8003c26 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe faab 	bl	8002158 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c06:	f7fe faa7 	bl	8002158 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1b2      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x49a>
 8003c24:	e018      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fa91 	bl	8002158 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c3a:	f7fe fa8d 	bl	8002158 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e198      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCC_OscConfig+0x520>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8085 	beq.w	8003d70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_RCC_OscConfig+0x524>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <HAL_RCC_OscConfig+0x524>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c72:	f7fe fa71 	bl	8002158 <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c78:	e00c      	b.n	8003c94 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fe fa6d 	bl	8002158 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	; 0x64
 8003c86:	d905      	bls.n	8003c94 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e178      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c94:	4b96      	ldr	r3, [pc, #600]	; (8003ef0 <HAL_RCC_OscConfig+0x784>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ec      	beq.n	8003c7a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x54a>
 8003ca8:	4b92      	ldr	r3, [pc, #584]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a91      	ldr	r2, [pc, #580]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e02d      	b.n	8003d12 <HAL_RCC_OscConfig+0x5a6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x56c>
 8003cbe:	4b8d      	ldr	r3, [pc, #564]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a8c      	ldr	r2, [pc, #560]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b8a      	ldr	r3, [pc, #552]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a89      	ldr	r2, [pc, #548]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e01c      	b.n	8003d12 <HAL_RCC_OscConfig+0x5a6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x58e>
 8003ce0:	4b84      	ldr	r3, [pc, #528]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a83      	ldr	r2, [pc, #524]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a80      	ldr	r2, [pc, #512]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e00b      	b.n	8003d12 <HAL_RCC_OscConfig+0x5a6>
 8003cfa:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a7d      	ldr	r2, [pc, #500]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	4b7b      	ldr	r3, [pc, #492]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a7a      	ldr	r2, [pc, #488]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fa1d 	bl	8002158 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe fa19 	bl	8002158 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e122      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d38:	4b6e      	ldr	r3, [pc, #440]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ee      	beq.n	8003d22 <HAL_RCC_OscConfig+0x5b6>
 8003d44:	e014      	b.n	8003d70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fe fa07 	bl	8002158 <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fe fa03 	bl	8002158 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e10c      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d64:	4b63      	ldr	r3, [pc, #396]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ee      	bne.n	8003d4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8101 	beq.w	8003f7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d7a:	4b5e      	ldr	r3, [pc, #376]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d82:	2b18      	cmp	r3, #24
 8003d84:	f000 80bc 	beq.w	8003f00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f040 8095 	bne.w	8003ebc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b58      	ldr	r3, [pc, #352]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a57      	ldr	r2, [pc, #348]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe f9db 	bl	8002158 <HAL_GetTick>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe f9d7 	bl	8002158 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0e2      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db8:	4b4e      	ldr	r3, [pc, #312]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc4:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <HAL_RCC_OscConfig+0x78c>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dd4:	0112      	lsls	r2, r2, #4
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	4946      	ldr	r1, [pc, #280]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	628b      	str	r3, [r1, #40]	; 0x28
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	3b01      	subs	r3, #1
 8003de4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	3b01      	subs	r3, #1
 8003dee:	025b      	lsls	r3, r3, #9
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	3b01      	subs	r3, #1
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e0e:	4939      	ldr	r1, [pc, #228]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003e14:	4b37      	ldr	r3, [pc, #220]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	4a36      	ldr	r2, [pc, #216]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e24:	4b35      	ldr	r3, [pc, #212]	; (8003efc <HAL_RCC_OscConfig+0x790>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e2c:	00d2      	lsls	r2, r2, #3
 8003e2e:	4931      	ldr	r1, [pc, #196]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e34:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	f023 020c 	bic.w	r2, r3, #12
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	492c      	ldr	r1, [pc, #176]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f023 0202 	bic.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	4928      	ldr	r1, [pc, #160]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e58:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e64:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f960 	bl	8002158 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f95c 	bl	8002158 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e067      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x730>
 8003eba:	e05f      	b.n	8003f7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe f946 	bl	8002158 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe f942 	bl	8002158 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04d      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCC_OscConfig+0x788>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x764>
 8003eee:	e045      	b.n	8003f7c <HAL_RCC_OscConfig+0x810>
 8003ef0:	58024800 	.word	0x58024800
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	fffffc0c 	.word	0xfffffc0c
 8003efc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x81c>)
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCC_OscConfig+0x81c>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d031      	beq.n	8003f78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0203 	and.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d12a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d122      	bne.n	8003f78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d11a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d111      	bne.n	8003f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d108      	bne.n	8003f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	0e1b      	lsrs	r3, r3, #24
 8003f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3730      	adds	r7, #48	; 0x30
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400

08003f8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e19c      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b8a      	ldr	r3, [pc, #552]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d910      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b87      	ldr	r3, [pc, #540]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 020f 	bic.w	r2, r3, #15
 8003fb6:	4985      	ldr	r1, [pc, #532]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b83      	ldr	r3, [pc, #524]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e184      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	4b7b      	ldr	r3, [pc, #492]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d908      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fec:	4b78      	ldr	r3, [pc, #480]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4975      	ldr	r1, [pc, #468]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004016:	429a      	cmp	r2, r3
 8004018:	d908      	bls.n	800402c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800401a:	4b6d      	ldr	r3, [pc, #436]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	496a      	ldr	r1, [pc, #424]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004028:	4313      	orrs	r3, r2
 800402a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	4b64      	ldr	r3, [pc, #400]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004044:	429a      	cmp	r2, r3
 8004046:	d908      	bls.n	800405a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004048:	4b61      	ldr	r3, [pc, #388]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	495e      	ldr	r1, [pc, #376]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004056:	4313      	orrs	r3, r2
 8004058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004072:	429a      	cmp	r2, r3
 8004074:	d908      	bls.n	8004088 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004076:	4b56      	ldr	r3, [pc, #344]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4953      	ldr	r1, [pc, #332]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004084:	4313      	orrs	r3, r2
 8004086:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d908      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f023 020f 	bic.w	r2, r3, #15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4947      	ldr	r1, [pc, #284]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d055      	beq.n	800416e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040c2:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	4940      	ldr	r1, [pc, #256]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d107      	bne.n	80040ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040dc:	4b3c      	ldr	r3, [pc, #240]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d121      	bne.n	800412c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0f6      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d115      	bne.n	800412c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0ea      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800410c:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0de      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0d6      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f023 0207 	bic.w	r2, r3, #7
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4925      	ldr	r1, [pc, #148]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800413a:	4313      	orrs	r3, r2
 800413c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fe f80b 	bl	8002158 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004144:	e00a      	b.n	800415c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004146:	f7fe f807 	bl	8002158 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0be      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	429a      	cmp	r2, r3
 800416c:	d1eb      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	429a      	cmp	r2, r3
 8004188:	d208      	bcs.n	800419c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800418a:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f023 020f 	bic.w	r2, r3, #15
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x244>)
 8004198:	4313      	orrs	r3, r2
 800419a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d214      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	4906      	ldr	r1, [pc, #24]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <HAL_RCC_ClockConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e086      	b.n	80042da <HAL_RCC_ClockConfig+0x34e>
 80041cc:	52002000 	.word	0x52002000
 80041d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d208      	bcs.n	8004202 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f0:	4b3c      	ldr	r3, [pc, #240]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4939      	ldr	r1, [pc, #228]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421a:	429a      	cmp	r2, r3
 800421c:	d208      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	492e      	ldr	r1, [pc, #184]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 800422c:	4313      	orrs	r3, r2
 800422e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004248:	429a      	cmp	r2, r3
 800424a:	d208      	bcs.n	800425e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	4922      	ldr	r1, [pc, #136]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 800425a:	4313      	orrs	r3, r2
 800425c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004276:	429a      	cmp	r2, r3
 8004278:	d208      	bcs.n	800428c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4917      	ldr	r1, [pc, #92]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 8004288:	4313      	orrs	r3, r2
 800428a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800428c:	f000 f834 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	4912      	ldr	r1, [pc, #72]	; (80042e8 <HAL_RCC_ClockConfig+0x35c>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x358>)
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	4a0d      	ldr	r2, [pc, #52]	; (80042e8 <HAL_RCC_ClockConfig+0x35c>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <HAL_RCC_ClockConfig+0x360>)
 80042c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042c4:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x364>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x368>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fef8 	bl	80020c4 <HAL_InitTick>
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400
 80042e8:	080114b8 	.word	0x080114b8
 80042ec:	24000004 	.word	0x24000004
 80042f0:	24000000 	.word	0x24000000
 80042f4:	24000008 	.word	0x24000008

080042f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fe:	4bb3      	ldr	r3, [pc, #716]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004306:	2b18      	cmp	r3, #24
 8004308:	f200 8155 	bhi.w	80045b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <HAL_RCC_GetSysClockFreq+0x1c>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004379 	.word	0x08004379
 8004318:	080045b7 	.word	0x080045b7
 800431c:	080045b7 	.word	0x080045b7
 8004320:	080045b7 	.word	0x080045b7
 8004324:	080045b7 	.word	0x080045b7
 8004328:	080045b7 	.word	0x080045b7
 800432c:	080045b7 	.word	0x080045b7
 8004330:	080045b7 	.word	0x080045b7
 8004334:	0800439f 	.word	0x0800439f
 8004338:	080045b7 	.word	0x080045b7
 800433c:	080045b7 	.word	0x080045b7
 8004340:	080045b7 	.word	0x080045b7
 8004344:	080045b7 	.word	0x080045b7
 8004348:	080045b7 	.word	0x080045b7
 800434c:	080045b7 	.word	0x080045b7
 8004350:	080045b7 	.word	0x080045b7
 8004354:	080043a5 	.word	0x080043a5
 8004358:	080045b7 	.word	0x080045b7
 800435c:	080045b7 	.word	0x080045b7
 8004360:	080045b7 	.word	0x080045b7
 8004364:	080045b7 	.word	0x080045b7
 8004368:	080045b7 	.word	0x080045b7
 800436c:	080045b7 	.word	0x080045b7
 8004370:	080045b7 	.word	0x080045b7
 8004374:	080043ab 	.word	0x080043ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004378:	4b94      	ldr	r3, [pc, #592]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004384:	4b91      	ldr	r3, [pc, #580]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	4a90      	ldr	r2, [pc, #576]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004396:	e111      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004398:	4b8d      	ldr	r3, [pc, #564]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800439a:	61bb      	str	r3, [r7, #24]
    break;
 800439c:	e10e      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800439e:	4b8d      	ldr	r3, [pc, #564]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043a0:	61bb      	str	r3, [r7, #24]
    break;
 80043a2:	e10b      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80043a4:	4b8c      	ldr	r3, [pc, #560]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043a6:	61bb      	str	r3, [r7, #24]
    break;
 80043a8:	e108      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043aa:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043b4:	4b85      	ldr	r3, [pc, #532]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043c0:	4b82      	ldr	r3, [pc, #520]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043ca:	4b80      	ldr	r3, [pc, #512]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	08db      	lsrs	r3, r3, #3
 80043d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80e1 	beq.w	80045b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	f000 8083 	beq.w	80044fc <HAL_RCC_GetSysClockFreq+0x204>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	f200 80a1 	bhi.w	8004540 <HAL_RCC_GetSysClockFreq+0x248>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x114>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d056      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800440a:	e099      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800440c:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02d      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004418:	4b6c      	ldr	r3, [pc, #432]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	08db      	lsrs	r3, r3, #3
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	4a6b      	ldr	r2, [pc, #428]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a02 	vldr	s12, [r7, #8]
 8004456:	eddf 5a61 	vldr	s11, [pc, #388]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004472:	e087      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004486:	4b51      	ldr	r3, [pc, #324]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004496:	ed97 6a02 	vldr	s12, [r7, #8]
 800449a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800449e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044b6:	e065      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80045e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ca:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044da:	ed97 6a02 	vldr	s12, [r7, #8]
 80044de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80044e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044fa:	e043      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eddf 6a38 	vldr	s13, [pc, #224]	; 80045e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800450a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004522:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800453e:	e021      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80045e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a02 	vldr	s12, [r7, #8]
 8004566:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004582:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800458e:	3301      	adds	r3, #1
 8004590:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800459c:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a8:	ee17 3a90 	vmov	r3, s15
 80045ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80045ae:	e005      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
    break;
 80045b4:	e002      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045b8:	61bb      	str	r3, [r7, #24]
    break;
 80045ba:	bf00      	nop
  }

  return sysclockfreq;
 80045bc:	69bb      	ldr	r3, [r7, #24]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
 80045d0:	03d09000 	.word	0x03d09000
 80045d4:	003d0900 	.word	0x003d0900
 80045d8:	007a1200 	.word	0x007a1200
 80045dc:	46000000 	.word	0x46000000
 80045e0:	4c742400 	.word	0x4c742400
 80045e4:	4a742400 	.word	0x4a742400
 80045e8:	4af42400 	.word	0x4af42400

080045ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045f2:	f7ff fe81 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80045f6:	4602      	mov	r2, r0
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_GetHCLKFreq+0x50>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	490f      	ldr	r1, [pc, #60]	; (8004640 <HAL_RCC_GetHCLKFreq+0x54>)
 8004604:	5ccb      	ldrb	r3, [r1, r3]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCC_GetHCLKFreq+0x50>)
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	4a09      	ldr	r2, [pc, #36]	; (8004640 <HAL_RCC_GetHCLKFreq+0x54>)
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	fa22 f303 	lsr.w	r3, r2, r3
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <HAL_RCC_GetHCLKFreq+0x58>)
 8004628:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800462a:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_RCC_GetHCLKFreq+0x5c>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <HAL_RCC_GetHCLKFreq+0x58>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	58024400 	.word	0x58024400
 8004640:	080114b8 	.word	0x080114b8
 8004644:	24000004 	.word	0x24000004
 8004648:	24000000 	.word	0x24000000

0800464c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004650:	f7ff ffcc 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	58024400 	.word	0x58024400
 8004674:	080114b8 	.word	0x080114b8

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800467c:	f7ff ffb6 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4904      	ldr	r1, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	58024400 	.word	0x58024400
 80046a0:	080114b8 	.word	0x080114b8

080046a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046b0:	2300      	movs	r3, #0
 80046b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d03f      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046c8:	d02a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ce:	d824      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d4:	d018      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046da:	d81e      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e4:	d007      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046e6:	e018      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e8:	4bab      	ldr	r3, [pc, #684]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4aaa      	ldr	r2, [pc, #680]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046f4:	e015      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2102      	movs	r1, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f9cf 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004706:	e00c      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3324      	adds	r3, #36	; 0x24
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fa78 	bl	8005c04 <RCCEx_PLL3_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
      break;
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004728:	4b9b      	ldr	r3, [pc, #620]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004734:	4998      	ldr	r1, [pc, #608]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	650b      	str	r3, [r1, #80]	; 0x50
 800473a:	e001      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03d      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	2b04      	cmp	r3, #4
 8004752:	d826      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004771 	.word	0x08004771
 8004760:	0800477f 	.word	0x0800477f
 8004764:	08004791 	.word	0x08004791
 8004768:	080047a9 	.word	0x080047a9
 800476c:	080047a9 	.word	0x080047a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4b89      	ldr	r3, [pc, #548]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4a88      	ldr	r2, [pc, #544]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800477c:	e015      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f001 f98b 	bl	8005aa0 <RCCEx_PLL2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800478e:	e00c      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fa34 	bl	8005c04 <RCCEx_PLL3_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047a0:	e003      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
      break;
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80047a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b0:	4b79      	ldr	r3, [pc, #484]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	f023 0207 	bic.w	r2, r3, #7
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	4976      	ldr	r1, [pc, #472]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	650b      	str	r3, [r1, #80]	; 0x50
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d042      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047dc:	d02b      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d825      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047e4:	2bc0      	cmp	r3, #192	; 0xc0
 80047e6:	d028      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047e8:	2bc0      	cmp	r3, #192	; 0xc0
 80047ea:	d821      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047ec:	2b80      	cmp	r3, #128	; 0x80
 80047ee:	d016      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d81d      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d007      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80047fc:	e018      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fe:	4b66      	ldr	r3, [pc, #408]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a65      	ldr	r2, [pc, #404]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800480a:	e017      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f001 f944 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800481c:	e00e      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f001 f9ed 	bl	8005c04 <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800482e:	e005      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	e002      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800483a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004842:	4b55      	ldr	r3, [pc, #340]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4952      	ldr	r1, [pc, #328]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	650b      	str	r3, [r1, #80]	; 0x50
 8004854:	e001      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004862:	2b00      	cmp	r3, #0
 8004864:	d049      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800486c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004870:	d030      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004876:	d82a      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004878:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800487c:	d02c      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800487e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004882:	d824      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004888:	d018      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800488a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488e:	d81e      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004898:	d007      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800489a:	e018      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489c:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048a8:	e017      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 f8f5 	bl	8005aa0 <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048ba:	e00e      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f99e 	bl	8005c04 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048cc:	e005      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80048d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048ee:	492a      	ldr	r1, [pc, #168]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	658b      	str	r3, [r1, #88]	; 0x58
 80048f4:	e001      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004902:	2b00      	cmp	r3, #0
 8004904:	d04c      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004910:	d030      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004916:	d82a      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004918:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800491c:	d02c      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800491e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004922:	d824      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004928:	d018      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800492a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800492e:	d81e      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004938:	d007      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800493a:	e018      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	4a15      	ldr	r2, [pc, #84]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004948:	e017      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f001 f8a5 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800495a:	e00e      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3324      	adds	r3, #36	; 0x24
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f94e 	bl	8005c04 <RCCEx_PLL3_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800496c:	e005      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
      break;
 8004972:	e002      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800498e:	4902      	ldr	r1, [pc, #8]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	658b      	str	r3, [r1, #88]	; 0x58
 8004994:	e004      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d032      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	2b30      	cmp	r3, #48	; 0x30
 80049b2:	d01c      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80049b4:	2b30      	cmp	r3, #48	; 0x30
 80049b6:	d817      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d00c      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d813      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d016      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d10f      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4baf      	ldr	r3, [pc, #700]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4aae      	ldr	r2, [pc, #696]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049d4:	e00e      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 f85f 	bl	8005aa0 <RCCEx_PLL2_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049e6:	e005      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
      break;
 80049ec:	e002      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80049f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049fa:	4ba3      	ldr	r3, [pc, #652]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	49a0      	ldr	r1, [pc, #640]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a0c:	e001      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d047      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a26:	d030      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2c:	d82a      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a32:	d02c      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a38:	d824      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3e:	d018      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a44:	d81e      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d007      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004a50:	e018      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a52:	4b8d      	ldr	r3, [pc, #564]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	4a8c      	ldr	r2, [pc, #560]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a5e:	e017      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f81a 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a70:	e00e      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3324      	adds	r3, #36	; 0x24
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 f8c3 	bl	8005c04 <RCCEx_PLL3_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a96:	4b7c      	ldr	r3, [pc, #496]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	4979      	ldr	r1, [pc, #484]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	650b      	str	r3, [r1, #80]	; 0x50
 8004aa8:	e001      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d049      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac2:	d02e      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac8:	d828      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ace:	d02a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ad4:	d822      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ada:	d026      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004adc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ae0:	d81c      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aec:	d816      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01d      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af6:	d111      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 ffce 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b08:	e012      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	; 0x24
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f877 	bl	8005c04 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e009      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b36:	4b54      	ldr	r3, [pc, #336]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b42:	4951      	ldr	r1, [pc, #324]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	650b      	str	r3, [r1, #80]	; 0x50
 8004b48:	e001      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04b      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b64:	d02e      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b6a:	d828      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d02a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d822      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b7c:	d026      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004b7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b82:	d81c      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b88:	d010      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b8e:	d816      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01d      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b98:	d111      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 ff7d 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004baa:	e012      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3324      	adds	r3, #36	; 0x24
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 f826 	bl	8005c04 <RCCEx_PLL3_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004bbc:	e009      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc2:	e006      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004bc4:	bf00      	nop
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004be6:	4928      	ldr	r1, [pc, #160]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	658b      	str	r3, [r1, #88]	; 0x58
 8004bec:	e001      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d02f      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c06:	d00e      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c0c:	d814      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d015      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c16:	d10f      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ff37 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c52:	490d      	ldr	r1, [pc, #52]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	650b      	str	r3, [r1, #80]	; 0x50
 8004c58:	e001      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d033      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d81c      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004cb3 	.word	0x08004cb3
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c9b 	.word	0x08004c9b
 8004c84:	08004cb3 	.word	0x08004cb3
 8004c88:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4bb8      	ldr	r3, [pc, #736]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4ab7      	ldr	r2, [pc, #732]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c98:	e00c      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fefd 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cba:	4bad      	ldr	r3, [pc, #692]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	f023 0203 	bic.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	49aa      	ldr	r1, [pc, #680]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8086 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce0:	4ba4      	ldr	r3, [pc, #656]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4aa3      	ldr	r2, [pc, #652]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cec:	f7fd fa34 	bl	8002158 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf2:	e009      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf4:	f7fd fa30 	bl	8002158 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d902      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	75fb      	strb	r3, [r7, #23]
        break;
 8004d06:	e005      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d08:	4b9a      	ldr	r3, [pc, #616]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ef      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d166      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d1a:	4b95      	ldr	r3, [pc, #596]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d24:	4053      	eors	r3, r2
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d013      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2e:	4b90      	ldr	r3, [pc, #576]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d38:	4b8d      	ldr	r3, [pc, #564]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4a8c      	ldr	r2, [pc, #560]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d44:	4b8a      	ldr	r3, [pc, #552]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a89      	ldr	r2, [pc, #548]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d50:	4a87      	ldr	r2, [pc, #540]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d60:	d115      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fd f9f9 	bl	8002158 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d68:	e00b      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fd f9f5 	bl	8002158 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d902      	bls.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d80:	e005      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d82:	4b7b      	ldr	r3, [pc, #492]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ed      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d126      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004da4:	4b72      	ldr	r3, [pc, #456]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004db2:	0919      	lsrs	r1, r3, #4
 8004db4:	4b70      	ldr	r3, [pc, #448]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004db6:	400b      	ands	r3, r1
 8004db8:	496d      	ldr	r1, [pc, #436]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004dc0:	4b6b      	ldr	r3, [pc, #428]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	4a6a      	ldr	r2, [pc, #424]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004dca:	6113      	str	r3, [r2, #16]
 8004dcc:	4b68      	ldr	r3, [pc, #416]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dda:	4965      	ldr	r1, [pc, #404]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	670b      	str	r3, [r1, #112]	; 0x70
 8004de0:	e004      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	75bb      	strb	r3, [r7, #22]
 8004de6:	e001      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d07e      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dfc:	2b28      	cmp	r3, #40	; 0x28
 8004dfe:	d867      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004ed7 	.word	0x08004ed7
 8004e0c:	08004ed1 	.word	0x08004ed1
 8004e10:	08004ed1 	.word	0x08004ed1
 8004e14:	08004ed1 	.word	0x08004ed1
 8004e18:	08004ed1 	.word	0x08004ed1
 8004e1c:	08004ed1 	.word	0x08004ed1
 8004e20:	08004ed1 	.word	0x08004ed1
 8004e24:	08004ed1 	.word	0x08004ed1
 8004e28:	08004ead 	.word	0x08004ead
 8004e2c:	08004ed1 	.word	0x08004ed1
 8004e30:	08004ed1 	.word	0x08004ed1
 8004e34:	08004ed1 	.word	0x08004ed1
 8004e38:	08004ed1 	.word	0x08004ed1
 8004e3c:	08004ed1 	.word	0x08004ed1
 8004e40:	08004ed1 	.word	0x08004ed1
 8004e44:	08004ed1 	.word	0x08004ed1
 8004e48:	08004ebf 	.word	0x08004ebf
 8004e4c:	08004ed1 	.word	0x08004ed1
 8004e50:	08004ed1 	.word	0x08004ed1
 8004e54:	08004ed1 	.word	0x08004ed1
 8004e58:	08004ed1 	.word	0x08004ed1
 8004e5c:	08004ed1 	.word	0x08004ed1
 8004e60:	08004ed1 	.word	0x08004ed1
 8004e64:	08004ed1 	.word	0x08004ed1
 8004e68:	08004ed7 	.word	0x08004ed7
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	08004ed1 	.word	0x08004ed1
 8004e74:	08004ed1 	.word	0x08004ed1
 8004e78:	08004ed1 	.word	0x08004ed1
 8004e7c:	08004ed1 	.word	0x08004ed1
 8004e80:	08004ed1 	.word	0x08004ed1
 8004e84:	08004ed1 	.word	0x08004ed1
 8004e88:	08004ed7 	.word	0x08004ed7
 8004e8c:	08004ed1 	.word	0x08004ed1
 8004e90:	08004ed1 	.word	0x08004ed1
 8004e94:	08004ed1 	.word	0x08004ed1
 8004e98:	08004ed1 	.word	0x08004ed1
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004ed1 	.word	0x08004ed1
 8004ea4:	08004ed1 	.word	0x08004ed1
 8004ea8:	08004ed7 	.word	0x08004ed7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fdf4 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ebc:	e00c      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3324      	adds	r3, #36	; 0x24
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fe9d 	bl	8005c04 <RCCEx_PLL3_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ece:	e003      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ede:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eea:	4921      	ldr	r1, [pc, #132]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	654b      	str	r3, [r1, #84]	; 0x54
 8004ef0:	e001      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03e      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d820      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f53 	.word	0x08004f53
 8004f14:	08004f29 	.word	0x08004f29
 8004f18:	08004f3b 	.word	0x08004f3b
 8004f1c:	08004f53 	.word	0x08004f53
 8004f20:	08004f53 	.word	0x08004f53
 8004f24:	08004f53 	.word	0x08004f53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fdb6 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3324      	adds	r3, #36	; 0x24
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fe5f 	bl	8005c04 <RCCEx_PLL3_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d110      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f023 0207 	bic.w	r2, r3, #7
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f66:	4902      	ldr	r1, [pc, #8]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004f6e:	bf00      	nop
 8004f70:	58024400 	.word	0x58024400
 8004f74:	58024800 	.word	0x58024800
 8004f78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d039      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d820      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fdf 	.word	0x08004fdf
 8004fa0:	08004fb5 	.word	0x08004fb5
 8004fa4:	08004fc7 	.word	0x08004fc7
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fdf 	.word	0x08004fdf
 8004fb0:	08004fdf 	.word	0x08004fdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fd70 	bl	8005aa0 <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004fc4:	e00c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fe19 	bl	8005c04 <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe6:	4bb7      	ldr	r3, [pc, #732]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f023 0207 	bic.w	r2, r3, #7
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	49b3      	ldr	r1, [pc, #716]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8004ffa:	e001      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d04b      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005016:	d02e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800501c:	d828      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005022:	d02a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d822      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800502a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800502e:	d026      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005034:	d81c      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800503a:	d010      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800503c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005040:	d816      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01d      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800504a:	d111      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd24 	bl	8005aa0 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800505c:	e012      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	2102      	movs	r1, #2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fdcd 	bl	8005c04 <RCCEx_PLL3_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800506e:	e009      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508a:	4b8e      	ldr	r3, [pc, #568]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005098:	498a      	ldr	r1, [pc, #552]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800509a:	4313      	orrs	r3, r2
 800509c:	654b      	str	r3, [r1, #84]	; 0x54
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d04b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050ba:	d02e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80050bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050c0:	d828      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	d02a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	d822      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80050ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050d2:	d026      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80050d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050d8:	d81c      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d010      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80050e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e4:	d816      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01d      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ee:	d111      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fcd2 	bl	8005aa0 <RCCEx_PLL2_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005100:	e012      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3324      	adds	r3, #36	; 0x24
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fd7b 	bl	8005c04 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005112:	e009      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
      break;
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800511a:	bf00      	nop
 800511c:	e004      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800511e:	bf00      	nop
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800512e:	4b65      	ldr	r3, [pc, #404]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005132:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800513c:	4961      	ldr	r1, [pc, #388]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800513e:	4313      	orrs	r3, r2
 8005140:	658b      	str	r3, [r1, #88]	; 0x58
 8005142:	e001      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d04b      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800515a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800515e:	d02e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005164:	d828      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516a:	d02a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800516c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005170:	d822      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005176:	d026      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800517c:	d81c      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800517e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005182:	d010      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005188:	d816      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01d      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	d111      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fc80 	bl	8005aa0 <RCCEx_PLL2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80051a4:	e012      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3324      	adds	r3, #36	; 0x24
 80051aa:	2102      	movs	r1, #2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fd29 	bl	8005c04 <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80051b6:	e009      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
      break;
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80051be:	bf00      	nop
 80051c0:	e004      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80051ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80051d2:	4b3c      	ldr	r3, [pc, #240]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e0:	4938      	ldr	r1, [pc, #224]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	658b      	str	r3, [r1, #88]	; 0x58
 80051e6:	e001      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d10a      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3324      	adds	r3, #36	; 0x24
 8005208:	2102      	movs	r1, #2
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fcfa 	bl	8005c04 <RCCEx_PLL3_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800521a:	4b2a      	ldr	r3, [pc, #168]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005228:	4926      	ldr	r1, [pc, #152]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800522a:	4313      	orrs	r3, r2
 800522c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	d10a      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3324      	adds	r3, #36	; 0x24
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fcd9 	bl	8005c04 <RCCEx_PLL3_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526a:	4916      	ldr	r1, [pc, #88]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800526c:	4313      	orrs	r3, r2
 800526e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d036      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005286:	d01f      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800528c:	d817      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005296:	d009      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005298:	e011      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fbfd 	bl	8005aa0 <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80052aa:	e00e      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	2102      	movs	r1, #2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fca6 	bl	8005c04 <RCCEx_PLL3_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80052bc:	e005      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
      break;
 80052c2:	e002      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80052c4:	58024400 	.word	0x58024400
      break;
 80052c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052d0:	4b93      	ldr	r3, [pc, #588]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052de:	4990      	ldr	r1, [pc, #576]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	658b      	str	r3, [r1, #88]	; 0x58
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d033      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005300:	d01c      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005306:	d816      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530c:	d003      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800530e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005312:	d007      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005314:	e00f      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005316:	4b82      	ldr	r3, [pc, #520]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a81      	ldr	r2, [pc, #516]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800531c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005322:	e00c      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3324      	adds	r3, #36	; 0x24
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fc6a 	bl	8005c04 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005334:	e003      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
      break;
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800533c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005352:	4973      	ldr	r1, [pc, #460]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	654b      	str	r3, [r1, #84]	; 0x54
 8005358:	e001      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d029      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005376:	d007      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005378:	e00f      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537a:	4b69      	ldr	r3, [pc, #420]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	4a68      	ldr	r2, [pc, #416]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005386:	e00b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fb86 	bl	8005aa0 <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005398:	e002      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053a6:	4b5e      	ldr	r3, [pc, #376]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b2:	495b      	ldr	r1, [pc, #364]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053b8:	e001      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3324      	adds	r3, #36	; 0x24
 80053ce:	2102      	movs	r1, #2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fc17 	bl	8005c04 <RCCEx_PLL3_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d030      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f4:	d017      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80053f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fa:	d811      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005400:	d013      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005406:	d80b      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800540c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005410:	d106      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005412:	4b43      	ldr	r3, [pc, #268]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	4a42      	ldr	r2, [pc, #264]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800541e:	e007      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
      break;
 8005424:	e004      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005426:	bf00      	nop
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800542e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005436:	4b3a      	ldr	r3, [pc, #232]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005442:	4937      	ldr	r1, [pc, #220]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005444:	4313      	orrs	r3, r2
 8005446:	654b      	str	r3, [r1, #84]	; 0x54
 8005448:	e001      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	492e      	ldr	r1, [pc, #184]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005478:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005498:	4b21      	ldr	r3, [pc, #132]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a4:	491e      	ldr	r1, [pc, #120]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054b6:	4b1a      	ldr	r3, [pc, #104]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054c0:	6113      	str	r3, [r2, #16]
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054cc:	4914      	ldr	r1, [pc, #80]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da08      	bge.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	490e      	ldr	r1, [pc, #56]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	4906      	ldr	r1, [pc, #24]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800550c:	7dbb      	ldrb	r3, [r7, #22]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	58024400 	.word	0x58024400

08005524 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005528:	f7ff f860 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4904      	ldr	r1, [pc, #16]	; (800554c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	58024400 	.word	0x58024400
 800554c:	080114b8 	.word	0x080114b8

08005550 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005558:	4ba1      	ldr	r3, [pc, #644]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005562:	4b9f      	ldr	r3, [pc, #636]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	0b1b      	lsrs	r3, r3, #12
 8005568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800556e:	4b9c      	ldr	r3, [pc, #624]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800557a:	4b99      	ldr	r3, [pc, #612]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	08db      	lsrs	r3, r3, #3
 8005580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8111 	beq.w	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	f000 8083 	beq.w	80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	f200 80a1 	bhi.w	80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d056      	beq.n	8005668 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055ba:	e099      	b.n	80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055bc:	4b88      	ldr	r3, [pc, #544]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02d      	beq.n	8005624 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055c8:	4b85      	ldr	r3, [pc, #532]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	08db      	lsrs	r3, r3, #3
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	4a84      	ldr	r2, [pc, #528]	; (80057e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
 80055d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f2:	4b7b      	ldr	r3, [pc, #492]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	ed97 6a03 	vldr	s12, [r7, #12]
 8005606:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800560a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005622:	e087      	b.n	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b6a      	ldr	r3, [pc, #424]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005666:	e065      	b.n	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b59      	ldr	r3, [pc, #356]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a03 	vldr	s12, [r7, #12]
 800568e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056aa:	e043      	b.n	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b48      	ldr	r3, [pc, #288]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ee:	e021      	b.n	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b37      	ldr	r3, [pc, #220]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005732:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	0a5b      	lsrs	r3, r3, #9
 800573a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800574a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800574e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575a:	ee17 2a90 	vmov	r2, s15
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005762:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800577c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005788:	ee17 2a90 	vmov	r2, s15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005790:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	0e1b      	lsrs	r3, r3, #24
 8005796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b6:	ee17 2a90 	vmov	r2, s15
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057be:	e008      	b.n	80057d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
}
 80057d2:	bf00      	nop
 80057d4:	3724      	adds	r7, #36	; 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
 80057e4:	03d09000 	.word	0x03d09000
 80057e8:	46000000 	.word	0x46000000
 80057ec:	4c742400 	.word	0x4c742400
 80057f0:	4a742400 	.word	0x4a742400
 80057f4:	4af42400 	.word	0x4af42400

080057f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	; 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005800:	4ba1      	ldr	r3, [pc, #644]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800580a:	4b9f      	ldr	r3, [pc, #636]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	0d1b      	lsrs	r3, r3, #20
 8005810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005814:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005816:	4b9c      	ldr	r3, [pc, #624]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005822:	4b99      	ldr	r3, [pc, #612]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8111 	beq.w	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b02      	cmp	r3, #2
 800584a:	f000 8083 	beq.w	8005954 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b02      	cmp	r3, #2
 8005852:	f200 80a1 	bhi.w	8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d056      	beq.n	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005862:	e099      	b.n	8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005864:	4b88      	ldr	r3, [pc, #544]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d02d      	beq.n	80058cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005870:	4b85      	ldr	r3, [pc, #532]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	4a84      	ldr	r2, [pc, #528]	; (8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b7b      	ldr	r3, [pc, #492]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058ca:	e087      	b.n	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b6a      	ldr	r3, [pc, #424]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590e:	e065      	b.n	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005922:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005932:	ed97 6a03 	vldr	s12, [r7, #12]
 8005936:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800593a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005952:	e043      	b.n	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005966:	4b48      	ldr	r3, [pc, #288]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005976:	ed97 6a03 	vldr	s12, [r7, #12]
 800597a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800597e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005996:	e021      	b.n	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059aa:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80059be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	0a5b      	lsrs	r3, r3, #9
 80059e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a02:	ee17 2a90 	vmov	r2, s15
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a14:	ee07 3a90 	vmov	s15, r3
 8005a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a30:	ee17 2a90 	vmov	r2, s15
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	0e1b      	lsrs	r3, r3, #24
 8005a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a5e:	ee17 2a90 	vmov	r2, s15
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a66:	e008      	b.n	8005a7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	609a      	str	r2, [r3, #8]
}
 8005a7a:	bf00      	nop
 8005a7c:	3724      	adds	r7, #36	; 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	03d09000 	.word	0x03d09000
 8005a90:	46000000 	.word	0x46000000
 8005a94:	4c742400 	.word	0x4c742400
 8005a98:	4a742400 	.word	0x4a742400
 8005a9c:	4af42400 	.word	0x4af42400

08005aa0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aae:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d101      	bne.n	8005abe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e099      	b.n	8005bf2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005abe:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a4e      	ldr	r2, [pc, #312]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005ac4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aca:	f7fc fb45 	bl	8002158 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ad0:	e008      	b.n	8005ae4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ad2:	f7fc fb41 	bl	8002158 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e086      	b.n	8005bf2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ae4:	4b45      	ldr	r3, [pc, #276]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f0      	bne.n	8005ad2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005af0:	4b42      	ldr	r3, [pc, #264]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	031b      	lsls	r3, r3, #12
 8005afe:	493f      	ldr	r1, [pc, #252]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	628b      	str	r3, [r1, #40]	; 0x28
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	025b      	lsls	r3, r3, #9
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b34:	4931      	ldr	r1, [pc, #196]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b3a:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	492d      	ldr	r1, [pc, #180]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f023 0220 	bic.w	r2, r3, #32
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	4928      	ldr	r1, [pc, #160]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b5e:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	4a26      	ldr	r2, [pc, #152]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b64:	f023 0310 	bic.w	r3, r3, #16
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <RCCEx_PLL2_Config+0x160>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	69d2      	ldr	r2, [r2, #28]
 8005b76:	00d2      	lsls	r2, r2, #3
 8005b78:	4920      	ldr	r1, [pc, #128]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b7e:	4b1f      	ldr	r3, [pc, #124]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b84:	f043 0310 	orr.w	r3, r3, #16
 8005b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b9c:	e00f      	b.n	8005bbe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d106      	bne.n	8005bb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ba4:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bb0:	e005      	b.n	8005bbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a0e      	ldr	r2, [pc, #56]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bca:	f7fc fac5 	bl	8002158 <HAL_GetTick>
 8005bce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bd0:	e008      	b.n	8005be4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005bd2:	f7fc fac1 	bl	8002158 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e006      	b.n	8005bf2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <RCCEx_PLL2_Config+0x15c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	ffff0007 	.word	0xffff0007

08005c04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c12:	4b53      	ldr	r3, [pc, #332]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d101      	bne.n	8005c22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e099      	b.n	8005d56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c22:	4b4f      	ldr	r3, [pc, #316]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a4e      	ldr	r2, [pc, #312]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2e:	f7fc fa93 	bl	8002158 <HAL_GetTick>
 8005c32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c34:	e008      	b.n	8005c48 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c36:	f7fc fa8f 	bl	8002158 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e086      	b.n	8005d56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c48:	4b45      	ldr	r3, [pc, #276]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f0      	bne.n	8005c36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c54:	4b42      	ldr	r3, [pc, #264]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	051b      	lsls	r3, r3, #20
 8005c62:	493f      	ldr	r1, [pc, #252]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	628b      	str	r3, [r1, #40]	; 0x28
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	025b      	lsls	r3, r3, #9
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	061b      	lsls	r3, r3, #24
 8005c94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c98:	4931      	ldr	r1, [pc, #196]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c9e:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	492d      	ldr	r1, [pc, #180]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cb0:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	4928      	ldr	r1, [pc, #160]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cc2:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005cce:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <RCCEx_PLL3_Config+0x160>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	69d2      	ldr	r2, [r2, #28]
 8005cda:	00d2      	lsls	r2, r2, #3
 8005cdc:	4920      	ldr	r1, [pc, #128]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d00:	e00f      	b.n	8005d22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d106      	bne.n	8005d16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d14:	e005      	b.n	8005d22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a0e      	ldr	r2, [pc, #56]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d2e:	f7fc fa13 	bl	8002158 <HAL_GetTick>
 8005d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d34:	e008      	b.n	8005d48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d36:	f7fc fa0f 	bl	8002158 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e006      	b.n	8005d56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <RCCEx_PLL3_Config+0x15c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400
 8005d64:	ffff0007 	.word	0xffff0007

08005d68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0eb      	b.n	8005f56 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a75      	ldr	r2, [pc, #468]	; (8005f60 <HAL_SPI_Init+0x1f8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00f      	beq.n	8005dae <HAL_SPI_Init+0x46>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a74      	ldr	r2, [pc, #464]	; (8005f64 <HAL_SPI_Init+0x1fc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00a      	beq.n	8005dae <HAL_SPI_Init+0x46>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a72      	ldr	r2, [pc, #456]	; (8005f68 <HAL_SPI_Init+0x200>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d005      	beq.n	8005dae <HAL_SPI_Init+0x46>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d901      	bls.n	8005dae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e0d3      	b.n	8005f56 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb9c 	bl	80064ec <SPI_GetPacketSize>
 8005db4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a69      	ldr	r2, [pc, #420]	; (8005f60 <HAL_SPI_Init+0x1f8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00c      	beq.n	8005dda <HAL_SPI_Init+0x72>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a67      	ldr	r2, [pc, #412]	; (8005f64 <HAL_SPI_Init+0x1fc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <HAL_SPI_Init+0x72>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a66      	ldr	r2, [pc, #408]	; (8005f68 <HAL_SPI_Init+0x200>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_Init+0x72>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d811      	bhi.n	8005dfe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005dde:	4a60      	ldr	r2, [pc, #384]	; (8005f60 <HAL_SPI_Init+0x1f8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a5e      	ldr	r2, [pc, #376]	; (8005f64 <HAL_SPI_Init+0x1fc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_SPI_Init+0x90>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a5d      	ldr	r2, [pc, #372]	; (8005f68 <HAL_SPI_Init+0x200>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d104      	bne.n	8005e02 <HAL_SPI_Init+0x9a>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d901      	bls.n	8005e02 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0a9      	b.n	8005f56 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fb fcc8 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e3c:	d119      	bne.n	8005e72 <HAL_SPI_Init+0x10a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e46:	d103      	bne.n	8005e50 <HAL_SPI_Init+0xe8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10c      	bne.n	8005e72 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e60:	d107      	bne.n	8005e72 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	ea42 0103 	orr.w	r1, r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	ea42 0103 	orr.w	r1, r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d113      	bne.n	8005f12 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005efc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40013000 	.word	0x40013000
 8005f64:	40003800 	.word	0x40003800
 8005f68:	40003c00 	.word	0x40003c00

08005f6c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3320      	adds	r3, #32
 8005f82:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_SPI_Transmit+0x2a>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e1d7      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f9e:	f7fc f8db 	bl	8002158 <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005fbc:	7efb      	ldrb	r3, [r7, #27]
 8005fbe:	e1c2      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_Transmit+0x60>
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d107      	bne.n	8005fdc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005fd8:	7efb      	ldrb	r3, [r7, #27]
 8005fda:	e1b4      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800602c:	d107      	bne.n	800603e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800603c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	4b96      	ldr	r3, [pc, #600]	; (80062a0 <HAL_SPI_Transmit+0x334>)
 8006046:	4013      	ands	r3, r2
 8006048:	88f9      	ldrh	r1, [r7, #6]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	430b      	orrs	r3, r1
 8006050:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800606a:	d107      	bne.n	800607c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b0f      	cmp	r3, #15
 8006082:	d947      	bls.n	8006114 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006084:	e03f      	b.n	8006106 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d114      	bne.n	80060be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a4:	1d1a      	adds	r2, r3, #4
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060bc:	e023      	b.n	8006106 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060be:	f7fc f84b 	bl	8002158 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d803      	bhi.n	80060d6 <HAL_SPI_Transmit+0x16a>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d102      	bne.n	80060dc <HAL_SPI_Transmit+0x170>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d114      	bne.n	8006106 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f937 	bl	8006350 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e11f      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1b9      	bne.n	8006086 <HAL_SPI_Transmit+0x11a>
 8006112:	e0f2      	b.n	80062fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b07      	cmp	r3, #7
 800611a:	f240 80e7 	bls.w	80062ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800611e:	e05d      	b.n	80061dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d132      	bne.n	8006194 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d918      	bls.n	800616c <HAL_SPI_Transmit+0x200>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	1d1a      	adds	r2, r3, #4
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b02      	subs	r3, #2
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800616a:	e037      	b.n	80061dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	881a      	ldrh	r2, [r3, #0]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	1c9a      	adds	r2, r3, #2
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006192:	e023      	b.n	80061dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006194:	f7fb ffe0 	bl	8002158 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d803      	bhi.n	80061ac <HAL_SPI_Transmit+0x240>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d102      	bne.n	80061b2 <HAL_SPI_Transmit+0x246>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d114      	bne.n	80061dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f8cc 	bl	8006350 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0b4      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d19b      	bne.n	8006120 <HAL_SPI_Transmit+0x1b4>
 80061e8:	e087      	b.n	80062fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d155      	bne.n	80062a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d918      	bls.n	8006236 <HAL_SPI_Transmit+0x2ca>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d914      	bls.n	8006236 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b04      	subs	r3, #4
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006234:	e05a      	b.n	80062ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d917      	bls.n	8006272 <HAL_SPI_Transmit+0x306>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d013      	beq.n	8006272 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b02      	subs	r3, #2
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006270:	e03c      	b.n	80062ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3320      	adds	r3, #32
 800627c:	7812      	ldrb	r2, [r2, #0]
 800627e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800629c:	e026      	b.n	80062ec <HAL_SPI_Transmit+0x380>
 800629e:	bf00      	nop
 80062a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a4:	f7fb ff58 	bl	8002158 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d803      	bhi.n	80062bc <HAL_SPI_Transmit+0x350>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Transmit+0x356>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d114      	bne.n	80062ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f844 	bl	8006350 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e02c      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f47f af78 	bne.w	80061ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2200      	movs	r2, #0
 8006302:	2108      	movs	r1, #8
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f8c3 	bl	8006490 <SPI_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006316:	f043 0220 	orr.w	r2, r3, #32
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f815 	bl	8006350 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006344:	7efb      	ldrb	r3, [r7, #27]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop

08006350 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0208 	orr.w	r2, r2, #8
 800636e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0210 	orr.w	r2, r2, #16
 800637e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6919      	ldr	r1, [r3, #16]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b3c      	ldr	r3, [pc, #240]	; (800648c <SPI_CloseTransfer+0x13c>)
 800639c:	400b      	ands	r3, r1
 800639e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d014      	beq.n	80063e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00f      	beq.n	80063e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0220 	orr.w	r2, r2, #32
 80063e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d014      	beq.n	800641c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00f      	beq.n	800641c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00f      	beq.n	8006446 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006444:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00f      	beq.n	8006470 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006456:	f043 0208 	orr.w	r2, r3, #8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	fffffc90 	.word	0xfffffc90

08006490 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064a0:	e010      	b.n	80064c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a2:	f7fb fe59 	bl	8002158 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d803      	bhi.n	80064ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d102      	bne.n	80064c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e00f      	b.n	80064e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4013      	ands	r3, r2
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	bf0c      	ite	eq
 80064d4:	2301      	moveq	r3, #1
 80064d6:	2300      	movne	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d0df      	beq.n	80064a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3307      	adds	r3, #7
 800650a:	08db      	lsrs	r3, r3, #3
 800650c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	fb02 f303 	mul.w	r3, r2, r3
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e049      	b.n	80065c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fb fb89 	bl	8001c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3304      	adds	r3, #4
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f000 fa4d 	bl	8006a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <HAL_TIM_PWM_Start+0x24>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e03c      	b.n	800666e <HAL_TIM_PWM_Start+0x9e>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d109      	bne.n	800660e <HAL_TIM_PWM_Start+0x3e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e02f      	b.n	800666e <HAL_TIM_PWM_Start+0x9e>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d109      	bne.n	8006628 <HAL_TIM_PWM_Start+0x58>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	bf14      	ite	ne
 8006620:	2301      	movne	r3, #1
 8006622:	2300      	moveq	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e022      	b.n	800666e <HAL_TIM_PWM_Start+0x9e>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b0c      	cmp	r3, #12
 800662c:	d109      	bne.n	8006642 <HAL_TIM_PWM_Start+0x72>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	bf14      	ite	ne
 800663a:	2301      	movne	r3, #1
 800663c:	2300      	moveq	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	e015      	b.n	800666e <HAL_TIM_PWM_Start+0x9e>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b10      	cmp	r3, #16
 8006646:	d109      	bne.n	800665c <HAL_TIM_PWM_Start+0x8c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e008      	b.n	800666e <HAL_TIM_PWM_Start+0x9e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e09c      	b.n	80067b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <HAL_TIM_PWM_Start+0xb6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	e023      	b.n	80066ce <HAL_TIM_PWM_Start+0xfe>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d104      	bne.n	8006696 <HAL_TIM_PWM_Start+0xc6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006694:	e01b      	b.n	80066ce <HAL_TIM_PWM_Start+0xfe>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_PWM_Start+0xd6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a4:	e013      	b.n	80066ce <HAL_TIM_PWM_Start+0xfe>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d104      	bne.n	80066b6 <HAL_TIM_PWM_Start+0xe6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066b4:	e00b      	b.n	80066ce <HAL_TIM_PWM_Start+0xfe>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d104      	bne.n	80066c6 <HAL_TIM_PWM_Start+0xf6>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c4:	e003      	b.n	80066ce <HAL_TIM_PWM_Start+0xfe>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2201      	movs	r2, #1
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fcfa 	bl	80070d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a35      	ldr	r2, [pc, #212]	; (80067b8 <HAL_TIM_PWM_Start+0x1e8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_TIM_PWM_Start+0x13e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a34      	ldr	r2, [pc, #208]	; (80067bc <HAL_TIM_PWM_Start+0x1ec>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_TIM_PWM_Start+0x13e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a32      	ldr	r2, [pc, #200]	; (80067c0 <HAL_TIM_PWM_Start+0x1f0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIM_PWM_Start+0x13e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a31      	ldr	r2, [pc, #196]	; (80067c4 <HAL_TIM_PWM_Start+0x1f4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIM_PWM_Start+0x13e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a2f      	ldr	r2, [pc, #188]	; (80067c8 <HAL_TIM_PWM_Start+0x1f8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d101      	bne.n	8006712 <HAL_TIM_PWM_Start+0x142>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <HAL_TIM_PWM_Start+0x144>
 8006712:	2300      	movs	r3, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006726:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a22      	ldr	r2, [pc, #136]	; (80067b8 <HAL_TIM_PWM_Start+0x1e8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_TIM_PWM_Start+0x19e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673a:	d018      	beq.n	800676e <HAL_TIM_PWM_Start+0x19e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <HAL_TIM_PWM_Start+0x1fc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_TIM_PWM_Start+0x19e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <HAL_TIM_PWM_Start+0x200>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_TIM_PWM_Start+0x19e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <HAL_TIM_PWM_Start+0x204>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_TIM_PWM_Start+0x19e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a17      	ldr	r2, [pc, #92]	; (80067bc <HAL_TIM_PWM_Start+0x1ec>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIM_PWM_Start+0x19e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <HAL_TIM_PWM_Start+0x208>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d115      	bne.n	800679a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	4b19      	ldr	r3, [pc, #100]	; (80067dc <HAL_TIM_PWM_Start+0x20c>)
 8006776:	4013      	ands	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b06      	cmp	r3, #6
 800677e:	d015      	beq.n	80067ac <HAL_TIM_PWM_Start+0x1dc>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006786:	d011      	beq.n	80067ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006798:	e008      	b.n	80067ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e000      	b.n	80067ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40010400 	.word	0x40010400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	40001800 	.word	0x40001800
 80067dc:	00010007 	.word	0x00010007

080067e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e0fd      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b14      	cmp	r3, #20
 8006806:	f200 80f0 	bhi.w	80069ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006865 	.word	0x08006865
 8006814:	080069eb 	.word	0x080069eb
 8006818:	080069eb 	.word	0x080069eb
 800681c:	080069eb 	.word	0x080069eb
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080069eb 	.word	0x080069eb
 8006828:	080069eb 	.word	0x080069eb
 800682c:	080069eb 	.word	0x080069eb
 8006830:	080068e7 	.word	0x080068e7
 8006834:	080069eb 	.word	0x080069eb
 8006838:	080069eb 	.word	0x080069eb
 800683c:	080069eb 	.word	0x080069eb
 8006840:	08006927 	.word	0x08006927
 8006844:	080069eb 	.word	0x080069eb
 8006848:	080069eb 	.word	0x080069eb
 800684c:	080069eb 	.word	0x080069eb
 8006850:	08006969 	.word	0x08006969
 8006854:	080069eb 	.word	0x080069eb
 8006858:	080069eb 	.word	0x080069eb
 800685c:	080069eb 	.word	0x080069eb
 8006860:	080069a9 	.word	0x080069a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f962 	bl	8006b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0208 	orr.w	r2, r2, #8
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0204 	bic.w	r2, r2, #4
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	619a      	str	r2, [r3, #24]
      break;
 80068a2:	e0a3      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f9d2 	bl	8006c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6999      	ldr	r1, [r3, #24]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	619a      	str	r2, [r3, #24]
      break;
 80068e4:	e082      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa3b 	bl	8006d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0208 	orr.w	r2, r2, #8
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0204 	bic.w	r2, r2, #4
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	61da      	str	r2, [r3, #28]
      break;
 8006924:	e062      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 faa1 	bl	8006e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69d9      	ldr	r1, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	021a      	lsls	r2, r3, #8
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	61da      	str	r2, [r3, #28]
      break;
 8006966:	e041      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fae8 	bl	8006f44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0208 	orr.w	r2, r2, #8
 8006982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a6:	e021      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fb2a 	bl	8007008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	021a      	lsls	r2, r3, #8
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069e8:	e000      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80069ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop

08006a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a40      	ldr	r2, [pc, #256]	; (8006b14 <TIM_Base_SetConfig+0x114>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1e:	d00f      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a3d      	ldr	r2, [pc, #244]	; (8006b18 <TIM_Base_SetConfig+0x118>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00b      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3c      	ldr	r2, [pc, #240]	; (8006b1c <TIM_Base_SetConfig+0x11c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d007      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a3b      	ldr	r2, [pc, #236]	; (8006b20 <TIM_Base_SetConfig+0x120>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a3a      	ldr	r2, [pc, #232]	; (8006b24 <TIM_Base_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d108      	bne.n	8006a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <TIM_Base_SetConfig+0x114>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d01f      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a60:	d01b      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2c      	ldr	r2, [pc, #176]	; (8006b18 <TIM_Base_SetConfig+0x118>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d017      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2b      	ldr	r2, [pc, #172]	; (8006b1c <TIM_Base_SetConfig+0x11c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <TIM_Base_SetConfig+0x120>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00f      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <TIM_Base_SetConfig+0x124>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <TIM_Base_SetConfig+0x128>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a27      	ldr	r2, [pc, #156]	; (8006b2c <TIM_Base_SetConfig+0x12c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_Base_SetConfig+0x9a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <TIM_Base_SetConfig+0x130>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d108      	bne.n	8006aac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a10      	ldr	r2, [pc, #64]	; (8006b14 <TIM_Base_SetConfig+0x114>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00f      	beq.n	8006af8 <TIM_Base_SetConfig+0xf8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <TIM_Base_SetConfig+0x124>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <TIM_Base_SetConfig+0xf8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a11      	ldr	r2, [pc, #68]	; (8006b28 <TIM_Base_SetConfig+0x128>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_Base_SetConfig+0xf8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a10      	ldr	r2, [pc, #64]	; (8006b2c <TIM_Base_SetConfig+0x12c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_Base_SetConfig+0xf8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <TIM_Base_SetConfig+0x130>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d103      	bne.n	8006b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	615a      	str	r2, [r3, #20]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40010400 	.word	0x40010400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	40014800 	.word	0x40014800

08006b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4b37      	ldr	r3, [pc, #220]	; (8006c3c <TIM_OC1_SetConfig+0x108>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 0302 	bic.w	r3, r3, #2
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a2d      	ldr	r2, [pc, #180]	; (8006c40 <TIM_OC1_SetConfig+0x10c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_OC1_SetConfig+0x7c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a2c      	ldr	r2, [pc, #176]	; (8006c44 <TIM_OC1_SetConfig+0x110>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_OC1_SetConfig+0x7c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <TIM_OC1_SetConfig+0x114>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_OC1_SetConfig+0x7c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <TIM_OC1_SetConfig+0x118>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC1_SetConfig+0x7c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a29      	ldr	r2, [pc, #164]	; (8006c50 <TIM_OC1_SetConfig+0x11c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10c      	bne.n	8006bca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0308 	bic.w	r3, r3, #8
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 0304 	bic.w	r3, r3, #4
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <TIM_OC1_SetConfig+0x10c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00f      	beq.n	8006bf2 <TIM_OC1_SetConfig+0xbe>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <TIM_OC1_SetConfig+0x110>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <TIM_OC1_SetConfig+0xbe>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <TIM_OC1_SetConfig+0x114>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <TIM_OC1_SetConfig+0xbe>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <TIM_OC1_SetConfig+0x118>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC1_SetConfig+0xbe>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <TIM_OC1_SetConfig+0x11c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d111      	bne.n	8006c16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	fffeff8f 	.word	0xfffeff8f
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40010400 	.word	0x40010400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800

08006c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0210 	bic.w	r2, r3, #16
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <TIM_OC2_SetConfig+0xfc>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0320 	bic.w	r3, r3, #32
 8006c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a29      	ldr	r2, [pc, #164]	; (8006d54 <TIM_OC2_SetConfig+0x100>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC2_SetConfig+0x68>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a28      	ldr	r2, [pc, #160]	; (8006d58 <TIM_OC2_SetConfig+0x104>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10d      	bne.n	8006cd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <TIM_OC2_SetConfig+0x100>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00f      	beq.n	8006d00 <TIM_OC2_SetConfig+0xac>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <TIM_OC2_SetConfig+0x104>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_OC2_SetConfig+0xac>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <TIM_OC2_SetConfig+0x108>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC2_SetConfig+0xac>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <TIM_OC2_SetConfig+0x10c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC2_SetConfig+0xac>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <TIM_OC2_SetConfig+0x110>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d113      	bne.n	8006d28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	feff8fff 	.word	0xfeff8fff
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40010400 	.word	0x40010400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800

08006d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <TIM_OC3_SetConfig+0xf8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC3_SetConfig+0x66>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a26      	ldr	r2, [pc, #152]	; (8006e64 <TIM_OC3_SetConfig+0xfc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d10d      	bne.n	8006dea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <TIM_OC3_SetConfig+0xf8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00f      	beq.n	8006e12 <TIM_OC3_SetConfig+0xaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <TIM_OC3_SetConfig+0xfc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00b      	beq.n	8006e12 <TIM_OC3_SetConfig+0xaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <TIM_OC3_SetConfig+0x100>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d007      	beq.n	8006e12 <TIM_OC3_SetConfig+0xaa>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <TIM_OC3_SetConfig+0x104>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d003      	beq.n	8006e12 <TIM_OC3_SetConfig+0xaa>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <TIM_OC3_SetConfig+0x108>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d113      	bne.n	8006e3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010400 	.word	0x40010400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800

08006e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a18      	ldr	r2, [pc, #96]	; (8006f30 <TIM_OC4_SetConfig+0xbc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00f      	beq.n	8006ef4 <TIM_OC4_SetConfig+0x80>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <TIM_OC4_SetConfig+0xc0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00b      	beq.n	8006ef4 <TIM_OC4_SetConfig+0x80>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <TIM_OC4_SetConfig+0xc4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d007      	beq.n	8006ef4 <TIM_OC4_SetConfig+0x80>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <TIM_OC4_SetConfig+0xc8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC4_SetConfig+0x80>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <TIM_OC4_SetConfig+0xcc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d109      	bne.n	8006f08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	019b      	lsls	r3, r3, #6
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800

08006f44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <TIM_OC5_SetConfig+0xb0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00f      	beq.n	8006fba <TIM_OC5_SetConfig+0x76>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <TIM_OC5_SetConfig+0xb4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00b      	beq.n	8006fba <TIM_OC5_SetConfig+0x76>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <TIM_OC5_SetConfig+0xb8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d007      	beq.n	8006fba <TIM_OC5_SetConfig+0x76>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a14      	ldr	r2, [pc, #80]	; (8007000 <TIM_OC5_SetConfig+0xbc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d003      	beq.n	8006fba <TIM_OC5_SetConfig+0x76>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a13      	ldr	r2, [pc, #76]	; (8007004 <TIM_OC5_SetConfig+0xc0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d109      	bne.n	8006fce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800704a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	051b      	lsls	r3, r3, #20
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <TIM_OC6_SetConfig+0xb4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00f      	beq.n	8007080 <TIM_OC6_SetConfig+0x78>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a17      	ldr	r2, [pc, #92]	; (80070c0 <TIM_OC6_SetConfig+0xb8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00b      	beq.n	8007080 <TIM_OC6_SetConfig+0x78>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <TIM_OC6_SetConfig+0xbc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d007      	beq.n	8007080 <TIM_OC6_SetConfig+0x78>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a15      	ldr	r2, [pc, #84]	; (80070c8 <TIM_OC6_SetConfig+0xc0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d003      	beq.n	8007080 <TIM_OC6_SetConfig+0x78>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a14      	ldr	r2, [pc, #80]	; (80070cc <TIM_OC6_SetConfig+0xc4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d109      	bne.n	8007094 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007086:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	029b      	lsls	r3, r3, #10
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40010400 	.word	0x40010400
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2201      	movs	r2, #1
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	43db      	mvns	r3, r3
 80070f2:	401a      	ands	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	fa01 f303 	lsl.w	r3, r1, r3
 8007108:	431a      	orrs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	621a      	str	r2, [r3, #32]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007130:	2302      	movs	r3, #2
 8007132:	e068      	b.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2e      	ldr	r2, [pc, #184]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800716e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01d      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a6:	d018      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1b      	ldr	r2, [pc, #108]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a18      	ldr	r2, [pc, #96]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a13      	ldr	r2, [pc, #76]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10c      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40001800 	.word	0x40001800

0800722c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007244:	2302      	movs	r3, #2
 8007246:	e065      	b.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a16      	ldr	r2, [pc, #88]	; (8007320 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a14      	ldr	r2, [pc, #80]	; (8007324 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d115      	bne.n	8007302 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	051b      	lsls	r3, r3, #20
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400

08007328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e042      	b.n	80073c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fa fd31 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2224      	movs	r2, #36	; 0x24
 8007356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f82c 	bl	80073c8 <UART_SetConfig>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e022      	b.n	80073c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fd80 	bl	8007e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fe07 	bl	8007fcc <UART_CheckIdleState>
 80073be:	4603      	mov	r3, r0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073c8:	b5b0      	push	{r4, r5, r7, lr}
 80073ca:	b08e      	sub	sp, #56	; 0x38
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	4bbf      	ldr	r3, [pc, #764]	; (80076f4 <UART_SetConfig+0x32c>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6812      	ldr	r2, [r2, #0]
 80073fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073fe:	430b      	orrs	r3, r1
 8007400:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4ab5      	ldr	r2, [pc, #724]	; (80076f8 <UART_SetConfig+0x330>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800742e:	4313      	orrs	r3, r2
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	4bb0      	ldr	r3, [pc, #704]	; (80076fc <UART_SetConfig+0x334>)
 800743a:	4013      	ands	r3, r2
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007442:	430b      	orrs	r3, r1
 8007444:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	f023 010f 	bic.w	r1, r3, #15
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4aa7      	ldr	r2, [pc, #668]	; (8007700 <UART_SetConfig+0x338>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d176      	bne.n	8007554 <UART_SetConfig+0x18c>
 8007466:	4ba7      	ldr	r3, [pc, #668]	; (8007704 <UART_SetConfig+0x33c>)
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746e:	2b28      	cmp	r3, #40	; 0x28
 8007470:	d86c      	bhi.n	800754c <UART_SetConfig+0x184>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0xb0>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	0800751d 	.word	0x0800751d
 800747c:	0800754d 	.word	0x0800754d
 8007480:	0800754d 	.word	0x0800754d
 8007484:	0800754d 	.word	0x0800754d
 8007488:	0800754d 	.word	0x0800754d
 800748c:	0800754d 	.word	0x0800754d
 8007490:	0800754d 	.word	0x0800754d
 8007494:	0800754d 	.word	0x0800754d
 8007498:	08007525 	.word	0x08007525
 800749c:	0800754d 	.word	0x0800754d
 80074a0:	0800754d 	.word	0x0800754d
 80074a4:	0800754d 	.word	0x0800754d
 80074a8:	0800754d 	.word	0x0800754d
 80074ac:	0800754d 	.word	0x0800754d
 80074b0:	0800754d 	.word	0x0800754d
 80074b4:	0800754d 	.word	0x0800754d
 80074b8:	0800752d 	.word	0x0800752d
 80074bc:	0800754d 	.word	0x0800754d
 80074c0:	0800754d 	.word	0x0800754d
 80074c4:	0800754d 	.word	0x0800754d
 80074c8:	0800754d 	.word	0x0800754d
 80074cc:	0800754d 	.word	0x0800754d
 80074d0:	0800754d 	.word	0x0800754d
 80074d4:	0800754d 	.word	0x0800754d
 80074d8:	08007535 	.word	0x08007535
 80074dc:	0800754d 	.word	0x0800754d
 80074e0:	0800754d 	.word	0x0800754d
 80074e4:	0800754d 	.word	0x0800754d
 80074e8:	0800754d 	.word	0x0800754d
 80074ec:	0800754d 	.word	0x0800754d
 80074f0:	0800754d 	.word	0x0800754d
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	0800753d 	.word	0x0800753d
 80074fc:	0800754d 	.word	0x0800754d
 8007500:	0800754d 	.word	0x0800754d
 8007504:	0800754d 	.word	0x0800754d
 8007508:	0800754d 	.word	0x0800754d
 800750c:	0800754d 	.word	0x0800754d
 8007510:	0800754d 	.word	0x0800754d
 8007514:	0800754d 	.word	0x0800754d
 8007518:	08007545 	.word	0x08007545
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007522:	e222      	b.n	800796a <UART_SetConfig+0x5a2>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800752a:	e21e      	b.n	800796a <UART_SetConfig+0x5a2>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007532:	e21a      	b.n	800796a <UART_SetConfig+0x5a2>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753a:	e216      	b.n	800796a <UART_SetConfig+0x5a2>
 800753c:	2320      	movs	r3, #32
 800753e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007542:	e212      	b.n	800796a <UART_SetConfig+0x5a2>
 8007544:	2340      	movs	r3, #64	; 0x40
 8007546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754a:	e20e      	b.n	800796a <UART_SetConfig+0x5a2>
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e20a      	b.n	800796a <UART_SetConfig+0x5a2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a6b      	ldr	r2, [pc, #428]	; (8007708 <UART_SetConfig+0x340>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d130      	bne.n	80075c0 <UART_SetConfig+0x1f8>
 800755e:	4b69      	ldr	r3, [pc, #420]	; (8007704 <UART_SetConfig+0x33c>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b05      	cmp	r3, #5
 8007568:	d826      	bhi.n	80075b8 <UART_SetConfig+0x1f0>
 800756a:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <UART_SetConfig+0x1a8>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007589 	.word	0x08007589
 8007574:	08007591 	.word	0x08007591
 8007578:	08007599 	.word	0x08007599
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800758e:	e1ec      	b.n	800796a <UART_SetConfig+0x5a2>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007596:	e1e8      	b.n	800796a <UART_SetConfig+0x5a2>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759e:	e1e4      	b.n	800796a <UART_SetConfig+0x5a2>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a6:	e1e0      	b.n	800796a <UART_SetConfig+0x5a2>
 80075a8:	2320      	movs	r3, #32
 80075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ae:	e1dc      	b.n	800796a <UART_SetConfig+0x5a2>
 80075b0:	2340      	movs	r3, #64	; 0x40
 80075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b6:	e1d8      	b.n	800796a <UART_SetConfig+0x5a2>
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075be:	e1d4      	b.n	800796a <UART_SetConfig+0x5a2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a51      	ldr	r2, [pc, #324]	; (800770c <UART_SetConfig+0x344>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d130      	bne.n	800762c <UART_SetConfig+0x264>
 80075ca:	4b4e      	ldr	r3, [pc, #312]	; (8007704 <UART_SetConfig+0x33c>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d826      	bhi.n	8007624 <UART_SetConfig+0x25c>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x214>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f5 	.word	0x080075f5
 80075e0:	080075fd 	.word	0x080075fd
 80075e4:	08007605 	.word	0x08007605
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075fa:	e1b6      	b.n	800796a <UART_SetConfig+0x5a2>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007602:	e1b2      	b.n	800796a <UART_SetConfig+0x5a2>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760a:	e1ae      	b.n	800796a <UART_SetConfig+0x5a2>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e1aa      	b.n	800796a <UART_SetConfig+0x5a2>
 8007614:	2320      	movs	r3, #32
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e1a6      	b.n	800796a <UART_SetConfig+0x5a2>
 800761c:	2340      	movs	r3, #64	; 0x40
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e1a2      	b.n	800796a <UART_SetConfig+0x5a2>
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e19e      	b.n	800796a <UART_SetConfig+0x5a2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a37      	ldr	r2, [pc, #220]	; (8007710 <UART_SetConfig+0x348>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d130      	bne.n	8007698 <UART_SetConfig+0x2d0>
 8007636:	4b33      	ldr	r3, [pc, #204]	; (8007704 <UART_SetConfig+0x33c>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b05      	cmp	r3, #5
 8007640:	d826      	bhi.n	8007690 <UART_SetConfig+0x2c8>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x280>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007661 	.word	0x08007661
 800764c:	08007669 	.word	0x08007669
 8007650:	08007671 	.word	0x08007671
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007666:	e180      	b.n	800796a <UART_SetConfig+0x5a2>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800766e:	e17c      	b.n	800796a <UART_SetConfig+0x5a2>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007676:	e178      	b.n	800796a <UART_SetConfig+0x5a2>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767e:	e174      	b.n	800796a <UART_SetConfig+0x5a2>
 8007680:	2320      	movs	r3, #32
 8007682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007686:	e170      	b.n	800796a <UART_SetConfig+0x5a2>
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768e:	e16c      	b.n	800796a <UART_SetConfig+0x5a2>
 8007690:	2380      	movs	r3, #128	; 0x80
 8007692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007696:	e168      	b.n	800796a <UART_SetConfig+0x5a2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <UART_SetConfig+0x34c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d142      	bne.n	8007728 <UART_SetConfig+0x360>
 80076a2:	4b18      	ldr	r3, [pc, #96]	; (8007704 <UART_SetConfig+0x33c>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d838      	bhi.n	8007720 <UART_SetConfig+0x358>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <UART_SetConfig+0x2ec>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	08007719 	.word	0x08007719
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d2:	e14a      	b.n	800796a <UART_SetConfig+0x5a2>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076da:	e146      	b.n	800796a <UART_SetConfig+0x5a2>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e2:	e142      	b.n	800796a <UART_SetConfig+0x5a2>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ea:	e13e      	b.n	800796a <UART_SetConfig+0x5a2>
 80076ec:	2320      	movs	r3, #32
 80076ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f2:	e13a      	b.n	800796a <UART_SetConfig+0x5a2>
 80076f4:	cfff69f3 	.word	0xcfff69f3
 80076f8:	58000c00 	.word	0x58000c00
 80076fc:	11fff4ff 	.word	0x11fff4ff
 8007700:	40011000 	.word	0x40011000
 8007704:	58024400 	.word	0x58024400
 8007708:	40004400 	.word	0x40004400
 800770c:	40004800 	.word	0x40004800
 8007710:	40004c00 	.word	0x40004c00
 8007714:	40005000 	.word	0x40005000
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771e:	e124      	b.n	800796a <UART_SetConfig+0x5a2>
 8007720:	2380      	movs	r3, #128	; 0x80
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e120      	b.n	800796a <UART_SetConfig+0x5a2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4acc      	ldr	r2, [pc, #816]	; (8007a60 <UART_SetConfig+0x698>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d176      	bne.n	8007820 <UART_SetConfig+0x458>
 8007732:	4bcc      	ldr	r3, [pc, #816]	; (8007a64 <UART_SetConfig+0x69c>)
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800773a:	2b28      	cmp	r3, #40	; 0x28
 800773c:	d86c      	bhi.n	8007818 <UART_SetConfig+0x450>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x37c>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	080077e9 	.word	0x080077e9
 8007748:	08007819 	.word	0x08007819
 800774c:	08007819 	.word	0x08007819
 8007750:	08007819 	.word	0x08007819
 8007754:	08007819 	.word	0x08007819
 8007758:	08007819 	.word	0x08007819
 800775c:	08007819 	.word	0x08007819
 8007760:	08007819 	.word	0x08007819
 8007764:	080077f1 	.word	0x080077f1
 8007768:	08007819 	.word	0x08007819
 800776c:	08007819 	.word	0x08007819
 8007770:	08007819 	.word	0x08007819
 8007774:	08007819 	.word	0x08007819
 8007778:	08007819 	.word	0x08007819
 800777c:	08007819 	.word	0x08007819
 8007780:	08007819 	.word	0x08007819
 8007784:	080077f9 	.word	0x080077f9
 8007788:	08007819 	.word	0x08007819
 800778c:	08007819 	.word	0x08007819
 8007790:	08007819 	.word	0x08007819
 8007794:	08007819 	.word	0x08007819
 8007798:	08007819 	.word	0x08007819
 800779c:	08007819 	.word	0x08007819
 80077a0:	08007819 	.word	0x08007819
 80077a4:	08007801 	.word	0x08007801
 80077a8:	08007819 	.word	0x08007819
 80077ac:	08007819 	.word	0x08007819
 80077b0:	08007819 	.word	0x08007819
 80077b4:	08007819 	.word	0x08007819
 80077b8:	08007819 	.word	0x08007819
 80077bc:	08007819 	.word	0x08007819
 80077c0:	08007819 	.word	0x08007819
 80077c4:	08007809 	.word	0x08007809
 80077c8:	08007819 	.word	0x08007819
 80077cc:	08007819 	.word	0x08007819
 80077d0:	08007819 	.word	0x08007819
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ee:	e0bc      	b.n	800796a <UART_SetConfig+0x5a2>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f6:	e0b8      	b.n	800796a <UART_SetConfig+0x5a2>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fe:	e0b4      	b.n	800796a <UART_SetConfig+0x5a2>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007806:	e0b0      	b.n	800796a <UART_SetConfig+0x5a2>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e0ac      	b.n	800796a <UART_SetConfig+0x5a2>
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e0a8      	b.n	800796a <UART_SetConfig+0x5a2>
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e0a4      	b.n	800796a <UART_SetConfig+0x5a2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a90      	ldr	r2, [pc, #576]	; (8007a68 <UART_SetConfig+0x6a0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d130      	bne.n	800788c <UART_SetConfig+0x4c4>
 800782a:	4b8e      	ldr	r3, [pc, #568]	; (8007a64 <UART_SetConfig+0x69c>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b05      	cmp	r3, #5
 8007834:	d826      	bhi.n	8007884 <UART_SetConfig+0x4bc>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <UART_SetConfig+0x474>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007855 	.word	0x08007855
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800785a:	e086      	b.n	800796a <UART_SetConfig+0x5a2>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007862:	e082      	b.n	800796a <UART_SetConfig+0x5a2>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800786a:	e07e      	b.n	800796a <UART_SetConfig+0x5a2>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007872:	e07a      	b.n	800796a <UART_SetConfig+0x5a2>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787a:	e076      	b.n	800796a <UART_SetConfig+0x5a2>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007882:	e072      	b.n	800796a <UART_SetConfig+0x5a2>
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e06e      	b.n	800796a <UART_SetConfig+0x5a2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a76      	ldr	r2, [pc, #472]	; (8007a6c <UART_SetConfig+0x6a4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d130      	bne.n	80078f8 <UART_SetConfig+0x530>
 8007896:	4b73      	ldr	r3, [pc, #460]	; (8007a64 <UART_SetConfig+0x69c>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d826      	bhi.n	80078f0 <UART_SetConfig+0x528>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x4e0>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078c1 	.word	0x080078c1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078c6:	e050      	b.n	800796a <UART_SetConfig+0x5a2>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ce:	e04c      	b.n	800796a <UART_SetConfig+0x5a2>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078d6:	e048      	b.n	800796a <UART_SetConfig+0x5a2>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078de:	e044      	b.n	800796a <UART_SetConfig+0x5a2>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078e6:	e040      	b.n	800796a <UART_SetConfig+0x5a2>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ee:	e03c      	b.n	800796a <UART_SetConfig+0x5a2>
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f6:	e038      	b.n	800796a <UART_SetConfig+0x5a2>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a5c      	ldr	r2, [pc, #368]	; (8007a70 <UART_SetConfig+0x6a8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d130      	bne.n	8007964 <UART_SetConfig+0x59c>
 8007902:	4b58      	ldr	r3, [pc, #352]	; (8007a64 <UART_SetConfig+0x69c>)
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d826      	bhi.n	800795c <UART_SetConfig+0x594>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x54c>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	2302      	movs	r3, #2
 800792e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007932:	e01a      	b.n	800796a <UART_SetConfig+0x5a2>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793a:	e016      	b.n	800796a <UART_SetConfig+0x5a2>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007942:	e012      	b.n	800796a <UART_SetConfig+0x5a2>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794a:	e00e      	b.n	800796a <UART_SetConfig+0x5a2>
 800794c:	2320      	movs	r3, #32
 800794e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007952:	e00a      	b.n	800796a <UART_SetConfig+0x5a2>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800795a:	e006      	b.n	800796a <UART_SetConfig+0x5a2>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007962:	e002      	b.n	800796a <UART_SetConfig+0x5a2>
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a40      	ldr	r2, [pc, #256]	; (8007a70 <UART_SetConfig+0x6a8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	f040 80ef 	bne.w	8007b54 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800797a:	2b20      	cmp	r3, #32
 800797c:	dc46      	bgt.n	8007a0c <UART_SetConfig+0x644>
 800797e:	2b02      	cmp	r3, #2
 8007980:	f2c0 8081 	blt.w	8007a86 <UART_SetConfig+0x6be>
 8007984:	3b02      	subs	r3, #2
 8007986:	2b1e      	cmp	r3, #30
 8007988:	d87d      	bhi.n	8007a86 <UART_SetConfig+0x6be>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x5c8>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	08007a13 	.word	0x08007a13
 8007994:	08007a87 	.word	0x08007a87
 8007998:	08007a1b 	.word	0x08007a1b
 800799c:	08007a87 	.word	0x08007a87
 80079a0:	08007a87 	.word	0x08007a87
 80079a4:	08007a87 	.word	0x08007a87
 80079a8:	08007a2b 	.word	0x08007a2b
 80079ac:	08007a87 	.word	0x08007a87
 80079b0:	08007a87 	.word	0x08007a87
 80079b4:	08007a87 	.word	0x08007a87
 80079b8:	08007a87 	.word	0x08007a87
 80079bc:	08007a87 	.word	0x08007a87
 80079c0:	08007a87 	.word	0x08007a87
 80079c4:	08007a87 	.word	0x08007a87
 80079c8:	08007a3b 	.word	0x08007a3b
 80079cc:	08007a87 	.word	0x08007a87
 80079d0:	08007a87 	.word	0x08007a87
 80079d4:	08007a87 	.word	0x08007a87
 80079d8:	08007a87 	.word	0x08007a87
 80079dc:	08007a87 	.word	0x08007a87
 80079e0:	08007a87 	.word	0x08007a87
 80079e4:	08007a87 	.word	0x08007a87
 80079e8:	08007a87 	.word	0x08007a87
 80079ec:	08007a87 	.word	0x08007a87
 80079f0:	08007a87 	.word	0x08007a87
 80079f4:	08007a87 	.word	0x08007a87
 80079f8:	08007a87 	.word	0x08007a87
 80079fc:	08007a87 	.word	0x08007a87
 8007a00:	08007a87 	.word	0x08007a87
 8007a04:	08007a87 	.word	0x08007a87
 8007a08:	08007a79 	.word	0x08007a79
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d036      	beq.n	8007a7e <UART_SetConfig+0x6b6>
 8007a10:	e039      	b.n	8007a86 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a12:	f7fd fd87 	bl	8005524 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a18:	e03b      	b.n	8007a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a1a:	f107 0314 	add.w	r3, r7, #20
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd fd96 	bl	8005550 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a28:	e033      	b.n	8007a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fd fee2 	bl	80057f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a38:	e02b      	b.n	8007a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <UART_SetConfig+0x69c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a46:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <UART_SetConfig+0x69c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	08db      	lsrs	r3, r3, #3
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <UART_SetConfig+0x6ac>)
 8007a52:	fa22 f303 	lsr.w	r3, r2, r3
 8007a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a58:	e01b      	b.n	8007a92 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <UART_SetConfig+0x6ac>)
 8007a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a5e:	e018      	b.n	8007a92 <UART_SetConfig+0x6ca>
 8007a60:	40011400 	.word	0x40011400
 8007a64:	58024400 	.word	0x58024400
 8007a68:	40007800 	.word	0x40007800
 8007a6c:	40007c00 	.word	0x40007c00
 8007a70:	58000c00 	.word	0x58000c00
 8007a74:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a78:	4bc4      	ldr	r3, [pc, #784]	; (8007d8c <UART_SetConfig+0x9c4>)
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a7c:	e009      	b.n	8007a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a84:	e005      	b.n	8007a92 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 81da 	beq.w	8007e4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	4abc      	ldr	r2, [pc, #752]	; (8007d90 <UART_SetConfig+0x9c8>)
 8007aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	4413      	add	r3, r2
 8007ab8:	6a3a      	ldr	r2, [r7, #32]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d305      	bcc.n	8007aca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d903      	bls.n	8007ad2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ad0:	e1bd      	b.n	8007e4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f04f 0100 	mov.w	r1, #0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	4aac      	ldr	r2, [pc, #688]	; (8007d90 <UART_SetConfig+0x9c8>)
 8007ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	f7f8 fe1d 	bl	8000728 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	020b      	lsls	r3, r1, #8
 8007b00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b04:	0202      	lsls	r2, r0, #8
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	6849      	ldr	r1, [r1, #4]
 8007b0a:	0849      	lsrs	r1, r1, #1
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	1814      	adds	r4, r2, r0
 8007b14:	eb43 0501 	adc.w	r5, r3, r1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	4620      	mov	r0, r4
 8007b24:	4629      	mov	r1, r5
 8007b26:	f7f8 fdff 	bl	8000728 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4613      	mov	r3, r2
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b38:	d308      	bcc.n	8007b4c <UART_SetConfig+0x784>
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b40:	d204      	bcs.n	8007b4c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b48:	60da      	str	r2, [r3, #12]
 8007b4a:	e180      	b.n	8007e4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b52:	e17c      	b.n	8007e4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b5c:	f040 80bf 	bne.w	8007cde <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	dc49      	bgt.n	8007bfc <UART_SetConfig+0x834>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	db7c      	blt.n	8007c66 <UART_SetConfig+0x89e>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d87a      	bhi.n	8007c66 <UART_SetConfig+0x89e>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0x7b0>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007c03 	.word	0x08007c03
 8007b7c:	08007c0b 	.word	0x08007c0b
 8007b80:	08007c67 	.word	0x08007c67
 8007b84:	08007c67 	.word	0x08007c67
 8007b88:	08007c13 	.word	0x08007c13
 8007b8c:	08007c67 	.word	0x08007c67
 8007b90:	08007c67 	.word	0x08007c67
 8007b94:	08007c67 	.word	0x08007c67
 8007b98:	08007c23 	.word	0x08007c23
 8007b9c:	08007c67 	.word	0x08007c67
 8007ba0:	08007c67 	.word	0x08007c67
 8007ba4:	08007c67 	.word	0x08007c67
 8007ba8:	08007c67 	.word	0x08007c67
 8007bac:	08007c67 	.word	0x08007c67
 8007bb0:	08007c67 	.word	0x08007c67
 8007bb4:	08007c67 	.word	0x08007c67
 8007bb8:	08007c33 	.word	0x08007c33
 8007bbc:	08007c67 	.word	0x08007c67
 8007bc0:	08007c67 	.word	0x08007c67
 8007bc4:	08007c67 	.word	0x08007c67
 8007bc8:	08007c67 	.word	0x08007c67
 8007bcc:	08007c67 	.word	0x08007c67
 8007bd0:	08007c67 	.word	0x08007c67
 8007bd4:	08007c67 	.word	0x08007c67
 8007bd8:	08007c67 	.word	0x08007c67
 8007bdc:	08007c67 	.word	0x08007c67
 8007be0:	08007c67 	.word	0x08007c67
 8007be4:	08007c67 	.word	0x08007c67
 8007be8:	08007c67 	.word	0x08007c67
 8007bec:	08007c67 	.word	0x08007c67
 8007bf0:	08007c67 	.word	0x08007c67
 8007bf4:	08007c67 	.word	0x08007c67
 8007bf8:	08007c59 	.word	0x08007c59
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	d02e      	beq.n	8007c5e <UART_SetConfig+0x896>
 8007c00:	e031      	b.n	8007c66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c02:	f7fc fd23 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8007c06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c08:	e033      	b.n	8007c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c0a:	f7fc fd35 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8007c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c10:	e02f      	b.n	8007c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c12:	f107 0314 	add.w	r3, r7, #20
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fc9a 	bl	8005550 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c20:	e027      	b.n	8007c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd fde6 	bl	80057f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c30:	e01f      	b.n	8007c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c32:	4b58      	ldr	r3, [pc, #352]	; (8007d94 <UART_SetConfig+0x9cc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c3e:	4b55      	ldr	r3, [pc, #340]	; (8007d94 <UART_SetConfig+0x9cc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	f003 0303 	and.w	r3, r3, #3
 8007c48:	4a53      	ldr	r2, [pc, #332]	; (8007d98 <UART_SetConfig+0x9d0>)
 8007c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c50:	e00f      	b.n	8007c72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007c52:	4b51      	ldr	r3, [pc, #324]	; (8007d98 <UART_SetConfig+0x9d0>)
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c56:	e00c      	b.n	8007c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c58:	4b4c      	ldr	r3, [pc, #304]	; (8007d8c <UART_SetConfig+0x9c4>)
 8007c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c5c:	e009      	b.n	8007c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c64:	e005      	b.n	8007c72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80ea 	beq.w	8007e4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	4a44      	ldr	r2, [pc, #272]	; (8007d90 <UART_SetConfig+0x9c8>)
 8007c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c84:	461a      	mov	r2, r3
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8c:	005a      	lsls	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	2b0f      	cmp	r3, #15
 8007ca6:	d916      	bls.n	8007cd6 <UART_SetConfig+0x90e>
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cae:	d212      	bcs.n	8007cd6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f023 030f 	bic.w	r3, r3, #15
 8007cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	e0bb      	b.n	8007e4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007cdc:	e0b7      	b.n	8007e4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	dc4a      	bgt.n	8007d7c <UART_SetConfig+0x9b4>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f2c0 8086 	blt.w	8007df8 <UART_SetConfig+0xa30>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	f200 8083 	bhi.w	8007df8 <UART_SetConfig+0xa30>
 8007cf2:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <UART_SetConfig+0x930>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d83 	.word	0x08007d83
 8007cfc:	08007d9d 	.word	0x08007d9d
 8007d00:	08007df9 	.word	0x08007df9
 8007d04:	08007df9 	.word	0x08007df9
 8007d08:	08007da5 	.word	0x08007da5
 8007d0c:	08007df9 	.word	0x08007df9
 8007d10:	08007df9 	.word	0x08007df9
 8007d14:	08007df9 	.word	0x08007df9
 8007d18:	08007db5 	.word	0x08007db5
 8007d1c:	08007df9 	.word	0x08007df9
 8007d20:	08007df9 	.word	0x08007df9
 8007d24:	08007df9 	.word	0x08007df9
 8007d28:	08007df9 	.word	0x08007df9
 8007d2c:	08007df9 	.word	0x08007df9
 8007d30:	08007df9 	.word	0x08007df9
 8007d34:	08007df9 	.word	0x08007df9
 8007d38:	08007dc5 	.word	0x08007dc5
 8007d3c:	08007df9 	.word	0x08007df9
 8007d40:	08007df9 	.word	0x08007df9
 8007d44:	08007df9 	.word	0x08007df9
 8007d48:	08007df9 	.word	0x08007df9
 8007d4c:	08007df9 	.word	0x08007df9
 8007d50:	08007df9 	.word	0x08007df9
 8007d54:	08007df9 	.word	0x08007df9
 8007d58:	08007df9 	.word	0x08007df9
 8007d5c:	08007df9 	.word	0x08007df9
 8007d60:	08007df9 	.word	0x08007df9
 8007d64:	08007df9 	.word	0x08007df9
 8007d68:	08007df9 	.word	0x08007df9
 8007d6c:	08007df9 	.word	0x08007df9
 8007d70:	08007df9 	.word	0x08007df9
 8007d74:	08007df9 	.word	0x08007df9
 8007d78:	08007deb 	.word	0x08007deb
 8007d7c:	2b40      	cmp	r3, #64	; 0x40
 8007d7e:	d037      	beq.n	8007df0 <UART_SetConfig+0xa28>
 8007d80:	e03a      	b.n	8007df8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d82:	f7fc fc63 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8007d86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d88:	e03c      	b.n	8007e04 <UART_SetConfig+0xa3c>
 8007d8a:	bf00      	nop
 8007d8c:	003d0900 	.word	0x003d0900
 8007d90:	080114c8 	.word	0x080114c8
 8007d94:	58024400 	.word	0x58024400
 8007d98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d9c:	f7fc fc6c 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8007da0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007da2:	e02f      	b.n	8007e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd fbd1 	bl	8005550 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007db2:	e027      	b.n	8007e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db4:	f107 0308 	add.w	r3, r7, #8
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd fd1d 	bl	80057f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dc2:	e01f      	b.n	8007e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc4:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <UART_SetConfig+0xab0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dd0:	4b29      	ldr	r3, [pc, #164]	; (8007e78 <UART_SetConfig+0xab0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	4a28      	ldr	r2, [pc, #160]	; (8007e7c <UART_SetConfig+0xab4>)
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007de2:	e00f      	b.n	8007e04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <UART_SetConfig+0xab4>)
 8007de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007de8:	e00c      	b.n	8007e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dea:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <UART_SetConfig+0xab8>)
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dee:	e009      	b.n	8007e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007df6:	e005      	b.n	8007e04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007e02:	bf00      	nop
    }

    if (pclk != 0U)
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d021      	beq.n	8007e4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <UART_SetConfig+0xabc>)
 8007e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	085b      	lsrs	r3, r3, #1
 8007e22:	441a      	add	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d908      	bls.n	8007e48 <UART_SetConfig+0xa80>
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3c:	d204      	bcs.n	8007e48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e44:	60da      	str	r2, [r3, #12]
 8007e46:	e002      	b.n	8007e4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3738      	adds	r7, #56	; 0x38
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bdb0      	pop	{r4, r5, r7, pc}
 8007e76:	bf00      	nop
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	03d09000 	.word	0x03d09000
 8007e80:	003d0900 	.word	0x003d0900
 8007e84:	080114c8 	.word	0x080114c8

08007e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01a      	beq.n	8007f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f86:	d10a      	bne.n	8007f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fdc:	f7fa f8bc 	bl	8002158 <HAL_GetTick>
 8007fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d10e      	bne.n	800800e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f82f 	bl	8008062 <UART_WaitOnFlagUntilTimeout>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e025      	b.n	800805a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b04      	cmp	r3, #4
 800801a:	d10e      	bne.n	800803a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800801c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f819 	bl	8008062 <UART_WaitOnFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e00f      	b.n	800805a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2220      	movs	r2, #32
 800803e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	e062      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d05e      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800807c:	f7fa f86c 	bl	8002158 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <UART_WaitOnFlagUntilTimeout+0x30>
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d11d      	bne.n	80080ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0201 	bic.w	r2, r2, #1
 80080b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e045      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d02e      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ea:	d126      	bne.n	800813a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008104:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0201 	bic.w	r2, r2, #1
 8008114:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2220      	movs	r2, #32
 800811a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e00f      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69da      	ldr	r2, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	429a      	cmp	r2, r3
 8008156:	d08d      	beq.n	8008074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_UARTEx_DisableFifoMode+0x16>
 8008174:	2302      	movs	r3, #2
 8008176:	e027      	b.n	80081c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2224      	movs	r2, #36	; 0x24
 8008184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e02d      	b.n	8008248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2224      	movs	r2, #36	; 0x24
 80081f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f84f 	bl	80082cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008264:	2302      	movs	r3, #2
 8008266:	e02d      	b.n	80082c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2224      	movs	r2, #36	; 0x24
 8008274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0201 	bic.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f811 	bl	80082cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d108      	bne.n	80082ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082ec:	e031      	b.n	8008352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082ee:	2310      	movs	r3, #16
 80082f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082f2:	2310      	movs	r3, #16
 80082f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	0e5b      	lsrs	r3, r3, #25
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	0f5b      	lsrs	r3, r3, #29
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	7b3a      	ldrb	r2, [r7, #12]
 800831a:	4911      	ldr	r1, [pc, #68]	; (8008360 <UARTEx_SetNbDataToProcess+0x94>)
 800831c:	5c8a      	ldrb	r2, [r1, r2]
 800831e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008322:	7b3a      	ldrb	r2, [r7, #12]
 8008324:	490f      	ldr	r1, [pc, #60]	; (8008364 <UARTEx_SetNbDataToProcess+0x98>)
 8008326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008328:	fb93 f3f2 	sdiv	r3, r3, r2
 800832c:	b29a      	uxth	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	7b7a      	ldrb	r2, [r7, #13]
 8008338:	4909      	ldr	r1, [pc, #36]	; (8008360 <UARTEx_SetNbDataToProcess+0x94>)
 800833a:	5c8a      	ldrb	r2, [r1, r2]
 800833c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008340:	7b7a      	ldrb	r2, [r7, #13]
 8008342:	4908      	ldr	r1, [pc, #32]	; (8008364 <UARTEx_SetNbDataToProcess+0x98>)
 8008344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008346:	fb93 f3f2 	sdiv	r3, r3, r2
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008352:	bf00      	nop
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	080114e0 	.word	0x080114e0
 8008364:	080114e8 	.word	0x080114e8

08008368 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008368:	b084      	sub	sp, #16
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	f107 001c 	add.w	r0, r7, #28
 8008376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	2b01      	cmp	r3, #1
 800837e:	d120      	bne.n	80083c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68da      	ldr	r2, [r3, #12]
 8008390:	4b2a      	ldr	r3, [pc, #168]	; (800843c <USB_CoreInit+0xd4>)
 8008392:	4013      	ands	r3, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d105      	bne.n	80083b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa60 	bl	800887c <USB_CoreReset>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e01a      	b.n	80083f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa54 	bl	800887c <USB_CoreReset>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80083d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
 80083ea:	e005      	b.n	80083f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d116      	bne.n	800842c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <USB_CoreInit+0xd8>)
 800840e:	4313      	orrs	r3, r2
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f043 0206 	orr.w	r2, r3, #6
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f043 0220 	orr.w	r2, r3, #32
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008438:	b004      	add	sp, #16
 800843a:	4770      	bx	lr
 800843c:	ffbdffbf 	.word	0xffbdffbf
 8008440:	03ee0000 	.word	0x03ee0000

08008444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f023 0201 	bic.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d106      	bne.n	8008492 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]
 8008490:	e00b      	b.n	80084aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	e001      	b.n	80084aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e003      	b.n	80084b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80084aa:	2032      	movs	r0, #50	; 0x32
 80084ac:	f7f9 fe60 	bl	8002170 <HAL_Delay>

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084bc:	b084      	sub	sp, #16
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084d6:	2300      	movs	r3, #0
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	e009      	b.n	80084f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3340      	adds	r3, #64	; 0x40
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	2200      	movs	r2, #0
 80084e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3301      	adds	r3, #1
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b0e      	cmp	r3, #14
 80084f4:	d9f2      	bls.n	80084dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d11c      	bne.n	8008536 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800850a:	f043 0302 	orr.w	r3, r3, #2
 800850e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e005      	b.n	8008542 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008548:	461a      	mov	r2, r3
 800854a:	2300      	movs	r3, #0
 800854c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008554:	4619      	mov	r1, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855c:	461a      	mov	r2, r3
 800855e:	680b      	ldr	r3, [r1, #0]
 8008560:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b01      	cmp	r3, #1
 8008566:	d10c      	bne.n	8008582 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800856e:	2100      	movs	r1, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f949 	bl	8008808 <USB_SetDevSpeed>
 8008576:	e008      	b.n	800858a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008578:	2101      	movs	r1, #1
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f944 	bl	8008808 <USB_SetDevSpeed>
 8008580:	e003      	b.n	800858a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008582:	2103      	movs	r1, #3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f93f 	bl	8008808 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800858a:	2110      	movs	r1, #16
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f8f3 	bl	8008778 <USB_FlushTxFifo>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f911 	bl	80087c4 <USB_FlushRxFifo>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	461a      	mov	r2, r3
 80085b4:	2300      	movs	r3, #0
 80085b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	461a      	mov	r2, r3
 80085c0:	2300      	movs	r3, #0
 80085c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	461a      	mov	r2, r3
 80085cc:	2300      	movs	r3, #0
 80085ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	e043      	b.n	800865e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ec:	d118      	bne.n	8008620 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	461a      	mov	r2, r3
 8008602:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	e013      	b.n	8008632 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008616:	461a      	mov	r2, r3
 8008618:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	e008      	b.n	8008632 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862c:	461a      	mov	r2, r3
 800862e:	2300      	movs	r3, #0
 8008630:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	461a      	mov	r2, r3
 8008640:	2300      	movs	r3, #0
 8008642:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008650:	461a      	mov	r2, r3
 8008652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008656:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	3301      	adds	r3, #1
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	429a      	cmp	r2, r3
 8008664:	d3b7      	bcc.n	80085d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008666:	2300      	movs	r3, #0
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	e043      	b.n	80086f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800867e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008682:	d118      	bne.n	80086b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	461a      	mov	r2, r3
 8008698:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	e013      	b.n	80086c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ac:	461a      	mov	r2, r3
 80086ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	e008      	b.n	80086c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c2:	461a      	mov	r2, r3
 80086c4:	2300      	movs	r3, #0
 80086c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	461a      	mov	r2, r3
 80086d6:	2300      	movs	r3, #0
 80086d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	461a      	mov	r2, r3
 80086e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3301      	adds	r3, #1
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d3b7      	bcc.n	800866c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800870a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800870e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800871c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	2b00      	cmp	r3, #0
 8008722:	d105      	bne.n	8008730 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f043 0210 	orr.w	r2, r3, #16
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699a      	ldr	r2, [r3, #24]
 8008734:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <USB_DevInit+0x2b4>)
 8008736:	4313      	orrs	r3, r2
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f043 0208 	orr.w	r2, r3, #8
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800874e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d105      	bne.n	8008760 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <USB_DevInit+0x2b8>)
 800875a:	4313      	orrs	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800876c:	b004      	add	sp, #16
 800876e:	4770      	bx	lr
 8008770:	803c3800 	.word	0x803c3800
 8008774:	40000004 	.word	0x40000004

08008778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	019b      	lsls	r3, r3, #6
 800878a:	f043 0220 	orr.w	r2, r3, #32
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <USB_FlushTxFifo+0x48>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d901      	bls.n	80087a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e006      	b.n	80087b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d0f0      	beq.n	8008792 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	00030d40 	.word	0x00030d40

080087c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2210      	movs	r2, #16
 80087d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4a09      	ldr	r2, [pc, #36]	; (8008804 <USB_FlushRxFifo+0x40>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d901      	bls.n	80087e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e006      	b.n	80087f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b10      	cmp	r3, #16
 80087f2:	d0f0      	beq.n	80087d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	00030d40 	.word	0x00030d40

08008808 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008828:	4313      	orrs	r3, r2
 800882a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008854:	f023 0303 	bic.w	r3, r3, #3
 8008858:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008868:	f043 0302 	orr.w	r3, r3, #2
 800886c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <USB_CoreReset+0x64>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d901      	bls.n	800889a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e01b      	b.n	80088d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	daf2      	bge.n	8008888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f043 0201 	orr.w	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <USB_CoreReset+0x64>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d901      	bls.n	80088c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e006      	b.n	80088d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d0f0      	beq.n	80088b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	00030d40 	.word	0x00030d40

080088e4 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 80088ee:	1df9      	adds	r1, r7, #7
 80088f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088f4:	2201      	movs	r2, #1
 80088f6:	4803      	ldr	r0, [pc, #12]	; (8008904 <DEV_SPI_WRite+0x20>)
 80088f8:	f7fd fb38 	bl	8005f6c <HAL_SPI_Transmit>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	2400a594 	.word	0x2400a594

08008908 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800890c:	2201      	movs	r2, #1
 800890e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008912:	480a      	ldr	r0, [pc, #40]	; (800893c <DEV_Module_Init+0x34>)
 8008914:	f7fa fbc2 	bl	800309c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8008918:	2201      	movs	r2, #1
 800891a:	2140      	movs	r1, #64	; 0x40
 800891c:	4807      	ldr	r0, [pc, #28]	; (800893c <DEV_Module_Init+0x34>)
 800891e:	f7fa fbbd 	bl	800309c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8008922:	2201      	movs	r2, #1
 8008924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008928:	4805      	ldr	r0, [pc, #20]	; (8008940 <DEV_Module_Init+0x38>)
 800892a:	f7fa fbb7 	bl	800309c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800892e:	2100      	movs	r1, #0
 8008930:	4804      	ldr	r0, [pc, #16]	; (8008944 <DEV_Module_Init+0x3c>)
 8008932:	f7fd fe4d 	bl	80065d0 <HAL_TIM_PWM_Start>
		return 0;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	58021800 	.word	0x58021800
 8008940:	58021400 	.word	0x58021400
 8008944:	2400a61c 	.word	0x2400a61c

08008948 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8008948:	b590      	push	{r4, r7, lr}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	4611      	mov	r1, r2
 8008954:	461a      	mov	r2, r3
 8008956:	4623      	mov	r3, r4
 8008958:	80fb      	strh	r3, [r7, #6]
 800895a:	4603      	mov	r3, r0
 800895c:	80bb      	strh	r3, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	807b      	strh	r3, [r7, #2]
 8008962:	4613      	mov	r3, r2
 8008964:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8008966:	4a1c      	ldr	r2, [pc, #112]	; (80089d8 <Paint_NewImage+0x90>)
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800896c:	4a1a      	ldr	r2, [pc, #104]	; (80089d8 <Paint_NewImage+0x90>)
 800896e:	88bb      	ldrh	r3, [r7, #4]
 8008970:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8008972:	4a19      	ldr	r2, [pc, #100]	; (80089d8 <Paint_NewImage+0x90>)
 8008974:	883b      	ldrh	r3, [r7, #0]
 8008976:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8008978:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <Paint_NewImage+0x90>)
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <Paint_NewImage+0x90>)
 8008980:	88bb      	ldrh	r3, [r7, #4]
 8008982:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8008984:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <Paint_NewImage+0x90>)
 8008986:	8a5b      	ldrh	r3, [r3, #18]
 8008988:	b29b      	uxth	r3, r3
 800898a:	4619      	mov	r1, r3
 800898c:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <Paint_NewImage+0x90>)
 800898e:	8a9b      	ldrh	r3, [r3, #20]
 8008990:	b29b      	uxth	r3, r3
 8008992:	461a      	mov	r2, r3
 8008994:	4811      	ldr	r0, [pc, #68]	; (80089dc <Paint_NewImage+0x94>)
 8008996:	f004 ff21 	bl	800d7dc <iprintf>
   
    Paint.Rotate = Rotate;
 800899a:	4a0f      	ldr	r2, [pc, #60]	; (80089d8 <Paint_NewImage+0x90>)
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <Paint_NewImage+0x90>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80089a6:	887b      	ldrh	r3, [r7, #2]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <Paint_NewImage+0x6a>
 80089ac:	887b      	ldrh	r3, [r7, #2]
 80089ae:	2bb4      	cmp	r3, #180	; 0xb4
 80089b0:	d106      	bne.n	80089c0 <Paint_NewImage+0x78>
        Paint.Width = Width;
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <Paint_NewImage+0x90>)
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80089b8:	4a07      	ldr	r2, [pc, #28]	; (80089d8 <Paint_NewImage+0x90>)
 80089ba:	88bb      	ldrh	r3, [r7, #4]
 80089bc:	80d3      	strh	r3, [r2, #6]
 80089be:	e006      	b.n	80089ce <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80089c0:	4a05      	ldr	r2, [pc, #20]	; (80089d8 <Paint_NewImage+0x90>)
 80089c2:	88bb      	ldrh	r3, [r7, #4]
 80089c4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80089c6:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <Paint_NewImage+0x90>)
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	80d3      	strh	r3, [r2, #6]
    }
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd90      	pop	{r4, r7, pc}
 80089d6:	bf00      	nop
 80089d8:	2400ab08 	.word	0x2400ab08
 80089dc:	08010fd8 	.word	0x08010fd8

080089e0 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80089e8:	4a04      	ldr	r2, [pc, #16]	; (80089fc <Paint_SetClearFuntion+0x1c>)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6013      	str	r3, [r2, #0]
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	2400ab20 	.word	0x2400ab20

08008a00 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8008a08:	4a04      	ldr	r2, [pc, #16]	; (8008a1c <Paint_SetDisplayFuntion+0x1c>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6013      	str	r3, [r2, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	2400ab04 	.word	0x2400ab04

08008a20 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	80fb      	strh	r3, [r7, #6]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	80bb      	strh	r3, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8008a32:	4b50      	ldr	r3, [pc, #320]	; (8008b74 <Paint_SetPixel+0x154>)
 8008a34:	889b      	ldrh	r3, [r3, #4]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d805      	bhi.n	8008a4a <Paint_SetPixel+0x2a>
 8008a3e:	4b4d      	ldr	r3, [pc, #308]	; (8008b74 <Paint_SetPixel+0x154>)
 8008a40:	88db      	ldrh	r3, [r3, #6]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	88ba      	ldrh	r2, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d903      	bls.n	8008a52 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8008a4a:	484b      	ldr	r0, [pc, #300]	; (8008b78 <Paint_SetPixel+0x158>)
 8008a4c:	f004 ff4c 	bl	800d8e8 <puts>
        return;
 8008a50:	e08c      	b.n	8008b6c <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8008a52:	4b48      	ldr	r3, [pc, #288]	; (8008b74 <Paint_SetPixel+0x154>)
 8008a54:	89db      	ldrh	r3, [r3, #14]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008a5c:	d02d      	beq.n	8008aba <Paint_SetPixel+0x9a>
 8008a5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008a62:	f300 8080 	bgt.w	8008b66 <Paint_SetPixel+0x146>
 8008a66:	2bb4      	cmp	r3, #180	; 0xb4
 8008a68:	d016      	beq.n	8008a98 <Paint_SetPixel+0x78>
 8008a6a:	2bb4      	cmp	r3, #180	; 0xb4
 8008a6c:	dc7b      	bgt.n	8008b66 <Paint_SetPixel+0x146>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <Paint_SetPixel+0x58>
 8008a72:	2b5a      	cmp	r3, #90	; 0x5a
 8008a74:	d005      	beq.n	8008a82 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8008a76:	e076      	b.n	8008b66 <Paint_SetPixel+0x146>
        X = Xpoint;
 8008a78:	88fb      	ldrh	r3, [r7, #6]
 8008a7a:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8008a7c:	88bb      	ldrh	r3, [r7, #4]
 8008a7e:	81bb      	strh	r3, [r7, #12]
        break;
 8008a80:	e026      	b.n	8008ad0 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8008a82:	4b3c      	ldr	r3, [pc, #240]	; (8008b74 <Paint_SetPixel+0x154>)
 8008a84:	891b      	ldrh	r3, [r3, #8]
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	88bb      	ldrh	r3, [r7, #4]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	81bb      	strh	r3, [r7, #12]
        break;
 8008a96:	e01b      	b.n	8008ad0 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8008a98:	4b36      	ldr	r3, [pc, #216]	; (8008b74 <Paint_SetPixel+0x154>)
 8008a9a:	891b      	ldrh	r3, [r3, #8]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8008aa8:	4b32      	ldr	r3, [pc, #200]	; (8008b74 <Paint_SetPixel+0x154>)
 8008aaa:	895b      	ldrh	r3, [r3, #10]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	88bb      	ldrh	r3, [r7, #4]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	81bb      	strh	r3, [r7, #12]
        break;
 8008ab8:	e00a      	b.n	8008ad0 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8008aba:	88bb      	ldrh	r3, [r7, #4]
 8008abc:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8008abe:	4b2d      	ldr	r3, [pc, #180]	; (8008b74 <Paint_SetPixel+0x154>)
 8008ac0:	895b      	ldrh	r3, [r3, #10]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	88fb      	ldrh	r3, [r7, #6]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	81bb      	strh	r3, [r7, #12]
        break;
 8008ace:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8008ad0:	4b28      	ldr	r3, [pc, #160]	; (8008b74 <Paint_SetPixel+0x154>)
 8008ad2:	8a1b      	ldrh	r3, [r3, #16]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d847      	bhi.n	8008b6a <Paint_SetPixel+0x14a>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <Paint_SetPixel+0xc0>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b37 	.word	0x08008b37
 8008ae4:	08008af1 	.word	0x08008af1
 8008ae8:	08008b03 	.word	0x08008b03
 8008aec:	08008b15 	.word	0x08008b15
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8008af0:	4b20      	ldr	r3, [pc, #128]	; (8008b74 <Paint_SetPixel+0x154>)
 8008af2:	891b      	ldrh	r3, [r3, #8]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	89fb      	ldrh	r3, [r7, #14]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b01      	subs	r3, #1
 8008afe:	81fb      	strh	r3, [r7, #14]
        break;
 8008b00:	e01a      	b.n	8008b38 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8008b02:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <Paint_SetPixel+0x154>)
 8008b04:	895b      	ldrh	r3, [r3, #10]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	89bb      	ldrh	r3, [r7, #12]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	81bb      	strh	r3, [r7, #12]
        break;
 8008b12:	e011      	b.n	8008b38 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <Paint_SetPixel+0x154>)
 8008b16:	891b      	ldrh	r3, [r3, #8]
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	89fb      	ldrh	r3, [r7, #14]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b01      	subs	r3, #1
 8008b22:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8008b24:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <Paint_SetPixel+0x154>)
 8008b26:	895b      	ldrh	r3, [r3, #10]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	89bb      	ldrh	r3, [r7, #12]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	81bb      	strh	r3, [r7, #12]
        break;
 8008b34:	e000      	b.n	8008b38 <Paint_SetPixel+0x118>
        break;
 8008b36:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8008b38:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <Paint_SetPixel+0x154>)
 8008b3a:	891b      	ldrh	r3, [r3, #8]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	89fa      	ldrh	r2, [r7, #14]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d805      	bhi.n	8008b50 <Paint_SetPixel+0x130>
 8008b44:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <Paint_SetPixel+0x154>)
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	89ba      	ldrh	r2, [r7, #12]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d903      	bls.n	8008b58 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8008b50:	4809      	ldr	r0, [pc, #36]	; (8008b78 <Paint_SetPixel+0x158>)
 8008b52:	f004 fec9 	bl	800d8e8 <puts>
        return;
 8008b56:	e009      	b.n	8008b6c <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8008b58:	4b08      	ldr	r3, [pc, #32]	; (8008b7c <Paint_SetPixel+0x15c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	887a      	ldrh	r2, [r7, #2]
 8008b5e:	89b9      	ldrh	r1, [r7, #12]
 8008b60:	89f8      	ldrh	r0, [r7, #14]
 8008b62:	4798      	blx	r3
 8008b64:	e002      	b.n	8008b6c <Paint_SetPixel+0x14c>
        return;
 8008b66:	bf00      	nop
 8008b68:	e000      	b.n	8008b6c <Paint_SetPixel+0x14c>
        return;
 8008b6a:	bf00      	nop
}
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	2400ab08 	.word	0x2400ab08
 8008b78:	080110d8 	.word	0x080110d8
 8008b7c:	2400ab04 	.word	0x2400ab04

08008b80 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8008b8a:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <Paint_Clear+0x1c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	2400ab20 	.word	0x2400ab20

08008ba0 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8008ba0:	b590      	push	{r4, r7, lr}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	4611      	mov	r1, r2
 8008bac:	461a      	mov	r2, r3
 8008bae:	4623      	mov	r3, r4
 8008bb0:	80fb      	strh	r3, [r7, #6]
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	80bb      	strh	r3, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	807b      	strh	r3, [r7, #2]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 8008bbe:	88bb      	ldrh	r3, [r7, #4]
 8008bc0:	81bb      	strh	r3, [r7, #12]
 8008bc2:	e012      	b.n	8008bea <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	81fb      	strh	r3, [r7, #14]
 8008bc8:	e008      	b.n	8008bdc <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 8008bca:	8c3a      	ldrh	r2, [r7, #32]
 8008bcc:	89b9      	ldrh	r1, [r7, #12]
 8008bce:	89fb      	ldrh	r3, [r7, #14]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff ff25 	bl	8008a20 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 8008bd6:	89fb      	ldrh	r3, [r7, #14]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	81fb      	strh	r3, [r7, #14]
 8008bdc:	89fa      	ldrh	r2, [r7, #14]
 8008bde:	887b      	ldrh	r3, [r7, #2]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3f2      	bcc.n	8008bca <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 8008be4:	89bb      	ldrh	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	81bb      	strh	r3, [r7, #12]
 8008bea:	89ba      	ldrh	r2, [r7, #12]
 8008bec:	883b      	ldrh	r3, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d3e8      	bcc.n	8008bc4 <Paint_ClearWindows+0x24>
        }
    }
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}

08008bfc <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	4603      	mov	r3, r0
 8008c06:	81fb      	strh	r3, [r7, #14]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	81bb      	strh	r3, [r7, #12]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 8008c10:	4b3f      	ldr	r3, [pc, #252]	; (8008d10 <Paint_DrawChar+0x114>)
 8008c12:	889b      	ldrh	r3, [r3, #4]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	89fa      	ldrh	r2, [r7, #14]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d805      	bhi.n	8008c28 <Paint_DrawChar+0x2c>
 8008c1c:	4b3c      	ldr	r3, [pc, #240]	; (8008d10 <Paint_DrawChar+0x114>)
 8008c1e:	88db      	ldrh	r3, [r3, #6]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	89ba      	ldrh	r2, [r7, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d903      	bls.n	8008c30 <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8008c28:	483a      	ldr	r0, [pc, #232]	; (8008d14 <Paint_DrawChar+0x118>)
 8008c2a:	f004 fe5d 	bl	800d8e8 <puts>
        return;
 8008c2e:	e06b      	b.n	8008d08 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	3b20      	subs	r3, #32
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	88d2      	ldrh	r2, [r2, #6]
 8008c38:	fb02 f303 	mul.w	r3, r2, r3
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	8892      	ldrh	r2, [r2, #4]
 8008c40:	08d2      	lsrs	r2, r2, #3
 8008c42:	b292      	uxth	r2, r2
 8008c44:	4611      	mov	r1, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	8892      	ldrh	r2, [r2, #4]
 8008c4a:	f002 0207 	and.w	r2, r2, #7
 8008c4e:	b292      	uxth	r2, r2
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	bf14      	ite	ne
 8008c54:	2201      	movne	r2, #1
 8008c56:	2200      	moveq	r2, #0
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	440a      	add	r2, r1
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	4413      	add	r3, r2
 8008c6a:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	837b      	strh	r3, [r7, #26]
 8008c70:	e045      	b.n	8008cfe <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 8008c72:	2300      	movs	r3, #0
 8008c74:	833b      	strh	r3, [r7, #24]
 8008c76:	e030      	b.n	8008cda <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	8b3b      	ldrh	r3, [r7, #24]
 8008c80:	f003 0307 	and.w	r3, r3, #7
 8008c84:	2280      	movs	r2, #128	; 0x80
 8008c86:	fa42 f303 	asr.w	r3, r2, r3
 8008c8a:	400b      	ands	r3, r1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00c      	beq.n	8008caa <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8008c90:	89fa      	ldrh	r2, [r7, #14]
 8008c92:	8b3b      	ldrh	r3, [r7, #24]
 8008c94:	4413      	add	r3, r2
 8008c96:	b298      	uxth	r0, r3
 8008c98:	89ba      	ldrh	r2, [r7, #12]
 8008c9a:	8b7b      	ldrh	r3, [r7, #26]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f7ff febc 	bl	8008a20 <Paint_SetPixel>
 8008ca8:	e00b      	b.n	8008cc2 <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8008caa:	89fa      	ldrh	r2, [r7, #14]
 8008cac:	8b3b      	ldrh	r3, [r7, #24]
 8008cae:	4413      	add	r3, r2
 8008cb0:	b298      	uxth	r0, r3
 8008cb2:	89ba      	ldrh	r2, [r7, #12]
 8008cb4:	8b7b      	ldrh	r3, [r7, #26]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f7ff feaf 	bl	8008a20 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8008cc2:	8b3b      	ldrh	r3, [r7, #24]
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b07      	cmp	r3, #7
 8008ccc:	d102      	bne.n	8008cd4 <Paint_DrawChar+0xd8>
            {
                ptr++;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 8008cd4:	8b3b      	ldrh	r3, [r7, #24]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	833b      	strh	r3, [r7, #24]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	889b      	ldrh	r3, [r3, #4]
 8008cde:	8b3a      	ldrh	r2, [r7, #24]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d3c9      	bcc.n	8008c78 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	889b      	ldrh	r3, [r3, #4]
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <Paint_DrawChar+0xfc>
        {
            ptr++;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 8008cf8:	8b7b      	ldrh	r3, [r7, #26]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	837b      	strh	r3, [r7, #26]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	88db      	ldrh	r3, [r3, #6]
 8008d02:	8b7a      	ldrh	r2, [r7, #26]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3b4      	bcc.n	8008c72 <Paint_DrawChar+0x76>
        }
    }// Write all
}
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	2400ab08 	.word	0x2400ab08
 8008d14:	080111f4 	.word	0x080111f4

08008d18 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	60ba      	str	r2, [r7, #8]
 8008d20:	607b      	str	r3, [r7, #4]
 8008d22:	4603      	mov	r3, r0
 8008d24:	81fb      	strh	r3, [r7, #14]
 8008d26:	460b      	mov	r3, r1
 8008d28:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8008d2e:	89bb      	ldrh	r3, [r7, #12]
 8008d30:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8008d32:	4b23      	ldr	r3, [pc, #140]	; (8008dc0 <Paint_DrawString_EN+0xa8>)
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	89fa      	ldrh	r2, [r7, #14]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d805      	bhi.n	8008d4a <Paint_DrawString_EN+0x32>
 8008d3e:	4b20      	ldr	r3, [pc, #128]	; (8008dc0 <Paint_DrawString_EN+0xa8>)
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	89ba      	ldrh	r2, [r7, #12]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d933      	bls.n	8008db2 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8008d4a:	481e      	ldr	r0, [pc, #120]	; (8008dc4 <Paint_DrawString_EN+0xac>)
 8008d4c:	f004 fdcc 	bl	800d8e8 <puts>
        return;
 8008d50:	e033      	b.n	8008dba <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 8008d52:	8afb      	ldrh	r3, [r7, #22]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	8892      	ldrh	r2, [r2, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	4a19      	ldr	r2, [pc, #100]	; (8008dc0 <Paint_DrawString_EN+0xa8>)
 8008d5c:	8892      	ldrh	r2, [r2, #4]
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	4293      	cmp	r3, r2
 8008d62:	dd06      	ble.n	8008d72 <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	88da      	ldrh	r2, [r3, #6]
 8008d6c:	8abb      	ldrh	r3, [r7, #20]
 8008d6e:	4413      	add	r3, r2
 8008d70:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 8008d72:	8abb      	ldrh	r3, [r7, #20]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	88d2      	ldrh	r2, [r2, #6]
 8008d78:	4413      	add	r3, r2
 8008d7a:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <Paint_DrawString_EN+0xa8>)
 8008d7c:	88d2      	ldrh	r2, [r2, #6]
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	4293      	cmp	r3, r2
 8008d82:	dd03      	ble.n	8008d8c <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8008d88:	89bb      	ldrh	r3, [r7, #12]
 8008d8a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	781a      	ldrb	r2, [r3, #0]
 8008d90:	8ab9      	ldrh	r1, [r7, #20]
 8008d92:	8af8      	ldrh	r0, [r7, #22]
 8008d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	8c3b      	ldrh	r3, [r7, #32]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f7ff ff2d 	bl	8008bfc <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	889a      	ldrh	r2, [r3, #4]
 8008dac:	8afb      	ldrh	r3, [r7, #22]
 8008dae:	4413      	add	r3, r2
 8008db0:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1cb      	bne.n	8008d52 <Paint_DrawString_EN+0x3a>
    }
}
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	2400ab08 	.word	0x2400ab08
 8008dc4:	08011234 	.word	0x08011234

08008dc8 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b0cb      	sub	sp, #300	; 0x12c
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	4604      	mov	r4, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	f107 0108 	add.w	r1, r7, #8
 8008dd6:	ed81 0b00 	vstr	d0, [r1]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	1d3a      	adds	r2, r7, #4
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	f107 0316 	add.w	r3, r7, #22
 8008de4:	4622      	mov	r2, r4
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	f107 0314 	add.w	r3, r7, #20
 8008dec:	4602      	mov	r2, r0
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	f107 0313 	add.w	r3, r7, #19
 8008df4:	460a      	mov	r2, r1
 8008df6:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 8008df8:	f107 031c 	add.w	r3, r7, #28
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	3304      	adds	r3, #4
 8008e02:	22fb      	movs	r2, #251	; 0xfb
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f003 fc96 	bl	800c738 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 8008e0c:	f107 0313 	add.w	r3, r7, #19
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	1c99      	adds	r1, r3, #2
 8008e14:	f107 001c 	add.w	r0, r7, #28
 8008e18:	f107 0308 	add.w	r3, r7, #8
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	e9cd 2300 	strd	r2, r3, [sp]
 8008e24:	460a      	mov	r2, r1
 8008e26:	4930      	ldr	r1, [pc, #192]	; (8008ee8 <Paint_DrawFloatNum+0x120>)
 8008e28:	f004 fdb0 	bl	800d98c <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 8008e2c:	f107 031c 	add.w	r3, r7, #28
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f7 fa5f 	bl	80002f4 <strlen>
 8008e36:	4603      	mov	r3, r0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f003 fc45 	bl	800c6c8 <malloc>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 8008e44:	f107 031c 	add.w	r3, r7, #28
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7f7 fa53 	bl	80002f4 <strlen>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	1e9a      	subs	r2, r3, #2
 8008e52:	f107 031c 	add.w	r3, r7, #28
 8008e56:	4619      	mov	r1, r3
 8008e58:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008e5c:	f003 fc44 	bl	800c6e8 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 8008e60:	f107 031c 	add.w	r3, r7, #28
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7f7 fa45 	bl	80002f4 <strlen>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	3b02      	subs	r3, #2
 8008e6e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008e72:	4413      	add	r3, r2
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 8008e78:	f107 031c 	add.w	r3, r7, #28
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f7 fa39 	bl	80002f4 <strlen>
 8008e82:	4603      	mov	r3, r0
 8008e84:	3b03      	subs	r3, #3
 8008e86:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008e8a:	4413      	add	r3, r2
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e90:	d10b      	bne.n	8008eaa <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 8008e92:	f107 031c 	add.w	r3, r7, #28
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f7 fa2c 	bl	80002f4 <strlen>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	3b03      	subs	r3, #3
 8008ea0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008ea4:	4413      	add	r3, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	f107 0214 	add.w	r2, r7, #20
 8008eb0:	8811      	ldrh	r1, [r2, #0]
 8008eb2:	f107 0216 	add.w	r2, r7, #22
 8008eb6:	8810      	ldrh	r0, [r2, #0]
 8008eb8:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8008ebc:	9201      	str	r2, [sp, #4]
 8008ebe:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8008ec2:	9200      	str	r2, [sp, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008eca:	f7ff ff25 	bl	8008d18 <Paint_DrawString_EN>
    free(pStr);
 8008ece:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008ed2:	f003 fc01 	bl	800c6d8 <free>
    pStr=NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 8008edc:	bf00      	nop
 8008ede:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	080112b8 	.word	0x080112b8

08008eec <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8008eec:	b590      	push	{r4, r7, lr}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	817b      	strh	r3, [r7, #10]
 8008efe:	460b      	mov	r3, r1
 8008f00:	813b      	strh	r3, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	e049      	b.n	8008fa0 <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	e03f      	b.n	8008f92 <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8008f12:	897a      	ldrh	r2, [r7, #10]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	4a26      	ldr	r2, [pc, #152]	; (8008fb4 <Paint_DrawImage+0xc8>)
 8008f1a:	8912      	ldrh	r2, [r2, #8]
 8008f1c:	b292      	uxth	r2, r2
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	da34      	bge.n	8008f8c <Paint_DrawImage+0xa0>
 8008f22:	893a      	ldrh	r2, [r7, #8]
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	4413      	add	r3, r2
 8008f28:	4a22      	ldr	r2, [pc, #136]	; (8008fb4 <Paint_DrawImage+0xc8>)
 8008f2a:	8952      	ldrh	r2, [r2, #10]
 8008f2c:	b292      	uxth	r2, r2
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	da2c      	bge.n	8008f8c <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	897b      	ldrh	r3, [r7, #10]
 8008f38:	4413      	add	r3, r2
 8008f3a:	b298      	uxth	r0, r3
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	893b      	ldrh	r3, [r7, #8]
 8008f42:	4413      	add	r3, r2
 8008f44:	b29c      	uxth	r4, r3
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	fb02 f303 	mul.w	r3, r2, r3
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	461a      	mov	r2, r3
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4413      	add	r3, r2
 8008f58:	3301      	adds	r3, #1
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	021b      	lsls	r3, r3, #8
 8008f62:	b21a      	sxth	r2, r3
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	6939      	ldr	r1, [r7, #16]
 8008f68:	fb01 f303 	mul.w	r3, r1, r3
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	4619      	mov	r1, r3
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	440b      	add	r3, r1
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	440b      	add	r3, r1
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b21b      	sxth	r3, r3
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	4621      	mov	r1, r4
 8008f88:	f7ff fd4a 	bl	8008a20 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	dbbb      	blt.n	8008f12 <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	613b      	str	r3, [r7, #16]
 8008fa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	dbb1      	blt.n	8008f0c <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd90      	pop	{r4, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2400ab08 	.word	0x2400ab08

08008fb8 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fc2:	480d      	ldr	r0, [pc, #52]	; (8008ff8 <LCD_1IN8_Reset+0x40>)
 8008fc4:	f7fa f86a 	bl	800309c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8008fc8:	2064      	movs	r0, #100	; 0x64
 8008fca:	f7f9 f8d1 	bl	8002170 <HAL_Delay>
    LCD_1IN8_RST_0;
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fd4:	4808      	ldr	r0, [pc, #32]	; (8008ff8 <LCD_1IN8_Reset+0x40>)
 8008fd6:	f7fa f861 	bl	800309c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8008fda:	2064      	movs	r0, #100	; 0x64
 8008fdc:	f7f9 f8c8 	bl	8002170 <HAL_Delay>
    LCD_1IN8_RST_1;
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fe6:	4804      	ldr	r0, [pc, #16]	; (8008ff8 <LCD_1IN8_Reset+0x40>)
 8008fe8:	f7fa f858 	bl	800309c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8008fec:	2064      	movs	r0, #100	; 0x64
 8008fee:	f7f9 f8bf 	bl	8002170 <HAL_Delay>
}
 8008ff2:	bf00      	nop
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	58021400 	.word	0x58021400

08008ffc <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 8009006:	2200      	movs	r2, #0
 8009008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800900c:	4807      	ldr	r0, [pc, #28]	; (800902c <LCD_1IN8_WriteReg+0x30>)
 800900e:	f7fa f845 	bl	800309c <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8009012:	2200      	movs	r2, #0
 8009014:	2140      	movs	r1, #64	; 0x40
 8009016:	4805      	ldr	r0, [pc, #20]	; (800902c <LCD_1IN8_WriteReg+0x30>)
 8009018:	f7fa f840 	bl	800309c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff fc60 	bl	80088e4 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	58021800 	.word	0x58021800

08009030 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800903a:	2201      	movs	r2, #1
 800903c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009040:	480a      	ldr	r0, [pc, #40]	; (800906c <LCD_1IN8_WriteData_8Bit+0x3c>)
 8009042:	f7fa f82b 	bl	800309c <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8009046:	2200      	movs	r2, #0
 8009048:	2140      	movs	r1, #64	; 0x40
 800904a:	4808      	ldr	r0, [pc, #32]	; (800906c <LCD_1IN8_WriteData_8Bit+0x3c>)
 800904c:	f7fa f826 	bl	800309c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff fc46 	bl	80088e4 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 8009058:	2201      	movs	r2, #1
 800905a:	2140      	movs	r1, #64	; 0x40
 800905c:	4803      	ldr	r0, [pc, #12]	; (800906c <LCD_1IN8_WriteData_8Bit+0x3c>)
 800905e:	f7fa f81d 	bl	800309c <HAL_GPIO_WritePin>
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	58021800 	.word	0x58021800

08009070 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 800907c:	2201      	movs	r2, #1
 800907e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009082:	480f      	ldr	r0, [pc, #60]	; (80090c0 <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 8009084:	f7fa f80a 	bl	800309c <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	e00e      	b.n	80090ac <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800908e:	88fb      	ldrh	r3, [r7, #6]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	b29b      	uxth	r3, r3
 8009094:	b2db      	uxtb	r3, r3
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fc24 	bl	80088e4 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7ff fc1f 	bl	80088e4 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3301      	adds	r3, #1
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3ec      	bcc.n	800908e <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	58021800 	.word	0x58021800

080090c4 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 80090c8:	20b1      	movs	r0, #177	; 0xb1
 80090ca:	f7ff ff97 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80090ce:	2001      	movs	r0, #1
 80090d0:	f7ff ffae 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80090d4:	202c      	movs	r0, #44	; 0x2c
 80090d6:	f7ff ffab 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80090da:	202d      	movs	r0, #45	; 0x2d
 80090dc:	f7ff ffa8 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 80090e0:	20b2      	movs	r0, #178	; 0xb2
 80090e2:	f7ff ff8b 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80090e6:	2001      	movs	r0, #1
 80090e8:	f7ff ffa2 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80090ec:	202c      	movs	r0, #44	; 0x2c
 80090ee:	f7ff ff9f 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80090f2:	202d      	movs	r0, #45	; 0x2d
 80090f4:	f7ff ff9c 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 80090f8:	20b3      	movs	r0, #179	; 0xb3
 80090fa:	f7ff ff7f 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80090fe:	2001      	movs	r0, #1
 8009100:	f7ff ff96 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009104:	202c      	movs	r0, #44	; 0x2c
 8009106:	f7ff ff93 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800910a:	202d      	movs	r0, #45	; 0x2d
 800910c:	f7ff ff90 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 8009110:	2001      	movs	r0, #1
 8009112:	f7ff ff8d 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009116:	202c      	movs	r0, #44	; 0x2c
 8009118:	f7ff ff8a 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800911c:	202d      	movs	r0, #45	; 0x2d
 800911e:	f7ff ff87 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 8009122:	20b4      	movs	r0, #180	; 0xb4
 8009124:	f7ff ff6a 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 8009128:	2007      	movs	r0, #7
 800912a:	f7ff ff81 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800912e:	20c0      	movs	r0, #192	; 0xc0
 8009130:	f7ff ff64 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 8009134:	20a2      	movs	r0, #162	; 0xa2
 8009136:	f7ff ff7b 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800913a:	2002      	movs	r0, #2
 800913c:	f7ff ff78 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 8009140:	2084      	movs	r0, #132	; 0x84
 8009142:	f7ff ff75 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 8009146:	20c1      	movs	r0, #193	; 0xc1
 8009148:	f7ff ff58 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 800914c:	20c5      	movs	r0, #197	; 0xc5
 800914e:	f7ff ff6f 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 8009152:	20c2      	movs	r0, #194	; 0xc2
 8009154:	f7ff ff52 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 8009158:	200a      	movs	r0, #10
 800915a:	f7ff ff69 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800915e:	2000      	movs	r0, #0
 8009160:	f7ff ff66 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 8009164:	20c3      	movs	r0, #195	; 0xc3
 8009166:	f7ff ff49 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800916a:	208a      	movs	r0, #138	; 0x8a
 800916c:	f7ff ff60 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 8009170:	202a      	movs	r0, #42	; 0x2a
 8009172:	f7ff ff5d 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 8009176:	20c4      	movs	r0, #196	; 0xc4
 8009178:	f7ff ff40 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800917c:	208a      	movs	r0, #138	; 0x8a
 800917e:	f7ff ff57 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 8009182:	20ee      	movs	r0, #238	; 0xee
 8009184:	f7ff ff54 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8009188:	20c5      	movs	r0, #197	; 0xc5
 800918a:	f7ff ff37 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800918e:	200e      	movs	r0, #14
 8009190:	f7ff ff4e 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8009194:	20e0      	movs	r0, #224	; 0xe0
 8009196:	f7ff ff31 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800919a:	200f      	movs	r0, #15
 800919c:	f7ff ff48 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 80091a0:	201a      	movs	r0, #26
 80091a2:	f7ff ff45 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80091a6:	200f      	movs	r0, #15
 80091a8:	f7ff ff42 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 80091ac:	2018      	movs	r0, #24
 80091ae:	f7ff ff3f 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 80091b2:	202f      	movs	r0, #47	; 0x2f
 80091b4:	f7ff ff3c 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 80091b8:	2028      	movs	r0, #40	; 0x28
 80091ba:	f7ff ff39 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 80091be:	2020      	movs	r0, #32
 80091c0:	f7ff ff36 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 80091c4:	2022      	movs	r0, #34	; 0x22
 80091c6:	f7ff ff33 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 80091ca:	201f      	movs	r0, #31
 80091cc:	f7ff ff30 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 80091d0:	201b      	movs	r0, #27
 80091d2:	f7ff ff2d 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 80091d6:	2023      	movs	r0, #35	; 0x23
 80091d8:	f7ff ff2a 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 80091dc:	2037      	movs	r0, #55	; 0x37
 80091de:	f7ff ff27 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80091e2:	2000      	movs	r0, #0
 80091e4:	f7ff ff24 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 80091e8:	2007      	movs	r0, #7
 80091ea:	f7ff ff21 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80091ee:	2002      	movs	r0, #2
 80091f0:	f7ff ff1e 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 80091f4:	2010      	movs	r0, #16
 80091f6:	f7ff ff1b 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 80091fa:	20e1      	movs	r0, #225	; 0xe1
 80091fc:	f7ff fefe 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009200:	200f      	movs	r0, #15
 8009202:	f7ff ff15 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8009206:	201b      	movs	r0, #27
 8009208:	f7ff ff12 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800920c:	200f      	movs	r0, #15
 800920e:	f7ff ff0f 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 8009212:	2017      	movs	r0, #23
 8009214:	f7ff ff0c 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 8009218:	2033      	movs	r0, #51	; 0x33
 800921a:	f7ff ff09 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800921e:	202c      	movs	r0, #44	; 0x2c
 8009220:	f7ff ff06 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 8009224:	2029      	movs	r0, #41	; 0x29
 8009226:	f7ff ff03 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800922a:	202e      	movs	r0, #46	; 0x2e
 800922c:	f7ff ff00 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8009230:	2030      	movs	r0, #48	; 0x30
 8009232:	f7ff fefd 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8009236:	2030      	movs	r0, #48	; 0x30
 8009238:	f7ff fefa 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 800923c:	2039      	movs	r0, #57	; 0x39
 800923e:	f7ff fef7 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 8009242:	203f      	movs	r0, #63	; 0x3f
 8009244:	f7ff fef4 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8009248:	2000      	movs	r0, #0
 800924a:	f7ff fef1 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800924e:	2007      	movs	r0, #7
 8009250:	f7ff feee 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 8009254:	2003      	movs	r0, #3
 8009256:	f7ff feeb 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff fee8 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 8009260:	20f0      	movs	r0, #240	; 0xf0
 8009262:	f7ff fecb 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8009266:	2001      	movs	r0, #1
 8009268:	f7ff fee2 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 800926c:	20f6      	movs	r0, #246	; 0xf6
 800926e:	f7ff fec5 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 8009272:	2000      	movs	r0, #0
 8009274:	f7ff fedc 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 8009278:	203a      	movs	r0, #58	; 0x3a
 800927a:	f7ff febf 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800927e:	2005      	movs	r0, #5
 8009280:	f7ff fed6 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

}
 8009284:	bf00      	nop
 8009286:	bd80      	pop	{r7, pc}

08009288 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 8009292:	4a34      	ldr	r2, [pc, #208]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d008      	beq.n	80092b0 <LCD_1IN8_SetGramScanWay+0x28>
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d005      	beq.n	80092b0 <LCD_1IN8_SetGramScanWay+0x28>
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d002      	beq.n	80092b0 <LCD_1IN8_SetGramScanWay+0x28>
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d10c      	bne.n	80092ca <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 80092b0:	4b2c      	ldr	r3, [pc, #176]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092b2:	2280      	movs	r2, #128	; 0x80
 80092b4:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092b8:	22a0      	movs	r2, #160	; 0xa0
 80092ba:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 80092bc:	4b29      	ldr	r3, [pc, #164]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092be:	2202      	movs	r2, #2
 80092c0:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 80092c2:	4b28      	ldr	r3, [pc, #160]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	811a      	strh	r2, [r3, #8]
 80092c8:	e00b      	b.n	80092e2 <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092cc:	22a0      	movs	r2, #160	; 0xa0
 80092ce:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 80092d0:	4b24      	ldr	r3, [pc, #144]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092d2:	2280      	movs	r2, #128	; 0x80
 80092d4:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 80092d6:	4b23      	ldr	r3, [pc, #140]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092d8:	2201      	movs	r2, #1
 80092da:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 80092dc:	4b21      	ldr	r3, [pc, #132]	; (8009364 <LCD_1IN8_SetGramScanWay+0xdc>)
 80092de:	2202      	movs	r2, #2
 80092e0:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 80092e2:	2300      	movs	r3, #0
 80092e4:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	2b07      	cmp	r3, #7
 80092ea:	d82b      	bhi.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <LCD_1IN8_SetGramScanWay+0x6c>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009315 	.word	0x08009315
 80092f8:	0800931b 	.word	0x0800931b
 80092fc:	08009321 	.word	0x08009321
 8009300:	08009327 	.word	0x08009327
 8009304:	0800932d 	.word	0x0800932d
 8009308:	08009333 	.word	0x08009333
 800930c:	08009339 	.word	0x08009339
 8009310:	0800933f 	.word	0x0800933f
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8009314:	2300      	movs	r3, #0
 8009316:	81fb      	strh	r3, [r7, #14]
        break;
 8009318:	e014      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	81fb      	strh	r3, [r7, #14]
        break;
 800931e:	e011      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 8009320:	2340      	movs	r3, #64	; 0x40
 8009322:	81fb      	strh	r3, [r7, #14]
        break;
 8009324:	e00e      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 8009326:	23c0      	movs	r3, #192	; 0xc0
 8009328:	81fb      	strh	r3, [r7, #14]
        break;
 800932a:	e00b      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800932c:	2320      	movs	r3, #32
 800932e:	81fb      	strh	r3, [r7, #14]
        break;
 8009330:	e008      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8009332:	2360      	movs	r3, #96	; 0x60
 8009334:	81fb      	strh	r3, [r7, #14]
        break;
 8009336:	e005      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8009338:	23a0      	movs	r3, #160	; 0xa0
 800933a:	81fb      	strh	r3, [r7, #14]
        break;
 800933c:	e002      	b.n	8009344 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800933e:	23e0      	movs	r3, #224	; 0xe0
 8009340:	81fb      	strh	r3, [r7, #14]
        break;
 8009342:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 8009344:	2036      	movs	r0, #54	; 0x36
 8009346:	f7ff fe59 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800934a:	89fb      	ldrh	r3, [r7, #14]
 800934c:	b2db      	uxtb	r3, r3
 800934e:	f023 0308 	bic.w	r3, r3, #8
 8009352:	b2db      	uxtb	r3, r3
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff fe6b 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	2400ab24 	.word	0x2400ab24

08009368 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 8009372:	f7ff fe21 	bl	8008fb8 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 8009376:	f7ff fea5 	bl	80090c4 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ff83 	bl	8009288 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 8009382:	20c8      	movs	r0, #200	; 0xc8
 8009384:	f7f8 fef4 	bl	8002170 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8009388:	2011      	movs	r0, #17
 800938a:	f7ff fe37 	bl	8008ffc <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800938e:	2078      	movs	r0, #120	; 0x78
 8009390:	f7f8 feee 	bl	8002170 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8009394:	2029      	movs	r0, #41	; 0x29
 8009396:	f7ff fe31 	bl	8008ffc <LCD_1IN8_WriteReg>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	4623      	mov	r3, r4
 80093b4:	80fb      	strh	r3, [r7, #6]
 80093b6:	4603      	mov	r3, r0
 80093b8:	80bb      	strh	r3, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	807b      	strh	r3, [r7, #2]
 80093be:	4613      	mov	r3, r2
 80093c0:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 80093c2:	202a      	movs	r0, #42	; 0x2a
 80093c4:	f7ff fe1a 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80093c8:	2000      	movs	r0, #0
 80093ca:	f7ff fe31 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 80093ce:	88fb      	ldrh	r3, [r7, #6]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	4b1e      	ldr	r3, [pc, #120]	; (800944c <LCD_1IN8_SetWindows+0xa8>)
 80093d4:	88db      	ldrh	r3, [r3, #6]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4413      	add	r3, r2
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fe27 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80093e2:	2000      	movs	r0, #0
 80093e4:	f7ff fe24 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 80093e8:	887b      	ldrh	r3, [r7, #2]
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	4b17      	ldr	r3, [pc, #92]	; (800944c <LCD_1IN8_SetWindows+0xa8>)
 80093ee:	88db      	ldrh	r3, [r3, #6]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff fe18 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 8009400:	202b      	movs	r0, #43	; 0x2b
 8009402:	f7ff fdfb 	bl	8008ffc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8009406:	2000      	movs	r0, #0
 8009408:	f7ff fe12 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800940c:	88bb      	ldrh	r3, [r7, #4]
 800940e:	b2da      	uxtb	r2, r3
 8009410:	4b0e      	ldr	r3, [pc, #56]	; (800944c <LCD_1IN8_SetWindows+0xa8>)
 8009412:	891b      	ldrh	r3, [r3, #8]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	4413      	add	r3, r2
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff fe08 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8009420:	2000      	movs	r0, #0
 8009422:	f7ff fe05 	bl	8009030 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8009426:	883b      	ldrh	r3, [r7, #0]
 8009428:	b2da      	uxtb	r2, r3
 800942a:	4b08      	ldr	r3, [pc, #32]	; (800944c <LCD_1IN8_SetWindows+0xa8>)
 800942c:	891b      	ldrh	r3, [r3, #8]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	4413      	add	r3, r2
 8009432:	b2db      	uxtb	r3, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	b2db      	uxtb	r3, r3
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff fdf9 	bl	8009030 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 800943e:	202c      	movs	r0, #44	; 0x2c
 8009440:	f7ff fddc 	bl	8008ffc <LCD_1IN8_WriteReg>

}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}
 800944c:	2400ab24 	.word	0x2400ab24

08009450 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	460a      	mov	r2, r1
 800945a:	80fb      	strh	r3, [r7, #6]
 800945c:	4613      	mov	r3, r2
 800945e:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8009460:	88bb      	ldrh	r3, [r7, #4]
 8009462:	88fa      	ldrh	r2, [r7, #6]
 8009464:	88b9      	ldrh	r1, [r7, #4]
 8009466:	88f8      	ldrh	r0, [r7, #6]
 8009468:	f7ff ff9c 	bl	80093a4 <LCD_1IN8_SetWindows>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	80fb      	strh	r3, [r7, #6]
 800947e:	460b      	mov	r3, r1
 8009480:	80bb      	strh	r3, [r7, #4]
 8009482:	4613      	mov	r3, r2
 8009484:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 8009486:	88bb      	ldrh	r3, [r7, #4]
 8009488:	887a      	ldrh	r2, [r7, #2]
 800948a:	fb02 f203 	mul.w	r2, r2, r3
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fdec 	bl	8009070 <LCD_1IN8_WriteData_NLen16Bit>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	80fb      	strh	r3, [r7, #6]
 80094aa:	460b      	mov	r3, r1
 80094ac:	80bb      	strh	r3, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 80094b2:	4b1b      	ldr	r3, [pc, #108]	; (8009520 <LCD_1IN8_DrawPaint+0x80>)
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	88fa      	ldrh	r2, [r7, #6]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d82d      	bhi.n	8009518 <LCD_1IN8_DrawPaint+0x78>
 80094bc:	4b18      	ldr	r3, [pc, #96]	; (8009520 <LCD_1IN8_DrawPaint+0x80>)
 80094be:	885b      	ldrh	r3, [r3, #2]
 80094c0:	88ba      	ldrh	r2, [r7, #4]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d828      	bhi.n	8009518 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 80094c6:	4b17      	ldr	r3, [pc, #92]	; (8009524 <LCD_1IN8_DrawPaint+0x84>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	f083 0301 	eor.w	r3, r3, #1
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 80094d4:	88ba      	ldrh	r2, [r7, #4]
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff ffb8 	bl	8009450 <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 80094e0:	887b      	ldrh	r3, [r7, #2]
 80094e2:	2201      	movs	r2, #1
 80094e4:	2101      	movs	r1, #1
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff ffc4 	bl	8009474 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 80094ec:	e014      	b.n	8009518 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 80094ee:	887b      	ldrh	r3, [r7, #2]
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	b299      	uxth	r1, r3
 80094f4:	88bb      	ldrh	r3, [r7, #4]
 80094f6:	01da      	lsls	r2, r3, #7
 80094f8:	88fb      	ldrh	r3, [r7, #6]
 80094fa:	4413      	add	r3, r2
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	b2c9      	uxtb	r1, r1
 8009500:	4a09      	ldr	r2, [pc, #36]	; (8009528 <LCD_1IN8_DrawPaint+0x88>)
 8009502:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 8009504:	88bb      	ldrh	r3, [r7, #4]
 8009506:	01da      	lsls	r2, r3, #7
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	4413      	add	r3, r2
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	3301      	adds	r3, #1
 8009510:	887a      	ldrh	r2, [r7, #2]
 8009512:	b2d1      	uxtb	r1, r2
 8009514:	4a04      	ldr	r2, [pc, #16]	; (8009528 <LCD_1IN8_DrawPaint+0x88>)
 8009516:	54d1      	strb	r1, [r2, r3]
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	2400ab24 	.word	0x2400ab24
 8009524:	2400a386 	.word	0x2400a386
 8009528:	24000048 	.word	0x24000048

0800952c <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 8009536:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <LCD_1IN8_Clear+0x74>)
 8009538:	881a      	ldrh	r2, [r3, #0]
 800953a:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <LCD_1IN8_Clear+0x74>)
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	2100      	movs	r1, #0
 8009540:	2000      	movs	r0, #0
 8009542:	f7ff ff2f 	bl	80093a4 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8009546:	2201      	movs	r2, #1
 8009548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800954c:	4815      	ldr	r0, [pc, #84]	; (80095a4 <LCD_1IN8_Clear+0x78>)
 800954e:	f7f9 fda5 	bl	800309c <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8009552:	2300      	movs	r3, #0
 8009554:	81fb      	strh	r3, [r7, #14]
 8009556:	e019      	b.n	800958c <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8009558:	2300      	movs	r3, #0
 800955a:	81bb      	strh	r3, [r7, #12]
 800955c:	e00e      	b.n	800957c <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff f9be 	bl	80088e4 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	b2db      	uxtb	r3, r3
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff f9b7 	bl	80088e4 <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8009576:	89bb      	ldrh	r3, [r7, #12]
 8009578:	3301      	adds	r3, #1
 800957a:	81bb      	strh	r3, [r7, #12]
 800957c:	4b08      	ldr	r3, [pc, #32]	; (80095a0 <LCD_1IN8_Clear+0x74>)
 800957e:	885b      	ldrh	r3, [r3, #2]
 8009580:	89ba      	ldrh	r2, [r7, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d3eb      	bcc.n	800955e <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8009586:	89fb      	ldrh	r3, [r7, #14]
 8009588:	3301      	adds	r3, #1
 800958a:	81fb      	strh	r3, [r7, #14]
 800958c:	4b04      	ldr	r3, [pc, #16]	; (80095a0 <LCD_1IN8_Clear+0x74>)
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	89fa      	ldrh	r2, [r7, #14]
 8009592:	429a      	cmp	r2, r3
 8009594:	d3e0      	bcc.n	8009558 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	2400ab24 	.word	0x2400ab24
 80095a4:	58021800 	.word	0x58021800

080095a8 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 80095b2:	4a04      	ldr	r2, [pc, #16]	; (80095c4 <LCD_1IN8_SetBackLight+0x1c>)
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40010000 	.word	0x40010000

080095c8 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	605a      	str	r2, [r3, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	601a      	str	r2, [r3, #0]
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff ffdd 	bl	80095ea <metal_list_add_before>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 ff89 	bl	800b55c <metal_machine_cache_flush>
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 ff87 	bl	800b572 <metal_machine_cache_invalidate>
}
 8009664:	bf00      	nop
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ffdd 	bl	8009638 <__metal_cache_flush>
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff ffdd 	bl	8009652 <__metal_cache_invalidate>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d008      	beq.n	80096c0 <metal_bus_register+0x20>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <metal_bus_register+0x20>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <metal_bus_register+0x26>
		return -EINVAL;
 80096c0:	f06f 0315 	mvn.w	r3, #21
 80096c4:	e026      	b.n	8009714 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2100      	movs	r1, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 f82b 	bl	8009728 <metal_bus_find>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <metal_bus_register+0x3e>
		return -EEXIST;
 80096d8:	f06f 0310 	mvn.w	r3, #16
 80096dc:	e01a      	b.n	8009714 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	331c      	adds	r3, #28
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff ff70 	bl	80095c8 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3324      	adds	r3, #36	; 0x24
 80096ec:	4619      	mov	r1, r3
 80096ee:	480b      	ldr	r0, [pc, #44]	; (800971c <metal_bus_register+0x7c>)
 80096f0:	f7ff ff95 	bl	800961e <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80096f4:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <metal_bus_register+0x80>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b06      	cmp	r3, #6
 80096fa:	d90a      	bls.n	8009712 <metal_bus_register+0x72>
 80096fc:	4b08      	ldr	r3, [pc, #32]	; (8009720 <metal_bus_register+0x80>)
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d006      	beq.n	8009712 <metal_bus_register+0x72>
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <metal_bus_register+0x80>)
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	4905      	ldr	r1, [pc, #20]	; (8009724 <metal_bus_register+0x84>)
 800970e:	2007      	movs	r0, #7
 8009710:	4798      	blx	r3
	return 0;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	2400ab38 	.word	0x2400ab38
 8009720:	2400ab30 	.word	0x2400ab30
 8009724:	080112cc 	.word	0x080112cc

08009728 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8009732:	4b13      	ldr	r3, [pc, #76]	; (8009780 <metal_bus_find+0x58>)
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e017      	b.n	800976a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b24      	subs	r3, #36	; 0x24
 800973e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4618      	mov	r0, r3
 8009748:	f7f6 fdca 	bl	80002e0 <strcmp>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	e007      	b.n	800976a <metal_bus_find+0x42>
			continue;
		if (result)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <metal_bus_find+0x3e>
			*result = bus;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	601a      	str	r2, [r3, #0]
		return 0;
 8009766:	2300      	movs	r3, #0
 8009768:	e005      	b.n	8009776 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a05      	ldr	r2, [pc, #20]	; (8009784 <metal_bus_find+0x5c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d1e3      	bne.n	800973a <metal_bus_find+0x12>
	}
	return -ENOENT;
 8009772:	f06f 0301 	mvn.w	r3, #1
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2400ab30 	.word	0x2400ab30
 8009784:	2400ab38 	.word	0x2400ab38

08009788 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00d      	beq.n	80097b6 <metal_device_open+0x2e>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <metal_device_open+0x2e>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <metal_device_open+0x2e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 80097b6:	f06f 0315 	mvn.w	r3, #21
 80097ba:	e01f      	b.n	80097fc <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80097bc:	f107 0310 	add.w	r3, r7, #16
 80097c0:	4619      	mov	r1, r3
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff ffb0 	bl	8009728 <metal_bus_find>
 80097c8:	6178      	str	r0, [r7, #20]
	if (error)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <metal_device_open+0x4c>
		return error;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	e013      	b.n	80097fc <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <metal_device_open+0x5a>
		return -ENODEV;
 80097dc:	f06f 0312 	mvn.w	r3, #18
 80097e0:	e00c      	b.n	80097fc <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	6938      	ldr	r0, [r7, #16]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	4798      	blx	r3
 80097ee:	6178      	str	r0, [r7, #20]
	if (error)
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <metal_device_open+0x72>
		return error;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	e000      	b.n	80097fc <metal_device_open+0x74>

	return 0;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d008      	beq.n	8009826 <metal_register_generic_device+0x22>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8009822:	2b02      	cmp	r3, #2
 8009824:	d902      	bls.n	800982c <metal_register_generic_device+0x28>
		return -EINVAL;
 8009826:	f06f 0315 	mvn.w	r3, #21
 800982a:	e009      	b.n	8009840 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a06      	ldr	r2, [pc, #24]	; (8009848 <metal_register_generic_device+0x44>)
 8009830:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	336c      	adds	r3, #108	; 0x6c
 8009836:	4619      	mov	r1, r3
 8009838:	4804      	ldr	r0, [pc, #16]	; (800984c <metal_register_generic_device+0x48>)
 800983a:	f7ff fef0 	bl	800961e <metal_list_add_tail>
			    &device->node);
	return 0;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	24000018 	.word	0x24000018
 800984c:	2400ab48 	.word	0x2400ab48

08009850 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800985c:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <metal_generic_dev_open+0x58>)
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	e017      	b.n	8009894 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	3b6c      	subs	r3, #108	; 0x6c
 8009868:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68b9      	ldr	r1, [r7, #8]
 8009870:	4618      	mov	r0, r3
 8009872:	f7f6 fd35 	bl	80002e0 <strcmp>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	e007      	b.n	8009894 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 800988a:	6938      	ldr	r0, [r7, #16]
 800988c:	f000 f88c 	bl	80099a8 <metal_generic_dev_sys_open>
 8009890:	4603      	mov	r3, r0
 8009892:	e005      	b.n	80098a0 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	4a05      	ldr	r2, [pc, #20]	; (80098ac <metal_generic_dev_open+0x5c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d1e3      	bne.n	8009864 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 800989c:	f06f 0312 	mvn.w	r3, #18
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	2400ab30 	.word	0x2400ab30
 80098ac:	2400ab48 	.word	0x2400ab48

080098b0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 80098be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d009      	beq.n	80098da <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 80098c6:	6a3a      	ldr	r2, [r7, #32]
 80098c8:	4613      	mov	r3, r2
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	461a      	mov	r2, r3
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098d6:	f002 ff07 	bl	800c6e8 <memcpy>
	for (i = 0; i < nents_in; i++) {
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e02f      	b.n	8009940 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d114      	bne.n	8009910 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4613      	mov	r3, r2
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	461a      	mov	r2, r3
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	4413      	add	r3, r2
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4613      	mov	r3, r2
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	461a      	mov	r2, r3
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	4413      	add	r3, r2
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	4619      	mov	r1, r3
 800990c:	f7ff feae 	bl	800966c <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4613      	mov	r3, r2
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	461a      	mov	r2, r3
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	4413      	add	r3, r2
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4613      	mov	r3, r2
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	461a      	mov	r2, r3
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	4413      	add	r3, r2
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4619      	mov	r1, r3
 8009936:	f7ff fea6 	bl	8009686 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	3301      	adds	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	429a      	cmp	r2, r3
 8009946:	dbcb      	blt.n	80098e0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8009948:	6a3b      	ldr	r3, [r7, #32]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b086      	sub	sp, #24
 8009956:	af00      	add	r7, sp, #0
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e017      	b.n	8009996 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4613      	mov	r3, r2
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	461a      	mov	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	4413      	add	r3, r2
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4613      	mov	r3, r2
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	461a      	mov	r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	4413      	add	r3, r2
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	4619      	mov	r1, r3
 800998c:	f7ff fe7b 	bl	8009686 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	3301      	adds	r3, #1
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	429a      	cmp	r2, r3
 800999c:	dbe3      	blt.n	8009966 <metal_generic_dev_dma_unmap+0x14>
	}
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e013      	b.n	80099de <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4613      	mov	r3, r2
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	4413      	add	r3, r2
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	3308      	adds	r3, #8
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	4413      	add	r3, r2
 80099c6:	3304      	adds	r3, #4
 80099c8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00b      	beq.n	80099ea <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 80099d2:	68b8      	ldr	r0, [r7, #8]
 80099d4:	f000 f81e 	bl	8009a14 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	60fb      	str	r3, [r7, #12]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d3e6      	bcc.n	80099b6 <metal_generic_dev_sys_open+0xe>
 80099e8:	e000      	b.n	80099ec <metal_generic_dev_sys_open+0x44>
			break;
 80099ea:	bf00      	nop
	}

	return 0;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8009a00:	4803      	ldr	r0, [pc, #12]	; (8009a10 <metal_sys_init+0x18>)
 8009a02:	f7ff fe4d 	bl	80096a0 <metal_bus_register>
	return 0;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	24000018 	.word	0x24000018

08009a14 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	613b      	str	r3, [r7, #16]
	if (psize) {
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d02c      	beq.n	8009a88 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	fa02 f303 	lsl.w	r3, r2, r3
 8009a46:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	e013      	b.n	8009a76 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	6819      	ldr	r1, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f001 fd91 	bl	800b588 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	3301      	adds	r3, #1
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689a      	ldr	r2, [r3, #8]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d9e2      	bls.n	8009a4e <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8009a88:	bf00      	nop
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <metal_list_init>:
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	605a      	str	r2, [r3, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	int error = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4810      	ldr	r0, [pc, #64]	; (8009b08 <metal_init+0x54>)
 8009ac6:	f002 fe37 	bl	800c738 <memset>

	_metal.common.log_handler   = params->log_handler;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a0e      	ldr	r2, [pc, #56]	; (8009b08 <metal_init+0x54>)
 8009ad0:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	791a      	ldrb	r2, [r3, #4]
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <metal_init+0x54>)
 8009ad8:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8009ada:	480c      	ldr	r0, [pc, #48]	; (8009b0c <metal_init+0x58>)
 8009adc:	f7ff ffd8 	bl	8009a90 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8009ae0:	480b      	ldr	r0, [pc, #44]	; (8009b10 <metal_init+0x5c>)
 8009ae2:	f7ff ffd5 	bl	8009a90 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8009ae6:	480b      	ldr	r0, [pc, #44]	; (8009b14 <metal_init+0x60>)
 8009ae8:	f7ff ffd2 	bl	8009a90 <metal_list_init>

	error = metal_sys_init(params);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff ff83 	bl	80099f8 <metal_sys_init>
 8009af2:	60f8      	str	r0, [r7, #12]
	if (error)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <metal_init+0x4a>
		return error;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	e000      	b.n	8009b00 <metal_init+0x4c>

	return error;
 8009afe:	68fb      	ldr	r3, [r7, #12]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	2400ab30 	.word	0x2400ab30
 8009b0c:	2400ab38 	.word	0x2400ab38
 8009b10:	2400ab40 	.word	0x2400ab40
 8009b14:	2400ab48 	.word	0x2400ab48

08009b18 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d009      	beq.n	8009b40 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d804      	bhi.n	8009b40 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	e000      	b.n	8009b42 <metal_io_virt+0x2a>
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8009b4e:	b5b0      	push	{r4, r5, r7, lr}
 8009b50:	b08a      	sub	sp, #40	; 0x28
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
 8009b5a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8009b5c:	f107 0310 	add.w	r3, r7, #16
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	609a      	str	r2, [r3, #8]
 8009b68:	60da      	str	r2, [r3, #12]
 8009b6a:	611a      	str	r2, [r3, #16]
 8009b6c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]
	io->size = size;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b84:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	2b1f      	cmp	r3, #31
 8009b8a:	d904      	bls.n	8009b96 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b92:	611a      	str	r2, [r3, #16]
 8009b94:	e006      	b.n	8009ba4 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8009b96:	2201      	movs	r2, #1
 8009b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9e:	1e5a      	subs	r2, r3, #1
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ba8:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8009baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <metal_io_init+0x7a>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bb4:	f103 0418 	add.w	r4, r3, #24
 8009bb8:	4615      	mov	r5, r2
 8009bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009bc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009bc6:	e00a      	b.n	8009bde <metal_io_init+0x90>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f103 0418 	add.w	r4, r3, #24
 8009bce:	f107 0510 	add.w	r5, r7, #16
 8009bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009bda:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7ff ff18 	bl	8009a14 <metal_sys_io_mem_map>
}
 8009be4:	bf00      	nop
 8009be6:	3728      	adds	r7, #40	; 0x28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bdb0      	pop	{r4, r5, r7, pc}

08009bec <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8009bec:	b590      	push	{r4, r7, lr}
 8009bee:	b08b      	sub	sp, #44	; 0x2c
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff ff8b 	bl	8009b18 <metal_io_virt>
 8009c02:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d902      	bls.n	8009c18 <metal_io_block_read+0x2c>
		return -ERANGE;
 8009c12:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8009c16:	e05c      	b.n	8009cd2 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	441a      	add	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d904      	bls.n	8009c30 <metal_io_block_read+0x44>
		len = io->size - offset;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689a      	ldr	r2, [r3, #8]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1c      	ldr	r4, [r3, #32]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2305      	movs	r3, #5
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	47a0      	blx	r4
 8009c4e:	6178      	str	r0, [r7, #20]
 8009c50:	e03e      	b.n	8009cd0 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8009c52:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8009c56:	e00c      	b.n	8009c72 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	701a      	strb	r2, [r3, #0]
			dest++;
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	3301      	adds	r3, #1
 8009c64:	61bb      	str	r3, [r7, #24]
			ptr++;
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
			len--;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	603b      	str	r3, [r7, #0]
		while ( len && (
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d017      	beq.n	8009ca8 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1ea      	bne.n	8009c58 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e5      	bne.n	8009c58 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8009c8c:	e00c      	b.n	8009ca8 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	3b04      	subs	r3, #4
 8009ca6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	dcef      	bgt.n	8009c8e <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8009cae:	e00c      	b.n	8009cca <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	603b      	str	r3, [r7, #0]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1ef      	bne.n	8009cb0 <metal_io_block_read+0xc4>
	}
	return retlen;
 8009cd0:	697b      	ldr	r3, [r7, #20]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3724      	adds	r7, #36	; 0x24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd90      	pop	{r4, r7, pc}

08009cda <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8009cda:	b590      	push	{r4, r7, lr}
 8009cdc:	b08b      	sub	sp, #44	; 0x2c
 8009cde:	af02      	add	r7, sp, #8
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff ff14 	bl	8009b18 <metal_io_virt>
 8009cf0:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d902      	bls.n	8009d06 <metal_io_block_write+0x2c>
		return -ERANGE;
 8009d00:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8009d04:	e05b      	b.n	8009dbe <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	441a      	add	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d904      	bls.n	8009d1e <metal_io_block_write+0x44>
		len = io->size - offset;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	603b      	str	r3, [r7, #0]
	retlen = len;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d017      	beq.n	8009d5a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	2305      	movs	r3, #5
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	47a0      	blx	r4
 8009d3c:	6178      	str	r0, [r7, #20]
 8009d3e:	e03d      	b.n	8009dbc <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	701a      	strb	r2, [r3, #0]
			ptr++;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
			source++;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	3301      	adds	r3, #1
 8009d52:	61bb      	str	r3, [r7, #24]
			len--;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	603b      	str	r3, [r7, #0]
		while ( len && (
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d017      	beq.n	8009d90 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1ea      	bne.n	8009d40 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e5      	bne.n	8009d40 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009d74:	e00c      	b.n	8009d90 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	3304      	adds	r3, #4
 8009d82:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	3304      	adds	r3, #4
 8009d88:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	3b04      	subs	r3, #4
 8009d8e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	dcef      	bgt.n	8009d76 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8009d96:	e00c      	b.n	8009db2 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	3301      	adds	r3, #1
 8009da4:	61fb      	str	r3, [r7, #28]
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	3301      	adds	r3, #1
 8009daa:	61bb      	str	r3, [r7, #24]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1ef      	bne.n	8009d98 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8009db8:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8009dbc:	697b      	ldr	r3, [r7, #20]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3724      	adds	r7, #36	; 0x24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd90      	pop	{r4, r7, pc}

08009dc6 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8009dc6:	b590      	push	{r4, r7, lr}
 8009dc8:	b08b      	sub	sp, #44	; 0x2c
 8009dca:	af02      	add	r7, sp, #8
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff fe9d 	bl	8009b18 <metal_io_virt>
 8009dde:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d902      	bls.n	8009df4 <metal_io_block_set+0x2e>
		return -ERANGE;
 8009dee:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8009df2:	e05d      	b.n	8009eb0 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8009df4:	683a      	ldr	r2, [r7, #0]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	441a      	add	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d904      	bls.n	8009e0c <metal_io_block_set+0x46>
		len = io->size - offset;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	603b      	str	r3, [r7, #0]
	retlen = len;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009e1c:	79fa      	ldrb	r2, [r7, #7]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	2305      	movs	r3, #5
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	47a0      	blx	r4
 8009e2a:	e040      	b.n	8009eae <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8009e30:	2301      	movs	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	e00a      	b.n	8009e4c <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8009e36:	79fa      	ldrb	r2, [r7, #7]
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d9f1      	bls.n	8009e36 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8009e52:	e008      	b.n	8009e66 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	79fa      	ldrb	r2, [r7, #7]
 8009e58:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	61fb      	str	r3, [r7, #28]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00e      	beq.n	8009e8a <metal_io_block_set+0xc4>
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1ee      	bne.n	8009e54 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009e76:	e008      	b.n	8009e8a <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	3304      	adds	r3, #4
 8009e82:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	3b04      	subs	r3, #4
 8009e88:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	dcf3      	bgt.n	8009e78 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8009e90:	e008      	b.n	8009ea4 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	79fa      	ldrb	r2, [r7, #7]
 8009e96:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f3      	bne.n	8009e92 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8009eaa:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8009eae:	693b      	ldr	r3, [r7, #16]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3724      	adds	r7, #36	; 0x24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}

08009eb8 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8009eb8:	b40e      	push	{r1, r2, r3}
 8009eba:	b480      	push	{r7}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	b003      	add	sp, #12
 8009ed0:	4770      	bx	lr

08009ed2 <metal_io_virt>:
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d009      	beq.n	8009efa <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d804      	bhi.n	8009efa <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	e000      	b.n	8009efc <metal_io_virt+0x2a>
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d201      	bcs.n	8009f2a <metal_io_virt_to_offset+0x22>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	e001      	b.n	8009f2e <metal_io_virt_to_offset+0x26>
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
	...

08009f3c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b08d      	sub	sp, #52	; 0x34
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff ffbf 	bl	8009ed2 <metal_io_virt>
 8009f54:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d009      	beq.n	8009f72 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	699c      	ldr	r4, [r3, #24]
 8009f62:	79fa      	ldrb	r2, [r7, #7]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	47a0      	blx	r4
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	e057      	b.n	800a022 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8009f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d011      	beq.n	8009f9c <metal_io_read+0x60>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10e      	bne.n	8009f9c <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8009f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	f3bf 8f5b 	dmb	ish
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	f3bf 8f5b 	dmb	ish
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	76fb      	strb	r3, [r7, #27]
 8009f92:	7efb      	ldrb	r3, [r7, #27]
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	f04f 0300 	mov.w	r3, #0
 8009f9a:	e042      	b.n	800a022 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <metal_io_read+0x8a>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d10e      	bne.n	8009fc6 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	f3bf 8f5b 	dmb	ish
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	f3bf 8f5b 	dmb	ish
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	833b      	strh	r3, [r7, #24]
 8009fbc:	8b3b      	ldrh	r3, [r7, #24]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	e02d      	b.n	800a022 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <metal_io_read+0xb2>
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d10d      	bne.n	8009fee <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	623b      	str	r3, [r7, #32]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	f3bf 8f5b 	dmb	ish
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f3bf 8f5b 	dmb	ish
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	e019      	b.n	800a022 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d010      	beq.n	800a016 <metal_io_read+0xda>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d10d      	bne.n	800a016 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f3bf 8f5b 	dmb	ish
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f3bf 8f5b 	dmb	ish
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	461a      	mov	r2, r3
 800a010:	f04f 0300 	mov.w	r3, #0
 800a014:	e005      	b.n	800a022 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <metal_io_read+0xf0>)
 800a018:	4a05      	ldr	r2, [pc, #20]	; (800a030 <metal_io_read+0xf4>)
 800a01a:	21f0      	movs	r1, #240	; 0xf0
 800a01c:	4805      	ldr	r0, [pc, #20]	; (800a034 <metal_io_read+0xf8>)
 800a01e:	f002 faf9 	bl	800c614 <__assert_func>
	return 0; /* quiet compiler */
}
 800a022:	4610      	mov	r0, r2
 800a024:	4619      	mov	r1, r3
 800a026:	3734      	adds	r7, #52	; 0x34
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}
 800a02c:	08011388 	.word	0x08011388
 800a030:	0801f830 	.word	0x0801f830
 800a034:	0801138c 	.word	0x0801138c

0800a038 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b08f      	sub	sp, #60	; 0x3c
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff ff42 	bl	8009ed2 <metal_io_virt>
 800a04e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00c      	beq.n	800a072 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	69dc      	ldr	r4, [r3, #28]
 800a05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800a070:	e04e      	b.n	800a110 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00e      	beq.n	800a096 <metal_io_write+0x5e>
 800a078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d10b      	bne.n	800a096 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
 800a082:	783b      	ldrb	r3, [r7, #0]
 800a084:	76fb      	strb	r3, [r7, #27]
 800a086:	7efa      	ldrb	r2, [r7, #27]
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	f3bf 8f5b 	dmb	ish
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	f3bf 8f5b 	dmb	ish
 800a094:	e03c      	b.n	800a110 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00e      	beq.n	800a0ba <metal_io_write+0x82>
 800a09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d10b      	bne.n	800a0ba <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a6:	883b      	ldrh	r3, [r7, #0]
 800a0a8:	833b      	strh	r3, [r7, #24]
 800a0aa:	8b3a      	ldrh	r2, [r7, #24]
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	f3bf 8f5b 	dmb	ish
 800a0b2:	801a      	strh	r2, [r3, #0]
 800a0b4:	f3bf 8f5b 	dmb	ish
 800a0b8:	e02a      	b.n	800a110 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00e      	beq.n	800a0de <metal_io_write+0xa6>
 800a0c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d10b      	bne.n	800a0de <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	623b      	str	r3, [r7, #32]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f3bf 8f5b 	dmb	ish
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	f3bf 8f5b 	dmb	ish
 800a0dc:	e018      	b.n	800a110 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00e      	beq.n	800a102 <metal_io_write+0xca>
 800a0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d10b      	bne.n	800a102 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	f3bf 8f5b 	dmb	ish
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	f3bf 8f5b 	dmb	ish
 800a100:	e006      	b.n	800a110 <metal_io_write+0xd8>
		metal_assert (0);
 800a102:	4b05      	ldr	r3, [pc, #20]	; (800a118 <metal_io_write+0xe0>)
 800a104:	4a05      	ldr	r2, [pc, #20]	; (800a11c <metal_io_write+0xe4>)
 800a106:	f44f 7189 	mov.w	r1, #274	; 0x112
 800a10a:	4805      	ldr	r0, [pc, #20]	; (800a120 <metal_io_write+0xe8>)
 800a10c:	f002 fa82 	bl	800c614 <__assert_func>
}
 800a110:	bf00      	nop
 800a112:	3734      	adds	r7, #52	; 0x34
 800a114:	46bd      	mov	sp, r7
 800a116:	bd90      	pop	{r4, r7, pc}
 800a118:	08011388 	.word	0x08011388
 800a11c:	0801f840 	.word	0x0801f840
 800a120:	0801138c 	.word	0x0801138c

0800a124 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f002 facb 	bl	800c6c8 <malloc>
 800a132:	4603      	mov	r3, r0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	free(ptr);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f002 fac7 	bl	800c6d8 <free>
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3307      	adds	r3, #7
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff ffde 	bl	800a124 <metal_allocate_memory>
 800a168:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	2100      	movs	r1, #0
 800a174:	68b8      	ldr	r0, [r7, #8]
 800a176:	f002 fadf 	bl	800c738 <memset>
	}

	return vqs;
 800a17a:	68bb      	ldr	r3, [r7, #8]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	891b      	ldrh	r3, [r3, #8]
 800a190:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	3b18      	subs	r3, #24
 800a19c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d905      	bls.n	800a1b4 <rproc_virtio_virtqueue_notify+0x30>
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <rproc_virtio_virtqueue_notify+0x5c>)
 800a1aa:	4a0e      	ldr	r2, [pc, #56]	; (800a1e4 <rproc_virtio_virtqueue_notify+0x60>)
 800a1ac:	2133      	movs	r1, #51	; 0x33
 800a1ae:	480e      	ldr	r0, [pc, #56]	; (800a1e8 <rproc_virtio_virtqueue_notify+0x64>)
 800a1b0:	f002 fa30 	bl	800c614 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4413      	add	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	440b      	add	r3, r1
 800a1c4:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	6810      	ldr	r0, [r2, #0]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	6912      	ldr	r2, [r2, #16]
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	4798      	blx	r3
}
 800a1d6:	bf00      	nop
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	080113d4 	.word	0x080113d4
 800a1e4:	0801f810 	.word	0x0801f810
 800a1e8:	080113f0 	.word	0x080113f0

0800a1ec <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3b18      	subs	r3, #24
 800a1f8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3318      	adds	r3, #24
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff fe7b 	bl	8009f08 <metal_io_virt_to_offset>
 800a212:	4601      	mov	r1, r0
 800a214:	2301      	movs	r3, #1
 800a216:	2205      	movs	r2, #5
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff fe8f 	bl	8009f3c <metal_io_read>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4613      	mov	r3, r2
 800a224:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800a226:	7afb      	ldrb	r3, [r7, #11]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3b18      	subs	r3, #24
 800a240:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3318      	adds	r3, #24
 800a252:	4619      	mov	r1, r3
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fe57 	bl	8009f08 <metal_io_virt_to_offset>
 800a25a:	4601      	mov	r1, r0
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	2001      	movs	r0, #1
 800a264:	9001      	str	r0, [sp, #4]
 800a266:	2005      	movs	r0, #5
 800a268:	9000      	str	r0, [sp, #0]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff fee4 	bl	800a038 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	6810      	ldr	r0, [r2, #0]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6812      	ldr	r2, [r2, #0]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4798      	blx	r3
}
 800a280:	bf00      	nop
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3b18      	subs	r3, #24
 800a294:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	330c      	adds	r3, #12
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fe2d 	bl	8009f08 <metal_io_virt_to_offset>
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	2304      	movs	r3, #4
 800a2b2:	2205      	movs	r2, #5
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff fe41 	bl	8009f3c <metal_io_read>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4613      	mov	r3, r2
 800a2c0:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3b18      	subs	r3, #24
 800a2da:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	330c      	adds	r3, #12
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7ff fe0a 	bl	8009f08 <metal_io_virt_to_offset>
 800a2f4:	4601      	mov	r1, r0
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f04f 0300 	mov.w	r3, #0
 800a2fe:	2004      	movs	r0, #4
 800a300:	9001      	str	r0, [sp, #4]
 800a302:	2005      	movs	r0, #5
 800a304:	9000      	str	r0, [sp, #0]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff fe96 	bl	800a038 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	6810      	ldr	r0, [r2, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	6812      	ldr	r2, [r2, #0]
 800a318:	4611      	mov	r1, r2
 800a31a:	4798      	blx	r3
}
 800a31c:	bf00      	nop
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800a364:	bf00      	nop
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d103      	bne.n	800a388 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800a380:	2140      	movs	r1, #64	; 0x40
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff ff54 	bl	800a230 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08e      	sub	sp, #56	; 0x38
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	7e5b      	ldrb	r3, [r3, #25]
 800a3a6:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 800a3a8:	2050      	movs	r0, #80	; 0x50
 800a3aa:	f7ff febb 	bl	800a124 <metal_allocate_memory>
 800a3ae:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e092      	b.n	800a4e0 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800a3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3bc:	4613      	mov	r3, r2
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fead 	bl	800a124 <metal_allocate_memory>
 800a3ca:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 8081 	beq.w	800a4d6 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800a3d4:	2250      	movs	r2, #80	; 0x50
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3da:	f002 f9ad 	bl	800c738 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800a3de:	2218      	movs	r2, #24
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	6a38      	ldr	r0, [r7, #32]
 800a3e4:	f002 f9a8 	bl	800c738 <memset>
	vdev = &rpvdev->vdev;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	3318      	adds	r3, #24
 800a3ec:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f2:	e025      	b.n	800a440 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800a3f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	3318      	adds	r3, #24
 800a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a406:	4413      	add	r3, r2
 800a408:	3304      	adds	r3, #4
 800a40a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d102      	bne.n	800a418 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800a418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a41a:	f7ff fe9a 	bl	800a152 <virtqueue_allocate>
 800a41e:	6178      	str	r0, [r7, #20]
		if (!vq)
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d031      	beq.n	800a48a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800a426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	461a      	mov	r2, r3
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	4413      	add	r3, r2
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800a43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43c:	3301      	adds	r3, #1
 800a43e:	637b      	str	r3, [r7, #52]	; 0x34
 800a440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	429a      	cmp	r2, r3
 800a446:	d3d5      	bcc.n	800a3f4 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a44c:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a452:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	6a3a      	ldr	r2, [r7, #32]
 800a458:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a45e:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a476:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47c:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	4a19      	ldr	r2, [pc, #100]	; (800a4e8 <rproc_virtio_create_vdev+0x158>)
 800a482:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	3318      	adds	r3, #24
 800a488:	e02a      	b.n	800a4e0 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800a48a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800a48c:	2300      	movs	r3, #0
 800a48e:	637b      	str	r3, [r7, #52]	; 0x34
 800a490:	e019      	b.n	800a4c6 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800a492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a494:	4613      	mov	r3, r2
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	4413      	add	r3, r2
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	461a      	mov	r2, r3
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 800a4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	4413      	add	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7ff fe3e 	bl	800a13c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d3e1      	bcc.n	800a492 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800a4ce:	6a38      	ldr	r0, [r7, #32]
 800a4d0:	f7ff fe34 	bl	800a13c <metal_free_memory>
 800a4d4:	e000      	b.n	800a4d8 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800a4d6:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800a4d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4da:	f7ff fe2f 	bl	800a13c <metal_free_memory>
	return NULL;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3738      	adds	r7, #56	; 0x38
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0801f7ec 	.word	0x0801f7ec

0800a4ec <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	429a      	cmp	r2, r3
 800a506:	d302      	bcc.n	800a50e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800a508:	f06f 0301 	mvn.w	r3, #1
 800a50c:	e019      	b.n	800a542 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	4613      	mov	r3, r2
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	4413      	add	r3, r2
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	440b      	add	r3, r1
 800a51e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	6a3a      	ldr	r2, [r7, #32]
 800a524:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	b29a      	uxth	r2, r3
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53e:	609a      	str	r2, [r3, #8]

	return 0;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b086      	sub	sp, #24
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800a55e:	f06f 0315 	mvn.w	r3, #21
 800a562:	e02c      	b.n	800a5be <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d101      	bne.n	800a572 <rproc_virtio_notified+0x24>
		return 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	e025      	b.n	800a5be <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800a578:	2300      	movs	r3, #0
 800a57a:	617b      	str	r3, [r7, #20]
 800a57c:	e01a      	b.n	800a5b4 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	4613      	mov	r3, r2
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	4413      	add	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	440b      	add	r3, r1
 800a58e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d003      	beq.n	800a5a2 <rproc_virtio_notified+0x54>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a0:	d105      	bne.n	800a5ae <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 800a5a8:	68b8      	ldr	r0, [r7, #8]
 800a5aa:	f001 fb58 	bl	800bc5e <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d3e0      	bcc.n	800a57e <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fe08 	bl	800a1ec <rproc_virtio_get_status>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800a5ea:	e7f4      	b.n	800a5d6 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800a5ec:	bf00      	nop
 800a5ee:	e000      	b.n	800a5f2 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 800a5f0:	bf00      	nop
	}
}
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800a600:	bf00      	nop
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	4611      	mov	r1, r2
 800a608:	f3bf 8f5b 	dmb	ish
 800a60c:	e8d3 2f4f 	ldrexb	r2, [r3]
 800a610:	e8c3 1f40 	strexb	r0, r1, [r3]
 800a614:	2800      	cmp	r0, #0
 800a616:	d1f9      	bne.n	800a60c <__metal_mutex_acquire+0x14>
 800a618:	f3bf 8f5b 	dmb	ish
 800a61c:	b2d3      	uxtb	r3, r2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1ef      	bne.n	800a602 <__metal_mutex_acquire+0xa>
		;
	}
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f3bf 8f5b 	dmb	ish
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	f3bf 8f5b 	dmb	ish
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff ffcc 	bl	800a5f8 <__metal_mutex_acquire>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ffdd 	bl	800a630 <__metal_mutex_release>
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <metal_list_add_before>:
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	601a      	str	r2, [r3, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <metal_list_add_tail>:
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff ffdd 	bl	800a67e <metal_list_add_before>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	6852      	ldr	r2, [r2, #4]
 800a6dc:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6812      	ldr	r2, [r2, #0]
 800a6e6:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	605a      	str	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	601a      	str	r2, [r3, #0]
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	009a      	lsls	r2, r3, #2
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	440a      	add	r2, r1
 800a716:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	f002 021f 	and.w	r2, r2, #31
 800a71e:	2001      	movs	r0, #1
 800a720:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	4403      	add	r3, r0
 800a72a:	430a      	orrs	r2, r1
 800a72c:	601a      	str	r2, [r3, #0]
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	095b      	lsrs	r3, r3, #5
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	4413      	add	r3, r2
 800a74e:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	f003 031f 	and.w	r3, r3, #31
 800a756:	2101      	movs	r1, #1
 800a758:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800a75c:	4013      	ands	r3, r2
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	009a      	lsls	r2, r3, #2
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	440a      	add	r2, r1
 800a77e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	f002 021f 	and.w	r2, r2, #31
 800a786:	2001      	movs	r0, #1
 800a788:	fa00 f202 	lsl.w	r2, r0, r2
 800a78c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4403      	add	r3, r0
 800a794:	400a      	ands	r2, r1
 800a796:	601a      	str	r2, [r3, #0]
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ffc2 	bl	800a73a <metal_bitmap_is_bit_set>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bf0c      	ite	eq
 800a7bc:	2301      	moveq	r3, #1
 800a7be:	2300      	movne	r3, #0
 800a7c0:	b2db      	uxtb	r3, r3
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b086      	sub	sp, #24
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	60f8      	str	r0, [r7, #12]
 800a7d2:	60b9      	str	r1, [r7, #8]
 800a7d4:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	e002      	b.n	800a7e2 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d207      	bcs.n	800a7fa <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff ffd8 	bl	800a7a4 <metal_bitmap_is_bit_clear>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0f0      	beq.n	800a7dc <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800a7fa:	697b      	ldr	r3, [r7, #20]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <rpmsg_init_ept>:
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2220      	movs	r2, #32
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f003 f8e9 	bl	800d9f0 <strncpy>
	ept->addr = src;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800a848:	f04f 33ff 	mov.w	r3, #4294967295
 800a84c:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	2100      	movs	r1, #0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7ff ffb8 	bl	800a7ca <metal_bitmap_next_clear_bit>
 800a85a:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	429a      	cmp	r2, r3
 800a862:	d206      	bcs.n	800a872 <rpmsg_get_address+0x34>
		addr = nextbit;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff ff48 	bl	800a702 <metal_bitmap_set_bit>
	}

	return addr;
 800a872:	68fb      	ldr	r3, [r7, #12]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	da03      	bge.n	800a898 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 800a890:	6879      	ldr	r1, [r7, #4]
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff ff69 	bl	800a76a <metal_bitmap_clear_bit>
}
 800a898:	bf00      	nop
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	da05      	bge.n	800a8c0 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800a8b4:	6879      	ldr	r1, [r7, #4]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff ff3f 	bl	800a73a <metal_bitmap_is_bit_set>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	e000      	b.n	800a8c2 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 800a8c0:	4b02      	ldr	r3, [pc, #8]	; (800a8cc <rpmsg_is_address_set+0x2c>)
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	fffff82d 	.word	0xfffff82d

0800a8d0 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	da05      	bge.n	800a8f0 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7ff ff0b 	bl	800a702 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	e000      	b.n	800a8f2 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 800a8f0:	4b02      	ldr	r3, [pc, #8]	; (800a8fc <rpmsg_set_address+0x2c>)
	}
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	fffff82d 	.word	0xfffff82d

0800a900 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 800a900:	b590      	push	{r4, r7, lr}
 800a902:	b089      	sub	sp, #36	; 0x24
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00a      	beq.n	800a92a <rpmsg_send_offchannel_raw+0x2a>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d006      	beq.n	800a92a <rpmsg_send_offchannel_raw+0x2a>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <rpmsg_send_offchannel_raw+0x2a>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d101      	bne.n	800a92e <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800a92a:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <rpmsg_send_offchannel_raw+0x60>)
 800a92c:	e014      	b.n	800a958 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00c      	beq.n	800a956 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	6978      	ldr	r0, [r7, #20]
 800a950:	47a0      	blx	r4
 800a952:	4603      	mov	r3, r0
 800a954:	e000      	b.n	800a958 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800a956:	4b02      	ldr	r3, [pc, #8]	; (800a960 <rpmsg_send_offchannel_raw+0x60>)
}
 800a958:	4618      	mov	r0, r3
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd90      	pop	{r4, r7, pc}
 800a960:	fffff82d 	.word	0xfffff82d

0800a964 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b090      	sub	sp, #64	; 0x40
 800a968:	af02      	add	r7, sp, #8
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	f107 030c 	add.w	r3, r7, #12
 800a97e:	2220      	movs	r2, #32
 800a980:	4618      	mov	r0, r3
 800a982:	f003 f835 	bl	800d9f0 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a98a:	f107 030c 	add.w	r3, r7, #12
 800a98e:	2201      	movs	r2, #1
 800a990:	9201      	str	r2, [sp, #4]
 800a992:	2228      	movs	r2, #40	; 0x28
 800a994:	9200      	str	r2, [sp, #0]
 800a996:	2235      	movs	r2, #53	; 0x35
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ffb1 	bl	800a900 <rpmsg_send_offchannel_raw>
 800a99e:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	da01      	bge.n	800a9aa <rpmsg_send_ns_message+0x46>
		return ret;
 800a9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a8:	e000      	b.n	800a9ac <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3738      	adds	r7, #56	; 0x38
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	61fb      	str	r3, [r7, #28]
 800a9c8:	e04b      	b.n	800aa62 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	3b34      	subs	r3, #52	; 0x34
 800a9d2:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d006      	beq.n	800a9ea <rpmsg_get_endpoint+0x36>
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d101      	bne.n	800a9ea <rpmsg_get_endpoint+0x36>
			return ept;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	e040      	b.n	800aa6c <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d106      	bne.n	800aa02 <rpmsg_get_endpoint+0x4e>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d101      	bne.n	800aa02 <rpmsg_get_endpoint+0x4e>
			return ept;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	e034      	b.n	800aa6c <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00c      	beq.n	800aa22 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f002 ffdc 	bl	800d9cc <strncmp>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bf0c      	ite	eq
 800aa1a:	2301      	moveq	r3, #1
 800aa1c:	2300      	movne	r3, #0
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d018      	beq.n	800aa5a <rpmsg_get_endpoint+0xa6>
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d015      	beq.n	800aa5a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d006      	beq.n	800aa44 <rpmsg_get_endpoint+0x90>
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d101      	bne.n	800aa44 <rpmsg_get_endpoint+0x90>
			return ept;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	e013      	b.n	800aa6c <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d107      	bne.n	800aa5c <rpmsg_get_endpoint+0xa8>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa54:	d102      	bne.n	800aa5c <rpmsg_get_endpoint+0xa8>
			return ept;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	e008      	b.n	800aa6c <rpmsg_get_endpoint+0xb8>
			continue;
 800aa5a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	69fa      	ldr	r2, [r7, #28]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d1af      	bne.n	800a9ca <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d016      	beq.n	800aab0 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa90:	d008      	beq.n	800aaa4 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	2180      	movs	r1, #128	; 0x80
 800aaa0:	f7ff feec 	bl	800a87c <rpmsg_release_address>
	metal_list_del(&ept->node);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3334      	adds	r3, #52	; 0x34
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff fe0f 	bl	800a6cc <metal_list_del>
 800aaae:	e000      	b.n	800aab2 <rpmsg_unregister_endpoint+0x3e>
		return;
 800aab0:	bf00      	nop
}
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	3334      	adds	r3, #52	; 0x34
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7ff fdee 	bl	800a6b2 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	613b      	str	r3, [r7, #16]

	if (!ept)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 800aaf8:	4b37      	ldr	r3, [pc, #220]	; (800abd8 <rpmsg_create_ept+0xf8>)
 800aafa:	e068      	b.n	800abce <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	3358      	adds	r3, #88	; 0x58
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff fda6 	bl	800a652 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0c:	d018      	beq.n	800ab40 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3348      	adds	r3, #72	; 0x48
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	2180      	movs	r1, #128	; 0x80
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fec2 	bl	800a8a0 <rpmsg_is_address_set>
 800ab1c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d107      	bne.n	800ab34 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	3348      	adds	r3, #72	; 0x48
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff fecf 	bl	800a8d0 <rpmsg_set_address>
 800ab32:	e00c      	b.n	800ab4e <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dd40      	ble.n	800abbc <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
			goto ret_status;
 800ab3e:	e040      	b.n	800abc2 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	3348      	adds	r3, #72	; 0x48
 800ab44:	2180      	movs	r1, #128	; 0x80
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7ff fe79 	bl	800a83e <rpmsg_get_address>
 800ab4c:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7ff fe51 	bl	800a804 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	68b8      	ldr	r0, [r7, #8]
 800ab66:	f7ff ffa7 	bl	800aab8 <rpmsg_register_endpoint>
 800ab6a:	6178      	str	r0, [r7, #20]
	if (status < 0)
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	da06      	bge.n	800ab80 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	3348      	adds	r3, #72	; 0x48
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	2180      	movs	r1, #128	; 0x80
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff fe7e 	bl	800a87c <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d11c      	bne.n	800abc0 <rpmsg_create_ept+0xe0>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d117      	bne.n	800abc0 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3358      	adds	r3, #88	; 0x58
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff fd67 	bl	800a668 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff fee1 	bl	800a964 <rpmsg_send_ns_message>
 800aba2:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	3358      	adds	r3, #88	; 0x58
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff fd52 	bl	800a652 <metal_mutex_acquire>
		if (status)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d005      	beq.n	800abc0 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7ff ff5d 	bl	800aa74 <rpmsg_unregister_endpoint>
 800abba:	e002      	b.n	800abc2 <rpmsg_create_ept+0xe2>
			goto ret_status;
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <rpmsg_create_ept+0xe2>
	}

ret_status:
 800abc0:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3358      	adds	r3, #88	; 0x58
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fd4e 	bl	800a668 <metal_mutex_release>
	return status;
 800abcc:	697b      	ldr	r3, [r7, #20]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	fffff82d 	.word	0xfffff82d

0800abdc <__metal_cache_invalidate>:
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fcc2 	bl	800b572 <metal_machine_cache_invalidate>
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <metal_cache_invalidate>:
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7ff ffea 	bl	800abdc <__metal_cache_invalidate>
}
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff ffee 	bl	800ac10 <__metal_sleep_usec>
 800ac34:	4603      	mov	r3, r0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <metal_list_init>:
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	605a      	str	r2, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	601a      	str	r2, [r3, #0]
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <metal_io_virt_to_offset>:
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d201      	bcs.n	800ac82 <metal_io_virt_to_offset+0x22>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	e001      	b.n	800ac86 <metal_io_virt_to_offset+0x26>
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <__metal_mutex_init>:
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60bb      	str	r3, [r7, #8]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	461a      	mov	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f3bf 8f5b 	dmb	ish
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	f3bf 8f5b 	dmb	ish
}
 800acb2:	bf00      	nop
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <__metal_mutex_acquire>:
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800acc6:	bf00      	nop
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	4611      	mov	r1, r2
 800acce:	f3bf 8f5b 	dmb	ish
 800acd2:	e8d3 2f4f 	ldrexb	r2, [r3]
 800acd6:	e8c3 1f40 	strexb	r0, r1, [r3]
 800acda:	2800      	cmp	r0, #0
 800acdc:	d1f9      	bne.n	800acd2 <__metal_mutex_acquire+0x14>
 800acde:	f3bf 8f5b 	dmb	ish
 800ace2:	b2d3      	uxtb	r3, r2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1ef      	bne.n	800acc8 <__metal_mutex_acquire+0xa>
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <__metal_mutex_release>:
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f3bf 8f5b 	dmb	ish
 800ad04:	2200      	movs	r2, #0
 800ad06:	701a      	strb	r2, [r3, #0]
 800ad08:	f3bf 8f5b 	dmb	ish
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <metal_mutex_init>:
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ffb6 	bl	800ac92 <__metal_mutex_init>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <metal_mutex_acquire>:
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff ffc1 	bl	800acbe <__metal_mutex_acquire>
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <metal_mutex_release>:
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ffd2 	bl	800acf6 <__metal_mutex_release>
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <rpmsg_init_ept>:
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
 800ad66:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 fe3e 	bl	800d9f0 <strncpy>
	ept->addr = src;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	69fa      	ldr	r2, [r7, #28]
 800ad8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ada0:	699b      	ldr	r3, [r3, #24]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	370c      	adds	r7, #12
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800adc6:	78f9      	ldrb	r1, [r7, #3]
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
}
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	4798      	blx	r3
 800ae0e:	4603      	mov	r3, r0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af02      	add	r7, sp, #8
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	f000 fbf2 	bl	800b61c <virtio_create_virtqueues>
 800ae38:	4603      	mov	r3, r0
					callbacks);
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	2100      	movs	r1, #0
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff fdad 	bl	800a9b4 <rpmsg_get_endpoint>
 800ae5a:	4603      	mov	r3, r0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d901      	bls.n	800ae7c <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e00f      	b.n	800ae9c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6899      	ldr	r1, [r3, #8]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	1acb      	subs	r3, r1, r3
 800ae8a:	4413      	add	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	1ad2      	subs	r2, r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	605a      	str	r2, [r3, #4]

	return buffer;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
	if (!shpool)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d01d      	beq.n	800aef6 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <rpmsg_virtio_init_shm_pool+0x2c>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f023 0303 	bic.w	r3, r3, #3
 800aed0:	3304      	adds	r3, #4
 800aed2:	e000      	b.n	800aed6 <rpmsg_virtio_init_shm_pool+0x2e>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d004      	beq.n	800aeee <rpmsg_virtio_init_shm_pool+0x46>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	3304      	adds	r3, #4
 800aeec:	e000      	b.n	800aef0 <rpmsg_virtio_init_shm_pool+0x48>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	6053      	str	r3, [r2, #4]
 800aef4:	e000      	b.n	800aef8 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800aef6:	bf00      	nop
}
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b08a      	sub	sp, #40	; 0x28
 800af06:	af02      	add	r7, sp, #8
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	607a      	str	r2, [r7, #4]
 800af0e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff ff3f 	bl	800ad94 <rpmsg_virtio_get_role>
 800af16:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10d      	bne.n	800af3a <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800af2a:	f107 0114 	add.w	r1, r7, #20
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	2301      	movs	r3, #1
 800af34:	2200      	movs	r2, #0
 800af36:	f000 fcc0 	bl	800b8ba <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800af3a:	bf00      	nop
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b08a      	sub	sp, #40	; 0x28
 800af46:	af02      	add	r7, sp, #8
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	607a      	str	r2, [r7, #4]
 800af4e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff ff1f 	bl	800ad94 <rpmsg_virtio_get_role>
 800af56:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10f      	bne.n	800af7e <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800af6a:	f107 0114 	add.w	r1, r7, #20
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	2301      	movs	r3, #1
 800af74:	2200      	movs	r2, #0
 800af76:	f000 fca0 	bl	800b8ba <virtqueue_add_buffer>
 800af7a:	4603      	mov	r3, r0
 800af7c:	e000      	b.n	800af80 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3720      	adds	r7, #32
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7ff fefd 	bl	800ad94 <rpmsg_virtio_get_role>
 800af9a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800af9c:	2300      	movs	r3, #0
 800af9e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d116      	bne.n	800afd4 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 fcc7 	bl	800b942 <virtqueue_get_buffer>
 800afb4:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10b      	bne.n	800afd4 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff ff4d 	bl	800ae64 <rpmsg_virtio_shm_pool_get_buffer>
 800afca:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afd2:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800afd4:	697b      	ldr	r3, [r7, #20]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b086      	sub	sp, #24
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7ff fed2 	bl	800ad94 <rpmsg_virtio_get_role>
 800aff0:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d107      	bne.n	800b00c <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fc9c 	bl	800b942 <virtqueue_get_buffer>
 800b00a:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4619      	mov	r1, r3
 800b018:	6978      	ldr	r0, [r7, #20]
 800b01a:	f7ff fdec 	bl	800abf6 <metal_cache_invalidate>
	}

	return data;
 800b01e:	697b      	ldr	r3, [r7, #20]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff feaf 	bl	800ad94 <rpmsg_virtio_get_role>
 800b036:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800b042:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800b046:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800b048:	68fb      	ldr	r3, [r7, #12]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b090      	sub	sp, #64	; 0x40
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800b06e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b070:	f7ff feb0 	bl	800add4 <rpmsg_virtio_get_status>
 800b074:	4603      	mov	r3, r0
 800b076:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800b082:	4b45      	ldr	r3, [pc, #276]	; (800b198 <rpmsg_virtio_send_offchannel_raw+0x144>)
 800b084:	e083      	b.n	800b18e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800b086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800b08c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b090:	63bb      	str	r3, [r7, #56]	; 0x38
 800b092:	e001      	b.n	800b098 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3358      	adds	r3, #88	; 0x58
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fe46 	bl	800ad2e <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800b0a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b0a4:	f7ff ffc0 	bl	800b028 <_rpmsg_virtio_get_buffer_size>
 800b0a8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800b0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	dc08      	bgt.n	800b0c4 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800b0b2:	f107 0216 	add.w	r2, r7, #22
 800b0b6:	f107 0310 	add.w	r3, r7, #16
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b0be:	f7ff ff63 	bl	800af88 <rpmsg_virtio_get_tx_buffer>
 800b0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3358      	adds	r3, #88	; 0x58
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fe3b 	bl	800ad44 <metal_mutex_release>
		if (buffer || !tick_count)
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10e      	bne.n	800b0f2 <rpmsg_virtio_send_offchannel_raw+0x9e>
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00b      	beq.n	800b0f2 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800b0e0:	4b2e      	ldr	r3, [pc, #184]	; (800b19c <rpmsg_virtio_send_offchannel_raw+0x148>)
 800b0e2:	e054      	b.n	800b18e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800b0e4:	200a      	movs	r0, #10
 800b0e6:	f7ff fd9e 	bl	800ac26 <metal_sleep_usec>
		tick_count--;
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800b0f0:	e7d2      	b.n	800b098 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800b0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800b0f8:	4b29      	ldr	r3, [pc, #164]	; (800b1a0 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800b0fa:	e048      	b.n	800b18e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800b104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b106:	b29b      	uxth	r3, r3
 800b108:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800b114:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b118:	f7ff fda2 	bl	800ac60 <metal_io_virt_to_offset>
 800b11c:	4601      	mov	r1, r0
 800b11e:	f107 0218 	add.w	r2, r7, #24
 800b122:	2310      	movs	r3, #16
 800b124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b126:	f7fe fdd8 	bl	8009cda <metal_io_block_write>
 800b12a:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	2b10      	cmp	r3, #16
 800b130:	d000      	beq.n	800b134 <rpmsg_virtio_send_offchannel_raw+0xe0>
 800b132:	e7fe      	b.n	800b132 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800b134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b136:	3310      	adds	r3, #16
 800b138:	4619      	mov	r1, r3
 800b13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b13c:	f7ff fd90 	bl	800ac60 <metal_io_virt_to_offset>
 800b140:	4601      	mov	r1, r0
 800b142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b148:	f7fe fdc7 	bl	8009cda <metal_io_block_write>
 800b14c:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800b14e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b152:	429a      	cmp	r2, r3
 800b154:	d000      	beq.n	800b158 <rpmsg_virtio_send_offchannel_raw+0x104>
 800b156:	e7fe      	b.n	800b156 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3358      	adds	r3, #88	; 0x58
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff fde6 	bl	800ad2e <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	8afb      	ldrh	r3, [r7, #22]
 800b166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b16a:	f7ff feea 	bl	800af42 <rpmsg_virtio_enqueue_buffer>
 800b16e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	2b00      	cmp	r3, #0
 800b174:	d000      	beq.n	800b178 <rpmsg_virtio_send_offchannel_raw+0x124>
 800b176:	e7fe      	b.n	800b176 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fc5a 	bl	800ba36 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3358      	adds	r3, #88	; 0x58
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fddc 	bl	800ad44 <metal_mutex_release>

	return size;
 800b18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3740      	adds	r7, #64	; 0x40
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	fffff82c 	.word	0xfffff82c
 800b19c:	fffff82b 	.word	0xfffff82b
 800b1a0:	fffff82e 	.word	0xfffff82e

0800b1a4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800b1b8:	b590      	push	{r4, r7, lr}
 800b1ba:	b08d      	sub	sp, #52	; 0x34
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	3358      	adds	r3, #88	; 0x58
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7ff fdaa 	bl	800ad2e <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800b1da:	f107 020a 	add.w	r2, r7, #10
 800b1de:	f107 030c 	add.w	r3, r7, #12
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	69f8      	ldr	r0, [r7, #28]
 800b1e6:	f7ff fefa 	bl	800afde <rpmsg_virtio_get_rx_buffer>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	3358      	adds	r3, #88	; 0x58
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fda7 	bl	800ad44 <metal_mutex_release>

	while (rp_hdr) {
 800b1f6:	e04c      	b.n	800b292 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	3358      	adds	r3, #88	; 0x58
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff fd96 	bl	800ad2e <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	4619      	mov	r1, r3
 800b208:	69b8      	ldr	r0, [r7, #24]
 800b20a:	f7ff fe1a 	bl	800ae42 <rpmsg_get_ept_from_addr>
 800b20e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	3358      	adds	r3, #88	; 0x58
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fd95 	bl	800ad44 <metal_mutex_release>

		if (!ept)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d03c      	beq.n	800b29a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b228:	d103      	bne.n	800b232 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	899b      	ldrh	r3, [r3, #12]
 800b240:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b242:	4618      	mov	r0, r3
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	4613      	mov	r3, r2
 800b250:	4602      	mov	r2, r0
 800b252:	6978      	ldr	r0, [r7, #20]
 800b254:	47a0      	blx	r4
 800b256:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d000      	beq.n	800b260 <rpmsg_virtio_rx_callback+0xa8>
 800b25e:	e7fe      	b.n	800b25e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	3358      	adds	r3, #88	; 0x58
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fd62 	bl	800ad2e <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	897b      	ldrh	r3, [r7, #10]
 800b26e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b270:	69f8      	ldr	r0, [r7, #28]
 800b272:	f7ff fe46 	bl	800af02 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800b276:	f107 020a 	add.w	r2, r7, #10
 800b27a:	f107 030c 	add.w	r3, r7, #12
 800b27e:	4619      	mov	r1, r3
 800b280:	69f8      	ldr	r0, [r7, #28]
 800b282:	f7ff feac 	bl	800afde <rpmsg_virtio_get_rx_buffer>
 800b286:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	3358      	adds	r3, #88	; 0x58
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff fd59 	bl	800ad44 <metal_mutex_release>
	while (rp_hdr) {
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1af      	bne.n	800b1f8 <rpmsg_virtio_rx_callback+0x40>
 800b298:	e000      	b.n	800b29c <rpmsg_virtio_rx_callback+0xe4>
			return;
 800b29a:	bf00      	nop
	}
}
 800b29c:	372c      	adds	r7, #44	; 0x2c
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd90      	pop	{r4, r7, pc}

0800b2a2 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b092      	sub	sp, #72	; 0x48
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	607a      	str	r2, [r7, #4]
 800b2ae:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a1b      	ldr	r3, [r3, #32]
 800b2b4:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800b2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b8:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800b2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b28      	cmp	r3, #40	; 0x28
 800b2c8:	d001      	beq.n	800b2ce <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e057      	b.n	800b37e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2d4:	f7ff fcc4 	bl	800ac60 <metal_io_virt_to_offset>
 800b2d8:	4601      	mov	r1, r0
 800b2da:	f107 0210 	add.w	r2, r7, #16
 800b2de:	2320      	movs	r3, #32
 800b2e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2e2:	f7fe fc83 	bl	8009bec <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e8:	6a1b      	ldr	r3, [r3, #32]
 800b2ea:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800b2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ee:	3358      	adds	r3, #88	; 0x58
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fd1c 	bl	800ad2e <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800b2f6:	f107 0110 	add.w	r1, r7, #16
 800b2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b302:	f7ff fb57 	bl	800a9b4 <rpmsg_get_endpoint>
 800b306:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d017      	beq.n	800b344 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	f04f 32ff 	mov.w	r2, #4294967295
 800b320:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800b322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b324:	3358      	adds	r3, #88	; 0x58
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fd0c 	bl	800ad44 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d024      	beq.n	800b37c <rpmsg_virtio_ns_callback+0xda>
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b336:	2b00      	cmp	r3, #0
 800b338:	d020      	beq.n	800b37c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	4798      	blx	r3
 800b342:	e01b      	b.n	800b37c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	2b00      	cmp	r3, #0
 800b348:	d110      	bne.n	800b36c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800b34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b34c:	3358      	adds	r3, #88	; 0x58
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fcf8 	bl	800ad44 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800b354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00f      	beq.n	800b37c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800b35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b360:	f107 0110 	add.w	r1, r7, #16
 800b364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b366:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b368:	4798      	blx	r3
 800b36a:	e007      	b.n	800b37c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b370:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800b372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b374:	3358      	adds	r3, #88	; 0x58
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff fce4 	bl	800ad44 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3748      	adds	r7, #72	; 0x48
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b094      	sub	sp, #80	; 0x50
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800b39a:	2264      	movs	r2, #100	; 0x64
 800b39c:	2100      	movs	r1, #0
 800b39e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3a0:	f001 f9ca 	bl	800c738 <memset>
	metal_mutex_init(&rdev->lock);
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	3358      	adds	r3, #88	; 0x58
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff fcb5 	bl	800ad18 <metal_mutex_init>
	rvdev->vdev = vdev;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	4a5d      	ldr	r2, [pc, #372]	; (800b538 <rpmsg_init_vdev+0x1b0>)
 800b3c4:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fce4 	bl	800ad94 <rpmsg_virtio_get_role>
 800b3cc:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d120      	bne.n	800b416 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800b3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800b3da:	4b58      	ldr	r3, [pc, #352]	; (800b53c <rpmsg_init_vdev+0x1b4>)
 800b3dc:	e0a7      	b.n	800b52e <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800b3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800b3e6:	4b56      	ldr	r3, [pc, #344]	; (800b540 <rpmsg_init_vdev+0x1b8>)
 800b3e8:	e0a1      	b.n	800b52e <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3ee:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800b3f0:	4b54      	ldr	r3, [pc, #336]	; (800b544 <rpmsg_init_vdev+0x1bc>)
 800b3f2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800b3f4:	4b54      	ldr	r3, [pc, #336]	; (800b548 <rpmsg_init_vdev+0x1c0>)
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800b3f8:	4b54      	ldr	r3, [pc, #336]	; (800b54c <rpmsg_init_vdev+0x1c4>)
 800b3fa:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800b3fc:	4b54      	ldr	r3, [pc, #336]	; (800b550 <rpmsg_init_vdev+0x1c8>)
 800b3fe:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	3318      	adds	r3, #24
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800b41c:	f107 0220 	add.w	r2, r7, #32
 800b420:	f107 0318 	add.w	r3, r7, #24
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	4613      	mov	r3, r2
 800b428:	2202      	movs	r2, #2
 800b42a:	2100      	movs	r1, #0
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff fcf3 	bl	800ae18 <rpmsg_virtio_create_virtqueues>
 800b432:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800b434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <rpmsg_init_vdev+0xb6>
		return status;
 800b43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43c:	e077      	b.n	800b52e <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800b43e:	2300      	movs	r3, #0
 800b440:	643b      	str	r3, [r7, #64]	; 0x40
 800b442:	e00f      	b.n	800b464 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b44a:	4613      	mov	r3, r2
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4413      	add	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	440b      	add	r3, r1
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800b458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800b45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b460:	3301      	adds	r3, #1
 800b462:	643b      	str	r3, [r7, #64]	; 0x40
 800b464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b466:	2b01      	cmp	r3, #1
 800b468:	d9ec      	bls.n	800b444 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d137      	bne.n	800b4e0 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800b470:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b474:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800b476:	2300      	movs	r3, #0
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b47a:	e02a      	b.n	800b4d2 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800b47c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b480:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b482:	f7ff fcef 	bl	800ae64 <rpmsg_virtio_shm_pool_get_buffer>
 800b486:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800b48e:	4b2c      	ldr	r3, [pc, #176]	; (800b540 <rpmsg_init_vdev+0x1b8>)
 800b490:	e04d      	b.n	800b52e <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800b496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b498:	6838      	ldr	r0, [r7, #0]
 800b49a:	f7ff fbe1 	bl	800ac60 <metal_io_virt_to_offset>
 800b49e:	4601      	mov	r1, r0
 800b4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	6838      	ldr	r0, [r7, #0]
 800b4a8:	f7fe fc8d 	bl	8009dc6 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b4b0:	f107 0110 	add.w	r1, r7, #16
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f000 f9fd 	bl	800b8ba <virtqueue_add_buffer>
 800b4c0:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800b4c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <rpmsg_init_vdev+0x144>
				return status;
 800b4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ca:	e030      	b.n	800b52e <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800b4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4d6:	895b      	ldrh	r3, [r3, #10]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d3cd      	bcc.n	800b47c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fbab 	bl	800ac3e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fc84 	bl	800adf6 <rpmsg_virtio_get_features>
 800b4ee:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d011      	beq.n	800b51e <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	f103 0008 	add.w	r0, r3, #8
 800b500:	2300      	movs	r3, #0
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	4b13      	ldr	r3, [pc, #76]	; (800b554 <rpmsg_init_vdev+0x1cc>)
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	2335      	movs	r3, #53	; 0x35
 800b50a:	2235      	movs	r2, #53	; 0x35
 800b50c:	4912      	ldr	r1, [pc, #72]	; (800b558 <rpmsg_init_vdev+0x1d0>)
 800b50e:	f7ff fc24 	bl	800ad5a <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	3308      	adds	r3, #8
 800b516:	4619      	mov	r1, r3
 800b518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b51a:	f7ff facd 	bl	800aab8 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b520:	2b00      	cmp	r3, #0
 800b522:	d103      	bne.n	800b52c <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800b524:	2104      	movs	r1, #4
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff fc41 	bl	800adae <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800b52c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3748      	adds	r7, #72	; 0x48
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	0800b055 	.word	0x0800b055
 800b53c:	fffff82d 	.word	0xfffff82d
 800b540:	fffff82e 	.word	0xfffff82e
 800b544:	08011474 	.word	0x08011474
 800b548:	0801147c 	.word	0x0801147c
 800b54c:	0800b1b9 	.word	0x0800b1b9
 800b550:	0800b1a5 	.word	0x0800b1a5
 800b554:	0800b2a3 	.word	0x0800b2a3
 800b558:	08011484 	.word	0x08011484

0800b55c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800b596:	68fb      	ldr	r3, [r7, #12]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	011b      	lsls	r3, r3, #4
 800b5b2:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3303      	adds	r3, #3
 800b5b8:	005a      	lsls	r2, r3, #1
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4413      	add	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	1e5a      	subs	r2, r3, #1
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	425b      	negs	r3, r3
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	3306      	adds	r3, #6
 800b5da:	60fb      	str	r3, [r7, #12]

	return size;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <metal_io_virt_to_offset>:
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b085      	sub	sp, #20
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	429a      	cmp	r2, r3
 800b606:	d201      	bcs.n	800b60c <metal_io_virt_to_offset+0x22>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	e001      	b.n	800b610 <metal_io_virt_to_offset+0x26>
 800b60c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b091      	sub	sp, #68	; 0x44
 800b620:	af04      	add	r7, sp, #16
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	429a      	cmp	r2, r3
 800b636:	d902      	bls.n	800b63e <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800b638:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800b63c:	e053      	b.n	800b6e6 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800b63e:	2300      	movs	r3, #0
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b642:	e04b      	b.n	800b6dc <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	440b      	add	r3, r1
 800b654:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	3304      	adds	r3, #4
 800b65a:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d118      	bne.n	800b696 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4619      	mov	r1, r3
 800b670:	69f8      	ldr	r0, [r7, #28]
 800b672:	f7ff ffba 	bl	800b5ea <metal_io_virt_to_offset>
 800b676:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800b67c:	461a      	mov	r2, r3
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	4619      	mov	r1, r3
 800b684:	4610      	mov	r0, r2
 800b686:	f7ff ff8d 	bl	800b5a4 <vring_size>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2200      	movs	r2, #0
 800b68e:	69b9      	ldr	r1, [r7, #24]
 800b690:	69f8      	ldr	r0, [r7, #28]
 800b692:	f7fe fb98 	bl	8009dc6 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	b298      	uxth	r0, r3
 800b69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6aa:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800b6ac:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800b6b2:	6a12      	ldr	r2, [r2, #32]
 800b6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6b6:	6809      	ldr	r1, [r1, #0]
 800b6b8:	9102      	str	r1, [sp, #8]
 800b6ba:	9201      	str	r2, [sp, #4]
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f8c4 	bl	800b852 <virtqueue_create>
 800b6ca:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <virtio_create_virtqueues+0xba>
			return ret;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	e007      	b.n	800b6e6 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	3301      	adds	r3, #1
 800b6da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d3af      	bcc.n	800b644 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3734      	adds	r7, #52	; 0x34
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd90      	pop	{r4, r7, pc}

0800b6ee <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	60b9      	str	r1, [r7, #8]
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	441a      	add	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	4413      	add	r3, r2
 800b71e:	3304      	adds	r3, #4
 800b720:	461a      	mov	r2, r3
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	425b      	negs	r3, r3
 800b72c:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800b72e:	461a      	mov	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	60da      	str	r2, [r3, #12]
}
 800b734:	bf00      	nop
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	80fb      	strh	r3, [r7, #6]
 800b74a:	460b      	mov	r3, r1
 800b74c:	80bb      	strh	r3, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800b752:	88ba      	ldrh	r2, [r7, #4]
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	b29b      	uxth	r3, r3
 800b75a:	3b01      	subs	r3, #1
 800b75c:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800b75e:	88b9      	ldrh	r1, [r7, #4]
 800b760:	887b      	ldrh	r3, [r7, #2]
 800b762:	1acb      	subs	r3, r1, r3
 800b764:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800b766:	429a      	cmp	r2, r3
 800b768:	bf34      	ite	cc
 800b76a:	2301      	movcc	r3, #1
 800b76c:	2300      	movcs	r3, #0
 800b76e:	b2db      	uxtb	r3, r3
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <metal_io_virt_to_offset>:
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	429a      	cmp	r2, r3
 800b798:	d201      	bcs.n	800b79e <metal_io_virt_to_offset+0x22>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	e001      	b.n	800b7a2 <metal_io_virt_to_offset+0x26>
 800b79e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <metal_io_phys>:
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800b7bc:	2b1f      	cmp	r3, #31
 800b7be:	d805      	bhi.n	800b7cc <metal_io_phys+0x1e>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ca:	e000      	b.n	800b7ce <metal_io_phys+0x20>
 800b7cc:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800b7ce:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d010      	beq.n	800b7fa <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d80b      	bhi.n	800b7fa <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6919      	ldr	r1, [r3, #16]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800b7f6:	4413      	add	r3, r2
 800b7f8:	e001      	b.n	800b7fe <metal_io_phys+0x50>
 800b7fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <metal_io_virt_to_phys>:
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b082      	sub	sp, #8
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff ffb0 	bl	800b77c <metal_io_virt_to_offset>
 800b81c:	4603      	mov	r3, r0
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7ff ffc4 	bl	800b7ae <metal_io_phys>
 800b826:	4603      	mov	r3, r0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff ffe1 	bl	800b80a <metal_io_virt_to_phys>
 800b848:	4603      	mov	r3, r0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	607a      	str	r2, [r7, #4]
 800b85c:	603b      	str	r3, [r7, #0]
 800b85e:	460b      	mov	r3, r1
 800b860:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d121      	bne.n	800b8b0 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	897a      	ldrh	r2, [r7, #10]
 800b87c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	891a      	ldrh	r2, [r3, #8]
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	895a      	ldrh	r2, [r3, #10]
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	6a3a      	ldr	r2, [r7, #32]
 800b892:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b898:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	6819      	ldr	r1, [r3, #0]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8a6:	f000 f97a 	bl	800bb9e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800b8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ac:	f000 f899 	bl	800b9e2 <virtqueue_disable_cb>
	}

	return (status);
 800b8b0:	697b      	ldr	r3, [r7, #20]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b08a      	sub	sp, #40	; 0x28
 800b8be:	af02      	add	r7, sp, #8
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
 800b8c6:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d12c      	bne.n	800b938 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b8e2:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800b8e4:	8a7b      	ldrh	r3, [r7, #18]
 800b8e6:	3307      	adds	r3, #7
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8f4:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	69d9      	ldr	r1, [r3, #28]
 800b902:	8a7a      	ldrh	r2, [r7, #18]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f8a7 	bl	800ba62 <vq_ring_add_buffer>
 800b914:	4603      	mov	r3, r0
 800b916:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	8a3a      	ldrh	r2, [r7, #16]
 800b91c:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	b29b      	uxth	r3, r3
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	b29a      	uxth	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800b92e:	8a7b      	ldrh	r3, [r7, #18]
 800b930:	4619      	mov	r1, r3
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 f966 	bl	800bc04 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800b938:	69bb      	ldr	r3, [r7, #24]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3720      	adds	r7, #32
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b088      	sub	sp, #32
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d006      	beq.n	800b962 <virtqueue_get_buffer+0x20>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	885b      	ldrh	r3, [r3, #2]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d101      	bne.n	800b966 <virtqueue_get_buffer+0x24>
		return (NULL);
 800b962:	2300      	movs	r3, #0
 800b964:	e039      	b.n	800b9da <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	b291      	uxth	r1, r2
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	8651      	strh	r1, [r2, #50]	; 0x32
 800b972:	b21a      	sxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	895b      	ldrh	r3, [r3, #10]
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	b21b      	sxth	r3, r3
 800b97e:	4013      	ands	r3, r2
 800b980:	b21b      	sxth	r3, r3
 800b982:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b988:	8bfb      	ldrh	r3, [r7, #30]
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	4413      	add	r3, r2
 800b98e:	3304      	adds	r3, #4
 800b990:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800b992:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	82fb      	strh	r3, [r7, #22]
	if (len)
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800b9aa:	8afb      	ldrh	r3, [r7, #22]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 f8ae 	bl	800bb10 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800b9b4:	8afa      	ldrh	r2, [r7, #22]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3207      	adds	r2, #7
 800b9ba:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b9be:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800b9c0:	8afa      	ldrh	r2, [r7, #22]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3207      	adds	r2, #7
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8bfa      	ldrh	r2, [r7, #30]
 800b9d6:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800b9d8:	693b      	ldr	r3, [r7, #16]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3720      	adds	r7, #32
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d010      	beq.n	800ba18 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	895b      	ldrh	r3, [r3, #10]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a1a      	ldr	r2, [r3, #32]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800ba0a:	3901      	subs	r1, #1
 800ba0c:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	4413      	add	r3, r2
 800ba12:	460a      	mov	r2, r1
 800ba14:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800ba16:	e008      	b.n	800ba2a <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a1b      	ldr	r3, [r3, #32]
 800ba1c:	881a      	ldrh	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	f042 0201 	orr.w	r2, r2, #1
 800ba26:	b292      	uxth	r2, r2
 800ba28:	801a      	strh	r2, [r3, #0]
}
 800ba2a:	bf00      	nop
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800ba3e:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f91d 	bl	800bc82 <vq_ring_must_notify_host>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f94d 	bl	800bcee <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800ba5a:	bf00      	nop
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b088      	sub	sp, #32
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	60b9      	str	r1, [r7, #8]
 800ba6c:	603b      	str	r3, [r7, #0]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800ba72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba76:	4413      	add	r3, r2
 800ba78:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	837b      	strh	r3, [r7, #26]
 800ba82:	e03c      	b.n	800bafe <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800ba84:	8b7b      	ldrh	r3, [r7, #26]
 800ba86:	011b      	lsls	r3, r3, #4
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	00db      	lsls	r3, r3, #3
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	4413      	add	r3, r2
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fec8 	bl	800b830 <virtqueue_virt_to_phys>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	6939      	ldr	r1, [r7, #16]
 800baaa:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	4413      	add	r3, r2
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	461a      	mov	r2, r3
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2200      	movs	r2, #0
 800bac2:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	3b01      	subs	r3, #1
 800bac8:	69fa      	ldr	r2, [r7, #28]
 800baca:	429a      	cmp	r2, r3
 800bacc:	da06      	bge.n	800badc <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	899b      	ldrh	r3, [r3, #12]
 800bad2:	f043 0301 	orr.w	r3, r3, #1
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	429a      	cmp	r2, r3
 800bae2:	db06      	blt.n	800baf2 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	899b      	ldrh	r3, [r3, #12]
 800bae8:	f043 0302 	orr.w	r3, r3, #2
 800baec:	b29a      	uxth	r2, r3
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	3301      	adds	r3, #1
 800baf6:	61fb      	str	r3, [r7, #28]
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	89db      	ldrh	r3, [r3, #14]
 800bafc:	837b      	strh	r3, [r7, #26]
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	dbbe      	blt.n	800ba84 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800bb06:	8b7b      	ldrh	r3, [r7, #26]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	69da      	ldr	r2, [r3, #28]
 800bb20:	887b      	ldrh	r3, [r7, #2]
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	4413      	add	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800bb28:	887b      	ldrh	r3, [r7, #2]
 800bb2a:	3307      	adds	r3, #7
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	889b      	ldrh	r3, [r3, #4]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	889b      	ldrh	r3, [r3, #4]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	899b      	ldrh	r3, [r3, #12]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d113      	bne.n	800bb84 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800bb5c:	e00c      	b.n	800bb78 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	69da      	ldr	r2, [r3, #28]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	89db      	ldrh	r3, [r3, #14]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	889b      	ldrh	r3, [r3, #4]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	899b      	ldrh	r3, [r3, #12]
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1ec      	bne.n	800bb5e <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	887a      	ldrh	r2, [r7, #2]
 800bb90:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b088      	sub	sp, #32
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	895b      	ldrh	r3, [r3, #10]
 800bbae:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3318      	adds	r3, #24
 800bbb4:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800bbb6:	69b9      	ldr	r1, [r7, #24]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	6978      	ldr	r0, [r7, #20]
 800bbbe:	f7ff fd96 	bl	800b6ee <vring_init>

	for (i = 0; i < size - 1; i++)
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	61fb      	str	r3, [r7, #28]
 800bbc6:	e00c      	b.n	800bbe2 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	6859      	ldr	r1, [r3, #4]
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	011b      	lsls	r3, r3, #4
 800bbd4:	440b      	add	r3, r1
 800bbd6:	3201      	adds	r2, #1
 800bbd8:	b292      	uxth	r2, r2
 800bbda:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	61fb      	str	r3, [r7, #28]
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	69fa      	ldr	r2, [r7, #28]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	dbed      	blt.n	800bbc8 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	011b      	lsls	r3, r3, #4
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bbfa:	81da      	strh	r2, [r3, #14]
}
 800bbfc:	bf00      	nop
 800bbfe:	3720      	adds	r7, #32
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	885b      	ldrh	r3, [r3, #2]
 800bc16:	b21a      	sxth	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	895b      	ldrh	r3, [r3, #10]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	b21b      	sxth	r3, r3
 800bc22:	4013      	ands	r3, r2
 800bc24:	b21b      	sxth	r3, r3
 800bc26:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a1a      	ldr	r2, [r3, #32]
 800bc2c:	89fb      	ldrh	r3, [r7, #14]
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	4413      	add	r3, r2
 800bc32:	887a      	ldrh	r2, [r7, #2]
 800bc34:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800bc36:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	885a      	ldrh	r2, [r3, #2]
 800bc40:	3201      	adds	r2, #1
 800bc42:	b292      	uxth	r2, r2
 800bc44:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800bc66:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <virtqueue_notification+0x1c>
		vq->callback(vq);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d01d      	beq.n	800bcd2 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	885b      	ldrh	r3, [r3, #2]
 800bc9c:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca2:	89fa      	ldrh	r2, [r7, #14]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800bcb8:	89ba      	ldrh	r2, [r7, #12]
 800bcba:	89f9      	ldrh	r1, [r7, #14]
 800bcbc:	897b      	ldrh	r3, [r7, #10]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fd3e 	bl	800b740 <vring_need_event>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bf14      	ite	ne
 800bcca:	2301      	movne	r3, #1
 800bccc:	2300      	moveq	r3, #0
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	e009      	b.n	800bce6 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bf0c      	ite	eq
 800bce0:	2301      	moveq	r3, #1
 800bce2:	2300      	movne	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af02      	add	r7, sp, #8
	isPortrait = true;
 800bd16:	4b5e      	ldr	r3, [pc, #376]	; (800be90 <screenInit+0x180>)
 800bd18:	2201      	movs	r2, #1
 800bd1a:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 800bd1c:	f7fc fdf4 	bl	8008908 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 800bd20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bd24:	f7fd fc40 	bl	80095a8 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 800bd28:	4b59      	ldr	r3, [pc, #356]	; (800be90 <screenInit+0x180>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00d      	beq.n	800bd4c <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 800bd30:	2000      	movs	r0, #0
 800bd32:	f7fd fb19 	bl	8009368 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800bd36:	2000      	movs	r0, #0
 800bd38:	f7fd fbf8 	bl	800952c <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800bd3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd40:	2200      	movs	r2, #0
 800bd42:	21a0      	movs	r1, #160	; 0xa0
 800bd44:	2080      	movs	r0, #128	; 0x80
 800bd46:	f7fc fdff 	bl	8008948 <Paint_NewImage>
 800bd4a:	e00c      	b.n	800bd66 <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 800bd4c:	2005      	movs	r0, #5
 800bd4e:	f7fd fb0b 	bl	8009368 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800bd52:	2000      	movs	r0, #0
 800bd54:	f7fd fbea 	bl	800952c <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800bd58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2180      	movs	r1, #128	; 0x80
 800bd60:	20a0      	movs	r0, #160	; 0xa0
 800bd62:	f7fc fdf1 	bl	8008948 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 800bd66:	484b      	ldr	r0, [pc, #300]	; (800be94 <screenInit+0x184>)
 800bd68:	f7fc fe3a 	bl	80089e0 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 800bd6c:	484a      	ldr	r0, [pc, #296]	; (800be98 <screenInit+0x188>)
 800bd6e:	f7fc fe47 	bl	8008a00 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 800bd72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bd76:	f7fc ff03 	bl	8008b80 <Paint_Clear>
	DEV_Delay_ms(1000);
 800bd7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bd7e:	f7f6 f9f7 	bl	8002170 <HAL_Delay>

	if (isPortrait)
 800bd82:	4b43      	ldr	r3, [pc, #268]	; (800be90 <screenInit+0x180>)
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d038      	beq.n	800bdfc <screenInit+0xec>
	{
		Paint_DrawImage(gImage_ParaZero_Logo_100_121_LSB, 14, 1, 100, 121);
 800bd8a:	2379      	movs	r3, #121	; 0x79
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	2364      	movs	r3, #100	; 0x64
 800bd90:	2201      	movs	r2, #1
 800bd92:	210e      	movs	r1, #14
 800bd94:	4841      	ldr	r0, [pc, #260]	; (800be9c <screenInit+0x18c>)
 800bd96:	f7fd f8a9 	bl	8008eec <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	4b3e      	ldr	r3, [pc, #248]	; (800bea0 <screenInit+0x190>)
 800bda6:	4a3f      	ldr	r2, [pc, #252]	; (800bea4 <screenInit+0x194>)
 800bda8:	2182      	movs	r1, #130	; 0x82
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7fc ffb4 	bl	8008d18 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 ,1.000, 2,  &Font12, BLACK, WHITE);
 800bdb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	4b39      	ldr	r3, [pc, #228]	; (800bea0 <screenInit+0x190>)
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bdc2:	218e      	movs	r1, #142	; 0x8e
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	f7fc ffff 	bl	8008dc8 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	4b32      	ldr	r3, [pc, #200]	; (800bea0 <screenInit+0x190>)
 800bdd6:	4a34      	ldr	r2, [pc, #208]	; (800bea8 <screenInit+0x198>)
 800bdd8:	2182      	movs	r1, #130	; 0x82
 800bdda:	2046      	movs	r0, #70	; 0x46
 800bddc:	f7fc ff9c 	bl	8008d18 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 ,1.100, 2,  &Font12, BLACK, WHITE);
 800bde0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	2300      	movs	r3, #0
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	4b2d      	ldr	r3, [pc, #180]	; (800bea0 <screenInit+0x190>)
 800bdec:	2202      	movs	r2, #2
 800bdee:	ed9f 0b24 	vldr	d0, [pc, #144]	; 800be80 <screenInit+0x170>
 800bdf2:	218e      	movs	r1, #142	; 0x8e
 800bdf4:	2046      	movs	r0, #70	; 0x46
 800bdf6:	f7fc ffe7 	bl	8008dc8 <Paint_DrawFloatNum>
 800bdfa:	e037      	b.n	800be6c <screenInit+0x15c>
	}
	else
	{
		Paint_DrawImage(gImage_Logo, 16, 0, 128, 128);
 800bdfc:	2380      	movs	r3, #128	; 0x80
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	2380      	movs	r3, #128	; 0x80
 800be02:	2200      	movs	r2, #0
 800be04:	2110      	movs	r1, #16
 800be06:	4829      	ldr	r0, [pc, #164]	; (800beac <screenInit+0x19c>)
 800be08:	f7fd f870 	bl	8008eec <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 800be0c:	2300      	movs	r3, #0
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	4b22      	ldr	r3, [pc, #136]	; (800bea0 <screenInit+0x190>)
 800be18:	4a22      	ldr	r2, [pc, #136]	; (800bea4 <screenInit+0x194>)
 800be1a:	2162      	movs	r1, #98	; 0x62
 800be1c:	2001      	movs	r0, #1
 800be1e:	f7fc ff7b 	bl	8008d18 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 ,1.000, 2,  &Font12, BLACK, WHITE);
 800be22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	2300      	movs	r3, #0
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <screenInit+0x190>)
 800be2e:	2202      	movs	r2, #2
 800be30:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800be34:	216e      	movs	r1, #110	; 0x6e
 800be36:	2001      	movs	r0, #1
 800be38:	f7fc ffc6 	bl	8008dc8 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 800be3c:	2300      	movs	r3, #0
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	4b16      	ldr	r3, [pc, #88]	; (800bea0 <screenInit+0x190>)
 800be48:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <screenInit+0x198>)
 800be4a:	2162      	movs	r1, #98	; 0x62
 800be4c:	2068      	movs	r0, #104	; 0x68
 800be4e:	f7fc ff63 	bl	8008d18 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 ,1.200, 2,  &Font12, BLACK, WHITE);
 800be52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	2300      	movs	r3, #0
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <screenInit+0x190>)
 800be5e:	2202      	movs	r2, #2
 800be60:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800be88 <screenInit+0x178>
 800be64:	216e      	movs	r1, #110	; 0x6e
 800be66:	207c      	movs	r0, #124	; 0x7c
 800be68:	f7fc ffae 	bl	8008dc8 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 800be6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800be70:	f7f6 f97e 	bl	8002170 <HAL_Delay>
}
 800be74:	bf00      	nop
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	f3af 8000 	nop.w
 800be80:	9999999a 	.word	0x9999999a
 800be84:	3ff19999 	.word	0x3ff19999
 800be88:	33333333 	.word	0x33333333
 800be8c:	3ff33333 	.word	0x3ff33333
 800be90:	24000044 	.word	0x24000044
 800be94:	0800952d 	.word	0x0800952d
 800be98:	080094a1 	.word	0x080094a1
 800be9c:	08019964 	.word	0x08019964
 800bea0:	24000010 	.word	0x24000010
 800bea4:	08011488 	.word	0x08011488
 800bea8:	08011490 	.word	0x08011490
 800beac:	08011964 	.word	0x08011964

0800beb0 <screenClear>:

void screenClear(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
	if (isPortrait)
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <screenClear+0x40>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d007      	beq.n	800becc <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800bebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bec0:	2200      	movs	r2, #0
 800bec2:	21a0      	movs	r1, #160	; 0xa0
 800bec4:	2080      	movs	r0, #128	; 0x80
 800bec6:	f7fc fd3f 	bl	8008948 <Paint_NewImage>
 800beca:	e006      	b.n	800beda <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800becc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bed0:	2200      	movs	r2, #0
 800bed2:	2180      	movs	r1, #128	; 0x80
 800bed4:	20a0      	movs	r0, #160	; 0xa0
 800bed6:	f7fc fd37 	bl	8008948 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 800beda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bede:	f7fc fe4f 	bl	8008b80 <Paint_Clear>
	DEV_Delay_ms(1000);
 800bee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bee6:	f7f6 f943 	bl	8002170 <HAL_Delay>
}
 800beea:	bf00      	nop
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	24000044 	.word	0x24000044
 800bef4:	00000000 	.word	0x00000000

0800bef8 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 800bef8:	b590      	push	{r4, r7, lr}
 800befa:	b089      	sub	sp, #36	; 0x24
 800befc:	af02      	add	r7, sp, #8
 800befe:	60ba      	str	r2, [r7, #8]
 800bf00:	461a      	mov	r2, r3
 800bf02:	4603      	mov	r3, r0
 800bf04:	81fb      	strh	r3, [r7, #14]
 800bf06:	460b      	mov	r3, r1
 800bf08:	81bb      	strh	r3, [r7, #12]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 800bf12:	89fa      	ldrh	r2, [r7, #14]
 800bf14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bf18:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800bf1a:	fb01 f303 	mul.w	r3, r1, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	da00      	bge.n	800bf24 <centeredString+0x2c>
 800bf22:	3301      	adds	r3, #1
 800bf24:	105b      	asrs	r3, r3, #1
 800bf26:	425b      	negs	r3, r3
 800bf28:	4413      	add	r3, r2
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf32:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800c090 <centeredString+0x198>
 800bf36:	eeb0 0b47 	vmov.f64	d0, d7
 800bf3a:	f004 ffc9 	bl	8010ed0 <fmax>
 800bf3e:	eeb0 7b40 	vmov.f64	d7, d0
 800bf42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bf46:	edc7 7a00 	vstr	s15, [r7]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 800bf4e:	4b52      	ldr	r3, [pc, #328]	; (800c098 <centeredString+0x1a0>)
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f083 0301 	eor.w	r3, r3, #1
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d018      	beq.n	800bf8e <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	b298      	uxth	r0, r3
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bf68:	b299      	uxth	r1, r3
 800bf6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bf6c:	fb11 f303 	smulbb	r3, r1, r3
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	4413      	add	r3, r2
 800bf74:	b29c      	uxth	r4, r3
 800bf76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bf78:	89bb      	ldrh	r3, [r7, #12]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	89b9      	ldrh	r1, [r7, #12]
 800bf80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf84:	9200      	str	r2, [sp, #0]
 800bf86:	4622      	mov	r2, r4
 800bf88:	f7fc fe0a 	bl	8008ba0 <Paint_ClearWindows>
 800bf8c:	e04e      	b.n	800c02c <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 800bf8e:	4b42      	ldr	r3, [pc, #264]	; (800c098 <centeredString+0x1a0>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d026      	beq.n	800bfe4 <centeredString+0xec>
 800bf96:	4b41      	ldr	r3, [pc, #260]	; (800c09c <centeredString+0x1a4>)
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	f083 0301 	eor.w	r3, r3, #1
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01f      	beq.n	800bfe4 <centeredString+0xec>
 800bfa4:	4b3e      	ldr	r3, [pc, #248]	; (800c0a0 <centeredString+0x1a8>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f083 0301 	eor.w	r3, r3, #1
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d018      	beq.n	800bfe4 <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
 800bfb4:	b298      	uxth	r0, r3
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bfbe:	b299      	uxth	r1, r3
 800bfc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bfc2:	fb11 f303 	smulbb	r3, r1, r3
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4413      	add	r3, r2
 800bfca:	b29c      	uxth	r4, r3
 800bfcc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfce:	89bb      	ldrh	r3, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	89b9      	ldrh	r1, [r7, #12]
 800bfd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	4622      	mov	r2, r4
 800bfde:	f7fc fddf 	bl	8008ba0 <Paint_ClearWindows>
 800bfe2:	e023      	b.n	800c02c <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 800bfe4:	4b2c      	ldr	r3, [pc, #176]	; (800c098 <centeredString+0x1a0>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d01f      	beq.n	800c02c <centeredString+0x134>
 800bfec:	4b2b      	ldr	r3, [pc, #172]	; (800c09c <centeredString+0x1a4>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d103      	bne.n	800bffc <centeredString+0x104>
 800bff4:	4b2a      	ldr	r3, [pc, #168]	; (800c0a0 <centeredString+0x1a8>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d017      	beq.n	800c02c <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800bffc:	7dfb      	ldrb	r3, [r7, #23]
 800bffe:	b298      	uxth	r0, r3
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	b29a      	uxth	r2, r3
 800c004:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c008:	b299      	uxth	r1, r3
 800c00a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c00c:	fb11 f303 	smulbb	r3, r1, r3
 800c010:	b29b      	uxth	r3, r3
 800c012:	4413      	add	r3, r2
 800c014:	b29c      	uxth	r4, r3
 800c016:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c018:	89bb      	ldrh	r3, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	89b9      	ldrh	r1, [r7, #12]
 800c020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c024:	9200      	str	r2, [sp, #0]
 800c026:	4622      	mov	r2, r4
 800c028:	f7fc fdba 	bl	8008ba0 <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 800c02c:	68b8      	ldr	r0, [r7, #8]
 800c02e:	f7f4 f961 	bl	80002f4 <strlen>
 800c032:	4603      	mov	r3, r0
 800c034:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 800c036:	89fc      	ldrh	r4, [r7, #14]
 800c038:	68b8      	ldr	r0, [r7, #8]
 800c03a:	f7f4 f95b 	bl	80002f4 <strlen>
 800c03e:	4603      	mov	r3, r0
 800c040:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c042:	fb02 f303 	mul.w	r3, r2, r3
 800c046:	085b      	lsrs	r3, r3, #1
 800c048:	1ae3      	subs	r3, r4, r3
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c052:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800c090 <centeredString+0x198>
 800c056:	eeb0 0b47 	vmov.f64	d0, d7
 800c05a:	f004 ff39 	bl	8010ed0 <fmax>
 800c05e:	eeb0 7b40 	vmov.f64	d7, d0
 800c062:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c066:	edc7 7a00 	vstr	s15, [r7]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	b298      	uxth	r0, r3
 800c072:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c076:	89b9      	ldrh	r1, [r7, #12]
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4613      	mov	r3, r2
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	f7fc fe48 	bl	8008d18 <Paint_DrawString_EN>
}
 800c088:	bf00      	nop
 800c08a:	371c      	adds	r7, #28
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd90      	pop	{r4, r7, pc}
	...
 800c098:	2400a386 	.word	0x2400a386
 800c09c:	2400a384 	.word	0x2400a384
 800c0a0:	2400a385 	.word	0x2400a385

0800c0a4 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800c0ac:	4b04      	ldr	r3, [pc, #16]	; (800c0c0 <HAL_HSEM_FreeCallback+0x1c>)
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800c0b2:	2002      	movs	r0, #2
 800c0b4:	f7f7 f83a 	bl	800312c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800c0b8:	bf00      	nop
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	2400a38c 	.word	0x2400a38c

0800c0c4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800c0ca:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <MAILBOX_Init+0x44>)
 800c0cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0d0:	4a0d      	ldr	r2, [pc, #52]	; (800c108 <MAILBOX_Init+0x44>)
 800c0d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c0d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0da:	4b0b      	ldr	r3, [pc, #44]	; (800c108 <MAILBOX_Init+0x44>)
 800c0dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0e4:	607b      	str	r3, [r7, #4]
 800c0e6:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	207d      	movs	r0, #125	; 0x7d
 800c0ee:	f7f6 f95e 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800c0f2:	207d      	movs	r0, #125	; 0x7d
 800c0f4:	f7f6 f975 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800c0f8:	2002      	movs	r0, #2
 800c0fa:	f7f7 f817 	bl	800312c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	58024400 	.word	0x58024400

0800c10c <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800c114:	4b09      	ldr	r3, [pc, #36]	; (800c13c <MAILBOX_Poll+0x30>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d108      	bne.n	800c12e <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800c11c:	2100      	movs	r1, #0
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7fe fa15 	bl	800a54e <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800c124:	4b05      	ldr	r3, [pc, #20]	; (800c13c <MAILBOX_Poll+0x30>)
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
    return 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	e001      	b.n	800c132 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800c12e:	f06f 030a 	mvn.w	r3, #10
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	2400a38c 	.word	0x2400a38c

0800c140 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800c14a:	2000      	movs	r0, #0
 800c14c:	f7f6 ffc0 	bl	80030d0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800c150:	2100      	movs	r1, #0
 800c152:	2000      	movs	r0, #0
 800c154:	f7f6 ffd6 	bl	8003104 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c172:	d006      	beq.n	800c182 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17c:	d001      	beq.n	800c182 <is_rpmsg_ept_ready+0x20>
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <is_rpmsg_ept_ready+0x22>
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d209      	bcs.n	800c1b8 <metal_device_io_region+0x28>
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4413      	add	r3, r2
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	e000      	b.n	800c1ba <metal_device_io_region+0x2a>
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800c1c8:	b590      	push	{r4, r7, lr}
 800c1ca:	b08d      	sub	sp, #52	; 0x34
 800c1cc:	af04      	add	r7, sp, #16
 800c1ce:	6078      	str	r0, [r7, #4]
  int status = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800c1d8:	4a41      	ldr	r2, [pc, #260]	; (800c2e0 <OPENAMP_shmem_init+0x118>)
 800c1da:	f107 0310 	add.w	r3, r7, #16
 800c1de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1e2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800c1ee:	f107 0310 	add.w	r3, r7, #16
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fd fc5e 	bl	8009ab4 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800c1f8:	483a      	ldr	r0, [pc, #232]	; (800c2e4 <OPENAMP_shmem_init+0x11c>)
 800c1fa:	f7fd fb03 	bl	8009804 <metal_register_generic_device>
 800c1fe:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <OPENAMP_shmem_init+0x42>
    return status;
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	e066      	b.n	800c2d8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800c20a:	f107 0318 	add.w	r3, r7, #24
 800c20e:	461a      	mov	r2, r3
 800c210:	4935      	ldr	r1, [pc, #212]	; (800c2e8 <OPENAMP_shmem_init+0x120>)
 800c212:	4836      	ldr	r0, [pc, #216]	; (800c2ec <OPENAMP_shmem_init+0x124>)
 800c214:	f7fd fab8 	bl	8009788 <metal_device_open>
 800c218:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <OPENAMP_shmem_init+0x5c>
    return status;
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	e059      	b.n	800c2d8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800c224:	4a32      	ldr	r2, [pc, #200]	; (800c2f0 <OPENAMP_shmem_init+0x128>)
 800c226:	4b33      	ldr	r3, [pc, #204]	; (800c2f4 <OPENAMP_shmem_init+0x12c>)
 800c228:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800c230:	4a31      	ldr	r2, [pc, #196]	; (800c2f8 <OPENAMP_shmem_init+0x130>)
 800c232:	4b2f      	ldr	r3, [pc, #188]	; (800c2f0 <OPENAMP_shmem_init+0x128>)
 800c234:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800c236:	461a      	mov	r2, r3
 800c238:	2300      	movs	r3, #0
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	2300      	movs	r3, #0
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	f04f 33ff 	mov.w	r3, #4294967295
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	4613      	mov	r3, r2
 800c248:	4a2a      	ldr	r2, [pc, #168]	; (800c2f4 <OPENAMP_shmem_init+0x12c>)
 800c24a:	4929      	ldr	r1, [pc, #164]	; (800c2f0 <OPENAMP_shmem_init+0x128>)
 800c24c:	f7fd fc7f 	bl	8009b4e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	2100      	movs	r1, #0
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff ff9b 	bl	800c190 <metal_device_io_region>
 800c25a:	4603      	mov	r3, r0
 800c25c:	4a27      	ldr	r2, [pc, #156]	; (800c2fc <OPENAMP_shmem_init+0x134>)
 800c25e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800c260:	4b26      	ldr	r3, [pc, #152]	; (800c2fc <OPENAMP_shmem_init+0x134>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d102      	bne.n	800c26e <OPENAMP_shmem_init+0xa6>
    return -1;
 800c268:	f04f 33ff 	mov.w	r3, #4294967295
 800c26c:	e034      	b.n	800c2d8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800c26e:	f107 0208 	add.w	r2, r7, #8
 800c272:	f107 030c 	add.w	r3, r7, #12
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f91d 	bl	800c4b8 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	4a1f      	ldr	r2, [pc, #124]	; (800c300 <OPENAMP_shmem_init+0x138>)
 800c282:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800c284:	4b1e      	ldr	r3, [pc, #120]	; (800c300 <OPENAMP_shmem_init+0x138>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d102      	bne.n	800c292 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800c28c:	f04f 33ff 	mov.w	r3, #4294967295
 800c290:	e022      	b.n	800c2d8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c298:	4b19      	ldr	r3, [pc, #100]	; (800c300 <OPENAMP_shmem_init+0x138>)
 800c29a:	6819      	ldr	r1, [r3, #0]
 800c29c:	4b18      	ldr	r3, [pc, #96]	; (800c300 <OPENAMP_shmem_init+0x138>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	461c      	mov	r4, r3
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9302      	str	r3, [sp, #8]
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4623      	mov	r3, r4
 800c2b4:	f7fd fc4b 	bl	8009b4e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff ff67 	bl	800c190 <metal_device_io_region>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	4a0f      	ldr	r2, [pc, #60]	; (800c304 <OPENAMP_shmem_init+0x13c>)
 800c2c6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800c2c8:	4b0e      	ldr	r3, [pc, #56]	; (800c304 <OPENAMP_shmem_init+0x13c>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <OPENAMP_shmem_init+0x10e>
    return -1;
 800c2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d4:	e000      	b.n	800c2d8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3724      	adds	r7, #36	; 0x24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd90      	pop	{r4, r7, pc}
 800c2e0:	080114ac 	.word	0x080114ac
 800c2e4:	2400a048 	.word	0x2400a048
 800c2e8:	08011498 	.word	0x08011498
 800c2ec:	080114a4 	.word	0x080114a4
 800c2f0:	38000400 	.word	0x38000400
 800c2f4:	2400a420 	.word	0x2400a420
 800c2f8:	38010000 	.word	0x38010000
 800c2fc:	2400a390 	.word	0x2400a390
 800c300:	2400a398 	.word	0x2400a398
 800c304:	2400a394 	.word	0x2400a394

0800c308 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800c308:	b590      	push	{r4, r7, lr}
 800c30a:	b08b      	sub	sp, #44	; 0x2c
 800c30c:	af04      	add	r7, sp, #16
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	613b      	str	r3, [r7, #16]
  int status = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800c31e:	f7ff fed1 	bl	800c0c4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff ff50 	bl	800c1c8 <OPENAMP_shmem_init>
 800c328:	60f8      	str	r0, [r7, #12]
  if(status)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	e06a      	b.n	800c40a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	4b37      	ldr	r3, [pc, #220]	; (800c414 <MX_OPENAMP_Init+0x10c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f103 0218 	add.w	r2, r3, #24
 800c33e:	4b36      	ldr	r3, [pc, #216]	; (800c418 <MX_OPENAMP_Init+0x110>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2100      	movs	r1, #0
 800c344:	9102      	str	r1, [sp, #8]
 800c346:	4935      	ldr	r1, [pc, #212]	; (800c41c <MX_OPENAMP_Init+0x114>)
 800c348:	9101      	str	r1, [sp, #4]
 800c34a:	2100      	movs	r1, #0
 800c34c:	9100      	str	r1, [sp, #0]
 800c34e:	21ff      	movs	r1, #255	; 0xff
 800c350:	f7fe f81e 	bl	800a390 <rproc_virtio_create_vdev>
 800c354:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d102      	bne.n	800c362 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800c35c:	f04f 33ff 	mov.w	r3, #4294967295
 800c360:	e053      	b.n	800c40a <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800c362:	6938      	ldr	r0, [r7, #16]
 800c364:	f7fe f92f 	bl	800a5c6 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800c368:	4b2a      	ldr	r3, [pc, #168]	; (800c414 <MX_OPENAMP_Init+0x10c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3334      	adds	r3, #52	; 0x34
 800c36e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800c378:	461c      	mov	r4, r3
 800c37a:	4b29      	ldr	r3, [pc, #164]	; (800c420 <MX_OPENAMP_Init+0x118>)
 800c37c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	6892      	ldr	r2, [r2, #8]
 800c382:	6979      	ldr	r1, [r7, #20]
 800c384:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800c386:	9102      	str	r1, [sp, #8]
 800c388:	9201      	str	r2, [sp, #4]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4623      	mov	r3, r4
 800c38e:	4602      	mov	r2, r0
 800c390:	2100      	movs	r1, #0
 800c392:	6938      	ldr	r0, [r7, #16]
 800c394:	f7fe f8aa 	bl	800a4ec <rproc_virtio_init_vring>
 800c398:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	e032      	b.n	800c40a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800c3a4:	4b1b      	ldr	r3, [pc, #108]	; (800c414 <MX_OPENAMP_Init+0x10c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3348      	adds	r3, #72	; 0x48
 800c3aa:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800c3b4:	461c      	mov	r4, r3
 800c3b6:	4b1a      	ldr	r3, [pc, #104]	; (800c420 <MX_OPENAMP_Init+0x118>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	6892      	ldr	r2, [r2, #8]
 800c3be:	6979      	ldr	r1, [r7, #20]
 800c3c0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800c3c2:	9102      	str	r1, [sp, #8]
 800c3c4:	9201      	str	r2, [sp, #4]
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	4623      	mov	r3, r4
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	6938      	ldr	r0, [r7, #16]
 800c3d0:	f7fe f88c 	bl	800a4ec <rproc_virtio_init_vring>
 800c3d4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	e014      	b.n	800c40a <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800c3e0:	4b10      	ldr	r3, [pc, #64]	; (800c424 <MX_OPENAMP_Init+0x11c>)
 800c3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800c3e8:	4a0f      	ldr	r2, [pc, #60]	; (800c428 <MX_OPENAMP_Init+0x120>)
 800c3ea:	4b0e      	ldr	r3, [pc, #56]	; (800c424 <MX_OPENAMP_Init+0x11c>)
 800c3ec:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	480e      	ldr	r0, [pc, #56]	; (800c42c <MX_OPENAMP_Init+0x124>)
 800c3f2:	f7fe fd59 	bl	800aea8 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800c3f6:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <MX_OPENAMP_Init+0x118>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a0c      	ldr	r2, [pc, #48]	; (800c42c <MX_OPENAMP_Init+0x124>)
 800c3fc:	9200      	str	r2, [sp, #0]
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	6939      	ldr	r1, [r7, #16]
 800c402:	480b      	ldr	r0, [pc, #44]	; (800c430 <MX_OPENAMP_Init+0x128>)
 800c404:	f7fe ffc0 	bl	800b388 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd90      	pop	{r4, r7, pc}
 800c412:	bf00      	nop
 800c414:	2400a398 	.word	0x2400a398
 800c418:	2400a394 	.word	0x2400a394
 800c41c:	0800c141 	.word	0x0800c141
 800c420:	2400a390 	.word	0x2400a390
 800c424:	38000400 	.word	0x38000400
 800c428:	38010000 	.word	0x38010000
 800c42c:	2400a39c 	.word	0x2400a39c
 800c430:	2400a3a8 	.word	0x2400a3a8

0800c434 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	; 0x28
 800c438:	af04      	add	r7, sp, #16
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	9302      	str	r3, [sp, #8]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	f04f 33ff 	mov.w	r3, #4294967295
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4904      	ldr	r1, [pc, #16]	; (800c46c <OPENAMP_create_endpoint+0x38>)
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7fe fb40 	bl	800aae0 <rpmsg_create_ept>
 800c460:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800c462:	697b      	ldr	r3, [r7, #20]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	2400a3a8 	.word	0x2400a3a8

0800c470 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800c474:	4b03      	ldr	r3, [pc, #12]	; (800c484 <OPENAMP_check_for_message+0x14>)
 800c476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff fe47 	bl	800c10c <MAILBOX_Poll>
}
 800c47e:	bf00      	nop
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	2400a3a8 	.word	0x2400a3a8

0800c488 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800c490:	e004      	b.n	800c49c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800c492:	4b08      	ldr	r3, [pc, #32]	; (800c4b4 <OPENAMP_Wait_EndPointready+0x2c>)
 800c494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff fe38 	bl	800c10c <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff fe60 	bl	800c162 <is_rpmsg_ept_ready>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0f4      	beq.n	800c492 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800c4a8:	bf00      	nop
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	2400a3a8 	.word	0x2400a3a8

0800c4b8 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800c4c4:	228c      	movs	r2, #140	; 0x8c
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	481e      	ldr	r0, [pc, #120]	; (800c544 <resource_table_init+0x8c>)
 800c4ca:	f000 f935 	bl	800c738 <memset>
	resource_table.num = 1;
 800c4ce:	4b1d      	ldr	r3, [pc, #116]	; (800c544 <resource_table_init+0x8c>)
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800c4d4:	4b1b      	ldr	r3, [pc, #108]	; (800c544 <resource_table_init+0x8c>)
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800c4da:	4b1a      	ldr	r3, [pc, #104]	; (800c544 <resource_table_init+0x8c>)
 800c4dc:	2218      	movs	r2, #24
 800c4de:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800c4e0:	4b19      	ldr	r3, [pc, #100]	; (800c548 <resource_table_init+0x90>)
 800c4e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4e6:	4a17      	ldr	r2, [pc, #92]	; (800c544 <resource_table_init+0x8c>)
 800c4e8:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800c4ea:	4b16      	ldr	r3, [pc, #88]	; (800c544 <resource_table_init+0x8c>)
 800c4ec:	2204      	movs	r2, #4
 800c4ee:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800c4f0:	4b14      	ldr	r3, [pc, #80]	; (800c544 <resource_table_init+0x8c>)
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800c4f6:	4b13      	ldr	r3, [pc, #76]	; (800c544 <resource_table_init+0x8c>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800c4fc:	4a12      	ldr	r2, [pc, #72]	; (800c548 <resource_table_init+0x90>)
 800c4fe:	4b11      	ldr	r3, [pc, #68]	; (800c544 <resource_table_init+0x8c>)
 800c500:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800c502:	4b10      	ldr	r3, [pc, #64]	; (800c544 <resource_table_init+0x8c>)
 800c504:	2204      	movs	r2, #4
 800c506:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800c508:	4b0e      	ldr	r3, [pc, #56]	; (800c544 <resource_table_init+0x8c>)
 800c50a:	2204      	movs	r2, #4
 800c50c:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800c50e:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <resource_table_init+0x8c>)
 800c510:	2201      	movs	r2, #1
 800c512:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800c514:	4b0b      	ldr	r3, [pc, #44]	; (800c544 <resource_table_init+0x8c>)
 800c516:	2203      	movs	r2, #3
 800c518:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800c51a:	4b0a      	ldr	r3, [pc, #40]	; (800c544 <resource_table_init+0x8c>)
 800c51c:	2207      	movs	r2, #7
 800c51e:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800c520:	4b08      	ldr	r3, [pc, #32]	; (800c544 <resource_table_init+0x8c>)
 800c522:	2202      	movs	r2, #2
 800c524:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800c528:	4b06      	ldr	r3, [pc, #24]	; (800c544 <resource_table_init+0x8c>)
 800c52a:	2201      	movs	r2, #1
 800c52c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	228c      	movs	r2, #140	; 0x8c
 800c532:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	4a03      	ldr	r2, [pc, #12]	; (800c544 <resource_table_init+0x8c>)
 800c538:	601a      	str	r2, [r3, #0]
}
 800c53a:	bf00      	nop
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	38000000 	.word	0x38000000
 800c548:	38000400 	.word	0x38000400

0800c54c <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	f083 0301 	eor.w	r3, r3, #1
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d024      	beq.n	800c5ac <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 800c562:	4b19      	ldr	r3, [pc, #100]	; (800c5c8 <createEmptyFrame+0x7c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	2100      	movs	r1, #0
 800c56a:	4818      	ldr	r0, [pc, #96]	; (800c5cc <createEmptyFrame+0x80>)
 800c56c:	f000 f8e4 	bl	800c738 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800c570:	2300      	movs	r3, #0
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	e011      	b.n	800c59a <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	4a13      	ldr	r2, [pc, #76]	; (800c5cc <createEmptyFrame+0x80>)
 800c580:	21ff      	movs	r1, #255	; 0xff
 800c582:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	3301      	adds	r3, #1
 800c58e:	4a0f      	ldr	r2, [pc, #60]	; (800c5cc <createEmptyFrame+0x80>)
 800c590:	21ff      	movs	r1, #255	; 0xff
 800c592:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3301      	adds	r3, #1
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <createEmptyFrame+0x7c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 800c5a2:	085a      	lsrs	r2, r3, #1
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d8e5      	bhi.n	800c576 <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 800c5aa:	e009      	b.n	800c5c0 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d006      	beq.n	800c5c0 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 800c5b2:	4b05      	ldr	r3, [pc, #20]	; (800c5c8 <createEmptyFrame+0x7c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	21ff      	movs	r1, #255	; 0xff
 800c5ba:	4804      	ldr	r0, [pc, #16]	; (800c5cc <createEmptyFrame+0x80>)
 800c5bc:	f000 f8bc 	bl	800c738 <memset>
}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	2400a0c4 	.word	0x2400a0c4
 800c5cc:	24000048 	.word	0x24000048

0800c5d0 <updateNextFrame>:

void updateNextFrame(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 800c5d4:	f7f5 fdc0 	bl	8002158 <HAL_GetTick>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <updateNextFrame+0x34>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	2b1e      	cmp	r3, #30
 800c5e2:	d90d      	bls.n	800c600 <updateNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 800c5e4:	4b08      	ldr	r3, [pc, #32]	; (800c608 <updateNextFrame+0x38>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c5ee:	4907      	ldr	r1, [pc, #28]	; (800c60c <updateNextFrame+0x3c>)
 800c5f0:	4807      	ldr	r0, [pc, #28]	; (800c610 <updateNextFrame+0x40>)
 800c5f2:	f7f9 fcbb 	bl	8005f6c <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 800c5f6:	f7f5 fdaf 	bl	8002158 <HAL_GetTick>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	4a01      	ldr	r2, [pc, #4]	; (800c604 <updateNextFrame+0x34>)
 800c5fe:	6013      	str	r3, [r2, #0]
	}
}
 800c600:	bf00      	nop
 800c602:	bd80      	pop	{r7, pc}
 800c604:	2400a388 	.word	0x2400a388
 800c608:	2400a0c4 	.word	0x2400a0c4
 800c60c:	24000048 	.word	0x24000048
 800c610:	2400a594 	.word	0x2400a594

0800c614 <__assert_func>:
 800c614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c616:	4614      	mov	r4, r2
 800c618:	461a      	mov	r2, r3
 800c61a:	4b09      	ldr	r3, [pc, #36]	; (800c640 <__assert_func+0x2c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4605      	mov	r5, r0
 800c620:	68d8      	ldr	r0, [r3, #12]
 800c622:	b14c      	cbz	r4, 800c638 <__assert_func+0x24>
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <__assert_func+0x30>)
 800c626:	9100      	str	r1, [sp, #0]
 800c628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c62c:	4906      	ldr	r1, [pc, #24]	; (800c648 <__assert_func+0x34>)
 800c62e:	462b      	mov	r3, r5
 800c630:	f000 f814 	bl	800c65c <fiprintf>
 800c634:	f002 f92e 	bl	800e894 <abort>
 800c638:	4b04      	ldr	r3, [pc, #16]	; (800c64c <__assert_func+0x38>)
 800c63a:	461c      	mov	r4, r3
 800c63c:	e7f3      	b.n	800c626 <__assert_func+0x12>
 800c63e:	bf00      	nop
 800c640:	2400a0c8 	.word	0x2400a0c8
 800c644:	0801f84f 	.word	0x0801f84f
 800c648:	0801f85c 	.word	0x0801f85c
 800c64c:	0801f88a 	.word	0x0801f88a

0800c650 <__errno>:
 800c650:	4b01      	ldr	r3, [pc, #4]	; (800c658 <__errno+0x8>)
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	2400a0c8 	.word	0x2400a0c8

0800c65c <fiprintf>:
 800c65c:	b40e      	push	{r1, r2, r3}
 800c65e:	b503      	push	{r0, r1, lr}
 800c660:	4601      	mov	r1, r0
 800c662:	ab03      	add	r3, sp, #12
 800c664:	4805      	ldr	r0, [pc, #20]	; (800c67c <fiprintf+0x20>)
 800c666:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66a:	6800      	ldr	r0, [r0, #0]
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	f000 f93f 	bl	800c8f0 <_vfiprintf_r>
 800c672:	b002      	add	sp, #8
 800c674:	f85d eb04 	ldr.w	lr, [sp], #4
 800c678:	b003      	add	sp, #12
 800c67a:	4770      	bx	lr
 800c67c:	2400a0c8 	.word	0x2400a0c8

0800c680 <__libc_init_array>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	4d0d      	ldr	r5, [pc, #52]	; (800c6b8 <__libc_init_array+0x38>)
 800c684:	4c0d      	ldr	r4, [pc, #52]	; (800c6bc <__libc_init_array+0x3c>)
 800c686:	1b64      	subs	r4, r4, r5
 800c688:	10a4      	asrs	r4, r4, #2
 800c68a:	2600      	movs	r6, #0
 800c68c:	42a6      	cmp	r6, r4
 800c68e:	d109      	bne.n	800c6a4 <__libc_init_array+0x24>
 800c690:	4d0b      	ldr	r5, [pc, #44]	; (800c6c0 <__libc_init_array+0x40>)
 800c692:	4c0c      	ldr	r4, [pc, #48]	; (800c6c4 <__libc_init_array+0x44>)
 800c694:	f004 fc62 	bl	8010f5c <_init>
 800c698:	1b64      	subs	r4, r4, r5
 800c69a:	10a4      	asrs	r4, r4, #2
 800c69c:	2600      	movs	r6, #0
 800c69e:	42a6      	cmp	r6, r4
 800c6a0:	d105      	bne.n	800c6ae <__libc_init_array+0x2e>
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6a8:	4798      	blx	r3
 800c6aa:	3601      	adds	r6, #1
 800c6ac:	e7ee      	b.n	800c68c <__libc_init_array+0xc>
 800c6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b2:	4798      	blx	r3
 800c6b4:	3601      	adds	r6, #1
 800c6b6:	e7f2      	b.n	800c69e <__libc_init_array+0x1e>
 800c6b8:	0801fd0c 	.word	0x0801fd0c
 800c6bc:	0801fd0c 	.word	0x0801fd0c
 800c6c0:	0801fd0c 	.word	0x0801fd0c
 800c6c4:	0801fd10 	.word	0x0801fd10

0800c6c8 <malloc>:
 800c6c8:	4b02      	ldr	r3, [pc, #8]	; (800c6d4 <malloc+0xc>)
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	f000 b88b 	b.w	800c7e8 <_malloc_r>
 800c6d2:	bf00      	nop
 800c6d4:	2400a0c8 	.word	0x2400a0c8

0800c6d8 <free>:
 800c6d8:	4b02      	ldr	r3, [pc, #8]	; (800c6e4 <free+0xc>)
 800c6da:	4601      	mov	r1, r0
 800c6dc:	6818      	ldr	r0, [r3, #0]
 800c6de:	f000 b833 	b.w	800c748 <_free_r>
 800c6e2:	bf00      	nop
 800c6e4:	2400a0c8 	.word	0x2400a0c8

0800c6e8 <memcpy>:
 800c6e8:	440a      	add	r2, r1
 800c6ea:	4291      	cmp	r1, r2
 800c6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6f0:	d100      	bne.n	800c6f4 <memcpy+0xc>
 800c6f2:	4770      	bx	lr
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6fe:	4291      	cmp	r1, r2
 800c700:	d1f9      	bne.n	800c6f6 <memcpy+0xe>
 800c702:	bd10      	pop	{r4, pc}

0800c704 <memmove>:
 800c704:	4288      	cmp	r0, r1
 800c706:	b510      	push	{r4, lr}
 800c708:	eb01 0402 	add.w	r4, r1, r2
 800c70c:	d902      	bls.n	800c714 <memmove+0x10>
 800c70e:	4284      	cmp	r4, r0
 800c710:	4623      	mov	r3, r4
 800c712:	d807      	bhi.n	800c724 <memmove+0x20>
 800c714:	1e43      	subs	r3, r0, #1
 800c716:	42a1      	cmp	r1, r4
 800c718:	d008      	beq.n	800c72c <memmove+0x28>
 800c71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c722:	e7f8      	b.n	800c716 <memmove+0x12>
 800c724:	4402      	add	r2, r0
 800c726:	4601      	mov	r1, r0
 800c728:	428a      	cmp	r2, r1
 800c72a:	d100      	bne.n	800c72e <memmove+0x2a>
 800c72c:	bd10      	pop	{r4, pc}
 800c72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c736:	e7f7      	b.n	800c728 <memmove+0x24>

0800c738 <memset>:
 800c738:	4402      	add	r2, r0
 800c73a:	4603      	mov	r3, r0
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d100      	bne.n	800c742 <memset+0xa>
 800c740:	4770      	bx	lr
 800c742:	f803 1b01 	strb.w	r1, [r3], #1
 800c746:	e7f9      	b.n	800c73c <memset+0x4>

0800c748 <_free_r>:
 800c748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c74a:	2900      	cmp	r1, #0
 800c74c:	d048      	beq.n	800c7e0 <_free_r+0x98>
 800c74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c752:	9001      	str	r0, [sp, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	f1a1 0404 	sub.w	r4, r1, #4
 800c75a:	bfb8      	it	lt
 800c75c:	18e4      	addlt	r4, r4, r3
 800c75e:	f003 fc51 	bl	8010004 <__malloc_lock>
 800c762:	4a20      	ldr	r2, [pc, #128]	; (800c7e4 <_free_r+0x9c>)
 800c764:	9801      	ldr	r0, [sp, #4]
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	4615      	mov	r5, r2
 800c76a:	b933      	cbnz	r3, 800c77a <_free_r+0x32>
 800c76c:	6063      	str	r3, [r4, #4]
 800c76e:	6014      	str	r4, [r2, #0]
 800c770:	b003      	add	sp, #12
 800c772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c776:	f003 bc4b 	b.w	8010010 <__malloc_unlock>
 800c77a:	42a3      	cmp	r3, r4
 800c77c:	d90b      	bls.n	800c796 <_free_r+0x4e>
 800c77e:	6821      	ldr	r1, [r4, #0]
 800c780:	1862      	adds	r2, r4, r1
 800c782:	4293      	cmp	r3, r2
 800c784:	bf04      	itt	eq
 800c786:	681a      	ldreq	r2, [r3, #0]
 800c788:	685b      	ldreq	r3, [r3, #4]
 800c78a:	6063      	str	r3, [r4, #4]
 800c78c:	bf04      	itt	eq
 800c78e:	1852      	addeq	r2, r2, r1
 800c790:	6022      	streq	r2, [r4, #0]
 800c792:	602c      	str	r4, [r5, #0]
 800c794:	e7ec      	b.n	800c770 <_free_r+0x28>
 800c796:	461a      	mov	r2, r3
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	b10b      	cbz	r3, 800c7a0 <_free_r+0x58>
 800c79c:	42a3      	cmp	r3, r4
 800c79e:	d9fa      	bls.n	800c796 <_free_r+0x4e>
 800c7a0:	6811      	ldr	r1, [r2, #0]
 800c7a2:	1855      	adds	r5, r2, r1
 800c7a4:	42a5      	cmp	r5, r4
 800c7a6:	d10b      	bne.n	800c7c0 <_free_r+0x78>
 800c7a8:	6824      	ldr	r4, [r4, #0]
 800c7aa:	4421      	add	r1, r4
 800c7ac:	1854      	adds	r4, r2, r1
 800c7ae:	42a3      	cmp	r3, r4
 800c7b0:	6011      	str	r1, [r2, #0]
 800c7b2:	d1dd      	bne.n	800c770 <_free_r+0x28>
 800c7b4:	681c      	ldr	r4, [r3, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	6053      	str	r3, [r2, #4]
 800c7ba:	4421      	add	r1, r4
 800c7bc:	6011      	str	r1, [r2, #0]
 800c7be:	e7d7      	b.n	800c770 <_free_r+0x28>
 800c7c0:	d902      	bls.n	800c7c8 <_free_r+0x80>
 800c7c2:	230c      	movs	r3, #12
 800c7c4:	6003      	str	r3, [r0, #0]
 800c7c6:	e7d3      	b.n	800c770 <_free_r+0x28>
 800c7c8:	6825      	ldr	r5, [r4, #0]
 800c7ca:	1961      	adds	r1, r4, r5
 800c7cc:	428b      	cmp	r3, r1
 800c7ce:	bf04      	itt	eq
 800c7d0:	6819      	ldreq	r1, [r3, #0]
 800c7d2:	685b      	ldreq	r3, [r3, #4]
 800c7d4:	6063      	str	r3, [r4, #4]
 800c7d6:	bf04      	itt	eq
 800c7d8:	1949      	addeq	r1, r1, r5
 800c7da:	6021      	streq	r1, [r4, #0]
 800c7dc:	6054      	str	r4, [r2, #4]
 800c7de:	e7c7      	b.n	800c770 <_free_r+0x28>
 800c7e0:	b003      	add	sp, #12
 800c7e2:	bd30      	pop	{r4, r5, pc}
 800c7e4:	2400a424 	.word	0x2400a424

0800c7e8 <_malloc_r>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	1ccd      	adds	r5, r1, #3
 800c7ec:	f025 0503 	bic.w	r5, r5, #3
 800c7f0:	3508      	adds	r5, #8
 800c7f2:	2d0c      	cmp	r5, #12
 800c7f4:	bf38      	it	cc
 800c7f6:	250c      	movcc	r5, #12
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	db01      	blt.n	800c802 <_malloc_r+0x1a>
 800c7fe:	42a9      	cmp	r1, r5
 800c800:	d903      	bls.n	800c80a <_malloc_r+0x22>
 800c802:	230c      	movs	r3, #12
 800c804:	6033      	str	r3, [r6, #0]
 800c806:	2000      	movs	r0, #0
 800c808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c80a:	f003 fbfb 	bl	8010004 <__malloc_lock>
 800c80e:	4921      	ldr	r1, [pc, #132]	; (800c894 <_malloc_r+0xac>)
 800c810:	680a      	ldr	r2, [r1, #0]
 800c812:	4614      	mov	r4, r2
 800c814:	b99c      	cbnz	r4, 800c83e <_malloc_r+0x56>
 800c816:	4f20      	ldr	r7, [pc, #128]	; (800c898 <_malloc_r+0xb0>)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	b923      	cbnz	r3, 800c826 <_malloc_r+0x3e>
 800c81c:	4621      	mov	r1, r4
 800c81e:	4630      	mov	r0, r6
 800c820:	f001 f86a 	bl	800d8f8 <_sbrk_r>
 800c824:	6038      	str	r0, [r7, #0]
 800c826:	4629      	mov	r1, r5
 800c828:	4630      	mov	r0, r6
 800c82a:	f001 f865 	bl	800d8f8 <_sbrk_r>
 800c82e:	1c43      	adds	r3, r0, #1
 800c830:	d123      	bne.n	800c87a <_malloc_r+0x92>
 800c832:	230c      	movs	r3, #12
 800c834:	6033      	str	r3, [r6, #0]
 800c836:	4630      	mov	r0, r6
 800c838:	f003 fbea 	bl	8010010 <__malloc_unlock>
 800c83c:	e7e3      	b.n	800c806 <_malloc_r+0x1e>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	1b5b      	subs	r3, r3, r5
 800c842:	d417      	bmi.n	800c874 <_malloc_r+0x8c>
 800c844:	2b0b      	cmp	r3, #11
 800c846:	d903      	bls.n	800c850 <_malloc_r+0x68>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	441c      	add	r4, r3
 800c84c:	6025      	str	r5, [r4, #0]
 800c84e:	e004      	b.n	800c85a <_malloc_r+0x72>
 800c850:	6863      	ldr	r3, [r4, #4]
 800c852:	42a2      	cmp	r2, r4
 800c854:	bf0c      	ite	eq
 800c856:	600b      	streq	r3, [r1, #0]
 800c858:	6053      	strne	r3, [r2, #4]
 800c85a:	4630      	mov	r0, r6
 800c85c:	f003 fbd8 	bl	8010010 <__malloc_unlock>
 800c860:	f104 000b 	add.w	r0, r4, #11
 800c864:	1d23      	adds	r3, r4, #4
 800c866:	f020 0007 	bic.w	r0, r0, #7
 800c86a:	1ac2      	subs	r2, r0, r3
 800c86c:	d0cc      	beq.n	800c808 <_malloc_r+0x20>
 800c86e:	1a1b      	subs	r3, r3, r0
 800c870:	50a3      	str	r3, [r4, r2]
 800c872:	e7c9      	b.n	800c808 <_malloc_r+0x20>
 800c874:	4622      	mov	r2, r4
 800c876:	6864      	ldr	r4, [r4, #4]
 800c878:	e7cc      	b.n	800c814 <_malloc_r+0x2c>
 800c87a:	1cc4      	adds	r4, r0, #3
 800c87c:	f024 0403 	bic.w	r4, r4, #3
 800c880:	42a0      	cmp	r0, r4
 800c882:	d0e3      	beq.n	800c84c <_malloc_r+0x64>
 800c884:	1a21      	subs	r1, r4, r0
 800c886:	4630      	mov	r0, r6
 800c888:	f001 f836 	bl	800d8f8 <_sbrk_r>
 800c88c:	3001      	adds	r0, #1
 800c88e:	d1dd      	bne.n	800c84c <_malloc_r+0x64>
 800c890:	e7cf      	b.n	800c832 <_malloc_r+0x4a>
 800c892:	bf00      	nop
 800c894:	2400a424 	.word	0x2400a424
 800c898:	2400a428 	.word	0x2400a428

0800c89c <__sfputc_r>:
 800c89c:	6893      	ldr	r3, [r2, #8]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	b410      	push	{r4}
 800c8a4:	6093      	str	r3, [r2, #8]
 800c8a6:	da08      	bge.n	800c8ba <__sfputc_r+0x1e>
 800c8a8:	6994      	ldr	r4, [r2, #24]
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	db01      	blt.n	800c8b2 <__sfputc_r+0x16>
 800c8ae:	290a      	cmp	r1, #10
 800c8b0:	d103      	bne.n	800c8ba <__sfputc_r+0x1e>
 800c8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8b6:	f001 bf2d 	b.w	800e714 <__swbuf_r>
 800c8ba:	6813      	ldr	r3, [r2, #0]
 800c8bc:	1c58      	adds	r0, r3, #1
 800c8be:	6010      	str	r0, [r2, #0]
 800c8c0:	7019      	strb	r1, [r3, #0]
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <__sfputs_r>:
 800c8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	4614      	mov	r4, r2
 800c8d2:	18d5      	adds	r5, r2, r3
 800c8d4:	42ac      	cmp	r4, r5
 800c8d6:	d101      	bne.n	800c8dc <__sfputs_r+0x12>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e007      	b.n	800c8ec <__sfputs_r+0x22>
 800c8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e0:	463a      	mov	r2, r7
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7ff ffda 	bl	800c89c <__sfputc_r>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d1f3      	bne.n	800c8d4 <__sfputs_r+0xa>
 800c8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8f0 <_vfiprintf_r>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	b09d      	sub	sp, #116	; 0x74
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	4698      	mov	r8, r3
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	b118      	cbz	r0, 800c908 <_vfiprintf_r+0x18>
 800c900:	6983      	ldr	r3, [r0, #24]
 800c902:	b90b      	cbnz	r3, 800c908 <_vfiprintf_r+0x18>
 800c904:	f002 fef4 	bl	800f6f0 <__sinit>
 800c908:	4b89      	ldr	r3, [pc, #548]	; (800cb30 <_vfiprintf_r+0x240>)
 800c90a:	429d      	cmp	r5, r3
 800c90c:	d11b      	bne.n	800c946 <_vfiprintf_r+0x56>
 800c90e:	6875      	ldr	r5, [r6, #4]
 800c910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c912:	07d9      	lsls	r1, r3, #31
 800c914:	d405      	bmi.n	800c922 <_vfiprintf_r+0x32>
 800c916:	89ab      	ldrh	r3, [r5, #12]
 800c918:	059a      	lsls	r2, r3, #22
 800c91a:	d402      	bmi.n	800c922 <_vfiprintf_r+0x32>
 800c91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c91e:	f003 faf8 	bl	800ff12 <__retarget_lock_acquire_recursive>
 800c922:	89ab      	ldrh	r3, [r5, #12]
 800c924:	071b      	lsls	r3, r3, #28
 800c926:	d501      	bpl.n	800c92c <_vfiprintf_r+0x3c>
 800c928:	692b      	ldr	r3, [r5, #16]
 800c92a:	b9eb      	cbnz	r3, 800c968 <_vfiprintf_r+0x78>
 800c92c:	4629      	mov	r1, r5
 800c92e:	4630      	mov	r0, r6
 800c930:	f001 ff42 	bl	800e7b8 <__swsetup_r>
 800c934:	b1c0      	cbz	r0, 800c968 <_vfiprintf_r+0x78>
 800c936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c938:	07dc      	lsls	r4, r3, #31
 800c93a:	d50e      	bpl.n	800c95a <_vfiprintf_r+0x6a>
 800c93c:	f04f 30ff 	mov.w	r0, #4294967295
 800c940:	b01d      	add	sp, #116	; 0x74
 800c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c946:	4b7b      	ldr	r3, [pc, #492]	; (800cb34 <_vfiprintf_r+0x244>)
 800c948:	429d      	cmp	r5, r3
 800c94a:	d101      	bne.n	800c950 <_vfiprintf_r+0x60>
 800c94c:	68b5      	ldr	r5, [r6, #8]
 800c94e:	e7df      	b.n	800c910 <_vfiprintf_r+0x20>
 800c950:	4b79      	ldr	r3, [pc, #484]	; (800cb38 <_vfiprintf_r+0x248>)
 800c952:	429d      	cmp	r5, r3
 800c954:	bf08      	it	eq
 800c956:	68f5      	ldreq	r5, [r6, #12]
 800c958:	e7da      	b.n	800c910 <_vfiprintf_r+0x20>
 800c95a:	89ab      	ldrh	r3, [r5, #12]
 800c95c:	0598      	lsls	r0, r3, #22
 800c95e:	d4ed      	bmi.n	800c93c <_vfiprintf_r+0x4c>
 800c960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c962:	f003 fad7 	bl	800ff14 <__retarget_lock_release_recursive>
 800c966:	e7e9      	b.n	800c93c <_vfiprintf_r+0x4c>
 800c968:	2300      	movs	r3, #0
 800c96a:	9309      	str	r3, [sp, #36]	; 0x24
 800c96c:	2320      	movs	r3, #32
 800c96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c972:	f8cd 800c 	str.w	r8, [sp, #12]
 800c976:	2330      	movs	r3, #48	; 0x30
 800c978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb3c <_vfiprintf_r+0x24c>
 800c97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c980:	f04f 0901 	mov.w	r9, #1
 800c984:	4623      	mov	r3, r4
 800c986:	469a      	mov	sl, r3
 800c988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c98c:	b10a      	cbz	r2, 800c992 <_vfiprintf_r+0xa2>
 800c98e:	2a25      	cmp	r2, #37	; 0x25
 800c990:	d1f9      	bne.n	800c986 <_vfiprintf_r+0x96>
 800c992:	ebba 0b04 	subs.w	fp, sl, r4
 800c996:	d00b      	beq.n	800c9b0 <_vfiprintf_r+0xc0>
 800c998:	465b      	mov	r3, fp
 800c99a:	4622      	mov	r2, r4
 800c99c:	4629      	mov	r1, r5
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7ff ff93 	bl	800c8ca <__sfputs_r>
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	f000 80aa 	beq.w	800cafe <_vfiprintf_r+0x20e>
 800c9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ac:	445a      	add	r2, fp
 800c9ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 80a2 	beq.w	800cafe <_vfiprintf_r+0x20e>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9c4:	f10a 0a01 	add.w	sl, sl, #1
 800c9c8:	9304      	str	r3, [sp, #16]
 800c9ca:	9307      	str	r3, [sp, #28]
 800c9cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c9d2:	4654      	mov	r4, sl
 800c9d4:	2205      	movs	r2, #5
 800c9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9da:	4858      	ldr	r0, [pc, #352]	; (800cb3c <_vfiprintf_r+0x24c>)
 800c9dc:	f7f3 fc98 	bl	8000310 <memchr>
 800c9e0:	9a04      	ldr	r2, [sp, #16]
 800c9e2:	b9d8      	cbnz	r0, 800ca1c <_vfiprintf_r+0x12c>
 800c9e4:	06d1      	lsls	r1, r2, #27
 800c9e6:	bf44      	itt	mi
 800c9e8:	2320      	movmi	r3, #32
 800c9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9ee:	0713      	lsls	r3, r2, #28
 800c9f0:	bf44      	itt	mi
 800c9f2:	232b      	movmi	r3, #43	; 0x2b
 800c9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9fe:	d015      	beq.n	800ca2c <_vfiprintf_r+0x13c>
 800ca00:	9a07      	ldr	r2, [sp, #28]
 800ca02:	4654      	mov	r4, sl
 800ca04:	2000      	movs	r0, #0
 800ca06:	f04f 0c0a 	mov.w	ip, #10
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca10:	3b30      	subs	r3, #48	; 0x30
 800ca12:	2b09      	cmp	r3, #9
 800ca14:	d94e      	bls.n	800cab4 <_vfiprintf_r+0x1c4>
 800ca16:	b1b0      	cbz	r0, 800ca46 <_vfiprintf_r+0x156>
 800ca18:	9207      	str	r2, [sp, #28]
 800ca1a:	e014      	b.n	800ca46 <_vfiprintf_r+0x156>
 800ca1c:	eba0 0308 	sub.w	r3, r0, r8
 800ca20:	fa09 f303 	lsl.w	r3, r9, r3
 800ca24:	4313      	orrs	r3, r2
 800ca26:	9304      	str	r3, [sp, #16]
 800ca28:	46a2      	mov	sl, r4
 800ca2a:	e7d2      	b.n	800c9d2 <_vfiprintf_r+0xe2>
 800ca2c:	9b03      	ldr	r3, [sp, #12]
 800ca2e:	1d19      	adds	r1, r3, #4
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	9103      	str	r1, [sp, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	bfbb      	ittet	lt
 800ca38:	425b      	neglt	r3, r3
 800ca3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca3e:	9307      	strge	r3, [sp, #28]
 800ca40:	9307      	strlt	r3, [sp, #28]
 800ca42:	bfb8      	it	lt
 800ca44:	9204      	strlt	r2, [sp, #16]
 800ca46:	7823      	ldrb	r3, [r4, #0]
 800ca48:	2b2e      	cmp	r3, #46	; 0x2e
 800ca4a:	d10c      	bne.n	800ca66 <_vfiprintf_r+0x176>
 800ca4c:	7863      	ldrb	r3, [r4, #1]
 800ca4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca50:	d135      	bne.n	800cabe <_vfiprintf_r+0x1ce>
 800ca52:	9b03      	ldr	r3, [sp, #12]
 800ca54:	1d1a      	adds	r2, r3, #4
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	9203      	str	r2, [sp, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	bfb8      	it	lt
 800ca5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca62:	3402      	adds	r4, #2
 800ca64:	9305      	str	r3, [sp, #20]
 800ca66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb4c <_vfiprintf_r+0x25c>
 800ca6a:	7821      	ldrb	r1, [r4, #0]
 800ca6c:	2203      	movs	r2, #3
 800ca6e:	4650      	mov	r0, sl
 800ca70:	f7f3 fc4e 	bl	8000310 <memchr>
 800ca74:	b140      	cbz	r0, 800ca88 <_vfiprintf_r+0x198>
 800ca76:	2340      	movs	r3, #64	; 0x40
 800ca78:	eba0 000a 	sub.w	r0, r0, sl
 800ca7c:	fa03 f000 	lsl.w	r0, r3, r0
 800ca80:	9b04      	ldr	r3, [sp, #16]
 800ca82:	4303      	orrs	r3, r0
 800ca84:	3401      	adds	r4, #1
 800ca86:	9304      	str	r3, [sp, #16]
 800ca88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8c:	482c      	ldr	r0, [pc, #176]	; (800cb40 <_vfiprintf_r+0x250>)
 800ca8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca92:	2206      	movs	r2, #6
 800ca94:	f7f3 fc3c 	bl	8000310 <memchr>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d03f      	beq.n	800cb1c <_vfiprintf_r+0x22c>
 800ca9c:	4b29      	ldr	r3, [pc, #164]	; (800cb44 <_vfiprintf_r+0x254>)
 800ca9e:	bb1b      	cbnz	r3, 800cae8 <_vfiprintf_r+0x1f8>
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	3307      	adds	r3, #7
 800caa4:	f023 0307 	bic.w	r3, r3, #7
 800caa8:	3308      	adds	r3, #8
 800caaa:	9303      	str	r3, [sp, #12]
 800caac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caae:	443b      	add	r3, r7
 800cab0:	9309      	str	r3, [sp, #36]	; 0x24
 800cab2:	e767      	b.n	800c984 <_vfiprintf_r+0x94>
 800cab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab8:	460c      	mov	r4, r1
 800caba:	2001      	movs	r0, #1
 800cabc:	e7a5      	b.n	800ca0a <_vfiprintf_r+0x11a>
 800cabe:	2300      	movs	r3, #0
 800cac0:	3401      	adds	r4, #1
 800cac2:	9305      	str	r3, [sp, #20]
 800cac4:	4619      	mov	r1, r3
 800cac6:	f04f 0c0a 	mov.w	ip, #10
 800caca:	4620      	mov	r0, r4
 800cacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad0:	3a30      	subs	r2, #48	; 0x30
 800cad2:	2a09      	cmp	r2, #9
 800cad4:	d903      	bls.n	800cade <_vfiprintf_r+0x1ee>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0c5      	beq.n	800ca66 <_vfiprintf_r+0x176>
 800cada:	9105      	str	r1, [sp, #20]
 800cadc:	e7c3      	b.n	800ca66 <_vfiprintf_r+0x176>
 800cade:	fb0c 2101 	mla	r1, ip, r1, r2
 800cae2:	4604      	mov	r4, r0
 800cae4:	2301      	movs	r3, #1
 800cae6:	e7f0      	b.n	800caca <_vfiprintf_r+0x1da>
 800cae8:	ab03      	add	r3, sp, #12
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	462a      	mov	r2, r5
 800caee:	4b16      	ldr	r3, [pc, #88]	; (800cb48 <_vfiprintf_r+0x258>)
 800caf0:	a904      	add	r1, sp, #16
 800caf2:	4630      	mov	r0, r6
 800caf4:	f000 f8bc 	bl	800cc70 <_printf_float>
 800caf8:	4607      	mov	r7, r0
 800cafa:	1c78      	adds	r0, r7, #1
 800cafc:	d1d6      	bne.n	800caac <_vfiprintf_r+0x1bc>
 800cafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb00:	07d9      	lsls	r1, r3, #31
 800cb02:	d405      	bmi.n	800cb10 <_vfiprintf_r+0x220>
 800cb04:	89ab      	ldrh	r3, [r5, #12]
 800cb06:	059a      	lsls	r2, r3, #22
 800cb08:	d402      	bmi.n	800cb10 <_vfiprintf_r+0x220>
 800cb0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb0c:	f003 fa02 	bl	800ff14 <__retarget_lock_release_recursive>
 800cb10:	89ab      	ldrh	r3, [r5, #12]
 800cb12:	065b      	lsls	r3, r3, #25
 800cb14:	f53f af12 	bmi.w	800c93c <_vfiprintf_r+0x4c>
 800cb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb1a:	e711      	b.n	800c940 <_vfiprintf_r+0x50>
 800cb1c:	ab03      	add	r3, sp, #12
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	462a      	mov	r2, r5
 800cb22:	4b09      	ldr	r3, [pc, #36]	; (800cb48 <_vfiprintf_r+0x258>)
 800cb24:	a904      	add	r1, sp, #16
 800cb26:	4630      	mov	r0, r6
 800cb28:	f000 fb2e 	bl	800d188 <_printf_i>
 800cb2c:	e7e4      	b.n	800caf8 <_vfiprintf_r+0x208>
 800cb2e:	bf00      	nop
 800cb30:	0801fae8 	.word	0x0801fae8
 800cb34:	0801fb08 	.word	0x0801fb08
 800cb38:	0801fac8 	.word	0x0801fac8
 800cb3c:	0801f890 	.word	0x0801f890
 800cb40:	0801f89a 	.word	0x0801f89a
 800cb44:	0800cc71 	.word	0x0800cc71
 800cb48:	0800c8cb 	.word	0x0800c8cb
 800cb4c:	0801f896 	.word	0x0801f896

0800cb50 <__cvt>:
 800cb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb52:	ed2d 8b02 	vpush	{d8}
 800cb56:	eeb0 8b40 	vmov.f64	d8, d0
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	4617      	mov	r7, r2
 800cb5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cb60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb62:	ee18 2a90 	vmov	r2, s17
 800cb66:	f025 0520 	bic.w	r5, r5, #32
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	bfb6      	itet	lt
 800cb6e:	222d      	movlt	r2, #45	; 0x2d
 800cb70:	2200      	movge	r2, #0
 800cb72:	eeb1 8b40 	vneglt.f64	d8, d0
 800cb76:	2d46      	cmp	r5, #70	; 0x46
 800cb78:	460c      	mov	r4, r1
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	d004      	beq.n	800cb88 <__cvt+0x38>
 800cb7e:	2d45      	cmp	r5, #69	; 0x45
 800cb80:	d100      	bne.n	800cb84 <__cvt+0x34>
 800cb82:	3401      	adds	r4, #1
 800cb84:	2102      	movs	r1, #2
 800cb86:	e000      	b.n	800cb8a <__cvt+0x3a>
 800cb88:	2103      	movs	r1, #3
 800cb8a:	ab03      	add	r3, sp, #12
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	ab02      	add	r3, sp, #8
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	4622      	mov	r2, r4
 800cb94:	4633      	mov	r3, r6
 800cb96:	eeb0 0b48 	vmov.f64	d0, d8
 800cb9a:	f001 ff0d 	bl	800e9b8 <_dtoa_r>
 800cb9e:	2d47      	cmp	r5, #71	; 0x47
 800cba0:	d109      	bne.n	800cbb6 <__cvt+0x66>
 800cba2:	07fb      	lsls	r3, r7, #31
 800cba4:	d407      	bmi.n	800cbb6 <__cvt+0x66>
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbaa:	1a1b      	subs	r3, r3, r0
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	b005      	add	sp, #20
 800cbb0:	ecbd 8b02 	vpop	{d8}
 800cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb6:	2d46      	cmp	r5, #70	; 0x46
 800cbb8:	eb00 0204 	add.w	r2, r0, r4
 800cbbc:	d10c      	bne.n	800cbd8 <__cvt+0x88>
 800cbbe:	7803      	ldrb	r3, [r0, #0]
 800cbc0:	2b30      	cmp	r3, #48	; 0x30
 800cbc2:	d107      	bne.n	800cbd4 <__cvt+0x84>
 800cbc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	bf1c      	itt	ne
 800cbce:	f1c4 0401 	rsbne	r4, r4, #1
 800cbd2:	6034      	strne	r4, [r6, #0]
 800cbd4:	6833      	ldr	r3, [r6, #0]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe0:	bf08      	it	eq
 800cbe2:	9203      	streq	r2, [sp, #12]
 800cbe4:	2130      	movs	r1, #48	; 0x30
 800cbe6:	9b03      	ldr	r3, [sp, #12]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d2dc      	bcs.n	800cba6 <__cvt+0x56>
 800cbec:	1c5c      	adds	r4, r3, #1
 800cbee:	9403      	str	r4, [sp, #12]
 800cbf0:	7019      	strb	r1, [r3, #0]
 800cbf2:	e7f8      	b.n	800cbe6 <__cvt+0x96>

0800cbf4 <__exponent>:
 800cbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2900      	cmp	r1, #0
 800cbfa:	bfb8      	it	lt
 800cbfc:	4249      	neglt	r1, r1
 800cbfe:	f803 2b02 	strb.w	r2, [r3], #2
 800cc02:	bfb4      	ite	lt
 800cc04:	222d      	movlt	r2, #45	; 0x2d
 800cc06:	222b      	movge	r2, #43	; 0x2b
 800cc08:	2909      	cmp	r1, #9
 800cc0a:	7042      	strb	r2, [r0, #1]
 800cc0c:	dd2a      	ble.n	800cc64 <__exponent+0x70>
 800cc0e:	f10d 0407 	add.w	r4, sp, #7
 800cc12:	46a4      	mov	ip, r4
 800cc14:	270a      	movs	r7, #10
 800cc16:	46a6      	mov	lr, r4
 800cc18:	460a      	mov	r2, r1
 800cc1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc1e:	fb07 1516 	mls	r5, r7, r6, r1
 800cc22:	3530      	adds	r5, #48	; 0x30
 800cc24:	2a63      	cmp	r2, #99	; 0x63
 800cc26:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc2e:	4631      	mov	r1, r6
 800cc30:	dcf1      	bgt.n	800cc16 <__exponent+0x22>
 800cc32:	3130      	adds	r1, #48	; 0x30
 800cc34:	f1ae 0502 	sub.w	r5, lr, #2
 800cc38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc3c:	1c44      	adds	r4, r0, #1
 800cc3e:	4629      	mov	r1, r5
 800cc40:	4561      	cmp	r1, ip
 800cc42:	d30a      	bcc.n	800cc5a <__exponent+0x66>
 800cc44:	f10d 0209 	add.w	r2, sp, #9
 800cc48:	eba2 020e 	sub.w	r2, r2, lr
 800cc4c:	4565      	cmp	r5, ip
 800cc4e:	bf88      	it	hi
 800cc50:	2200      	movhi	r2, #0
 800cc52:	4413      	add	r3, r2
 800cc54:	1a18      	subs	r0, r3, r0
 800cc56:	b003      	add	sp, #12
 800cc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc62:	e7ed      	b.n	800cc40 <__exponent+0x4c>
 800cc64:	2330      	movs	r3, #48	; 0x30
 800cc66:	3130      	adds	r1, #48	; 0x30
 800cc68:	7083      	strb	r3, [r0, #2]
 800cc6a:	70c1      	strb	r1, [r0, #3]
 800cc6c:	1d03      	adds	r3, r0, #4
 800cc6e:	e7f1      	b.n	800cc54 <__exponent+0x60>

0800cc70 <_printf_float>:
 800cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	b08b      	sub	sp, #44	; 0x2c
 800cc76:	460c      	mov	r4, r1
 800cc78:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	461f      	mov	r7, r3
 800cc80:	4605      	mov	r5, r0
 800cc82:	f003 f941 	bl	800ff08 <_localeconv_r>
 800cc86:	f8d0 b000 	ldr.w	fp, [r0]
 800cc8a:	4658      	mov	r0, fp
 800cc8c:	f7f3 fb32 	bl	80002f4 <strlen>
 800cc90:	2300      	movs	r3, #0
 800cc92:	9308      	str	r3, [sp, #32]
 800cc94:	f8d8 3000 	ldr.w	r3, [r8]
 800cc98:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc9c:	6822      	ldr	r2, [r4, #0]
 800cc9e:	3307      	adds	r3, #7
 800cca0:	f023 0307 	bic.w	r3, r3, #7
 800cca4:	f103 0108 	add.w	r1, r3, #8
 800cca8:	f8c8 1000 	str.w	r1, [r8]
 800ccac:	4682      	mov	sl, r0
 800ccae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccb2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ccb6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cf18 <_printf_float+0x2a8>
 800ccba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ccbe:	eeb0 6bc0 	vabs.f64	d6, d0
 800ccc2:	eeb4 6b47 	vcmp.f64	d6, d7
 800ccc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccca:	dd24      	ble.n	800cd16 <_printf_float+0xa6>
 800cccc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ccd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd4:	d502      	bpl.n	800ccdc <_printf_float+0x6c>
 800ccd6:	232d      	movs	r3, #45	; 0x2d
 800ccd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccdc:	4b90      	ldr	r3, [pc, #576]	; (800cf20 <_printf_float+0x2b0>)
 800ccde:	4891      	ldr	r0, [pc, #580]	; (800cf24 <_printf_float+0x2b4>)
 800cce0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cce4:	bf94      	ite	ls
 800cce6:	4698      	movls	r8, r3
 800cce8:	4680      	movhi	r8, r0
 800ccea:	2303      	movs	r3, #3
 800ccec:	6123      	str	r3, [r4, #16]
 800ccee:	f022 0204 	bic.w	r2, r2, #4
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	6022      	str	r2, [r4, #0]
 800ccf6:	9304      	str	r3, [sp, #16]
 800ccf8:	9700      	str	r7, [sp, #0]
 800ccfa:	4633      	mov	r3, r6
 800ccfc:	aa09      	add	r2, sp, #36	; 0x24
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 f9d3 	bl	800d0ac <_printf_common>
 800cd06:	3001      	adds	r0, #1
 800cd08:	f040 808a 	bne.w	800ce20 <_printf_float+0x1b0>
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	b00b      	add	sp, #44	; 0x2c
 800cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd16:	eeb4 0b40 	vcmp.f64	d0, d0
 800cd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd1e:	d709      	bvc.n	800cd34 <_printf_float+0xc4>
 800cd20:	ee10 3a90 	vmov	r3, s1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	bfbc      	itt	lt
 800cd28:	232d      	movlt	r3, #45	; 0x2d
 800cd2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd2e:	487e      	ldr	r0, [pc, #504]	; (800cf28 <_printf_float+0x2b8>)
 800cd30:	4b7e      	ldr	r3, [pc, #504]	; (800cf2c <_printf_float+0x2bc>)
 800cd32:	e7d5      	b.n	800cce0 <_printf_float+0x70>
 800cd34:	6863      	ldr	r3, [r4, #4]
 800cd36:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cd3a:	9104      	str	r1, [sp, #16]
 800cd3c:	1c59      	adds	r1, r3, #1
 800cd3e:	d13c      	bne.n	800cdba <_printf_float+0x14a>
 800cd40:	2306      	movs	r3, #6
 800cd42:	6063      	str	r3, [r4, #4]
 800cd44:	2300      	movs	r3, #0
 800cd46:	9303      	str	r3, [sp, #12]
 800cd48:	ab08      	add	r3, sp, #32
 800cd4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cd4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd52:	ab07      	add	r3, sp, #28
 800cd54:	6861      	ldr	r1, [r4, #4]
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	6022      	str	r2, [r4, #0]
 800cd5a:	f10d 031b 	add.w	r3, sp, #27
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f7ff fef6 	bl	800cb50 <__cvt>
 800cd64:	9b04      	ldr	r3, [sp, #16]
 800cd66:	9907      	ldr	r1, [sp, #28]
 800cd68:	2b47      	cmp	r3, #71	; 0x47
 800cd6a:	4680      	mov	r8, r0
 800cd6c:	d108      	bne.n	800cd80 <_printf_float+0x110>
 800cd6e:	1cc8      	adds	r0, r1, #3
 800cd70:	db02      	blt.n	800cd78 <_printf_float+0x108>
 800cd72:	6863      	ldr	r3, [r4, #4]
 800cd74:	4299      	cmp	r1, r3
 800cd76:	dd41      	ble.n	800cdfc <_printf_float+0x18c>
 800cd78:	f1a9 0902 	sub.w	r9, r9, #2
 800cd7c:	fa5f f989 	uxtb.w	r9, r9
 800cd80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd84:	d820      	bhi.n	800cdc8 <_printf_float+0x158>
 800cd86:	3901      	subs	r1, #1
 800cd88:	464a      	mov	r2, r9
 800cd8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd8e:	9107      	str	r1, [sp, #28]
 800cd90:	f7ff ff30 	bl	800cbf4 <__exponent>
 800cd94:	9a08      	ldr	r2, [sp, #32]
 800cd96:	9004      	str	r0, [sp, #16]
 800cd98:	1813      	adds	r3, r2, r0
 800cd9a:	2a01      	cmp	r2, #1
 800cd9c:	6123      	str	r3, [r4, #16]
 800cd9e:	dc02      	bgt.n	800cda6 <_printf_float+0x136>
 800cda0:	6822      	ldr	r2, [r4, #0]
 800cda2:	07d2      	lsls	r2, r2, #31
 800cda4:	d501      	bpl.n	800cdaa <_printf_float+0x13a>
 800cda6:	3301      	adds	r3, #1
 800cda8:	6123      	str	r3, [r4, #16]
 800cdaa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d0a2      	beq.n	800ccf8 <_printf_float+0x88>
 800cdb2:	232d      	movs	r3, #45	; 0x2d
 800cdb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdb8:	e79e      	b.n	800ccf8 <_printf_float+0x88>
 800cdba:	9904      	ldr	r1, [sp, #16]
 800cdbc:	2947      	cmp	r1, #71	; 0x47
 800cdbe:	d1c1      	bne.n	800cd44 <_printf_float+0xd4>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1bf      	bne.n	800cd44 <_printf_float+0xd4>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e7bc      	b.n	800cd42 <_printf_float+0xd2>
 800cdc8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cdcc:	d118      	bne.n	800ce00 <_printf_float+0x190>
 800cdce:	2900      	cmp	r1, #0
 800cdd0:	6863      	ldr	r3, [r4, #4]
 800cdd2:	dd0b      	ble.n	800cdec <_printf_float+0x17c>
 800cdd4:	6121      	str	r1, [r4, #16]
 800cdd6:	b913      	cbnz	r3, 800cdde <_printf_float+0x16e>
 800cdd8:	6822      	ldr	r2, [r4, #0]
 800cdda:	07d0      	lsls	r0, r2, #31
 800cddc:	d502      	bpl.n	800cde4 <_printf_float+0x174>
 800cdde:	3301      	adds	r3, #1
 800cde0:	440b      	add	r3, r1
 800cde2:	6123      	str	r3, [r4, #16]
 800cde4:	2300      	movs	r3, #0
 800cde6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cde8:	9304      	str	r3, [sp, #16]
 800cdea:	e7de      	b.n	800cdaa <_printf_float+0x13a>
 800cdec:	b913      	cbnz	r3, 800cdf4 <_printf_float+0x184>
 800cdee:	6822      	ldr	r2, [r4, #0]
 800cdf0:	07d2      	lsls	r2, r2, #31
 800cdf2:	d501      	bpl.n	800cdf8 <_printf_float+0x188>
 800cdf4:	3302      	adds	r3, #2
 800cdf6:	e7f4      	b.n	800cde2 <_printf_float+0x172>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e7f2      	b.n	800cde2 <_printf_float+0x172>
 800cdfc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ce00:	9b08      	ldr	r3, [sp, #32]
 800ce02:	4299      	cmp	r1, r3
 800ce04:	db05      	blt.n	800ce12 <_printf_float+0x1a2>
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	6121      	str	r1, [r4, #16]
 800ce0a:	07d8      	lsls	r0, r3, #31
 800ce0c:	d5ea      	bpl.n	800cde4 <_printf_float+0x174>
 800ce0e:	1c4b      	adds	r3, r1, #1
 800ce10:	e7e7      	b.n	800cde2 <_printf_float+0x172>
 800ce12:	2900      	cmp	r1, #0
 800ce14:	bfd4      	ite	le
 800ce16:	f1c1 0202 	rsble	r2, r1, #2
 800ce1a:	2201      	movgt	r2, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	e7e0      	b.n	800cde2 <_printf_float+0x172>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	055a      	lsls	r2, r3, #21
 800ce24:	d407      	bmi.n	800ce36 <_printf_float+0x1c6>
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	4642      	mov	r2, r8
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	47b8      	blx	r7
 800ce30:	3001      	adds	r0, #1
 800ce32:	d12a      	bne.n	800ce8a <_printf_float+0x21a>
 800ce34:	e76a      	b.n	800cd0c <_printf_float+0x9c>
 800ce36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ce3a:	f240 80e2 	bls.w	800d002 <_printf_float+0x392>
 800ce3e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ce42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce4a:	d133      	bne.n	800ceb4 <_printf_float+0x244>
 800ce4c:	4a38      	ldr	r2, [pc, #224]	; (800cf30 <_printf_float+0x2c0>)
 800ce4e:	2301      	movs	r3, #1
 800ce50:	4631      	mov	r1, r6
 800ce52:	4628      	mov	r0, r5
 800ce54:	47b8      	blx	r7
 800ce56:	3001      	adds	r0, #1
 800ce58:	f43f af58 	beq.w	800cd0c <_printf_float+0x9c>
 800ce5c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	db02      	blt.n	800ce6a <_printf_float+0x1fa>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	07d8      	lsls	r0, r3, #31
 800ce68:	d50f      	bpl.n	800ce8a <_printf_float+0x21a>
 800ce6a:	4653      	mov	r3, sl
 800ce6c:	465a      	mov	r2, fp
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4628      	mov	r0, r5
 800ce72:	47b8      	blx	r7
 800ce74:	3001      	adds	r0, #1
 800ce76:	f43f af49 	beq.w	800cd0c <_printf_float+0x9c>
 800ce7a:	f04f 0800 	mov.w	r8, #0
 800ce7e:	f104 091a 	add.w	r9, r4, #26
 800ce82:	9b08      	ldr	r3, [sp, #32]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	4543      	cmp	r3, r8
 800ce88:	dc09      	bgt.n	800ce9e <_printf_float+0x22e>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	079b      	lsls	r3, r3, #30
 800ce8e:	f100 8108 	bmi.w	800d0a2 <_printf_float+0x432>
 800ce92:	68e0      	ldr	r0, [r4, #12]
 800ce94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce96:	4298      	cmp	r0, r3
 800ce98:	bfb8      	it	lt
 800ce9a:	4618      	movlt	r0, r3
 800ce9c:	e738      	b.n	800cd10 <_printf_float+0xa0>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	464a      	mov	r2, r9
 800cea2:	4631      	mov	r1, r6
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b8      	blx	r7
 800cea8:	3001      	adds	r0, #1
 800ceaa:	f43f af2f 	beq.w	800cd0c <_printf_float+0x9c>
 800ceae:	f108 0801 	add.w	r8, r8, #1
 800ceb2:	e7e6      	b.n	800ce82 <_printf_float+0x212>
 800ceb4:	9b07      	ldr	r3, [sp, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dc3c      	bgt.n	800cf34 <_printf_float+0x2c4>
 800ceba:	4a1d      	ldr	r2, [pc, #116]	; (800cf30 <_printf_float+0x2c0>)
 800cebc:	2301      	movs	r3, #1
 800cebe:	4631      	mov	r1, r6
 800cec0:	4628      	mov	r0, r5
 800cec2:	47b8      	blx	r7
 800cec4:	3001      	adds	r0, #1
 800cec6:	f43f af21 	beq.w	800cd0c <_printf_float+0x9c>
 800ceca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cece:	4313      	orrs	r3, r2
 800ced0:	d102      	bne.n	800ced8 <_printf_float+0x268>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	07d9      	lsls	r1, r3, #31
 800ced6:	d5d8      	bpl.n	800ce8a <_printf_float+0x21a>
 800ced8:	4653      	mov	r3, sl
 800ceda:	465a      	mov	r2, fp
 800cedc:	4631      	mov	r1, r6
 800cede:	4628      	mov	r0, r5
 800cee0:	47b8      	blx	r7
 800cee2:	3001      	adds	r0, #1
 800cee4:	f43f af12 	beq.w	800cd0c <_printf_float+0x9c>
 800cee8:	f04f 0900 	mov.w	r9, #0
 800ceec:	f104 0a1a 	add.w	sl, r4, #26
 800cef0:	9b07      	ldr	r3, [sp, #28]
 800cef2:	425b      	negs	r3, r3
 800cef4:	454b      	cmp	r3, r9
 800cef6:	dc01      	bgt.n	800cefc <_printf_float+0x28c>
 800cef8:	9b08      	ldr	r3, [sp, #32]
 800cefa:	e795      	b.n	800ce28 <_printf_float+0x1b8>
 800cefc:	2301      	movs	r3, #1
 800cefe:	4652      	mov	r2, sl
 800cf00:	4631      	mov	r1, r6
 800cf02:	4628      	mov	r0, r5
 800cf04:	47b8      	blx	r7
 800cf06:	3001      	adds	r0, #1
 800cf08:	f43f af00 	beq.w	800cd0c <_printf_float+0x9c>
 800cf0c:	f109 0901 	add.w	r9, r9, #1
 800cf10:	e7ee      	b.n	800cef0 <_printf_float+0x280>
 800cf12:	bf00      	nop
 800cf14:	f3af 8000 	nop.w
 800cf18:	ffffffff 	.word	0xffffffff
 800cf1c:	7fefffff 	.word	0x7fefffff
 800cf20:	0801f8a1 	.word	0x0801f8a1
 800cf24:	0801f8a5 	.word	0x0801f8a5
 800cf28:	0801f8ad 	.word	0x0801f8ad
 800cf2c:	0801f8a9 	.word	0x0801f8a9
 800cf30:	0801f8b1 	.word	0x0801f8b1
 800cf34:	9a08      	ldr	r2, [sp, #32]
 800cf36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	bfa8      	it	ge
 800cf3c:	461a      	movge	r2, r3
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	4691      	mov	r9, r2
 800cf42:	dc38      	bgt.n	800cfb6 <_printf_float+0x346>
 800cf44:	2300      	movs	r3, #0
 800cf46:	9305      	str	r3, [sp, #20]
 800cf48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf4c:	f104 021a 	add.w	r2, r4, #26
 800cf50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf52:	9905      	ldr	r1, [sp, #20]
 800cf54:	9304      	str	r3, [sp, #16]
 800cf56:	eba3 0309 	sub.w	r3, r3, r9
 800cf5a:	428b      	cmp	r3, r1
 800cf5c:	dc33      	bgt.n	800cfc6 <_printf_float+0x356>
 800cf5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	db3c      	blt.n	800cfe0 <_printf_float+0x370>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	07da      	lsls	r2, r3, #31
 800cf6a:	d439      	bmi.n	800cfe0 <_printf_float+0x370>
 800cf6c:	9a08      	ldr	r2, [sp, #32]
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	9907      	ldr	r1, [sp, #28]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	eba2 0901 	sub.w	r9, r2, r1
 800cf78:	4599      	cmp	r9, r3
 800cf7a:	bfa8      	it	ge
 800cf7c:	4699      	movge	r9, r3
 800cf7e:	f1b9 0f00 	cmp.w	r9, #0
 800cf82:	dc35      	bgt.n	800cff0 <_printf_float+0x380>
 800cf84:	f04f 0800 	mov.w	r8, #0
 800cf88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf8c:	f104 0a1a 	add.w	sl, r4, #26
 800cf90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	eba3 0309 	sub.w	r3, r3, r9
 800cf9a:	4543      	cmp	r3, r8
 800cf9c:	f77f af75 	ble.w	800ce8a <_printf_float+0x21a>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	4652      	mov	r2, sl
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	47b8      	blx	r7
 800cfaa:	3001      	adds	r0, #1
 800cfac:	f43f aeae 	beq.w	800cd0c <_printf_float+0x9c>
 800cfb0:	f108 0801 	add.w	r8, r8, #1
 800cfb4:	e7ec      	b.n	800cf90 <_printf_float+0x320>
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4642      	mov	r2, r8
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d1bf      	bne.n	800cf44 <_printf_float+0x2d4>
 800cfc4:	e6a2      	b.n	800cd0c <_printf_float+0x9c>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	9204      	str	r2, [sp, #16]
 800cfce:	47b8      	blx	r7
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	f43f ae9b 	beq.w	800cd0c <_printf_float+0x9c>
 800cfd6:	9b05      	ldr	r3, [sp, #20]
 800cfd8:	9a04      	ldr	r2, [sp, #16]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	e7b7      	b.n	800cf50 <_printf_float+0x2e0>
 800cfe0:	4653      	mov	r3, sl
 800cfe2:	465a      	mov	r2, fp
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	47b8      	blx	r7
 800cfea:	3001      	adds	r0, #1
 800cfec:	d1be      	bne.n	800cf6c <_printf_float+0x2fc>
 800cfee:	e68d      	b.n	800cd0c <_printf_float+0x9c>
 800cff0:	9a04      	ldr	r2, [sp, #16]
 800cff2:	464b      	mov	r3, r9
 800cff4:	4442      	add	r2, r8
 800cff6:	4631      	mov	r1, r6
 800cff8:	4628      	mov	r0, r5
 800cffa:	47b8      	blx	r7
 800cffc:	3001      	adds	r0, #1
 800cffe:	d1c1      	bne.n	800cf84 <_printf_float+0x314>
 800d000:	e684      	b.n	800cd0c <_printf_float+0x9c>
 800d002:	9a08      	ldr	r2, [sp, #32]
 800d004:	2a01      	cmp	r2, #1
 800d006:	dc01      	bgt.n	800d00c <_printf_float+0x39c>
 800d008:	07db      	lsls	r3, r3, #31
 800d00a:	d537      	bpl.n	800d07c <_printf_float+0x40c>
 800d00c:	2301      	movs	r3, #1
 800d00e:	4642      	mov	r2, r8
 800d010:	4631      	mov	r1, r6
 800d012:	4628      	mov	r0, r5
 800d014:	47b8      	blx	r7
 800d016:	3001      	adds	r0, #1
 800d018:	f43f ae78 	beq.w	800cd0c <_printf_float+0x9c>
 800d01c:	4653      	mov	r3, sl
 800d01e:	465a      	mov	r2, fp
 800d020:	4631      	mov	r1, r6
 800d022:	4628      	mov	r0, r5
 800d024:	47b8      	blx	r7
 800d026:	3001      	adds	r0, #1
 800d028:	f43f ae70 	beq.w	800cd0c <_printf_float+0x9c>
 800d02c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d030:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d038:	d01b      	beq.n	800d072 <_printf_float+0x402>
 800d03a:	9b08      	ldr	r3, [sp, #32]
 800d03c:	f108 0201 	add.w	r2, r8, #1
 800d040:	3b01      	subs	r3, #1
 800d042:	4631      	mov	r1, r6
 800d044:	4628      	mov	r0, r5
 800d046:	47b8      	blx	r7
 800d048:	3001      	adds	r0, #1
 800d04a:	d10e      	bne.n	800d06a <_printf_float+0x3fa>
 800d04c:	e65e      	b.n	800cd0c <_printf_float+0x9c>
 800d04e:	2301      	movs	r3, #1
 800d050:	464a      	mov	r2, r9
 800d052:	4631      	mov	r1, r6
 800d054:	4628      	mov	r0, r5
 800d056:	47b8      	blx	r7
 800d058:	3001      	adds	r0, #1
 800d05a:	f43f ae57 	beq.w	800cd0c <_printf_float+0x9c>
 800d05e:	f108 0801 	add.w	r8, r8, #1
 800d062:	9b08      	ldr	r3, [sp, #32]
 800d064:	3b01      	subs	r3, #1
 800d066:	4543      	cmp	r3, r8
 800d068:	dcf1      	bgt.n	800d04e <_printf_float+0x3de>
 800d06a:	9b04      	ldr	r3, [sp, #16]
 800d06c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d070:	e6db      	b.n	800ce2a <_printf_float+0x1ba>
 800d072:	f04f 0800 	mov.w	r8, #0
 800d076:	f104 091a 	add.w	r9, r4, #26
 800d07a:	e7f2      	b.n	800d062 <_printf_float+0x3f2>
 800d07c:	2301      	movs	r3, #1
 800d07e:	4642      	mov	r2, r8
 800d080:	e7df      	b.n	800d042 <_printf_float+0x3d2>
 800d082:	2301      	movs	r3, #1
 800d084:	464a      	mov	r2, r9
 800d086:	4631      	mov	r1, r6
 800d088:	4628      	mov	r0, r5
 800d08a:	47b8      	blx	r7
 800d08c:	3001      	adds	r0, #1
 800d08e:	f43f ae3d 	beq.w	800cd0c <_printf_float+0x9c>
 800d092:	f108 0801 	add.w	r8, r8, #1
 800d096:	68e3      	ldr	r3, [r4, #12]
 800d098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d09a:	1a5b      	subs	r3, r3, r1
 800d09c:	4543      	cmp	r3, r8
 800d09e:	dcf0      	bgt.n	800d082 <_printf_float+0x412>
 800d0a0:	e6f7      	b.n	800ce92 <_printf_float+0x222>
 800d0a2:	f04f 0800 	mov.w	r8, #0
 800d0a6:	f104 0919 	add.w	r9, r4, #25
 800d0aa:	e7f4      	b.n	800d096 <_printf_float+0x426>

0800d0ac <_printf_common>:
 800d0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b0:	4616      	mov	r6, r2
 800d0b2:	4699      	mov	r9, r3
 800d0b4:	688a      	ldr	r2, [r1, #8]
 800d0b6:	690b      	ldr	r3, [r1, #16]
 800d0b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	bfb8      	it	lt
 800d0c0:	4613      	movlt	r3, r2
 800d0c2:	6033      	str	r3, [r6, #0]
 800d0c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0c8:	4607      	mov	r7, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	b10a      	cbz	r2, 800d0d2 <_printf_common+0x26>
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	6033      	str	r3, [r6, #0]
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	0699      	lsls	r1, r3, #26
 800d0d6:	bf42      	ittt	mi
 800d0d8:	6833      	ldrmi	r3, [r6, #0]
 800d0da:	3302      	addmi	r3, #2
 800d0dc:	6033      	strmi	r3, [r6, #0]
 800d0de:	6825      	ldr	r5, [r4, #0]
 800d0e0:	f015 0506 	ands.w	r5, r5, #6
 800d0e4:	d106      	bne.n	800d0f4 <_printf_common+0x48>
 800d0e6:	f104 0a19 	add.w	sl, r4, #25
 800d0ea:	68e3      	ldr	r3, [r4, #12]
 800d0ec:	6832      	ldr	r2, [r6, #0]
 800d0ee:	1a9b      	subs	r3, r3, r2
 800d0f0:	42ab      	cmp	r3, r5
 800d0f2:	dc26      	bgt.n	800d142 <_printf_common+0x96>
 800d0f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0f8:	1e13      	subs	r3, r2, #0
 800d0fa:	6822      	ldr	r2, [r4, #0]
 800d0fc:	bf18      	it	ne
 800d0fe:	2301      	movne	r3, #1
 800d100:	0692      	lsls	r2, r2, #26
 800d102:	d42b      	bmi.n	800d15c <_printf_common+0xb0>
 800d104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d108:	4649      	mov	r1, r9
 800d10a:	4638      	mov	r0, r7
 800d10c:	47c0      	blx	r8
 800d10e:	3001      	adds	r0, #1
 800d110:	d01e      	beq.n	800d150 <_printf_common+0xa4>
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	68e5      	ldr	r5, [r4, #12]
 800d116:	6832      	ldr	r2, [r6, #0]
 800d118:	f003 0306 	and.w	r3, r3, #6
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	bf08      	it	eq
 800d120:	1aad      	subeq	r5, r5, r2
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	6922      	ldr	r2, [r4, #16]
 800d126:	bf0c      	ite	eq
 800d128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d12c:	2500      	movne	r5, #0
 800d12e:	4293      	cmp	r3, r2
 800d130:	bfc4      	itt	gt
 800d132:	1a9b      	subgt	r3, r3, r2
 800d134:	18ed      	addgt	r5, r5, r3
 800d136:	2600      	movs	r6, #0
 800d138:	341a      	adds	r4, #26
 800d13a:	42b5      	cmp	r5, r6
 800d13c:	d11a      	bne.n	800d174 <_printf_common+0xc8>
 800d13e:	2000      	movs	r0, #0
 800d140:	e008      	b.n	800d154 <_printf_common+0xa8>
 800d142:	2301      	movs	r3, #1
 800d144:	4652      	mov	r2, sl
 800d146:	4649      	mov	r1, r9
 800d148:	4638      	mov	r0, r7
 800d14a:	47c0      	blx	r8
 800d14c:	3001      	adds	r0, #1
 800d14e:	d103      	bne.n	800d158 <_printf_common+0xac>
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d158:	3501      	adds	r5, #1
 800d15a:	e7c6      	b.n	800d0ea <_printf_common+0x3e>
 800d15c:	18e1      	adds	r1, r4, r3
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	2030      	movs	r0, #48	; 0x30
 800d162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d166:	4422      	add	r2, r4
 800d168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d16c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d170:	3302      	adds	r3, #2
 800d172:	e7c7      	b.n	800d104 <_printf_common+0x58>
 800d174:	2301      	movs	r3, #1
 800d176:	4622      	mov	r2, r4
 800d178:	4649      	mov	r1, r9
 800d17a:	4638      	mov	r0, r7
 800d17c:	47c0      	blx	r8
 800d17e:	3001      	adds	r0, #1
 800d180:	d0e6      	beq.n	800d150 <_printf_common+0xa4>
 800d182:	3601      	adds	r6, #1
 800d184:	e7d9      	b.n	800d13a <_printf_common+0x8e>
	...

0800d188 <_printf_i>:
 800d188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	460c      	mov	r4, r1
 800d18e:	4691      	mov	r9, r2
 800d190:	7e27      	ldrb	r7, [r4, #24]
 800d192:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d194:	2f78      	cmp	r7, #120	; 0x78
 800d196:	4680      	mov	r8, r0
 800d198:	469a      	mov	sl, r3
 800d19a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d19e:	d807      	bhi.n	800d1b0 <_printf_i+0x28>
 800d1a0:	2f62      	cmp	r7, #98	; 0x62
 800d1a2:	d80a      	bhi.n	800d1ba <_printf_i+0x32>
 800d1a4:	2f00      	cmp	r7, #0
 800d1a6:	f000 80d8 	beq.w	800d35a <_printf_i+0x1d2>
 800d1aa:	2f58      	cmp	r7, #88	; 0x58
 800d1ac:	f000 80a3 	beq.w	800d2f6 <_printf_i+0x16e>
 800d1b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1b8:	e03a      	b.n	800d230 <_printf_i+0xa8>
 800d1ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1be:	2b15      	cmp	r3, #21
 800d1c0:	d8f6      	bhi.n	800d1b0 <_printf_i+0x28>
 800d1c2:	a001      	add	r0, pc, #4	; (adr r0, 800d1c8 <_printf_i+0x40>)
 800d1c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1c8:	0800d221 	.word	0x0800d221
 800d1cc:	0800d235 	.word	0x0800d235
 800d1d0:	0800d1b1 	.word	0x0800d1b1
 800d1d4:	0800d1b1 	.word	0x0800d1b1
 800d1d8:	0800d1b1 	.word	0x0800d1b1
 800d1dc:	0800d1b1 	.word	0x0800d1b1
 800d1e0:	0800d235 	.word	0x0800d235
 800d1e4:	0800d1b1 	.word	0x0800d1b1
 800d1e8:	0800d1b1 	.word	0x0800d1b1
 800d1ec:	0800d1b1 	.word	0x0800d1b1
 800d1f0:	0800d1b1 	.word	0x0800d1b1
 800d1f4:	0800d341 	.word	0x0800d341
 800d1f8:	0800d265 	.word	0x0800d265
 800d1fc:	0800d323 	.word	0x0800d323
 800d200:	0800d1b1 	.word	0x0800d1b1
 800d204:	0800d1b1 	.word	0x0800d1b1
 800d208:	0800d363 	.word	0x0800d363
 800d20c:	0800d1b1 	.word	0x0800d1b1
 800d210:	0800d265 	.word	0x0800d265
 800d214:	0800d1b1 	.word	0x0800d1b1
 800d218:	0800d1b1 	.word	0x0800d1b1
 800d21c:	0800d32b 	.word	0x0800d32b
 800d220:	680b      	ldr	r3, [r1, #0]
 800d222:	1d1a      	adds	r2, r3, #4
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	600a      	str	r2, [r1, #0]
 800d228:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d22c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d230:	2301      	movs	r3, #1
 800d232:	e0a3      	b.n	800d37c <_printf_i+0x1f4>
 800d234:	6825      	ldr	r5, [r4, #0]
 800d236:	6808      	ldr	r0, [r1, #0]
 800d238:	062e      	lsls	r6, r5, #24
 800d23a:	f100 0304 	add.w	r3, r0, #4
 800d23e:	d50a      	bpl.n	800d256 <_printf_i+0xce>
 800d240:	6805      	ldr	r5, [r0, #0]
 800d242:	600b      	str	r3, [r1, #0]
 800d244:	2d00      	cmp	r5, #0
 800d246:	da03      	bge.n	800d250 <_printf_i+0xc8>
 800d248:	232d      	movs	r3, #45	; 0x2d
 800d24a:	426d      	negs	r5, r5
 800d24c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d250:	485e      	ldr	r0, [pc, #376]	; (800d3cc <_printf_i+0x244>)
 800d252:	230a      	movs	r3, #10
 800d254:	e019      	b.n	800d28a <_printf_i+0x102>
 800d256:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d25a:	6805      	ldr	r5, [r0, #0]
 800d25c:	600b      	str	r3, [r1, #0]
 800d25e:	bf18      	it	ne
 800d260:	b22d      	sxthne	r5, r5
 800d262:	e7ef      	b.n	800d244 <_printf_i+0xbc>
 800d264:	680b      	ldr	r3, [r1, #0]
 800d266:	6825      	ldr	r5, [r4, #0]
 800d268:	1d18      	adds	r0, r3, #4
 800d26a:	6008      	str	r0, [r1, #0]
 800d26c:	0628      	lsls	r0, r5, #24
 800d26e:	d501      	bpl.n	800d274 <_printf_i+0xec>
 800d270:	681d      	ldr	r5, [r3, #0]
 800d272:	e002      	b.n	800d27a <_printf_i+0xf2>
 800d274:	0669      	lsls	r1, r5, #25
 800d276:	d5fb      	bpl.n	800d270 <_printf_i+0xe8>
 800d278:	881d      	ldrh	r5, [r3, #0]
 800d27a:	4854      	ldr	r0, [pc, #336]	; (800d3cc <_printf_i+0x244>)
 800d27c:	2f6f      	cmp	r7, #111	; 0x6f
 800d27e:	bf0c      	ite	eq
 800d280:	2308      	moveq	r3, #8
 800d282:	230a      	movne	r3, #10
 800d284:	2100      	movs	r1, #0
 800d286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d28a:	6866      	ldr	r6, [r4, #4]
 800d28c:	60a6      	str	r6, [r4, #8]
 800d28e:	2e00      	cmp	r6, #0
 800d290:	bfa2      	ittt	ge
 800d292:	6821      	ldrge	r1, [r4, #0]
 800d294:	f021 0104 	bicge.w	r1, r1, #4
 800d298:	6021      	strge	r1, [r4, #0]
 800d29a:	b90d      	cbnz	r5, 800d2a0 <_printf_i+0x118>
 800d29c:	2e00      	cmp	r6, #0
 800d29e:	d04d      	beq.n	800d33c <_printf_i+0x1b4>
 800d2a0:	4616      	mov	r6, r2
 800d2a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2a6:	fb03 5711 	mls	r7, r3, r1, r5
 800d2aa:	5dc7      	ldrb	r7, [r0, r7]
 800d2ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2b0:	462f      	mov	r7, r5
 800d2b2:	42bb      	cmp	r3, r7
 800d2b4:	460d      	mov	r5, r1
 800d2b6:	d9f4      	bls.n	800d2a2 <_printf_i+0x11a>
 800d2b8:	2b08      	cmp	r3, #8
 800d2ba:	d10b      	bne.n	800d2d4 <_printf_i+0x14c>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	07df      	lsls	r7, r3, #31
 800d2c0:	d508      	bpl.n	800d2d4 <_printf_i+0x14c>
 800d2c2:	6923      	ldr	r3, [r4, #16]
 800d2c4:	6861      	ldr	r1, [r4, #4]
 800d2c6:	4299      	cmp	r1, r3
 800d2c8:	bfde      	ittt	le
 800d2ca:	2330      	movle	r3, #48	; 0x30
 800d2cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2d4:	1b92      	subs	r2, r2, r6
 800d2d6:	6122      	str	r2, [r4, #16]
 800d2d8:	f8cd a000 	str.w	sl, [sp]
 800d2dc:	464b      	mov	r3, r9
 800d2de:	aa03      	add	r2, sp, #12
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	f7ff fee2 	bl	800d0ac <_printf_common>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	d14c      	bne.n	800d386 <_printf_i+0x1fe>
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	b004      	add	sp, #16
 800d2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f6:	4835      	ldr	r0, [pc, #212]	; (800d3cc <_printf_i+0x244>)
 800d2f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	680e      	ldr	r6, [r1, #0]
 800d300:	061f      	lsls	r7, r3, #24
 800d302:	f856 5b04 	ldr.w	r5, [r6], #4
 800d306:	600e      	str	r6, [r1, #0]
 800d308:	d514      	bpl.n	800d334 <_printf_i+0x1ac>
 800d30a:	07d9      	lsls	r1, r3, #31
 800d30c:	bf44      	itt	mi
 800d30e:	f043 0320 	orrmi.w	r3, r3, #32
 800d312:	6023      	strmi	r3, [r4, #0]
 800d314:	b91d      	cbnz	r5, 800d31e <_printf_i+0x196>
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	f023 0320 	bic.w	r3, r3, #32
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	2310      	movs	r3, #16
 800d320:	e7b0      	b.n	800d284 <_printf_i+0xfc>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	f043 0320 	orr.w	r3, r3, #32
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	2378      	movs	r3, #120	; 0x78
 800d32c:	4828      	ldr	r0, [pc, #160]	; (800d3d0 <_printf_i+0x248>)
 800d32e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d332:	e7e3      	b.n	800d2fc <_printf_i+0x174>
 800d334:	065e      	lsls	r6, r3, #25
 800d336:	bf48      	it	mi
 800d338:	b2ad      	uxthmi	r5, r5
 800d33a:	e7e6      	b.n	800d30a <_printf_i+0x182>
 800d33c:	4616      	mov	r6, r2
 800d33e:	e7bb      	b.n	800d2b8 <_printf_i+0x130>
 800d340:	680b      	ldr	r3, [r1, #0]
 800d342:	6826      	ldr	r6, [r4, #0]
 800d344:	6960      	ldr	r0, [r4, #20]
 800d346:	1d1d      	adds	r5, r3, #4
 800d348:	600d      	str	r5, [r1, #0]
 800d34a:	0635      	lsls	r5, r6, #24
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	d501      	bpl.n	800d354 <_printf_i+0x1cc>
 800d350:	6018      	str	r0, [r3, #0]
 800d352:	e002      	b.n	800d35a <_printf_i+0x1d2>
 800d354:	0671      	lsls	r1, r6, #25
 800d356:	d5fb      	bpl.n	800d350 <_printf_i+0x1c8>
 800d358:	8018      	strh	r0, [r3, #0]
 800d35a:	2300      	movs	r3, #0
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	4616      	mov	r6, r2
 800d360:	e7ba      	b.n	800d2d8 <_printf_i+0x150>
 800d362:	680b      	ldr	r3, [r1, #0]
 800d364:	1d1a      	adds	r2, r3, #4
 800d366:	600a      	str	r2, [r1, #0]
 800d368:	681e      	ldr	r6, [r3, #0]
 800d36a:	6862      	ldr	r2, [r4, #4]
 800d36c:	2100      	movs	r1, #0
 800d36e:	4630      	mov	r0, r6
 800d370:	f7f2 ffce 	bl	8000310 <memchr>
 800d374:	b108      	cbz	r0, 800d37a <_printf_i+0x1f2>
 800d376:	1b80      	subs	r0, r0, r6
 800d378:	6060      	str	r0, [r4, #4]
 800d37a:	6863      	ldr	r3, [r4, #4]
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	2300      	movs	r3, #0
 800d380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d384:	e7a8      	b.n	800d2d8 <_printf_i+0x150>
 800d386:	6923      	ldr	r3, [r4, #16]
 800d388:	4632      	mov	r2, r6
 800d38a:	4649      	mov	r1, r9
 800d38c:	4640      	mov	r0, r8
 800d38e:	47d0      	blx	sl
 800d390:	3001      	adds	r0, #1
 800d392:	d0ab      	beq.n	800d2ec <_printf_i+0x164>
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	079b      	lsls	r3, r3, #30
 800d398:	d413      	bmi.n	800d3c2 <_printf_i+0x23a>
 800d39a:	68e0      	ldr	r0, [r4, #12]
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	4298      	cmp	r0, r3
 800d3a0:	bfb8      	it	lt
 800d3a2:	4618      	movlt	r0, r3
 800d3a4:	e7a4      	b.n	800d2f0 <_printf_i+0x168>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	4632      	mov	r2, r6
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	47d0      	blx	sl
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	d09b      	beq.n	800d2ec <_printf_i+0x164>
 800d3b4:	3501      	adds	r5, #1
 800d3b6:	68e3      	ldr	r3, [r4, #12]
 800d3b8:	9903      	ldr	r1, [sp, #12]
 800d3ba:	1a5b      	subs	r3, r3, r1
 800d3bc:	42ab      	cmp	r3, r5
 800d3be:	dcf2      	bgt.n	800d3a6 <_printf_i+0x21e>
 800d3c0:	e7eb      	b.n	800d39a <_printf_i+0x212>
 800d3c2:	2500      	movs	r5, #0
 800d3c4:	f104 0619 	add.w	r6, r4, #25
 800d3c8:	e7f5      	b.n	800d3b6 <_printf_i+0x22e>
 800d3ca:	bf00      	nop
 800d3cc:	0801f8b3 	.word	0x0801f8b3
 800d3d0:	0801f8c4 	.word	0x0801f8c4

0800d3d4 <_scanf_float>:
 800d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d8:	b087      	sub	sp, #28
 800d3da:	4617      	mov	r7, r2
 800d3dc:	9303      	str	r3, [sp, #12]
 800d3de:	688b      	ldr	r3, [r1, #8]
 800d3e0:	1e5a      	subs	r2, r3, #1
 800d3e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d3e6:	bf83      	ittte	hi
 800d3e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d3ec:	195b      	addhi	r3, r3, r5
 800d3ee:	9302      	strhi	r3, [sp, #8]
 800d3f0:	2300      	movls	r3, #0
 800d3f2:	bf86      	itte	hi
 800d3f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d3f8:	608b      	strhi	r3, [r1, #8]
 800d3fa:	9302      	strls	r3, [sp, #8]
 800d3fc:	680b      	ldr	r3, [r1, #0]
 800d3fe:	468b      	mov	fp, r1
 800d400:	2500      	movs	r5, #0
 800d402:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d406:	f84b 3b1c 	str.w	r3, [fp], #28
 800d40a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d40e:	4680      	mov	r8, r0
 800d410:	460c      	mov	r4, r1
 800d412:	465e      	mov	r6, fp
 800d414:	46aa      	mov	sl, r5
 800d416:	46a9      	mov	r9, r5
 800d418:	9501      	str	r5, [sp, #4]
 800d41a:	68a2      	ldr	r2, [r4, #8]
 800d41c:	b152      	cbz	r2, 800d434 <_scanf_float+0x60>
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b4e      	cmp	r3, #78	; 0x4e
 800d424:	d864      	bhi.n	800d4f0 <_scanf_float+0x11c>
 800d426:	2b40      	cmp	r3, #64	; 0x40
 800d428:	d83c      	bhi.n	800d4a4 <_scanf_float+0xd0>
 800d42a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d42e:	b2c8      	uxtb	r0, r1
 800d430:	280e      	cmp	r0, #14
 800d432:	d93a      	bls.n	800d4aa <_scanf_float+0xd6>
 800d434:	f1b9 0f00 	cmp.w	r9, #0
 800d438:	d003      	beq.n	800d442 <_scanf_float+0x6e>
 800d43a:	6823      	ldr	r3, [r4, #0]
 800d43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d446:	f1ba 0f01 	cmp.w	sl, #1
 800d44a:	f200 8113 	bhi.w	800d674 <_scanf_float+0x2a0>
 800d44e:	455e      	cmp	r6, fp
 800d450:	f200 8105 	bhi.w	800d65e <_scanf_float+0x28a>
 800d454:	2501      	movs	r5, #1
 800d456:	4628      	mov	r0, r5
 800d458:	b007      	add	sp, #28
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d462:	2a0d      	cmp	r2, #13
 800d464:	d8e6      	bhi.n	800d434 <_scanf_float+0x60>
 800d466:	a101      	add	r1, pc, #4	; (adr r1, 800d46c <_scanf_float+0x98>)
 800d468:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d46c:	0800d5ab 	.word	0x0800d5ab
 800d470:	0800d435 	.word	0x0800d435
 800d474:	0800d435 	.word	0x0800d435
 800d478:	0800d435 	.word	0x0800d435
 800d47c:	0800d60b 	.word	0x0800d60b
 800d480:	0800d5e3 	.word	0x0800d5e3
 800d484:	0800d435 	.word	0x0800d435
 800d488:	0800d435 	.word	0x0800d435
 800d48c:	0800d5b9 	.word	0x0800d5b9
 800d490:	0800d435 	.word	0x0800d435
 800d494:	0800d435 	.word	0x0800d435
 800d498:	0800d435 	.word	0x0800d435
 800d49c:	0800d435 	.word	0x0800d435
 800d4a0:	0800d571 	.word	0x0800d571
 800d4a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d4a8:	e7db      	b.n	800d462 <_scanf_float+0x8e>
 800d4aa:	290e      	cmp	r1, #14
 800d4ac:	d8c2      	bhi.n	800d434 <_scanf_float+0x60>
 800d4ae:	a001      	add	r0, pc, #4	; (adr r0, 800d4b4 <_scanf_float+0xe0>)
 800d4b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d4b4:	0800d563 	.word	0x0800d563
 800d4b8:	0800d435 	.word	0x0800d435
 800d4bc:	0800d563 	.word	0x0800d563
 800d4c0:	0800d5f7 	.word	0x0800d5f7
 800d4c4:	0800d435 	.word	0x0800d435
 800d4c8:	0800d511 	.word	0x0800d511
 800d4cc:	0800d54d 	.word	0x0800d54d
 800d4d0:	0800d54d 	.word	0x0800d54d
 800d4d4:	0800d54d 	.word	0x0800d54d
 800d4d8:	0800d54d 	.word	0x0800d54d
 800d4dc:	0800d54d 	.word	0x0800d54d
 800d4e0:	0800d54d 	.word	0x0800d54d
 800d4e4:	0800d54d 	.word	0x0800d54d
 800d4e8:	0800d54d 	.word	0x0800d54d
 800d4ec:	0800d54d 	.word	0x0800d54d
 800d4f0:	2b6e      	cmp	r3, #110	; 0x6e
 800d4f2:	d809      	bhi.n	800d508 <_scanf_float+0x134>
 800d4f4:	2b60      	cmp	r3, #96	; 0x60
 800d4f6:	d8b2      	bhi.n	800d45e <_scanf_float+0x8a>
 800d4f8:	2b54      	cmp	r3, #84	; 0x54
 800d4fa:	d077      	beq.n	800d5ec <_scanf_float+0x218>
 800d4fc:	2b59      	cmp	r3, #89	; 0x59
 800d4fe:	d199      	bne.n	800d434 <_scanf_float+0x60>
 800d500:	2d07      	cmp	r5, #7
 800d502:	d197      	bne.n	800d434 <_scanf_float+0x60>
 800d504:	2508      	movs	r5, #8
 800d506:	e029      	b.n	800d55c <_scanf_float+0x188>
 800d508:	2b74      	cmp	r3, #116	; 0x74
 800d50a:	d06f      	beq.n	800d5ec <_scanf_float+0x218>
 800d50c:	2b79      	cmp	r3, #121	; 0x79
 800d50e:	e7f6      	b.n	800d4fe <_scanf_float+0x12a>
 800d510:	6821      	ldr	r1, [r4, #0]
 800d512:	05c8      	lsls	r0, r1, #23
 800d514:	d51a      	bpl.n	800d54c <_scanf_float+0x178>
 800d516:	9b02      	ldr	r3, [sp, #8]
 800d518:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d51c:	6021      	str	r1, [r4, #0]
 800d51e:	f109 0901 	add.w	r9, r9, #1
 800d522:	b11b      	cbz	r3, 800d52c <_scanf_float+0x158>
 800d524:	3b01      	subs	r3, #1
 800d526:	3201      	adds	r2, #1
 800d528:	9302      	str	r3, [sp, #8]
 800d52a:	60a2      	str	r2, [r4, #8]
 800d52c:	68a3      	ldr	r3, [r4, #8]
 800d52e:	3b01      	subs	r3, #1
 800d530:	60a3      	str	r3, [r4, #8]
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	3301      	adds	r3, #1
 800d536:	6123      	str	r3, [r4, #16]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	607b      	str	r3, [r7, #4]
 800d540:	f340 8084 	ble.w	800d64c <_scanf_float+0x278>
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	3301      	adds	r3, #1
 800d548:	603b      	str	r3, [r7, #0]
 800d54a:	e766      	b.n	800d41a <_scanf_float+0x46>
 800d54c:	eb1a 0f05 	cmn.w	sl, r5
 800d550:	f47f af70 	bne.w	800d434 <_scanf_float+0x60>
 800d554:	6822      	ldr	r2, [r4, #0]
 800d556:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d55a:	6022      	str	r2, [r4, #0]
 800d55c:	f806 3b01 	strb.w	r3, [r6], #1
 800d560:	e7e4      	b.n	800d52c <_scanf_float+0x158>
 800d562:	6822      	ldr	r2, [r4, #0]
 800d564:	0610      	lsls	r0, r2, #24
 800d566:	f57f af65 	bpl.w	800d434 <_scanf_float+0x60>
 800d56a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d56e:	e7f4      	b.n	800d55a <_scanf_float+0x186>
 800d570:	f1ba 0f00 	cmp.w	sl, #0
 800d574:	d10e      	bne.n	800d594 <_scanf_float+0x1c0>
 800d576:	f1b9 0f00 	cmp.w	r9, #0
 800d57a:	d10e      	bne.n	800d59a <_scanf_float+0x1c6>
 800d57c:	6822      	ldr	r2, [r4, #0]
 800d57e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d582:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d586:	d108      	bne.n	800d59a <_scanf_float+0x1c6>
 800d588:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d58c:	6022      	str	r2, [r4, #0]
 800d58e:	f04f 0a01 	mov.w	sl, #1
 800d592:	e7e3      	b.n	800d55c <_scanf_float+0x188>
 800d594:	f1ba 0f02 	cmp.w	sl, #2
 800d598:	d055      	beq.n	800d646 <_scanf_float+0x272>
 800d59a:	2d01      	cmp	r5, #1
 800d59c:	d002      	beq.n	800d5a4 <_scanf_float+0x1d0>
 800d59e:	2d04      	cmp	r5, #4
 800d5a0:	f47f af48 	bne.w	800d434 <_scanf_float+0x60>
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	b2ed      	uxtb	r5, r5
 800d5a8:	e7d8      	b.n	800d55c <_scanf_float+0x188>
 800d5aa:	f1ba 0f01 	cmp.w	sl, #1
 800d5ae:	f47f af41 	bne.w	800d434 <_scanf_float+0x60>
 800d5b2:	f04f 0a02 	mov.w	sl, #2
 800d5b6:	e7d1      	b.n	800d55c <_scanf_float+0x188>
 800d5b8:	b97d      	cbnz	r5, 800d5da <_scanf_float+0x206>
 800d5ba:	f1b9 0f00 	cmp.w	r9, #0
 800d5be:	f47f af3c 	bne.w	800d43a <_scanf_float+0x66>
 800d5c2:	6822      	ldr	r2, [r4, #0]
 800d5c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d5c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d5cc:	f47f af39 	bne.w	800d442 <_scanf_float+0x6e>
 800d5d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d5d4:	6022      	str	r2, [r4, #0]
 800d5d6:	2501      	movs	r5, #1
 800d5d8:	e7c0      	b.n	800d55c <_scanf_float+0x188>
 800d5da:	2d03      	cmp	r5, #3
 800d5dc:	d0e2      	beq.n	800d5a4 <_scanf_float+0x1d0>
 800d5de:	2d05      	cmp	r5, #5
 800d5e0:	e7de      	b.n	800d5a0 <_scanf_float+0x1cc>
 800d5e2:	2d02      	cmp	r5, #2
 800d5e4:	f47f af26 	bne.w	800d434 <_scanf_float+0x60>
 800d5e8:	2503      	movs	r5, #3
 800d5ea:	e7b7      	b.n	800d55c <_scanf_float+0x188>
 800d5ec:	2d06      	cmp	r5, #6
 800d5ee:	f47f af21 	bne.w	800d434 <_scanf_float+0x60>
 800d5f2:	2507      	movs	r5, #7
 800d5f4:	e7b2      	b.n	800d55c <_scanf_float+0x188>
 800d5f6:	6822      	ldr	r2, [r4, #0]
 800d5f8:	0591      	lsls	r1, r2, #22
 800d5fa:	f57f af1b 	bpl.w	800d434 <_scanf_float+0x60>
 800d5fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d602:	6022      	str	r2, [r4, #0]
 800d604:	f8cd 9004 	str.w	r9, [sp, #4]
 800d608:	e7a8      	b.n	800d55c <_scanf_float+0x188>
 800d60a:	6822      	ldr	r2, [r4, #0]
 800d60c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d610:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d614:	d006      	beq.n	800d624 <_scanf_float+0x250>
 800d616:	0550      	lsls	r0, r2, #21
 800d618:	f57f af0c 	bpl.w	800d434 <_scanf_float+0x60>
 800d61c:	f1b9 0f00 	cmp.w	r9, #0
 800d620:	f43f af0f 	beq.w	800d442 <_scanf_float+0x6e>
 800d624:	0591      	lsls	r1, r2, #22
 800d626:	bf58      	it	pl
 800d628:	9901      	ldrpl	r1, [sp, #4]
 800d62a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d62e:	bf58      	it	pl
 800d630:	eba9 0101 	subpl.w	r1, r9, r1
 800d634:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d638:	bf58      	it	pl
 800d63a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d63e:	6022      	str	r2, [r4, #0]
 800d640:	f04f 0900 	mov.w	r9, #0
 800d644:	e78a      	b.n	800d55c <_scanf_float+0x188>
 800d646:	f04f 0a03 	mov.w	sl, #3
 800d64a:	e787      	b.n	800d55c <_scanf_float+0x188>
 800d64c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d650:	4639      	mov	r1, r7
 800d652:	4640      	mov	r0, r8
 800d654:	4798      	blx	r3
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f aedf 	beq.w	800d41a <_scanf_float+0x46>
 800d65c:	e6ea      	b.n	800d434 <_scanf_float+0x60>
 800d65e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d662:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d666:	463a      	mov	r2, r7
 800d668:	4640      	mov	r0, r8
 800d66a:	4798      	blx	r3
 800d66c:	6923      	ldr	r3, [r4, #16]
 800d66e:	3b01      	subs	r3, #1
 800d670:	6123      	str	r3, [r4, #16]
 800d672:	e6ec      	b.n	800d44e <_scanf_float+0x7a>
 800d674:	1e6b      	subs	r3, r5, #1
 800d676:	2b06      	cmp	r3, #6
 800d678:	d825      	bhi.n	800d6c6 <_scanf_float+0x2f2>
 800d67a:	2d02      	cmp	r5, #2
 800d67c:	d836      	bhi.n	800d6ec <_scanf_float+0x318>
 800d67e:	455e      	cmp	r6, fp
 800d680:	f67f aee8 	bls.w	800d454 <_scanf_float+0x80>
 800d684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d688:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d68c:	463a      	mov	r2, r7
 800d68e:	4640      	mov	r0, r8
 800d690:	4798      	blx	r3
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	3b01      	subs	r3, #1
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	e7f1      	b.n	800d67e <_scanf_float+0x2aa>
 800d69a:	9802      	ldr	r0, [sp, #8]
 800d69c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d6a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d6a4:	9002      	str	r0, [sp, #8]
 800d6a6:	463a      	mov	r2, r7
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	4798      	blx	r3
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	6123      	str	r3, [r4, #16]
 800d6b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6b6:	fa5f fa8a 	uxtb.w	sl, sl
 800d6ba:	f1ba 0f02 	cmp.w	sl, #2
 800d6be:	d1ec      	bne.n	800d69a <_scanf_float+0x2c6>
 800d6c0:	3d03      	subs	r5, #3
 800d6c2:	b2ed      	uxtb	r5, r5
 800d6c4:	1b76      	subs	r6, r6, r5
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	05da      	lsls	r2, r3, #23
 800d6ca:	d52f      	bpl.n	800d72c <_scanf_float+0x358>
 800d6cc:	055b      	lsls	r3, r3, #21
 800d6ce:	d510      	bpl.n	800d6f2 <_scanf_float+0x31e>
 800d6d0:	455e      	cmp	r6, fp
 800d6d2:	f67f aebf 	bls.w	800d454 <_scanf_float+0x80>
 800d6d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d6da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6de:	463a      	mov	r2, r7
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	4798      	blx	r3
 800d6e4:	6923      	ldr	r3, [r4, #16]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	6123      	str	r3, [r4, #16]
 800d6ea:	e7f1      	b.n	800d6d0 <_scanf_float+0x2fc>
 800d6ec:	46aa      	mov	sl, r5
 800d6ee:	9602      	str	r6, [sp, #8]
 800d6f0:	e7df      	b.n	800d6b2 <_scanf_float+0x2de>
 800d6f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	2965      	cmp	r1, #101	; 0x65
 800d6fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800d702:	6123      	str	r3, [r4, #16]
 800d704:	d00c      	beq.n	800d720 <_scanf_float+0x34c>
 800d706:	2945      	cmp	r1, #69	; 0x45
 800d708:	d00a      	beq.n	800d720 <_scanf_float+0x34c>
 800d70a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d70e:	463a      	mov	r2, r7
 800d710:	4640      	mov	r0, r8
 800d712:	4798      	blx	r3
 800d714:	6923      	ldr	r3, [r4, #16]
 800d716:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	1eb5      	subs	r5, r6, #2
 800d71e:	6123      	str	r3, [r4, #16]
 800d720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d724:	463a      	mov	r2, r7
 800d726:	4640      	mov	r0, r8
 800d728:	4798      	blx	r3
 800d72a:	462e      	mov	r6, r5
 800d72c:	6825      	ldr	r5, [r4, #0]
 800d72e:	f015 0510 	ands.w	r5, r5, #16
 800d732:	d14d      	bne.n	800d7d0 <_scanf_float+0x3fc>
 800d734:	7035      	strb	r5, [r6, #0]
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d73c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d740:	d11a      	bne.n	800d778 <_scanf_float+0x3a4>
 800d742:	9b01      	ldr	r3, [sp, #4]
 800d744:	454b      	cmp	r3, r9
 800d746:	eba3 0209 	sub.w	r2, r3, r9
 800d74a:	d122      	bne.n	800d792 <_scanf_float+0x3be>
 800d74c:	2200      	movs	r2, #0
 800d74e:	4659      	mov	r1, fp
 800d750:	4640      	mov	r0, r8
 800d752:	f000 ff53 	bl	800e5fc <_strtod_r>
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	6821      	ldr	r1, [r4, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f011 0f02 	tst.w	r1, #2
 800d760:	f103 0204 	add.w	r2, r3, #4
 800d764:	d020      	beq.n	800d7a8 <_scanf_float+0x3d4>
 800d766:	9903      	ldr	r1, [sp, #12]
 800d768:	600a      	str	r2, [r1, #0]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	ed83 0b00 	vstr	d0, [r3]
 800d770:	68e3      	ldr	r3, [r4, #12]
 800d772:	3301      	adds	r3, #1
 800d774:	60e3      	str	r3, [r4, #12]
 800d776:	e66e      	b.n	800d456 <_scanf_float+0x82>
 800d778:	9b04      	ldr	r3, [sp, #16]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0e6      	beq.n	800d74c <_scanf_float+0x378>
 800d77e:	9905      	ldr	r1, [sp, #20]
 800d780:	230a      	movs	r3, #10
 800d782:	462a      	mov	r2, r5
 800d784:	3101      	adds	r1, #1
 800d786:	4640      	mov	r0, r8
 800d788:	f000 ffc2 	bl	800e710 <_strtol_r>
 800d78c:	9b04      	ldr	r3, [sp, #16]
 800d78e:	9e05      	ldr	r6, [sp, #20]
 800d790:	1ac2      	subs	r2, r0, r3
 800d792:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d796:	429e      	cmp	r6, r3
 800d798:	bf28      	it	cs
 800d79a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d79e:	490d      	ldr	r1, [pc, #52]	; (800d7d4 <_scanf_float+0x400>)
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f000 f8f3 	bl	800d98c <siprintf>
 800d7a6:	e7d1      	b.n	800d74c <_scanf_float+0x378>
 800d7a8:	f011 0f04 	tst.w	r1, #4
 800d7ac:	9903      	ldr	r1, [sp, #12]
 800d7ae:	600a      	str	r2, [r1, #0]
 800d7b0:	d1db      	bne.n	800d76a <_scanf_float+0x396>
 800d7b2:	eeb4 0b40 	vcmp.f64	d0, d0
 800d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ba:	681e      	ldr	r6, [r3, #0]
 800d7bc:	d705      	bvc.n	800d7ca <_scanf_float+0x3f6>
 800d7be:	4806      	ldr	r0, [pc, #24]	; (800d7d8 <_scanf_float+0x404>)
 800d7c0:	f000 f8aa 	bl	800d918 <nanf>
 800d7c4:	ed86 0a00 	vstr	s0, [r6]
 800d7c8:	e7d2      	b.n	800d770 <_scanf_float+0x39c>
 800d7ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d7ce:	e7f9      	b.n	800d7c4 <_scanf_float+0x3f0>
 800d7d0:	2500      	movs	r5, #0
 800d7d2:	e640      	b.n	800d456 <_scanf_float+0x82>
 800d7d4:	0801f8d5 	.word	0x0801f8d5
 800d7d8:	0801f88a 	.word	0x0801f88a

0800d7dc <iprintf>:
 800d7dc:	b40f      	push	{r0, r1, r2, r3}
 800d7de:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <iprintf+0x2c>)
 800d7e0:	b513      	push	{r0, r1, r4, lr}
 800d7e2:	681c      	ldr	r4, [r3, #0]
 800d7e4:	b124      	cbz	r4, 800d7f0 <iprintf+0x14>
 800d7e6:	69a3      	ldr	r3, [r4, #24]
 800d7e8:	b913      	cbnz	r3, 800d7f0 <iprintf+0x14>
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f001 ff80 	bl	800f6f0 <__sinit>
 800d7f0:	ab05      	add	r3, sp, #20
 800d7f2:	9a04      	ldr	r2, [sp, #16]
 800d7f4:	68a1      	ldr	r1, [r4, #8]
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7ff f879 	bl	800c8f0 <_vfiprintf_r>
 800d7fe:	b002      	add	sp, #8
 800d800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d804:	b004      	add	sp, #16
 800d806:	4770      	bx	lr
 800d808:	2400a0c8 	.word	0x2400a0c8

0800d80c <_puts_r>:
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	460e      	mov	r6, r1
 800d810:	4605      	mov	r5, r0
 800d812:	b118      	cbz	r0, 800d81c <_puts_r+0x10>
 800d814:	6983      	ldr	r3, [r0, #24]
 800d816:	b90b      	cbnz	r3, 800d81c <_puts_r+0x10>
 800d818:	f001 ff6a 	bl	800f6f0 <__sinit>
 800d81c:	69ab      	ldr	r3, [r5, #24]
 800d81e:	68ac      	ldr	r4, [r5, #8]
 800d820:	b913      	cbnz	r3, 800d828 <_puts_r+0x1c>
 800d822:	4628      	mov	r0, r5
 800d824:	f001 ff64 	bl	800f6f0 <__sinit>
 800d828:	4b2c      	ldr	r3, [pc, #176]	; (800d8dc <_puts_r+0xd0>)
 800d82a:	429c      	cmp	r4, r3
 800d82c:	d120      	bne.n	800d870 <_puts_r+0x64>
 800d82e:	686c      	ldr	r4, [r5, #4]
 800d830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d832:	07db      	lsls	r3, r3, #31
 800d834:	d405      	bmi.n	800d842 <_puts_r+0x36>
 800d836:	89a3      	ldrh	r3, [r4, #12]
 800d838:	0598      	lsls	r0, r3, #22
 800d83a:	d402      	bmi.n	800d842 <_puts_r+0x36>
 800d83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d83e:	f002 fb68 	bl	800ff12 <__retarget_lock_acquire_recursive>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	0719      	lsls	r1, r3, #28
 800d846:	d51d      	bpl.n	800d884 <_puts_r+0x78>
 800d848:	6923      	ldr	r3, [r4, #16]
 800d84a:	b1db      	cbz	r3, 800d884 <_puts_r+0x78>
 800d84c:	3e01      	subs	r6, #1
 800d84e:	68a3      	ldr	r3, [r4, #8]
 800d850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d854:	3b01      	subs	r3, #1
 800d856:	60a3      	str	r3, [r4, #8]
 800d858:	bb39      	cbnz	r1, 800d8aa <_puts_r+0x9e>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da38      	bge.n	800d8d0 <_puts_r+0xc4>
 800d85e:	4622      	mov	r2, r4
 800d860:	210a      	movs	r1, #10
 800d862:	4628      	mov	r0, r5
 800d864:	f000 ff56 	bl	800e714 <__swbuf_r>
 800d868:	3001      	adds	r0, #1
 800d86a:	d011      	beq.n	800d890 <_puts_r+0x84>
 800d86c:	250a      	movs	r5, #10
 800d86e:	e011      	b.n	800d894 <_puts_r+0x88>
 800d870:	4b1b      	ldr	r3, [pc, #108]	; (800d8e0 <_puts_r+0xd4>)
 800d872:	429c      	cmp	r4, r3
 800d874:	d101      	bne.n	800d87a <_puts_r+0x6e>
 800d876:	68ac      	ldr	r4, [r5, #8]
 800d878:	e7da      	b.n	800d830 <_puts_r+0x24>
 800d87a:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <_puts_r+0xd8>)
 800d87c:	429c      	cmp	r4, r3
 800d87e:	bf08      	it	eq
 800d880:	68ec      	ldreq	r4, [r5, #12]
 800d882:	e7d5      	b.n	800d830 <_puts_r+0x24>
 800d884:	4621      	mov	r1, r4
 800d886:	4628      	mov	r0, r5
 800d888:	f000 ff96 	bl	800e7b8 <__swsetup_r>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d0dd      	beq.n	800d84c <_puts_r+0x40>
 800d890:	f04f 35ff 	mov.w	r5, #4294967295
 800d894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d896:	07da      	lsls	r2, r3, #31
 800d898:	d405      	bmi.n	800d8a6 <_puts_r+0x9a>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	059b      	lsls	r3, r3, #22
 800d89e:	d402      	bmi.n	800d8a6 <_puts_r+0x9a>
 800d8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8a2:	f002 fb37 	bl	800ff14 <__retarget_lock_release_recursive>
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	da04      	bge.n	800d8b8 <_puts_r+0xac>
 800d8ae:	69a2      	ldr	r2, [r4, #24]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	dc06      	bgt.n	800d8c2 <_puts_r+0xb6>
 800d8b4:	290a      	cmp	r1, #10
 800d8b6:	d004      	beq.n	800d8c2 <_puts_r+0xb6>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	6022      	str	r2, [r4, #0]
 800d8be:	7019      	strb	r1, [r3, #0]
 800d8c0:	e7c5      	b.n	800d84e <_puts_r+0x42>
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	f000 ff25 	bl	800e714 <__swbuf_r>
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	d1bf      	bne.n	800d84e <_puts_r+0x42>
 800d8ce:	e7df      	b.n	800d890 <_puts_r+0x84>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	250a      	movs	r5, #10
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	6022      	str	r2, [r4, #0]
 800d8d8:	701d      	strb	r5, [r3, #0]
 800d8da:	e7db      	b.n	800d894 <_puts_r+0x88>
 800d8dc:	0801fae8 	.word	0x0801fae8
 800d8e0:	0801fb08 	.word	0x0801fb08
 800d8e4:	0801fac8 	.word	0x0801fac8

0800d8e8 <puts>:
 800d8e8:	4b02      	ldr	r3, [pc, #8]	; (800d8f4 <puts+0xc>)
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	6818      	ldr	r0, [r3, #0]
 800d8ee:	f7ff bf8d 	b.w	800d80c <_puts_r>
 800d8f2:	bf00      	nop
 800d8f4:	2400a0c8 	.word	0x2400a0c8

0800d8f8 <_sbrk_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d06      	ldr	r5, [pc, #24]	; (800d914 <_sbrk_r+0x1c>)
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	602b      	str	r3, [r5, #0]
 800d904:	f7f4 f8e6 	bl	8001ad4 <_sbrk>
 800d908:	1c43      	adds	r3, r0, #1
 800d90a:	d102      	bne.n	800d912 <_sbrk_r+0x1a>
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	b103      	cbz	r3, 800d912 <_sbrk_r+0x1a>
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	bd38      	pop	{r3, r4, r5, pc}
 800d914:	2400ab5c 	.word	0x2400ab5c

0800d918 <nanf>:
 800d918:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d920 <nanf+0x8>
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	7fc00000 	.word	0x7fc00000

0800d924 <sniprintf>:
 800d924:	b40c      	push	{r2, r3}
 800d926:	b530      	push	{r4, r5, lr}
 800d928:	4b17      	ldr	r3, [pc, #92]	; (800d988 <sniprintf+0x64>)
 800d92a:	1e0c      	subs	r4, r1, #0
 800d92c:	681d      	ldr	r5, [r3, #0]
 800d92e:	b09d      	sub	sp, #116	; 0x74
 800d930:	da08      	bge.n	800d944 <sniprintf+0x20>
 800d932:	238b      	movs	r3, #139	; 0x8b
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	f04f 30ff 	mov.w	r0, #4294967295
 800d93a:	b01d      	add	sp, #116	; 0x74
 800d93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d940:	b002      	add	sp, #8
 800d942:	4770      	bx	lr
 800d944:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d948:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d94c:	bf14      	ite	ne
 800d94e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d952:	4623      	moveq	r3, r4
 800d954:	9304      	str	r3, [sp, #16]
 800d956:	9307      	str	r3, [sp, #28]
 800d958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d95c:	9002      	str	r0, [sp, #8]
 800d95e:	9006      	str	r0, [sp, #24]
 800d960:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d964:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d966:	ab21      	add	r3, sp, #132	; 0x84
 800d968:	a902      	add	r1, sp, #8
 800d96a:	4628      	mov	r0, r5
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	f003 f8a1 	bl	8010ab4 <_svfiprintf_r>
 800d972:	1c43      	adds	r3, r0, #1
 800d974:	bfbc      	itt	lt
 800d976:	238b      	movlt	r3, #139	; 0x8b
 800d978:	602b      	strlt	r3, [r5, #0]
 800d97a:	2c00      	cmp	r4, #0
 800d97c:	d0dd      	beq.n	800d93a <sniprintf+0x16>
 800d97e:	9b02      	ldr	r3, [sp, #8]
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]
 800d984:	e7d9      	b.n	800d93a <sniprintf+0x16>
 800d986:	bf00      	nop
 800d988:	2400a0c8 	.word	0x2400a0c8

0800d98c <siprintf>:
 800d98c:	b40e      	push	{r1, r2, r3}
 800d98e:	b500      	push	{lr}
 800d990:	b09c      	sub	sp, #112	; 0x70
 800d992:	ab1d      	add	r3, sp, #116	; 0x74
 800d994:	9002      	str	r0, [sp, #8]
 800d996:	9006      	str	r0, [sp, #24]
 800d998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d99c:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <siprintf+0x38>)
 800d99e:	9107      	str	r1, [sp, #28]
 800d9a0:	9104      	str	r1, [sp, #16]
 800d9a2:	4909      	ldr	r1, [pc, #36]	; (800d9c8 <siprintf+0x3c>)
 800d9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a8:	9105      	str	r1, [sp, #20]
 800d9aa:	6800      	ldr	r0, [r0, #0]
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	a902      	add	r1, sp, #8
 800d9b0:	f003 f880 	bl	8010ab4 <_svfiprintf_r>
 800d9b4:	9b02      	ldr	r3, [sp, #8]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	b01c      	add	sp, #112	; 0x70
 800d9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9c0:	b003      	add	sp, #12
 800d9c2:	4770      	bx	lr
 800d9c4:	2400a0c8 	.word	0x2400a0c8
 800d9c8:	ffff0208 	.word	0xffff0208

0800d9cc <strncmp>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	b16a      	cbz	r2, 800d9ec <strncmp+0x20>
 800d9d0:	3901      	subs	r1, #1
 800d9d2:	1884      	adds	r4, r0, r2
 800d9d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d9d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d103      	bne.n	800d9e8 <strncmp+0x1c>
 800d9e0:	42a0      	cmp	r0, r4
 800d9e2:	d001      	beq.n	800d9e8 <strncmp+0x1c>
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1f5      	bne.n	800d9d4 <strncmp+0x8>
 800d9e8:	1a98      	subs	r0, r3, r2
 800d9ea:	bd10      	pop	{r4, pc}
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	e7fc      	b.n	800d9ea <strncmp+0x1e>

0800d9f0 <strncpy>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	3901      	subs	r1, #1
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	b132      	cbz	r2, 800da06 <strncpy+0x16>
 800d9f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9fc:	f803 4b01 	strb.w	r4, [r3], #1
 800da00:	3a01      	subs	r2, #1
 800da02:	2c00      	cmp	r4, #0
 800da04:	d1f7      	bne.n	800d9f6 <strncpy+0x6>
 800da06:	441a      	add	r2, r3
 800da08:	2100      	movs	r1, #0
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d100      	bne.n	800da10 <strncpy+0x20>
 800da0e:	bd10      	pop	{r4, pc}
 800da10:	f803 1b01 	strb.w	r1, [r3], #1
 800da14:	e7f9      	b.n	800da0a <strncpy+0x1a>

0800da16 <sulp>:
 800da16:	b570      	push	{r4, r5, r6, lr}
 800da18:	4604      	mov	r4, r0
 800da1a:	460d      	mov	r5, r1
 800da1c:	4616      	mov	r6, r2
 800da1e:	ec45 4b10 	vmov	d0, r4, r5
 800da22:	f002 fe67 	bl	80106f4 <__ulp>
 800da26:	b17e      	cbz	r6, 800da48 <sulp+0x32>
 800da28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da30:	2b00      	cmp	r3, #0
 800da32:	dd09      	ble.n	800da48 <sulp+0x32>
 800da34:	051b      	lsls	r3, r3, #20
 800da36:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800da3a:	2000      	movs	r0, #0
 800da3c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800da40:	ec41 0b17 	vmov	d7, r0, r1
 800da44:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da48:	bd70      	pop	{r4, r5, r6, pc}
 800da4a:	0000      	movs	r0, r0
 800da4c:	0000      	movs	r0, r0
	...

0800da50 <_strtod_l>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	ed2d 8b0c 	vpush	{d8-d13}
 800da58:	b09d      	sub	sp, #116	; 0x74
 800da5a:	461f      	mov	r7, r3
 800da5c:	2300      	movs	r3, #0
 800da5e:	9318      	str	r3, [sp, #96]	; 0x60
 800da60:	4ba6      	ldr	r3, [pc, #664]	; (800dcfc <_strtod_l+0x2ac>)
 800da62:	9213      	str	r2, [sp, #76]	; 0x4c
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	9308      	str	r3, [sp, #32]
 800da68:	4604      	mov	r4, r0
 800da6a:	4618      	mov	r0, r3
 800da6c:	468a      	mov	sl, r1
 800da6e:	f7f2 fc41 	bl	80002f4 <strlen>
 800da72:	f04f 0800 	mov.w	r8, #0
 800da76:	4605      	mov	r5, r0
 800da78:	f04f 0900 	mov.w	r9, #0
 800da7c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800da80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da82:	781a      	ldrb	r2, [r3, #0]
 800da84:	2a2b      	cmp	r2, #43	; 0x2b
 800da86:	d04d      	beq.n	800db24 <_strtod_l+0xd4>
 800da88:	d83a      	bhi.n	800db00 <_strtod_l+0xb0>
 800da8a:	2a0d      	cmp	r2, #13
 800da8c:	d833      	bhi.n	800daf6 <_strtod_l+0xa6>
 800da8e:	2a08      	cmp	r2, #8
 800da90:	d833      	bhi.n	800dafa <_strtod_l+0xaa>
 800da92:	2a00      	cmp	r2, #0
 800da94:	d03d      	beq.n	800db12 <_strtod_l+0xc2>
 800da96:	2300      	movs	r3, #0
 800da98:	930b      	str	r3, [sp, #44]	; 0x2c
 800da9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800da9c:	7833      	ldrb	r3, [r6, #0]
 800da9e:	2b30      	cmp	r3, #48	; 0x30
 800daa0:	f040 80b6 	bne.w	800dc10 <_strtod_l+0x1c0>
 800daa4:	7873      	ldrb	r3, [r6, #1]
 800daa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800daaa:	2b58      	cmp	r3, #88	; 0x58
 800daac:	d16d      	bne.n	800db8a <_strtod_l+0x13a>
 800daae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	ab18      	add	r3, sp, #96	; 0x60
 800dab4:	9702      	str	r7, [sp, #8]
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	4a91      	ldr	r2, [pc, #580]	; (800dd00 <_strtod_l+0x2b0>)
 800daba:	ab19      	add	r3, sp, #100	; 0x64
 800dabc:	a917      	add	r1, sp, #92	; 0x5c
 800dabe:	4620      	mov	r0, r4
 800dac0:	f001 ff1a 	bl	800f8f8 <__gethex>
 800dac4:	f010 0507 	ands.w	r5, r0, #7
 800dac8:	4607      	mov	r7, r0
 800daca:	d005      	beq.n	800dad8 <_strtod_l+0x88>
 800dacc:	2d06      	cmp	r5, #6
 800dace:	d12b      	bne.n	800db28 <_strtod_l+0xd8>
 800dad0:	3601      	adds	r6, #1
 800dad2:	2300      	movs	r3, #0
 800dad4:	9617      	str	r6, [sp, #92]	; 0x5c
 800dad6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f040 856e 	bne.w	800e5bc <_strtod_l+0xb6c>
 800dae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae2:	b1e3      	cbz	r3, 800db1e <_strtod_l+0xce>
 800dae4:	ec49 8b17 	vmov	d7, r8, r9
 800dae8:	eeb1 0b47 	vneg.f64	d0, d7
 800daec:	b01d      	add	sp, #116	; 0x74
 800daee:	ecbd 8b0c 	vpop	{d8-d13}
 800daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf6:	2a20      	cmp	r2, #32
 800daf8:	d1cd      	bne.n	800da96 <_strtod_l+0x46>
 800dafa:	3301      	adds	r3, #1
 800dafc:	9317      	str	r3, [sp, #92]	; 0x5c
 800dafe:	e7bf      	b.n	800da80 <_strtod_l+0x30>
 800db00:	2a2d      	cmp	r2, #45	; 0x2d
 800db02:	d1c8      	bne.n	800da96 <_strtod_l+0x46>
 800db04:	2201      	movs	r2, #1
 800db06:	920b      	str	r2, [sp, #44]	; 0x2c
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	9217      	str	r2, [sp, #92]	; 0x5c
 800db0c:	785b      	ldrb	r3, [r3, #1]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1c3      	bne.n	800da9a <_strtod_l+0x4a>
 800db12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db14:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f040 854d 	bne.w	800e5b8 <_strtod_l+0xb68>
 800db1e:	ec49 8b10 	vmov	d0, r8, r9
 800db22:	e7e3      	b.n	800daec <_strtod_l+0x9c>
 800db24:	2200      	movs	r2, #0
 800db26:	e7ee      	b.n	800db06 <_strtod_l+0xb6>
 800db28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800db2a:	b13a      	cbz	r2, 800db3c <_strtod_l+0xec>
 800db2c:	2135      	movs	r1, #53	; 0x35
 800db2e:	a81a      	add	r0, sp, #104	; 0x68
 800db30:	f002 feec 	bl	801090c <__copybits>
 800db34:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db36:	4620      	mov	r0, r4
 800db38:	f002 fab0 	bl	801009c <_Bfree>
 800db3c:	3d01      	subs	r5, #1
 800db3e:	2d05      	cmp	r5, #5
 800db40:	d807      	bhi.n	800db52 <_strtod_l+0x102>
 800db42:	e8df f005 	tbb	[pc, r5]
 800db46:	0b0e      	.short	0x0b0e
 800db48:	030e1d18 	.word	0x030e1d18
 800db4c:	f04f 0900 	mov.w	r9, #0
 800db50:	46c8      	mov	r8, r9
 800db52:	073b      	lsls	r3, r7, #28
 800db54:	d5c0      	bpl.n	800dad8 <_strtod_l+0x88>
 800db56:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800db5a:	e7bd      	b.n	800dad8 <_strtod_l+0x88>
 800db5c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800db60:	e7f7      	b.n	800db52 <_strtod_l+0x102>
 800db62:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800db66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800db74:	e7ed      	b.n	800db52 <_strtod_l+0x102>
 800db76:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800dd04 <_strtod_l+0x2b4>
 800db7a:	f04f 0800 	mov.w	r8, #0
 800db7e:	e7e8      	b.n	800db52 <_strtod_l+0x102>
 800db80:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800db84:	f04f 38ff 	mov.w	r8, #4294967295
 800db88:	e7e3      	b.n	800db52 <_strtod_l+0x102>
 800db8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	9217      	str	r2, [sp, #92]	; 0x5c
 800db90:	785b      	ldrb	r3, [r3, #1]
 800db92:	2b30      	cmp	r3, #48	; 0x30
 800db94:	d0f9      	beq.n	800db8a <_strtod_l+0x13a>
 800db96:	2b00      	cmp	r3, #0
 800db98:	d09e      	beq.n	800dad8 <_strtod_l+0x88>
 800db9a:	2301      	movs	r3, #1
 800db9c:	9306      	str	r3, [sp, #24]
 800db9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dba0:	930c      	str	r3, [sp, #48]	; 0x30
 800dba2:	2300      	movs	r3, #0
 800dba4:	9304      	str	r3, [sp, #16]
 800dba6:	930a      	str	r3, [sp, #40]	; 0x28
 800dba8:	461e      	mov	r6, r3
 800dbaa:	220a      	movs	r2, #10
 800dbac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dbae:	f890 b000 	ldrb.w	fp, [r0]
 800dbb2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800dbb6:	b2d9      	uxtb	r1, r3
 800dbb8:	2909      	cmp	r1, #9
 800dbba:	d92b      	bls.n	800dc14 <_strtod_l+0x1c4>
 800dbbc:	9908      	ldr	r1, [sp, #32]
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	f7ff ff04 	bl	800d9cc <strncmp>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d035      	beq.n	800dc34 <_strtod_l+0x1e4>
 800dbc8:	2000      	movs	r0, #0
 800dbca:	465a      	mov	r2, fp
 800dbcc:	4633      	mov	r3, r6
 800dbce:	4683      	mov	fp, r0
 800dbd0:	4601      	mov	r1, r0
 800dbd2:	2a65      	cmp	r2, #101	; 0x65
 800dbd4:	d001      	beq.n	800dbda <_strtod_l+0x18a>
 800dbd6:	2a45      	cmp	r2, #69	; 0x45
 800dbd8:	d118      	bne.n	800dc0c <_strtod_l+0x1bc>
 800dbda:	b91b      	cbnz	r3, 800dbe4 <_strtod_l+0x194>
 800dbdc:	9b06      	ldr	r3, [sp, #24]
 800dbde:	4303      	orrs	r3, r0
 800dbe0:	d097      	beq.n	800db12 <_strtod_l+0xc2>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800dbe8:	f10a 0201 	add.w	r2, sl, #1
 800dbec:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800dbf2:	2a2b      	cmp	r2, #43	; 0x2b
 800dbf4:	d077      	beq.n	800dce6 <_strtod_l+0x296>
 800dbf6:	2a2d      	cmp	r2, #45	; 0x2d
 800dbf8:	d07d      	beq.n	800dcf6 <_strtod_l+0x2a6>
 800dbfa:	f04f 0e00 	mov.w	lr, #0
 800dbfe:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dc02:	2d09      	cmp	r5, #9
 800dc04:	f240 8084 	bls.w	800dd10 <_strtod_l+0x2c0>
 800dc08:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800dc0c:	2500      	movs	r5, #0
 800dc0e:	e09f      	b.n	800dd50 <_strtod_l+0x300>
 800dc10:	2300      	movs	r3, #0
 800dc12:	e7c3      	b.n	800db9c <_strtod_l+0x14c>
 800dc14:	2e08      	cmp	r6, #8
 800dc16:	bfd5      	itete	le
 800dc18:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800dc1a:	9904      	ldrgt	r1, [sp, #16]
 800dc1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc20:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc24:	f100 0001 	add.w	r0, r0, #1
 800dc28:	bfd4      	ite	le
 800dc2a:	930a      	strle	r3, [sp, #40]	; 0x28
 800dc2c:	9304      	strgt	r3, [sp, #16]
 800dc2e:	3601      	adds	r6, #1
 800dc30:	9017      	str	r0, [sp, #92]	; 0x5c
 800dc32:	e7bb      	b.n	800dbac <_strtod_l+0x15c>
 800dc34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc36:	195a      	adds	r2, r3, r5
 800dc38:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc3a:	5d5a      	ldrb	r2, [r3, r5]
 800dc3c:	b3ae      	cbz	r6, 800dcaa <_strtod_l+0x25a>
 800dc3e:	4683      	mov	fp, r0
 800dc40:	4633      	mov	r3, r6
 800dc42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dc46:	2909      	cmp	r1, #9
 800dc48:	d912      	bls.n	800dc70 <_strtod_l+0x220>
 800dc4a:	2101      	movs	r1, #1
 800dc4c:	e7c1      	b.n	800dbd2 <_strtod_l+0x182>
 800dc4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc54:	785a      	ldrb	r2, [r3, #1]
 800dc56:	3001      	adds	r0, #1
 800dc58:	2a30      	cmp	r2, #48	; 0x30
 800dc5a:	d0f8      	beq.n	800dc4e <_strtod_l+0x1fe>
 800dc5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dc60:	2b08      	cmp	r3, #8
 800dc62:	f200 84b0 	bhi.w	800e5c6 <_strtod_l+0xb76>
 800dc66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc68:	930c      	str	r3, [sp, #48]	; 0x30
 800dc6a:	4683      	mov	fp, r0
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	3a30      	subs	r2, #48	; 0x30
 800dc72:	f100 0101 	add.w	r1, r0, #1
 800dc76:	d012      	beq.n	800dc9e <_strtod_l+0x24e>
 800dc78:	448b      	add	fp, r1
 800dc7a:	eb00 0c03 	add.w	ip, r0, r3
 800dc7e:	4619      	mov	r1, r3
 800dc80:	250a      	movs	r5, #10
 800dc82:	4561      	cmp	r1, ip
 800dc84:	d113      	bne.n	800dcae <_strtod_l+0x25e>
 800dc86:	1819      	adds	r1, r3, r0
 800dc88:	2908      	cmp	r1, #8
 800dc8a:	f103 0301 	add.w	r3, r3, #1
 800dc8e:	4403      	add	r3, r0
 800dc90:	dc1d      	bgt.n	800dcce <_strtod_l+0x27e>
 800dc92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc94:	210a      	movs	r1, #10
 800dc96:	fb01 2200 	mla	r2, r1, r0, r2
 800dc9a:	920a      	str	r2, [sp, #40]	; 0x28
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dca0:	1c50      	adds	r0, r2, #1
 800dca2:	9017      	str	r0, [sp, #92]	; 0x5c
 800dca4:	7852      	ldrb	r2, [r2, #1]
 800dca6:	4608      	mov	r0, r1
 800dca8:	e7cb      	b.n	800dc42 <_strtod_l+0x1f2>
 800dcaa:	4630      	mov	r0, r6
 800dcac:	e7d4      	b.n	800dc58 <_strtod_l+0x208>
 800dcae:	2908      	cmp	r1, #8
 800dcb0:	dc04      	bgt.n	800dcbc <_strtod_l+0x26c>
 800dcb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dcb4:	436f      	muls	r7, r5
 800dcb6:	970a      	str	r7, [sp, #40]	; 0x28
 800dcb8:	3101      	adds	r1, #1
 800dcba:	e7e2      	b.n	800dc82 <_strtod_l+0x232>
 800dcbc:	f101 0e01 	add.w	lr, r1, #1
 800dcc0:	f1be 0f10 	cmp.w	lr, #16
 800dcc4:	bfde      	ittt	le
 800dcc6:	9f04      	ldrle	r7, [sp, #16]
 800dcc8:	436f      	mulle	r7, r5
 800dcca:	9704      	strle	r7, [sp, #16]
 800dccc:	e7f4      	b.n	800dcb8 <_strtod_l+0x268>
 800dcce:	2b10      	cmp	r3, #16
 800dcd0:	bfdf      	itttt	le
 800dcd2:	9804      	ldrle	r0, [sp, #16]
 800dcd4:	210a      	movle	r1, #10
 800dcd6:	fb01 2200 	mlale	r2, r1, r0, r2
 800dcda:	9204      	strle	r2, [sp, #16]
 800dcdc:	e7de      	b.n	800dc9c <_strtod_l+0x24c>
 800dcde:	f04f 0b00 	mov.w	fp, #0
 800dce2:	2101      	movs	r1, #1
 800dce4:	e77a      	b.n	800dbdc <_strtod_l+0x18c>
 800dce6:	f04f 0e00 	mov.w	lr, #0
 800dcea:	f10a 0202 	add.w	r2, sl, #2
 800dcee:	9217      	str	r2, [sp, #92]	; 0x5c
 800dcf0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800dcf4:	e783      	b.n	800dbfe <_strtod_l+0x1ae>
 800dcf6:	f04f 0e01 	mov.w	lr, #1
 800dcfa:	e7f6      	b.n	800dcea <_strtod_l+0x29a>
 800dcfc:	0801fb94 	.word	0x0801fb94
 800dd00:	0801f8dc 	.word	0x0801f8dc
 800dd04:	7ff00000 	.word	0x7ff00000
 800dd08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd0a:	1c55      	adds	r5, r2, #1
 800dd0c:	9517      	str	r5, [sp, #92]	; 0x5c
 800dd0e:	7852      	ldrb	r2, [r2, #1]
 800dd10:	2a30      	cmp	r2, #48	; 0x30
 800dd12:	d0f9      	beq.n	800dd08 <_strtod_l+0x2b8>
 800dd14:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800dd18:	2d08      	cmp	r5, #8
 800dd1a:	f63f af77 	bhi.w	800dc0c <_strtod_l+0x1bc>
 800dd1e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dd22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd24:	9208      	str	r2, [sp, #32]
 800dd26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd28:	1c55      	adds	r5, r2, #1
 800dd2a:	9517      	str	r5, [sp, #92]	; 0x5c
 800dd2c:	7852      	ldrb	r2, [r2, #1]
 800dd2e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800dd32:	2f09      	cmp	r7, #9
 800dd34:	d937      	bls.n	800dda6 <_strtod_l+0x356>
 800dd36:	9f08      	ldr	r7, [sp, #32]
 800dd38:	1bed      	subs	r5, r5, r7
 800dd3a:	2d08      	cmp	r5, #8
 800dd3c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dd40:	dc02      	bgt.n	800dd48 <_strtod_l+0x2f8>
 800dd42:	4565      	cmp	r5, ip
 800dd44:	bfa8      	it	ge
 800dd46:	4665      	movge	r5, ip
 800dd48:	f1be 0f00 	cmp.w	lr, #0
 800dd4c:	d000      	beq.n	800dd50 <_strtod_l+0x300>
 800dd4e:	426d      	negs	r5, r5
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d14f      	bne.n	800ddf4 <_strtod_l+0x3a4>
 800dd54:	9b06      	ldr	r3, [sp, #24]
 800dd56:	4303      	orrs	r3, r0
 800dd58:	f47f aebe 	bne.w	800dad8 <_strtod_l+0x88>
 800dd5c:	2900      	cmp	r1, #0
 800dd5e:	f47f aed8 	bne.w	800db12 <_strtod_l+0xc2>
 800dd62:	2a69      	cmp	r2, #105	; 0x69
 800dd64:	d027      	beq.n	800ddb6 <_strtod_l+0x366>
 800dd66:	dc24      	bgt.n	800ddb2 <_strtod_l+0x362>
 800dd68:	2a49      	cmp	r2, #73	; 0x49
 800dd6a:	d024      	beq.n	800ddb6 <_strtod_l+0x366>
 800dd6c:	2a4e      	cmp	r2, #78	; 0x4e
 800dd6e:	f47f aed0 	bne.w	800db12 <_strtod_l+0xc2>
 800dd72:	499b      	ldr	r1, [pc, #620]	; (800dfe0 <_strtod_l+0x590>)
 800dd74:	a817      	add	r0, sp, #92	; 0x5c
 800dd76:	f002 f817 	bl	800fda8 <__match>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	f43f aec9 	beq.w	800db12 <_strtod_l+0xc2>
 800dd80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	2b28      	cmp	r3, #40	; 0x28
 800dd86:	d12d      	bne.n	800dde4 <_strtod_l+0x394>
 800dd88:	4996      	ldr	r1, [pc, #600]	; (800dfe4 <_strtod_l+0x594>)
 800dd8a:	aa1a      	add	r2, sp, #104	; 0x68
 800dd8c:	a817      	add	r0, sp, #92	; 0x5c
 800dd8e:	f002 f81f 	bl	800fdd0 <__hexnan>
 800dd92:	2805      	cmp	r0, #5
 800dd94:	d126      	bne.n	800dde4 <_strtod_l+0x394>
 800dd96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dd9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dda0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dda4:	e698      	b.n	800dad8 <_strtod_l+0x88>
 800dda6:	250a      	movs	r5, #10
 800dda8:	fb05 250c 	mla	r5, r5, ip, r2
 800ddac:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800ddb0:	e7b9      	b.n	800dd26 <_strtod_l+0x2d6>
 800ddb2:	2a6e      	cmp	r2, #110	; 0x6e
 800ddb4:	e7db      	b.n	800dd6e <_strtod_l+0x31e>
 800ddb6:	498c      	ldr	r1, [pc, #560]	; (800dfe8 <_strtod_l+0x598>)
 800ddb8:	a817      	add	r0, sp, #92	; 0x5c
 800ddba:	f001 fff5 	bl	800fda8 <__match>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f43f aea7 	beq.w	800db12 <_strtod_l+0xc2>
 800ddc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddc6:	4989      	ldr	r1, [pc, #548]	; (800dfec <_strtod_l+0x59c>)
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	a817      	add	r0, sp, #92	; 0x5c
 800ddcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddce:	f001 ffeb 	bl	800fda8 <__match>
 800ddd2:	b910      	cbnz	r0, 800ddda <_strtod_l+0x38a>
 800ddd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddda:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800e000 <_strtod_l+0x5b0>
 800ddde:	f04f 0800 	mov.w	r8, #0
 800dde2:	e679      	b.n	800dad8 <_strtod_l+0x88>
 800dde4:	4882      	ldr	r0, [pc, #520]	; (800dff0 <_strtod_l+0x5a0>)
 800dde6:	f002 ff67 	bl	8010cb8 <nan>
 800ddea:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ddee:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ddf2:	e671      	b.n	800dad8 <_strtod_l+0x88>
 800ddf4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800ddf8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ddfc:	eba5 020b 	sub.w	r2, r5, fp
 800de00:	2e00      	cmp	r6, #0
 800de02:	bf08      	it	eq
 800de04:	461e      	moveq	r6, r3
 800de06:	2b10      	cmp	r3, #16
 800de08:	ed8d 7b08 	vstr	d7, [sp, #32]
 800de0c:	9206      	str	r2, [sp, #24]
 800de0e:	461a      	mov	r2, r3
 800de10:	bfa8      	it	ge
 800de12:	2210      	movge	r2, #16
 800de14:	2b09      	cmp	r3, #9
 800de16:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800de1a:	dd0e      	ble.n	800de3a <_strtod_l+0x3ea>
 800de1c:	4975      	ldr	r1, [pc, #468]	; (800dff4 <_strtod_l+0x5a4>)
 800de1e:	eddd 7a04 	vldr	s15, [sp, #16]
 800de22:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800de26:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800de2a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800de2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800de32:	eea5 7b06 	vfma.f64	d7, d5, d6
 800de36:	ec59 8b17 	vmov	r8, r9, d7
 800de3a:	2b0f      	cmp	r3, #15
 800de3c:	dc37      	bgt.n	800deae <_strtod_l+0x45e>
 800de3e:	9906      	ldr	r1, [sp, #24]
 800de40:	2900      	cmp	r1, #0
 800de42:	f43f ae49 	beq.w	800dad8 <_strtod_l+0x88>
 800de46:	dd23      	ble.n	800de90 <_strtod_l+0x440>
 800de48:	2916      	cmp	r1, #22
 800de4a:	dc0b      	bgt.n	800de64 <_strtod_l+0x414>
 800de4c:	4b69      	ldr	r3, [pc, #420]	; (800dff4 <_strtod_l+0x5a4>)
 800de4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800de52:	ed93 7b00 	vldr	d7, [r3]
 800de56:	ec49 8b16 	vmov	d6, r8, r9
 800de5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de5e:	ec59 8b17 	vmov	r8, r9, d7
 800de62:	e639      	b.n	800dad8 <_strtod_l+0x88>
 800de64:	9806      	ldr	r0, [sp, #24]
 800de66:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800de6a:	4281      	cmp	r1, r0
 800de6c:	db1f      	blt.n	800deae <_strtod_l+0x45e>
 800de6e:	4a61      	ldr	r2, [pc, #388]	; (800dff4 <_strtod_l+0x5a4>)
 800de70:	f1c3 030f 	rsb	r3, r3, #15
 800de74:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800de78:	ed91 7b00 	vldr	d7, [r1]
 800de7c:	ec49 8b16 	vmov	d6, r8, r9
 800de80:	1ac3      	subs	r3, r0, r3
 800de82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800de86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de8a:	ed92 6b00 	vldr	d6, [r2]
 800de8e:	e7e4      	b.n	800de5a <_strtod_l+0x40a>
 800de90:	9906      	ldr	r1, [sp, #24]
 800de92:	3116      	adds	r1, #22
 800de94:	db0b      	blt.n	800deae <_strtod_l+0x45e>
 800de96:	4b57      	ldr	r3, [pc, #348]	; (800dff4 <_strtod_l+0x5a4>)
 800de98:	ebab 0505 	sub.w	r5, fp, r5
 800de9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dea0:	ed95 7b00 	vldr	d7, [r5]
 800dea4:	ec49 8b16 	vmov	d6, r8, r9
 800dea8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800deac:	e7d7      	b.n	800de5e <_strtod_l+0x40e>
 800deae:	9906      	ldr	r1, [sp, #24]
 800deb0:	1a9a      	subs	r2, r3, r2
 800deb2:	440a      	add	r2, r1
 800deb4:	2a00      	cmp	r2, #0
 800deb6:	dd74      	ble.n	800dfa2 <_strtod_l+0x552>
 800deb8:	f012 000f 	ands.w	r0, r2, #15
 800debc:	d00a      	beq.n	800ded4 <_strtod_l+0x484>
 800debe:	494d      	ldr	r1, [pc, #308]	; (800dff4 <_strtod_l+0x5a4>)
 800dec0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dec4:	ed91 7b00 	vldr	d7, [r1]
 800dec8:	ec49 8b16 	vmov	d6, r8, r9
 800decc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ded0:	ec59 8b17 	vmov	r8, r9, d7
 800ded4:	f032 020f 	bics.w	r2, r2, #15
 800ded8:	d04f      	beq.n	800df7a <_strtod_l+0x52a>
 800deda:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800dede:	dd22      	ble.n	800df26 <_strtod_l+0x4d6>
 800dee0:	2500      	movs	r5, #0
 800dee2:	462e      	mov	r6, r5
 800dee4:	950a      	str	r5, [sp, #40]	; 0x28
 800dee6:	462f      	mov	r7, r5
 800dee8:	2322      	movs	r3, #34	; 0x22
 800deea:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800e000 <_strtod_l+0x5b0>
 800deee:	6023      	str	r3, [r4, #0]
 800def0:	f04f 0800 	mov.w	r8, #0
 800def4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def6:	2b00      	cmp	r3, #0
 800def8:	f43f adee 	beq.w	800dad8 <_strtod_l+0x88>
 800defc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800defe:	4620      	mov	r0, r4
 800df00:	f002 f8cc 	bl	801009c <_Bfree>
 800df04:	4639      	mov	r1, r7
 800df06:	4620      	mov	r0, r4
 800df08:	f002 f8c8 	bl	801009c <_Bfree>
 800df0c:	4631      	mov	r1, r6
 800df0e:	4620      	mov	r0, r4
 800df10:	f002 f8c4 	bl	801009c <_Bfree>
 800df14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800df16:	4620      	mov	r0, r4
 800df18:	f002 f8c0 	bl	801009c <_Bfree>
 800df1c:	4629      	mov	r1, r5
 800df1e:	4620      	mov	r0, r4
 800df20:	f002 f8bc 	bl	801009c <_Bfree>
 800df24:	e5d8      	b.n	800dad8 <_strtod_l+0x88>
 800df26:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800df2a:	2000      	movs	r0, #0
 800df2c:	4f32      	ldr	r7, [pc, #200]	; (800dff8 <_strtod_l+0x5a8>)
 800df2e:	1112      	asrs	r2, r2, #4
 800df30:	4601      	mov	r1, r0
 800df32:	2a01      	cmp	r2, #1
 800df34:	dc24      	bgt.n	800df80 <_strtod_l+0x530>
 800df36:	b108      	cbz	r0, 800df3c <_strtod_l+0x4ec>
 800df38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800df3c:	4a2e      	ldr	r2, [pc, #184]	; (800dff8 <_strtod_l+0x5a8>)
 800df3e:	482f      	ldr	r0, [pc, #188]	; (800dffc <_strtod_l+0x5ac>)
 800df40:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800df44:	ed91 7b00 	vldr	d7, [r1]
 800df48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800df4c:	ec49 8b16 	vmov	d6, r8, r9
 800df50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df58:	9905      	ldr	r1, [sp, #20]
 800df5a:	4a29      	ldr	r2, [pc, #164]	; (800e000 <_strtod_l+0x5b0>)
 800df5c:	400a      	ands	r2, r1
 800df5e:	4282      	cmp	r2, r0
 800df60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800df64:	d8bc      	bhi.n	800dee0 <_strtod_l+0x490>
 800df66:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800df6a:	4282      	cmp	r2, r0
 800df6c:	bf86      	itte	hi
 800df6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e004 <_strtod_l+0x5b4>
 800df72:	f04f 38ff 	movhi.w	r8, #4294967295
 800df76:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800df7a:	2200      	movs	r2, #0
 800df7c:	9204      	str	r2, [sp, #16]
 800df7e:	e07f      	b.n	800e080 <_strtod_l+0x630>
 800df80:	f012 0f01 	tst.w	r2, #1
 800df84:	d00a      	beq.n	800df9c <_strtod_l+0x54c>
 800df86:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800df8a:	ed90 7b00 	vldr	d7, [r0]
 800df8e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800df92:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df96:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df9a:	2001      	movs	r0, #1
 800df9c:	3101      	adds	r1, #1
 800df9e:	1052      	asrs	r2, r2, #1
 800dfa0:	e7c7      	b.n	800df32 <_strtod_l+0x4e2>
 800dfa2:	d0ea      	beq.n	800df7a <_strtod_l+0x52a>
 800dfa4:	4252      	negs	r2, r2
 800dfa6:	f012 000f 	ands.w	r0, r2, #15
 800dfaa:	d00a      	beq.n	800dfc2 <_strtod_l+0x572>
 800dfac:	4911      	ldr	r1, [pc, #68]	; (800dff4 <_strtod_l+0x5a4>)
 800dfae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dfb2:	ed91 7b00 	vldr	d7, [r1]
 800dfb6:	ec49 8b16 	vmov	d6, r8, r9
 800dfba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dfbe:	ec59 8b17 	vmov	r8, r9, d7
 800dfc2:	1112      	asrs	r2, r2, #4
 800dfc4:	d0d9      	beq.n	800df7a <_strtod_l+0x52a>
 800dfc6:	2a1f      	cmp	r2, #31
 800dfc8:	dd1e      	ble.n	800e008 <_strtod_l+0x5b8>
 800dfca:	2500      	movs	r5, #0
 800dfcc:	462e      	mov	r6, r5
 800dfce:	950a      	str	r5, [sp, #40]	; 0x28
 800dfd0:	462f      	mov	r7, r5
 800dfd2:	2322      	movs	r3, #34	; 0x22
 800dfd4:	f04f 0800 	mov.w	r8, #0
 800dfd8:	f04f 0900 	mov.w	r9, #0
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	e789      	b.n	800def4 <_strtod_l+0x4a4>
 800dfe0:	0801f8ae 	.word	0x0801f8ae
 800dfe4:	0801f8f0 	.word	0x0801f8f0
 800dfe8:	0801f8a6 	.word	0x0801f8a6
 800dfec:	0801fa34 	.word	0x0801fa34
 800dff0:	0801f88a 	.word	0x0801f88a
 800dff4:	0801fc30 	.word	0x0801fc30
 800dff8:	0801fc08 	.word	0x0801fc08
 800dffc:	7ca00000 	.word	0x7ca00000
 800e000:	7ff00000 	.word	0x7ff00000
 800e004:	7fefffff 	.word	0x7fefffff
 800e008:	f012 0110 	ands.w	r1, r2, #16
 800e00c:	bf18      	it	ne
 800e00e:	216a      	movne	r1, #106	; 0x6a
 800e010:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800e014:	9104      	str	r1, [sp, #16]
 800e016:	49c0      	ldr	r1, [pc, #768]	; (800e318 <_strtod_l+0x8c8>)
 800e018:	2000      	movs	r0, #0
 800e01a:	07d7      	lsls	r7, r2, #31
 800e01c:	d508      	bpl.n	800e030 <_strtod_l+0x5e0>
 800e01e:	ed9d 6b08 	vldr	d6, [sp, #32]
 800e022:	ed91 7b00 	vldr	d7, [r1]
 800e026:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e02a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e02e:	2001      	movs	r0, #1
 800e030:	1052      	asrs	r2, r2, #1
 800e032:	f101 0108 	add.w	r1, r1, #8
 800e036:	d1f0      	bne.n	800e01a <_strtod_l+0x5ca>
 800e038:	b108      	cbz	r0, 800e03e <_strtod_l+0x5ee>
 800e03a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800e03e:	9a04      	ldr	r2, [sp, #16]
 800e040:	b1ba      	cbz	r2, 800e072 <_strtod_l+0x622>
 800e042:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e046:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800e04a:	2a00      	cmp	r2, #0
 800e04c:	4649      	mov	r1, r9
 800e04e:	dd10      	ble.n	800e072 <_strtod_l+0x622>
 800e050:	2a1f      	cmp	r2, #31
 800e052:	f340 8132 	ble.w	800e2ba <_strtod_l+0x86a>
 800e056:	2a34      	cmp	r2, #52	; 0x34
 800e058:	bfde      	ittt	le
 800e05a:	3a20      	suble	r2, #32
 800e05c:	f04f 30ff 	movle.w	r0, #4294967295
 800e060:	fa00 f202 	lslle.w	r2, r0, r2
 800e064:	f04f 0800 	mov.w	r8, #0
 800e068:	bfcc      	ite	gt
 800e06a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e06e:	ea02 0901 	andle.w	r9, r2, r1
 800e072:	ec49 8b17 	vmov	d7, r8, r9
 800e076:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07e:	d0a4      	beq.n	800dfca <_strtod_l+0x57a>
 800e080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e082:	9200      	str	r2, [sp, #0]
 800e084:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e086:	4632      	mov	r2, r6
 800e088:	4620      	mov	r0, r4
 800e08a:	f002 f873 	bl	8010174 <__s2b>
 800e08e:	900a      	str	r0, [sp, #40]	; 0x28
 800e090:	2800      	cmp	r0, #0
 800e092:	f43f af25 	beq.w	800dee0 <_strtod_l+0x490>
 800e096:	9b06      	ldr	r3, [sp, #24]
 800e098:	ebab 0505 	sub.w	r5, fp, r5
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	bfb4      	ite	lt
 800e0a0:	462b      	movlt	r3, r5
 800e0a2:	2300      	movge	r3, #0
 800e0a4:	930c      	str	r3, [sp, #48]	; 0x30
 800e0a6:	9b06      	ldr	r3, [sp, #24]
 800e0a8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800e300 <_strtod_l+0x8b0>
 800e0ac:	ed9f ab96 	vldr	d10, [pc, #600]	; 800e308 <_strtod_l+0x8b8>
 800e0b0:	ed9f bb97 	vldr	d11, [pc, #604]	; 800e310 <_strtod_l+0x8c0>
 800e0b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e0b8:	2500      	movs	r5, #0
 800e0ba:	9312      	str	r3, [sp, #72]	; 0x48
 800e0bc:	462e      	mov	r6, r5
 800e0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	6859      	ldr	r1, [r3, #4]
 800e0c4:	f001 ffaa 	bl	801001c <_Balloc>
 800e0c8:	4607      	mov	r7, r0
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	f43f af0c 	beq.w	800dee8 <_strtod_l+0x498>
 800e0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0d2:	691a      	ldr	r2, [r3, #16]
 800e0d4:	3202      	adds	r2, #2
 800e0d6:	f103 010c 	add.w	r1, r3, #12
 800e0da:	0092      	lsls	r2, r2, #2
 800e0dc:	300c      	adds	r0, #12
 800e0de:	f7fe fb03 	bl	800c6e8 <memcpy>
 800e0e2:	ec49 8b10 	vmov	d0, r8, r9
 800e0e6:	aa1a      	add	r2, sp, #104	; 0x68
 800e0e8:	a919      	add	r1, sp, #100	; 0x64
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800e0f0:	f002 fb7c 	bl	80107ec <__d2b>
 800e0f4:	9018      	str	r0, [sp, #96]	; 0x60
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	f43f aef6 	beq.w	800dee8 <_strtod_l+0x498>
 800e0fc:	2101      	movs	r1, #1
 800e0fe:	4620      	mov	r0, r4
 800e100:	f002 f8d2 	bl	80102a8 <__i2b>
 800e104:	4606      	mov	r6, r0
 800e106:	2800      	cmp	r0, #0
 800e108:	f43f aeee 	beq.w	800dee8 <_strtod_l+0x498>
 800e10c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e10e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e110:	2b00      	cmp	r3, #0
 800e112:	bfab      	itete	ge
 800e114:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e116:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e118:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800e11c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800e120:	bfac      	ite	ge
 800e122:	eb03 0b02 	addge.w	fp, r3, r2
 800e126:	eba2 0a03 	sublt.w	sl, r2, r3
 800e12a:	9a04      	ldr	r2, [sp, #16]
 800e12c:	1a9b      	subs	r3, r3, r2
 800e12e:	440b      	add	r3, r1
 800e130:	4a7a      	ldr	r2, [pc, #488]	; (800e31c <_strtod_l+0x8cc>)
 800e132:	3b01      	subs	r3, #1
 800e134:	4293      	cmp	r3, r2
 800e136:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e13a:	f280 80d1 	bge.w	800e2e0 <_strtod_l+0x890>
 800e13e:	1ad2      	subs	r2, r2, r3
 800e140:	2a1f      	cmp	r2, #31
 800e142:	eba1 0102 	sub.w	r1, r1, r2
 800e146:	f04f 0001 	mov.w	r0, #1
 800e14a:	f300 80bd 	bgt.w	800e2c8 <_strtod_l+0x878>
 800e14e:	fa00 f302 	lsl.w	r3, r0, r2
 800e152:	930e      	str	r3, [sp, #56]	; 0x38
 800e154:	2300      	movs	r3, #0
 800e156:	930d      	str	r3, [sp, #52]	; 0x34
 800e158:	eb0b 0301 	add.w	r3, fp, r1
 800e15c:	9a04      	ldr	r2, [sp, #16]
 800e15e:	459b      	cmp	fp, r3
 800e160:	448a      	add	sl, r1
 800e162:	4492      	add	sl, r2
 800e164:	465a      	mov	r2, fp
 800e166:	bfa8      	it	ge
 800e168:	461a      	movge	r2, r3
 800e16a:	4552      	cmp	r2, sl
 800e16c:	bfa8      	it	ge
 800e16e:	4652      	movge	r2, sl
 800e170:	2a00      	cmp	r2, #0
 800e172:	bfc2      	ittt	gt
 800e174:	1a9b      	subgt	r3, r3, r2
 800e176:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e17a:	ebab 0b02 	subgt.w	fp, fp, r2
 800e17e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e180:	2a00      	cmp	r2, #0
 800e182:	dd18      	ble.n	800e1b6 <_strtod_l+0x766>
 800e184:	4631      	mov	r1, r6
 800e186:	4620      	mov	r0, r4
 800e188:	9315      	str	r3, [sp, #84]	; 0x54
 800e18a:	f002 f949 	bl	8010420 <__pow5mult>
 800e18e:	4606      	mov	r6, r0
 800e190:	2800      	cmp	r0, #0
 800e192:	f43f aea9 	beq.w	800dee8 <_strtod_l+0x498>
 800e196:	4601      	mov	r1, r0
 800e198:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e19a:	4620      	mov	r0, r4
 800e19c:	f002 f89a 	bl	80102d4 <__multiply>
 800e1a0:	9014      	str	r0, [sp, #80]	; 0x50
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	f43f aea0 	beq.w	800dee8 <_strtod_l+0x498>
 800e1a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f001 ff76 	bl	801009c <_Bfree>
 800e1b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1b4:	9218      	str	r2, [sp, #96]	; 0x60
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f300 8097 	bgt.w	800e2ea <_strtod_l+0x89a>
 800e1bc:	9b06      	ldr	r3, [sp, #24]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	dd08      	ble.n	800e1d4 <_strtod_l+0x784>
 800e1c2:	4639      	mov	r1, r7
 800e1c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f002 f92a 	bl	8010420 <__pow5mult>
 800e1cc:	4607      	mov	r7, r0
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f43f ae8a 	beq.w	800dee8 <_strtod_l+0x498>
 800e1d4:	f1ba 0f00 	cmp.w	sl, #0
 800e1d8:	dd08      	ble.n	800e1ec <_strtod_l+0x79c>
 800e1da:	4639      	mov	r1, r7
 800e1dc:	4652      	mov	r2, sl
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f002 f978 	bl	80104d4 <__lshift>
 800e1e4:	4607      	mov	r7, r0
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f43f ae7e 	beq.w	800dee8 <_strtod_l+0x498>
 800e1ec:	f1bb 0f00 	cmp.w	fp, #0
 800e1f0:	dd08      	ble.n	800e204 <_strtod_l+0x7b4>
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	465a      	mov	r2, fp
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f002 f96c 	bl	80104d4 <__lshift>
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f43f ae72 	beq.w	800dee8 <_strtod_l+0x498>
 800e204:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e206:	463a      	mov	r2, r7
 800e208:	4620      	mov	r0, r4
 800e20a:	f002 f9eb 	bl	80105e4 <__mdiff>
 800e20e:	4605      	mov	r5, r0
 800e210:	2800      	cmp	r0, #0
 800e212:	f43f ae69 	beq.w	800dee8 <_strtod_l+0x498>
 800e216:	2300      	movs	r3, #0
 800e218:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e21c:	60c3      	str	r3, [r0, #12]
 800e21e:	4631      	mov	r1, r6
 800e220:	f002 f9c4 	bl	80105ac <__mcmp>
 800e224:	2800      	cmp	r0, #0
 800e226:	da7f      	bge.n	800e328 <_strtod_l+0x8d8>
 800e228:	ea5a 0308 	orrs.w	r3, sl, r8
 800e22c:	f040 80a5 	bne.w	800e37a <_strtod_l+0x92a>
 800e230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e234:	2b00      	cmp	r3, #0
 800e236:	f040 80a0 	bne.w	800e37a <_strtod_l+0x92a>
 800e23a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e23e:	0d1b      	lsrs	r3, r3, #20
 800e240:	051b      	lsls	r3, r3, #20
 800e242:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e246:	f240 8098 	bls.w	800e37a <_strtod_l+0x92a>
 800e24a:	696b      	ldr	r3, [r5, #20]
 800e24c:	b91b      	cbnz	r3, 800e256 <_strtod_l+0x806>
 800e24e:	692b      	ldr	r3, [r5, #16]
 800e250:	2b01      	cmp	r3, #1
 800e252:	f340 8092 	ble.w	800e37a <_strtod_l+0x92a>
 800e256:	4629      	mov	r1, r5
 800e258:	2201      	movs	r2, #1
 800e25a:	4620      	mov	r0, r4
 800e25c:	f002 f93a 	bl	80104d4 <__lshift>
 800e260:	4631      	mov	r1, r6
 800e262:	4605      	mov	r5, r0
 800e264:	f002 f9a2 	bl	80105ac <__mcmp>
 800e268:	2800      	cmp	r0, #0
 800e26a:	f340 8086 	ble.w	800e37a <_strtod_l+0x92a>
 800e26e:	9904      	ldr	r1, [sp, #16]
 800e270:	4a2b      	ldr	r2, [pc, #172]	; (800e320 <_strtod_l+0x8d0>)
 800e272:	464b      	mov	r3, r9
 800e274:	2900      	cmp	r1, #0
 800e276:	f000 80a1 	beq.w	800e3bc <_strtod_l+0x96c>
 800e27a:	ea02 0109 	and.w	r1, r2, r9
 800e27e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e282:	f300 809b 	bgt.w	800e3bc <_strtod_l+0x96c>
 800e286:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e28a:	f77f aea2 	ble.w	800dfd2 <_strtod_l+0x582>
 800e28e:	4a25      	ldr	r2, [pc, #148]	; (800e324 <_strtod_l+0x8d4>)
 800e290:	2300      	movs	r3, #0
 800e292:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e296:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800e29a:	ec49 8b17 	vmov	d7, r8, r9
 800e29e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	bf08      	it	eq
 800e2ae:	2322      	moveq	r3, #34	; 0x22
 800e2b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e2b4:	bf08      	it	eq
 800e2b6:	6023      	streq	r3, [r4, #0]
 800e2b8:	e620      	b.n	800defc <_strtod_l+0x4ac>
 800e2ba:	f04f 31ff 	mov.w	r1, #4294967295
 800e2be:	fa01 f202 	lsl.w	r2, r1, r2
 800e2c2:	ea02 0808 	and.w	r8, r2, r8
 800e2c6:	e6d4      	b.n	800e072 <_strtod_l+0x622>
 800e2c8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e2cc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e2d0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e2d4:	33e2      	adds	r3, #226	; 0xe2
 800e2d6:	fa00 f303 	lsl.w	r3, r0, r3
 800e2da:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800e2de:	e73b      	b.n	800e158 <_strtod_l+0x708>
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800e2e8:	e736      	b.n	800e158 <_strtod_l+0x708>
 800e2ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f002 f8f0 	bl	80104d4 <__lshift>
 800e2f4:	9018      	str	r0, [sp, #96]	; 0x60
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f47f af60 	bne.w	800e1bc <_strtod_l+0x76c>
 800e2fc:	e5f4      	b.n	800dee8 <_strtod_l+0x498>
 800e2fe:	bf00      	nop
 800e300:	94a03595 	.word	0x94a03595
 800e304:	3fcfffff 	.word	0x3fcfffff
 800e308:	94a03595 	.word	0x94a03595
 800e30c:	3fdfffff 	.word	0x3fdfffff
 800e310:	35afe535 	.word	0x35afe535
 800e314:	3fe00000 	.word	0x3fe00000
 800e318:	0801f908 	.word	0x0801f908
 800e31c:	fffffc02 	.word	0xfffffc02
 800e320:	7ff00000 	.word	0x7ff00000
 800e324:	39500000 	.word	0x39500000
 800e328:	46cb      	mov	fp, r9
 800e32a:	d165      	bne.n	800e3f8 <_strtod_l+0x9a8>
 800e32c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e330:	f1ba 0f00 	cmp.w	sl, #0
 800e334:	d02a      	beq.n	800e38c <_strtod_l+0x93c>
 800e336:	4aaa      	ldr	r2, [pc, #680]	; (800e5e0 <_strtod_l+0xb90>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d12b      	bne.n	800e394 <_strtod_l+0x944>
 800e33c:	9b04      	ldr	r3, [sp, #16]
 800e33e:	4641      	mov	r1, r8
 800e340:	b1fb      	cbz	r3, 800e382 <_strtod_l+0x932>
 800e342:	4aa8      	ldr	r2, [pc, #672]	; (800e5e4 <_strtod_l+0xb94>)
 800e344:	ea09 0202 	and.w	r2, r9, r2
 800e348:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	d81a      	bhi.n	800e388 <_strtod_l+0x938>
 800e352:	0d12      	lsrs	r2, r2, #20
 800e354:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e358:	fa00 f303 	lsl.w	r3, r0, r3
 800e35c:	4299      	cmp	r1, r3
 800e35e:	d119      	bne.n	800e394 <_strtod_l+0x944>
 800e360:	4ba1      	ldr	r3, [pc, #644]	; (800e5e8 <_strtod_l+0xb98>)
 800e362:	459b      	cmp	fp, r3
 800e364:	d102      	bne.n	800e36c <_strtod_l+0x91c>
 800e366:	3101      	adds	r1, #1
 800e368:	f43f adbe 	beq.w	800dee8 <_strtod_l+0x498>
 800e36c:	4b9d      	ldr	r3, [pc, #628]	; (800e5e4 <_strtod_l+0xb94>)
 800e36e:	ea0b 0303 	and.w	r3, fp, r3
 800e372:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e376:	f04f 0800 	mov.w	r8, #0
 800e37a:	9b04      	ldr	r3, [sp, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d186      	bne.n	800e28e <_strtod_l+0x83e>
 800e380:	e5bc      	b.n	800defc <_strtod_l+0x4ac>
 800e382:	f04f 33ff 	mov.w	r3, #4294967295
 800e386:	e7e9      	b.n	800e35c <_strtod_l+0x90c>
 800e388:	4603      	mov	r3, r0
 800e38a:	e7e7      	b.n	800e35c <_strtod_l+0x90c>
 800e38c:	ea53 0308 	orrs.w	r3, r3, r8
 800e390:	f43f af6d 	beq.w	800e26e <_strtod_l+0x81e>
 800e394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e396:	b1db      	cbz	r3, 800e3d0 <_strtod_l+0x980>
 800e398:	ea13 0f0b 	tst.w	r3, fp
 800e39c:	d0ed      	beq.n	800e37a <_strtod_l+0x92a>
 800e39e:	9a04      	ldr	r2, [sp, #16]
 800e3a0:	4640      	mov	r0, r8
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	f1ba 0f00 	cmp.w	sl, #0
 800e3a8:	d016      	beq.n	800e3d8 <_strtod_l+0x988>
 800e3aa:	f7ff fb34 	bl	800da16 <sulp>
 800e3ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e3b2:	ee37 7b00 	vadd.f64	d7, d7, d0
 800e3b6:	ec59 8b17 	vmov	r8, r9, d7
 800e3ba:	e7de      	b.n	800e37a <_strtod_l+0x92a>
 800e3bc:	4013      	ands	r3, r2
 800e3be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e3c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e3c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e3ca:	f04f 38ff 	mov.w	r8, #4294967295
 800e3ce:	e7d4      	b.n	800e37a <_strtod_l+0x92a>
 800e3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3d2:	ea13 0f08 	tst.w	r3, r8
 800e3d6:	e7e1      	b.n	800e39c <_strtod_l+0x94c>
 800e3d8:	f7ff fb1d 	bl	800da16 <sulp>
 800e3dc:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e3e0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e3e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800e3f4:	d1c1      	bne.n	800e37a <_strtod_l+0x92a>
 800e3f6:	e5ec      	b.n	800dfd2 <_strtod_l+0x582>
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f002 fa52 	bl	80108a4 <__ratio>
 800e400:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e404:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	d867      	bhi.n	800e4de <_strtod_l+0xa8e>
 800e40e:	f1ba 0f00 	cmp.w	sl, #0
 800e412:	d044      	beq.n	800e49e <_strtod_l+0xa4e>
 800e414:	4b75      	ldr	r3, [pc, #468]	; (800e5ec <_strtod_l+0xb9c>)
 800e416:	2200      	movs	r2, #0
 800e418:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800e41c:	4971      	ldr	r1, [pc, #452]	; (800e5e4 <_strtod_l+0xb94>)
 800e41e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800e5f8 <_strtod_l+0xba8>
 800e422:	ea0b 0001 	and.w	r0, fp, r1
 800e426:	4560      	cmp	r0, ip
 800e428:	900d      	str	r0, [sp, #52]	; 0x34
 800e42a:	f040 808b 	bne.w	800e544 <_strtod_l+0xaf4>
 800e42e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e432:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e436:	ec49 8b10 	vmov	d0, r8, r9
 800e43a:	ec43 2b1c 	vmov	d12, r2, r3
 800e43e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e442:	f002 f957 	bl	80106f4 <__ulp>
 800e446:	ec49 8b1d 	vmov	d13, r8, r9
 800e44a:	eeac db00 	vfma.f64	d13, d12, d0
 800e44e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800e452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e454:	4963      	ldr	r1, [pc, #396]	; (800e5e4 <_strtod_l+0xb94>)
 800e456:	4a66      	ldr	r2, [pc, #408]	; (800e5f0 <_strtod_l+0xba0>)
 800e458:	4019      	ands	r1, r3
 800e45a:	4291      	cmp	r1, r2
 800e45c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e460:	d947      	bls.n	800e4f2 <_strtod_l+0xaa2>
 800e462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e464:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e468:	4293      	cmp	r3, r2
 800e46a:	d103      	bne.n	800e474 <_strtod_l+0xa24>
 800e46c:	9b08      	ldr	r3, [sp, #32]
 800e46e:	3301      	adds	r3, #1
 800e470:	f43f ad3a 	beq.w	800dee8 <_strtod_l+0x498>
 800e474:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800e5e8 <_strtod_l+0xb98>
 800e478:	f04f 38ff 	mov.w	r8, #4294967295
 800e47c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e47e:	4620      	mov	r0, r4
 800e480:	f001 fe0c 	bl	801009c <_Bfree>
 800e484:	4639      	mov	r1, r7
 800e486:	4620      	mov	r0, r4
 800e488:	f001 fe08 	bl	801009c <_Bfree>
 800e48c:	4631      	mov	r1, r6
 800e48e:	4620      	mov	r0, r4
 800e490:	f001 fe04 	bl	801009c <_Bfree>
 800e494:	4629      	mov	r1, r5
 800e496:	4620      	mov	r0, r4
 800e498:	f001 fe00 	bl	801009c <_Bfree>
 800e49c:	e60f      	b.n	800e0be <_strtod_l+0x66e>
 800e49e:	f1b8 0f00 	cmp.w	r8, #0
 800e4a2:	d112      	bne.n	800e4ca <_strtod_l+0xa7a>
 800e4a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4a8:	b9b3      	cbnz	r3, 800e4d8 <_strtod_l+0xa88>
 800e4aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e4ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e4ba:	d401      	bmi.n	800e4c0 <_strtod_l+0xa70>
 800e4bc:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e4c0:	eeb1 7b48 	vneg.f64	d7, d8
 800e4c4:	ec53 2b17 	vmov	r2, r3, d7
 800e4c8:	e7a8      	b.n	800e41c <_strtod_l+0x9cc>
 800e4ca:	f1b8 0f01 	cmp.w	r8, #1
 800e4ce:	d103      	bne.n	800e4d8 <_strtod_l+0xa88>
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	f43f ad7d 	beq.w	800dfd2 <_strtod_l+0x582>
 800e4d8:	4b46      	ldr	r3, [pc, #280]	; (800e5f4 <_strtod_l+0xba4>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	e79c      	b.n	800e418 <_strtod_l+0x9c8>
 800e4de:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e4e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e4e6:	f1ba 0f00 	cmp.w	sl, #0
 800e4ea:	d0e9      	beq.n	800e4c0 <_strtod_l+0xa70>
 800e4ec:	ec53 2b18 	vmov	r2, r3, d8
 800e4f0:	e794      	b.n	800e41c <_strtod_l+0x9cc>
 800e4f2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1bf      	bne.n	800e47c <_strtod_l+0xa2c>
 800e4fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e502:	0d1b      	lsrs	r3, r3, #20
 800e504:	051b      	lsls	r3, r3, #20
 800e506:	429a      	cmp	r2, r3
 800e508:	d1b8      	bne.n	800e47c <_strtod_l+0xa2c>
 800e50a:	ec51 0b18 	vmov	r0, r1, d8
 800e50e:	f7f2 f923 	bl	8000758 <__aeabi_d2lz>
 800e512:	f7f2 f8db 	bl	80006cc <__aeabi_l2d>
 800e516:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e51a:	ec41 0b17 	vmov	d7, r0, r1
 800e51e:	ea43 0308 	orr.w	r3, r3, r8
 800e522:	ea53 030a 	orrs.w	r3, r3, sl
 800e526:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e52a:	d03e      	beq.n	800e5aa <_strtod_l+0xb5a>
 800e52c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	f53f ace2 	bmi.w	800defc <_strtod_l+0x4ac>
 800e538:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e540:	dd9c      	ble.n	800e47c <_strtod_l+0xa2c>
 800e542:	e4db      	b.n	800defc <_strtod_l+0x4ac>
 800e544:	9904      	ldr	r1, [sp, #16]
 800e546:	b301      	cbz	r1, 800e58a <_strtod_l+0xb3a>
 800e548:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e54a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e54e:	d81c      	bhi.n	800e58a <_strtod_l+0xb3a>
 800e550:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e5d8 <_strtod_l+0xb88>
 800e554:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55c:	d811      	bhi.n	800e582 <_strtod_l+0xb32>
 800e55e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e562:	ee18 3a10 	vmov	r3, s16
 800e566:	2b01      	cmp	r3, #1
 800e568:	bf38      	it	cc
 800e56a:	2301      	movcc	r3, #1
 800e56c:	ee08 3a10 	vmov	s16, r3
 800e570:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e574:	f1ba 0f00 	cmp.w	sl, #0
 800e578:	d114      	bne.n	800e5a4 <_strtod_l+0xb54>
 800e57a:	eeb1 7b48 	vneg.f64	d7, d8
 800e57e:	ec53 2b17 	vmov	r2, r3, d7
 800e582:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e584:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800e588:	1a0b      	subs	r3, r1, r0
 800e58a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e58e:	ec43 2b1c 	vmov	d12, r2, r3
 800e592:	f002 f8af 	bl	80106f4 <__ulp>
 800e596:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e59a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800e59e:	ec59 8b17 	vmov	r8, r9, d7
 800e5a2:	e7a8      	b.n	800e4f6 <_strtod_l+0xaa6>
 800e5a4:	ec53 2b18 	vmov	r2, r3, d8
 800e5a8:	e7eb      	b.n	800e582 <_strtod_l+0xb32>
 800e5aa:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b2:	f57f af63 	bpl.w	800e47c <_strtod_l+0xa2c>
 800e5b6:	e4a1      	b.n	800defc <_strtod_l+0x4ac>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5c0:	6013      	str	r3, [r2, #0]
 800e5c2:	f7ff ba8d 	b.w	800dae0 <_strtod_l+0x90>
 800e5c6:	2a65      	cmp	r2, #101	; 0x65
 800e5c8:	f43f ab89 	beq.w	800dcde <_strtod_l+0x28e>
 800e5cc:	2a45      	cmp	r2, #69	; 0x45
 800e5ce:	f43f ab86 	beq.w	800dcde <_strtod_l+0x28e>
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	f7ff bbbe 	b.w	800dd54 <_strtod_l+0x304>
 800e5d8:	ffc00000 	.word	0xffc00000
 800e5dc:	41dfffff 	.word	0x41dfffff
 800e5e0:	000fffff 	.word	0x000fffff
 800e5e4:	7ff00000 	.word	0x7ff00000
 800e5e8:	7fefffff 	.word	0x7fefffff
 800e5ec:	3ff00000 	.word	0x3ff00000
 800e5f0:	7c9fffff 	.word	0x7c9fffff
 800e5f4:	bff00000 	.word	0xbff00000
 800e5f8:	7fe00000 	.word	0x7fe00000

0800e5fc <_strtod_r>:
 800e5fc:	4b01      	ldr	r3, [pc, #4]	; (800e604 <_strtod_r+0x8>)
 800e5fe:	f7ff ba27 	b.w	800da50 <_strtod_l>
 800e602:	bf00      	nop
 800e604:	2400a130 	.word	0x2400a130

0800e608 <_strtol_l.isra.0>:
 800e608:	2b01      	cmp	r3, #1
 800e60a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e60e:	d001      	beq.n	800e614 <_strtol_l.isra.0+0xc>
 800e610:	2b24      	cmp	r3, #36	; 0x24
 800e612:	d906      	bls.n	800e622 <_strtol_l.isra.0+0x1a>
 800e614:	f7fe f81c 	bl	800c650 <__errno>
 800e618:	2316      	movs	r3, #22
 800e61a:	6003      	str	r3, [r0, #0]
 800e61c:	2000      	movs	r0, #0
 800e61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e622:	4f3a      	ldr	r7, [pc, #232]	; (800e70c <_strtol_l.isra.0+0x104>)
 800e624:	468e      	mov	lr, r1
 800e626:	4676      	mov	r6, lr
 800e628:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e62c:	5de5      	ldrb	r5, [r4, r7]
 800e62e:	f015 0508 	ands.w	r5, r5, #8
 800e632:	d1f8      	bne.n	800e626 <_strtol_l.isra.0+0x1e>
 800e634:	2c2d      	cmp	r4, #45	; 0x2d
 800e636:	d134      	bne.n	800e6a2 <_strtol_l.isra.0+0x9a>
 800e638:	f89e 4000 	ldrb.w	r4, [lr]
 800e63c:	f04f 0801 	mov.w	r8, #1
 800e640:	f106 0e02 	add.w	lr, r6, #2
 800e644:	2b00      	cmp	r3, #0
 800e646:	d05c      	beq.n	800e702 <_strtol_l.isra.0+0xfa>
 800e648:	2b10      	cmp	r3, #16
 800e64a:	d10c      	bne.n	800e666 <_strtol_l.isra.0+0x5e>
 800e64c:	2c30      	cmp	r4, #48	; 0x30
 800e64e:	d10a      	bne.n	800e666 <_strtol_l.isra.0+0x5e>
 800e650:	f89e 4000 	ldrb.w	r4, [lr]
 800e654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e658:	2c58      	cmp	r4, #88	; 0x58
 800e65a:	d14d      	bne.n	800e6f8 <_strtol_l.isra.0+0xf0>
 800e65c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e660:	2310      	movs	r3, #16
 800e662:	f10e 0e02 	add.w	lr, lr, #2
 800e666:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e66a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e66e:	2600      	movs	r6, #0
 800e670:	fbbc f9f3 	udiv	r9, ip, r3
 800e674:	4635      	mov	r5, r6
 800e676:	fb03 ca19 	mls	sl, r3, r9, ip
 800e67a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e67e:	2f09      	cmp	r7, #9
 800e680:	d818      	bhi.n	800e6b4 <_strtol_l.isra.0+0xac>
 800e682:	463c      	mov	r4, r7
 800e684:	42a3      	cmp	r3, r4
 800e686:	dd24      	ble.n	800e6d2 <_strtol_l.isra.0+0xca>
 800e688:	2e00      	cmp	r6, #0
 800e68a:	db1f      	blt.n	800e6cc <_strtol_l.isra.0+0xc4>
 800e68c:	45a9      	cmp	r9, r5
 800e68e:	d31d      	bcc.n	800e6cc <_strtol_l.isra.0+0xc4>
 800e690:	d101      	bne.n	800e696 <_strtol_l.isra.0+0x8e>
 800e692:	45a2      	cmp	sl, r4
 800e694:	db1a      	blt.n	800e6cc <_strtol_l.isra.0+0xc4>
 800e696:	fb05 4503 	mla	r5, r5, r3, r4
 800e69a:	2601      	movs	r6, #1
 800e69c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e6a0:	e7eb      	b.n	800e67a <_strtol_l.isra.0+0x72>
 800e6a2:	2c2b      	cmp	r4, #43	; 0x2b
 800e6a4:	bf08      	it	eq
 800e6a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e6aa:	46a8      	mov	r8, r5
 800e6ac:	bf08      	it	eq
 800e6ae:	f106 0e02 	addeq.w	lr, r6, #2
 800e6b2:	e7c7      	b.n	800e644 <_strtol_l.isra.0+0x3c>
 800e6b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e6b8:	2f19      	cmp	r7, #25
 800e6ba:	d801      	bhi.n	800e6c0 <_strtol_l.isra.0+0xb8>
 800e6bc:	3c37      	subs	r4, #55	; 0x37
 800e6be:	e7e1      	b.n	800e684 <_strtol_l.isra.0+0x7c>
 800e6c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e6c4:	2f19      	cmp	r7, #25
 800e6c6:	d804      	bhi.n	800e6d2 <_strtol_l.isra.0+0xca>
 800e6c8:	3c57      	subs	r4, #87	; 0x57
 800e6ca:	e7db      	b.n	800e684 <_strtol_l.isra.0+0x7c>
 800e6cc:	f04f 36ff 	mov.w	r6, #4294967295
 800e6d0:	e7e4      	b.n	800e69c <_strtol_l.isra.0+0x94>
 800e6d2:	2e00      	cmp	r6, #0
 800e6d4:	da05      	bge.n	800e6e2 <_strtol_l.isra.0+0xda>
 800e6d6:	2322      	movs	r3, #34	; 0x22
 800e6d8:	6003      	str	r3, [r0, #0]
 800e6da:	4665      	mov	r5, ip
 800e6dc:	b942      	cbnz	r2, 800e6f0 <_strtol_l.isra.0+0xe8>
 800e6de:	4628      	mov	r0, r5
 800e6e0:	e79d      	b.n	800e61e <_strtol_l.isra.0+0x16>
 800e6e2:	f1b8 0f00 	cmp.w	r8, #0
 800e6e6:	d000      	beq.n	800e6ea <_strtol_l.isra.0+0xe2>
 800e6e8:	426d      	negs	r5, r5
 800e6ea:	2a00      	cmp	r2, #0
 800e6ec:	d0f7      	beq.n	800e6de <_strtol_l.isra.0+0xd6>
 800e6ee:	b10e      	cbz	r6, 800e6f4 <_strtol_l.isra.0+0xec>
 800e6f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e6f4:	6011      	str	r1, [r2, #0]
 800e6f6:	e7f2      	b.n	800e6de <_strtol_l.isra.0+0xd6>
 800e6f8:	2430      	movs	r4, #48	; 0x30
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1b3      	bne.n	800e666 <_strtol_l.isra.0+0x5e>
 800e6fe:	2308      	movs	r3, #8
 800e700:	e7b1      	b.n	800e666 <_strtol_l.isra.0+0x5e>
 800e702:	2c30      	cmp	r4, #48	; 0x30
 800e704:	d0a4      	beq.n	800e650 <_strtol_l.isra.0+0x48>
 800e706:	230a      	movs	r3, #10
 800e708:	e7ad      	b.n	800e666 <_strtol_l.isra.0+0x5e>
 800e70a:	bf00      	nop
 800e70c:	0801f931 	.word	0x0801f931

0800e710 <_strtol_r>:
 800e710:	f7ff bf7a 	b.w	800e608 <_strtol_l.isra.0>

0800e714 <__swbuf_r>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	460e      	mov	r6, r1
 800e718:	4614      	mov	r4, r2
 800e71a:	4605      	mov	r5, r0
 800e71c:	b118      	cbz	r0, 800e726 <__swbuf_r+0x12>
 800e71e:	6983      	ldr	r3, [r0, #24]
 800e720:	b90b      	cbnz	r3, 800e726 <__swbuf_r+0x12>
 800e722:	f000 ffe5 	bl	800f6f0 <__sinit>
 800e726:	4b21      	ldr	r3, [pc, #132]	; (800e7ac <__swbuf_r+0x98>)
 800e728:	429c      	cmp	r4, r3
 800e72a:	d12b      	bne.n	800e784 <__swbuf_r+0x70>
 800e72c:	686c      	ldr	r4, [r5, #4]
 800e72e:	69a3      	ldr	r3, [r4, #24]
 800e730:	60a3      	str	r3, [r4, #8]
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	071a      	lsls	r2, r3, #28
 800e736:	d52f      	bpl.n	800e798 <__swbuf_r+0x84>
 800e738:	6923      	ldr	r3, [r4, #16]
 800e73a:	b36b      	cbz	r3, 800e798 <__swbuf_r+0x84>
 800e73c:	6923      	ldr	r3, [r4, #16]
 800e73e:	6820      	ldr	r0, [r4, #0]
 800e740:	1ac0      	subs	r0, r0, r3
 800e742:	6963      	ldr	r3, [r4, #20]
 800e744:	b2f6      	uxtb	r6, r6
 800e746:	4283      	cmp	r3, r0
 800e748:	4637      	mov	r7, r6
 800e74a:	dc04      	bgt.n	800e756 <__swbuf_r+0x42>
 800e74c:	4621      	mov	r1, r4
 800e74e:	4628      	mov	r0, r5
 800e750:	f000 ff3a 	bl	800f5c8 <_fflush_r>
 800e754:	bb30      	cbnz	r0, 800e7a4 <__swbuf_r+0x90>
 800e756:	68a3      	ldr	r3, [r4, #8]
 800e758:	3b01      	subs	r3, #1
 800e75a:	60a3      	str	r3, [r4, #8]
 800e75c:	6823      	ldr	r3, [r4, #0]
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	6022      	str	r2, [r4, #0]
 800e762:	701e      	strb	r6, [r3, #0]
 800e764:	6963      	ldr	r3, [r4, #20]
 800e766:	3001      	adds	r0, #1
 800e768:	4283      	cmp	r3, r0
 800e76a:	d004      	beq.n	800e776 <__swbuf_r+0x62>
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	07db      	lsls	r3, r3, #31
 800e770:	d506      	bpl.n	800e780 <__swbuf_r+0x6c>
 800e772:	2e0a      	cmp	r6, #10
 800e774:	d104      	bne.n	800e780 <__swbuf_r+0x6c>
 800e776:	4621      	mov	r1, r4
 800e778:	4628      	mov	r0, r5
 800e77a:	f000 ff25 	bl	800f5c8 <_fflush_r>
 800e77e:	b988      	cbnz	r0, 800e7a4 <__swbuf_r+0x90>
 800e780:	4638      	mov	r0, r7
 800e782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e784:	4b0a      	ldr	r3, [pc, #40]	; (800e7b0 <__swbuf_r+0x9c>)
 800e786:	429c      	cmp	r4, r3
 800e788:	d101      	bne.n	800e78e <__swbuf_r+0x7a>
 800e78a:	68ac      	ldr	r4, [r5, #8]
 800e78c:	e7cf      	b.n	800e72e <__swbuf_r+0x1a>
 800e78e:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <__swbuf_r+0xa0>)
 800e790:	429c      	cmp	r4, r3
 800e792:	bf08      	it	eq
 800e794:	68ec      	ldreq	r4, [r5, #12]
 800e796:	e7ca      	b.n	800e72e <__swbuf_r+0x1a>
 800e798:	4621      	mov	r1, r4
 800e79a:	4628      	mov	r0, r5
 800e79c:	f000 f80c 	bl	800e7b8 <__swsetup_r>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d0cb      	beq.n	800e73c <__swbuf_r+0x28>
 800e7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800e7a8:	e7ea      	b.n	800e780 <__swbuf_r+0x6c>
 800e7aa:	bf00      	nop
 800e7ac:	0801fae8 	.word	0x0801fae8
 800e7b0:	0801fb08 	.word	0x0801fb08
 800e7b4:	0801fac8 	.word	0x0801fac8

0800e7b8 <__swsetup_r>:
 800e7b8:	4b32      	ldr	r3, [pc, #200]	; (800e884 <__swsetup_r+0xcc>)
 800e7ba:	b570      	push	{r4, r5, r6, lr}
 800e7bc:	681d      	ldr	r5, [r3, #0]
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	b125      	cbz	r5, 800e7ce <__swsetup_r+0x16>
 800e7c4:	69ab      	ldr	r3, [r5, #24]
 800e7c6:	b913      	cbnz	r3, 800e7ce <__swsetup_r+0x16>
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	f000 ff91 	bl	800f6f0 <__sinit>
 800e7ce:	4b2e      	ldr	r3, [pc, #184]	; (800e888 <__swsetup_r+0xd0>)
 800e7d0:	429c      	cmp	r4, r3
 800e7d2:	d10f      	bne.n	800e7f4 <__swsetup_r+0x3c>
 800e7d4:	686c      	ldr	r4, [r5, #4]
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7dc:	0719      	lsls	r1, r3, #28
 800e7de:	d42c      	bmi.n	800e83a <__swsetup_r+0x82>
 800e7e0:	06dd      	lsls	r5, r3, #27
 800e7e2:	d411      	bmi.n	800e808 <__swsetup_r+0x50>
 800e7e4:	2309      	movs	r3, #9
 800e7e6:	6033      	str	r3, [r6, #0]
 800e7e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7ec:	81a3      	strh	r3, [r4, #12]
 800e7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f2:	e03e      	b.n	800e872 <__swsetup_r+0xba>
 800e7f4:	4b25      	ldr	r3, [pc, #148]	; (800e88c <__swsetup_r+0xd4>)
 800e7f6:	429c      	cmp	r4, r3
 800e7f8:	d101      	bne.n	800e7fe <__swsetup_r+0x46>
 800e7fa:	68ac      	ldr	r4, [r5, #8]
 800e7fc:	e7eb      	b.n	800e7d6 <__swsetup_r+0x1e>
 800e7fe:	4b24      	ldr	r3, [pc, #144]	; (800e890 <__swsetup_r+0xd8>)
 800e800:	429c      	cmp	r4, r3
 800e802:	bf08      	it	eq
 800e804:	68ec      	ldreq	r4, [r5, #12]
 800e806:	e7e6      	b.n	800e7d6 <__swsetup_r+0x1e>
 800e808:	0758      	lsls	r0, r3, #29
 800e80a:	d512      	bpl.n	800e832 <__swsetup_r+0x7a>
 800e80c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e80e:	b141      	cbz	r1, 800e822 <__swsetup_r+0x6a>
 800e810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e814:	4299      	cmp	r1, r3
 800e816:	d002      	beq.n	800e81e <__swsetup_r+0x66>
 800e818:	4630      	mov	r0, r6
 800e81a:	f7fd ff95 	bl	800c748 <_free_r>
 800e81e:	2300      	movs	r3, #0
 800e820:	6363      	str	r3, [r4, #52]	; 0x34
 800e822:	89a3      	ldrh	r3, [r4, #12]
 800e824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e828:	81a3      	strh	r3, [r4, #12]
 800e82a:	2300      	movs	r3, #0
 800e82c:	6063      	str	r3, [r4, #4]
 800e82e:	6923      	ldr	r3, [r4, #16]
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	89a3      	ldrh	r3, [r4, #12]
 800e834:	f043 0308 	orr.w	r3, r3, #8
 800e838:	81a3      	strh	r3, [r4, #12]
 800e83a:	6923      	ldr	r3, [r4, #16]
 800e83c:	b94b      	cbnz	r3, 800e852 <__swsetup_r+0x9a>
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e848:	d003      	beq.n	800e852 <__swsetup_r+0x9a>
 800e84a:	4621      	mov	r1, r4
 800e84c:	4630      	mov	r0, r6
 800e84e:	f001 fb87 	bl	800ff60 <__smakebuf_r>
 800e852:	89a0      	ldrh	r0, [r4, #12]
 800e854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e858:	f010 0301 	ands.w	r3, r0, #1
 800e85c:	d00a      	beq.n	800e874 <__swsetup_r+0xbc>
 800e85e:	2300      	movs	r3, #0
 800e860:	60a3      	str	r3, [r4, #8]
 800e862:	6963      	ldr	r3, [r4, #20]
 800e864:	425b      	negs	r3, r3
 800e866:	61a3      	str	r3, [r4, #24]
 800e868:	6923      	ldr	r3, [r4, #16]
 800e86a:	b943      	cbnz	r3, 800e87e <__swsetup_r+0xc6>
 800e86c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e870:	d1ba      	bne.n	800e7e8 <__swsetup_r+0x30>
 800e872:	bd70      	pop	{r4, r5, r6, pc}
 800e874:	0781      	lsls	r1, r0, #30
 800e876:	bf58      	it	pl
 800e878:	6963      	ldrpl	r3, [r4, #20]
 800e87a:	60a3      	str	r3, [r4, #8]
 800e87c:	e7f4      	b.n	800e868 <__swsetup_r+0xb0>
 800e87e:	2000      	movs	r0, #0
 800e880:	e7f7      	b.n	800e872 <__swsetup_r+0xba>
 800e882:	bf00      	nop
 800e884:	2400a0c8 	.word	0x2400a0c8
 800e888:	0801fae8 	.word	0x0801fae8
 800e88c:	0801fb08 	.word	0x0801fb08
 800e890:	0801fac8 	.word	0x0801fac8

0800e894 <abort>:
 800e894:	b508      	push	{r3, lr}
 800e896:	2006      	movs	r0, #6
 800e898:	f002 fa3e 	bl	8010d18 <raise>
 800e89c:	2001      	movs	r0, #1
 800e89e:	f7f3 f8a1 	bl	80019e4 <_exit>

0800e8a2 <quorem>:
 800e8a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a6:	6903      	ldr	r3, [r0, #16]
 800e8a8:	690c      	ldr	r4, [r1, #16]
 800e8aa:	42a3      	cmp	r3, r4
 800e8ac:	4607      	mov	r7, r0
 800e8ae:	f2c0 8081 	blt.w	800e9b4 <quorem+0x112>
 800e8b2:	3c01      	subs	r4, #1
 800e8b4:	f101 0814 	add.w	r8, r1, #20
 800e8b8:	f100 0514 	add.w	r5, r0, #20
 800e8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e8c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e8d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e8d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8da:	d331      	bcc.n	800e940 <quorem+0x9e>
 800e8dc:	f04f 0e00 	mov.w	lr, #0
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	46ac      	mov	ip, r5
 800e8e4:	46f2      	mov	sl, lr
 800e8e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800e8ea:	b293      	uxth	r3, r2
 800e8ec:	fb06 e303 	mla	r3, r6, r3, lr
 800e8f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	ebaa 0303 	sub.w	r3, sl, r3
 800e8fa:	0c12      	lsrs	r2, r2, #16
 800e8fc:	f8dc a000 	ldr.w	sl, [ip]
 800e900:	fb06 e202 	mla	r2, r6, r2, lr
 800e904:	fa13 f38a 	uxtah	r3, r3, sl
 800e908:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e90c:	fa1f fa82 	uxth.w	sl, r2
 800e910:	f8dc 2000 	ldr.w	r2, [ip]
 800e914:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e922:	4581      	cmp	r9, r0
 800e924:	f84c 3b04 	str.w	r3, [ip], #4
 800e928:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e92c:	d2db      	bcs.n	800e8e6 <quorem+0x44>
 800e92e:	f855 300b 	ldr.w	r3, [r5, fp]
 800e932:	b92b      	cbnz	r3, 800e940 <quorem+0x9e>
 800e934:	9b01      	ldr	r3, [sp, #4]
 800e936:	3b04      	subs	r3, #4
 800e938:	429d      	cmp	r5, r3
 800e93a:	461a      	mov	r2, r3
 800e93c:	d32e      	bcc.n	800e99c <quorem+0xfa>
 800e93e:	613c      	str	r4, [r7, #16]
 800e940:	4638      	mov	r0, r7
 800e942:	f001 fe33 	bl	80105ac <__mcmp>
 800e946:	2800      	cmp	r0, #0
 800e948:	db24      	blt.n	800e994 <quorem+0xf2>
 800e94a:	3601      	adds	r6, #1
 800e94c:	4628      	mov	r0, r5
 800e94e:	f04f 0c00 	mov.w	ip, #0
 800e952:	f858 2b04 	ldr.w	r2, [r8], #4
 800e956:	f8d0 e000 	ldr.w	lr, [r0]
 800e95a:	b293      	uxth	r3, r2
 800e95c:	ebac 0303 	sub.w	r3, ip, r3
 800e960:	0c12      	lsrs	r2, r2, #16
 800e962:	fa13 f38e 	uxtah	r3, r3, lr
 800e966:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e96a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e96e:	b29b      	uxth	r3, r3
 800e970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e974:	45c1      	cmp	r9, r8
 800e976:	f840 3b04 	str.w	r3, [r0], #4
 800e97a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e97e:	d2e8      	bcs.n	800e952 <quorem+0xb0>
 800e980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e988:	b922      	cbnz	r2, 800e994 <quorem+0xf2>
 800e98a:	3b04      	subs	r3, #4
 800e98c:	429d      	cmp	r5, r3
 800e98e:	461a      	mov	r2, r3
 800e990:	d30a      	bcc.n	800e9a8 <quorem+0x106>
 800e992:	613c      	str	r4, [r7, #16]
 800e994:	4630      	mov	r0, r6
 800e996:	b003      	add	sp, #12
 800e998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	3b04      	subs	r3, #4
 800e9a0:	2a00      	cmp	r2, #0
 800e9a2:	d1cc      	bne.n	800e93e <quorem+0x9c>
 800e9a4:	3c01      	subs	r4, #1
 800e9a6:	e7c7      	b.n	800e938 <quorem+0x96>
 800e9a8:	6812      	ldr	r2, [r2, #0]
 800e9aa:	3b04      	subs	r3, #4
 800e9ac:	2a00      	cmp	r2, #0
 800e9ae:	d1f0      	bne.n	800e992 <quorem+0xf0>
 800e9b0:	3c01      	subs	r4, #1
 800e9b2:	e7eb      	b.n	800e98c <quorem+0xea>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e7ee      	b.n	800e996 <quorem+0xf4>

0800e9b8 <_dtoa_r>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	ec59 8b10 	vmov	r8, r9, d0
 800e9c0:	b095      	sub	sp, #84	; 0x54
 800e9c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e9c4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e9c6:	9107      	str	r1, [sp, #28]
 800e9c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800e9d0:	9310      	str	r3, [sp, #64]	; 0x40
 800e9d2:	b975      	cbnz	r5, 800e9f2 <_dtoa_r+0x3a>
 800e9d4:	2010      	movs	r0, #16
 800e9d6:	f7fd fe77 	bl	800c6c8 <malloc>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	6270      	str	r0, [r6, #36]	; 0x24
 800e9de:	b920      	cbnz	r0, 800e9ea <_dtoa_r+0x32>
 800e9e0:	4bab      	ldr	r3, [pc, #684]	; (800ec90 <_dtoa_r+0x2d8>)
 800e9e2:	21ea      	movs	r1, #234	; 0xea
 800e9e4:	48ab      	ldr	r0, [pc, #684]	; (800ec94 <_dtoa_r+0x2dc>)
 800e9e6:	f7fd fe15 	bl	800c614 <__assert_func>
 800e9ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9ee:	6005      	str	r5, [r0, #0]
 800e9f0:	60c5      	str	r5, [r0, #12]
 800e9f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e9f4:	6819      	ldr	r1, [r3, #0]
 800e9f6:	b151      	cbz	r1, 800ea0e <_dtoa_r+0x56>
 800e9f8:	685a      	ldr	r2, [r3, #4]
 800e9fa:	604a      	str	r2, [r1, #4]
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	4093      	lsls	r3, r2
 800ea00:	608b      	str	r3, [r1, #8]
 800ea02:	4630      	mov	r0, r6
 800ea04:	f001 fb4a 	bl	801009c <_Bfree>
 800ea08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	601a      	str	r2, [r3, #0]
 800ea0e:	f1b9 0300 	subs.w	r3, r9, #0
 800ea12:	bfbb      	ittet	lt
 800ea14:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea18:	9303      	strlt	r3, [sp, #12]
 800ea1a:	2300      	movge	r3, #0
 800ea1c:	2201      	movlt	r2, #1
 800ea1e:	bfac      	ite	ge
 800ea20:	6023      	strge	r3, [r4, #0]
 800ea22:	6022      	strlt	r2, [r4, #0]
 800ea24:	4b9c      	ldr	r3, [pc, #624]	; (800ec98 <_dtoa_r+0x2e0>)
 800ea26:	9c03      	ldr	r4, [sp, #12]
 800ea28:	43a3      	bics	r3, r4
 800ea2a:	d11a      	bne.n	800ea62 <_dtoa_r+0xaa>
 800ea2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ea2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea32:	6013      	str	r3, [r2, #0]
 800ea34:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ea38:	ea53 0308 	orrs.w	r3, r3, r8
 800ea3c:	f000 8512 	beq.w	800f464 <_dtoa_r+0xaac>
 800ea40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea42:	b953      	cbnz	r3, 800ea5a <_dtoa_r+0xa2>
 800ea44:	4b95      	ldr	r3, [pc, #596]	; (800ec9c <_dtoa_r+0x2e4>)
 800ea46:	e01f      	b.n	800ea88 <_dtoa_r+0xd0>
 800ea48:	4b95      	ldr	r3, [pc, #596]	; (800eca0 <_dtoa_r+0x2e8>)
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	3308      	adds	r3, #8
 800ea4e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ea50:	6013      	str	r3, [r2, #0]
 800ea52:	9800      	ldr	r0, [sp, #0]
 800ea54:	b015      	add	sp, #84	; 0x54
 800ea56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5a:	4b90      	ldr	r3, [pc, #576]	; (800ec9c <_dtoa_r+0x2e4>)
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	3303      	adds	r3, #3
 800ea60:	e7f5      	b.n	800ea4e <_dtoa_r+0x96>
 800ea62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ea72:	d10b      	bne.n	800ea8c <_dtoa_r+0xd4>
 800ea74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ea76:	2301      	movs	r3, #1
 800ea78:	6013      	str	r3, [r2, #0]
 800ea7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 84ee 	beq.w	800f45e <_dtoa_r+0xaa6>
 800ea82:	4888      	ldr	r0, [pc, #544]	; (800eca4 <_dtoa_r+0x2ec>)
 800ea84:	6018      	str	r0, [r3, #0]
 800ea86:	1e43      	subs	r3, r0, #1
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	e7e2      	b.n	800ea52 <_dtoa_r+0x9a>
 800ea8c:	a913      	add	r1, sp, #76	; 0x4c
 800ea8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ea92:	aa12      	add	r2, sp, #72	; 0x48
 800ea94:	4630      	mov	r0, r6
 800ea96:	f001 fea9 	bl	80107ec <__d2b>
 800ea9a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800eaa2:	2900      	cmp	r1, #0
 800eaa4:	d047      	beq.n	800eb36 <_dtoa_r+0x17e>
 800eaa6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800eaa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eaac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eab0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800eab4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eab8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eabc:	2400      	movs	r4, #0
 800eabe:	ec43 2b16 	vmov	d6, r2, r3
 800eac2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800eac6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ec78 <_dtoa_r+0x2c0>
 800eaca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eace:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800ec80 <_dtoa_r+0x2c8>
 800ead2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ead6:	eeb0 7b46 	vmov.f64	d7, d6
 800eada:	ee06 1a90 	vmov	s13, r1
 800eade:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800eae2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ec88 <_dtoa_r+0x2d0>
 800eae6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eaea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800eaee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800eaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf6:	ee16 ba90 	vmov	fp, s13
 800eafa:	9411      	str	r4, [sp, #68]	; 0x44
 800eafc:	d508      	bpl.n	800eb10 <_dtoa_r+0x158>
 800eafe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800eb02:	eeb4 6b47 	vcmp.f64	d6, d7
 800eb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb0a:	bf18      	it	ne
 800eb0c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800eb10:	f1bb 0f16 	cmp.w	fp, #22
 800eb14:	d832      	bhi.n	800eb7c <_dtoa_r+0x1c4>
 800eb16:	4b64      	ldr	r3, [pc, #400]	; (800eca8 <_dtoa_r+0x2f0>)
 800eb18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb1c:	ed93 7b00 	vldr	d7, [r3]
 800eb20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800eb24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2c:	d501      	bpl.n	800eb32 <_dtoa_r+0x17a>
 800eb2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb32:	2300      	movs	r3, #0
 800eb34:	e023      	b.n	800eb7e <_dtoa_r+0x1c6>
 800eb36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800eb38:	4401      	add	r1, r0
 800eb3a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800eb3e:	2b20      	cmp	r3, #32
 800eb40:	bfc3      	ittte	gt
 800eb42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb46:	fa04 f303 	lslgt.w	r3, r4, r3
 800eb4a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800eb4e:	f1c3 0320 	rsble	r3, r3, #32
 800eb52:	bfc6      	itte	gt
 800eb54:	fa28 f804 	lsrgt.w	r8, r8, r4
 800eb58:	ea43 0308 	orrgt.w	r3, r3, r8
 800eb5c:	fa08 f303 	lslle.w	r3, r8, r3
 800eb60:	ee07 3a90 	vmov	s15, r3
 800eb64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eb68:	3901      	subs	r1, #1
 800eb6a:	ed8d 7b00 	vstr	d7, [sp]
 800eb6e:	9c01      	ldr	r4, [sp, #4]
 800eb70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb74:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800eb78:	2401      	movs	r4, #1
 800eb7a:	e7a0      	b.n	800eabe <_dtoa_r+0x106>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb80:	1a43      	subs	r3, r0, r1
 800eb82:	1e5a      	subs	r2, r3, #1
 800eb84:	bf45      	ittet	mi
 800eb86:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb8a:	9305      	strmi	r3, [sp, #20]
 800eb8c:	2300      	movpl	r3, #0
 800eb8e:	2300      	movmi	r3, #0
 800eb90:	9206      	str	r2, [sp, #24]
 800eb92:	bf54      	ite	pl
 800eb94:	9305      	strpl	r3, [sp, #20]
 800eb96:	9306      	strmi	r3, [sp, #24]
 800eb98:	f1bb 0f00 	cmp.w	fp, #0
 800eb9c:	db18      	blt.n	800ebd0 <_dtoa_r+0x218>
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800eba4:	445b      	add	r3, fp
 800eba6:	9306      	str	r3, [sp, #24]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	9a07      	ldr	r2, [sp, #28]
 800ebac:	2a09      	cmp	r2, #9
 800ebae:	d849      	bhi.n	800ec44 <_dtoa_r+0x28c>
 800ebb0:	2a05      	cmp	r2, #5
 800ebb2:	bfc4      	itt	gt
 800ebb4:	3a04      	subgt	r2, #4
 800ebb6:	9207      	strgt	r2, [sp, #28]
 800ebb8:	9a07      	ldr	r2, [sp, #28]
 800ebba:	f1a2 0202 	sub.w	r2, r2, #2
 800ebbe:	bfcc      	ite	gt
 800ebc0:	2400      	movgt	r4, #0
 800ebc2:	2401      	movle	r4, #1
 800ebc4:	2a03      	cmp	r2, #3
 800ebc6:	d848      	bhi.n	800ec5a <_dtoa_r+0x2a2>
 800ebc8:	e8df f002 	tbb	[pc, r2]
 800ebcc:	3a2c2e0b 	.word	0x3a2c2e0b
 800ebd0:	9b05      	ldr	r3, [sp, #20]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	eba3 030b 	sub.w	r3, r3, fp
 800ebd8:	9305      	str	r3, [sp, #20]
 800ebda:	920e      	str	r2, [sp, #56]	; 0x38
 800ebdc:	f1cb 0300 	rsb	r3, fp, #0
 800ebe0:	e7e3      	b.n	800ebaa <_dtoa_r+0x1f2>
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	9208      	str	r2, [sp, #32]
 800ebe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebe8:	2a00      	cmp	r2, #0
 800ebea:	dc39      	bgt.n	800ec60 <_dtoa_r+0x2a8>
 800ebec:	f04f 0a01 	mov.w	sl, #1
 800ebf0:	46d1      	mov	r9, sl
 800ebf2:	4652      	mov	r2, sl
 800ebf4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ebf8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	6079      	str	r1, [r7, #4]
 800ebfe:	2004      	movs	r0, #4
 800ec00:	f100 0c14 	add.w	ip, r0, #20
 800ec04:	4594      	cmp	ip, r2
 800ec06:	6879      	ldr	r1, [r7, #4]
 800ec08:	d92f      	bls.n	800ec6a <_dtoa_r+0x2b2>
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	930c      	str	r3, [sp, #48]	; 0x30
 800ec0e:	f001 fa05 	bl	801001c <_Balloc>
 800ec12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec14:	9000      	str	r0, [sp, #0]
 800ec16:	4602      	mov	r2, r0
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d149      	bne.n	800ecb0 <_dtoa_r+0x2f8>
 800ec1c:	4b23      	ldr	r3, [pc, #140]	; (800ecac <_dtoa_r+0x2f4>)
 800ec1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ec22:	e6df      	b.n	800e9e4 <_dtoa_r+0x2c>
 800ec24:	2201      	movs	r2, #1
 800ec26:	e7dd      	b.n	800ebe4 <_dtoa_r+0x22c>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	9208      	str	r2, [sp, #32]
 800ec2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec2e:	eb0b 0a02 	add.w	sl, fp, r2
 800ec32:	f10a 0901 	add.w	r9, sl, #1
 800ec36:	464a      	mov	r2, r9
 800ec38:	2a01      	cmp	r2, #1
 800ec3a:	bfb8      	it	lt
 800ec3c:	2201      	movlt	r2, #1
 800ec3e:	e7db      	b.n	800ebf8 <_dtoa_r+0x240>
 800ec40:	2201      	movs	r2, #1
 800ec42:	e7f2      	b.n	800ec2a <_dtoa_r+0x272>
 800ec44:	2401      	movs	r4, #1
 800ec46:	2200      	movs	r2, #0
 800ec48:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ec4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ec50:	2100      	movs	r1, #0
 800ec52:	46d1      	mov	r9, sl
 800ec54:	2212      	movs	r2, #18
 800ec56:	9109      	str	r1, [sp, #36]	; 0x24
 800ec58:	e7ce      	b.n	800ebf8 <_dtoa_r+0x240>
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	9208      	str	r2, [sp, #32]
 800ec5e:	e7f5      	b.n	800ec4c <_dtoa_r+0x294>
 800ec60:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ec64:	46d1      	mov	r9, sl
 800ec66:	4652      	mov	r2, sl
 800ec68:	e7c6      	b.n	800ebf8 <_dtoa_r+0x240>
 800ec6a:	3101      	adds	r1, #1
 800ec6c:	6079      	str	r1, [r7, #4]
 800ec6e:	0040      	lsls	r0, r0, #1
 800ec70:	e7c6      	b.n	800ec00 <_dtoa_r+0x248>
 800ec72:	bf00      	nop
 800ec74:	f3af 8000 	nop.w
 800ec78:	636f4361 	.word	0x636f4361
 800ec7c:	3fd287a7 	.word	0x3fd287a7
 800ec80:	8b60c8b3 	.word	0x8b60c8b3
 800ec84:	3fc68a28 	.word	0x3fc68a28
 800ec88:	509f79fb 	.word	0x509f79fb
 800ec8c:	3fd34413 	.word	0x3fd34413
 800ec90:	0801fa3e 	.word	0x0801fa3e
 800ec94:	0801fa55 	.word	0x0801fa55
 800ec98:	7ff00000 	.word	0x7ff00000
 800ec9c:	0801fa3a 	.word	0x0801fa3a
 800eca0:	0801fa31 	.word	0x0801fa31
 800eca4:	0801f8b2 	.word	0x0801f8b2
 800eca8:	0801fc30 	.word	0x0801fc30
 800ecac:	0801fab4 	.word	0x0801fab4
 800ecb0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ecb2:	9900      	ldr	r1, [sp, #0]
 800ecb4:	6011      	str	r1, [r2, #0]
 800ecb6:	f1b9 0f0e 	cmp.w	r9, #14
 800ecba:	d872      	bhi.n	800eda2 <_dtoa_r+0x3ea>
 800ecbc:	2c00      	cmp	r4, #0
 800ecbe:	d070      	beq.n	800eda2 <_dtoa_r+0x3ea>
 800ecc0:	f1bb 0f00 	cmp.w	fp, #0
 800ecc4:	f340 80a6 	ble.w	800ee14 <_dtoa_r+0x45c>
 800ecc8:	49ca      	ldr	r1, [pc, #808]	; (800eff4 <_dtoa_r+0x63c>)
 800ecca:	f00b 020f 	and.w	r2, fp, #15
 800ecce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ecd2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ecd6:	ed92 7b00 	vldr	d7, [r2]
 800ecda:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ecde:	f000 808d 	beq.w	800edfc <_dtoa_r+0x444>
 800ece2:	4ac5      	ldr	r2, [pc, #788]	; (800eff8 <_dtoa_r+0x640>)
 800ece4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ece8:	ed92 6b08 	vldr	d6, [r2, #32]
 800ecec:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ecf0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ecf4:	f001 010f 	and.w	r1, r1, #15
 800ecf8:	2203      	movs	r2, #3
 800ecfa:	48bf      	ldr	r0, [pc, #764]	; (800eff8 <_dtoa_r+0x640>)
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	d17f      	bne.n	800ee00 <_dtoa_r+0x448>
 800ed00:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ed04:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ed08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ed0e:	2900      	cmp	r1, #0
 800ed10:	f000 80b2 	beq.w	800ee78 <_dtoa_r+0x4c0>
 800ed14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ed18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ed20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed24:	f140 80a8 	bpl.w	800ee78 <_dtoa_r+0x4c0>
 800ed28:	f1b9 0f00 	cmp.w	r9, #0
 800ed2c:	f000 80a4 	beq.w	800ee78 <_dtoa_r+0x4c0>
 800ed30:	f1ba 0f00 	cmp.w	sl, #0
 800ed34:	dd31      	ble.n	800ed9a <_dtoa_r+0x3e2>
 800ed36:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ed3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed42:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ed46:	3201      	adds	r2, #1
 800ed48:	4650      	mov	r0, sl
 800ed4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ed4e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ed52:	ee07 2a90 	vmov	s15, r2
 800ed56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ed5e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ed62:	9c03      	ldr	r4, [sp, #12]
 800ed64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ed68:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	f040 8086 	bne.w	800ee7e <_dtoa_r+0x4c6>
 800ed72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ed76:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ed7a:	ec42 1b17 	vmov	d7, r1, r2
 800ed7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed86:	f300 8272 	bgt.w	800f26e <_dtoa_r+0x8b6>
 800ed8a:	eeb1 7b47 	vneg.f64	d7, d7
 800ed8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed96:	f100 8267 	bmi.w	800f268 <_dtoa_r+0x8b0>
 800ed9a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ed9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eda2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eda4:	2a00      	cmp	r2, #0
 800eda6:	f2c0 8129 	blt.w	800effc <_dtoa_r+0x644>
 800edaa:	f1bb 0f0e 	cmp.w	fp, #14
 800edae:	f300 8125 	bgt.w	800effc <_dtoa_r+0x644>
 800edb2:	4b90      	ldr	r3, [pc, #576]	; (800eff4 <_dtoa_r+0x63c>)
 800edb4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800edb8:	ed93 6b00 	vldr	d6, [r3]
 800edbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f280 80c3 	bge.w	800ef4a <_dtoa_r+0x592>
 800edc4:	f1b9 0f00 	cmp.w	r9, #0
 800edc8:	f300 80bf 	bgt.w	800ef4a <_dtoa_r+0x592>
 800edcc:	f040 824c 	bne.w	800f268 <_dtoa_r+0x8b0>
 800edd0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800edd4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800edd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ede0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede4:	464c      	mov	r4, r9
 800ede6:	464f      	mov	r7, r9
 800ede8:	f280 8222 	bge.w	800f230 <_dtoa_r+0x878>
 800edec:	f8dd 8000 	ldr.w	r8, [sp]
 800edf0:	2331      	movs	r3, #49	; 0x31
 800edf2:	f808 3b01 	strb.w	r3, [r8], #1
 800edf6:	f10b 0b01 	add.w	fp, fp, #1
 800edfa:	e21e      	b.n	800f23a <_dtoa_r+0x882>
 800edfc:	2202      	movs	r2, #2
 800edfe:	e77c      	b.n	800ecfa <_dtoa_r+0x342>
 800ee00:	07cc      	lsls	r4, r1, #31
 800ee02:	d504      	bpl.n	800ee0e <_dtoa_r+0x456>
 800ee04:	ed90 6b00 	vldr	d6, [r0]
 800ee08:	3201      	adds	r2, #1
 800ee0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee0e:	1049      	asrs	r1, r1, #1
 800ee10:	3008      	adds	r0, #8
 800ee12:	e773      	b.n	800ecfc <_dtoa_r+0x344>
 800ee14:	d02e      	beq.n	800ee74 <_dtoa_r+0x4bc>
 800ee16:	f1cb 0100 	rsb	r1, fp, #0
 800ee1a:	4a76      	ldr	r2, [pc, #472]	; (800eff4 <_dtoa_r+0x63c>)
 800ee1c:	f001 000f 	and.w	r0, r1, #15
 800ee20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ee24:	ed92 7b00 	vldr	d7, [r2]
 800ee28:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ee2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ee30:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ee34:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800ee38:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ee3c:	486e      	ldr	r0, [pc, #440]	; (800eff8 <_dtoa_r+0x640>)
 800ee3e:	1109      	asrs	r1, r1, #4
 800ee40:	2400      	movs	r4, #0
 800ee42:	2202      	movs	r2, #2
 800ee44:	b939      	cbnz	r1, 800ee56 <_dtoa_r+0x49e>
 800ee46:	2c00      	cmp	r4, #0
 800ee48:	f43f af60 	beq.w	800ed0c <_dtoa_r+0x354>
 800ee4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee54:	e75a      	b.n	800ed0c <_dtoa_r+0x354>
 800ee56:	07cf      	lsls	r7, r1, #31
 800ee58:	d509      	bpl.n	800ee6e <_dtoa_r+0x4b6>
 800ee5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ee5e:	ed90 7b00 	vldr	d7, [r0]
 800ee62:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ee66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ee6a:	3201      	adds	r2, #1
 800ee6c:	2401      	movs	r4, #1
 800ee6e:	1049      	asrs	r1, r1, #1
 800ee70:	3008      	adds	r0, #8
 800ee72:	e7e7      	b.n	800ee44 <_dtoa_r+0x48c>
 800ee74:	2202      	movs	r2, #2
 800ee76:	e749      	b.n	800ed0c <_dtoa_r+0x354>
 800ee78:	465f      	mov	r7, fp
 800ee7a:	4648      	mov	r0, r9
 800ee7c:	e765      	b.n	800ed4a <_dtoa_r+0x392>
 800ee7e:	ec42 1b17 	vmov	d7, r1, r2
 800ee82:	4a5c      	ldr	r2, [pc, #368]	; (800eff4 <_dtoa_r+0x63c>)
 800ee84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ee88:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ee8c:	9a00      	ldr	r2, [sp, #0]
 800ee8e:	1814      	adds	r4, r2, r0
 800ee90:	9a08      	ldr	r2, [sp, #32]
 800ee92:	b352      	cbz	r2, 800eeea <_dtoa_r+0x532>
 800ee94:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ee98:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ee9c:	f8dd 8000 	ldr.w	r8, [sp]
 800eea0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800eea4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eea8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eeac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800eeb0:	ee14 2a90 	vmov	r2, s9
 800eeb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eeb8:	3230      	adds	r2, #48	; 0x30
 800eeba:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eebe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec6:	f808 2b01 	strb.w	r2, [r8], #1
 800eeca:	d439      	bmi.n	800ef40 <_dtoa_r+0x588>
 800eecc:	ee32 5b46 	vsub.f64	d5, d2, d6
 800eed0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800eed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed8:	d472      	bmi.n	800efc0 <_dtoa_r+0x608>
 800eeda:	45a0      	cmp	r8, r4
 800eedc:	f43f af5d 	beq.w	800ed9a <_dtoa_r+0x3e2>
 800eee0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800eee4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800eee8:	e7e0      	b.n	800eeac <_dtoa_r+0x4f4>
 800eeea:	f8dd 8000 	ldr.w	r8, [sp]
 800eeee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eef2:	4621      	mov	r1, r4
 800eef4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eef8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800eefc:	ee14 2a90 	vmov	r2, s9
 800ef00:	3230      	adds	r2, #48	; 0x30
 800ef02:	f808 2b01 	strb.w	r2, [r8], #1
 800ef06:	45a0      	cmp	r8, r4
 800ef08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ef0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ef10:	d118      	bne.n	800ef44 <_dtoa_r+0x58c>
 800ef12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ef16:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ef1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ef1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef22:	dc4d      	bgt.n	800efc0 <_dtoa_r+0x608>
 800ef24:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ef28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef30:	f57f af33 	bpl.w	800ed9a <_dtoa_r+0x3e2>
 800ef34:	4688      	mov	r8, r1
 800ef36:	3901      	subs	r1, #1
 800ef38:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ef3c:	2b30      	cmp	r3, #48	; 0x30
 800ef3e:	d0f9      	beq.n	800ef34 <_dtoa_r+0x57c>
 800ef40:	46bb      	mov	fp, r7
 800ef42:	e02a      	b.n	800ef9a <_dtoa_r+0x5e2>
 800ef44:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ef48:	e7d6      	b.n	800eef8 <_dtoa_r+0x540>
 800ef4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef4e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ef52:	f8dd 8000 	ldr.w	r8, [sp]
 800ef56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ef5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ef5e:	ee15 3a10 	vmov	r3, s10
 800ef62:	3330      	adds	r3, #48	; 0x30
 800ef64:	f808 3b01 	strb.w	r3, [r8], #1
 800ef68:	9b00      	ldr	r3, [sp, #0]
 800ef6a:	eba8 0303 	sub.w	r3, r8, r3
 800ef6e:	4599      	cmp	r9, r3
 800ef70:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ef74:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ef78:	d133      	bne.n	800efe2 <_dtoa_r+0x62a>
 800ef7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ef7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ef82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef86:	dc1a      	bgt.n	800efbe <_dtoa_r+0x606>
 800ef88:	eeb4 7b46 	vcmp.f64	d7, d6
 800ef8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef90:	d103      	bne.n	800ef9a <_dtoa_r+0x5e2>
 800ef92:	ee15 3a10 	vmov	r3, s10
 800ef96:	07d9      	lsls	r1, r3, #31
 800ef98:	d411      	bmi.n	800efbe <_dtoa_r+0x606>
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f001 f87d 	bl	801009c <_Bfree>
 800efa2:	2300      	movs	r3, #0
 800efa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efa6:	f888 3000 	strb.w	r3, [r8]
 800efaa:	f10b 0301 	add.w	r3, fp, #1
 800efae:	6013      	str	r3, [r2, #0]
 800efb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f43f ad4d 	beq.w	800ea52 <_dtoa_r+0x9a>
 800efb8:	f8c3 8000 	str.w	r8, [r3]
 800efbc:	e549      	b.n	800ea52 <_dtoa_r+0x9a>
 800efbe:	465f      	mov	r7, fp
 800efc0:	4643      	mov	r3, r8
 800efc2:	4698      	mov	r8, r3
 800efc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efc8:	2a39      	cmp	r2, #57	; 0x39
 800efca:	d106      	bne.n	800efda <_dtoa_r+0x622>
 800efcc:	9a00      	ldr	r2, [sp, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d1f7      	bne.n	800efc2 <_dtoa_r+0x60a>
 800efd2:	9900      	ldr	r1, [sp, #0]
 800efd4:	2230      	movs	r2, #48	; 0x30
 800efd6:	3701      	adds	r7, #1
 800efd8:	700a      	strb	r2, [r1, #0]
 800efda:	781a      	ldrb	r2, [r3, #0]
 800efdc:	3201      	adds	r2, #1
 800efde:	701a      	strb	r2, [r3, #0]
 800efe0:	e7ae      	b.n	800ef40 <_dtoa_r+0x588>
 800efe2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800efe6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	d1b2      	bne.n	800ef56 <_dtoa_r+0x59e>
 800eff0:	e7d3      	b.n	800ef9a <_dtoa_r+0x5e2>
 800eff2:	bf00      	nop
 800eff4:	0801fc30 	.word	0x0801fc30
 800eff8:	0801fc08 	.word	0x0801fc08
 800effc:	9908      	ldr	r1, [sp, #32]
 800effe:	2900      	cmp	r1, #0
 800f000:	f000 80d1 	beq.w	800f1a6 <_dtoa_r+0x7ee>
 800f004:	9907      	ldr	r1, [sp, #28]
 800f006:	2901      	cmp	r1, #1
 800f008:	f300 80b4 	bgt.w	800f174 <_dtoa_r+0x7bc>
 800f00c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f00e:	2900      	cmp	r1, #0
 800f010:	f000 80ac 	beq.w	800f16c <_dtoa_r+0x7b4>
 800f014:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f018:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f01c:	461c      	mov	r4, r3
 800f01e:	930a      	str	r3, [sp, #40]	; 0x28
 800f020:	9b05      	ldr	r3, [sp, #20]
 800f022:	4413      	add	r3, r2
 800f024:	9305      	str	r3, [sp, #20]
 800f026:	9b06      	ldr	r3, [sp, #24]
 800f028:	2101      	movs	r1, #1
 800f02a:	4413      	add	r3, r2
 800f02c:	4630      	mov	r0, r6
 800f02e:	9306      	str	r3, [sp, #24]
 800f030:	f001 f93a 	bl	80102a8 <__i2b>
 800f034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f036:	4607      	mov	r7, r0
 800f038:	f1b8 0f00 	cmp.w	r8, #0
 800f03c:	dd0d      	ble.n	800f05a <_dtoa_r+0x6a2>
 800f03e:	9a06      	ldr	r2, [sp, #24]
 800f040:	2a00      	cmp	r2, #0
 800f042:	dd0a      	ble.n	800f05a <_dtoa_r+0x6a2>
 800f044:	4542      	cmp	r2, r8
 800f046:	9905      	ldr	r1, [sp, #20]
 800f048:	bfa8      	it	ge
 800f04a:	4642      	movge	r2, r8
 800f04c:	1a89      	subs	r1, r1, r2
 800f04e:	9105      	str	r1, [sp, #20]
 800f050:	9906      	ldr	r1, [sp, #24]
 800f052:	eba8 0802 	sub.w	r8, r8, r2
 800f056:	1a8a      	subs	r2, r1, r2
 800f058:	9206      	str	r2, [sp, #24]
 800f05a:	b303      	cbz	r3, 800f09e <_dtoa_r+0x6e6>
 800f05c:	9a08      	ldr	r2, [sp, #32]
 800f05e:	2a00      	cmp	r2, #0
 800f060:	f000 80a6 	beq.w	800f1b0 <_dtoa_r+0x7f8>
 800f064:	2c00      	cmp	r4, #0
 800f066:	dd13      	ble.n	800f090 <_dtoa_r+0x6d8>
 800f068:	4639      	mov	r1, r7
 800f06a:	4622      	mov	r2, r4
 800f06c:	4630      	mov	r0, r6
 800f06e:	930c      	str	r3, [sp, #48]	; 0x30
 800f070:	f001 f9d6 	bl	8010420 <__pow5mult>
 800f074:	462a      	mov	r2, r5
 800f076:	4601      	mov	r1, r0
 800f078:	4607      	mov	r7, r0
 800f07a:	4630      	mov	r0, r6
 800f07c:	f001 f92a 	bl	80102d4 <__multiply>
 800f080:	4629      	mov	r1, r5
 800f082:	900a      	str	r0, [sp, #40]	; 0x28
 800f084:	4630      	mov	r0, r6
 800f086:	f001 f809 	bl	801009c <_Bfree>
 800f08a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f08c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f08e:	4615      	mov	r5, r2
 800f090:	1b1a      	subs	r2, r3, r4
 800f092:	d004      	beq.n	800f09e <_dtoa_r+0x6e6>
 800f094:	4629      	mov	r1, r5
 800f096:	4630      	mov	r0, r6
 800f098:	f001 f9c2 	bl	8010420 <__pow5mult>
 800f09c:	4605      	mov	r5, r0
 800f09e:	2101      	movs	r1, #1
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	f001 f901 	bl	80102a8 <__i2b>
 800f0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	f340 8082 	ble.w	800f1b4 <_dtoa_r+0x7fc>
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4601      	mov	r1, r0
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f001 f9b3 	bl	8010420 <__pow5mult>
 800f0ba:	9b07      	ldr	r3, [sp, #28]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	4604      	mov	r4, r0
 800f0c0:	dd7b      	ble.n	800f1ba <_dtoa_r+0x802>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	930a      	str	r3, [sp, #40]	; 0x28
 800f0c6:	6922      	ldr	r2, [r4, #16]
 800f0c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f0cc:	6910      	ldr	r0, [r2, #16]
 800f0ce:	f001 f89b 	bl	8010208 <__hi0bits>
 800f0d2:	f1c0 0020 	rsb	r0, r0, #32
 800f0d6:	9b06      	ldr	r3, [sp, #24]
 800f0d8:	4418      	add	r0, r3
 800f0da:	f010 001f 	ands.w	r0, r0, #31
 800f0de:	f000 808d 	beq.w	800f1fc <_dtoa_r+0x844>
 800f0e2:	f1c0 0220 	rsb	r2, r0, #32
 800f0e6:	2a04      	cmp	r2, #4
 800f0e8:	f340 8086 	ble.w	800f1f8 <_dtoa_r+0x840>
 800f0ec:	f1c0 001c 	rsb	r0, r0, #28
 800f0f0:	9b05      	ldr	r3, [sp, #20]
 800f0f2:	4403      	add	r3, r0
 800f0f4:	9305      	str	r3, [sp, #20]
 800f0f6:	9b06      	ldr	r3, [sp, #24]
 800f0f8:	4403      	add	r3, r0
 800f0fa:	4480      	add	r8, r0
 800f0fc:	9306      	str	r3, [sp, #24]
 800f0fe:	9b05      	ldr	r3, [sp, #20]
 800f100:	2b00      	cmp	r3, #0
 800f102:	dd05      	ble.n	800f110 <_dtoa_r+0x758>
 800f104:	4629      	mov	r1, r5
 800f106:	461a      	mov	r2, r3
 800f108:	4630      	mov	r0, r6
 800f10a:	f001 f9e3 	bl	80104d4 <__lshift>
 800f10e:	4605      	mov	r5, r0
 800f110:	9b06      	ldr	r3, [sp, #24]
 800f112:	2b00      	cmp	r3, #0
 800f114:	dd05      	ble.n	800f122 <_dtoa_r+0x76a>
 800f116:	4621      	mov	r1, r4
 800f118:	461a      	mov	r2, r3
 800f11a:	4630      	mov	r0, r6
 800f11c:	f001 f9da 	bl	80104d4 <__lshift>
 800f120:	4604      	mov	r4, r0
 800f122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f124:	2b00      	cmp	r3, #0
 800f126:	d06b      	beq.n	800f200 <_dtoa_r+0x848>
 800f128:	4621      	mov	r1, r4
 800f12a:	4628      	mov	r0, r5
 800f12c:	f001 fa3e 	bl	80105ac <__mcmp>
 800f130:	2800      	cmp	r0, #0
 800f132:	da65      	bge.n	800f200 <_dtoa_r+0x848>
 800f134:	2300      	movs	r3, #0
 800f136:	4629      	mov	r1, r5
 800f138:	220a      	movs	r2, #10
 800f13a:	4630      	mov	r0, r6
 800f13c:	f000 ffd0 	bl	80100e0 <__multadd>
 800f140:	9b08      	ldr	r3, [sp, #32]
 800f142:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f146:	4605      	mov	r5, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 8192 	beq.w	800f472 <_dtoa_r+0xaba>
 800f14e:	4639      	mov	r1, r7
 800f150:	2300      	movs	r3, #0
 800f152:	220a      	movs	r2, #10
 800f154:	4630      	mov	r0, r6
 800f156:	f000 ffc3 	bl	80100e0 <__multadd>
 800f15a:	f1ba 0f00 	cmp.w	sl, #0
 800f15e:	4607      	mov	r7, r0
 800f160:	f300 808e 	bgt.w	800f280 <_dtoa_r+0x8c8>
 800f164:	9b07      	ldr	r3, [sp, #28]
 800f166:	2b02      	cmp	r3, #2
 800f168:	dc51      	bgt.n	800f20e <_dtoa_r+0x856>
 800f16a:	e089      	b.n	800f280 <_dtoa_r+0x8c8>
 800f16c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f16e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f172:	e751      	b.n	800f018 <_dtoa_r+0x660>
 800f174:	f109 34ff 	add.w	r4, r9, #4294967295
 800f178:	42a3      	cmp	r3, r4
 800f17a:	bfbf      	itttt	lt
 800f17c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f17e:	1ae3      	sublt	r3, r4, r3
 800f180:	18d2      	addlt	r2, r2, r3
 800f182:	4613      	movlt	r3, r2
 800f184:	bfb7      	itett	lt
 800f186:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f188:	1b1c      	subge	r4, r3, r4
 800f18a:	4623      	movlt	r3, r4
 800f18c:	2400      	movlt	r4, #0
 800f18e:	f1b9 0f00 	cmp.w	r9, #0
 800f192:	bfb5      	itete	lt
 800f194:	9a05      	ldrlt	r2, [sp, #20]
 800f196:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f19a:	eba2 0809 	sublt.w	r8, r2, r9
 800f19e:	464a      	movge	r2, r9
 800f1a0:	bfb8      	it	lt
 800f1a2:	2200      	movlt	r2, #0
 800f1a4:	e73b      	b.n	800f01e <_dtoa_r+0x666>
 800f1a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f1aa:	9f08      	ldr	r7, [sp, #32]
 800f1ac:	461c      	mov	r4, r3
 800f1ae:	e743      	b.n	800f038 <_dtoa_r+0x680>
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	e76f      	b.n	800f094 <_dtoa_r+0x6dc>
 800f1b4:	9b07      	ldr	r3, [sp, #28]
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	dc18      	bgt.n	800f1ec <_dtoa_r+0x834>
 800f1ba:	9b02      	ldr	r3, [sp, #8]
 800f1bc:	b9b3      	cbnz	r3, 800f1ec <_dtoa_r+0x834>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f1c4:	b9a2      	cbnz	r2, 800f1f0 <_dtoa_r+0x838>
 800f1c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f1ca:	0d12      	lsrs	r2, r2, #20
 800f1cc:	0512      	lsls	r2, r2, #20
 800f1ce:	b18a      	cbz	r2, 800f1f4 <_dtoa_r+0x83c>
 800f1d0:	9b05      	ldr	r3, [sp, #20]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	9305      	str	r3, [sp, #20]
 800f1d6:	9b06      	ldr	r3, [sp, #24]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	9306      	str	r3, [sp, #24]
 800f1dc:	2301      	movs	r3, #1
 800f1de:	930a      	str	r3, [sp, #40]	; 0x28
 800f1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f47f af6f 	bne.w	800f0c6 <_dtoa_r+0x70e>
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	e774      	b.n	800f0d6 <_dtoa_r+0x71e>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	e7f6      	b.n	800f1de <_dtoa_r+0x826>
 800f1f0:	9b02      	ldr	r3, [sp, #8]
 800f1f2:	e7f4      	b.n	800f1de <_dtoa_r+0x826>
 800f1f4:	920a      	str	r2, [sp, #40]	; 0x28
 800f1f6:	e7f3      	b.n	800f1e0 <_dtoa_r+0x828>
 800f1f8:	d081      	beq.n	800f0fe <_dtoa_r+0x746>
 800f1fa:	4610      	mov	r0, r2
 800f1fc:	301c      	adds	r0, #28
 800f1fe:	e777      	b.n	800f0f0 <_dtoa_r+0x738>
 800f200:	f1b9 0f00 	cmp.w	r9, #0
 800f204:	dc37      	bgt.n	800f276 <_dtoa_r+0x8be>
 800f206:	9b07      	ldr	r3, [sp, #28]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	dd34      	ble.n	800f276 <_dtoa_r+0x8be>
 800f20c:	46ca      	mov	sl, r9
 800f20e:	f1ba 0f00 	cmp.w	sl, #0
 800f212:	d10d      	bne.n	800f230 <_dtoa_r+0x878>
 800f214:	4621      	mov	r1, r4
 800f216:	4653      	mov	r3, sl
 800f218:	2205      	movs	r2, #5
 800f21a:	4630      	mov	r0, r6
 800f21c:	f000 ff60 	bl	80100e0 <__multadd>
 800f220:	4601      	mov	r1, r0
 800f222:	4604      	mov	r4, r0
 800f224:	4628      	mov	r0, r5
 800f226:	f001 f9c1 	bl	80105ac <__mcmp>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f73f adde 	bgt.w	800edec <_dtoa_r+0x434>
 800f230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f232:	f8dd 8000 	ldr.w	r8, [sp]
 800f236:	ea6f 0b03 	mvn.w	fp, r3
 800f23a:	f04f 0900 	mov.w	r9, #0
 800f23e:	4621      	mov	r1, r4
 800f240:	4630      	mov	r0, r6
 800f242:	f000 ff2b 	bl	801009c <_Bfree>
 800f246:	2f00      	cmp	r7, #0
 800f248:	f43f aea7 	beq.w	800ef9a <_dtoa_r+0x5e2>
 800f24c:	f1b9 0f00 	cmp.w	r9, #0
 800f250:	d005      	beq.n	800f25e <_dtoa_r+0x8a6>
 800f252:	45b9      	cmp	r9, r7
 800f254:	d003      	beq.n	800f25e <_dtoa_r+0x8a6>
 800f256:	4649      	mov	r1, r9
 800f258:	4630      	mov	r0, r6
 800f25a:	f000 ff1f 	bl	801009c <_Bfree>
 800f25e:	4639      	mov	r1, r7
 800f260:	4630      	mov	r0, r6
 800f262:	f000 ff1b 	bl	801009c <_Bfree>
 800f266:	e698      	b.n	800ef9a <_dtoa_r+0x5e2>
 800f268:	2400      	movs	r4, #0
 800f26a:	4627      	mov	r7, r4
 800f26c:	e7e0      	b.n	800f230 <_dtoa_r+0x878>
 800f26e:	46bb      	mov	fp, r7
 800f270:	4604      	mov	r4, r0
 800f272:	4607      	mov	r7, r0
 800f274:	e5ba      	b.n	800edec <_dtoa_r+0x434>
 800f276:	9b08      	ldr	r3, [sp, #32]
 800f278:	46ca      	mov	sl, r9
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f000 8100 	beq.w	800f480 <_dtoa_r+0xac8>
 800f280:	f1b8 0f00 	cmp.w	r8, #0
 800f284:	dd05      	ble.n	800f292 <_dtoa_r+0x8da>
 800f286:	4639      	mov	r1, r7
 800f288:	4642      	mov	r2, r8
 800f28a:	4630      	mov	r0, r6
 800f28c:	f001 f922 	bl	80104d4 <__lshift>
 800f290:	4607      	mov	r7, r0
 800f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f294:	2b00      	cmp	r3, #0
 800f296:	d05d      	beq.n	800f354 <_dtoa_r+0x99c>
 800f298:	6879      	ldr	r1, [r7, #4]
 800f29a:	4630      	mov	r0, r6
 800f29c:	f000 febe 	bl	801001c <_Balloc>
 800f2a0:	4680      	mov	r8, r0
 800f2a2:	b928      	cbnz	r0, 800f2b0 <_dtoa_r+0x8f8>
 800f2a4:	4b82      	ldr	r3, [pc, #520]	; (800f4b0 <_dtoa_r+0xaf8>)
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f2ac:	f7ff bb9a 	b.w	800e9e4 <_dtoa_r+0x2c>
 800f2b0:	693a      	ldr	r2, [r7, #16]
 800f2b2:	3202      	adds	r2, #2
 800f2b4:	0092      	lsls	r2, r2, #2
 800f2b6:	f107 010c 	add.w	r1, r7, #12
 800f2ba:	300c      	adds	r0, #12
 800f2bc:	f7fd fa14 	bl	800c6e8 <memcpy>
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	4641      	mov	r1, r8
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f001 f905 	bl	80104d4 <__lshift>
 800f2ca:	9b00      	ldr	r3, [sp, #0]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	9305      	str	r3, [sp, #20]
 800f2d0:	9b00      	ldr	r3, [sp, #0]
 800f2d2:	4453      	add	r3, sl
 800f2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2d6:	9b02      	ldr	r3, [sp, #8]
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	46b9      	mov	r9, r7
 800f2de:	9308      	str	r3, [sp, #32]
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	9b05      	ldr	r3, [sp, #20]
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	9302      	str	r3, [sp, #8]
 800f2ec:	f7ff fad9 	bl	800e8a2 <quorem>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	3330      	adds	r3, #48	; 0x30
 800f2f4:	9006      	str	r0, [sp, #24]
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800f2fc:	f001 f956 	bl	80105ac <__mcmp>
 800f300:	463a      	mov	r2, r7
 800f302:	4682      	mov	sl, r0
 800f304:	4621      	mov	r1, r4
 800f306:	4630      	mov	r0, r6
 800f308:	f001 f96c 	bl	80105e4 <__mdiff>
 800f30c:	68c2      	ldr	r2, [r0, #12]
 800f30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f310:	4680      	mov	r8, r0
 800f312:	bb0a      	cbnz	r2, 800f358 <_dtoa_r+0x9a0>
 800f314:	4601      	mov	r1, r0
 800f316:	4628      	mov	r0, r5
 800f318:	f001 f948 	bl	80105ac <__mcmp>
 800f31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f31e:	4602      	mov	r2, r0
 800f320:	4641      	mov	r1, r8
 800f322:	4630      	mov	r0, r6
 800f324:	920e      	str	r2, [sp, #56]	; 0x38
 800f326:	930a      	str	r3, [sp, #40]	; 0x28
 800f328:	f000 feb8 	bl	801009c <_Bfree>
 800f32c:	9b07      	ldr	r3, [sp, #28]
 800f32e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f330:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f334:	ea43 0102 	orr.w	r1, r3, r2
 800f338:	9b08      	ldr	r3, [sp, #32]
 800f33a:	430b      	orrs	r3, r1
 800f33c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f33e:	d10d      	bne.n	800f35c <_dtoa_r+0x9a4>
 800f340:	2b39      	cmp	r3, #57	; 0x39
 800f342:	d029      	beq.n	800f398 <_dtoa_r+0x9e0>
 800f344:	f1ba 0f00 	cmp.w	sl, #0
 800f348:	dd01      	ble.n	800f34e <_dtoa_r+0x996>
 800f34a:	9b06      	ldr	r3, [sp, #24]
 800f34c:	3331      	adds	r3, #49	; 0x31
 800f34e:	9a02      	ldr	r2, [sp, #8]
 800f350:	7013      	strb	r3, [r2, #0]
 800f352:	e774      	b.n	800f23e <_dtoa_r+0x886>
 800f354:	4638      	mov	r0, r7
 800f356:	e7b8      	b.n	800f2ca <_dtoa_r+0x912>
 800f358:	2201      	movs	r2, #1
 800f35a:	e7e1      	b.n	800f320 <_dtoa_r+0x968>
 800f35c:	f1ba 0f00 	cmp.w	sl, #0
 800f360:	db06      	blt.n	800f370 <_dtoa_r+0x9b8>
 800f362:	9907      	ldr	r1, [sp, #28]
 800f364:	ea41 0a0a 	orr.w	sl, r1, sl
 800f368:	9908      	ldr	r1, [sp, #32]
 800f36a:	ea5a 0101 	orrs.w	r1, sl, r1
 800f36e:	d120      	bne.n	800f3b2 <_dtoa_r+0x9fa>
 800f370:	2a00      	cmp	r2, #0
 800f372:	ddec      	ble.n	800f34e <_dtoa_r+0x996>
 800f374:	4629      	mov	r1, r5
 800f376:	2201      	movs	r2, #1
 800f378:	4630      	mov	r0, r6
 800f37a:	9305      	str	r3, [sp, #20]
 800f37c:	f001 f8aa 	bl	80104d4 <__lshift>
 800f380:	4621      	mov	r1, r4
 800f382:	4605      	mov	r5, r0
 800f384:	f001 f912 	bl	80105ac <__mcmp>
 800f388:	2800      	cmp	r0, #0
 800f38a:	9b05      	ldr	r3, [sp, #20]
 800f38c:	dc02      	bgt.n	800f394 <_dtoa_r+0x9dc>
 800f38e:	d1de      	bne.n	800f34e <_dtoa_r+0x996>
 800f390:	07da      	lsls	r2, r3, #31
 800f392:	d5dc      	bpl.n	800f34e <_dtoa_r+0x996>
 800f394:	2b39      	cmp	r3, #57	; 0x39
 800f396:	d1d8      	bne.n	800f34a <_dtoa_r+0x992>
 800f398:	9a02      	ldr	r2, [sp, #8]
 800f39a:	2339      	movs	r3, #57	; 0x39
 800f39c:	7013      	strb	r3, [r2, #0]
 800f39e:	4643      	mov	r3, r8
 800f3a0:	4698      	mov	r8, r3
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f3a8:	2a39      	cmp	r2, #57	; 0x39
 800f3aa:	d051      	beq.n	800f450 <_dtoa_r+0xa98>
 800f3ac:	3201      	adds	r2, #1
 800f3ae:	701a      	strb	r2, [r3, #0]
 800f3b0:	e745      	b.n	800f23e <_dtoa_r+0x886>
 800f3b2:	2a00      	cmp	r2, #0
 800f3b4:	dd03      	ble.n	800f3be <_dtoa_r+0xa06>
 800f3b6:	2b39      	cmp	r3, #57	; 0x39
 800f3b8:	d0ee      	beq.n	800f398 <_dtoa_r+0x9e0>
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	e7c7      	b.n	800f34e <_dtoa_r+0x996>
 800f3be:	9a05      	ldr	r2, [sp, #20]
 800f3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3c2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f3c6:	428a      	cmp	r2, r1
 800f3c8:	d02b      	beq.n	800f422 <_dtoa_r+0xa6a>
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	220a      	movs	r2, #10
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f000 fe85 	bl	80100e0 <__multadd>
 800f3d6:	45b9      	cmp	r9, r7
 800f3d8:	4605      	mov	r5, r0
 800f3da:	f04f 0300 	mov.w	r3, #0
 800f3de:	f04f 020a 	mov.w	r2, #10
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	d107      	bne.n	800f3f8 <_dtoa_r+0xa40>
 800f3e8:	f000 fe7a 	bl	80100e0 <__multadd>
 800f3ec:	4681      	mov	r9, r0
 800f3ee:	4607      	mov	r7, r0
 800f3f0:	9b05      	ldr	r3, [sp, #20]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	9305      	str	r3, [sp, #20]
 800f3f6:	e774      	b.n	800f2e2 <_dtoa_r+0x92a>
 800f3f8:	f000 fe72 	bl	80100e0 <__multadd>
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	4681      	mov	r9, r0
 800f400:	2300      	movs	r3, #0
 800f402:	220a      	movs	r2, #10
 800f404:	4630      	mov	r0, r6
 800f406:	f000 fe6b 	bl	80100e0 <__multadd>
 800f40a:	4607      	mov	r7, r0
 800f40c:	e7f0      	b.n	800f3f0 <_dtoa_r+0xa38>
 800f40e:	f1ba 0f00 	cmp.w	sl, #0
 800f412:	9a00      	ldr	r2, [sp, #0]
 800f414:	bfcc      	ite	gt
 800f416:	46d0      	movgt	r8, sl
 800f418:	f04f 0801 	movle.w	r8, #1
 800f41c:	4490      	add	r8, r2
 800f41e:	f04f 0900 	mov.w	r9, #0
 800f422:	4629      	mov	r1, r5
 800f424:	2201      	movs	r2, #1
 800f426:	4630      	mov	r0, r6
 800f428:	9302      	str	r3, [sp, #8]
 800f42a:	f001 f853 	bl	80104d4 <__lshift>
 800f42e:	4621      	mov	r1, r4
 800f430:	4605      	mov	r5, r0
 800f432:	f001 f8bb 	bl	80105ac <__mcmp>
 800f436:	2800      	cmp	r0, #0
 800f438:	dcb1      	bgt.n	800f39e <_dtoa_r+0x9e6>
 800f43a:	d102      	bne.n	800f442 <_dtoa_r+0xa8a>
 800f43c:	9b02      	ldr	r3, [sp, #8]
 800f43e:	07db      	lsls	r3, r3, #31
 800f440:	d4ad      	bmi.n	800f39e <_dtoa_r+0x9e6>
 800f442:	4643      	mov	r3, r8
 800f444:	4698      	mov	r8, r3
 800f446:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f44a:	2a30      	cmp	r2, #48	; 0x30
 800f44c:	d0fa      	beq.n	800f444 <_dtoa_r+0xa8c>
 800f44e:	e6f6      	b.n	800f23e <_dtoa_r+0x886>
 800f450:	9a00      	ldr	r2, [sp, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d1a4      	bne.n	800f3a0 <_dtoa_r+0x9e8>
 800f456:	f10b 0b01 	add.w	fp, fp, #1
 800f45a:	2331      	movs	r3, #49	; 0x31
 800f45c:	e778      	b.n	800f350 <_dtoa_r+0x998>
 800f45e:	4b15      	ldr	r3, [pc, #84]	; (800f4b4 <_dtoa_r+0xafc>)
 800f460:	f7ff bb12 	b.w	800ea88 <_dtoa_r+0xd0>
 800f464:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f466:	2b00      	cmp	r3, #0
 800f468:	f47f aaee 	bne.w	800ea48 <_dtoa_r+0x90>
 800f46c:	4b12      	ldr	r3, [pc, #72]	; (800f4b8 <_dtoa_r+0xb00>)
 800f46e:	f7ff bb0b 	b.w	800ea88 <_dtoa_r+0xd0>
 800f472:	f1ba 0f00 	cmp.w	sl, #0
 800f476:	dc03      	bgt.n	800f480 <_dtoa_r+0xac8>
 800f478:	9b07      	ldr	r3, [sp, #28]
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	f73f aec7 	bgt.w	800f20e <_dtoa_r+0x856>
 800f480:	f8dd 8000 	ldr.w	r8, [sp]
 800f484:	4621      	mov	r1, r4
 800f486:	4628      	mov	r0, r5
 800f488:	f7ff fa0b 	bl	800e8a2 <quorem>
 800f48c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f490:	f808 3b01 	strb.w	r3, [r8], #1
 800f494:	9a00      	ldr	r2, [sp, #0]
 800f496:	eba8 0202 	sub.w	r2, r8, r2
 800f49a:	4592      	cmp	sl, r2
 800f49c:	ddb7      	ble.n	800f40e <_dtoa_r+0xa56>
 800f49e:	4629      	mov	r1, r5
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	220a      	movs	r2, #10
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	f000 fe1b 	bl	80100e0 <__multadd>
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	e7ea      	b.n	800f484 <_dtoa_r+0xacc>
 800f4ae:	bf00      	nop
 800f4b0:	0801fab4 	.word	0x0801fab4
 800f4b4:	0801f8b1 	.word	0x0801f8b1
 800f4b8:	0801fa31 	.word	0x0801fa31

0800f4bc <__sflush_r>:
 800f4bc:	898a      	ldrh	r2, [r1, #12]
 800f4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c2:	4605      	mov	r5, r0
 800f4c4:	0710      	lsls	r0, r2, #28
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	d458      	bmi.n	800f57c <__sflush_r+0xc0>
 800f4ca:	684b      	ldr	r3, [r1, #4]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	dc05      	bgt.n	800f4dc <__sflush_r+0x20>
 800f4d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	dc02      	bgt.n	800f4dc <__sflush_r+0x20>
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4de:	2e00      	cmp	r6, #0
 800f4e0:	d0f9      	beq.n	800f4d6 <__sflush_r+0x1a>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4e8:	682f      	ldr	r7, [r5, #0]
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	d032      	beq.n	800f554 <__sflush_r+0x98>
 800f4ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	075a      	lsls	r2, r3, #29
 800f4f4:	d505      	bpl.n	800f502 <__sflush_r+0x46>
 800f4f6:	6863      	ldr	r3, [r4, #4]
 800f4f8:	1ac0      	subs	r0, r0, r3
 800f4fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4fc:	b10b      	cbz	r3, 800f502 <__sflush_r+0x46>
 800f4fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f500:	1ac0      	subs	r0, r0, r3
 800f502:	2300      	movs	r3, #0
 800f504:	4602      	mov	r2, r0
 800f506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f508:	6a21      	ldr	r1, [r4, #32]
 800f50a:	4628      	mov	r0, r5
 800f50c:	47b0      	blx	r6
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	89a3      	ldrh	r3, [r4, #12]
 800f512:	d106      	bne.n	800f522 <__sflush_r+0x66>
 800f514:	6829      	ldr	r1, [r5, #0]
 800f516:	291d      	cmp	r1, #29
 800f518:	d82c      	bhi.n	800f574 <__sflush_r+0xb8>
 800f51a:	4a2a      	ldr	r2, [pc, #168]	; (800f5c4 <__sflush_r+0x108>)
 800f51c:	40ca      	lsrs	r2, r1
 800f51e:	07d6      	lsls	r6, r2, #31
 800f520:	d528      	bpl.n	800f574 <__sflush_r+0xb8>
 800f522:	2200      	movs	r2, #0
 800f524:	6062      	str	r2, [r4, #4]
 800f526:	04d9      	lsls	r1, r3, #19
 800f528:	6922      	ldr	r2, [r4, #16]
 800f52a:	6022      	str	r2, [r4, #0]
 800f52c:	d504      	bpl.n	800f538 <__sflush_r+0x7c>
 800f52e:	1c42      	adds	r2, r0, #1
 800f530:	d101      	bne.n	800f536 <__sflush_r+0x7a>
 800f532:	682b      	ldr	r3, [r5, #0]
 800f534:	b903      	cbnz	r3, 800f538 <__sflush_r+0x7c>
 800f536:	6560      	str	r0, [r4, #84]	; 0x54
 800f538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f53a:	602f      	str	r7, [r5, #0]
 800f53c:	2900      	cmp	r1, #0
 800f53e:	d0ca      	beq.n	800f4d6 <__sflush_r+0x1a>
 800f540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f544:	4299      	cmp	r1, r3
 800f546:	d002      	beq.n	800f54e <__sflush_r+0x92>
 800f548:	4628      	mov	r0, r5
 800f54a:	f7fd f8fd 	bl	800c748 <_free_r>
 800f54e:	2000      	movs	r0, #0
 800f550:	6360      	str	r0, [r4, #52]	; 0x34
 800f552:	e7c1      	b.n	800f4d8 <__sflush_r+0x1c>
 800f554:	6a21      	ldr	r1, [r4, #32]
 800f556:	2301      	movs	r3, #1
 800f558:	4628      	mov	r0, r5
 800f55a:	47b0      	blx	r6
 800f55c:	1c41      	adds	r1, r0, #1
 800f55e:	d1c7      	bne.n	800f4f0 <__sflush_r+0x34>
 800f560:	682b      	ldr	r3, [r5, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d0c4      	beq.n	800f4f0 <__sflush_r+0x34>
 800f566:	2b1d      	cmp	r3, #29
 800f568:	d001      	beq.n	800f56e <__sflush_r+0xb2>
 800f56a:	2b16      	cmp	r3, #22
 800f56c:	d101      	bne.n	800f572 <__sflush_r+0xb6>
 800f56e:	602f      	str	r7, [r5, #0]
 800f570:	e7b1      	b.n	800f4d6 <__sflush_r+0x1a>
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f578:	81a3      	strh	r3, [r4, #12]
 800f57a:	e7ad      	b.n	800f4d8 <__sflush_r+0x1c>
 800f57c:	690f      	ldr	r7, [r1, #16]
 800f57e:	2f00      	cmp	r7, #0
 800f580:	d0a9      	beq.n	800f4d6 <__sflush_r+0x1a>
 800f582:	0793      	lsls	r3, r2, #30
 800f584:	680e      	ldr	r6, [r1, #0]
 800f586:	bf08      	it	eq
 800f588:	694b      	ldreq	r3, [r1, #20]
 800f58a:	600f      	str	r7, [r1, #0]
 800f58c:	bf18      	it	ne
 800f58e:	2300      	movne	r3, #0
 800f590:	eba6 0807 	sub.w	r8, r6, r7
 800f594:	608b      	str	r3, [r1, #8]
 800f596:	f1b8 0f00 	cmp.w	r8, #0
 800f59a:	dd9c      	ble.n	800f4d6 <__sflush_r+0x1a>
 800f59c:	6a21      	ldr	r1, [r4, #32]
 800f59e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5a0:	4643      	mov	r3, r8
 800f5a2:	463a      	mov	r2, r7
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b0      	blx	r6
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	dc06      	bgt.n	800f5ba <__sflush_r+0xfe>
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5b2:	81a3      	strh	r3, [r4, #12]
 800f5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b8:	e78e      	b.n	800f4d8 <__sflush_r+0x1c>
 800f5ba:	4407      	add	r7, r0
 800f5bc:	eba8 0800 	sub.w	r8, r8, r0
 800f5c0:	e7e9      	b.n	800f596 <__sflush_r+0xda>
 800f5c2:	bf00      	nop
 800f5c4:	20400001 	.word	0x20400001

0800f5c8 <_fflush_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	690b      	ldr	r3, [r1, #16]
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	b913      	cbnz	r3, 800f5d8 <_fflush_r+0x10>
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	bd38      	pop	{r3, r4, r5, pc}
 800f5d8:	b118      	cbz	r0, 800f5e2 <_fflush_r+0x1a>
 800f5da:	6983      	ldr	r3, [r0, #24]
 800f5dc:	b90b      	cbnz	r3, 800f5e2 <_fflush_r+0x1a>
 800f5de:	f000 f887 	bl	800f6f0 <__sinit>
 800f5e2:	4b14      	ldr	r3, [pc, #80]	; (800f634 <_fflush_r+0x6c>)
 800f5e4:	429c      	cmp	r4, r3
 800f5e6:	d11b      	bne.n	800f620 <_fflush_r+0x58>
 800f5e8:	686c      	ldr	r4, [r5, #4]
 800f5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d0ef      	beq.n	800f5d2 <_fflush_r+0xa>
 800f5f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5f4:	07d0      	lsls	r0, r2, #31
 800f5f6:	d404      	bmi.n	800f602 <_fflush_r+0x3a>
 800f5f8:	0599      	lsls	r1, r3, #22
 800f5fa:	d402      	bmi.n	800f602 <_fflush_r+0x3a>
 800f5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5fe:	f000 fc88 	bl	800ff12 <__retarget_lock_acquire_recursive>
 800f602:	4628      	mov	r0, r5
 800f604:	4621      	mov	r1, r4
 800f606:	f7ff ff59 	bl	800f4bc <__sflush_r>
 800f60a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f60c:	07da      	lsls	r2, r3, #31
 800f60e:	4605      	mov	r5, r0
 800f610:	d4e0      	bmi.n	800f5d4 <_fflush_r+0xc>
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	059b      	lsls	r3, r3, #22
 800f616:	d4dd      	bmi.n	800f5d4 <_fflush_r+0xc>
 800f618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f61a:	f000 fc7b 	bl	800ff14 <__retarget_lock_release_recursive>
 800f61e:	e7d9      	b.n	800f5d4 <_fflush_r+0xc>
 800f620:	4b05      	ldr	r3, [pc, #20]	; (800f638 <_fflush_r+0x70>)
 800f622:	429c      	cmp	r4, r3
 800f624:	d101      	bne.n	800f62a <_fflush_r+0x62>
 800f626:	68ac      	ldr	r4, [r5, #8]
 800f628:	e7df      	b.n	800f5ea <_fflush_r+0x22>
 800f62a:	4b04      	ldr	r3, [pc, #16]	; (800f63c <_fflush_r+0x74>)
 800f62c:	429c      	cmp	r4, r3
 800f62e:	bf08      	it	eq
 800f630:	68ec      	ldreq	r4, [r5, #12]
 800f632:	e7da      	b.n	800f5ea <_fflush_r+0x22>
 800f634:	0801fae8 	.word	0x0801fae8
 800f638:	0801fb08 	.word	0x0801fb08
 800f63c:	0801fac8 	.word	0x0801fac8

0800f640 <std>:
 800f640:	2300      	movs	r3, #0
 800f642:	b510      	push	{r4, lr}
 800f644:	4604      	mov	r4, r0
 800f646:	e9c0 3300 	strd	r3, r3, [r0]
 800f64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f64e:	6083      	str	r3, [r0, #8]
 800f650:	8181      	strh	r1, [r0, #12]
 800f652:	6643      	str	r3, [r0, #100]	; 0x64
 800f654:	81c2      	strh	r2, [r0, #14]
 800f656:	6183      	str	r3, [r0, #24]
 800f658:	4619      	mov	r1, r3
 800f65a:	2208      	movs	r2, #8
 800f65c:	305c      	adds	r0, #92	; 0x5c
 800f65e:	f7fd f86b 	bl	800c738 <memset>
 800f662:	4b05      	ldr	r3, [pc, #20]	; (800f678 <std+0x38>)
 800f664:	6263      	str	r3, [r4, #36]	; 0x24
 800f666:	4b05      	ldr	r3, [pc, #20]	; (800f67c <std+0x3c>)
 800f668:	62a3      	str	r3, [r4, #40]	; 0x28
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <std+0x40>)
 800f66c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f66e:	4b05      	ldr	r3, [pc, #20]	; (800f684 <std+0x44>)
 800f670:	6224      	str	r4, [r4, #32]
 800f672:	6323      	str	r3, [r4, #48]	; 0x30
 800f674:	bd10      	pop	{r4, pc}
 800f676:	bf00      	nop
 800f678:	08010d51 	.word	0x08010d51
 800f67c:	08010d73 	.word	0x08010d73
 800f680:	08010dab 	.word	0x08010dab
 800f684:	08010dcf 	.word	0x08010dcf

0800f688 <_cleanup_r>:
 800f688:	4901      	ldr	r1, [pc, #4]	; (800f690 <_cleanup_r+0x8>)
 800f68a:	f000 b8af 	b.w	800f7ec <_fwalk_reent>
 800f68e:	bf00      	nop
 800f690:	0800f5c9 	.word	0x0800f5c9

0800f694 <__sfmoreglue>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	1e4a      	subs	r2, r1, #1
 800f698:	2568      	movs	r5, #104	; 0x68
 800f69a:	4355      	muls	r5, r2
 800f69c:	460e      	mov	r6, r1
 800f69e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6a2:	f7fd f8a1 	bl	800c7e8 <_malloc_r>
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	b140      	cbz	r0, 800f6bc <__sfmoreglue+0x28>
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	e9c0 1600 	strd	r1, r6, [r0]
 800f6b0:	300c      	adds	r0, #12
 800f6b2:	60a0      	str	r0, [r4, #8]
 800f6b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6b8:	f7fd f83e 	bl	800c738 <memset>
 800f6bc:	4620      	mov	r0, r4
 800f6be:	bd70      	pop	{r4, r5, r6, pc}

0800f6c0 <__sfp_lock_acquire>:
 800f6c0:	4801      	ldr	r0, [pc, #4]	; (800f6c8 <__sfp_lock_acquire+0x8>)
 800f6c2:	f000 bc26 	b.w	800ff12 <__retarget_lock_acquire_recursive>
 800f6c6:	bf00      	nop
 800f6c8:	2400ab58 	.word	0x2400ab58

0800f6cc <__sfp_lock_release>:
 800f6cc:	4801      	ldr	r0, [pc, #4]	; (800f6d4 <__sfp_lock_release+0x8>)
 800f6ce:	f000 bc21 	b.w	800ff14 <__retarget_lock_release_recursive>
 800f6d2:	bf00      	nop
 800f6d4:	2400ab58 	.word	0x2400ab58

0800f6d8 <__sinit_lock_acquire>:
 800f6d8:	4801      	ldr	r0, [pc, #4]	; (800f6e0 <__sinit_lock_acquire+0x8>)
 800f6da:	f000 bc1a 	b.w	800ff12 <__retarget_lock_acquire_recursive>
 800f6de:	bf00      	nop
 800f6e0:	2400ab53 	.word	0x2400ab53

0800f6e4 <__sinit_lock_release>:
 800f6e4:	4801      	ldr	r0, [pc, #4]	; (800f6ec <__sinit_lock_release+0x8>)
 800f6e6:	f000 bc15 	b.w	800ff14 <__retarget_lock_release_recursive>
 800f6ea:	bf00      	nop
 800f6ec:	2400ab53 	.word	0x2400ab53

0800f6f0 <__sinit>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	f7ff fff0 	bl	800f6d8 <__sinit_lock_acquire>
 800f6f8:	69a3      	ldr	r3, [r4, #24]
 800f6fa:	b11b      	cbz	r3, 800f704 <__sinit+0x14>
 800f6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f700:	f7ff bff0 	b.w	800f6e4 <__sinit_lock_release>
 800f704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f708:	6523      	str	r3, [r4, #80]	; 0x50
 800f70a:	4b13      	ldr	r3, [pc, #76]	; (800f758 <__sinit+0x68>)
 800f70c:	4a13      	ldr	r2, [pc, #76]	; (800f75c <__sinit+0x6c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	62a2      	str	r2, [r4, #40]	; 0x28
 800f712:	42a3      	cmp	r3, r4
 800f714:	bf04      	itt	eq
 800f716:	2301      	moveq	r3, #1
 800f718:	61a3      	streq	r3, [r4, #24]
 800f71a:	4620      	mov	r0, r4
 800f71c:	f000 f820 	bl	800f760 <__sfp>
 800f720:	6060      	str	r0, [r4, #4]
 800f722:	4620      	mov	r0, r4
 800f724:	f000 f81c 	bl	800f760 <__sfp>
 800f728:	60a0      	str	r0, [r4, #8]
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 f818 	bl	800f760 <__sfp>
 800f730:	2200      	movs	r2, #0
 800f732:	60e0      	str	r0, [r4, #12]
 800f734:	2104      	movs	r1, #4
 800f736:	6860      	ldr	r0, [r4, #4]
 800f738:	f7ff ff82 	bl	800f640 <std>
 800f73c:	68a0      	ldr	r0, [r4, #8]
 800f73e:	2201      	movs	r2, #1
 800f740:	2109      	movs	r1, #9
 800f742:	f7ff ff7d 	bl	800f640 <std>
 800f746:	68e0      	ldr	r0, [r4, #12]
 800f748:	2202      	movs	r2, #2
 800f74a:	2112      	movs	r1, #18
 800f74c:	f7ff ff78 	bl	800f640 <std>
 800f750:	2301      	movs	r3, #1
 800f752:	61a3      	str	r3, [r4, #24]
 800f754:	e7d2      	b.n	800f6fc <__sinit+0xc>
 800f756:	bf00      	nop
 800f758:	0801f88c 	.word	0x0801f88c
 800f75c:	0800f689 	.word	0x0800f689

0800f760 <__sfp>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	4607      	mov	r7, r0
 800f764:	f7ff ffac 	bl	800f6c0 <__sfp_lock_acquire>
 800f768:	4b1e      	ldr	r3, [pc, #120]	; (800f7e4 <__sfp+0x84>)
 800f76a:	681e      	ldr	r6, [r3, #0]
 800f76c:	69b3      	ldr	r3, [r6, #24]
 800f76e:	b913      	cbnz	r3, 800f776 <__sfp+0x16>
 800f770:	4630      	mov	r0, r6
 800f772:	f7ff ffbd 	bl	800f6f0 <__sinit>
 800f776:	3648      	adds	r6, #72	; 0x48
 800f778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f77c:	3b01      	subs	r3, #1
 800f77e:	d503      	bpl.n	800f788 <__sfp+0x28>
 800f780:	6833      	ldr	r3, [r6, #0]
 800f782:	b30b      	cbz	r3, 800f7c8 <__sfp+0x68>
 800f784:	6836      	ldr	r6, [r6, #0]
 800f786:	e7f7      	b.n	800f778 <__sfp+0x18>
 800f788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f78c:	b9d5      	cbnz	r5, 800f7c4 <__sfp+0x64>
 800f78e:	4b16      	ldr	r3, [pc, #88]	; (800f7e8 <__sfp+0x88>)
 800f790:	60e3      	str	r3, [r4, #12]
 800f792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f796:	6665      	str	r5, [r4, #100]	; 0x64
 800f798:	f000 fbba 	bl	800ff10 <__retarget_lock_init_recursive>
 800f79c:	f7ff ff96 	bl	800f6cc <__sfp_lock_release>
 800f7a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f7a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f7a8:	6025      	str	r5, [r4, #0]
 800f7aa:	61a5      	str	r5, [r4, #24]
 800f7ac:	2208      	movs	r2, #8
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7b4:	f7fc ffc0 	bl	800c738 <memset>
 800f7b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	3468      	adds	r4, #104	; 0x68
 800f7c6:	e7d9      	b.n	800f77c <__sfp+0x1c>
 800f7c8:	2104      	movs	r1, #4
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	f7ff ff62 	bl	800f694 <__sfmoreglue>
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	6030      	str	r0, [r6, #0]
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d1d5      	bne.n	800f784 <__sfp+0x24>
 800f7d8:	f7ff ff78 	bl	800f6cc <__sfp_lock_release>
 800f7dc:	230c      	movs	r3, #12
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	e7ee      	b.n	800f7c0 <__sfp+0x60>
 800f7e2:	bf00      	nop
 800f7e4:	0801f88c 	.word	0x0801f88c
 800f7e8:	ffff0001 	.word	0xffff0001

0800f7ec <_fwalk_reent>:
 800f7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	4688      	mov	r8, r1
 800f7f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7f8:	2700      	movs	r7, #0
 800f7fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7fe:	f1b9 0901 	subs.w	r9, r9, #1
 800f802:	d505      	bpl.n	800f810 <_fwalk_reent+0x24>
 800f804:	6824      	ldr	r4, [r4, #0]
 800f806:	2c00      	cmp	r4, #0
 800f808:	d1f7      	bne.n	800f7fa <_fwalk_reent+0xe>
 800f80a:	4638      	mov	r0, r7
 800f80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f810:	89ab      	ldrh	r3, [r5, #12]
 800f812:	2b01      	cmp	r3, #1
 800f814:	d907      	bls.n	800f826 <_fwalk_reent+0x3a>
 800f816:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f81a:	3301      	adds	r3, #1
 800f81c:	d003      	beq.n	800f826 <_fwalk_reent+0x3a>
 800f81e:	4629      	mov	r1, r5
 800f820:	4630      	mov	r0, r6
 800f822:	47c0      	blx	r8
 800f824:	4307      	orrs	r7, r0
 800f826:	3568      	adds	r5, #104	; 0x68
 800f828:	e7e9      	b.n	800f7fe <_fwalk_reent+0x12>

0800f82a <rshift>:
 800f82a:	6903      	ldr	r3, [r0, #16]
 800f82c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f834:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f838:	f100 0414 	add.w	r4, r0, #20
 800f83c:	dd45      	ble.n	800f8ca <rshift+0xa0>
 800f83e:	f011 011f 	ands.w	r1, r1, #31
 800f842:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f846:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f84a:	d10c      	bne.n	800f866 <rshift+0x3c>
 800f84c:	f100 0710 	add.w	r7, r0, #16
 800f850:	4629      	mov	r1, r5
 800f852:	42b1      	cmp	r1, r6
 800f854:	d334      	bcc.n	800f8c0 <rshift+0x96>
 800f856:	1a9b      	subs	r3, r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	1eea      	subs	r2, r5, #3
 800f85c:	4296      	cmp	r6, r2
 800f85e:	bf38      	it	cc
 800f860:	2300      	movcc	r3, #0
 800f862:	4423      	add	r3, r4
 800f864:	e015      	b.n	800f892 <rshift+0x68>
 800f866:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f86a:	f1c1 0820 	rsb	r8, r1, #32
 800f86e:	40cf      	lsrs	r7, r1
 800f870:	f105 0e04 	add.w	lr, r5, #4
 800f874:	46a1      	mov	r9, r4
 800f876:	4576      	cmp	r6, lr
 800f878:	46f4      	mov	ip, lr
 800f87a:	d815      	bhi.n	800f8a8 <rshift+0x7e>
 800f87c:	1a9b      	subs	r3, r3, r2
 800f87e:	009a      	lsls	r2, r3, #2
 800f880:	3a04      	subs	r2, #4
 800f882:	3501      	adds	r5, #1
 800f884:	42ae      	cmp	r6, r5
 800f886:	bf38      	it	cc
 800f888:	2200      	movcc	r2, #0
 800f88a:	18a3      	adds	r3, r4, r2
 800f88c:	50a7      	str	r7, [r4, r2]
 800f88e:	b107      	cbz	r7, 800f892 <rshift+0x68>
 800f890:	3304      	adds	r3, #4
 800f892:	1b1a      	subs	r2, r3, r4
 800f894:	42a3      	cmp	r3, r4
 800f896:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f89a:	bf08      	it	eq
 800f89c:	2300      	moveq	r3, #0
 800f89e:	6102      	str	r2, [r0, #16]
 800f8a0:	bf08      	it	eq
 800f8a2:	6143      	streq	r3, [r0, #20]
 800f8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8a8:	f8dc c000 	ldr.w	ip, [ip]
 800f8ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800f8b0:	ea4c 0707 	orr.w	r7, ip, r7
 800f8b4:	f849 7b04 	str.w	r7, [r9], #4
 800f8b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f8bc:	40cf      	lsrs	r7, r1
 800f8be:	e7da      	b.n	800f876 <rshift+0x4c>
 800f8c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800f8c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800f8c8:	e7c3      	b.n	800f852 <rshift+0x28>
 800f8ca:	4623      	mov	r3, r4
 800f8cc:	e7e1      	b.n	800f892 <rshift+0x68>

0800f8ce <__hexdig_fun>:
 800f8ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f8d2:	2b09      	cmp	r3, #9
 800f8d4:	d802      	bhi.n	800f8dc <__hexdig_fun+0xe>
 800f8d6:	3820      	subs	r0, #32
 800f8d8:	b2c0      	uxtb	r0, r0
 800f8da:	4770      	bx	lr
 800f8dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f8e0:	2b05      	cmp	r3, #5
 800f8e2:	d801      	bhi.n	800f8e8 <__hexdig_fun+0x1a>
 800f8e4:	3847      	subs	r0, #71	; 0x47
 800f8e6:	e7f7      	b.n	800f8d8 <__hexdig_fun+0xa>
 800f8e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f8ec:	2b05      	cmp	r3, #5
 800f8ee:	d801      	bhi.n	800f8f4 <__hexdig_fun+0x26>
 800f8f0:	3827      	subs	r0, #39	; 0x27
 800f8f2:	e7f1      	b.n	800f8d8 <__hexdig_fun+0xa>
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	4770      	bx	lr

0800f8f8 <__gethex>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	ed2d 8b02 	vpush	{d8}
 800f900:	b089      	sub	sp, #36	; 0x24
 800f902:	ee08 0a10 	vmov	s16, r0
 800f906:	9304      	str	r3, [sp, #16]
 800f908:	4bbc      	ldr	r3, [pc, #752]	; (800fbfc <__gethex+0x304>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	468b      	mov	fp, r1
 800f912:	4690      	mov	r8, r2
 800f914:	f7f0 fcee 	bl	80002f4 <strlen>
 800f918:	9b01      	ldr	r3, [sp, #4]
 800f91a:	f8db 2000 	ldr.w	r2, [fp]
 800f91e:	4403      	add	r3, r0
 800f920:	4682      	mov	sl, r0
 800f922:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f926:	9305      	str	r3, [sp, #20]
 800f928:	1c93      	adds	r3, r2, #2
 800f92a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f92e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f932:	32fe      	adds	r2, #254	; 0xfe
 800f934:	18d1      	adds	r1, r2, r3
 800f936:	461f      	mov	r7, r3
 800f938:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f93c:	9100      	str	r1, [sp, #0]
 800f93e:	2830      	cmp	r0, #48	; 0x30
 800f940:	d0f8      	beq.n	800f934 <__gethex+0x3c>
 800f942:	f7ff ffc4 	bl	800f8ce <__hexdig_fun>
 800f946:	4604      	mov	r4, r0
 800f948:	2800      	cmp	r0, #0
 800f94a:	d13a      	bne.n	800f9c2 <__gethex+0xca>
 800f94c:	9901      	ldr	r1, [sp, #4]
 800f94e:	4652      	mov	r2, sl
 800f950:	4638      	mov	r0, r7
 800f952:	f7fe f83b 	bl	800d9cc <strncmp>
 800f956:	4605      	mov	r5, r0
 800f958:	2800      	cmp	r0, #0
 800f95a:	d168      	bne.n	800fa2e <__gethex+0x136>
 800f95c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f960:	eb07 060a 	add.w	r6, r7, sl
 800f964:	f7ff ffb3 	bl	800f8ce <__hexdig_fun>
 800f968:	2800      	cmp	r0, #0
 800f96a:	d062      	beq.n	800fa32 <__gethex+0x13a>
 800f96c:	4633      	mov	r3, r6
 800f96e:	7818      	ldrb	r0, [r3, #0]
 800f970:	2830      	cmp	r0, #48	; 0x30
 800f972:	461f      	mov	r7, r3
 800f974:	f103 0301 	add.w	r3, r3, #1
 800f978:	d0f9      	beq.n	800f96e <__gethex+0x76>
 800f97a:	f7ff ffa8 	bl	800f8ce <__hexdig_fun>
 800f97e:	2301      	movs	r3, #1
 800f980:	fab0 f480 	clz	r4, r0
 800f984:	0964      	lsrs	r4, r4, #5
 800f986:	4635      	mov	r5, r6
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	463a      	mov	r2, r7
 800f98c:	4616      	mov	r6, r2
 800f98e:	3201      	adds	r2, #1
 800f990:	7830      	ldrb	r0, [r6, #0]
 800f992:	f7ff ff9c 	bl	800f8ce <__hexdig_fun>
 800f996:	2800      	cmp	r0, #0
 800f998:	d1f8      	bne.n	800f98c <__gethex+0x94>
 800f99a:	9901      	ldr	r1, [sp, #4]
 800f99c:	4652      	mov	r2, sl
 800f99e:	4630      	mov	r0, r6
 800f9a0:	f7fe f814 	bl	800d9cc <strncmp>
 800f9a4:	b980      	cbnz	r0, 800f9c8 <__gethex+0xd0>
 800f9a6:	b94d      	cbnz	r5, 800f9bc <__gethex+0xc4>
 800f9a8:	eb06 050a 	add.w	r5, r6, sl
 800f9ac:	462a      	mov	r2, r5
 800f9ae:	4616      	mov	r6, r2
 800f9b0:	3201      	adds	r2, #1
 800f9b2:	7830      	ldrb	r0, [r6, #0]
 800f9b4:	f7ff ff8b 	bl	800f8ce <__hexdig_fun>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d1f8      	bne.n	800f9ae <__gethex+0xb6>
 800f9bc:	1bad      	subs	r5, r5, r6
 800f9be:	00ad      	lsls	r5, r5, #2
 800f9c0:	e004      	b.n	800f9cc <__gethex+0xd4>
 800f9c2:	2400      	movs	r4, #0
 800f9c4:	4625      	mov	r5, r4
 800f9c6:	e7e0      	b.n	800f98a <__gethex+0x92>
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	d1f7      	bne.n	800f9bc <__gethex+0xc4>
 800f9cc:	7833      	ldrb	r3, [r6, #0]
 800f9ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f9d2:	2b50      	cmp	r3, #80	; 0x50
 800f9d4:	d13b      	bne.n	800fa4e <__gethex+0x156>
 800f9d6:	7873      	ldrb	r3, [r6, #1]
 800f9d8:	2b2b      	cmp	r3, #43	; 0x2b
 800f9da:	d02c      	beq.n	800fa36 <__gethex+0x13e>
 800f9dc:	2b2d      	cmp	r3, #45	; 0x2d
 800f9de:	d02e      	beq.n	800fa3e <__gethex+0x146>
 800f9e0:	1c71      	adds	r1, r6, #1
 800f9e2:	f04f 0900 	mov.w	r9, #0
 800f9e6:	7808      	ldrb	r0, [r1, #0]
 800f9e8:	f7ff ff71 	bl	800f8ce <__hexdig_fun>
 800f9ec:	1e43      	subs	r3, r0, #1
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b18      	cmp	r3, #24
 800f9f2:	d82c      	bhi.n	800fa4e <__gethex+0x156>
 800f9f4:	f1a0 0210 	sub.w	r2, r0, #16
 800f9f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f9fc:	f7ff ff67 	bl	800f8ce <__hexdig_fun>
 800fa00:	1e43      	subs	r3, r0, #1
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b18      	cmp	r3, #24
 800fa06:	d91d      	bls.n	800fa44 <__gethex+0x14c>
 800fa08:	f1b9 0f00 	cmp.w	r9, #0
 800fa0c:	d000      	beq.n	800fa10 <__gethex+0x118>
 800fa0e:	4252      	negs	r2, r2
 800fa10:	4415      	add	r5, r2
 800fa12:	f8cb 1000 	str.w	r1, [fp]
 800fa16:	b1e4      	cbz	r4, 800fa52 <__gethex+0x15a>
 800fa18:	9b00      	ldr	r3, [sp, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	bf14      	ite	ne
 800fa1e:	2700      	movne	r7, #0
 800fa20:	2706      	moveq	r7, #6
 800fa22:	4638      	mov	r0, r7
 800fa24:	b009      	add	sp, #36	; 0x24
 800fa26:	ecbd 8b02 	vpop	{d8}
 800fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	463e      	mov	r6, r7
 800fa30:	4625      	mov	r5, r4
 800fa32:	2401      	movs	r4, #1
 800fa34:	e7ca      	b.n	800f9cc <__gethex+0xd4>
 800fa36:	f04f 0900 	mov.w	r9, #0
 800fa3a:	1cb1      	adds	r1, r6, #2
 800fa3c:	e7d3      	b.n	800f9e6 <__gethex+0xee>
 800fa3e:	f04f 0901 	mov.w	r9, #1
 800fa42:	e7fa      	b.n	800fa3a <__gethex+0x142>
 800fa44:	230a      	movs	r3, #10
 800fa46:	fb03 0202 	mla	r2, r3, r2, r0
 800fa4a:	3a10      	subs	r2, #16
 800fa4c:	e7d4      	b.n	800f9f8 <__gethex+0x100>
 800fa4e:	4631      	mov	r1, r6
 800fa50:	e7df      	b.n	800fa12 <__gethex+0x11a>
 800fa52:	1bf3      	subs	r3, r6, r7
 800fa54:	3b01      	subs	r3, #1
 800fa56:	4621      	mov	r1, r4
 800fa58:	2b07      	cmp	r3, #7
 800fa5a:	dc0b      	bgt.n	800fa74 <__gethex+0x17c>
 800fa5c:	ee18 0a10 	vmov	r0, s16
 800fa60:	f000 fadc 	bl	801001c <_Balloc>
 800fa64:	4604      	mov	r4, r0
 800fa66:	b940      	cbnz	r0, 800fa7a <__gethex+0x182>
 800fa68:	4b65      	ldr	r3, [pc, #404]	; (800fc00 <__gethex+0x308>)
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	21de      	movs	r1, #222	; 0xde
 800fa6e:	4865      	ldr	r0, [pc, #404]	; (800fc04 <__gethex+0x30c>)
 800fa70:	f7fc fdd0 	bl	800c614 <__assert_func>
 800fa74:	3101      	adds	r1, #1
 800fa76:	105b      	asrs	r3, r3, #1
 800fa78:	e7ee      	b.n	800fa58 <__gethex+0x160>
 800fa7a:	f100 0914 	add.w	r9, r0, #20
 800fa7e:	f04f 0b00 	mov.w	fp, #0
 800fa82:	f1ca 0301 	rsb	r3, sl, #1
 800fa86:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa8a:	f8cd b000 	str.w	fp, [sp]
 800fa8e:	9306      	str	r3, [sp, #24]
 800fa90:	42b7      	cmp	r7, r6
 800fa92:	d340      	bcc.n	800fb16 <__gethex+0x21e>
 800fa94:	9802      	ldr	r0, [sp, #8]
 800fa96:	9b00      	ldr	r3, [sp, #0]
 800fa98:	f840 3b04 	str.w	r3, [r0], #4
 800fa9c:	eba0 0009 	sub.w	r0, r0, r9
 800faa0:	1080      	asrs	r0, r0, #2
 800faa2:	0146      	lsls	r6, r0, #5
 800faa4:	6120      	str	r0, [r4, #16]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 fbae 	bl	8010208 <__hi0bits>
 800faac:	1a30      	subs	r0, r6, r0
 800faae:	f8d8 6000 	ldr.w	r6, [r8]
 800fab2:	42b0      	cmp	r0, r6
 800fab4:	dd63      	ble.n	800fb7e <__gethex+0x286>
 800fab6:	1b87      	subs	r7, r0, r6
 800fab8:	4639      	mov	r1, r7
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 ff49 	bl	8010952 <__any_on>
 800fac0:	4682      	mov	sl, r0
 800fac2:	b1a8      	cbz	r0, 800faf0 <__gethex+0x1f8>
 800fac4:	1e7b      	subs	r3, r7, #1
 800fac6:	1159      	asrs	r1, r3, #5
 800fac8:	f003 021f 	and.w	r2, r3, #31
 800facc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fad0:	f04f 0a01 	mov.w	sl, #1
 800fad4:	fa0a f202 	lsl.w	r2, sl, r2
 800fad8:	420a      	tst	r2, r1
 800fada:	d009      	beq.n	800faf0 <__gethex+0x1f8>
 800fadc:	4553      	cmp	r3, sl
 800fade:	dd05      	ble.n	800faec <__gethex+0x1f4>
 800fae0:	1eb9      	subs	r1, r7, #2
 800fae2:	4620      	mov	r0, r4
 800fae4:	f000 ff35 	bl	8010952 <__any_on>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d145      	bne.n	800fb78 <__gethex+0x280>
 800faec:	f04f 0a02 	mov.w	sl, #2
 800faf0:	4639      	mov	r1, r7
 800faf2:	4620      	mov	r0, r4
 800faf4:	f7ff fe99 	bl	800f82a <rshift>
 800faf8:	443d      	add	r5, r7
 800fafa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fafe:	42ab      	cmp	r3, r5
 800fb00:	da4c      	bge.n	800fb9c <__gethex+0x2a4>
 800fb02:	ee18 0a10 	vmov	r0, s16
 800fb06:	4621      	mov	r1, r4
 800fb08:	f000 fac8 	bl	801009c <_Bfree>
 800fb0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb0e:	2300      	movs	r3, #0
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	27a3      	movs	r7, #163	; 0xa3
 800fb14:	e785      	b.n	800fa22 <__gethex+0x12a>
 800fb16:	1e73      	subs	r3, r6, #1
 800fb18:	9a05      	ldr	r2, [sp, #20]
 800fb1a:	9303      	str	r3, [sp, #12]
 800fb1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d019      	beq.n	800fb58 <__gethex+0x260>
 800fb24:	f1bb 0f20 	cmp.w	fp, #32
 800fb28:	d107      	bne.n	800fb3a <__gethex+0x242>
 800fb2a:	9b02      	ldr	r3, [sp, #8]
 800fb2c:	9a00      	ldr	r2, [sp, #0]
 800fb2e:	f843 2b04 	str.w	r2, [r3], #4
 800fb32:	9302      	str	r3, [sp, #8]
 800fb34:	2300      	movs	r3, #0
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	469b      	mov	fp, r3
 800fb3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fb3e:	f7ff fec6 	bl	800f8ce <__hexdig_fun>
 800fb42:	9b00      	ldr	r3, [sp, #0]
 800fb44:	f000 000f 	and.w	r0, r0, #15
 800fb48:	fa00 f00b 	lsl.w	r0, r0, fp
 800fb4c:	4303      	orrs	r3, r0
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	f10b 0b04 	add.w	fp, fp, #4
 800fb54:	9b03      	ldr	r3, [sp, #12]
 800fb56:	e00d      	b.n	800fb74 <__gethex+0x27c>
 800fb58:	9b03      	ldr	r3, [sp, #12]
 800fb5a:	9a06      	ldr	r2, [sp, #24]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	42bb      	cmp	r3, r7
 800fb60:	d3e0      	bcc.n	800fb24 <__gethex+0x22c>
 800fb62:	4618      	mov	r0, r3
 800fb64:	9901      	ldr	r1, [sp, #4]
 800fb66:	9307      	str	r3, [sp, #28]
 800fb68:	4652      	mov	r2, sl
 800fb6a:	f7fd ff2f 	bl	800d9cc <strncmp>
 800fb6e:	9b07      	ldr	r3, [sp, #28]
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d1d7      	bne.n	800fb24 <__gethex+0x22c>
 800fb74:	461e      	mov	r6, r3
 800fb76:	e78b      	b.n	800fa90 <__gethex+0x198>
 800fb78:	f04f 0a03 	mov.w	sl, #3
 800fb7c:	e7b8      	b.n	800faf0 <__gethex+0x1f8>
 800fb7e:	da0a      	bge.n	800fb96 <__gethex+0x29e>
 800fb80:	1a37      	subs	r7, r6, r0
 800fb82:	4621      	mov	r1, r4
 800fb84:	ee18 0a10 	vmov	r0, s16
 800fb88:	463a      	mov	r2, r7
 800fb8a:	f000 fca3 	bl	80104d4 <__lshift>
 800fb8e:	1bed      	subs	r5, r5, r7
 800fb90:	4604      	mov	r4, r0
 800fb92:	f100 0914 	add.w	r9, r0, #20
 800fb96:	f04f 0a00 	mov.w	sl, #0
 800fb9a:	e7ae      	b.n	800fafa <__gethex+0x202>
 800fb9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fba0:	42a8      	cmp	r0, r5
 800fba2:	dd72      	ble.n	800fc8a <__gethex+0x392>
 800fba4:	1b45      	subs	r5, r0, r5
 800fba6:	42ae      	cmp	r6, r5
 800fba8:	dc36      	bgt.n	800fc18 <__gethex+0x320>
 800fbaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	d02a      	beq.n	800fc08 <__gethex+0x310>
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d02c      	beq.n	800fc10 <__gethex+0x318>
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d115      	bne.n	800fbe6 <__gethex+0x2ee>
 800fbba:	42ae      	cmp	r6, r5
 800fbbc:	d113      	bne.n	800fbe6 <__gethex+0x2ee>
 800fbbe:	2e01      	cmp	r6, #1
 800fbc0:	d10b      	bne.n	800fbda <__gethex+0x2e2>
 800fbc2:	9a04      	ldr	r2, [sp, #16]
 800fbc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fbc8:	6013      	str	r3, [r2, #0]
 800fbca:	2301      	movs	r3, #1
 800fbcc:	6123      	str	r3, [r4, #16]
 800fbce:	f8c9 3000 	str.w	r3, [r9]
 800fbd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbd4:	2762      	movs	r7, #98	; 0x62
 800fbd6:	601c      	str	r4, [r3, #0]
 800fbd8:	e723      	b.n	800fa22 <__gethex+0x12a>
 800fbda:	1e71      	subs	r1, r6, #1
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f000 feb8 	bl	8010952 <__any_on>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d1ed      	bne.n	800fbc2 <__gethex+0x2ca>
 800fbe6:	ee18 0a10 	vmov	r0, s16
 800fbea:	4621      	mov	r1, r4
 800fbec:	f000 fa56 	bl	801009c <_Bfree>
 800fbf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6013      	str	r3, [r2, #0]
 800fbf6:	2750      	movs	r7, #80	; 0x50
 800fbf8:	e713      	b.n	800fa22 <__gethex+0x12a>
 800fbfa:	bf00      	nop
 800fbfc:	0801fb94 	.word	0x0801fb94
 800fc00:	0801fab4 	.word	0x0801fab4
 800fc04:	0801fb28 	.word	0x0801fb28
 800fc08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1eb      	bne.n	800fbe6 <__gethex+0x2ee>
 800fc0e:	e7d8      	b.n	800fbc2 <__gethex+0x2ca>
 800fc10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d1d5      	bne.n	800fbc2 <__gethex+0x2ca>
 800fc16:	e7e6      	b.n	800fbe6 <__gethex+0x2ee>
 800fc18:	1e6f      	subs	r7, r5, #1
 800fc1a:	f1ba 0f00 	cmp.w	sl, #0
 800fc1e:	d131      	bne.n	800fc84 <__gethex+0x38c>
 800fc20:	b127      	cbz	r7, 800fc2c <__gethex+0x334>
 800fc22:	4639      	mov	r1, r7
 800fc24:	4620      	mov	r0, r4
 800fc26:	f000 fe94 	bl	8010952 <__any_on>
 800fc2a:	4682      	mov	sl, r0
 800fc2c:	117b      	asrs	r3, r7, #5
 800fc2e:	2101      	movs	r1, #1
 800fc30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fc34:	f007 071f 	and.w	r7, r7, #31
 800fc38:	fa01 f707 	lsl.w	r7, r1, r7
 800fc3c:	421f      	tst	r7, r3
 800fc3e:	4629      	mov	r1, r5
 800fc40:	4620      	mov	r0, r4
 800fc42:	bf18      	it	ne
 800fc44:	f04a 0a02 	orrne.w	sl, sl, #2
 800fc48:	1b76      	subs	r6, r6, r5
 800fc4a:	f7ff fdee 	bl	800f82a <rshift>
 800fc4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc52:	2702      	movs	r7, #2
 800fc54:	f1ba 0f00 	cmp.w	sl, #0
 800fc58:	d048      	beq.n	800fcec <__gethex+0x3f4>
 800fc5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d015      	beq.n	800fc8e <__gethex+0x396>
 800fc62:	2b03      	cmp	r3, #3
 800fc64:	d017      	beq.n	800fc96 <__gethex+0x39e>
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d109      	bne.n	800fc7e <__gethex+0x386>
 800fc6a:	f01a 0f02 	tst.w	sl, #2
 800fc6e:	d006      	beq.n	800fc7e <__gethex+0x386>
 800fc70:	f8d9 0000 	ldr.w	r0, [r9]
 800fc74:	ea4a 0a00 	orr.w	sl, sl, r0
 800fc78:	f01a 0f01 	tst.w	sl, #1
 800fc7c:	d10e      	bne.n	800fc9c <__gethex+0x3a4>
 800fc7e:	f047 0710 	orr.w	r7, r7, #16
 800fc82:	e033      	b.n	800fcec <__gethex+0x3f4>
 800fc84:	f04f 0a01 	mov.w	sl, #1
 800fc88:	e7d0      	b.n	800fc2c <__gethex+0x334>
 800fc8a:	2701      	movs	r7, #1
 800fc8c:	e7e2      	b.n	800fc54 <__gethex+0x35c>
 800fc8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc90:	f1c3 0301 	rsb	r3, r3, #1
 800fc94:	9315      	str	r3, [sp, #84]	; 0x54
 800fc96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d0f0      	beq.n	800fc7e <__gethex+0x386>
 800fc9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fca0:	f104 0314 	add.w	r3, r4, #20
 800fca4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fca8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fcac:	f04f 0c00 	mov.w	ip, #0
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fcba:	d01c      	beq.n	800fcf6 <__gethex+0x3fe>
 800fcbc:	3201      	adds	r2, #1
 800fcbe:	6002      	str	r2, [r0, #0]
 800fcc0:	2f02      	cmp	r7, #2
 800fcc2:	f104 0314 	add.w	r3, r4, #20
 800fcc6:	d13f      	bne.n	800fd48 <__gethex+0x450>
 800fcc8:	f8d8 2000 	ldr.w	r2, [r8]
 800fccc:	3a01      	subs	r2, #1
 800fcce:	42b2      	cmp	r2, r6
 800fcd0:	d10a      	bne.n	800fce8 <__gethex+0x3f0>
 800fcd2:	1171      	asrs	r1, r6, #5
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fcda:	f006 061f 	and.w	r6, r6, #31
 800fcde:	fa02 f606 	lsl.w	r6, r2, r6
 800fce2:	421e      	tst	r6, r3
 800fce4:	bf18      	it	ne
 800fce6:	4617      	movne	r7, r2
 800fce8:	f047 0720 	orr.w	r7, r7, #32
 800fcec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcee:	601c      	str	r4, [r3, #0]
 800fcf0:	9b04      	ldr	r3, [sp, #16]
 800fcf2:	601d      	str	r5, [r3, #0]
 800fcf4:	e695      	b.n	800fa22 <__gethex+0x12a>
 800fcf6:	4299      	cmp	r1, r3
 800fcf8:	f843 cc04 	str.w	ip, [r3, #-4]
 800fcfc:	d8d8      	bhi.n	800fcb0 <__gethex+0x3b8>
 800fcfe:	68a3      	ldr	r3, [r4, #8]
 800fd00:	459b      	cmp	fp, r3
 800fd02:	db19      	blt.n	800fd38 <__gethex+0x440>
 800fd04:	6861      	ldr	r1, [r4, #4]
 800fd06:	ee18 0a10 	vmov	r0, s16
 800fd0a:	3101      	adds	r1, #1
 800fd0c:	f000 f986 	bl	801001c <_Balloc>
 800fd10:	4681      	mov	r9, r0
 800fd12:	b918      	cbnz	r0, 800fd1c <__gethex+0x424>
 800fd14:	4b1a      	ldr	r3, [pc, #104]	; (800fd80 <__gethex+0x488>)
 800fd16:	4602      	mov	r2, r0
 800fd18:	2184      	movs	r1, #132	; 0x84
 800fd1a:	e6a8      	b.n	800fa6e <__gethex+0x176>
 800fd1c:	6922      	ldr	r2, [r4, #16]
 800fd1e:	3202      	adds	r2, #2
 800fd20:	f104 010c 	add.w	r1, r4, #12
 800fd24:	0092      	lsls	r2, r2, #2
 800fd26:	300c      	adds	r0, #12
 800fd28:	f7fc fcde 	bl	800c6e8 <memcpy>
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	ee18 0a10 	vmov	r0, s16
 800fd32:	f000 f9b3 	bl	801009c <_Bfree>
 800fd36:	464c      	mov	r4, r9
 800fd38:	6923      	ldr	r3, [r4, #16]
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd40:	6122      	str	r2, [r4, #16]
 800fd42:	2201      	movs	r2, #1
 800fd44:	615a      	str	r2, [r3, #20]
 800fd46:	e7bb      	b.n	800fcc0 <__gethex+0x3c8>
 800fd48:	6922      	ldr	r2, [r4, #16]
 800fd4a:	455a      	cmp	r2, fp
 800fd4c:	dd0b      	ble.n	800fd66 <__gethex+0x46e>
 800fd4e:	2101      	movs	r1, #1
 800fd50:	4620      	mov	r0, r4
 800fd52:	f7ff fd6a 	bl	800f82a <rshift>
 800fd56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd5a:	3501      	adds	r5, #1
 800fd5c:	42ab      	cmp	r3, r5
 800fd5e:	f6ff aed0 	blt.w	800fb02 <__gethex+0x20a>
 800fd62:	2701      	movs	r7, #1
 800fd64:	e7c0      	b.n	800fce8 <__gethex+0x3f0>
 800fd66:	f016 061f 	ands.w	r6, r6, #31
 800fd6a:	d0fa      	beq.n	800fd62 <__gethex+0x46a>
 800fd6c:	449a      	add	sl, r3
 800fd6e:	f1c6 0620 	rsb	r6, r6, #32
 800fd72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fd76:	f000 fa47 	bl	8010208 <__hi0bits>
 800fd7a:	42b0      	cmp	r0, r6
 800fd7c:	dbe7      	blt.n	800fd4e <__gethex+0x456>
 800fd7e:	e7f0      	b.n	800fd62 <__gethex+0x46a>
 800fd80:	0801fab4 	.word	0x0801fab4

0800fd84 <L_shift>:
 800fd84:	f1c2 0208 	rsb	r2, r2, #8
 800fd88:	0092      	lsls	r2, r2, #2
 800fd8a:	b570      	push	{r4, r5, r6, lr}
 800fd8c:	f1c2 0620 	rsb	r6, r2, #32
 800fd90:	6843      	ldr	r3, [r0, #4]
 800fd92:	6804      	ldr	r4, [r0, #0]
 800fd94:	fa03 f506 	lsl.w	r5, r3, r6
 800fd98:	432c      	orrs	r4, r5
 800fd9a:	40d3      	lsrs	r3, r2
 800fd9c:	6004      	str	r4, [r0, #0]
 800fd9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fda2:	4288      	cmp	r0, r1
 800fda4:	d3f4      	bcc.n	800fd90 <L_shift+0xc>
 800fda6:	bd70      	pop	{r4, r5, r6, pc}

0800fda8 <__match>:
 800fda8:	b530      	push	{r4, r5, lr}
 800fdaa:	6803      	ldr	r3, [r0, #0]
 800fdac:	3301      	adds	r3, #1
 800fdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdb2:	b914      	cbnz	r4, 800fdba <__match+0x12>
 800fdb4:	6003      	str	r3, [r0, #0]
 800fdb6:	2001      	movs	r0, #1
 800fdb8:	bd30      	pop	{r4, r5, pc}
 800fdba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fdc2:	2d19      	cmp	r5, #25
 800fdc4:	bf98      	it	ls
 800fdc6:	3220      	addls	r2, #32
 800fdc8:	42a2      	cmp	r2, r4
 800fdca:	d0f0      	beq.n	800fdae <__match+0x6>
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e7f3      	b.n	800fdb8 <__match+0x10>

0800fdd0 <__hexnan>:
 800fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd4:	680b      	ldr	r3, [r1, #0]
 800fdd6:	6801      	ldr	r1, [r0, #0]
 800fdd8:	115e      	asrs	r6, r3, #5
 800fdda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fdde:	f013 031f 	ands.w	r3, r3, #31
 800fde2:	b087      	sub	sp, #28
 800fde4:	bf18      	it	ne
 800fde6:	3604      	addne	r6, #4
 800fde8:	2500      	movs	r5, #0
 800fdea:	1f37      	subs	r7, r6, #4
 800fdec:	4682      	mov	sl, r0
 800fdee:	4690      	mov	r8, r2
 800fdf0:	9301      	str	r3, [sp, #4]
 800fdf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800fdf6:	46b9      	mov	r9, r7
 800fdf8:	463c      	mov	r4, r7
 800fdfa:	9502      	str	r5, [sp, #8]
 800fdfc:	46ab      	mov	fp, r5
 800fdfe:	784a      	ldrb	r2, [r1, #1]
 800fe00:	1c4b      	adds	r3, r1, #1
 800fe02:	9303      	str	r3, [sp, #12]
 800fe04:	b342      	cbz	r2, 800fe58 <__hexnan+0x88>
 800fe06:	4610      	mov	r0, r2
 800fe08:	9105      	str	r1, [sp, #20]
 800fe0a:	9204      	str	r2, [sp, #16]
 800fe0c:	f7ff fd5f 	bl	800f8ce <__hexdig_fun>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d14f      	bne.n	800feb4 <__hexnan+0xe4>
 800fe14:	9a04      	ldr	r2, [sp, #16]
 800fe16:	9905      	ldr	r1, [sp, #20]
 800fe18:	2a20      	cmp	r2, #32
 800fe1a:	d818      	bhi.n	800fe4e <__hexnan+0x7e>
 800fe1c:	9b02      	ldr	r3, [sp, #8]
 800fe1e:	459b      	cmp	fp, r3
 800fe20:	dd13      	ble.n	800fe4a <__hexnan+0x7a>
 800fe22:	454c      	cmp	r4, r9
 800fe24:	d206      	bcs.n	800fe34 <__hexnan+0x64>
 800fe26:	2d07      	cmp	r5, #7
 800fe28:	dc04      	bgt.n	800fe34 <__hexnan+0x64>
 800fe2a:	462a      	mov	r2, r5
 800fe2c:	4649      	mov	r1, r9
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f7ff ffa8 	bl	800fd84 <L_shift>
 800fe34:	4544      	cmp	r4, r8
 800fe36:	d950      	bls.n	800feda <__hexnan+0x10a>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	f1a4 0904 	sub.w	r9, r4, #4
 800fe3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe42:	f8cd b008 	str.w	fp, [sp, #8]
 800fe46:	464c      	mov	r4, r9
 800fe48:	461d      	mov	r5, r3
 800fe4a:	9903      	ldr	r1, [sp, #12]
 800fe4c:	e7d7      	b.n	800fdfe <__hexnan+0x2e>
 800fe4e:	2a29      	cmp	r2, #41	; 0x29
 800fe50:	d156      	bne.n	800ff00 <__hexnan+0x130>
 800fe52:	3102      	adds	r1, #2
 800fe54:	f8ca 1000 	str.w	r1, [sl]
 800fe58:	f1bb 0f00 	cmp.w	fp, #0
 800fe5c:	d050      	beq.n	800ff00 <__hexnan+0x130>
 800fe5e:	454c      	cmp	r4, r9
 800fe60:	d206      	bcs.n	800fe70 <__hexnan+0xa0>
 800fe62:	2d07      	cmp	r5, #7
 800fe64:	dc04      	bgt.n	800fe70 <__hexnan+0xa0>
 800fe66:	462a      	mov	r2, r5
 800fe68:	4649      	mov	r1, r9
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f7ff ff8a 	bl	800fd84 <L_shift>
 800fe70:	4544      	cmp	r4, r8
 800fe72:	d934      	bls.n	800fede <__hexnan+0x10e>
 800fe74:	f1a8 0204 	sub.w	r2, r8, #4
 800fe78:	4623      	mov	r3, r4
 800fe7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fe7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fe82:	429f      	cmp	r7, r3
 800fe84:	d2f9      	bcs.n	800fe7a <__hexnan+0xaa>
 800fe86:	1b3b      	subs	r3, r7, r4
 800fe88:	f023 0303 	bic.w	r3, r3, #3
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	3401      	adds	r4, #1
 800fe90:	3e03      	subs	r6, #3
 800fe92:	42b4      	cmp	r4, r6
 800fe94:	bf88      	it	hi
 800fe96:	2304      	movhi	r3, #4
 800fe98:	4443      	add	r3, r8
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f843 2b04 	str.w	r2, [r3], #4
 800fea0:	429f      	cmp	r7, r3
 800fea2:	d2fb      	bcs.n	800fe9c <__hexnan+0xcc>
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	b91b      	cbnz	r3, 800feb0 <__hexnan+0xe0>
 800fea8:	4547      	cmp	r7, r8
 800feaa:	d127      	bne.n	800fefc <__hexnan+0x12c>
 800feac:	2301      	movs	r3, #1
 800feae:	603b      	str	r3, [r7, #0]
 800feb0:	2005      	movs	r0, #5
 800feb2:	e026      	b.n	800ff02 <__hexnan+0x132>
 800feb4:	3501      	adds	r5, #1
 800feb6:	2d08      	cmp	r5, #8
 800feb8:	f10b 0b01 	add.w	fp, fp, #1
 800febc:	dd06      	ble.n	800fecc <__hexnan+0xfc>
 800febe:	4544      	cmp	r4, r8
 800fec0:	d9c3      	bls.n	800fe4a <__hexnan+0x7a>
 800fec2:	2300      	movs	r3, #0
 800fec4:	f844 3c04 	str.w	r3, [r4, #-4]
 800fec8:	2501      	movs	r5, #1
 800feca:	3c04      	subs	r4, #4
 800fecc:	6822      	ldr	r2, [r4, #0]
 800fece:	f000 000f 	and.w	r0, r0, #15
 800fed2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fed6:	6022      	str	r2, [r4, #0]
 800fed8:	e7b7      	b.n	800fe4a <__hexnan+0x7a>
 800feda:	2508      	movs	r5, #8
 800fedc:	e7b5      	b.n	800fe4a <__hexnan+0x7a>
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d0df      	beq.n	800fea4 <__hexnan+0xd4>
 800fee4:	f04f 32ff 	mov.w	r2, #4294967295
 800fee8:	f1c3 0320 	rsb	r3, r3, #32
 800feec:	fa22 f303 	lsr.w	r3, r2, r3
 800fef0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fef4:	401a      	ands	r2, r3
 800fef6:	f846 2c04 	str.w	r2, [r6, #-4]
 800fefa:	e7d3      	b.n	800fea4 <__hexnan+0xd4>
 800fefc:	3f04      	subs	r7, #4
 800fefe:	e7d1      	b.n	800fea4 <__hexnan+0xd4>
 800ff00:	2004      	movs	r0, #4
 800ff02:	b007      	add	sp, #28
 800ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff08 <_localeconv_r>:
 800ff08:	4800      	ldr	r0, [pc, #0]	; (800ff0c <_localeconv_r+0x4>)
 800ff0a:	4770      	bx	lr
 800ff0c:	2400a220 	.word	0x2400a220

0800ff10 <__retarget_lock_init_recursive>:
 800ff10:	4770      	bx	lr

0800ff12 <__retarget_lock_acquire_recursive>:
 800ff12:	4770      	bx	lr

0800ff14 <__retarget_lock_release_recursive>:
 800ff14:	4770      	bx	lr

0800ff16 <__swhatbuf_r>:
 800ff16:	b570      	push	{r4, r5, r6, lr}
 800ff18:	460e      	mov	r6, r1
 800ff1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff1e:	2900      	cmp	r1, #0
 800ff20:	b096      	sub	sp, #88	; 0x58
 800ff22:	4614      	mov	r4, r2
 800ff24:	461d      	mov	r5, r3
 800ff26:	da07      	bge.n	800ff38 <__swhatbuf_r+0x22>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	602b      	str	r3, [r5, #0]
 800ff2c:	89b3      	ldrh	r3, [r6, #12]
 800ff2e:	061a      	lsls	r2, r3, #24
 800ff30:	d410      	bmi.n	800ff54 <__swhatbuf_r+0x3e>
 800ff32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff36:	e00e      	b.n	800ff56 <__swhatbuf_r+0x40>
 800ff38:	466a      	mov	r2, sp
 800ff3a:	f000 ff7b 	bl	8010e34 <_fstat_r>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	dbf2      	blt.n	800ff28 <__swhatbuf_r+0x12>
 800ff42:	9a01      	ldr	r2, [sp, #4]
 800ff44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff4c:	425a      	negs	r2, r3
 800ff4e:	415a      	adcs	r2, r3
 800ff50:	602a      	str	r2, [r5, #0]
 800ff52:	e7ee      	b.n	800ff32 <__swhatbuf_r+0x1c>
 800ff54:	2340      	movs	r3, #64	; 0x40
 800ff56:	2000      	movs	r0, #0
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	b016      	add	sp, #88	; 0x58
 800ff5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff60 <__smakebuf_r>:
 800ff60:	898b      	ldrh	r3, [r1, #12]
 800ff62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff64:	079d      	lsls	r5, r3, #30
 800ff66:	4606      	mov	r6, r0
 800ff68:	460c      	mov	r4, r1
 800ff6a:	d507      	bpl.n	800ff7c <__smakebuf_r+0x1c>
 800ff6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	6123      	str	r3, [r4, #16]
 800ff74:	2301      	movs	r3, #1
 800ff76:	6163      	str	r3, [r4, #20]
 800ff78:	b002      	add	sp, #8
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}
 800ff7c:	ab01      	add	r3, sp, #4
 800ff7e:	466a      	mov	r2, sp
 800ff80:	f7ff ffc9 	bl	800ff16 <__swhatbuf_r>
 800ff84:	9900      	ldr	r1, [sp, #0]
 800ff86:	4605      	mov	r5, r0
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f7fc fc2d 	bl	800c7e8 <_malloc_r>
 800ff8e:	b948      	cbnz	r0, 800ffa4 <__smakebuf_r+0x44>
 800ff90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff94:	059a      	lsls	r2, r3, #22
 800ff96:	d4ef      	bmi.n	800ff78 <__smakebuf_r+0x18>
 800ff98:	f023 0303 	bic.w	r3, r3, #3
 800ff9c:	f043 0302 	orr.w	r3, r3, #2
 800ffa0:	81a3      	strh	r3, [r4, #12]
 800ffa2:	e7e3      	b.n	800ff6c <__smakebuf_r+0xc>
 800ffa4:	4b0d      	ldr	r3, [pc, #52]	; (800ffdc <__smakebuf_r+0x7c>)
 800ffa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ffa8:	89a3      	ldrh	r3, [r4, #12]
 800ffaa:	6020      	str	r0, [r4, #0]
 800ffac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffb0:	81a3      	strh	r3, [r4, #12]
 800ffb2:	9b00      	ldr	r3, [sp, #0]
 800ffb4:	6163      	str	r3, [r4, #20]
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	6120      	str	r0, [r4, #16]
 800ffba:	b15b      	cbz	r3, 800ffd4 <__smakebuf_r+0x74>
 800ffbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffc0:	4630      	mov	r0, r6
 800ffc2:	f000 ff49 	bl	8010e58 <_isatty_r>
 800ffc6:	b128      	cbz	r0, 800ffd4 <__smakebuf_r+0x74>
 800ffc8:	89a3      	ldrh	r3, [r4, #12]
 800ffca:	f023 0303 	bic.w	r3, r3, #3
 800ffce:	f043 0301 	orr.w	r3, r3, #1
 800ffd2:	81a3      	strh	r3, [r4, #12]
 800ffd4:	89a0      	ldrh	r0, [r4, #12]
 800ffd6:	4305      	orrs	r5, r0
 800ffd8:	81a5      	strh	r5, [r4, #12]
 800ffda:	e7cd      	b.n	800ff78 <__smakebuf_r+0x18>
 800ffdc:	0800f689 	.word	0x0800f689

0800ffe0 <__ascii_mbtowc>:
 800ffe0:	b082      	sub	sp, #8
 800ffe2:	b901      	cbnz	r1, 800ffe6 <__ascii_mbtowc+0x6>
 800ffe4:	a901      	add	r1, sp, #4
 800ffe6:	b142      	cbz	r2, 800fffa <__ascii_mbtowc+0x1a>
 800ffe8:	b14b      	cbz	r3, 800fffe <__ascii_mbtowc+0x1e>
 800ffea:	7813      	ldrb	r3, [r2, #0]
 800ffec:	600b      	str	r3, [r1, #0]
 800ffee:	7812      	ldrb	r2, [r2, #0]
 800fff0:	1e10      	subs	r0, r2, #0
 800fff2:	bf18      	it	ne
 800fff4:	2001      	movne	r0, #1
 800fff6:	b002      	add	sp, #8
 800fff8:	4770      	bx	lr
 800fffa:	4610      	mov	r0, r2
 800fffc:	e7fb      	b.n	800fff6 <__ascii_mbtowc+0x16>
 800fffe:	f06f 0001 	mvn.w	r0, #1
 8010002:	e7f8      	b.n	800fff6 <__ascii_mbtowc+0x16>

08010004 <__malloc_lock>:
 8010004:	4801      	ldr	r0, [pc, #4]	; (801000c <__malloc_lock+0x8>)
 8010006:	f7ff bf84 	b.w	800ff12 <__retarget_lock_acquire_recursive>
 801000a:	bf00      	nop
 801000c:	2400ab54 	.word	0x2400ab54

08010010 <__malloc_unlock>:
 8010010:	4801      	ldr	r0, [pc, #4]	; (8010018 <__malloc_unlock+0x8>)
 8010012:	f7ff bf7f 	b.w	800ff14 <__retarget_lock_release_recursive>
 8010016:	bf00      	nop
 8010018:	2400ab54 	.word	0x2400ab54

0801001c <_Balloc>:
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010020:	4604      	mov	r4, r0
 8010022:	460d      	mov	r5, r1
 8010024:	b976      	cbnz	r6, 8010044 <_Balloc+0x28>
 8010026:	2010      	movs	r0, #16
 8010028:	f7fc fb4e 	bl	800c6c8 <malloc>
 801002c:	4602      	mov	r2, r0
 801002e:	6260      	str	r0, [r4, #36]	; 0x24
 8010030:	b920      	cbnz	r0, 801003c <_Balloc+0x20>
 8010032:	4b18      	ldr	r3, [pc, #96]	; (8010094 <_Balloc+0x78>)
 8010034:	4818      	ldr	r0, [pc, #96]	; (8010098 <_Balloc+0x7c>)
 8010036:	2166      	movs	r1, #102	; 0x66
 8010038:	f7fc faec 	bl	800c614 <__assert_func>
 801003c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010040:	6006      	str	r6, [r0, #0]
 8010042:	60c6      	str	r6, [r0, #12]
 8010044:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010046:	68f3      	ldr	r3, [r6, #12]
 8010048:	b183      	cbz	r3, 801006c <_Balloc+0x50>
 801004a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010052:	b9b8      	cbnz	r0, 8010084 <_Balloc+0x68>
 8010054:	2101      	movs	r1, #1
 8010056:	fa01 f605 	lsl.w	r6, r1, r5
 801005a:	1d72      	adds	r2, r6, #5
 801005c:	0092      	lsls	r2, r2, #2
 801005e:	4620      	mov	r0, r4
 8010060:	f000 fc98 	bl	8010994 <_calloc_r>
 8010064:	b160      	cbz	r0, 8010080 <_Balloc+0x64>
 8010066:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801006a:	e00e      	b.n	801008a <_Balloc+0x6e>
 801006c:	2221      	movs	r2, #33	; 0x21
 801006e:	2104      	movs	r1, #4
 8010070:	4620      	mov	r0, r4
 8010072:	f000 fc8f 	bl	8010994 <_calloc_r>
 8010076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010078:	60f0      	str	r0, [r6, #12]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1e4      	bne.n	801004a <_Balloc+0x2e>
 8010080:	2000      	movs	r0, #0
 8010082:	bd70      	pop	{r4, r5, r6, pc}
 8010084:	6802      	ldr	r2, [r0, #0]
 8010086:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801008a:	2300      	movs	r3, #0
 801008c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010090:	e7f7      	b.n	8010082 <_Balloc+0x66>
 8010092:	bf00      	nop
 8010094:	0801fa3e 	.word	0x0801fa3e
 8010098:	0801fba8 	.word	0x0801fba8

0801009c <_Bfree>:
 801009c:	b570      	push	{r4, r5, r6, lr}
 801009e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100a0:	4605      	mov	r5, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	b976      	cbnz	r6, 80100c4 <_Bfree+0x28>
 80100a6:	2010      	movs	r0, #16
 80100a8:	f7fc fb0e 	bl	800c6c8 <malloc>
 80100ac:	4602      	mov	r2, r0
 80100ae:	6268      	str	r0, [r5, #36]	; 0x24
 80100b0:	b920      	cbnz	r0, 80100bc <_Bfree+0x20>
 80100b2:	4b09      	ldr	r3, [pc, #36]	; (80100d8 <_Bfree+0x3c>)
 80100b4:	4809      	ldr	r0, [pc, #36]	; (80100dc <_Bfree+0x40>)
 80100b6:	218a      	movs	r1, #138	; 0x8a
 80100b8:	f7fc faac 	bl	800c614 <__assert_func>
 80100bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100c0:	6006      	str	r6, [r0, #0]
 80100c2:	60c6      	str	r6, [r0, #12]
 80100c4:	b13c      	cbz	r4, 80100d6 <_Bfree+0x3a>
 80100c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100c8:	6862      	ldr	r2, [r4, #4]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100d0:	6021      	str	r1, [r4, #0]
 80100d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
 80100d8:	0801fa3e 	.word	0x0801fa3e
 80100dc:	0801fba8 	.word	0x0801fba8

080100e0 <__multadd>:
 80100e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e4:	690e      	ldr	r6, [r1, #16]
 80100e6:	4607      	mov	r7, r0
 80100e8:	4698      	mov	r8, r3
 80100ea:	460c      	mov	r4, r1
 80100ec:	f101 0014 	add.w	r0, r1, #20
 80100f0:	2300      	movs	r3, #0
 80100f2:	6805      	ldr	r5, [r0, #0]
 80100f4:	b2a9      	uxth	r1, r5
 80100f6:	fb02 8101 	mla	r1, r2, r1, r8
 80100fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80100fe:	0c2d      	lsrs	r5, r5, #16
 8010100:	fb02 c505 	mla	r5, r2, r5, ip
 8010104:	b289      	uxth	r1, r1
 8010106:	3301      	adds	r3, #1
 8010108:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801010c:	429e      	cmp	r6, r3
 801010e:	f840 1b04 	str.w	r1, [r0], #4
 8010112:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010116:	dcec      	bgt.n	80100f2 <__multadd+0x12>
 8010118:	f1b8 0f00 	cmp.w	r8, #0
 801011c:	d022      	beq.n	8010164 <__multadd+0x84>
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	42b3      	cmp	r3, r6
 8010122:	dc19      	bgt.n	8010158 <__multadd+0x78>
 8010124:	6861      	ldr	r1, [r4, #4]
 8010126:	4638      	mov	r0, r7
 8010128:	3101      	adds	r1, #1
 801012a:	f7ff ff77 	bl	801001c <_Balloc>
 801012e:	4605      	mov	r5, r0
 8010130:	b928      	cbnz	r0, 801013e <__multadd+0x5e>
 8010132:	4602      	mov	r2, r0
 8010134:	4b0d      	ldr	r3, [pc, #52]	; (801016c <__multadd+0x8c>)
 8010136:	480e      	ldr	r0, [pc, #56]	; (8010170 <__multadd+0x90>)
 8010138:	21b5      	movs	r1, #181	; 0xb5
 801013a:	f7fc fa6b 	bl	800c614 <__assert_func>
 801013e:	6922      	ldr	r2, [r4, #16]
 8010140:	3202      	adds	r2, #2
 8010142:	f104 010c 	add.w	r1, r4, #12
 8010146:	0092      	lsls	r2, r2, #2
 8010148:	300c      	adds	r0, #12
 801014a:	f7fc facd 	bl	800c6e8 <memcpy>
 801014e:	4621      	mov	r1, r4
 8010150:	4638      	mov	r0, r7
 8010152:	f7ff ffa3 	bl	801009c <_Bfree>
 8010156:	462c      	mov	r4, r5
 8010158:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801015c:	3601      	adds	r6, #1
 801015e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010162:	6126      	str	r6, [r4, #16]
 8010164:	4620      	mov	r0, r4
 8010166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801016a:	bf00      	nop
 801016c:	0801fab4 	.word	0x0801fab4
 8010170:	0801fba8 	.word	0x0801fba8

08010174 <__s2b>:
 8010174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010178:	460c      	mov	r4, r1
 801017a:	4615      	mov	r5, r2
 801017c:	461f      	mov	r7, r3
 801017e:	2209      	movs	r2, #9
 8010180:	3308      	adds	r3, #8
 8010182:	4606      	mov	r6, r0
 8010184:	fb93 f3f2 	sdiv	r3, r3, r2
 8010188:	2100      	movs	r1, #0
 801018a:	2201      	movs	r2, #1
 801018c:	429a      	cmp	r2, r3
 801018e:	db09      	blt.n	80101a4 <__s2b+0x30>
 8010190:	4630      	mov	r0, r6
 8010192:	f7ff ff43 	bl	801001c <_Balloc>
 8010196:	b940      	cbnz	r0, 80101aa <__s2b+0x36>
 8010198:	4602      	mov	r2, r0
 801019a:	4b19      	ldr	r3, [pc, #100]	; (8010200 <__s2b+0x8c>)
 801019c:	4819      	ldr	r0, [pc, #100]	; (8010204 <__s2b+0x90>)
 801019e:	21ce      	movs	r1, #206	; 0xce
 80101a0:	f7fc fa38 	bl	800c614 <__assert_func>
 80101a4:	0052      	lsls	r2, r2, #1
 80101a6:	3101      	adds	r1, #1
 80101a8:	e7f0      	b.n	801018c <__s2b+0x18>
 80101aa:	9b08      	ldr	r3, [sp, #32]
 80101ac:	6143      	str	r3, [r0, #20]
 80101ae:	2d09      	cmp	r5, #9
 80101b0:	f04f 0301 	mov.w	r3, #1
 80101b4:	6103      	str	r3, [r0, #16]
 80101b6:	dd16      	ble.n	80101e6 <__s2b+0x72>
 80101b8:	f104 0909 	add.w	r9, r4, #9
 80101bc:	46c8      	mov	r8, r9
 80101be:	442c      	add	r4, r5
 80101c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80101c4:	4601      	mov	r1, r0
 80101c6:	3b30      	subs	r3, #48	; 0x30
 80101c8:	220a      	movs	r2, #10
 80101ca:	4630      	mov	r0, r6
 80101cc:	f7ff ff88 	bl	80100e0 <__multadd>
 80101d0:	45a0      	cmp	r8, r4
 80101d2:	d1f5      	bne.n	80101c0 <__s2b+0x4c>
 80101d4:	f1a5 0408 	sub.w	r4, r5, #8
 80101d8:	444c      	add	r4, r9
 80101da:	1b2d      	subs	r5, r5, r4
 80101dc:	1963      	adds	r3, r4, r5
 80101de:	42bb      	cmp	r3, r7
 80101e0:	db04      	blt.n	80101ec <__s2b+0x78>
 80101e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e6:	340a      	adds	r4, #10
 80101e8:	2509      	movs	r5, #9
 80101ea:	e7f6      	b.n	80101da <__s2b+0x66>
 80101ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80101f0:	4601      	mov	r1, r0
 80101f2:	3b30      	subs	r3, #48	; 0x30
 80101f4:	220a      	movs	r2, #10
 80101f6:	4630      	mov	r0, r6
 80101f8:	f7ff ff72 	bl	80100e0 <__multadd>
 80101fc:	e7ee      	b.n	80101dc <__s2b+0x68>
 80101fe:	bf00      	nop
 8010200:	0801fab4 	.word	0x0801fab4
 8010204:	0801fba8 	.word	0x0801fba8

08010208 <__hi0bits>:
 8010208:	0c03      	lsrs	r3, r0, #16
 801020a:	041b      	lsls	r3, r3, #16
 801020c:	b9d3      	cbnz	r3, 8010244 <__hi0bits+0x3c>
 801020e:	0400      	lsls	r0, r0, #16
 8010210:	2310      	movs	r3, #16
 8010212:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010216:	bf04      	itt	eq
 8010218:	0200      	lsleq	r0, r0, #8
 801021a:	3308      	addeq	r3, #8
 801021c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010220:	bf04      	itt	eq
 8010222:	0100      	lsleq	r0, r0, #4
 8010224:	3304      	addeq	r3, #4
 8010226:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801022a:	bf04      	itt	eq
 801022c:	0080      	lsleq	r0, r0, #2
 801022e:	3302      	addeq	r3, #2
 8010230:	2800      	cmp	r0, #0
 8010232:	db05      	blt.n	8010240 <__hi0bits+0x38>
 8010234:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010238:	f103 0301 	add.w	r3, r3, #1
 801023c:	bf08      	it	eq
 801023e:	2320      	moveq	r3, #32
 8010240:	4618      	mov	r0, r3
 8010242:	4770      	bx	lr
 8010244:	2300      	movs	r3, #0
 8010246:	e7e4      	b.n	8010212 <__hi0bits+0xa>

08010248 <__lo0bits>:
 8010248:	6803      	ldr	r3, [r0, #0]
 801024a:	f013 0207 	ands.w	r2, r3, #7
 801024e:	4601      	mov	r1, r0
 8010250:	d00b      	beq.n	801026a <__lo0bits+0x22>
 8010252:	07da      	lsls	r2, r3, #31
 8010254:	d424      	bmi.n	80102a0 <__lo0bits+0x58>
 8010256:	0798      	lsls	r0, r3, #30
 8010258:	bf49      	itett	mi
 801025a:	085b      	lsrmi	r3, r3, #1
 801025c:	089b      	lsrpl	r3, r3, #2
 801025e:	2001      	movmi	r0, #1
 8010260:	600b      	strmi	r3, [r1, #0]
 8010262:	bf5c      	itt	pl
 8010264:	600b      	strpl	r3, [r1, #0]
 8010266:	2002      	movpl	r0, #2
 8010268:	4770      	bx	lr
 801026a:	b298      	uxth	r0, r3
 801026c:	b9b0      	cbnz	r0, 801029c <__lo0bits+0x54>
 801026e:	0c1b      	lsrs	r3, r3, #16
 8010270:	2010      	movs	r0, #16
 8010272:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010276:	bf04      	itt	eq
 8010278:	0a1b      	lsreq	r3, r3, #8
 801027a:	3008      	addeq	r0, #8
 801027c:	071a      	lsls	r2, r3, #28
 801027e:	bf04      	itt	eq
 8010280:	091b      	lsreq	r3, r3, #4
 8010282:	3004      	addeq	r0, #4
 8010284:	079a      	lsls	r2, r3, #30
 8010286:	bf04      	itt	eq
 8010288:	089b      	lsreq	r3, r3, #2
 801028a:	3002      	addeq	r0, #2
 801028c:	07da      	lsls	r2, r3, #31
 801028e:	d403      	bmi.n	8010298 <__lo0bits+0x50>
 8010290:	085b      	lsrs	r3, r3, #1
 8010292:	f100 0001 	add.w	r0, r0, #1
 8010296:	d005      	beq.n	80102a4 <__lo0bits+0x5c>
 8010298:	600b      	str	r3, [r1, #0]
 801029a:	4770      	bx	lr
 801029c:	4610      	mov	r0, r2
 801029e:	e7e8      	b.n	8010272 <__lo0bits+0x2a>
 80102a0:	2000      	movs	r0, #0
 80102a2:	4770      	bx	lr
 80102a4:	2020      	movs	r0, #32
 80102a6:	4770      	bx	lr

080102a8 <__i2b>:
 80102a8:	b510      	push	{r4, lr}
 80102aa:	460c      	mov	r4, r1
 80102ac:	2101      	movs	r1, #1
 80102ae:	f7ff feb5 	bl	801001c <_Balloc>
 80102b2:	4602      	mov	r2, r0
 80102b4:	b928      	cbnz	r0, 80102c2 <__i2b+0x1a>
 80102b6:	4b05      	ldr	r3, [pc, #20]	; (80102cc <__i2b+0x24>)
 80102b8:	4805      	ldr	r0, [pc, #20]	; (80102d0 <__i2b+0x28>)
 80102ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80102be:	f7fc f9a9 	bl	800c614 <__assert_func>
 80102c2:	2301      	movs	r3, #1
 80102c4:	6144      	str	r4, [r0, #20]
 80102c6:	6103      	str	r3, [r0, #16]
 80102c8:	bd10      	pop	{r4, pc}
 80102ca:	bf00      	nop
 80102cc:	0801fab4 	.word	0x0801fab4
 80102d0:	0801fba8 	.word	0x0801fba8

080102d4 <__multiply>:
 80102d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d8:	4614      	mov	r4, r2
 80102da:	690a      	ldr	r2, [r1, #16]
 80102dc:	6923      	ldr	r3, [r4, #16]
 80102de:	429a      	cmp	r2, r3
 80102e0:	bfb8      	it	lt
 80102e2:	460b      	movlt	r3, r1
 80102e4:	460d      	mov	r5, r1
 80102e6:	bfbc      	itt	lt
 80102e8:	4625      	movlt	r5, r4
 80102ea:	461c      	movlt	r4, r3
 80102ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80102f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80102f4:	68ab      	ldr	r3, [r5, #8]
 80102f6:	6869      	ldr	r1, [r5, #4]
 80102f8:	eb0a 0709 	add.w	r7, sl, r9
 80102fc:	42bb      	cmp	r3, r7
 80102fe:	b085      	sub	sp, #20
 8010300:	bfb8      	it	lt
 8010302:	3101      	addlt	r1, #1
 8010304:	f7ff fe8a 	bl	801001c <_Balloc>
 8010308:	b930      	cbnz	r0, 8010318 <__multiply+0x44>
 801030a:	4602      	mov	r2, r0
 801030c:	4b42      	ldr	r3, [pc, #264]	; (8010418 <__multiply+0x144>)
 801030e:	4843      	ldr	r0, [pc, #268]	; (801041c <__multiply+0x148>)
 8010310:	f240 115d 	movw	r1, #349	; 0x15d
 8010314:	f7fc f97e 	bl	800c614 <__assert_func>
 8010318:	f100 0614 	add.w	r6, r0, #20
 801031c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010320:	4633      	mov	r3, r6
 8010322:	2200      	movs	r2, #0
 8010324:	4543      	cmp	r3, r8
 8010326:	d31e      	bcc.n	8010366 <__multiply+0x92>
 8010328:	f105 0c14 	add.w	ip, r5, #20
 801032c:	f104 0314 	add.w	r3, r4, #20
 8010330:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010334:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010338:	9202      	str	r2, [sp, #8]
 801033a:	ebac 0205 	sub.w	r2, ip, r5
 801033e:	3a15      	subs	r2, #21
 8010340:	f022 0203 	bic.w	r2, r2, #3
 8010344:	3204      	adds	r2, #4
 8010346:	f105 0115 	add.w	r1, r5, #21
 801034a:	458c      	cmp	ip, r1
 801034c:	bf38      	it	cc
 801034e:	2204      	movcc	r2, #4
 8010350:	9201      	str	r2, [sp, #4]
 8010352:	9a02      	ldr	r2, [sp, #8]
 8010354:	9303      	str	r3, [sp, #12]
 8010356:	429a      	cmp	r2, r3
 8010358:	d808      	bhi.n	801036c <__multiply+0x98>
 801035a:	2f00      	cmp	r7, #0
 801035c:	dc55      	bgt.n	801040a <__multiply+0x136>
 801035e:	6107      	str	r7, [r0, #16]
 8010360:	b005      	add	sp, #20
 8010362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010366:	f843 2b04 	str.w	r2, [r3], #4
 801036a:	e7db      	b.n	8010324 <__multiply+0x50>
 801036c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010370:	f1ba 0f00 	cmp.w	sl, #0
 8010374:	d020      	beq.n	80103b8 <__multiply+0xe4>
 8010376:	f105 0e14 	add.w	lr, r5, #20
 801037a:	46b1      	mov	r9, r6
 801037c:	2200      	movs	r2, #0
 801037e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010382:	f8d9 b000 	ldr.w	fp, [r9]
 8010386:	b2a1      	uxth	r1, r4
 8010388:	fa1f fb8b 	uxth.w	fp, fp
 801038c:	fb0a b101 	mla	r1, sl, r1, fp
 8010390:	4411      	add	r1, r2
 8010392:	f8d9 2000 	ldr.w	r2, [r9]
 8010396:	0c24      	lsrs	r4, r4, #16
 8010398:	0c12      	lsrs	r2, r2, #16
 801039a:	fb0a 2404 	mla	r4, sl, r4, r2
 801039e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80103a2:	b289      	uxth	r1, r1
 80103a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80103a8:	45f4      	cmp	ip, lr
 80103aa:	f849 1b04 	str.w	r1, [r9], #4
 80103ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80103b2:	d8e4      	bhi.n	801037e <__multiply+0xaa>
 80103b4:	9901      	ldr	r1, [sp, #4]
 80103b6:	5072      	str	r2, [r6, r1]
 80103b8:	9a03      	ldr	r2, [sp, #12]
 80103ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80103be:	3304      	adds	r3, #4
 80103c0:	f1b9 0f00 	cmp.w	r9, #0
 80103c4:	d01f      	beq.n	8010406 <__multiply+0x132>
 80103c6:	6834      	ldr	r4, [r6, #0]
 80103c8:	f105 0114 	add.w	r1, r5, #20
 80103cc:	46b6      	mov	lr, r6
 80103ce:	f04f 0a00 	mov.w	sl, #0
 80103d2:	880a      	ldrh	r2, [r1, #0]
 80103d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80103d8:	fb09 b202 	mla	r2, r9, r2, fp
 80103dc:	4492      	add	sl, r2
 80103de:	b2a4      	uxth	r4, r4
 80103e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80103e4:	f84e 4b04 	str.w	r4, [lr], #4
 80103e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80103ec:	f8be 2000 	ldrh.w	r2, [lr]
 80103f0:	0c24      	lsrs	r4, r4, #16
 80103f2:	fb09 2404 	mla	r4, r9, r4, r2
 80103f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80103fa:	458c      	cmp	ip, r1
 80103fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010400:	d8e7      	bhi.n	80103d2 <__multiply+0xfe>
 8010402:	9a01      	ldr	r2, [sp, #4]
 8010404:	50b4      	str	r4, [r6, r2]
 8010406:	3604      	adds	r6, #4
 8010408:	e7a3      	b.n	8010352 <__multiply+0x7e>
 801040a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1a5      	bne.n	801035e <__multiply+0x8a>
 8010412:	3f01      	subs	r7, #1
 8010414:	e7a1      	b.n	801035a <__multiply+0x86>
 8010416:	bf00      	nop
 8010418:	0801fab4 	.word	0x0801fab4
 801041c:	0801fba8 	.word	0x0801fba8

08010420 <__pow5mult>:
 8010420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010424:	4615      	mov	r5, r2
 8010426:	f012 0203 	ands.w	r2, r2, #3
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	d007      	beq.n	8010440 <__pow5mult+0x20>
 8010430:	4c25      	ldr	r4, [pc, #148]	; (80104c8 <__pow5mult+0xa8>)
 8010432:	3a01      	subs	r2, #1
 8010434:	2300      	movs	r3, #0
 8010436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801043a:	f7ff fe51 	bl	80100e0 <__multadd>
 801043e:	4607      	mov	r7, r0
 8010440:	10ad      	asrs	r5, r5, #2
 8010442:	d03d      	beq.n	80104c0 <__pow5mult+0xa0>
 8010444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010446:	b97c      	cbnz	r4, 8010468 <__pow5mult+0x48>
 8010448:	2010      	movs	r0, #16
 801044a:	f7fc f93d 	bl	800c6c8 <malloc>
 801044e:	4602      	mov	r2, r0
 8010450:	6270      	str	r0, [r6, #36]	; 0x24
 8010452:	b928      	cbnz	r0, 8010460 <__pow5mult+0x40>
 8010454:	4b1d      	ldr	r3, [pc, #116]	; (80104cc <__pow5mult+0xac>)
 8010456:	481e      	ldr	r0, [pc, #120]	; (80104d0 <__pow5mult+0xb0>)
 8010458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801045c:	f7fc f8da 	bl	800c614 <__assert_func>
 8010460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010464:	6004      	str	r4, [r0, #0]
 8010466:	60c4      	str	r4, [r0, #12]
 8010468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801046c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010470:	b94c      	cbnz	r4, 8010486 <__pow5mult+0x66>
 8010472:	f240 2171 	movw	r1, #625	; 0x271
 8010476:	4630      	mov	r0, r6
 8010478:	f7ff ff16 	bl	80102a8 <__i2b>
 801047c:	2300      	movs	r3, #0
 801047e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010482:	4604      	mov	r4, r0
 8010484:	6003      	str	r3, [r0, #0]
 8010486:	f04f 0900 	mov.w	r9, #0
 801048a:	07eb      	lsls	r3, r5, #31
 801048c:	d50a      	bpl.n	80104a4 <__pow5mult+0x84>
 801048e:	4639      	mov	r1, r7
 8010490:	4622      	mov	r2, r4
 8010492:	4630      	mov	r0, r6
 8010494:	f7ff ff1e 	bl	80102d4 <__multiply>
 8010498:	4639      	mov	r1, r7
 801049a:	4680      	mov	r8, r0
 801049c:	4630      	mov	r0, r6
 801049e:	f7ff fdfd 	bl	801009c <_Bfree>
 80104a2:	4647      	mov	r7, r8
 80104a4:	106d      	asrs	r5, r5, #1
 80104a6:	d00b      	beq.n	80104c0 <__pow5mult+0xa0>
 80104a8:	6820      	ldr	r0, [r4, #0]
 80104aa:	b938      	cbnz	r0, 80104bc <__pow5mult+0x9c>
 80104ac:	4622      	mov	r2, r4
 80104ae:	4621      	mov	r1, r4
 80104b0:	4630      	mov	r0, r6
 80104b2:	f7ff ff0f 	bl	80102d4 <__multiply>
 80104b6:	6020      	str	r0, [r4, #0]
 80104b8:	f8c0 9000 	str.w	r9, [r0]
 80104bc:	4604      	mov	r4, r0
 80104be:	e7e4      	b.n	801048a <__pow5mult+0x6a>
 80104c0:	4638      	mov	r0, r7
 80104c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104c6:	bf00      	nop
 80104c8:	0801fcf8 	.word	0x0801fcf8
 80104cc:	0801fa3e 	.word	0x0801fa3e
 80104d0:	0801fba8 	.word	0x0801fba8

080104d4 <__lshift>:
 80104d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d8:	460c      	mov	r4, r1
 80104da:	6849      	ldr	r1, [r1, #4]
 80104dc:	6923      	ldr	r3, [r4, #16]
 80104de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	4607      	mov	r7, r0
 80104e6:	4691      	mov	r9, r2
 80104e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104ec:	f108 0601 	add.w	r6, r8, #1
 80104f0:	42b3      	cmp	r3, r6
 80104f2:	db0b      	blt.n	801050c <__lshift+0x38>
 80104f4:	4638      	mov	r0, r7
 80104f6:	f7ff fd91 	bl	801001c <_Balloc>
 80104fa:	4605      	mov	r5, r0
 80104fc:	b948      	cbnz	r0, 8010512 <__lshift+0x3e>
 80104fe:	4602      	mov	r2, r0
 8010500:	4b28      	ldr	r3, [pc, #160]	; (80105a4 <__lshift+0xd0>)
 8010502:	4829      	ldr	r0, [pc, #164]	; (80105a8 <__lshift+0xd4>)
 8010504:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010508:	f7fc f884 	bl	800c614 <__assert_func>
 801050c:	3101      	adds	r1, #1
 801050e:	005b      	lsls	r3, r3, #1
 8010510:	e7ee      	b.n	80104f0 <__lshift+0x1c>
 8010512:	2300      	movs	r3, #0
 8010514:	f100 0114 	add.w	r1, r0, #20
 8010518:	f100 0210 	add.w	r2, r0, #16
 801051c:	4618      	mov	r0, r3
 801051e:	4553      	cmp	r3, sl
 8010520:	db33      	blt.n	801058a <__lshift+0xb6>
 8010522:	6920      	ldr	r0, [r4, #16]
 8010524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010528:	f104 0314 	add.w	r3, r4, #20
 801052c:	f019 091f 	ands.w	r9, r9, #31
 8010530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010538:	d02b      	beq.n	8010592 <__lshift+0xbe>
 801053a:	f1c9 0e20 	rsb	lr, r9, #32
 801053e:	468a      	mov	sl, r1
 8010540:	2200      	movs	r2, #0
 8010542:	6818      	ldr	r0, [r3, #0]
 8010544:	fa00 f009 	lsl.w	r0, r0, r9
 8010548:	4302      	orrs	r2, r0
 801054a:	f84a 2b04 	str.w	r2, [sl], #4
 801054e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010552:	459c      	cmp	ip, r3
 8010554:	fa22 f20e 	lsr.w	r2, r2, lr
 8010558:	d8f3      	bhi.n	8010542 <__lshift+0x6e>
 801055a:	ebac 0304 	sub.w	r3, ip, r4
 801055e:	3b15      	subs	r3, #21
 8010560:	f023 0303 	bic.w	r3, r3, #3
 8010564:	3304      	adds	r3, #4
 8010566:	f104 0015 	add.w	r0, r4, #21
 801056a:	4584      	cmp	ip, r0
 801056c:	bf38      	it	cc
 801056e:	2304      	movcc	r3, #4
 8010570:	50ca      	str	r2, [r1, r3]
 8010572:	b10a      	cbz	r2, 8010578 <__lshift+0xa4>
 8010574:	f108 0602 	add.w	r6, r8, #2
 8010578:	3e01      	subs	r6, #1
 801057a:	4638      	mov	r0, r7
 801057c:	612e      	str	r6, [r5, #16]
 801057e:	4621      	mov	r1, r4
 8010580:	f7ff fd8c 	bl	801009c <_Bfree>
 8010584:	4628      	mov	r0, r5
 8010586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801058a:	f842 0f04 	str.w	r0, [r2, #4]!
 801058e:	3301      	adds	r3, #1
 8010590:	e7c5      	b.n	801051e <__lshift+0x4a>
 8010592:	3904      	subs	r1, #4
 8010594:	f853 2b04 	ldr.w	r2, [r3], #4
 8010598:	f841 2f04 	str.w	r2, [r1, #4]!
 801059c:	459c      	cmp	ip, r3
 801059e:	d8f9      	bhi.n	8010594 <__lshift+0xc0>
 80105a0:	e7ea      	b.n	8010578 <__lshift+0xa4>
 80105a2:	bf00      	nop
 80105a4:	0801fab4 	.word	0x0801fab4
 80105a8:	0801fba8 	.word	0x0801fba8

080105ac <__mcmp>:
 80105ac:	b530      	push	{r4, r5, lr}
 80105ae:	6902      	ldr	r2, [r0, #16]
 80105b0:	690c      	ldr	r4, [r1, #16]
 80105b2:	1b12      	subs	r2, r2, r4
 80105b4:	d10e      	bne.n	80105d4 <__mcmp+0x28>
 80105b6:	f100 0314 	add.w	r3, r0, #20
 80105ba:	3114      	adds	r1, #20
 80105bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80105c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80105c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80105c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80105cc:	42a5      	cmp	r5, r4
 80105ce:	d003      	beq.n	80105d8 <__mcmp+0x2c>
 80105d0:	d305      	bcc.n	80105de <__mcmp+0x32>
 80105d2:	2201      	movs	r2, #1
 80105d4:	4610      	mov	r0, r2
 80105d6:	bd30      	pop	{r4, r5, pc}
 80105d8:	4283      	cmp	r3, r0
 80105da:	d3f3      	bcc.n	80105c4 <__mcmp+0x18>
 80105dc:	e7fa      	b.n	80105d4 <__mcmp+0x28>
 80105de:	f04f 32ff 	mov.w	r2, #4294967295
 80105e2:	e7f7      	b.n	80105d4 <__mcmp+0x28>

080105e4 <__mdiff>:
 80105e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e8:	460c      	mov	r4, r1
 80105ea:	4606      	mov	r6, r0
 80105ec:	4611      	mov	r1, r2
 80105ee:	4620      	mov	r0, r4
 80105f0:	4617      	mov	r7, r2
 80105f2:	f7ff ffdb 	bl	80105ac <__mcmp>
 80105f6:	1e05      	subs	r5, r0, #0
 80105f8:	d110      	bne.n	801061c <__mdiff+0x38>
 80105fa:	4629      	mov	r1, r5
 80105fc:	4630      	mov	r0, r6
 80105fe:	f7ff fd0d 	bl	801001c <_Balloc>
 8010602:	b930      	cbnz	r0, 8010612 <__mdiff+0x2e>
 8010604:	4b39      	ldr	r3, [pc, #228]	; (80106ec <__mdiff+0x108>)
 8010606:	4602      	mov	r2, r0
 8010608:	f240 2132 	movw	r1, #562	; 0x232
 801060c:	4838      	ldr	r0, [pc, #224]	; (80106f0 <__mdiff+0x10c>)
 801060e:	f7fc f801 	bl	800c614 <__assert_func>
 8010612:	2301      	movs	r3, #1
 8010614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801061c:	bfa4      	itt	ge
 801061e:	463b      	movge	r3, r7
 8010620:	4627      	movge	r7, r4
 8010622:	4630      	mov	r0, r6
 8010624:	6879      	ldr	r1, [r7, #4]
 8010626:	bfa6      	itte	ge
 8010628:	461c      	movge	r4, r3
 801062a:	2500      	movge	r5, #0
 801062c:	2501      	movlt	r5, #1
 801062e:	f7ff fcf5 	bl	801001c <_Balloc>
 8010632:	b920      	cbnz	r0, 801063e <__mdiff+0x5a>
 8010634:	4b2d      	ldr	r3, [pc, #180]	; (80106ec <__mdiff+0x108>)
 8010636:	4602      	mov	r2, r0
 8010638:	f44f 7110 	mov.w	r1, #576	; 0x240
 801063c:	e7e6      	b.n	801060c <__mdiff+0x28>
 801063e:	693e      	ldr	r6, [r7, #16]
 8010640:	60c5      	str	r5, [r0, #12]
 8010642:	6925      	ldr	r5, [r4, #16]
 8010644:	f107 0114 	add.w	r1, r7, #20
 8010648:	f104 0914 	add.w	r9, r4, #20
 801064c:	f100 0e14 	add.w	lr, r0, #20
 8010650:	f107 0210 	add.w	r2, r7, #16
 8010654:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010658:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801065c:	46f2      	mov	sl, lr
 801065e:	2700      	movs	r7, #0
 8010660:	f859 3b04 	ldr.w	r3, [r9], #4
 8010664:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010668:	fa1f f883 	uxth.w	r8, r3
 801066c:	fa17 f78b 	uxtah	r7, r7, fp
 8010670:	0c1b      	lsrs	r3, r3, #16
 8010672:	eba7 0808 	sub.w	r8, r7, r8
 8010676:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801067a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801067e:	fa1f f888 	uxth.w	r8, r8
 8010682:	141f      	asrs	r7, r3, #16
 8010684:	454d      	cmp	r5, r9
 8010686:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801068a:	f84a 3b04 	str.w	r3, [sl], #4
 801068e:	d8e7      	bhi.n	8010660 <__mdiff+0x7c>
 8010690:	1b2b      	subs	r3, r5, r4
 8010692:	3b15      	subs	r3, #21
 8010694:	f023 0303 	bic.w	r3, r3, #3
 8010698:	3304      	adds	r3, #4
 801069a:	3415      	adds	r4, #21
 801069c:	42a5      	cmp	r5, r4
 801069e:	bf38      	it	cc
 80106a0:	2304      	movcc	r3, #4
 80106a2:	4419      	add	r1, r3
 80106a4:	4473      	add	r3, lr
 80106a6:	469e      	mov	lr, r3
 80106a8:	460d      	mov	r5, r1
 80106aa:	4565      	cmp	r5, ip
 80106ac:	d30e      	bcc.n	80106cc <__mdiff+0xe8>
 80106ae:	f10c 0203 	add.w	r2, ip, #3
 80106b2:	1a52      	subs	r2, r2, r1
 80106b4:	f022 0203 	bic.w	r2, r2, #3
 80106b8:	3903      	subs	r1, #3
 80106ba:	458c      	cmp	ip, r1
 80106bc:	bf38      	it	cc
 80106be:	2200      	movcc	r2, #0
 80106c0:	441a      	add	r2, r3
 80106c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80106c6:	b17b      	cbz	r3, 80106e8 <__mdiff+0x104>
 80106c8:	6106      	str	r6, [r0, #16]
 80106ca:	e7a5      	b.n	8010618 <__mdiff+0x34>
 80106cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80106d0:	fa17 f488 	uxtah	r4, r7, r8
 80106d4:	1422      	asrs	r2, r4, #16
 80106d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80106da:	b2a4      	uxth	r4, r4
 80106dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80106e0:	f84e 4b04 	str.w	r4, [lr], #4
 80106e4:	1417      	asrs	r7, r2, #16
 80106e6:	e7e0      	b.n	80106aa <__mdiff+0xc6>
 80106e8:	3e01      	subs	r6, #1
 80106ea:	e7ea      	b.n	80106c2 <__mdiff+0xde>
 80106ec:	0801fab4 	.word	0x0801fab4
 80106f0:	0801fba8 	.word	0x0801fba8

080106f4 <__ulp>:
 80106f4:	b082      	sub	sp, #8
 80106f6:	ed8d 0b00 	vstr	d0, [sp]
 80106fa:	9b01      	ldr	r3, [sp, #4]
 80106fc:	4912      	ldr	r1, [pc, #72]	; (8010748 <__ulp+0x54>)
 80106fe:	4019      	ands	r1, r3
 8010700:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010704:	2900      	cmp	r1, #0
 8010706:	dd05      	ble.n	8010714 <__ulp+0x20>
 8010708:	2200      	movs	r2, #0
 801070a:	460b      	mov	r3, r1
 801070c:	ec43 2b10 	vmov	d0, r2, r3
 8010710:	b002      	add	sp, #8
 8010712:	4770      	bx	lr
 8010714:	4249      	negs	r1, r1
 8010716:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801071a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801071e:	f04f 0200 	mov.w	r2, #0
 8010722:	f04f 0300 	mov.w	r3, #0
 8010726:	da04      	bge.n	8010732 <__ulp+0x3e>
 8010728:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801072c:	fa41 f300 	asr.w	r3, r1, r0
 8010730:	e7ec      	b.n	801070c <__ulp+0x18>
 8010732:	f1a0 0114 	sub.w	r1, r0, #20
 8010736:	291e      	cmp	r1, #30
 8010738:	bfda      	itte	le
 801073a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801073e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010742:	2101      	movgt	r1, #1
 8010744:	460a      	mov	r2, r1
 8010746:	e7e1      	b.n	801070c <__ulp+0x18>
 8010748:	7ff00000 	.word	0x7ff00000

0801074c <__b2d>:
 801074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074e:	6905      	ldr	r5, [r0, #16]
 8010750:	f100 0714 	add.w	r7, r0, #20
 8010754:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010758:	1f2e      	subs	r6, r5, #4
 801075a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801075e:	4620      	mov	r0, r4
 8010760:	f7ff fd52 	bl	8010208 <__hi0bits>
 8010764:	f1c0 0320 	rsb	r3, r0, #32
 8010768:	280a      	cmp	r0, #10
 801076a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80107e8 <__b2d+0x9c>
 801076e:	600b      	str	r3, [r1, #0]
 8010770:	dc14      	bgt.n	801079c <__b2d+0x50>
 8010772:	f1c0 0e0b 	rsb	lr, r0, #11
 8010776:	fa24 f10e 	lsr.w	r1, r4, lr
 801077a:	42b7      	cmp	r7, r6
 801077c:	ea41 030c 	orr.w	r3, r1, ip
 8010780:	bf34      	ite	cc
 8010782:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010786:	2100      	movcs	r1, #0
 8010788:	3015      	adds	r0, #21
 801078a:	fa04 f000 	lsl.w	r0, r4, r0
 801078e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010792:	ea40 0201 	orr.w	r2, r0, r1
 8010796:	ec43 2b10 	vmov	d0, r2, r3
 801079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801079c:	42b7      	cmp	r7, r6
 801079e:	bf3a      	itte	cc
 80107a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80107a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80107a8:	2100      	movcs	r1, #0
 80107aa:	380b      	subs	r0, #11
 80107ac:	d017      	beq.n	80107de <__b2d+0x92>
 80107ae:	f1c0 0c20 	rsb	ip, r0, #32
 80107b2:	fa04 f500 	lsl.w	r5, r4, r0
 80107b6:	42be      	cmp	r6, r7
 80107b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80107bc:	ea45 0504 	orr.w	r5, r5, r4
 80107c0:	bf8c      	ite	hi
 80107c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80107c6:	2400      	movls	r4, #0
 80107c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80107cc:	fa01 f000 	lsl.w	r0, r1, r0
 80107d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80107d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80107d8:	ea40 0204 	orr.w	r2, r0, r4
 80107dc:	e7db      	b.n	8010796 <__b2d+0x4a>
 80107de:	ea44 030c 	orr.w	r3, r4, ip
 80107e2:	460a      	mov	r2, r1
 80107e4:	e7d7      	b.n	8010796 <__b2d+0x4a>
 80107e6:	bf00      	nop
 80107e8:	3ff00000 	.word	0x3ff00000

080107ec <__d2b>:
 80107ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107f0:	4689      	mov	r9, r1
 80107f2:	2101      	movs	r1, #1
 80107f4:	ec57 6b10 	vmov	r6, r7, d0
 80107f8:	4690      	mov	r8, r2
 80107fa:	f7ff fc0f 	bl	801001c <_Balloc>
 80107fe:	4604      	mov	r4, r0
 8010800:	b930      	cbnz	r0, 8010810 <__d2b+0x24>
 8010802:	4602      	mov	r2, r0
 8010804:	4b25      	ldr	r3, [pc, #148]	; (801089c <__d2b+0xb0>)
 8010806:	4826      	ldr	r0, [pc, #152]	; (80108a0 <__d2b+0xb4>)
 8010808:	f240 310a 	movw	r1, #778	; 0x30a
 801080c:	f7fb ff02 	bl	800c614 <__assert_func>
 8010810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010818:	bb35      	cbnz	r5, 8010868 <__d2b+0x7c>
 801081a:	2e00      	cmp	r6, #0
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	d028      	beq.n	8010872 <__d2b+0x86>
 8010820:	4668      	mov	r0, sp
 8010822:	9600      	str	r6, [sp, #0]
 8010824:	f7ff fd10 	bl	8010248 <__lo0bits>
 8010828:	9900      	ldr	r1, [sp, #0]
 801082a:	b300      	cbz	r0, 801086e <__d2b+0x82>
 801082c:	9a01      	ldr	r2, [sp, #4]
 801082e:	f1c0 0320 	rsb	r3, r0, #32
 8010832:	fa02 f303 	lsl.w	r3, r2, r3
 8010836:	430b      	orrs	r3, r1
 8010838:	40c2      	lsrs	r2, r0
 801083a:	6163      	str	r3, [r4, #20]
 801083c:	9201      	str	r2, [sp, #4]
 801083e:	9b01      	ldr	r3, [sp, #4]
 8010840:	61a3      	str	r3, [r4, #24]
 8010842:	2b00      	cmp	r3, #0
 8010844:	bf14      	ite	ne
 8010846:	2202      	movne	r2, #2
 8010848:	2201      	moveq	r2, #1
 801084a:	6122      	str	r2, [r4, #16]
 801084c:	b1d5      	cbz	r5, 8010884 <__d2b+0x98>
 801084e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010852:	4405      	add	r5, r0
 8010854:	f8c9 5000 	str.w	r5, [r9]
 8010858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801085c:	f8c8 0000 	str.w	r0, [r8]
 8010860:	4620      	mov	r0, r4
 8010862:	b003      	add	sp, #12
 8010864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801086c:	e7d5      	b.n	801081a <__d2b+0x2e>
 801086e:	6161      	str	r1, [r4, #20]
 8010870:	e7e5      	b.n	801083e <__d2b+0x52>
 8010872:	a801      	add	r0, sp, #4
 8010874:	f7ff fce8 	bl	8010248 <__lo0bits>
 8010878:	9b01      	ldr	r3, [sp, #4]
 801087a:	6163      	str	r3, [r4, #20]
 801087c:	2201      	movs	r2, #1
 801087e:	6122      	str	r2, [r4, #16]
 8010880:	3020      	adds	r0, #32
 8010882:	e7e3      	b.n	801084c <__d2b+0x60>
 8010884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801088c:	f8c9 0000 	str.w	r0, [r9]
 8010890:	6918      	ldr	r0, [r3, #16]
 8010892:	f7ff fcb9 	bl	8010208 <__hi0bits>
 8010896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801089a:	e7df      	b.n	801085c <__d2b+0x70>
 801089c:	0801fab4 	.word	0x0801fab4
 80108a0:	0801fba8 	.word	0x0801fba8

080108a4 <__ratio>:
 80108a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a8:	468a      	mov	sl, r1
 80108aa:	4669      	mov	r1, sp
 80108ac:	4683      	mov	fp, r0
 80108ae:	f7ff ff4d 	bl	801074c <__b2d>
 80108b2:	a901      	add	r1, sp, #4
 80108b4:	4650      	mov	r0, sl
 80108b6:	ec59 8b10 	vmov	r8, r9, d0
 80108ba:	ee10 6a10 	vmov	r6, s0
 80108be:	f7ff ff45 	bl	801074c <__b2d>
 80108c2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80108c6:	f8da 2010 	ldr.w	r2, [sl, #16]
 80108ca:	eba3 0c02 	sub.w	ip, r3, r2
 80108ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80108d2:	1a9b      	subs	r3, r3, r2
 80108d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80108d8:	ec55 4b10 	vmov	r4, r5, d0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	ee10 0a10 	vmov	r0, s0
 80108e2:	bfce      	itee	gt
 80108e4:	464a      	movgt	r2, r9
 80108e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80108ea:	462a      	movle	r2, r5
 80108ec:	464f      	mov	r7, r9
 80108ee:	4629      	mov	r1, r5
 80108f0:	bfcc      	ite	gt
 80108f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80108f6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80108fa:	ec47 6b17 	vmov	d7, r6, r7
 80108fe:	ec41 0b16 	vmov	d6, r0, r1
 8010902:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8010906:	b003      	add	sp, #12
 8010908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801090c <__copybits>:
 801090c:	3901      	subs	r1, #1
 801090e:	b570      	push	{r4, r5, r6, lr}
 8010910:	1149      	asrs	r1, r1, #5
 8010912:	6914      	ldr	r4, [r2, #16]
 8010914:	3101      	adds	r1, #1
 8010916:	f102 0314 	add.w	r3, r2, #20
 801091a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801091e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010922:	1f05      	subs	r5, r0, #4
 8010924:	42a3      	cmp	r3, r4
 8010926:	d30c      	bcc.n	8010942 <__copybits+0x36>
 8010928:	1aa3      	subs	r3, r4, r2
 801092a:	3b11      	subs	r3, #17
 801092c:	f023 0303 	bic.w	r3, r3, #3
 8010930:	3211      	adds	r2, #17
 8010932:	42a2      	cmp	r2, r4
 8010934:	bf88      	it	hi
 8010936:	2300      	movhi	r3, #0
 8010938:	4418      	add	r0, r3
 801093a:	2300      	movs	r3, #0
 801093c:	4288      	cmp	r0, r1
 801093e:	d305      	bcc.n	801094c <__copybits+0x40>
 8010940:	bd70      	pop	{r4, r5, r6, pc}
 8010942:	f853 6b04 	ldr.w	r6, [r3], #4
 8010946:	f845 6f04 	str.w	r6, [r5, #4]!
 801094a:	e7eb      	b.n	8010924 <__copybits+0x18>
 801094c:	f840 3b04 	str.w	r3, [r0], #4
 8010950:	e7f4      	b.n	801093c <__copybits+0x30>

08010952 <__any_on>:
 8010952:	f100 0214 	add.w	r2, r0, #20
 8010956:	6900      	ldr	r0, [r0, #16]
 8010958:	114b      	asrs	r3, r1, #5
 801095a:	4298      	cmp	r0, r3
 801095c:	b510      	push	{r4, lr}
 801095e:	db11      	blt.n	8010984 <__any_on+0x32>
 8010960:	dd0a      	ble.n	8010978 <__any_on+0x26>
 8010962:	f011 011f 	ands.w	r1, r1, #31
 8010966:	d007      	beq.n	8010978 <__any_on+0x26>
 8010968:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801096c:	fa24 f001 	lsr.w	r0, r4, r1
 8010970:	fa00 f101 	lsl.w	r1, r0, r1
 8010974:	428c      	cmp	r4, r1
 8010976:	d10b      	bne.n	8010990 <__any_on+0x3e>
 8010978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801097c:	4293      	cmp	r3, r2
 801097e:	d803      	bhi.n	8010988 <__any_on+0x36>
 8010980:	2000      	movs	r0, #0
 8010982:	bd10      	pop	{r4, pc}
 8010984:	4603      	mov	r3, r0
 8010986:	e7f7      	b.n	8010978 <__any_on+0x26>
 8010988:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801098c:	2900      	cmp	r1, #0
 801098e:	d0f5      	beq.n	801097c <__any_on+0x2a>
 8010990:	2001      	movs	r0, #1
 8010992:	e7f6      	b.n	8010982 <__any_on+0x30>

08010994 <_calloc_r>:
 8010994:	b513      	push	{r0, r1, r4, lr}
 8010996:	434a      	muls	r2, r1
 8010998:	4611      	mov	r1, r2
 801099a:	9201      	str	r2, [sp, #4]
 801099c:	f7fb ff24 	bl	800c7e8 <_malloc_r>
 80109a0:	4604      	mov	r4, r0
 80109a2:	b118      	cbz	r0, 80109ac <_calloc_r+0x18>
 80109a4:	9a01      	ldr	r2, [sp, #4]
 80109a6:	2100      	movs	r1, #0
 80109a8:	f7fb fec6 	bl	800c738 <memset>
 80109ac:	4620      	mov	r0, r4
 80109ae:	b002      	add	sp, #8
 80109b0:	bd10      	pop	{r4, pc}

080109b2 <_realloc_r>:
 80109b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b4:	4607      	mov	r7, r0
 80109b6:	4614      	mov	r4, r2
 80109b8:	460e      	mov	r6, r1
 80109ba:	b921      	cbnz	r1, 80109c6 <_realloc_r+0x14>
 80109bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80109c0:	4611      	mov	r1, r2
 80109c2:	f7fb bf11 	b.w	800c7e8 <_malloc_r>
 80109c6:	b922      	cbnz	r2, 80109d2 <_realloc_r+0x20>
 80109c8:	f7fb febe 	bl	800c748 <_free_r>
 80109cc:	4625      	mov	r5, r4
 80109ce:	4628      	mov	r0, r5
 80109d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109d2:	f000 fa63 	bl	8010e9c <_malloc_usable_size_r>
 80109d6:	42a0      	cmp	r0, r4
 80109d8:	d20f      	bcs.n	80109fa <_realloc_r+0x48>
 80109da:	4621      	mov	r1, r4
 80109dc:	4638      	mov	r0, r7
 80109de:	f7fb ff03 	bl	800c7e8 <_malloc_r>
 80109e2:	4605      	mov	r5, r0
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d0f2      	beq.n	80109ce <_realloc_r+0x1c>
 80109e8:	4631      	mov	r1, r6
 80109ea:	4622      	mov	r2, r4
 80109ec:	f7fb fe7c 	bl	800c6e8 <memcpy>
 80109f0:	4631      	mov	r1, r6
 80109f2:	4638      	mov	r0, r7
 80109f4:	f7fb fea8 	bl	800c748 <_free_r>
 80109f8:	e7e9      	b.n	80109ce <_realloc_r+0x1c>
 80109fa:	4635      	mov	r5, r6
 80109fc:	e7e7      	b.n	80109ce <_realloc_r+0x1c>

080109fe <__ssputs_r>:
 80109fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a02:	688e      	ldr	r6, [r1, #8]
 8010a04:	429e      	cmp	r6, r3
 8010a06:	4682      	mov	sl, r0
 8010a08:	460c      	mov	r4, r1
 8010a0a:	4690      	mov	r8, r2
 8010a0c:	461f      	mov	r7, r3
 8010a0e:	d838      	bhi.n	8010a82 <__ssputs_r+0x84>
 8010a10:	898a      	ldrh	r2, [r1, #12]
 8010a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a16:	d032      	beq.n	8010a7e <__ssputs_r+0x80>
 8010a18:	6825      	ldr	r5, [r4, #0]
 8010a1a:	6909      	ldr	r1, [r1, #16]
 8010a1c:	eba5 0901 	sub.w	r9, r5, r1
 8010a20:	6965      	ldr	r5, [r4, #20]
 8010a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	444b      	add	r3, r9
 8010a2e:	106d      	asrs	r5, r5, #1
 8010a30:	429d      	cmp	r5, r3
 8010a32:	bf38      	it	cc
 8010a34:	461d      	movcc	r5, r3
 8010a36:	0553      	lsls	r3, r2, #21
 8010a38:	d531      	bpl.n	8010a9e <__ssputs_r+0xa0>
 8010a3a:	4629      	mov	r1, r5
 8010a3c:	f7fb fed4 	bl	800c7e8 <_malloc_r>
 8010a40:	4606      	mov	r6, r0
 8010a42:	b950      	cbnz	r0, 8010a5a <__ssputs_r+0x5c>
 8010a44:	230c      	movs	r3, #12
 8010a46:	f8ca 3000 	str.w	r3, [sl]
 8010a4a:	89a3      	ldrh	r3, [r4, #12]
 8010a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a50:	81a3      	strh	r3, [r4, #12]
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
 8010a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a5a:	6921      	ldr	r1, [r4, #16]
 8010a5c:	464a      	mov	r2, r9
 8010a5e:	f7fb fe43 	bl	800c6e8 <memcpy>
 8010a62:	89a3      	ldrh	r3, [r4, #12]
 8010a64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a6c:	81a3      	strh	r3, [r4, #12]
 8010a6e:	6126      	str	r6, [r4, #16]
 8010a70:	6165      	str	r5, [r4, #20]
 8010a72:	444e      	add	r6, r9
 8010a74:	eba5 0509 	sub.w	r5, r5, r9
 8010a78:	6026      	str	r6, [r4, #0]
 8010a7a:	60a5      	str	r5, [r4, #8]
 8010a7c:	463e      	mov	r6, r7
 8010a7e:	42be      	cmp	r6, r7
 8010a80:	d900      	bls.n	8010a84 <__ssputs_r+0x86>
 8010a82:	463e      	mov	r6, r7
 8010a84:	4632      	mov	r2, r6
 8010a86:	6820      	ldr	r0, [r4, #0]
 8010a88:	4641      	mov	r1, r8
 8010a8a:	f7fb fe3b 	bl	800c704 <memmove>
 8010a8e:	68a3      	ldr	r3, [r4, #8]
 8010a90:	6822      	ldr	r2, [r4, #0]
 8010a92:	1b9b      	subs	r3, r3, r6
 8010a94:	4432      	add	r2, r6
 8010a96:	60a3      	str	r3, [r4, #8]
 8010a98:	6022      	str	r2, [r4, #0]
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	e7db      	b.n	8010a56 <__ssputs_r+0x58>
 8010a9e:	462a      	mov	r2, r5
 8010aa0:	f7ff ff87 	bl	80109b2 <_realloc_r>
 8010aa4:	4606      	mov	r6, r0
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d1e1      	bne.n	8010a6e <__ssputs_r+0x70>
 8010aaa:	6921      	ldr	r1, [r4, #16]
 8010aac:	4650      	mov	r0, sl
 8010aae:	f7fb fe4b 	bl	800c748 <_free_r>
 8010ab2:	e7c7      	b.n	8010a44 <__ssputs_r+0x46>

08010ab4 <_svfiprintf_r>:
 8010ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab8:	4698      	mov	r8, r3
 8010aba:	898b      	ldrh	r3, [r1, #12]
 8010abc:	061b      	lsls	r3, r3, #24
 8010abe:	b09d      	sub	sp, #116	; 0x74
 8010ac0:	4607      	mov	r7, r0
 8010ac2:	460d      	mov	r5, r1
 8010ac4:	4614      	mov	r4, r2
 8010ac6:	d50e      	bpl.n	8010ae6 <_svfiprintf_r+0x32>
 8010ac8:	690b      	ldr	r3, [r1, #16]
 8010aca:	b963      	cbnz	r3, 8010ae6 <_svfiprintf_r+0x32>
 8010acc:	2140      	movs	r1, #64	; 0x40
 8010ace:	f7fb fe8b 	bl	800c7e8 <_malloc_r>
 8010ad2:	6028      	str	r0, [r5, #0]
 8010ad4:	6128      	str	r0, [r5, #16]
 8010ad6:	b920      	cbnz	r0, 8010ae2 <_svfiprintf_r+0x2e>
 8010ad8:	230c      	movs	r3, #12
 8010ada:	603b      	str	r3, [r7, #0]
 8010adc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae0:	e0d1      	b.n	8010c86 <_svfiprintf_r+0x1d2>
 8010ae2:	2340      	movs	r3, #64	; 0x40
 8010ae4:	616b      	str	r3, [r5, #20]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8010aea:	2320      	movs	r3, #32
 8010aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010af4:	2330      	movs	r3, #48	; 0x30
 8010af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ca0 <_svfiprintf_r+0x1ec>
 8010afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010afe:	f04f 0901 	mov.w	r9, #1
 8010b02:	4623      	mov	r3, r4
 8010b04:	469a      	mov	sl, r3
 8010b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b0a:	b10a      	cbz	r2, 8010b10 <_svfiprintf_r+0x5c>
 8010b0c:	2a25      	cmp	r2, #37	; 0x25
 8010b0e:	d1f9      	bne.n	8010b04 <_svfiprintf_r+0x50>
 8010b10:	ebba 0b04 	subs.w	fp, sl, r4
 8010b14:	d00b      	beq.n	8010b2e <_svfiprintf_r+0x7a>
 8010b16:	465b      	mov	r3, fp
 8010b18:	4622      	mov	r2, r4
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	f7ff ff6e 	bl	80109fe <__ssputs_r>
 8010b22:	3001      	adds	r0, #1
 8010b24:	f000 80aa 	beq.w	8010c7c <_svfiprintf_r+0x1c8>
 8010b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b2a:	445a      	add	r2, fp
 8010b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f000 80a2 	beq.w	8010c7c <_svfiprintf_r+0x1c8>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b42:	f10a 0a01 	add.w	sl, sl, #1
 8010b46:	9304      	str	r3, [sp, #16]
 8010b48:	9307      	str	r3, [sp, #28]
 8010b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8010b50:	4654      	mov	r4, sl
 8010b52:	2205      	movs	r2, #5
 8010b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b58:	4851      	ldr	r0, [pc, #324]	; (8010ca0 <_svfiprintf_r+0x1ec>)
 8010b5a:	f7ef fbd9 	bl	8000310 <memchr>
 8010b5e:	9a04      	ldr	r2, [sp, #16]
 8010b60:	b9d8      	cbnz	r0, 8010b9a <_svfiprintf_r+0xe6>
 8010b62:	06d0      	lsls	r0, r2, #27
 8010b64:	bf44      	itt	mi
 8010b66:	2320      	movmi	r3, #32
 8010b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b6c:	0711      	lsls	r1, r2, #28
 8010b6e:	bf44      	itt	mi
 8010b70:	232b      	movmi	r3, #43	; 0x2b
 8010b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b76:	f89a 3000 	ldrb.w	r3, [sl]
 8010b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b7c:	d015      	beq.n	8010baa <_svfiprintf_r+0xf6>
 8010b7e:	9a07      	ldr	r2, [sp, #28]
 8010b80:	4654      	mov	r4, sl
 8010b82:	2000      	movs	r0, #0
 8010b84:	f04f 0c0a 	mov.w	ip, #10
 8010b88:	4621      	mov	r1, r4
 8010b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b8e:	3b30      	subs	r3, #48	; 0x30
 8010b90:	2b09      	cmp	r3, #9
 8010b92:	d94e      	bls.n	8010c32 <_svfiprintf_r+0x17e>
 8010b94:	b1b0      	cbz	r0, 8010bc4 <_svfiprintf_r+0x110>
 8010b96:	9207      	str	r2, [sp, #28]
 8010b98:	e014      	b.n	8010bc4 <_svfiprintf_r+0x110>
 8010b9a:	eba0 0308 	sub.w	r3, r0, r8
 8010b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	9304      	str	r3, [sp, #16]
 8010ba6:	46a2      	mov	sl, r4
 8010ba8:	e7d2      	b.n	8010b50 <_svfiprintf_r+0x9c>
 8010baa:	9b03      	ldr	r3, [sp, #12]
 8010bac:	1d19      	adds	r1, r3, #4
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	9103      	str	r1, [sp, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	bfbb      	ittet	lt
 8010bb6:	425b      	neglt	r3, r3
 8010bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8010bbc:	9307      	strge	r3, [sp, #28]
 8010bbe:	9307      	strlt	r3, [sp, #28]
 8010bc0:	bfb8      	it	lt
 8010bc2:	9204      	strlt	r2, [sp, #16]
 8010bc4:	7823      	ldrb	r3, [r4, #0]
 8010bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8010bc8:	d10c      	bne.n	8010be4 <_svfiprintf_r+0x130>
 8010bca:	7863      	ldrb	r3, [r4, #1]
 8010bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8010bce:	d135      	bne.n	8010c3c <_svfiprintf_r+0x188>
 8010bd0:	9b03      	ldr	r3, [sp, #12]
 8010bd2:	1d1a      	adds	r2, r3, #4
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	9203      	str	r2, [sp, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	bfb8      	it	lt
 8010bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010be0:	3402      	adds	r4, #2
 8010be2:	9305      	str	r3, [sp, #20]
 8010be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010cb0 <_svfiprintf_r+0x1fc>
 8010be8:	7821      	ldrb	r1, [r4, #0]
 8010bea:	2203      	movs	r2, #3
 8010bec:	4650      	mov	r0, sl
 8010bee:	f7ef fb8f 	bl	8000310 <memchr>
 8010bf2:	b140      	cbz	r0, 8010c06 <_svfiprintf_r+0x152>
 8010bf4:	2340      	movs	r3, #64	; 0x40
 8010bf6:	eba0 000a 	sub.w	r0, r0, sl
 8010bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8010bfe:	9b04      	ldr	r3, [sp, #16]
 8010c00:	4303      	orrs	r3, r0
 8010c02:	3401      	adds	r4, #1
 8010c04:	9304      	str	r3, [sp, #16]
 8010c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c0a:	4826      	ldr	r0, [pc, #152]	; (8010ca4 <_svfiprintf_r+0x1f0>)
 8010c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c10:	2206      	movs	r2, #6
 8010c12:	f7ef fb7d 	bl	8000310 <memchr>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d038      	beq.n	8010c8c <_svfiprintf_r+0x1d8>
 8010c1a:	4b23      	ldr	r3, [pc, #140]	; (8010ca8 <_svfiprintf_r+0x1f4>)
 8010c1c:	bb1b      	cbnz	r3, 8010c66 <_svfiprintf_r+0x1b2>
 8010c1e:	9b03      	ldr	r3, [sp, #12]
 8010c20:	3307      	adds	r3, #7
 8010c22:	f023 0307 	bic.w	r3, r3, #7
 8010c26:	3308      	adds	r3, #8
 8010c28:	9303      	str	r3, [sp, #12]
 8010c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c2c:	4433      	add	r3, r6
 8010c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c30:	e767      	b.n	8010b02 <_svfiprintf_r+0x4e>
 8010c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c36:	460c      	mov	r4, r1
 8010c38:	2001      	movs	r0, #1
 8010c3a:	e7a5      	b.n	8010b88 <_svfiprintf_r+0xd4>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	3401      	adds	r4, #1
 8010c40:	9305      	str	r3, [sp, #20]
 8010c42:	4619      	mov	r1, r3
 8010c44:	f04f 0c0a 	mov.w	ip, #10
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c4e:	3a30      	subs	r2, #48	; 0x30
 8010c50:	2a09      	cmp	r2, #9
 8010c52:	d903      	bls.n	8010c5c <_svfiprintf_r+0x1a8>
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d0c5      	beq.n	8010be4 <_svfiprintf_r+0x130>
 8010c58:	9105      	str	r1, [sp, #20]
 8010c5a:	e7c3      	b.n	8010be4 <_svfiprintf_r+0x130>
 8010c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c60:	4604      	mov	r4, r0
 8010c62:	2301      	movs	r3, #1
 8010c64:	e7f0      	b.n	8010c48 <_svfiprintf_r+0x194>
 8010c66:	ab03      	add	r3, sp, #12
 8010c68:	9300      	str	r3, [sp, #0]
 8010c6a:	462a      	mov	r2, r5
 8010c6c:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <_svfiprintf_r+0x1f8>)
 8010c6e:	a904      	add	r1, sp, #16
 8010c70:	4638      	mov	r0, r7
 8010c72:	f7fb fffd 	bl	800cc70 <_printf_float>
 8010c76:	1c42      	adds	r2, r0, #1
 8010c78:	4606      	mov	r6, r0
 8010c7a:	d1d6      	bne.n	8010c2a <_svfiprintf_r+0x176>
 8010c7c:	89ab      	ldrh	r3, [r5, #12]
 8010c7e:	065b      	lsls	r3, r3, #25
 8010c80:	f53f af2c 	bmi.w	8010adc <_svfiprintf_r+0x28>
 8010c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c86:	b01d      	add	sp, #116	; 0x74
 8010c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8c:	ab03      	add	r3, sp, #12
 8010c8e:	9300      	str	r3, [sp, #0]
 8010c90:	462a      	mov	r2, r5
 8010c92:	4b06      	ldr	r3, [pc, #24]	; (8010cac <_svfiprintf_r+0x1f8>)
 8010c94:	a904      	add	r1, sp, #16
 8010c96:	4638      	mov	r0, r7
 8010c98:	f7fc fa76 	bl	800d188 <_printf_i>
 8010c9c:	e7eb      	b.n	8010c76 <_svfiprintf_r+0x1c2>
 8010c9e:	bf00      	nop
 8010ca0:	0801f890 	.word	0x0801f890
 8010ca4:	0801f89a 	.word	0x0801f89a
 8010ca8:	0800cc71 	.word	0x0800cc71
 8010cac:	080109ff 	.word	0x080109ff
 8010cb0:	0801f896 	.word	0x0801f896
 8010cb4:	00000000 	.word	0x00000000

08010cb8 <nan>:
 8010cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010cc0 <nan+0x8>
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	00000000 	.word	0x00000000
 8010cc4:	7ff80000 	.word	0x7ff80000

08010cc8 <_raise_r>:
 8010cc8:	291f      	cmp	r1, #31
 8010cca:	b538      	push	{r3, r4, r5, lr}
 8010ccc:	4604      	mov	r4, r0
 8010cce:	460d      	mov	r5, r1
 8010cd0:	d904      	bls.n	8010cdc <_raise_r+0x14>
 8010cd2:	2316      	movs	r3, #22
 8010cd4:	6003      	str	r3, [r0, #0]
 8010cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cda:	bd38      	pop	{r3, r4, r5, pc}
 8010cdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010cde:	b112      	cbz	r2, 8010ce6 <_raise_r+0x1e>
 8010ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ce4:	b94b      	cbnz	r3, 8010cfa <_raise_r+0x32>
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f000 f830 	bl	8010d4c <_getpid_r>
 8010cec:	462a      	mov	r2, r5
 8010cee:	4601      	mov	r1, r0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cf6:	f000 b817 	b.w	8010d28 <_kill_r>
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d00a      	beq.n	8010d14 <_raise_r+0x4c>
 8010cfe:	1c59      	adds	r1, r3, #1
 8010d00:	d103      	bne.n	8010d0a <_raise_r+0x42>
 8010d02:	2316      	movs	r3, #22
 8010d04:	6003      	str	r3, [r0, #0]
 8010d06:	2001      	movs	r0, #1
 8010d08:	e7e7      	b.n	8010cda <_raise_r+0x12>
 8010d0a:	2400      	movs	r4, #0
 8010d0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d10:	4628      	mov	r0, r5
 8010d12:	4798      	blx	r3
 8010d14:	2000      	movs	r0, #0
 8010d16:	e7e0      	b.n	8010cda <_raise_r+0x12>

08010d18 <raise>:
 8010d18:	4b02      	ldr	r3, [pc, #8]	; (8010d24 <raise+0xc>)
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	f7ff bfd3 	b.w	8010cc8 <_raise_r>
 8010d22:	bf00      	nop
 8010d24:	2400a0c8 	.word	0x2400a0c8

08010d28 <_kill_r>:
 8010d28:	b538      	push	{r3, r4, r5, lr}
 8010d2a:	4d07      	ldr	r5, [pc, #28]	; (8010d48 <_kill_r+0x20>)
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	4604      	mov	r4, r0
 8010d30:	4608      	mov	r0, r1
 8010d32:	4611      	mov	r1, r2
 8010d34:	602b      	str	r3, [r5, #0]
 8010d36:	f7f0 fe45 	bl	80019c4 <_kill>
 8010d3a:	1c43      	adds	r3, r0, #1
 8010d3c:	d102      	bne.n	8010d44 <_kill_r+0x1c>
 8010d3e:	682b      	ldr	r3, [r5, #0]
 8010d40:	b103      	cbz	r3, 8010d44 <_kill_r+0x1c>
 8010d42:	6023      	str	r3, [r4, #0]
 8010d44:	bd38      	pop	{r3, r4, r5, pc}
 8010d46:	bf00      	nop
 8010d48:	2400ab5c 	.word	0x2400ab5c

08010d4c <_getpid_r>:
 8010d4c:	f7f0 be32 	b.w	80019b4 <_getpid>

08010d50 <__sread>:
 8010d50:	b510      	push	{r4, lr}
 8010d52:	460c      	mov	r4, r1
 8010d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d58:	f000 f8a8 	bl	8010eac <_read_r>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	bfab      	itete	ge
 8010d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d62:	89a3      	ldrhlt	r3, [r4, #12]
 8010d64:	181b      	addge	r3, r3, r0
 8010d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d6a:	bfac      	ite	ge
 8010d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d6e:	81a3      	strhlt	r3, [r4, #12]
 8010d70:	bd10      	pop	{r4, pc}

08010d72 <__swrite>:
 8010d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d76:	461f      	mov	r7, r3
 8010d78:	898b      	ldrh	r3, [r1, #12]
 8010d7a:	05db      	lsls	r3, r3, #23
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	4616      	mov	r6, r2
 8010d82:	d505      	bpl.n	8010d90 <__swrite+0x1e>
 8010d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d88:	2302      	movs	r3, #2
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f000 f874 	bl	8010e78 <_lseek_r>
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d9a:	81a3      	strh	r3, [r4, #12]
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	463b      	mov	r3, r7
 8010da0:	4628      	mov	r0, r5
 8010da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010da6:	f000 b823 	b.w	8010df0 <_write_r>

08010daa <__sseek>:
 8010daa:	b510      	push	{r4, lr}
 8010dac:	460c      	mov	r4, r1
 8010dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010db2:	f000 f861 	bl	8010e78 <_lseek_r>
 8010db6:	1c43      	adds	r3, r0, #1
 8010db8:	89a3      	ldrh	r3, [r4, #12]
 8010dba:	bf15      	itete	ne
 8010dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dc6:	81a3      	strheq	r3, [r4, #12]
 8010dc8:	bf18      	it	ne
 8010dca:	81a3      	strhne	r3, [r4, #12]
 8010dcc:	bd10      	pop	{r4, pc}

08010dce <__sclose>:
 8010dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd2:	f000 b81f 	b.w	8010e14 <_close_r>

08010dd6 <__ascii_wctomb>:
 8010dd6:	b149      	cbz	r1, 8010dec <__ascii_wctomb+0x16>
 8010dd8:	2aff      	cmp	r2, #255	; 0xff
 8010dda:	bf85      	ittet	hi
 8010ddc:	238a      	movhi	r3, #138	; 0x8a
 8010dde:	6003      	strhi	r3, [r0, #0]
 8010de0:	700a      	strbls	r2, [r1, #0]
 8010de2:	f04f 30ff 	movhi.w	r0, #4294967295
 8010de6:	bf98      	it	ls
 8010de8:	2001      	movls	r0, #1
 8010dea:	4770      	bx	lr
 8010dec:	4608      	mov	r0, r1
 8010dee:	4770      	bx	lr

08010df0 <_write_r>:
 8010df0:	b538      	push	{r3, r4, r5, lr}
 8010df2:	4d07      	ldr	r5, [pc, #28]	; (8010e10 <_write_r+0x20>)
 8010df4:	4604      	mov	r4, r0
 8010df6:	4608      	mov	r0, r1
 8010df8:	4611      	mov	r1, r2
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	602a      	str	r2, [r5, #0]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	f7f0 fe17 	bl	8001a32 <_write>
 8010e04:	1c43      	adds	r3, r0, #1
 8010e06:	d102      	bne.n	8010e0e <_write_r+0x1e>
 8010e08:	682b      	ldr	r3, [r5, #0]
 8010e0a:	b103      	cbz	r3, 8010e0e <_write_r+0x1e>
 8010e0c:	6023      	str	r3, [r4, #0]
 8010e0e:	bd38      	pop	{r3, r4, r5, pc}
 8010e10:	2400ab5c 	.word	0x2400ab5c

08010e14 <_close_r>:
 8010e14:	b538      	push	{r3, r4, r5, lr}
 8010e16:	4d06      	ldr	r5, [pc, #24]	; (8010e30 <_close_r+0x1c>)
 8010e18:	2300      	movs	r3, #0
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	4608      	mov	r0, r1
 8010e1e:	602b      	str	r3, [r5, #0]
 8010e20:	f7f0 fe23 	bl	8001a6a <_close>
 8010e24:	1c43      	adds	r3, r0, #1
 8010e26:	d102      	bne.n	8010e2e <_close_r+0x1a>
 8010e28:	682b      	ldr	r3, [r5, #0]
 8010e2a:	b103      	cbz	r3, 8010e2e <_close_r+0x1a>
 8010e2c:	6023      	str	r3, [r4, #0]
 8010e2e:	bd38      	pop	{r3, r4, r5, pc}
 8010e30:	2400ab5c 	.word	0x2400ab5c

08010e34 <_fstat_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4d07      	ldr	r5, [pc, #28]	; (8010e54 <_fstat_r+0x20>)
 8010e38:	2300      	movs	r3, #0
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	4608      	mov	r0, r1
 8010e3e:	4611      	mov	r1, r2
 8010e40:	602b      	str	r3, [r5, #0]
 8010e42:	f7f0 fe1e 	bl	8001a82 <_fstat>
 8010e46:	1c43      	adds	r3, r0, #1
 8010e48:	d102      	bne.n	8010e50 <_fstat_r+0x1c>
 8010e4a:	682b      	ldr	r3, [r5, #0]
 8010e4c:	b103      	cbz	r3, 8010e50 <_fstat_r+0x1c>
 8010e4e:	6023      	str	r3, [r4, #0]
 8010e50:	bd38      	pop	{r3, r4, r5, pc}
 8010e52:	bf00      	nop
 8010e54:	2400ab5c 	.word	0x2400ab5c

08010e58 <_isatty_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4d06      	ldr	r5, [pc, #24]	; (8010e74 <_isatty_r+0x1c>)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	4604      	mov	r4, r0
 8010e60:	4608      	mov	r0, r1
 8010e62:	602b      	str	r3, [r5, #0]
 8010e64:	f7f0 fe1d 	bl	8001aa2 <_isatty>
 8010e68:	1c43      	adds	r3, r0, #1
 8010e6a:	d102      	bne.n	8010e72 <_isatty_r+0x1a>
 8010e6c:	682b      	ldr	r3, [r5, #0]
 8010e6e:	b103      	cbz	r3, 8010e72 <_isatty_r+0x1a>
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	2400ab5c 	.word	0x2400ab5c

08010e78 <_lseek_r>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	4d07      	ldr	r5, [pc, #28]	; (8010e98 <_lseek_r+0x20>)
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	4608      	mov	r0, r1
 8010e80:	4611      	mov	r1, r2
 8010e82:	2200      	movs	r2, #0
 8010e84:	602a      	str	r2, [r5, #0]
 8010e86:	461a      	mov	r2, r3
 8010e88:	f7f0 fe16 	bl	8001ab8 <_lseek>
 8010e8c:	1c43      	adds	r3, r0, #1
 8010e8e:	d102      	bne.n	8010e96 <_lseek_r+0x1e>
 8010e90:	682b      	ldr	r3, [r5, #0]
 8010e92:	b103      	cbz	r3, 8010e96 <_lseek_r+0x1e>
 8010e94:	6023      	str	r3, [r4, #0]
 8010e96:	bd38      	pop	{r3, r4, r5, pc}
 8010e98:	2400ab5c 	.word	0x2400ab5c

08010e9c <_malloc_usable_size_r>:
 8010e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ea0:	1f18      	subs	r0, r3, #4
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	bfbc      	itt	lt
 8010ea6:	580b      	ldrlt	r3, [r1, r0]
 8010ea8:	18c0      	addlt	r0, r0, r3
 8010eaa:	4770      	bx	lr

08010eac <_read_r>:
 8010eac:	b538      	push	{r3, r4, r5, lr}
 8010eae:	4d07      	ldr	r5, [pc, #28]	; (8010ecc <_read_r+0x20>)
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	4608      	mov	r0, r1
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	602a      	str	r2, [r5, #0]
 8010eba:	461a      	mov	r2, r3
 8010ebc:	f7f0 fd9c 	bl	80019f8 <_read>
 8010ec0:	1c43      	adds	r3, r0, #1
 8010ec2:	d102      	bne.n	8010eca <_read_r+0x1e>
 8010ec4:	682b      	ldr	r3, [r5, #0]
 8010ec6:	b103      	cbz	r3, 8010eca <_read_r+0x1e>
 8010ec8:	6023      	str	r3, [r4, #0]
 8010eca:	bd38      	pop	{r3, r4, r5, pc}
 8010ecc:	2400ab5c 	.word	0x2400ab5c

08010ed0 <fmax>:
 8010ed0:	b508      	push	{r3, lr}
 8010ed2:	ed2d 8b04 	vpush	{d8-d9}
 8010ed6:	eeb0 8b40 	vmov.f64	d8, d0
 8010eda:	eeb0 9b41 	vmov.f64	d9, d1
 8010ede:	f000 f813 	bl	8010f08 <__fpclassifyd>
 8010ee2:	b148      	cbz	r0, 8010ef8 <fmax+0x28>
 8010ee4:	eeb0 0b49 	vmov.f64	d0, d9
 8010ee8:	f000 f80e 	bl	8010f08 <__fpclassifyd>
 8010eec:	b130      	cbz	r0, 8010efc <fmax+0x2c>
 8010eee:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef6:	dc01      	bgt.n	8010efc <fmax+0x2c>
 8010ef8:	eeb0 8b49 	vmov.f64	d8, d9
 8010efc:	eeb0 0b48 	vmov.f64	d0, d8
 8010f00:	ecbd 8b04 	vpop	{d8-d9}
 8010f04:	bd08      	pop	{r3, pc}
	...

08010f08 <__fpclassifyd>:
 8010f08:	ec51 0b10 	vmov	r0, r1, d0
 8010f0c:	b510      	push	{r4, lr}
 8010f0e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8010f12:	460b      	mov	r3, r1
 8010f14:	d019      	beq.n	8010f4a <__fpclassifyd+0x42>
 8010f16:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8010f1a:	490e      	ldr	r1, [pc, #56]	; (8010f54 <__fpclassifyd+0x4c>)
 8010f1c:	428a      	cmp	r2, r1
 8010f1e:	d90e      	bls.n	8010f3e <__fpclassifyd+0x36>
 8010f20:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8010f24:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8010f28:	428a      	cmp	r2, r1
 8010f2a:	d908      	bls.n	8010f3e <__fpclassifyd+0x36>
 8010f2c:	4a0a      	ldr	r2, [pc, #40]	; (8010f58 <__fpclassifyd+0x50>)
 8010f2e:	4213      	tst	r3, r2
 8010f30:	d007      	beq.n	8010f42 <__fpclassifyd+0x3a>
 8010f32:	4294      	cmp	r4, r2
 8010f34:	d107      	bne.n	8010f46 <__fpclassifyd+0x3e>
 8010f36:	fab0 f080 	clz	r0, r0
 8010f3a:	0940      	lsrs	r0, r0, #5
 8010f3c:	bd10      	pop	{r4, pc}
 8010f3e:	2004      	movs	r0, #4
 8010f40:	e7fc      	b.n	8010f3c <__fpclassifyd+0x34>
 8010f42:	2003      	movs	r0, #3
 8010f44:	e7fa      	b.n	8010f3c <__fpclassifyd+0x34>
 8010f46:	2000      	movs	r0, #0
 8010f48:	e7f8      	b.n	8010f3c <__fpclassifyd+0x34>
 8010f4a:	2800      	cmp	r0, #0
 8010f4c:	d1ee      	bne.n	8010f2c <__fpclassifyd+0x24>
 8010f4e:	2002      	movs	r0, #2
 8010f50:	e7f4      	b.n	8010f3c <__fpclassifyd+0x34>
 8010f52:	bf00      	nop
 8010f54:	7fdfffff 	.word	0x7fdfffff
 8010f58:	7ff00000 	.word	0x7ff00000

08010f5c <_init>:
 8010f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f5e:	bf00      	nop
 8010f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f62:	bc08      	pop	{r3}
 8010f64:	469e      	mov	lr, r3
 8010f66:	4770      	bx	lr

08010f68 <_fini>:
 8010f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6a:	bf00      	nop
 8010f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f6e:	bc08      	pop	{r3}
 8010f70:	469e      	mov	lr, r3
 8010f72:	4770      	bx	lr
